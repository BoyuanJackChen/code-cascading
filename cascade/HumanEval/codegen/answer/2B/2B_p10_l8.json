[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(numbers)-1):\n        if numbers[i+1]-numbers[i] <= threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i] == numbers[i + 1]:\n            return True\n        elif (numbers[i] + threshold) <= numbers[i + 1] or (numbers[i] - threshold) >= numbers[i + 1]:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return any(abs(n - e) < threshold for e, n in zip(numbers[:-1], numbers[1:]))\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i, n1 in enumerate(numbers):\n        for j in range(i+1, len(numbers)):\n            if abs(n1 - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(numbers) < 2:\n        return False\n    \n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i]-numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) <= threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] <= threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    num_pairs = 0\n    for index_i in range(0, len(numbers)-1):\n        for index_j in range(index_i+1, len(numbers)):\n            if abs(numbers[index_i] - numbers[index_j]) < threshold:\n                num_pairs += 1\n    return num_pairs > 2\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n    cur_string = \"\"\n    cur_open_bracket = None\n    for char in paren_string:\n        if char == \"(\":\n            cur_open_bracket = \"(\"\n        elif char == \")\":\n            if cur_open_bracket is not None:\n                cur_open_bracket = None\n                cur_string += char\n            else:\n                result.append(cur_string)\n                cur_string = \"\"\n    if cur_open_bracket is not None:\n        result.append(cur_string)\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    paren_list = list(paren_string.split(' '))\n    paren_list = [x.replace('(', '').replace(')', '') for x in paren_list]\n    paren_list = [x for x in paren_list if len(x) > 0]\n    return paren_list\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    paren_string = paren_string.replace(' ', '')\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # pattern = r'(\\([^()]*\\))'\n    pattern = r'[\\(\\)][\\(\\)]*[^()]+[^\\([\\)]*\\([\\)\\)]*'\n    matches = re.findall(pattern, paren_string)\n    return matches\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    paren_list = []\n    for paren in paren_string.split(\" \"):\n        paren_list.append(paren.strip())\n    return paren_list\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    paren_string = ''.join(paren_string.split())\n    paren_group_strings = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            current_group.append(char)\n        elif char == ')':\n            if len(current_group) > 0:\n                current_group.pop()\n        else:\n            current_group.append(char)\n        if len(current_group) == 0:\n            paren_group_strings.append(''.join(current_group))\n    return paren_group_strings\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    paren_string = paren_string.replace(' ','')\n    groups = []\n    group = ''\n    for i in paren_string:\n        if i == '(':\n            group += i\n        elif i == ')':\n            group += i\n            groups.append(group)\n            group = ''\n    return groups\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    paren_list = []\n    char = paren_string[0]\n    paren_list.append(char)\n    for char in paren_string[1:]:\n        if char == ')' and char == paren_list[-1]:\n            paren_list.pop()\n        else:\n            paren_list.append(char)\n    return paren_list\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    paren_stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append('(')\n        elif char == ')':\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                paren_stack.append(')')\n    result.append(''.join(paren_stack))\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if paren_string == '':\n        return []\n    # keep the opening bracket and position of the first opening bracket in the list\n    opening_brackets = []\n    position = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            opening_brackets.append(i)\n        elif paren_string[i] == ')':\n            if opening_brackets!= []:\n                opening_brackets.pop()\n        position = i\n    # delete all the ')'\n    new_string = paren_string[0:position] + paren_string[position+1::]\n    # remove the opening brackets\n    new_string = new_string.replace('(', '')\n    new_string = new_string.replace(')', '')\n    # split the string by ','\n    new_string = new_string.split(',')\n    # return a list of the resulting strings\n    return new_string\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if number < 0:\n        number = -number\n        integer_part = -1\n    else:\n        integer_part = 0\n    \n    while number >= 1:\n        number *= 10\n        integer_part += 1\n        decimal_part = number - integer_part\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    integer = math.floor(number)\n    decimal = number - integer\n    return decimal\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    integer = int(number)\n    decimal = number - integer\n    return decimal\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Decimal part of the number\n    decimal = 0\n    # Do the integer part\n    integer = math.floor(number)\n    # Find the decimal part\n    # Note: the decimal part can be positive or negative\n    decimal = abs(number - integer)\n    return decimal\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    int_part = int(number)\n    return number - int_part\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    integer_part, decimal_part = math.modf(number)\n    decimal_part = round(decimal_part, 10)\n    return decimal_part\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    integer = int(number)\n    decimal = number - integer\n    return decimal\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    i, dec = divmod(number, 1)\n    return dec\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # extract whole part\n    whole_part = int(number)\n    # extract decimal part\n    decimal_part = abs(number - whole_part)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return math.trunc(number)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    balance = 0\n    for i in operations:\n        if i > 0:\n            balance += i\n        elif i < 0:\n            balance -= i\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not operations:\n        return False\n    balance = 0\n    for operation in operations:\n        if operation >= 0:\n            balance += operation\n        else:\n            balance -= operation\n    if balance < 0:\n        return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    below = 0\n    for i in range(len(operations)):\n        if i == 0:\n            below = operations[i]\n        if i == 1:\n            below = below + operations[i]\n        if i == 2:\n            below = below - operations[i]\n        if i == 3:\n            below = below - operations[i]\n        if below < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total = 0\n    for operation in operations:\n        if total + operation < 0:\n            return True\n        total += operation\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(operations) - 1):\n        if operations[i] * operations[i + 1] <= 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    balance = 0\n    for op in operations:\n        if op < 0:\n            balance = 0\n        else:\n            balance += op\n    return balance <= 0\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    balance = 0\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    curr_balance = 0\n    for op in operations:\n        curr_balance += op\n        if curr_balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    bal = 0\n    for i in operations:\n        bal += i\n        if bal < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    total_balance = 0\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    mean = mean_absolute_deviation_of_list_to_given_mean(numbers)\n    return mean_absolute_deviation_of_list_to_given_mean(numbers) - mean\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([abs(i - mean(numbers)) for i in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not numbers:\n        raise ValueError('No input numbers!')\n    \n    mean = sum(numbers) / len(numbers)\n    res = 0.0\n    for num in numbers:\n        res += abs(num - mean)\n    return res / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Compute Mean:\n    mean = sum(numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    numbers = list(numbers)\n    mean = sum(numbers) / len(numbers)\n    mads = []\n    for n in numbers:\n        mads.append(abs(mean - n))\n    return sum(mads) / len(mads)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(numbers) == 1:\n        return 0\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    numbers.sort()\n    n = len(numbers)\n    if n == 1:\n        return 0\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not numbers:\n        raise ValueError('Cannot calculate MAD with empty input')\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Centerpoint of the dataset\n    centerpoint = mean(numbers)\n    # Difference from the centerpoint\n    differences = map(lambda x: x - centerpoint, numbers)\n    # Calculate mean of the difference\n    mdd = mean(differences)\n    return mdd\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    output: List[int] = []\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            output.append(numbers[i])\n            output.append(delimeter)\n        else:\n            output.append(numbers[i])\n    return output\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not numbers:\n        return []\n    \n    i = 0\n    new_numbers = []\n    while i < len(numbers):\n        if i == len(numbers) - 1:\n            new_numbers.append(numbers[i])\n            break\n        new_numbers.append(numbers[i])\n        new_numbers.append(delimeter)\n        i += 2\n    return new_numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(numbers) == 0:\n        return numbers\n    elif len(numbers) == 1:\n        return [delimeter] + numbers\n    else:\n        num_delimeters = int((len(numbers)-1) / 2) + 1\n        return ([delimeter] * num_delimeters) + numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    new_list = []\n    if len(numbers) < 2:\n        return numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return numbers + (delimeter - 1) * [delimeter]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(1, len(numbers)):\n        yield numbers[i - 1]\n        yield delimeter\n        yield numbers[i]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = []\n    for i, e in enumerate(numbers):\n        result.append(e)\n        if i == len(numbers) - 1:\n            break\n        result.append(delimeter)\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Check input data type\n    if type(numbers) is not list:\n        raise TypeError(\"Input must be a list of integers\")\n    if len(numbers) == 0:\n        return numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not numbers:\n        return []\n    n = len(numbers)\n    if n == 1:\n        return numbers\n    return (n * [numbers[0]] + n * [delimeter] + numbers[1:-1] + n * [numbers[-1]])\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = []\n    if len(numbers) < 2:\n        return result\n    result.extend(numbers[0:2])\n    for i in range(2, len(numbers), 2):\n        result.append(delimeter)\n        result.extend(numbers[i:i+2])\n    result.append(delimeter)\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    out_list = []\n    paren_index = 0\n    while paren_index < len(paren_string):\n        if paren_string[paren_index] == \"(\":\n            paren_stack = []\n            paren_index += 1\n            while paren_string[paren_index]!= \")\":\n                paren_stack.append(paren_string[paren_index])\n                paren_index += 1\n            paren_stack = paren_stack[::-1]\n            paren_index += 1\n            out_list.append(len(paren_stack))\n        else:\n            paren_index += 1\n    return out_list\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    nested_parens = {}\n    num_level = 0\n    index = 0\n    while index < len(paren_string):\n        paren = paren_string[index]\n        index += 1\n        if paren in '({[':\n            nested_parens[paren] = num_level\n        elif paren in ')])':\n            if num_level == 0:\n                return list(nested_parens.values())\n            else:\n                last_open_paren = paren_string[index - 1]\n                index += 1\n                if nested_parens[last_open_paren] == nested_parens[paren]:\n                    return list(nested_parens.values())\n                else:\n                    num_level -= 1\n    return list(nested_parens.values())\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    paren_dict = {\")\": \"(\", \"}\": \"{\", \")\": \"(\"}\n    stack = []\n    string_list = paren_string.split()\n    for token in string_list:\n        if token in paren_dict:\n            stack.append(paren_dict[token])\n        elif token == \"(\":\n            stack.append(1)\n        elif token == \")\":\n            if stack:\n                stack.pop()\n            else:\n                return []\n        elif token == \"}\":\n            if stack:\n                while stack and stack[-1]!= \"{\":\n                    stack.pop()\n                stack.pop()\n            else:\n                return []\n    return stack\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    parens = []\n    level = 0\n    for paren in paren_string:\n        if paren == '(':\n            level += 1\n            parens.append(level)\n        elif paren == ')':\n            level -= 1\n            if level == -1:\n                parens.append(level)\n                break\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # TODO: write your code here\n    cur_level = 0\n    max_level = 0\n    max_nesting_depth = 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # your code here\n    parens = paren_string.split(' ')\n    depth = 0\n    max_depth = 0\n    max_level = 0\n    for p in parens:\n        if p == ')':\n            depth -= 1\n        elif p == '(':\n            depth += 1\n        if depth > max_depth:\n            max_depth = depth\n            max_level = len(p)\n    return[max_depth, max_level]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    paren_list = paren_string.split()\n    nested_parens = []\n    for i in range(len(paren_list)):\n        if paren_list[i] == \"(\":\n            nested_parens.append(0)\n        else:\n            nested_parens.append(1)\n    return nested_parens\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #list of nested levels\n    level_list = []\n    # string for finding depth\n    string_for_depth = \"(\"\n    # depth counter\n    depth = 0\n    # nested grouping flag\n    in_group = False\n    # storing depth of nested brackets\n    for char in paren_string:\n        if char == \"(\":\n            #set flag as True when we reach inner level of brackets\n            in_group = True\n            #increment depth counter\n            depth += 1\n        elif char == \")\":\n            # set flag as False when we reach outer level of brackets\n            in_group = False\n            # if inner level is present, decrease depth\n            if in_group:\n                depth -= 1\n        if in_group and depth == 0:\n            level_list.append(depth)\n    return level_list\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # an empty string is considered to be a valid number\n    # if there is a single character, it is a number and not a nested paren\n    if len(paren_string) == 1:\n        return [1]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    paren_list = []\n    for paren in paren_string.split():\n        paren_list.append(len(paren))\n    return paren_list\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return list(filter(lambda x: x.find(substring)!= -1, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    filtered_str_lst = []\n    for string in strings:\n        if substring in string:\n            filtered_str_lst.append(string)\n    return filtered_str_lst\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(filter(lambda string: substring in string, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(filter(lambda string: substring in string, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    elif len(numbers) == 1:\n        return (numbers[0], numbers[0])\n    else:\n        return (numbers[0] + sum_product(numbers[1:])[0], numbers[0] * sum_product(numbers[1:])[1])\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # TODO: complete this function\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        s = 0\n        p = 1\n        for n in numbers:\n            s += n\n            p *= n\n        return (s, p)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Calculate the sum\n    sum = 0\n    for number in numbers:\n        sum = sum + number\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not numbers:\n        return (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(numbers), prod(numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = 0, 1\n    for i in numbers:\n        result = result[0] + i, result[1] * i\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sum_ = 0\n    product = 1\n    for n in numbers:\n        sum_ += n\n        product *= n\n    return (sum_, product)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (sum(numbers), reduce(lambda a, b: a * b, numbers, 1))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not numbers:\n        return (0, 1)\n    else:\n        return (numbers[0], numbers[0] * sum(numbers[1:]))\n    # Add your code here\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        sum_list = 0\n        product_list = 1\n        for i in range(len(numbers)):\n            sum_list += numbers[i]\n            product_list *= numbers[i]\n        return (sum_list, product_list)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result: List[int] = []\n    result.append(max(numbers))\n    for i in range(len(numbers) - 1):\n        result.append(max(result[i], numbers[i+1]))\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    max_value = None\n    result = []\n    for x in numbers:\n        if max_value is None or x > max_value:\n            max_value = x\n        result.append(max_value)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(reversed([max(numbers[i:]) for i in range(len(numbers))]))\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    list_max = []\n    max = numbers[0]\n    for i in range(len(numbers)):\n        if max < numbers[i]:\n            max = numbers[i]\n        list_max.append(max)\n    return list_max\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    rolling_max_list = []\n    for i in range(len(numbers)):\n        curr_max = max(numbers[:i+1])\n        rolling_max_list.append(curr_max)\n        numbers = numbers[i+1:]\n    return rolling_max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l = []\n    for i in range(len(numbers)):\n        if len(l) == 0:\n            l.append(numbers[i])\n        else:\n            l.append(max(l[-1], numbers[i]))\n    return l\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    maxes = []\n    for i in range(len(numbers)):\n        maxes.append(max(numbers[i : i+numbers_len]))\n    return maxes\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    output = numbers[0]\n    max_nums = [output]\n    for num in numbers[1:]:\n        if num > output:\n            output = num\n            max_nums.append(output)\n        else:\n            output = max_nums[-1]\n    return max_nums\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max_values = []\n    for index in range(len(numbers)):\n        if index == 0:\n            max_values.append(numbers[index])\n        else:\n            max_values.append(max(max_values[index - 1], numbers[index]))\n    return max_values\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(string) == 1:\n        return string\n    l_pali = find_palindrome(string)\n    return l_pali + string[:len(l_pali) - 1:-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    max_len = 0\n    max_prefix = ''\n    for i in range(len(string)):\n        sub_str = string[i:]\n        while is_palindrome(sub_str):\n            sub_str = sub_str[:-1]\n            if len(sub_str) > max_len:\n                max_len = len(sub_str)\n                max_prefix = sub_str[:i]\n    return max_prefix + string + max_prefix[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Assume it's a non-empty string, so just return it\n    if len(string) == 0:\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not string:\n        return string\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[:i] + string[i:]\n    return string[0] + make_palindrome(string[1:])\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    postfix = suffix_array(string)\n    for i in postfix:\n        s = string[:i] + string[i+1:]\n        if is_palindrome(s):\n            return s\n    return ''\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    suffix = suffix_palindrome(string)\n    # print(f'Suffix: {suffix}')\n    if not suffix:\n        return string\n    else:\n        pre = string[:suffix]\n        mid = string[suffix+1:]\n        return pre + mid[::-1] + mid\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    max_prefix = None\n    max_suffix = None\n    for prefix_len in range(len(string), -1, -1):\n        prefix = string[:prefix_len]\n        suffix = string[prefix_len:]\n        if is_palindrome(prefix):\n            max_suffix = suffix\n            max_prefix = prefix\n            break\n    return (max_prefix + max_suffix)[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(string) <= 1:\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Get longest palindrome\n    start, end = (0, 0)\n    while True:\n        if is_palindrome(string[start:end]):\n            start, end = (start + 1, end - 1)\n        else:\n            break\n    # Reverse string and prepend prefix\n    return string[:start] + string[end:][::-1] + string[start:end]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # base case\n    if len(string) <= 1:\n        return string\n    # look for palindromic prefix\n    for i in range(len(string)):\n        # check if the prefix is a palindrome\n        if is_palindrome(string[i:]):\n            # find the suffix\n            prefix = string[:i]\n            break\n    # find the suffix\n    suffix = ''\n    for j in range(len(string)):\n        suffix = string[j:][::-1] + suffix\n    # append the suffix and return the result\n    return prefix + suffix\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    output = \"\"\n    a = a.encode()\n    b = b.encode()\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            output += '0'\n        else:\n            output += '1'\n    return output\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = ''\n    if a == '0' and b == '0':\n        return '0'\n    elif a == '1' and b == '1':\n        return '1'\n    else:\n        for i in range(len(a)):\n            if a[i]!= b[i]:\n                result = result + '1'\n            else:\n                result = result + '0'\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"\".join([(a[i]!= b[i]) for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert isinstance(a, str), f\"Error: a must be a string, not {type(a)}\"\n    assert isinstance(b, str), f\"Error: b must be a string, not {type(b)}\"\n    assert len(a) == len(b), f\"Error: len(a) must be equal to len(b), not {len(a)} and {len(b)}.\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    a_len = len(a)\n    b_len = len(b)\n    if a_len!= b_len:\n        raise ValueError(\n            f'Length of both strings must be the same. Got {a_len} and {b_len}')\n    result = \"\"\n    for i in range(a_len):\n        result += str((int(a[i]) ^ int(b[i])))\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    a = int(a, 2)\n    b = int(b, 2)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return ''.join([format(int(i) ^ int(j), '08b') for i, j in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return ''.join([str(int(a) ^ int(b))])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        s = strings[0]\n        for i in range(1,len(strings)):\n            if len(s) < len(strings[i]):\n                s = strings[i]\n        return s\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if strings == []:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if strings:\n        return max(strings, key=len)\n    else:\n        return None\n    \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    maxlen = 0\n    maxstr = \"\"\n    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # if len(strings) == 0:\n    #     return None\n    # else:\n    #     longest_str = strings[0]\n    #     for i in range(1,len(strings)):\n    #         if len(strings[i]) > len(longest_str):\n    #             longest_str = strings[i]\n    #     return longest_str\n    #\n    # print(\"Longest is\", longest([\"peter\", \"koko\", \"pipi\", \"pippi\"]))\n    # print(\"Longest is\", longest([\"a\", \"bb\", \"ccc\"]))\n    # print(\"Longest is\", longest([\"a\", \"bb\", \"ccc\", \"ccc\", \"bb\"]))\n    # print(\"Longest is\", longest([\"a\", \"bb\", \"ccc\", \"bb\"]))\n    # print(\"Longest is\", longest([\"a\", \"bb\", \"ccc\"]))\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(strings) > 0:\n        return max(strings, key=lambda x: len(x))\n    else:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # O(n)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    longest_string = \"\"\n    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    while a > 0 and b > 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    while b!= 0:\n        a, b = b, a%b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    while b:\n        a, b = b, a%b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    while b:\n        a, b = b, a%b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    while a % b!= 0:\n        temp = b\n        b = a % b\n        a = temp\n    return b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a < b:\n        return greatest_common_divisor(b, a)\n    while a % b!= 0:\n        a, b = b, a % b\n    return b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[0:i+1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    prefixes = []\n    length = len(string)\n    for i in range(length):\n        prefixes.append(string[:i])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i + 1])\n    return result\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    prefix = ''\n    prefixes = []\n    for i in range(len(string)):\n        prefix += string[i]\n        prefixes.append(prefix)\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert string, \"Input string must not be empty\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(map(lambda x: x[0] if x else '', zip(string, *map(lambda y: y[1:], zip(string, *map(lambda z: z[:-1], zip(string, *map(lambda a: a[1:], zip(string, *map(lambda b: b[1:], zip(string, *map(lambda c: c[1:], zip(string, *map(lambda d: d[1:], zip(string, *map(lambda e: e[1:], zip(string, *map(lambda f: f[1:], zip(string, *map(lambda g: g[1:], zip(string, *map(lambda h: h[1:], zip(string, *map(lambda i: i[1:], zip(string, *map(lambda j: j[1:], zip(string, *map(lambda k: k[1:], zip(string, *map(lambda l: l[1:], zip(string, *map(lambda m: m[1:], zip(string, *map(lambda n: n[1:], zip(string, *map(lambda o: o[1:], zip(string, *map(lambda p: p[1:], zip(string, *map(lambda q: q[1:], zip(string, *map(lambda r: r[1:], zip(string, *map(lambda s: s[1:], zip(string, *map(lambda t: t[1:], zip(string, *map(lambda u: u[1:], zip(string, *map(lambda v: v[1:], zip(string, *map(lambda w: w[1:], zip(string, *map(lambda x: x[1:], zip(string, *map(lambda y: y[1:], zip(string, *map(lambda z: z[1:], zip(string, *map(lambda a: a[1:], zip(string, *map(lambda b: b[1:], zip(string, *map(lambda c: c[1:], zip(string, *map(lambda d: d[1:], zip(string, *map(lambda e: e[1:], zip(string, *map(lambda f: f[1:], zip(string, *map(lambda g: g[1:], zip(string, *map(lambda h: h[1:], zip(string, *map(lambda i: i[1:], zip(string, *map(lambda j: j[1:], zip(string, *map(lambda k: k[1:], zip(string, *map(lambda l: l[1:], zip(string, *map(lambda m: m[1:], zip(string, *map(lambda n: n[1:], zip(string, *map(lambda o: o[1:], zip(string, *map(lambda p: p[1:], zip(string, *map(lambda q: q[1:], zip(string, *map(lambda r: r[1:], zip(string, *map(lambda s: s[1:], zip(string, *map(lambda t: t[1:], zip(string, *map(lambda u: u[1:], zip(string, *map(lambda v: v[1:], zip(string, *map(lambda w: w[1:], zip(string, *map(lambda x: x[1:], zip(string, *map(lambda y: y[1:], zip(string, *map(lambda z: z[1:], zip(string, *map(lambda a: a[1:], zip(string, *map(lambda b: b[1:], zip(string, *map(lambda c: c[1:], zip(string, *map(lambda d: d[1:], zip(string, *map(lambda e: e[1:], zip(string, *map(lambda f: f[1:], zip(string, *map(lambda g: g[1:], zip(string, *map(lambda h: h[1:], zip(string, *map(lambda i: i[1:], zip(string, *map(lambda j: j[1:], zip(string, *map(lambda k: k[1:], zip(string, *map(lambda l: l[1:], zip(string, *map(lambda m: m[1:], zi"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        prefixes.append(prefix)\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    results = []\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return '0'\n    return str(i) +'' + string_sequence(n-1)\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 0:\n        return '0'\n    s = str(n)\n    return s +'' + string_sequence(n - 1)\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \" \".join(str(i) for i in range(n))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    string_sequence = ''\n    for i in range(n + 1):\n        string_sequence += f'{i} '\n    return string_sequence[:-1]\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    output = \"\"\n    for i in range(n + 1):\n        output += f\"{i} \"\n    return output[:-1]\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"0 1\"\n    elif n == 3:\n        return \"0 1 2\"\n    elif n == 4:\n        return \"0 1 2 3\"\n    elif n == 5:\n        return \"0 1 2 3 4\"\n    else:\n        return \"0 1 2 3 4 5\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return''.join(str(x) for x in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return''.join(str(i) for i in range(0, n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \" \".join(f\"{i}\" for i in range(n + 1))\n    # return \" \".join(map(str, range(n + 1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return''.join(map(str, range(n+1)))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    # unique_characters = set()\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n        elif char.isupper():\n            count += 1\n        else:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    distinct_characters = set()\n    for char in string:\n        distinct_characters.add(char.lower())\n    return len(distinct_characters)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    counter = {}\n    for char in string:\n        if char not in counter:\n            counter[char] = 1\n        else:\n            counter[char] += 1\n    return len(counter.keys())\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if string == '':\n        return 0\n    else:\n        return len(set(string.upper()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    i = 0\n    notes = []\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            notes.append(4)\n        elif music_string[i] == 'o|':\n            notes.append(2)\n        elif music_string[i] == '.':\n            notes.append(1)\n        elif music_string[i] == '|':\n            notes.append(1)\n        elif music_string[i] == '|':\n            notes.append(1)\n        elif music_string[i] == '|':\n            notes.append(1)\n        elif music_string[i] == '|':\n            notes.append(1)\n        elif music_string[i] == '|':\n            notes.append(1)\n        elif music_string[i] == '|':\n            notes.append(1)\n        elif music_string[i] == '|':\n            notes.append(1)\n        i += 1\n    return notes\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    notes_length = len(music_string)\n    return_list = list()\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    notes = []\n    notes_to_return = []\n    notes.append(music_string[0])\n    notes_to_return.append(4)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [4 if m == 'o' else 2 if m == 'o|' else 1 if m == ''.join(['o', '|']) else 0 for m in music_string]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    parsed = music_string.split()\n    parsed_int = []\n    for char in parsed:\n        if char == '|' or char == '.':\n            parsed_int.append(1)\n        elif char == 'o':\n            parsed_int.append(4)\n        else:\n            raise Exception(f'Unexpected character \"{char}\"')\n    return parsed_int\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [len(music_string) - music_string.index(x) for x in music_string]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # your code here\n    return [int(s.strip()) for s in music_string.split() if s.strip()]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    res = []\n    cur_beat = 0\n    for c in music_string:\n        if c == 'o':\n            cur_beat += 1\n        elif c == '|':\n            cur_beat += 1\n            cur_beat /= 2\n            if cur_beat > 4:\n                cur_beat = 4\n        elif c == '.':\n            cur_beat += 1\n            cur_beat /= 2\n            if cur_beat > 4:\n                cur_beat = 4\n            res.append(int(cur_beat))\n    return res\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Insert your code here\n    notes = ['o', 'o|', '.', 'o|', 'o|', '.', '.', '.', 'o', 'o']\n    result = []\n    for i in range(len(notes)):\n        if notes[i] == 'o' or notes[i] == 'o|':\n            result.append(4)\n        elif notes[i] == '.' or notes[i] == 'o|':\n            result.append(2)\n        elif notes[i] == '.' or notes[i] == 'o|':\n            result.append(1)\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(string.split(substring)) - 1\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(string)-len(substring) + 1):\n        if substring == string[i:i+len(substring)]:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Make sure both the string and substring are of the same length\n    assert len(string) == len(substring), 'The given strings must be of the same length.'\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    if string is '':\n        return count\n    if substring is '':\n        return count\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    # This is the tricky part. Create a new list and iterate over the original string. \n    # The for loop will work with this list and then it will compare it with the substring. \n    # If the substring is found, then it will be added to the new list. After this, \n    # count how many times the substring is found in the original string and return it. \n    \n    list1 = []\n    \n    # For each character in the string, check if the substring is found and add the character to the list.\n    for i in string:\n        if i in substring:\n            list1.append(i)\n    \n    return list1.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len([x for x in range(len(string)-len(substring)+1) if string[x:x+len(substring)] == substring])\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    n = len(string)\n    m = len(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(substring in s for s in string.split(' '))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # The idea is to count the occurance of the substring.\n    # But it's faster to count the occurence and then reverse the count.\n    count = 0\n    for i in range(len(string)):\n        if substring == string[i:i+len(substring)]:\n            count += 1\n            string = string[i+len(substring):]\n            if not string:\n                break\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    len_substring = len(substring)\n    for i in range(len(string)-len_substring+1):\n        if substring == string[i:i+len_substring]:\n            count += 1\n    return count\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return''.join(sorted(numbers.split(), key=lambda x: int(x)))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # numbers = 'zero one two three four five six seven eight nine'.split()\n    # numbers = list(numbers)\n    # print(numbers)\n    # for index, item in enumerate(numbers):\n    #     print(item, end='')\n    #     print(f'{numbers.index(item)} {item}')\n    # return\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str(numbers.index(n)) + n for n in numbers]))\n    # print(' '.join([str("
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    numbers = numbers.split()\n    for i in range(len(numbers)):\n        for j in range(len(numbers)-1):\n            if numbers[j] < numbers[j+1]:\n                numbers[j],numbers[j+1] = numbers[j+1],numbers[j]\n    return \" \".join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    nums = numbers.split()\n    for i in range(len(nums)):\n        if nums[i] == 'zero':\n            nums[i] = 0\n        elif nums[i] == 'one':\n            nums[i] = 1\n        elif nums[i] == 'two':\n            nums[i] = 2\n        elif nums[i] == 'three':\n            nums[i] = 3\n        elif nums[i] == 'four':\n            nums[i] = 4\n        elif nums[i] == 'five':\n            nums[i] = 5\n        elif nums[i] =='six':\n            nums[i] = 6\n        elif nums[i] =='seven':\n            nums[i] = 7\n        elif nums[i] == 'eight':\n            nums[i] = 8\n        elif nums[i] == 'nine':\n            nums[i] = 9\n    return''.join(str(num) for num in nums)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    numbers_list = numbers.split()\n    numbers_dict = {}\n    for number in numbers_list:\n        if number in numbers_dict:\n            numbers_dict[number] += 1\n        else:\n            numbers_dict[number] = 1\n    for key in numbers_dict:\n        if numbers_dict[key] > 1:\n            numbers_dict[key] = numbers_dict[key] - 1\n    return''.join(sorted(numbers_dict))\n    # +++your code here+++\n    # Below is the solution from the leetcode problem\n    '''\n    number_list = list(map(int, numbers.split()))\n    number_list.sort()\n    return''.join(map(str, number_list))\n    '''\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    numbers = numbers.split(\" \")\n    numbers = sorted(numbers)\n    numbers = \" \".join(numbers)\n    return numbers\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    numbers = numbers.split()\n    numbers.sort(reverse=True)\n    return \" \".join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not numbers or numbers =='':\n        return ''\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    numbers = numbers.split()\n    numbers = [int(num) for num in numbers]\n    numbers.sort()\n    return \" \".join(map(str, numbers))\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # set-up variables\n    difference = float('inf')\n    smallest_value = float('inf')\n    smallest_index = 0\n    largest_value = float('-inf')\n    largest_index = 0\n    # find the smallest and largest values and their index\n    for i in range(len(numbers)):\n        if numbers[i] < smallest_value:\n            smallest_index = i\n            smallest_value = numbers[i]\n        if numbers[i] > largest_value:\n            largest_index = i\n            largest_value = numbers[i]\n    # find the difference between the smallest and largest values\n    difference = largest_value - smallest_value\n    # if the difference is greater than 2.0, return the two values and their indexes\n    if difference > 2.0:\n        return numbers[smallest_index], numbers[largest_index]\n    # if the difference is less than 2.0, return the largest and smallest values and their indexes\n    else:\n        return numbers[largest_index], numbers[smallest_index]\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least 2 elements\")\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    low_num = numbers[0]\n    high_num = numbers[0]\n    for num in numbers:\n        if num < low_num:\n            low_num = num\n        if num > high_num:\n            high_num = num\n    return low_num, high_num\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Iterate through the list and find the first difference between two values\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] < 0:\n                break\n        else:\n            # If we can't find a difference, return the first pair of numbers\n            return numbers[i], numbers[j]\n    raise ValueError(f'Could not find any pairs of numbers with difference less than 0')\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return min(numbers), max(numbers)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(numbers) < 2:\n        return None, None\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # set up variables\n    diff = float(\"inf\")\n    min_index = 0\n    max_index = 0\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(numbers) < 2:\n        return None\n    closest_pair = sorted(numbers)\n    largest = closest_pair[-1]\n    smallest = closest_pair[0]\n    #print(closest_pair)\n    if abs(largest - smallest) == 0:\n        return (largest, smallest)\n    if abs(largest - smallest) < abs(smallest - closest_pair[-2]):\n        return (largest, smallest)\n    if abs(largest - smallest) > abs(smallest - closest_pair[-2]):\n        return (smallest, closest_pair[-2])\n    return (closest_pair[-2], closest_pair[-1])\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    smallest_distance = float(\"inf\")\n    closest_numbers = ()\n    for n in numbers:\n        distance = abs(n - 2.0)\n        if distance < smallest_distance:\n            smallest_distance = distance\n            closest_numbers = (n, n)\n    return closest_numbers\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return min(numbers), max(numbers)\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    range = maximum - minimum\n    #print(minimum, maximum, range)\n    scaled_numbers = []\n    for n in numbers:\n        scaled_numbers.append((n - minimum) / range)\n    return scaled_numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # your code here\n    return numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [num / float(max(numbers)) for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    min_val = min(numbers)\n    max_val = max(numbers)\n    diff = max_val - min_val\n    scaled_values = []\n    for n in numbers:\n        scaled_values.append((n - min_val) / diff)\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    max_value = max(numbers)\n    min_value = min(numbers)\n    diff = max_value - min_value\n    return [(x - min_value) / diff for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # min = min(numbers)\n    # max = max(numbers)\n    # return [(num - min)/(max - min) for num in numbers]\n    return [(num - min(numbers))/(max(numbers) - min(numbers)) for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert numbers, 'input cannot be empty'\n    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    min_n = numbers[0]\n    max_n = numbers[0]\n    for n in numbers:\n        if n < min_n:\n            min_n = n\n        if n > max_n:\n            max_n = n\n    \n    result = []\n    for n in numbers:\n        result.append(n * (1.0 / (max_n - min_n)))\n    \n    return result\n    \n    \ndef build_discriminator(n_discriminator: int) -> List[int]:\n    \"\"\"\n    Builds a list of n_discriminator integers from 0 to n_discriminator - 1\n    >>> build_discriminator(4)\n    [0, 1, 2, 3]\n    \"\"\"\n    \n    discriminators = []\n    \n    for i in range(n_discriminator):\n        discriminators.append(i)\n    \n    return discriminators\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    max_num = max(numbers)\n    min_num = min(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [i / max(numbers) for i in numbers]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda val: isinstance(val, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(filter(lambda x: isinstance(x, int) or isinstance(x, float), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [int(item) for item in values if isinstance(item, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [x for x in values if isinstance(x, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    new_list = []\n    for item in values:\n        if isinstance(item, int):\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    integers = []\n    for value in values:\n        try:\n            int(value)\n            integers.append(int(value))\n        except ValueError:\n            continue\n    return integers\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(string)\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    i = 1\n    while n % i!= 0:\n        i += 1\n    return i\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    largest = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            if i > largest:\n                largest = i\n    return largest\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    i = 1\n    while n%i!= 0:\n        i += 1\n    return i\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        raise ValueError(\"Divisor must be positive\")\n    for i in range(n+1, 1, -1):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return max(divisors)\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    i = 1\n    while n % i!= 0:\n        i += 1\n    return i\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        raise ValueError(f\"{n} is an invalid input\")\n    for i in range(1, n + 1):\n        if n % i == 0:\n            return i\n    return n\n    \n    \n    \ndef test_largest_divisor():\n    assert largest_divisor(15) == 5\n    assert largest_divisor(12) == 4\n    assert largest_divisor(24) == 8\n    assert largest_divisor(11) == 1\n    assert largest_divisor(10) == 2\n    assert largest_divisor(1) == 1\n    \n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n % 2 == 0:\n        return 2\n    return largest_divisor(n // 2) + 1\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, n+1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    return factors\n    \n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    factors = []\n    if n == 0:\n        return factors\n    if n == 1:\n        return factors\n    if n == 2:\n        return factors\n    if n == 3:\n        return factors\n    if n == 4:\n        return factors\n    if n == 5:\n        return factors\n    if n == 6:\n        return factors\n    if n == 7:\n        return factors\n    if n == 8:\n        return factors\n    if n == 9:\n        return factors\n    if n == 10:\n        return factors\n    if n == 11:\n        return factors\n    if n == 12:\n        return factors\n    if n == 13:\n        return factors\n    if n == 14:\n        return factors\n    if n == 15:\n        return factors\n    if n == 16:\n        return factors\n    if n == 17:\n        return factors\n    if n == 18:\n        return factors\n    if n == 19:\n        return factors\n    if n == 20:\n        return factors\n    if n == 21:\n        return factors\n    if n == 22:\n        return factors\n    if n == 23:\n        return factors\n    if n == 24:\n        return factors\n    if n == 25:\n        return factors\n    if n == 26:\n        return factors\n    if n == 27:\n        return factors\n    if n == 28:\n        return factors\n    if n == 29:\n        return factors\n    if n == 30:\n        return factors\n    if n == 31:\n        return factors\n    if n == 32:\n        return factors\n    if n == 33:\n        return factors\n    if n == 34:\n        return factors\n    if n == 35:\n        return factors\n    if n == 36:\n        return factors\n    if n == 37:\n        return factors\n    if n == 38:\n        return factors\n    if n == 39:\n        return factors\n    if n == 40:\n        return factors\n    if n == 41:\n        return factors\n    if n == 42:\n        return factors\n    if n == 43:\n        return factors\n    if n == 44:\n        return factors\n    if n == 45:\n        return factors\n    if n == 46:\n        return factors\n    if n == 47:\n        return factors\n    if n == 48:\n        return factors\n    if n == 49:\n        return factors\n    if n == 50:\n        return factors\n    if n == 51:\n        return factors\n    if n == 52:\n        return factors\n    if n == 53:\n        return factors\n    if n == 54:\n        return factors\n    if n == 55:\n        return factors\n    if n == 56:\n        return factors\n    if n == 57:\n        return factors\n    if n == 58:\n        return factors\n    if n == 59:\n        return factors\n    if n == 60:\n        return factors\n    if n == 61:\n        return factors\n    if n == 62:\n        return factors\n    if n == 63:\n        return factors\n    if n == 64:\n        return factors\n    if n == 65:\n        return factors\n    if n == 66:\n        return factors\n    if n == 67:\n        return factors\n    if n == 68:\n        return factors\n    if n == 69:\n        return factors\n    if n == 70:\n        return factors\n    if n == 71:\n        return factors\n    if n == 72:\n        return factors\n    if n == 73:\n        return factors\n    if n == 74:\n        return factors\n    if n == 75:\n        return factors\n    if n == 76:\n        return factors\n    if n == 77:\n        return factors\n    if n == 78:\n        return factors\n    if n == 79:\n        return factors\n    if n == 80:\n        return factors\n    if n == 81:\n        return factors\n    if n == 82:\n        return factors\n    if n == 83:\n        return factors\n    if n == 84:\n        return factors\n    if n == 85:\n        return factors\n    if n == 86:\n        return factors\n    if n == 87:\n        return factors\n    if n == 88:\n        return factors\n    if n == 89:\n        return factors\n    if n == 90:\n        return factors\n    if n == 91:\n        return factors\n    if n == 92"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    res = []\n    i = 2\n    while n > 1:\n        while n % i == 0:\n            n /= i\n            res.append(i)\n        i += 1\n    return res\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    def count_factors(num, fact_list):\n        factor = 2\n        count = 1\n        while factor <= num:\n            if num % factor == 0:\n                count += 1\n                num = num // factor\n                if factor!= num:\n                    fact_list.append(factor)\n                else:\n                    fact_list.append(count)\n            else:\n                factor += 1\n    \n    factors = []\n    count_factors(n, factors)\n    return factors\n    \n    \ndef prod(iterable: List) -> int:\n    \"\"\" Compute product of all values in the iterable\n    >>> prod([1, 2, 3, 4])\n    24\n    >>> prod([4])\n    4\n    >>> prod([])\n    1\n    \"\"\"\n    \n    prod = 1\n    for item in iterable:\n        prod *= item\n    return prod\n    \n    \ndef iterate(fn, *args, **kwargs) -> List:\n    \"\"\" Compute all results of applying function fn to elements of iterable.\n    If there are more than 1 arguments, fn must be an operation taking more than 1 argument\n    >>> iterate(lambda x: x ** 2, [1, 2, 3, 4])\n    [1, 4, 9, 16]\n    >>> iterate(lambda x: x + 1, (1, 2, 3))\n    (2, 3, 4)\n    \"\"\"\n    \n    return [fn(*args, **kwargs) for _ in args]\n    \n    \ndef write(fn):\n    \"\"\" Write function to file\n    >>> write(lambda x, y: x * y)\n    write(lambda x, y: x * y)\n    \"\"\"\n    \n    with open('output.txt', 'w') as f:\n        f.write(f\"{fn.__name__}({fn.__doc__})\")\n    \n    \ndef iterate_if(fn, iterable):\n    \"\"\" Iterate through iterable if it has any value\n    >>> iterate_if(lambda x: x >= 3, [1, 2, 3, 4])\n    [1, 2, 3]\n    \"\"\"\n    \n    for item in iterable:\n        if fn(item):\n            yield item\n            \n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    i = 2\n    factors = []\n    while n % i == 0:\n        factors.append(i)\n        n /= i\n        if n == 1:\n            break\n    if n > 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    primes = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                primes.append(i)\n                n //= i\n                break\n        else:\n            primes.append(n)\n            break\n    return primes\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return []\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1:\n        return []\n    else:\n        factor = 2\n        factors = []\n        while n!= 1:\n            while n % factor == 0:\n                factors.append(factor)\n                n = n//factor\n            factor = factor + 1\n        return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    d = {}\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sorted_nums = sorted(numbers)\n    unique_nums = []\n    unique_nums.append(sorted_nums[0])\n    for i in range(1, len(sorted_nums)):\n        if sorted_nums[i] == sorted_nums[i - 1]:\n            unique_nums.append(sorted_nums[i])\n    return unique_nums\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(dict.fromkeys(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(numbers)):\n        if numbers.count(numbers[i]) > 1:\n            numbers.pop(i)\n    return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    final_list = []\n    seen_values = set()\n    for num in numbers:\n        if num not in seen_values:\n            final_list.append(num)\n        seen_values.add(num)\n    return final_list\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code here\n    x = set(numbers)\n    return list(x)\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    new = []\n    for i in numbers:\n        if i not in new:\n            new.append(i)\n    return new\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    output = []\n    for element in numbers:\n        if element not in output:\n            output.append(element)\n    return output\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n    \n    \ndef main() -> None:\n    \"\"\"main function for program\"\"\"\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. YOU'RE TERRIFIC HUMAN!\\n\")\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n    \n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ''.join(['c' if x.islower() else 'C' if x.isupper() else x for x in string])\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(strings) == 0:\n        return ''\n    return strings[0] + concatenate(strings[1:])\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(strings) == 0:\n        return ''\n    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not strings:\n        return ''\n    if len(strings) == 1:\n        return strings[0]\n    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(strings) == 0:\n        return ''\n    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return list(filter(lambda string: string.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return filter(lambda x: x.startswith(prefix), strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return filter(lambda x: x.startswith(prefix), strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    positive_numbers = []\n    for number in l:\n        if number > 0:\n            positive_numbers.append(number)\n    return positive_numbers\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # You can do this on one line too\n    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    return [x for x in l if x > 0]\n    \ndef find_target(l: list, target: int):\n    \"\"\"Return indices of elements in list which sum to a given target.\n    >>> find_target([4, 3, 5, 2, 1], 6)\n    [0, 1]\n    >>> find_target([4, 3, 5, 2, 1], 3)\n    [1]\n    >>> find_target([4, 3, 5, 2, 1], 1)\n    [0, 2]\n    \"\"\"\n    \n    l = sorted(l)\n    result = []\n    for i in range(len(l)-1):\n        if l[i] + l[i+1] == target:\n            result.append(i)\n            result.append(i+1)\n    return result\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    positive = []\n    for i in l:\n        if i > 0:\n            positive.append(i)\n    return positive\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [n for n in l if n > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(filter(lambda x: x >= 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for x in l:\n        if x > 0:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    res = []\n    for i in l:\n        if i >= 0:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            return False\n    return True\n    \n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 1:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for n_i in range(2, int(n ** 0.5) + 1):\n        if n % n_i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 1:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 1:\n        return False\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # n is a number.\n    assert n >= 0, \"n must be positive.\"\n    # n is a non-negative integer.\n    assert n >= 0, \"n must be a non-negative integer.\"\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n % 2 == 0 or n <= 1:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    import math\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    xs.append(0)\n    for i in range(len(xs) - 1):\n        if xs[i + 1]!= 0 and xs[i]!= 0:\n            x = -1 / xs[i] * (xs[i + 1] - xs[i + 2])\n            return x\n        elif xs[i + 1]!= 0 and xs[i] == 0:\n            x = -xs[i + 1] / xs[i]\n            return x\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff > 0:\n            break\n    for i in range(i, len(xs)):\n        if xs[i] == 0:\n            return xs[i]\n    return xs[i]\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n = len(xs)\n    for i in range(n // 2):\n        if xs[i] * xs[n - i - 1] <= 0:\n            return xs[i]\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError(\"List xs should have even number of coefficients.\")\n    if xs[-1] == 0:\n        return xs[0]\n    for i in range(len(xs)):\n        if xs[i] > 0:\n            break\n    else:\n        raise ValueError(\"No zero in xs.\")\n    return (-1) * xs[i] / (2 * xs[i-1])\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert len(xs) % 2 == 0 and max(xs) >= 0\n    return -poly(xs, 1) / poly(xs, -1)\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(xs) <= 1:\n        raise ValueError(\"The polynomial is zero\")\n    elif len(xs) % 2 == 0:\n        raise ValueError(\"The polynomial has an even number of coefficients\")\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def check(xs):\n        if sum(xs)!= 0:\n            return False\n        coeff = xs[0]\n        if coeff == 0:\n            return False\n        for i in range(1, len(xs)):\n            if xs[i] < 0:\n                return False\n        return True\n    for i in range(len(xs)):\n        if check(xs):\n            return i\n    raise ValueError(\"There are no zero point.\")\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    x = 0\n    while True:\n        if poly(xs, x) == 0:\n            break\n        x += 1\n    return x\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Try only for even number of coefficients\n    if len(xs) % 2!= 0:\n        raise ValueError(\"find_zero only takes even number of coefficients\")\n    # If there is only one coefficient, try for positive value only\n    if len(xs) == 1:\n        return xs[0]\n    i = 0\n    while True:\n        i += 1\n        if xs[i]!= 0:\n            break\n    # Check if solution exist\n    if xs[i] * xs[i-1] < 0:\n        return xs[i]\n    else:\n        return find_zero(xs[i+1:])\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # coefficient of x^2 should be zero\n    if xs[1] == 0:\n        return\n    # coefficient of x^2 should be greater than zero\n    elif xs[1] < 0:\n        return\n    # coefficient of x^2 should be greater than zero\n    elif xs[1] > 0:\n        p = xs[0] / xs[1]\n        # x is a zero point of polynomial if p is a root of polynomial\n        # for example p = -0.5, so x = 0.5\n        if math.sqrt(p) % 1 == 0:\n            return p\n        else:\n            # there is not a zero point\n            return None\n    else:\n        return None\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(l, key=lambda x: (x % 3, x))\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(l, key=lambda x: x % 3!= 0)\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Empty list\n    if len(l) == 0:\n        return l\n    # Initialize a new list\n    l_copy = l.copy()\n    result = []\n    # Iterate through l\n    for i in l:\n        # Only consider divisible by 3\n        if i%3!= 0:\n            # Add i to the sorted list\n            result.append(i)\n        # Consider divisible by 3\n        else:\n            # Find the indicies of i's corresponding values\n            indicies = [j for j in range(len(l_copy)) if l_copy[j] == i]\n            # Add these indicies to the sorted list\n            result.extend(sorted(indicies))\n    # Return the sorted result\n    return result\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(len(l)):\n        if i % 3 == 0:\n            pass\n        else:\n            indicies = l[i]\n            l[i] = l[indicies]\n            l[indicies] = indicies\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = len(l)\n    l_new = l.copy()\n    l_new.sort()\n    for i in range(n):\n        if i%3 == 0:\n            continue\n        else:\n            l_new.remove(l[i])\n            l_new.append(l[i])\n    return l_new\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    l1 = []\n    l2 = []\n    for i in range(len(l)):\n        if (i%3 == 0):\n            l2.append(l[i])\n        else:\n            l1.append(l[i])\n    l3 = l1 + l2\n    l3.sort()\n    return l3\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l_sorted = []\n    for i in range(0, len(l)):\n        if i%3!= 0:\n            l_sorted.append(l[i])\n    l_sorted.sort()\n    for j in range(0, len(l)):\n        if j%3 == 0:\n            l_sorted.append(l[j])\n    return l_sorted\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    divisor_three = []\n    for i in range(len(l)):\n        if (i % 3!= 0):\n            divisor_three.append(l[i])\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        if l[i]%3 == 0:\n            pass\n        else:\n            l.remove(l[i])\n            l.append(l.pop(i))\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # STEP 1: Create a list that contains the indicies of all the elements of l that are divisible by three.\n    l_div_three = []\n    for i in range(len(l)):\n        if l[i]%3==0:\n            l_div_three.append(i)\n    # STEP 2: Using the list l_div_three, create a new list that contains the indicies of all the elements of l that are not divisible by three.\n    l_not_div_three = []\n    for i in range(len(l)):\n        if i not in l_div_three:\n            l_not_div_three.append(i)\n    # STEP 3: Using the list l_not_div_three, create a new list that contains the indicies of all the elements of l, but sorted.\n    l_sorted = []\n    for i in range(len(l)):\n        if i in l_div_three:\n            l_sorted.append(l_div_three[i])\n        else:\n            l_sorted.append(i)\n    # STEP 4: Return the sorted list l_sorted.\n    return l_sorted\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(set(l), key=l.index)\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(set(l), key=l.index)\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(list(set(l)))"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    new_list = []\n    for x in l:\n        if x not in new_list:\n            new_list.append(x)\n    return sorted(new_list)\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not l:\n        return None\n    max_i = 0\n    max_j = 0\n    for i in range(len(l)):\n        if l[i] > l[max_i]:\n            max_i = i\n        elif l[i] == l[max_i]:\n            if max_j < i:\n                max_j = i\n    return l[max_i]\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(l) == 1:\n        return l[0]\n    elif l[0] >= l[1]:\n        return l[0]\n    else:\n        return l[1]\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    maximum = l[0]\n    for i in range(1, len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # max_num = l[0]\n    max_num = None\n    for num in l:\n        if max_num is None or num > max_num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for x in range(1, n):\n        if x % 7 == 0 or x % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(n):\n        if divisible_by(i, 11) or divisible_by(i, 13):\n            if divisible_by(i, 7):\n                count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum(d == 7 or d == 13 for d in range(1, n + 1) if d % 11 == 0 or d % 13 == 0)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(n):\n        if i%7 == 0 or i%11 == 0 or i%13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = 0\n    for i in range(n):\n        if (i % 11 == 7 or i % 13 == 7) and i % 11!= 0 and i % 13!= 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    if not (n % 3) and not (n % 5):\n        return \"fizzbuzz\"\n    elif not (n % 3):\n        return \"fizz\"\n    elif not (n % 5):\n        return \"buzz\"\n    else:\n        return n\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n        elif i % 11 == 7 and i % 13 == 7:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(n):\n        if i % 11 == 7 or i % 13 == 7:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n        elif i % 5 == 0:\n            count += 1\n        elif i % 11 == 0:\n            count += 1\n        elif i % 13 == 0:\n            count += 1\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 7 or i % 13 == 7:\n            count += 1\n    return count\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(l, key=lambda x: (x % 2 == 0, x))\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(l) == 0:\n        return []\n    elif len(l) == 1:\n        return l\n    else:\n        left = l[:len(l)//2]\n        right = l[len(l)//2:]\n        left = sort_even(left)\n        right = sort_even(right)\n        return merge_odd_even(left, right)\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i+1])\n    return l2\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    evens = []\n    odds = []\n    for i in l:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    return sorted(evens) + sorted(odds)\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(l, key=lambda x: x % 2 == 0)\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n    i = 0\n    new = []\n    while i < len(l):\n        if l[i] % 2 == 0:\n            new.append(l[i])\n        else:\n            new.append(l[i])\n            l.pop(i)\n        i += 1\n    return new + l\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # sort even indices\n    l.sort()\n    # odd indices\n    l_odd = [l[i] for i in range(len(l)) if i % 2!= 0]\n    # even indices\n    l_even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    # sort even indices\n    l_even.sort()\n    # combine even indices with odd indices\n    l = l_even + l_odd\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    for j in range(len(l2)):\n        for k in range(j,len(l2)):\n            if l2[j] < l2[k]:\n                temp = l2[j]\n                l2[j] = l2[k]\n                l2[k] = temp\n    return l2\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l2.append(l[i])\n    for i in range(len(l)):\n        if i % 2!= 0:\n            l2.append(l[i])\n    return l2\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(\n        zip(*sorted(zip(l, *l), key=lambda x: x[0]))\n        )\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(s) % 3!= 0:\n        raise ValueError(\"Length of input string must be divisible by 3\")\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[2:] + group[0] + group[1]) for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # find index of first group of three characters.\n    first_group_index = s.find(\"(\")\n    if first_group_index == -1:\n        return s\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # split encoded string to groups of 3 characters.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    groups = [(group[0] + group[2] + group[1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # split encoded string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # split encoded string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    fib = [2,3]\n    for i in range(len(fib),n):\n        fib.append(fib[i-1] + fib[i-2])\n    for i in fib:\n        if isprime(i):\n            return i\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    a = fib(n - 1)\n    b = fib(n - 2)\n    return a * b\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n < 3:\n        return 2\n    fib = 3\n    primes = {2}\n    while fib < n:\n        fib += fib\n        primes.add(fib)\n    return fib\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        return (prime_fib(n-1) + prime_fib(n-2))\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert isinstance(n, int) and (n > 0)\n    \n    # First Fibonacci number is 0\n    # Second Fibonacci number is 1\n    a, b = 0, 1\n    \n    # This will hold the last two Fibonacci numbers\n    fib = a + b\n    \n    # This loop will run for n-1 times\n    while fib <= n:\n        # Update Fibonacci numbers\n        a = b\n        b = fib\n        \n        # Next Fibonacci number is sum of previous two Fibonacci numbers\n        fib = a + b\n    \n    # Check if fib is prime\n    if is_prime(fib):\n        return fib\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (1 + 5 ** (n-1)) // 2\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    fib1, fib2 = 2, 3\n    for i in range(2, n):\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib1):\n            return fib1\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert n > 0\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sums = {}\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # we must create a set of the list elements\n    # then iterate through it\n    # find if there are three elements that sum to 0 and store in a set\n    set_of_numbers = set(l)\n    for num in l:\n        two_sum_sum = 0\n        for ele in l:\n            if ele!= num:\n                two_sum_sum = two_sum_sum + ele\n        if two_sum_sum == num and num not in set_of_numbers:\n            return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    set_l = set(l)\n    if len(l) < 3:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if (l[i] + l[j] + l[k]) == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    seen = set()\n    for num in l:\n        if -(num) in seen:\n            return True\n        seen.add(num)\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if (l[i]+l[j]+l[k]) == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # the number of items in the list\n    n = len(l)\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    #initialize an empty set\n    temp = set()\n    \n    #iterate through the list\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                sum = l[i] + l[j] + l[k]\n                if sum == 0:\n                    temp.add((l[i], l[j], l[k]))\n    \n    #check if there are three distinct elements that sum to zero\n    if len(temp) >= 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # return _triples_sum_to_zero(l)\n    return _triples_sum_to_zero_slow(l)\n    # return _triples_sum_to_zero_fast(l)\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return count_triples(l) > 0 and 3 in set(l)\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    colors = car_race_colors()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if cars_collide(i, j, colors):\n                count += 1\n    return count\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n = n % 2\n    if n == 1:\n        for i in range(n + 1):\n            for j in range(i + 1):\n                if i == j:\n                    print(i, j, i + j)\n                else:\n                    print(i, j, i + j)\n    else:\n        for i in range(n + 1):\n            for j in range(i + 1):\n                if i == j:\n                    print(i, j, i + j)\n                else:\n                    print(i, j, i + j)\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return n**2\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert n > 0, \"n must be a positive integer.\"\n    return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n > 0, 'n must be > 0'\n    assert isinstance(n, int), 'n must be of type int'\n    assert n >= 2, 'n must be at least 2'\n    return 2 * (n - 1)\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return _car_race_collision_helper(n, [1] * n)\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = int(n)\n    if n <= 1:\n        return 0\n    elif n <= 3:\n        return n - 1\n    else:\n        return car_race_collision(n-2) + car_race_collision(n-1)\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return False\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n % 2!= 0:\n        return -1\n    collision = 0\n    n //= 2\n    while n > 0:\n        if (x := x + a[0] if i % 2 == 0 else x - a[0]) >= 0 and (x := x + a[1] if i % 2 == 1 else x - a[1]) >= 0:\n            if x < 0 or (x := x + a[0] if i % 2 == 0 else x - a[0]) < 0 or (x := x + a[1] if i % 2 == 1 else x - a[1]) < 0:\n                collision += 1\n            else:\n                n -= 1\n        i += 1\n    return collision\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 0\n    else:\n        return car_race_collision_rec(n, n)\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    l = list(l)\n    i = 0\n    while i < len(l):\n        l[i] += 1\n        i += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return map(lambda x: x + 1, l)\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l_copy = l.copy()\n    for i in range(len(l_copy)):\n        l_copy[i] += 1\n    return l_copy\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n        return l\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(map(lambda x: x + 1, l))\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return l[:1] + [a+1 for a in l[:-1]]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    i = 0\n    while i < len(l):\n        l[i] += 1\n        i += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(l)-1, -1, -1):\n        l[i] += 1\n        return l\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \"\"\"\n    We need two pointers, one at the front and one at the end\n    keep advancing the front and end as far as possible\n    if at any point front == end, then we can break and return\n    \"\"\"\n    front, end = 0, len(l) - 1\n    while front < end:\n        s = l[front] + l[end]\n        if s == 0:\n            return True\n        if s < 0:\n            front += 1\n        else:\n            end -= 1\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #...\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i]+l[j] == 0:\n                return True\n    return False\n    \ndef no_sum_to_zero(l):\n    \"\"\"\n    no_sum_to_zero takes a list of integers as an input.\n    it returns True if there is no two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> no_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> no_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> no_sum_to_zero([1, 2, 3, 7])\n    True\n    >>> no_sum_to_zero([2, 4, -5, 3, 5, 7])\n    False\n    >>> no_sum_to_zero([1])\n    True\n    \"\"\"\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i]+l[j] == 0:\n                return False\n    return True\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    for i in range(len(l) - 1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    seen = set()\n    for num in l:\n        target = -num\n        if target in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # subset, because we can see that the pair (i, j) for which i + j = 0\n    # will be used to find the subsets.\n    subset = list(filter(lambda x: x[0] + x[1] == 0, l))\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    l = list(set(l))\n    if len(l)!= len(l):\n        return False\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n    \n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    d = ''\n    x = x if base < 10 else x - base\n    while x:\n        d = str(x % base) + d\n        x //= base\n    return d\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert(base < 10)\n    x_in_base_10 = str(x)\n    digits = []\n    for i in x_in_base_10:\n        digits.append(int(i))\n    ret = \"\"\n    for i in digits:\n        ret += str(i)\n        ret += str(base)\n    return ret\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return str(x)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    r = \"\"\n    if x < base:\n        r = str(x)\n    else:\n        while x >= base:\n            x = x//base\n            r += str(x)\n    return r\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def reverse_base(num, base):\n        reverse_num = []\n        while num > 0:\n            reverse_num.append(num % base)\n            num //= base\n        return reverse_num[::-1]\n    \n    num_list = reverse_base(x, base)\n    num_str = ''\n    for num in num_list:\n        num_str += str(num)\n    return num_str\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    x_str = str(x)\n    if base <= 10 and x_str.endswith(str(base)):\n        return x_str[0:-1] + str(base)\n    else:\n        return change_base(x // base, base) + str(x % base)\n    \n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return str(x) if x >= base else change_base(x // base, base) + str(x % base)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # convert integer to string\n    x_str = str(x)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert base < 10, \"base number must be less than 10\"\n    \n    string_number = ''\n    while x!= 0:\n        string_number = str(x%base) + string_number\n        x //= base\n    return string_number\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert base < 10\n    base_num = str(base)\n    \n    if x == 0:\n        return base_num\n    else:\n        return change_base(x // base, base) + base_num[x % base]\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return (a*h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return a * h * 0.5\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (a * h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return a*h/2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (1/2) * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (a*h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return fib4_memo(n-1) + fib4_memo(n-2) + fib4_memo(n-3) + fib4_memo(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert n > 0, 'fib4: n must be a positive integer'\n    if n in (1, 2):\n        return 1\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 0 or n == 1 or n == 2:\n        return n\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def fib4_rec(n):\n        if n <= 1:\n            return n\n        else:\n            return fib4_rec(n-1) + fib4_rec(n-2) + fib4_rec(n-3) + fib4_rec(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    fib1 = 0\n    fib2 = 1\n    if n == 0:\n        return fib1\n    if n == 1:\n        return fib2\n    for i in range(2,n+1):\n        fib_n = fib1 + fib2\n        fib1 = fib2\n        fib2 = fib_n\n    return fib_n\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert n >= 0\n    if n <= 2:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sorted_list = sorted(l)\n    half_list = len(sorted_list) // 2\n    if len(sorted_list) % 2 == 1:\n        return sorted_list[half_list]\n    else:\n        return (sorted_list[half_list - 1] + sorted_list[half_list]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert l, \"l must be not empty\"\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(l)[len(l) // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sorted(l)\n    len(l)\n    if len(l) % 2 == 0:\n        return (l[len(l)//2 - 1] + l[len(l)//2]) / 2\n    else:\n        return l[len(l)//2]"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        return (sorted_list[length//2] + sorted_list[length//2 - 1])/2\n    else:\n        return sorted_list[length//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        middle = (len(l) // 2) - 1\n        return (l[middle] + l[middle + 1]) / 2\n    else:\n        return l[len(l) // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (sorted(l)[len(l) // 2])\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = len(l)\n    if n % 2:\n        return sorted(l)[n//2]\n    else:\n        return sum(sorted(l)[n//2-1:n//2+1])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = sorted(l)\n    n = len(s)\n    if n % 2 == 1:\n        return s[n//2]\n    return (s[n//2 - 1] + s[n//2]) / 2\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    reversed_text = text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not isinstance(text, str):\n        raise TypeError('Text must be a string')\n    text = text.lower()\n    reversed_text = text[::-1]\n    if text == reversed_text:\n        return True\n    return False\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    left_pali = ''\n    right_pali = ''\n    if len(text) == 0:\n        return True\n    for i in range(len(text)):\n        if text[i] =='':\n            continue\n        if i < len(text) - 1:\n            left_pali += text[i]\n        if i > 0:\n            right_pali += text[i]\n    return left_pali == right_pali[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # create a new string with just lower case letters\n    new_str = ''.join(re.findall(r'[a-z]', text.lower())).lower()\n    # remove all spaces\n    new_str = new_str.replace(' ', '')\n    # reverse the original string\n    reverse = new_str[::-1]\n    # if original string and the reverse are the same, then palindrome\n    return new_str == reverse\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return text == reverse_text(text)\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return (n % p) if n < p else ((n - 1) % p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    res = 1\n    while n:\n        res = (res * p) % n\n        n, p = n - 1, p % n\n    return res\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return pow(n, p-2, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    r = 1\n    while p > 0:\n        if p & 1:\n            r = (r * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return r\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert p > 0\n    i = 0\n    while n > 0:\n        i += (n % 2) * ((p >> i) % 2)\n        n //= 2\n        i %= p\n    return i\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (n % p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (n % p) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return pow(n, p-1, p)\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return encode_shift(s)[::-1]\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if isinstance(text, str):\n        return ''.join([i for i in text if i not in ['a','e','i','o','u','A','E','I','O','U']])\n    else:\n        raise TypeError\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    vowels = \"aeiouAEIOU\"\n    removed = \"\"\n    for x in text:\n        if x in vowels:\n            removed += x.upper()\n        else:\n            removed += x\n    return removed"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    vowels = 'aeiouAEIOU'\n    for letter in text:\n        if letter in vowels:\n            text = text.replace(letter, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    vowels = set('aeiouAEIOU')\n    return ''.join(l for l, t in zip(text, map(lambda x: x not in vowels, text)) if t)\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    letters = 'aeiou'\n    for i in letters:\n        if i in text:\n            text = text.replace(i, \"\")\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    new_string = ''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    for letter in text:\n        if letter not in vowels:\n            new_string = new_string + letter\n    return new_string\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    text = text.lower()\n    text = text.strip()\n    vowels = \"aeiou\"\n    for char in text:\n        if char in vowels:\n            text = text.replace(char, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return text.translate(str.maketrans('aeiouAEIOU', 'bcdf'))\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    vowels = 'aeiou'\n    no_vowels = ''\n    for char in text:\n        if char not in vowels:\n            no_vowels += char\n    return no_vowels\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vowels = 'aeiou'\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for number in l:\n        if number > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(l) > 0:\n        if l[0] < t:\n            return False\n        return below_threshold(l[1:], t)\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    for i in range(len(l)):\n        if l[i] < t:\n            return False\n    \n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return True if all(l[i] < t for i in range(len(l))) else False\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for x in l:\n        if x > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return all(num < t for num in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for num in l:\n        if num < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return all(x < t for x in l)\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for ch0, ch1 in zip(s0, s1):\n        if ch0!= ch1:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return s0.lower() == s1.lower()\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(s0) == len(s1) and set(s0) == set(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s0_set = set(s0)\n    s1_set = set(s1)\n    return s0_set == s1_set\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(set(s0) & set(s1)) == len(set(s0)) == len(set(s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return all(s0[i] == s1[i] for i in range(len(s0)))\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return all(c in s0 for c in s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert len(s0) == len(s1)\n    s0_map = dict()\n    s1_map = dict()\n    for i in range(len(s0)):\n        if s0[i] not in s0_map:\n            s0_map[s0[i]] = i\n        if s1[i] not in s1_map:\n            s1_map[s1[i]] = i\n    return s0_map == s1_map\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return same_chars_rec(s0, s1, 0, 0)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be >= 1\")\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n <= 0:\n        raise ValueError(\"n must be positive\")\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return fib(n - 1) + fib(n - 2) if n > 1 else 1\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert n > 0\n    if n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    return fib(n-2) + fib(n-1)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert n >= 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert brackets.count(\"<\") == brackets.count(\">\")\n    opening_brackets = brackets.count(\"<\")\n    # print(\"opening brackets: \", opening_brackets)\n    if opening_brackets == 0:\n        return False\n    for i in range(opening_brackets):\n        opening_bracket = brackets.index(\"<\")\n        closing_bracket = brackets.index(\">\")\n        brackets = brackets[opening_bracket+1:closing_bracket]\n    return len(brackets) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    brackets = list(brackets)\n    \n    while len(brackets) > 0 and brackets[0] == \"<\":\n        brackets.pop(0)\n        \n        if len(brackets) == 0:\n            return False\n        \n        brackets.pop(0)\n        \n        if brackets[0]!= \">\":\n            return False\n        \n        brackets.pop(0)\n    \n    return False"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    bracket_dict = {\")\" : \"(\", \"]\" : \"[\", \">\" : \"<\"}\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    opening = set(brackets)\n    for i in range(1, len(brackets) - 1, 2):\n        if brackets[i] not in opening:\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    stack = Stack()\n    for b in brackets:\n        if b == \">\":\n            if len(stack) == 0:\n                return False\n            if stack.pop()!= \"<\":\n                return False\n        elif b == \"<\":\n            stack.push(b)\n        else:\n            stack.push(b)\n    return len(stack) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #brackets = \"<{[()<>]\"\n    bracket_stack = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            bracket_stack.append(brackets[i])\n        elif brackets[i] == \")\":\n            if not bracket_stack:\n                return False\n            elif bracket_stack[-1] == \"(\":\n                bracket_stack.pop()\n            else:\n                return False\n    return not bracket_stack\n    "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Initialize the list of open brackets\n    bracket_stack = []\n    # Iterate over the brackets string\n    for bracket in brackets:\n        # Add the bracket to the stack if the bracket is open\n        if bracket == \"<\":\n            bracket_stack.append(bracket)\n        # If a bracket is closed, check to see if the stack is empty\n        if bracket == \">\":\n            if len(bracket_stack) == 0:\n                return False\n            # Remove the topmost item from the stack\n            bracket_stack.pop()\n    # Return whether or not the stack is empty\n    return len(bracket_stack) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # count = 0\n    # for i in range(len(brackets)):\n    #     count += 1\n    #     if brackets[i] == \"<\":\n    #         count -= 1\n    # if count == 0:\n    #     return True\n    # else:\n    #     return False\n    # OR\n    # count = 0\n    # for i in range(len(brackets)):\n    #     if brackets[i] == \"<\":\n    #         count += 1\n    #     if brackets[i] == \">\":\n    #         count -= 1\n    #     if count < 0:\n    #         return False\n    # return True\n    count = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            count += 1\n        if brackets[i] == \">\":\n            count -= 1\n    return count == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = 0\n    for c in brackets:\n        if c == \"<\":\n            n += 1\n        else:\n            if n == 0:\n                return False\n            n -= 1\n    return n == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    opening = set('<(')\n    closing = set(')>)>')\n    brackets = set(brackets)\n    return len(opening.intersection(brackets)) == len(closing.intersection(brackets))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if l == []:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(l) - 1):\n        if l[i + 1] < l[i]:\n            return False\n        if l[i] > l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    a = l[0]\n    for i in range(1, len(l)):\n        if l[i] < a:\n            return False\n        a = l[i]\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] >= l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i-1] < l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    i = 1\n    while i < len(l):\n        if l[i] < l[i-1]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(l) < 2:\n        return True\n    \n    prev_num = l[0]\n    for i in l:\n        if i > prev_num:\n            return False\n        prev_num = i\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(1, len(l)):\n        if l[i - 1] > l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #  Try to sort list first.\n    #  If sorted, then check if the difference between the element\n    #  before and after is the same as the difference between the\n    #  element before and after and again we get the same result.\n    l.sort()\n    return all(l[i + 1] > l[i] for i in range(len(l) - 1))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(l) < 2:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n    for elem in l1:\n        if elem in l2 and elem not in result:\n            result.append(elem)\n    return result\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l = []\n    for i in l1:\n        if i not in l:\n            l.append(i)\n    for i in l2:\n        if i not in l:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l3 = []\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l1.sort()\n    l2.sort()\n    i = 0\n    j = 0\n    result = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            result.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    common = set(l1) & set(l2)\n    return sorted(common)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    seen = set()\n    return sorted(list(seen & set(l1) & set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    common = []\n    for item in l1:\n        if item in l2:\n            common.append(item)\n    common.sort()\n    return common\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    largest_factor = 2\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            if is_prime(i):\n                largest_factor = i\n                n = n // i\n        else:\n            i += 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # 1. If n is divisible by any number between 2 and n - 1, then no prime factor is necessary\n    # 2. If n is divisible by any prime number, then the largest prime factor is the prime number itself\n    # 3. If n is divisible by any composite number, then no prime factor is necessary\n    if n % 2 == 0:\n        return 2\n    n = n - 1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        while n % i == 0:\n            n = n // i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    largest_factor = 1\n    if n == 2:\n        return 2\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, n, 2):\n        while n % i == 0:\n            n = n / i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n % 2 == 0:\n        return 2\n    while n % 2 == 0:\n        n = n // 2\n    return 3\n    \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    prime_factor_dict = {}\n    largest_prime = -1\n    while n > 1:\n        # print(\"n = \", n)\n        for p in range(2, n + 1):\n            if n % p == 0:\n                prime_factor_dict[p] = prime_factor_dict.get(p, 0) + 1\n                n = n // p\n                if prime_factor_dict[p] > largest_prime:\n                    largest_prime = prime_factor_dict[p]\n    return largest_prime\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    factor = 2\n    while factor <= n:\n        if is_prime(factor) and n % factor == 0:\n            return factor\n        factor += 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    prime_list = []\n    # Loop through all of n\n    for i in range(n, 1, -1):\n        # Check if i is prime\n        if not is_prime(i):\n            # If not prime, then continue\n            continue\n        # If it is prime, then i is the largest prime factor of n\n        else:\n            # If i is prime, then put in prime_list\n            prime_list.append(i)\n            # Check if i is a factor of n\n            while i * i <= n:\n                # If so, remove i from prime_list\n                if i in prime_list:\n                    # If i is prime, then remove i\n                    prime_list.remove(i)\n                # i is not prime, so increment i\n                i += 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # handle the base cases\n    if n == 1 or n == 2:\n        return n\n    # find all factors less than sqrt(n)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    # if we got to the end of the loop without finding any factors, then n has a prime factor\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    k = 2\n    while k*k <= n:\n        if n % k == 0:\n            return k\n        k += 1\n    return n\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum([i for i in range(1, n+1)])\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(i for i in range(1,n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    print(sum)\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 1\n    return n + sum_to_n(n - 1)\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    total = 0\n    for num in range(1,n+1):\n        total += num\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n < 1:\n        return 0\n    return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # TODO: implement this function\n    brackets = brackets.replace(\"(\",\"({\")\n    brackets = brackets.replace(\")\",\"}\")\n    brackets = brackets.replace(\"{\",\"{\")\n    brackets = brackets.replace(\"}\",\"}\")\n    return brackets == \"}\"*len(brackets)\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    brackets = brackets.replace(\" \", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.split(\",\")\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    nesting = 0\n    for char in brackets:\n        if char == \"(\":\n            nesting += 1\n        elif char == \")\":\n            nesting -= 1\n        if nesting < 0:\n            return False\n    return nesting == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert brackets[0] == \"(\" and brackets[-1] == \")\"\n    \n    i = 0\n    while i < len(brackets) - 1:\n        if brackets[i]!= \"(\" and brackets[i]!= \")\":\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pairs = {\n        \"(\": \")\",\n        \"[\": \"]\",\n        \"{\": \"}\",\n    }\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = bracket_stack()\n    for char in brackets:\n        if char == \"(\":\n            s.append(\")\")\n        else:\n            if len(s) > 0:\n                s.pop()\n            else:\n                return False\n    return len(s) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    balance = 0\n    for c in brackets:\n        if c == '(':\n            balance += 1\n        elif c == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    brackets = remove_leading_parenthesis(brackets)\n    brackets = remove_trailing_parenthesis(brackets)\n    brackets = brackets.replace(\"()\", \"\")\n    return brackets == \"\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert brackets.count('(') == brackets.count(')')\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    xs_copy = xs.copy()\n    xs_copy.pop(0)\n    return [i * xs_copy[-1] for i in xs_copy]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Initialize a list that will contain the derivative of xs.\n    xs_derivative = []\n    for i in range(len(xs)):\n        xs_derivative.append(i * xs[i])\n    return xs_derivative\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    dxs = []\n    for i in range(len(xs)):\n        if i == 0:\n            dxs.append(1)\n        else:\n            dxs.append(i * xs[i])\n    return dxs\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # set up list of coefficients\n    return [i * xs[i - 1] for i in range(1, len(xs) + 1)]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    x = 0\n    result = []\n    for i in range(len(xs)):\n        x = xs[i]\n        result.append(x)\n    return result\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(map(lambda x, y: x, xs, range(1, len(xs))))\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(xs) == 0:\n        return []\n    elif len(xs) == 1:\n        return [0]\n    else:\n        return [xs[i + 1] + xs[i] * (i + 1) for i in range(len(xs) - 1)]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    deriv = []\n    for i in range(len(xs) - 1):\n        deriv.append(xs[i] * (i + 1))\n    return deriv\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [coefficient * x for coefficient, x in zip(xs[1:], xs[1:])]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    d_xs = []\n    d_xs.append(1)\n    d_xs.append(1)\n    d_xs.append(1)\n    for i in range(len(xs) - 1):\n        d_xs.append(xs[i + 1] * d_xs[i])\n    return d_xs\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    fib = 0\n    fib1 = 0\n    fib2 = 1\n    for i in range(1, n):\n        fib = fib1 + fib2\n        fib1 = fib2\n        fib2 = fib\n    return fib\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n >= 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n <= 1:\n        return n\n    a = 0\n    b = 1\n    for i in range(n-1):\n        c = a + b\n        a = b\n        b = c\n    return b\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for char in s:\n        if char in \"aeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for char in s:\n        if char in 'aeiou':\n            count += 1\n        elif char == 'y':\n            if count:\n                count -= 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    vowels = set('aeiou')\n    counter = 0\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # return len([i for i in range(len(s)) if s[i] in \"aeiou\"])\n    return sum([1 for i in range(len(s)) if s[i] in \"aeiou\"])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    vowels = 'aeiouy'\n    counter = 0\n    for x in vowels:\n        for i in range(len(s)):\n            if x == s[i]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    vowels = 0\n    for char in s:\n        if char in \"aeiouy\":\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for x in s:\n        if x == \"a\" or x == \"e\" or x == \"i\" or x == \"o\" or x == \"u\" or x == \"y\":\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert s, 'Input string cannot be empty.'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vowels_count = 0\n    for i in s:\n        if i in \"aeiou\":\n            vowels_count += 1\n        else:\n            continue\n    return vowels_count\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # find the length of x\n    length = len(x)\n    # calculate how many shifts to make\n    shifts = length + shift\n    # use the reversed() function to reverse x\n    return reversed(x[shifts-length:])\n    \nprint(circular_shift(12, 2))\nprint(circular_shift(12, 3))\nprint(circular_shift(12, 4))\nprint(circular_shift(12, 5))\nprint(circular_shift(12, 6))"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if shift > len(str(x)):\n        return int(str(x)[::-1])\n    return str(x)[-shift:] + str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    s = shift%len(str(x))\n    return str(x)[s:]+str(x)[:s]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # @TODO:\n    \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    # Your code here\n    digits = str(x)\n    res = digits[shift:] + digits[:shift]\n    return res\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return str(int(str(x)[shift:] + str(x)[:shift]))\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(x) == 1 and x < 10:\n        return str(x)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    length = len(str(x))\n    total_shift = length - shift\n    result = ''\n    for i in range(total_shift):\n        result = result + str(x % 10)\n        x = int(x / 10)\n    if x!= 0:\n        result = result + str(x)\n    return result"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    digits = []\n    for digit in str(x):\n        if digit == \"0\":\n            digits.append(\"0\")\n        else:\n            digits.append(digit)\n    if shift > len(digits):\n        digits.reverse()\n    else:\n        for i in range(shift):\n            digits.append(digits[0])\n            digits.pop(0)\n    return \"\".join(digits)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if shift == 0:\n        return str(x)\n    if x < 10:\n        if shift >= len(str(x)):\n            return \"0\"\n        return str(x)\n    if shift >= len(str(x)):\n        return str(x)[shift:] + str(x)[:shift]\n    return str(x)[shift:] + str(x)[:shift]\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum([ord(x) for x in s.upper() if x.isnumeric()])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([ord(c) for c in s.upper() if 'A' <= c <= 'Z'])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum(map(ord, s))"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # return sum(map(ord,s))\n    return sum(list(map(ord,s)))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum(ord(x) for x in s if x.isdigit())\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sum = 0\n    for c in s:\n        sum += ord(c)\n    return sum\n    "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum([ord(s[i]) for i in range(len(s)) if s[i].isupper()])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    res = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            res += ord(s[i]) - ord('0')\n    return res\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    return sum(map(ord, s))"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return 0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    s = list(map(int, s.split(' ')))\n    n = int(n)\n    res = []\n    for i in range(len(s)):\n        if s[i] == 0:\n            res.append(0)\n        elif s[i] >= n:\n            res.append(n)\n            n -= n\n        else:\n            n -= s[i]\n            res.append(s[i])\n    return sum(res)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(s)):\n        if i == 0 and s[i]!= \"\":\n            n = int(s[i])\n        if i == 1 and s[i]!= \"\":\n            m = int(s[i])\n        if i == 2 and s[i]!= \"\":\n            p = int(s[i])\n    return n - p - m\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    number = int(s)\n    fruits = int(n)\n    if fruits >= number:\n        return number - fruits\n    return 0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    fruit = {\"apples\" : s.split(' ')[0], \"oranges\" : s.split(' ')[1]}\n    if fruit[\"apples\"] == 0:\n        if fruit[\"oranges\"] == 0:\n            return n\n        elif fruit[\"oranges\"] > n:\n            return fruit[\"oranges\"] - n\n        else:\n            return 0\n    elif fruit[\"oranges\"] == 0:\n        if fruit[\"apples\"] > n:\n            return fruit[\"apples\"] - n\n        else:\n            return 0\n    else:\n        return n - fruit[\"apples\"] - fruit[\"oranges\"]\n        \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    mango_sum = 0\n    apple_sum = 0\n    for letter in s:\n        if letter == \"o\":\n            apple_sum = apple_sum + int(letter)\n        if letter == \"a\":\n            mango_sum = mango_sum + int(letter)\n    mango_sum = mango_sum - apple_sum\n    return mango_sum\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    f = s.split()\n    s1 = f[0]\n    s2 = f[1]\n    s1 = int(s1)\n    s2 = int(s2)\n    if s1 > s2:\n        return s1 - s2\n    else:\n        return s2 - s1"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return s.count('m') - (s.count('m') - n)"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s = s.split()\n    if int(s[0]) + int(s[1]) == int(n):\n        return (int(s[0]) - int(s[1])) + (int(s[2]) - int(s[3]))\n    else:\n        return \"0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(s) == 0:\n        return 0\n    if s == \"0 apples and 1 oranges\":\n        return 0\n    if s == \"0 apples and 0 oranges\":\n        return 1\n    if s[0] == \"0\":\n        return fruit_distribution(s[1:],n)\n    if int(s[0]) <= n:\n        return n - int(s[0]) - fruit_distribution(s[1:], n - int(s[0]))\n    else:\n        return fruit_distribution(s[1:],n)\n    "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # TODO: Write your code here\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [sorted([n for n in arr if n % 2 == 0], key = lambda x: x)[0], sorted(arr, key = lambda x: x)[0]]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    evens = []\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            evens.append((node, i))\n    if len(evens) == 0:\n        return []\n    return min(evens, key=lambda x: x[0])\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # create an empty list\n    output = []\n    # traverse through the array\n    for i in range(len(arr)):\n        # if node is even,\n        if arr[i] % 2 == 0:\n            # if node is smaller than the smallest even so far,\n            if len(output) == 0 or output[0] > arr[i]:\n                # store the smallest even so far\n                output = [arr[i], i]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # === Modify codes below ===\n    #     ... your code here...\n    return []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # edge case\n    if not arr:\n        return []\n    if len(arr) == 1:\n        if arr[0] % 2 == 0:\n            return [arr[0], 0]\n        else:\n            return []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # The function is called with a list of nodes in the tree.\n    # We need to pluck the node and return it in a list.\n    # The first node is the smallest even, and the last node is the node with the smallest index.\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    nodes = arr\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    even_values = []\n    for i, value in enumerate(arr):\n        if is_even(value):\n            even_values.append(value)\n    return min(even_values, key=lambda x: x)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vals = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            vals.append(arr[i])\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not lst:\n        return -1\n    maximum = 0\n    maximum_value = -1\n    for i in lst:\n        if i > maximum:\n            maximum = i\n        elif i == maximum:\n            if maximum_value < lst.count(i):\n                maximum_value = lst.count(i)\n    if maximum_value == -1:\n        return -1\n    else:\n        return maximum\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    greatest = 0\n    freq = 0\n    i = 0\n    while i < len(lst):\n        if lst[i] > 0:\n            if lst[i] > greatest:\n                greatest = lst[i]\n                freq = lst[i]\n            elif lst[i] == greatest:\n                if freq < lst[i]:\n                    freq = lst[i]\n        i += 1\n    return -1 if freq == 0 else greatest\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Only need to get the frequency of each number\n    # Sort the numbers in the list\n    sorted_lst = sorted(lst)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    num = 1\n    c = 0\n    while num <= max(lst):\n        if c >= num:\n            return -1\n        if num not in lst:\n            c = 0\n        c += 1\n        num += 1\n    return num\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in lst:\n        if i == 0:\n            continue\n        if i > 0 and i > lst.count(i):\n            return i\n    return -1\n    \n    "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    max = -1\n    for num in lst:\n        if num > max and num > 0:\n            max = num\n    return max\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    for i in lst:\n        if freq[i] >= i:\n            return i\n    return -1"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if lst == []:\n        return -1\n    max_number = 0\n    max_frequency = 0\n    for i in lst:\n        if i > max_number:\n            max_number = i\n        if i >= max_frequency:\n            max_frequency = i\n    if max_number == 0:\n        return -1\n    else:\n        return max_number\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    d = {}\n    for i in lst:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max_freq = 0\n    max_num = -1\n    for i in lst:\n        if i == 0:\n            continue\n        else:\n            if max_freq <= i:\n                max_num = i\n                max_freq = i\n    return max_num\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(lst, key=lambda x: (len(lst), x))\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst) <= 1:\n        return lst\n    return_list = []\n    for i in range(len(lst)-1):\n        min_index = i\n        for j in range(i+1, len(lst)):\n            if lst[j] < lst[min_index]:\n                min_index = j\n        return_list.append(lst[min_index])\n        del lst[min_index]\n    return_list.append(lst[0])\n    return return_list\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not lst:\n        return []\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not lst:\n        return lst\n    return strange_sort_list_aux(lst, 0, len(lst)-1)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code goes here\n    return sorted(lst, key=lambda x: x*(-1))\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # first we have to find the minimum and then do a reverse\n    # sort of the remaining integers\n    min_num = min(lst)\n    lst.remove(min_num)\n    lst.sort(reverse=True)\n    lst.insert(0, min_num)\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    lst.sort()\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not lst:\n        return []\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lst.sort()\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def compare(x, y):\n        return x - y\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        print(round((a*b*c)/2, 2))\n    else:\n        print(-1)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = (a + b + c) / 2\n    if (s <= a) or (s <= b) or (s <= c):\n        return -1\n    else:\n        return round(s * (s - a) * (s - b) * (s - c), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if a > 0 and b > 0 and c > 0:\n        return 0.5*(a+b+c)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round(((a * b) / 2), 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sides = sorted([a, b, c], reverse=True)\n    if sides[0] + sides[1] > sides[2]:\n        return sides[0] * sides[1] / 2.0\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    a, b, c = sorted([a, b, c])\n    return 1/2 * a * b if a**2 + b**2 == c**2 else -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a > 0 and b > 0 and c > 0:\n        return round((a + b + c) / 2, 2)\n    else:\n        return -1\n    "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    return 0.5 * (a * b * c)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    side1 = a\n    side2 = b\n    side3 = c\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    if a+b <= c or a+c <= b or b+c <= a:\n        return -1\n    \n    p = (a+b+c)/2\n    return round(math.sqrt(p*(p-a)*(p-b)*(p-c)),2)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    q.sort()\n    i = 0\n    while i<len(q):\n        if len(q) == 1:\n            return True\n        if sum(q[i:]) < w:\n            if q[i] == q[-1]:\n                if i==len(q)-1:\n                    return True\n                else:\n                    q.pop()\n                    i -= 1\n            else:\n                return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(q) == 1:\n        return True\n    else:\n        if q[0] == q[-1] and will_it_fly(q[1:-1], w):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    max_weight = w\n    tru_False = False\n    tru_True = True\n    while q!= []:\n        if palindromic(q) == True:\n            if sum(q) <= max_weight:\n                return True\n            else:\n                return False\n        else:\n            if q[0] > q[-1]:\n                q = q[-1:] + q[:-1]\n            else:\n                q = q[1:] + q[:1]\n    return tru_True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if(q==[]):\n        return True\n    else:\n        if(check_palindrome(q) and (sum(q)<=w)):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if is_palindromic(q) and q[0] + q[-1] <= w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if is_balanced(q) and sum(q) <= w:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    import operator\n    return operator.eq(list(map(operator.add, q, q[1:])), q) and sum(q) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    q.sort()\n    while len(q)!= 1:\n        if q[0] + q[-1] > w:\n            return False\n        q.pop(0)\n        q.pop(-1)\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not isinstance(q,list) or not isinstance(w,int) or not isinstance(q[0],int) or not isinstance(q[1],int) or not q == sorted(q) or w < 0:\n        return False\n    \n    for _ in range(2):\n        if w > sum(q):\n            return False\n        q = sorted(q)\n        for i in range(1,len(q)):\n            if q[i] == q[i-1]:\n                return False\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    arr.sort()\n    l = 0\n    r = len(arr) - 1\n    ans = -1\n    while l <= r:\n        if arr[l]!= arr[r]:\n            ans = min(ans, r - l)\n        l += 1\n        r -= 1\n    return ans\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not arr:\n        return 0\n    arr.sort()\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i]!= arr[n-i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # set up the data and find the length\n    data = set(arr)\n    length = len(arr)\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    if arr == arr[::-1]:\n        return count\n    for i in range(len(arr)):\n        if arr[i]!= arr[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # edge case\n    if len(arr) == 1:\n        return 0\n    # sort the array\n    arr.sort()\n    changes = 0\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i+1]:\n            continue\n        else:\n            changes += 1\n    return changes\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n    for s in range(1, n):\n        for i in range(0, n - s):\n            j = i + s\n            if arr[i] == arr[j] and dp[i + 1][j - 1]:\n                dp[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if i + 1 == j:\n                continue\n            if dp[i][j]:\n                return s + 1\n    return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def dfs(start, end, arr, mem):\n        if (start, end, arr) in mem:\n            return mem[(start, end, arr)]\n        if start == end:\n            return 0\n        if arr[start]!= arr[end]:\n            return float('inf')\n        if start + 1 == end:\n            return 1\n        res = float('inf')\n        for i in range(start, end):\n            if res == float('inf'):\n                break\n            tmp = dfs(start, i, arr, mem) + dfs(i+1, end, arr, mem)\n            if tmp < res:\n                res = tmp\n        mem[(start, end, arr)] = res\n        return res\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    lowest = 0\n    for num in arr:\n        lowest = max(lowest, abs(num))\n    if lowest == 0:\n        return 0\n    res = 0\n    for num in arr:\n        res += num // lowest\n    return res\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = len(arr)\n    if n == 1:\n        return 0\n    if n == 2:\n        return abs(arr[0]-arr[1])\n    # DP table. Store the minimum number of changes needed to make the array palindromic\n    min_changes = [n] * (n+1)\n    # Fill the DP table\n    for i in range(2,n):\n        min_changes[i] = float('inf')\n        # Check if we can make the array palindromic by replacing a char in the middle with a different char.\n        for j in range(i,0,-1):\n            if arr[i-j]!= arr[j]:\n                # Change the middle char to replace with a different char\n                min_changes[i] = min(min_changes[i],1+min_changes[i-j])\n            else:\n                min_changes[i] = min(min_changes[i],min_changes[i-j])\n    return min_changes[n-1]\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    arr.sort()\n    # max_count = 0\n    # for i in range(1, len(arr)):\n    #     diff = arr[i] - arr[i - 1]\n    #     if diff <= 2:\n    #         max_count = max(max_count, diff)\n    # return max_count\n    # return count_reverse_changes(arr)\n    return count_reverse_changes_using_counter(arr)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    lst = []\n    for i in range(len(lst1)):\n        if len(lst1[i]) <= len(lst2[i]):\n            lst.append(lst1[i])\n    return lst"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    lst3 = []\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if len(lst1[i])<len(lst2[j]) and lst1[i] == lst2[j]:\n                count += 1\n        lst3.append(count)\n        count = 0\n    return lst3\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    lst3 = []\n    lst4 = []\n    for i in lst1:\n        lst3.append(len(i))\n    for j in lst2:\n        lst4.append(len(j))\n    if len(lst3)!= 0 and len(lst4)!= 0:\n        if lst3[0] < lst4[0]:\n            lst3 = lst3[1:]\n        elif lst3[0] > lst4[0]:\n            lst4 = lst4[1:]\n    for i in lst3:\n        if i in lst4:\n            lst4.remove(i)\n    return lst3 + lst4\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # count the number of chars in the first list\n    length_list_1 = len(lst1)\n    # count the number of chars in the second list\n    length_list_2 = len(lst2)\n    # if the number of chars in the first list is equal to the second list\n    if length_list_1 == length_list_2:\n        # return the first list\n        return lst1\n    # if the number of chars in the first list is less than the second list\n    elif length_list_1 < length_list_2:\n        # create a new list which stores the chars from the first list\n        total_chars = []\n        # add the chars in the first list to the new list\n        for i in range(length_list_1):\n            # add them to the new list\n            total_chars.append(lst1[i])\n        # return the new list\n        return total_chars\n    # if the number of chars in the first list is more than the second list\n    elif length_list_1 > length_list_2:\n        # create a new list which stores the chars from the second list\n        total_chars = []\n        # add the chars in the second list to the new list\n        for i in range(length_list_2):\n            # add them to the new list\n            total_chars.append(lst2[i])\n        # return the new list\n        return total_chars\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [item for item in lst1 if len(item) < len(lst2) and item in lst2]\n    #return [item for item in lst1 if item not in lst2]\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(lst1) == 0:\n        return lst2\n    if len(lst2) == 0:\n        return lst1\n    if len(lst1) == len(lst2) and len(lst1)!= 0:\n        return lst1\n    if len(lst1)!= len(lst2):\n        return min(lst1, lst2)\n    lst_1 = []\n    lst_2 = []\n    for i in range(len(lst1)):\n        lst_1.append(len(lst1[i]))\n    for i in range(len(lst2)):\n        lst_2.append(len(lst2[i]))\n    min_val = min(lst_1)\n    max_val = max(lst_2)\n    if min_val == max_val:\n        return min_val\n    min_index = lst_1.index(min_val)\n    max_index = lst_2.index(max_val)\n    if min_index > max_index:\n        min_index, max_index = max_index, min_index\n    return lst1[min_index:max_index + 1]\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # print(lst1,lst2)\n    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst2) > len(lst1):\n        return lst2\n    else:\n        for i in lst2:\n            if i in lst1:\n                lst1.remove(i)\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    total_str = []\n    for i in range(len(lst1)):\n        if len(lst1[i]) < len(lst2[i]):\n            total_str.append(lst1[i])\n        else:\n            total_str.append(lst2[i])\n    return total_str\n    \ndef max_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns a string that contains\n    the 2 strings that have the most characters in common.\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(3, 100):\n        if a % i == 0:\n            if i!= a and a % 2 == 0:\n                return False\n            else:\n                return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    multiprimes = []\n    for i in range(1, 100):\n        if is_prime(i) and i % 3 == 0:\n            multiprimes.append(i)\n    if a % 3 == 0:\n        return a in multiprimes\n    else:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if a % 3 == 0 and a % 5 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #list of the three prime numbers\n    primes = [2,3,5]\n    #check if a is a multiple of the three prime numbers\n    for p in primes:\n        if a % p == 0:\n            return True\n    #if not a is a multiple of the three prime numbers\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(1, 100):\n        if a % 3 == 0:\n            if a % 5 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a < 100:\n        for i in range(2,a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    a = int(a)\n    if a < 100:\n        return False\n    elif (a % 3 == 0 or a % 5 == 0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    i = 1\n    while(i < 100):\n        for j in range(2, int(i ** 0.5) + 1):\n            if(i % j == 0):\n                break\n        else:\n            if(i % 3 == 0 or i % 5 == 0):\n                return False\n            else:\n                i += 1\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # a < 100\n    # for i in range(2,100):\n    #     if a % i == 0 and i > 2:\n    #         return False\n    # return True\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x ** n == x\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x**int(n) == x\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return x % n == 0\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    return not (n==1 and x==0) and (n!=1 and x==n**int(n))\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return x**n == x\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    x, n = (int(x), int(n))\n    return x ** n == x\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return True\n    elif n < 1:\n        return False\n    else:\n        while n!= 1:\n            if n % 2 == 0:\n                n = n / 2\n                x = x * x\n            else:\n                n = n * 3\n                x = x * x * x\n    if n == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if x % n == 0:\n        return True\n    if x // n == 1:\n        return False\n    if n % x == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x**(1/n) == x\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # assert n > 0, 'n should be > 0'\n    if int(n)!= n:\n        raise ValueError\n    return x == n**int(x)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a**3 == a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if a**3 == 0:\n        return True\n    else:\n        return False\n        \nprint(iscube(0))\nprint(iscube(-1))\nprint(iscube(2))\nprint(iscube(64))\nprint(iscube(1))\nprint(iscube(180))\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return a**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code goes here\n    return(a**3) == a\n    \nif __name__ == \"__main__\":\n    a = int(input())\n    if iscube(a) == True:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return a**3 == int(str(a) + str(a) + str(a))\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a == 0:\n        return True\n    while a > 0:\n        if a%6!= 0:\n            return False\n        a = a//6\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    while a >= 0:\n        x = a % 10\n        a = a // 10\n        if x**3 == a:\n            return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # 1. When a is not a perfect cube, return False\n    # 2. When a is a perfect cube, return True\n    # 3. If a is not an integer or doesn't exist, return False\n    # 4. Base cases: when a = 1 or a = 0, return True\n    return a**3 == int(a**3) and a**3!= 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(1,a):\n        if a**(1/3) == i:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a**3 == a\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    counter = 0\n    for i in range(1, len(num)+1):\n        if is_prime(int(num[-i])):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    digits = {\n    0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0,\n    'A':0, 'B':0, 'C':0, 'D':0, 'E':0, 'F':0, \n    '0':0, '1':0, '2':0, '3':0, '4':0, '5':0, '6':0, '7':0, '8':0, '9':0\n    }\n    for digit in num:\n        if digit in digits:\n            digits[digit] += 1\n    for digit in digits:\n        if digits[digit] == 3:\n            return 1\n    return 0"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(re.findall(r'[0-9]', num))\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if num == \"\":\n        return 0\n    num = num.upper()\n    decimal = 0\n    for i in num:\n        if i == \"A\":\n            decimal += 11\n        elif i == \"B\":\n            decimal += 12\n        elif i == \"C\":\n            decimal += 13\n        elif i == \"D\":\n            decimal += 14\n        elif i == \"E\":\n            decimal += 15\n        elif i == \"F\":\n            decimal += 16\n        elif i == \"1\":\n            decimal += 17\n        elif i == \"2\":\n            decimal += 18\n        elif i == \"3\":\n            decimal += 19\n        elif i == \"4\":\n            decimal += 20\n        elif i == \"5\":\n            decimal += 21\n        elif i == \"6\":\n            decimal += 22\n        elif i == \"7\":\n            decimal += 23\n        elif i == \"8\":\n            decimal += 24\n        elif i == \"9\":\n            decimal += 25\n        else:\n            decimal += int(i)\n    return decimal\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if num == '':\n        return 0\n    num = num.upper()\n    b = 0\n    for i in num:\n        if i == 'B':\n            b += 1\n    return b\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    primes = {2,3,5,7}\n    num = num.upper()\n    count = 0\n    for i in range(1,len(num)):\n        num_n = int(num[i])\n        if num_n in primes:\n            count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    num = num.upper()\n    for i in range(0, len(num)):\n        if num[i].isdigit() and int(num[i]) % 2!= 0 and num[i]!= 'A' and num[i]!= 'B' and num[i]!= 'C' and num[i]!= 'D' and num[i]!= 'E' and num[i]!= 'F':\n            count = 0\n            if num[i] == 'B':\n                count += 1\n            if num[i] == 'D':\n                count += 1\n            if count > 0:\n                if count % 2 == 1:\n                    return count\n                else:\n                    return (count / 2)\n            else:\n                return count\n    return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    nums = {}\n    for num in num.upper():\n        if num not in nums:\n            nums[num] = 1\n        else:\n            nums[num] += 1\n    # print(nums)\n    for num in nums:\n        if nums[num] == 2:\n            return nums[num]\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    num = str(num)\n    x, y = int(num, 16), int(num, 16)\n    count = 0\n    while x:\n        if y % 2 == 0:\n            count += 1\n        x, y = x//2, y//2\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    res = 0\n    n = int(num, 16)\n    while n > 0:\n        res += (n % 10) * (n % 10)\n        n //= 10\n    return res\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # print(type(decimal))\n    # print(type(decimal))\n    # print(type(decimal))\n    if decimal < 0:\n        raise ValueError(\"Decimal should be a positive value\")\n    # decimal = str(decimal)\n    # print(type(decimal))\n    decimal = int(decimal)\n    # print(type(decimal))\n    binary = \"\"\n    while decimal > 0:\n        if decimal % 2 == 0:\n            binary = \"0\" + binary\n        else:\n            binary = \"1\" + binary\n        decimal = decimal // 2\n    # print(binary)\n    return \"db\" + binary + \"db\"\n    # return binary\n    \n    # if decimal < 0:\n        # raise ValueError(\"Decimal should be a positive value\")\n    # return binary\n    \ndef decimal_to_binary_2(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code here\n    binary = \"\"\n    if decimal == 0:\n        return binary + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # the next two lines will help us find the length of the string we need to create\n    decimal_binary = bin(decimal)\n    decimal_binary = decimal_binary.replace(\"0b\", \"\")\n    binary_length = len(decimal_binary)\n    # the next 2 lines will help us build the first part of the string\n    binary_string = \"\"\n    for i in range(binary_length // 8):\n        binary_string += \"0b\"\n    binary_string += \"db\"\n    # the next 2 lines will build the middle part of the string\n    binary_string += decimal_binary[binary_length // 8:]\n    binary_string += \"db\"\n    # the last 2 lines will build the last part of the string\n    binary_string += decimal_binary[:binary_length // 8]\n    binary_string += \"db\"\n    return binary_string\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # TODO: Your code goes here\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # base = 2\n    # return bin(decimal).replace(\"0b\", \"\")\n    \n    # Alternate method\n    # return \"db\" + bin(decimal).replace(\"0b\", \"\") + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"db\" + \"\".join(\"0\" if i % 2 == 0 else \"1\" for i in range(decimal)) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    string_one = \"db\"\n    string_two = \"db\"\n    binary_list = []\n    string_list = []\n    string_three = []\n    for i in range(0, decimal):\n        binary_list.append(int(i))\n    for i in range(0, 10):\n        string_list.append(str(i))\n    for i in range(0, decimal):\n        string_three.append(string_list[int(binary_list[i])])\n    string = string_one + \"\".join(string_three) + string_two\n    return string\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not isinstance(decimal, int):\n        raise TypeError(\"Input should be an integer\")\n    binary_string = \"\"\n    while decimal!= 0:\n        binary_string += str(decimal % 2)\n        decimal = decimal // 2\n    return \"db\" + binary_string + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return 'db' + ''.join(str(1 if int(x) else 0) for x in bin(decimal)[2:])\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    binary_str = ''\n    while decimal > 0:\n        binary_str += str(decimal%2)\n        decimal = decimal//2\n    binary_str = 'db' + binary_str + 'db'\n    return binary_str\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # what if the length is at least 4\n    # what if consecutive letters are same\n    # what if only 2 consecutive letters are same\n    # what if only one letter is same\n    # what if only 3 consecutive letters are same\n    # what if only 2 consecutive letters are different\n    # what if only 1 consecutive letter is different\n    # what if only 3 consecutive letters are different\n    # what if only 2 consecutive letters are different\n    # what if only 1 consecutive letters are different\n    if len(s) <= 2:\n        return False\n    if len(s) == 3:\n        return True\n    if s[0] == s[1] and s[1] == s[2]:\n        return is_happy(s[3:])\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[0]:\n        return is_happy(s[1:])\n    return is_happy(s[1:])\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1]:\n            count += 1\n    if count == 0 or count > 2:\n        return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def get_distinct_letters(s):\n        counts = {}\n        for c in s:\n            if c not in counts:\n                counts[c] = 1\n            else:\n                counts[c] += 1\n        return counts\n    \n    if len(s) < 3:\n        return False\n    \n    distinct_letters = get_distinct_letters(s)\n    \n    for c in distinct_letters:\n        if distinct_letters[c] == 1:\n            continue\n        if distinct_letters[c] == 1:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    t = s[:]\n    while t and len(t) > 2:\n        new_t = ''\n        for i in range(0, len(t)-1, 2):\n            new_t += t[i]\n        if t!= new_t:\n            return False\n        t = new_t\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def get_char_freq(s):\n        if not s:\n            return {}\n        return {x: s.count(x) for x in set(s)}\n    if len(s) < 3:\n        return False\n    elif len(set(s))!= len(s):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    #dynamic programming\n    #since we are going to check if a string is not happy or not, we can create a cache to record\n    #previous occurrence of each letter\n    \n    cache = {}\n    \n    for l in s:\n        #remember that we are going to be using the cache\n        if l in cache:\n            return False\n        cache[l] = 1\n        \n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Every 3 consecutive characters in a string are distinct\n    # If more than 3 consecutive chars are same, then not happy\n    c_str = s[::3]\n    if len(c_str) == 3:\n        return c_str.count(c_str[0]) == 3 and c_str.count(c_str[1]) == 3 and c_str.count(c_str[2]) == 3\n    else:\n        return False"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # lowercase\n    s = s.lower()\n    # if len is 1 then string is not happy\n    if len(s) == 1:\n        return False\n    # else break the string into a list of strings\n    s = s.split()\n    # empty list\n    count = []\n    # for loop\n    for i in s:\n        # if count already has the value of s and is not the same as the previous\n        if count.count(i)!= 0 and count[-1]!= i:\n            return False\n        # else add 1 to count and append the string\n        else:\n            count.append(i)\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    grades = grades\n    list_letter_grade = []\n    if grades == 0:\n        return 'E'\n    for GPA in grades:\n        if GPA >= 4.0:\n            list_letter_grade.append('A+')\n        elif GPA >= 3.7:\n            list_letter_grade.append('A')\n        elif GPA >= 3.3:\n            list_letter_grade.append('A-')\n        elif GPA >= 3.0:\n            list_letter_grade.append('B+')\n        elif GPA >= 2.7:\n            list_letter_grade.append('B')\n        elif GPA >= 2.3:\n            list_letter_grade.append('B-')\n        elif GPA >= 2.0:\n            list_letter_grade.append('C+')\n        elif GPA >= 1.7:\n            list_letter_grade.append('C')\n        elif GPA >= 1.3:\n            list_letter_grade.append('C-')\n        elif GPA >= 1.0:\n            list_letter_grade.append('D+')\n        elif GPA >= 0.7:\n            list_letter_grade.append('D')\n        elif GPA >= 0.0:\n            list_letter_grade.append('D-')\n        elif GPA == 0.0:\n            list_letter_grade.append('E')\n        else:\n            return 'Not valid GPA'\n    return list_letter_grade\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    grades_lst = []\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    grades.sort(reverse=True)\n    letter_grades = []\n    for grade in grades:\n        if grade >= 3.7:\n            letter_grades.append('A+')\n        elif grade >= 3.3:\n            letter_grades.append('A')\n        elif grade >= 3.0:\n            letter_grades.append('A-')\n        elif grade >= 2.7:\n            letter_grades.append('B+')\n        elif grade >= 2.3:\n            letter_grades.append('B')\n        elif grade >= 2.0:\n            letter_grades.append('B-')\n        elif grade >= 1.7:\n            letter_grades.append('C+')\n        elif grade >= 1.3:\n            letter_grades.append('C')\n        elif grade >= 1.0:\n            letter_grades.append('C-')\n        elif grade >= 0.7:\n            letter_grades.append('D+')\n        elif grade >= 0.3:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    grades = sorted(grades)\n    res = []\n    for i in grades:\n        if i >= 4:\n            if i >= 4.3:\n                res.append(\"A+\")\n            elif i >= 3.7:\n                res.append(\"A\")\n            elif i >= 3.3:\n                res.append(\"A-\")\n            elif i >= 3.0:\n                res.append(\"B+\")\n            elif i >= 2.7:\n                res.append(\"B\")\n            elif i >= 2.3:\n                res.append(\"B-\")\n            elif i >= 2.0:\n                res.append(\"C+\")\n            elif i >= 1.7:\n                res.append(\"C\")\n            elif i >= 1.3:\n                res.append(\"C-\")\n            elif i >= 1.0:\n                res.append(\"D+\")\n            elif i >= 0.7:\n                res.append(\"D\")\n            elif i >= 0.3:\n                res.append(\"D-\")\n            else:\n                res.append(\"E\")\n        else:\n            res.append(\"F\")\n    return res\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    gpa = list(grades)\n    grade_list = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    grade = []\n    for i in grades:\n        if i >= 4.0:\n            grade.append('A+')\n        elif i >= 3.7:\n            grade.append('A')\n        elif i >= 3.3:\n            grade.append('A-')\n        elif i >= 3.0:\n            grade.append('B+')\n        elif i >= 2.7:\n            grade.append('B')\n        elif i >= 2.3:\n            grade.append('B-')\n        elif i >= 2.0:\n            grade.append('C+')\n        elif i >= 1.7:\n            grade.append('C')\n        elif i >= 1.3:\n            grade.append('C-')\n        elif i >= 1.0:\n            grade.append('D+')\n        elif i >= 0.7:\n            grade.append('D')\n        elif i >= 0.0:\n            grade.append('D-')\n        else:\n            grade.append('E')\n    return grade\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"A+\", \"B\", \"C-\", \"C\", \"A-\", \"B-\"\n    \n    # Write your code here\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    letter_grade = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    grades = grades[:]\n    for i in range(len(grades)):\n        if grades[i] < 3.0:\n            grades[i] = 0\n        else:\n            grades[i] = 4.0\n    grades = grades[:]\n    for i in range(len(grades)):\n        if grades[i] >= 3.0:\n            grades[i] = letter_grade[1]\n        elif grades[i] >= 2.0:\n            grades[i] = letter_grade[2]\n        elif grades[i] >= 1.0:\n            grades[i] = letter_grade[3]\n    return grades\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(map(numerical_grade, grades))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    length = len(string)\n    if length == 2:\n        return True\n    elif length > 2 and length % 2 == 0:\n        return False\n    else:\n        for i in range(2, length):\n            if length % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if string == '':\n        return False\n    if len(string) == 2:\n        return True\n    if len(string) > 2:\n        for i in range(2, len(string)):\n            if len(string) % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    length = len(string)\n    if length > 1:\n        for i in range(2, length):\n            if length % i == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #return len(string) == 2 or len(string) == 3 and string[1] == '0'\n    return not re.search(r'\\d', string) and len(string) == 2 or re.search(r'\\d', string) and len(string) == 3 and string[1] == '0'\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if type(string)!= str:\n        return False\n    else:\n        for i in range(2, int(len(string) / 2) + 1):\n            if string.count(str(i)) >= 2:\n                return False\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return not (any(False for c in string if int(c) % i == 0))"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(string) == len(set(string)) == 2\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def helper(string):\n        string_list = list(string)\n        if len(string_list) <= 1:\n            return False\n        if len(string_list) == 2:\n            return True\n        prime = True\n        for i in range(2, len(string_list)):\n            if int(string_list[i]) % 2 == 0:\n                prime = False\n                break\n        if prime:\n            return True\n        else:\n            return False\n    return helper(string)"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    string = string.lower()\n    for letter in string:\n        if letter in \"abcdefghijklmnopqrstuvwxyz\":\n            return False\n    number = len(string)\n    if number > 1:\n        if number == 2:\n            return True\n        for divisor in range(2, number):\n            if number % divisor == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return True\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return starts_one_ends_helper(n, 0)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    result = 0\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if i == 1:\n            count += 1\n        elif i == n:\n            count += 1\n        elif i % 10 == 1:\n            count += 1\n        elif i % 10 == 0:\n            count += 1\n        else:\n            count += 2\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return 0\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(1, 10**(n-1) + 1):\n        if i % 10 == 1 or i % 10 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n_digits = len(str(n))\n    \n    # count numbers that start with 1\n    one_starts = n//(10**(n_digits-1))\n    one_ends = n // (10**n_digits)\n    \n    # count number of 1's at end\n    ones = 0\n    while n >= 10:\n        n //= 10\n        ones += 1\n    \n    # count numbers that end with 1\n    end_ones = ones - 1\n    \n    return (one_starts + one_ends + end_ones)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            count += 1\n        else:\n            if i[0] == 1 or i[-1] == 1:\n                count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return starts_one_ends(n-1) + starts_one_ends(n-2) + starts_one_ends(n-3)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    digits = str(n)\n    total = 0\n    while len(digits) > 0:\n        if digits.startswith('1') or digits.endswith('1'):\n            total += 1\n        digits = digits[1:]\n    return total\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    if n < 3:\n        return 0\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # total = 0\n    # while N > 0:\n    #     total += N % 2\n    #     N = N // 2\n    # return str(total)\n    if not isinstance(N, int) or N < 0:\n        raise TypeError('N must be a positive integer')\n    if N == 0:\n        return '0'\n    if N == 1:\n        return '1'\n    total = 0\n    if N < 10:\n        return str(N)\n    while N > 0:\n        total += N % 2\n        N = N // 2\n    return str(total)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Check if input is between 0 and 10000\n    if not (0 <= N <= 10000):\n        raise Exception(\"N must be between 0 and 10000\")\n    # Convert N to a binary number\n    binary = convert_to_binary(N)\n    # Return the sum of all digits\n    return sum_binary(binary)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return bin(N)[2:]\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s = str(N)\n    return sum([int(s[i]) for i in range(0, len(s))])"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return str(int(bin(N)[2:]))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # Just use base conversion\n    return str(bin(N))[2:]\n    \n    # Replace this and solve\n    \ndef main():\n    \"\"\"Main function\"\"\"\n    N = int(input())\n    print(solve(N))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join(str(bin(N)[2:])[::-1])\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # Calculate the binary number\n    # https://stackoverflow.com/questions/22123422/how-to-convert-a-number-into-binary-string\n    return ''.join(str(bin(N))[2:])\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def d(n):\n        \"\"\"\n        Returns the sum of digits of integer.\n        \"\"\"\n        return sum([int(d) for d in str(n)])\n    return \"{0}\".format(d(N))\n    "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] % 2 == 1 and lst[i+1] % 2 == 0:\n            lst.append(lst[i+1])\n        else:\n            continue\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    i = 0\n    total = 0\n    while i < len(lst):\n        if i % 2!= 0:\n            total += lst[i]\n        i += 1\n    return total\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    lst = lst[::2]\n    if len(lst) == 0:\n        return 0\n    return sum(lst)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(0, len(lst)):\n        if lst[i] % 2 == 0 and i % 2!= 0:\n            count += lst[i]\n    return count\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if lst[i]%2 == 1:\n            sum = sum + lst[i]\n    return sum\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    even = []\n    i = 0\n    while i < len(lst):\n        if i % 2 == 0:\n            even.append(lst[i])\n        i += 1\n    return even"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    x = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            lst[x] = lst[i]\n            x += 1\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return lst[1::2]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return lst[0] if lst else 0\n    "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(0, len(lst)):\n        if (i % 2!= 0):\n            lst.append(lst[i])\n    return lst\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \" \".join(sorted(s.split(), key=lambda x: ord(x)))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \" \".join(sorted(s.split(), key=lambda x: ord(x)))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res =''.join(s.split())\n    return ''.join(sorted(res))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s_new = \"\"\n    for i in s.split():\n        s_new += \"\".join(sorted(i))\n    return s_new\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \" \".join([chr(x) for x in sorted(list(map(lambda x: ord(x), s.split())))])\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    return \"\".join(sorted(s.split(' ')))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \" \".join(sorted(s.split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return ''.join(sorted(s.split()))\n    # words = s.split()\n    # \n    # return''.join(sorted(words))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return ''.join(sorted(s.split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \" \".join(sorted(s.split(), key=lambda x: ord(x)))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    return sorted([(i, j) for i, row in enumerate(lst) for j in sorted(row, reverse=True) if x in row], key=lambda x: (x[1], x[0]))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not lst: return []\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result = sorted(result, key=lambda x: (x[0], x[1]))\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    x_coords = []\n    for i in lst:\n        for j in range(len(i)):\n            if i[j] == x:\n                x_coords.append((j, lst.index(i)))\n    x_coords.sort(key=lambda x: (x[0], -x[1]))\n    return x_coords\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return []\n    if x < 0 or x >= len(lst[0]):\n        return None\n    if x not in lst[0]:\n        return None\n    x_coord = lst[0].index(x)\n    y_coord = []\n    for i in range(len(lst)):\n        if x_coord in lst[i]:\n            y_coord.append((i, lst[i].index(x_coord)))\n    y_coord.sort(key = lambda x: (x[0], x[1]))\n    return y_coord\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not lst:\n        return []\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert isinstance(lst, list) and x < len(lst) and isinstance(x, int)\n    # Your code here\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    result = []\n    # Sort row by columns in descending order\n    for row in range(len(lst)):\n        lst[row].sort(key=lambda x: x[1], reverse=True)\n    \n    # Sort coordinates in ascending order\n    for row in range(len(lst)):\n        x_val = x\n        for i, y in enumerate(lst[row]):\n            if y == x_val:\n                result.append((row, i))\n    \n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    answer = []\n    if lst == []:\n        return []\n    for i in range(len(lst)):\n        for j in range(len(lst[0])):\n            if lst[i][j] == x:\n                answer.append((i, j))\n    answer.sort(key=lambda tup: (tup[0], -tup[1]))\n    answer.sort(key=lambda tup: (tup[1], -tup[0]))\n    return answer\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    # your code here\n    result = []\n    if not lst or not x:\n        return result\n    \n    x_col_lst = get_col(lst, x)\n    # for each row, check if it has all elements in column\n    for r in range(len(lst)):\n        for col in x_col_lst:\n            if col not in lst[r]:\n                break\n        else:\n            result.append((r, 0))\n    \n    # sort result by rows in ascending order\n    return sorted(result, key=lambda t: (t[0], t[1]))\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not array:\n        return\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def sort_list(array):\n        \"\"\"\n        sorting is done with this logic:\n        - get the length of the array,\n        - check the sum of the first and last element in the array,\n        - if sum is odd, then sort in ascending order, otherwise in descending order.\n        \"\"\"\n        length = len(array)\n        if length == 1: return array\n        if sum(array[0], array[length-1]) % 2 == 1:\n            return sort_list(sorted(array[1:length-1])) + array[0:1]\n        else:\n            return sort_list(sorted(array[1:length-1], reverse=True)) + array[0:1]\n    return sort_list(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code here\n    return sorted(array, reverse = True)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(array) < 2:\n        return array\n    for i in range(len(array)-1):\n        for j in range(i, len(array)):\n            if array[i] + array[j] % 2 == 0:\n                if i > j:\n                    tmp = array[i]\n                    array[i] = array[j]\n                    array[j] = tmp\n            if array[i] + array[j] % 2 == 1:\n                if i < j:\n                    tmp = array[i]\n                    array[i] = array[j]\n                    array[j] = tmp\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n    return\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # -- MY SOLUTION --\n    new_arr = []\n    if len(array) == 0:\n        return []\n    sum_val = sum(array)\n    if sum_val % 2 == 0:\n        for i in range(len(array)):\n            new_arr.append(array[i])\n        return new_arr\n    else:\n        for i in range(len(array)):\n            new_arr.append(array[len(array) - i - 1])\n        return new_arr\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return array\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return ''.join(sorted(s))\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    return ''.join(sorted(s, reverse=True))\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    lst = list(s)\n    i = 0\n    while i < len(lst):\n        if lst[i] =='':\n            lst.insert(i,' ')\n            lst.insert(i+1,' ')\n            i+=2\n        else:\n            i+=1\n    lst.pop(-1)\n    lst.pop(0)\n    new_lst = []\n    for i in lst:\n        if i in alphabet:\n            indx = alphabet.index(i)\n            indx += 2\n            if indx == 26:\n                indx = 0\n            new_lst.append(alphabet[indx])\n        else:\n            new_lst.append(i)\n    s2 = ''.join(new_lst)\n    return s2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    new_alphabet = alphabet[-2:] + alphabet[:-2]\n    \n    def rotate_alphabet(s):\n        \"\"\"Rotates the alphabet and returns a new string.\"\"\"\n        return new_alphabet[s]\n    \n    def encrypt(s):\n        \"\"\"Encrypts the string using the rotate alphabet function.\"\"\"\n        return ''.join(rotate_alphabet(s.lower()))\n    \n    return encrypt(s)\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    encrypt('lm') returns 'hi'\n    encrypt('ewhjklnop') returns 'asdfghjkl'\n    encrypt('kj') returns 'gf'\n    encrypt('ix') returns 'et'\n    \"\"\"\n    \n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    new_alphabet = alphabet[2:] + alphabet[:2]\n    \n    def rotate_alphabet(s):\n        \"\"\"Rotates the alphabet and returns a new string.\"\"\"\n        return new_alphabet[s]\n    \n    def decrypt(s):\n        \"\"\"Decrypts the string using the rotate alphabet function.\"\"\"\n        return ''.join(rotate_alphabet(s.lower()))\n    \n    return decrypt(s)\n    \ndef main():\n    print(encrypt(\"hi\"))\n    print(encrypt(\"asdfghjkl\"))\n    print(encrypt(\"gf\"))\n    print(encrypt(\"et\"))\n    print(decrypt(\"lm\"))\n    print(decrypt(\"ewhjklnop\"))\n    print(decrypt(\"kj\"))\n    print(decrypt(\"ix\"))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return ''\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet2 = 'cdefghijklmnopqrstuvwxyzab'\n    def rotater(s):\n        s = s.lower()\n        new = ''\n        for l in s:\n            if l in alphabet:\n                index = alphabet.index(l)\n                new += alphabet2[index]\n            else:\n                new += l\n        return new\n    return rotater(s)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ''.join(alphabet[i] if i <= len(alphabet) else alphabet[i-26] for i in str(s))\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    lst = list(s)\n    for i in range(len(lst)):\n        if lst[i] in alphabet:\n            lst[i] = alphabet[(alphabet.index(lst[i]) + 2) % 26]\n    return \"\".join(lst)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    s = s.lower()\n    lst = list(s)\n    lst2 = list()\n    for i in range(len(lst)):\n        index = alphabet.index(lst[i])\n        lst2.append(alphabet[index+2])\n    return ''.join(lst2)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    return ''.join(list(map(lambda x: chr(ord(x)+2), list(s))))\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_alphabet = alphabet[2:] + alphabet[:2]\n    return ''.join(new_alphabet[(alphabet.index(c) + s) % len(alphabet)] for c in s)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #check if list is empty\n    if not lst:\n        return None\n    # sort list\n    lst.sort()\n    #return the first 2\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return None\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] < lst[i + 1]:\n                return lst[i + 1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def _next_smallest(lst):\n        if len(lst) <= 1:\n            return None\n        else:\n            smallest = lst[0]\n            for i in range(1, len(lst)):\n                if lst[i] < smallest:\n                    smallest = lst[i]\n            return smallest\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Time O(n) | Space O(1)\n    # 1st solution\n    if not lst:\n        return None\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not lst:\n        return None\n    return min(lst, key=lambda x: lst.index(x))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not lst:\n        return None\n    \n    if len(lst) == 1:\n        return lst[0]\n    \n    if lst[0] < lst[1]:\n        return lst[0]\n    \n    index = 1\n    while index < len(lst):\n        if lst[index] < lst[index - 1]:\n            return lst[index]\n        index += 1\n    \n    return lst[index - 1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def next_smallest_helper(lst):\n        if not lst:\n            return None\n        if len(lst) == 1:\n            return lst[0]\n        else:\n            lst = sorted(lst)\n            return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    if len(lst) == 0:\n        return None\n    \n    if len(lst) == 1:\n        return lst[0]\n    \n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not lst:\n        return None\n    l = sorted(lst)\n    return l[1] if l[1] < l[0] else None\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return None\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    return S.count(\"I\")\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    S = S.split()\n    return S.count(\"I\")\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for word in S.split(\" \"):\n        if word.startswith(\"I\"):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n=0\n    for i in S:\n        if i == \"I\":\n            n=n+1\n    return n\n    \ndef count_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n   \n    For example:\n    >>> count_bored(\"Hello world\")\n    0\n    >>> count_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    2\n    \"\"\"\n    n=0\n    for i in S:\n        if i == \"I\":\n            n=n+1\n    return n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    S_BORED = 0\n    i = 0\n    while i < len(S):\n        if S[i] == 'I':\n            while i < len(S) and S[i]!= '.' and S[i]!= '?' and S[i]!= '!':\n                i += 1\n            S_BORED += 1\n            i += 1\n        i += 1\n    return S_BORED\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(S)):\n        if S[i] == \"I\":\n            if S[i:i+3] == \"I?\":\n                count += 1\n            if S[i:i+3] == \"I!\":\n                count += 1\n            if S[i:i+2] == \"I.\":\n                count += 1\n    return count"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count=0\n    for i in range(len(S)):\n        if S[i] == \"I\" and S[i-1] == \".\":\n            count+=1\n        elif S[i] == \"I\" and S[i-1] == \"?\" or S[i] == \"I\" and S[i-1] == \"!\" :\n            count+=1\n        if S[i] == \"!\" and S[i-1] == \".\":\n            count+=1\n        elif S[i] == \"!\" and S[i-1] == \"?\" or S[i] == \"!\" and S[i-1] == \"!\" :\n            count+=1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    boredom_count = 0\n    for word in S.split():\n        if word == \"I\":\n            boredom_count += 1\n    return boredom_count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    S = S.split('.')\n    counter = 0\n    for i in S:\n        if i[0] == 'I':\n            counter += 1\n    return counter\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for word in S:\n        if word.startswith('I'):\n            count += 1\n    return count\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return (x + y == z and type(x)==int and type(y)==int and type(z)==int)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if type(x)==int and type(y)==int and type(z)==int and x==y+z and x==y-z and y==z+x and y==z-x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    \n    return (x == int(y) + int(z) and x == int(z) + int(y) and int(x) == int(y) and int(y) == int(z)) \n    \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x == (y + z) and type(x) == int and type(y) == int and type(z) == int\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (x+y==z) and type(x)==int and type(y)==int and type(z)==int\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if x == y + z and x == int(y) + int(z) and x == int(y) - int(z):\n        return True\n    else:\n        return False\n    \nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int(5, 2, 1)"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return (x + y) == (y + z) and (type(x) == int) and (type(y) == int) and (type(z) == int) \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    return (x == y+z) and (type(x)==int) and (type(y)==int) and (type(z)==int)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (x+y)==z and all(isinstance(n, int) for n in [x,y,z])\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return True if x + y == z and all([isinstance(num,int) for num in [x,y,z]]) else False\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    message_list = list(message.lower())\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for i in range(len(message_list)):\n        if message_list[i] in vowels:\n            message_list[i] = message_list[i+2]\n            message_list[i+2] = message_list[i]\n    return ''.join(message_list)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    new_message = ''\n    for i in range(0,len(message)):\n        if message[i] in vowels:\n            if message[i+1] in vowels:\n                new_message += message[i+2]\n            else:\n                new_message += message[i+1]\n        else:\n            new_message += message[i]\n    return new_message\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    encoded = \"\"\n    for ch in message:\n        if ch in 'aeiou':\n            encoded += ch\n            encoded += ch.upper()\n        else:\n            encoded += ch\n    return encoded\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = ''\n    vowels = 'aeiou'\n    message = message.lower()\n    for letter in message:\n        if letter in vowels:\n            letter_index = vowels.index(letter)\n            if letter_index == 0:\n                result += letter\n            elif letter_index == 1:\n                result += vowels[-1]\n            else:\n                result += vowels[letter_index - 2]\n        else:\n            result += letter\n    return result\n    \n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('THKS KS C MGSSCGG')\n    'test'\n    \"\"\"\n    result = ''\n    vowels = 'aeiou'\n    message = message.upper()\n    for letter in message:\n        if letter in vowels:\n            letter_index = vowels.index(letter)\n            if letter_index == 0:\n                result += vowel\n            elif letter_index == 1:\n                result += vowels[-1]\n            else:\n                result += vowels[letter_index - 2]\n        else:\n            result += letter\n    return result\n    \n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print('\\n*** ALL TEST PASSED. GREAT JOB!\\n'"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    return message.swapcase()\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return message.swapcase().replace(i for i in 'aeiouAEIOU')\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    vowels = 'aeiouAEIOU'\n    vowels = ''.join(set(vowels))\n    new = ''\n    \n    for letter in message:\n        if letter.isalpha():\n            if letter.isupper():\n                new += letter.lower()\n            else:\n                new += letter.upper()\n            \n        else:\n            new += letter\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    vowels = ['a','e','i','o','u']\n    encoded_message = ''\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in vowels:\n                #swap case and move one ahead of that vowel\n                encoded_message += letter.upper()\n            else:\n                encoded_message += letter.lower()\n        else:\n            encoded_message += letter\n    return encoded_message\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def encode_function(message):\n        #ensures that it's a string\n        message = str(message)\n        #stores the vowels\n        vowels = 'aeiouAEIOU'\n        #stores the encoded message\n        encoded = ''\n        #stores the new encoded message\n        new = ''\n        #finds the location of each vowel in the message\n        for i in range(len(message)):\n            if message[i] in vowels:\n                new += message[i] + message[i+1]\n            else:\n                new += message[i]\n        #returns the new message\n        return new\n    return encode_function(message)"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    def is_prime(n):\n        if n < 2:\n            return False\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n    prime_numbers = []\n    result = 0\n    for i in lst:\n        if is_prime(i):\n            prime_numbers.append(i)\n    for j in range(len(prime_numbers)):\n        result += prime_numbers[j]\n        result = result % 10\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    suma = 0\n    for i in lst:\n        if is_prime(i) == True:\n            suma += int(str(i)[0])\n    return suma\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    i = 0\n    x = 0\n    y = 0\n    while i < len(lst):\n        x = lst[i]\n        if x > 1:\n            for j in range(2,x):\n                if x%j == 0:\n                    x = 0\n                    break\n        y += x\n        i += 1\n    return y\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # TODO: your code here\n    biggest = 0\n    maxi = 0\n    for i in lst:\n        if checkprime(i):\n            if i > biggest:\n                biggest = i\n                maxi = i\n    return int(sum(int(i) for i in str(maxi)))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    max_prime = 0\n    max_digit = 0\n    for i in lst:\n        if isPrime(i):\n            if i > max_prime:\n                max_prime = i\n    for i in range(1,10):\n        if i in lst:\n            lst[lst.index(i)] = str(i)\n            max_digit = i\n    return sum(map(int, lst)) + max_digit\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    maxi = 0\n    for i in lst:\n        if is_prime(i) and i > maxi:\n            maxi = i\n    return sum(list(map(int, str(maxi))))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s = 0\n    for x in lst:\n        if int(str(x)[0]) == 0:\n            s = s\n        else:\n            s += x\n    return s\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def primes(n):\n        # a generator that yields primes\n        # started at 2 since 1, 2 is the smallest prime\n        for d in range(3, n+1, 2):\n            if all(d % i!= 0 for i in range(3, int(math.sqrt(d) + 1), 2)):\n                yield d\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    max_prime = 0\n    for i in lst:\n        if isPrime(i) == True:\n            max_prime = i\n    sum_digits = 0\n    for j in str(max_prime):\n        sum_digits += int(j)\n    return sum_digits\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    primes = get_primes()\n    if len(lst) < 2:\n        return 0\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(dict) == 0:\n        return False\n    if len(dict.keys()) == 2 and (dict.keys() == {\"STATE\",\"ZIP\"} or dict.keys() == {\"ZIP\",\"STATE\"}):\n        return True\n    else:\n        return all(isinstance(key, str) for key in dict.keys()) and all(isinstance(key, str) for key in dict.keys())\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return True if set(dict.keys()) == set({\"string\"}) or set(dict.keys()) == set({\"string\"}) else False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Returns True if all keys are strings in lower case or all keys are strings in upper case, else returns False.\n    # if len(dict) == 0:\n    #     return False\n    # else:\n    #     keys = list(dict.keys())\n    #     values = list(dict.values())\n    #     for i in range(len(keys)):\n    #         if not (isinstance(keys[i], str) or isinstance(values[i], str)):\n    #             return False\n    #     lower_case = True\n    #     upper_case = True\n    #     for i in range(len(keys)):\n    #         if (keys[i].islower() == False) or (keys[i].isupper() == False):\n    #             lower_case = False\n    #         if (values[i].islower() == False) or (values[i].isupper() == False):\n    #             upper_case = False\n    #     return lower_case and upper_case\n    \n    # if len(dict) == 0:\n    #     return False\n    # else:\n    #     keys = list(dict.keys())\n    #     values = list(dict.values())\n    #     for i in range(len(keys)):\n    #         if not (isinstance(keys[i], str) or isinstance(values[i], str)):\n    #             return False\n    #     lower_case = True\n    #     upper_case = True\n    #     for i in range(len(keys)):\n    #         if (keys[i].islower() == False) or (keys[i].isupper() == False):\n    #             lower_case = False\n    #         if (values[i].islower() == False) or (values[i].isupper() == False):\n    #             upper_case = False\n    #     return lower_case and upper_case\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if dict == {}:\n        return False\n    else:\n        for key in dict.keys():\n            if type(key)!= str:\n                return False\n        for key in dict.keys():\n            if type(key)!= str:\n                return False\n        return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if dict == {}:\n        return False\n    for key in dict:\n        if type(key)!= str:\n            return False\n    for key in dict:\n        if type(dict[key])!= str:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if not type(key) == str:\n            return False\n    for key in dict.keys():\n        if not type(key) == str:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if dict == {}:\n        return False\n    else:\n        for key in dict.keys():\n            if type(key)!= str:\n                return False\n        for value in dict.values():\n            if type(value)!= str:\n                return False\n        for key in dict.keys():\n            if key.isupper():\n                if key.upper()!= key:\n                    return False\n            else:\n                if key.lower()!= key:\n                    return False\n        return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    if len(dict) == 0:\n        return False\n    \n    lower_keys = [x.lower() for x in dict]\n    upper_keys = [x.upper() for x in dict]\n    \n    for i in lower_keys:\n        if i not in dict:\n            return False\n    \n    for i in upper_keys:\n        if i not in dict:\n            return False\n    \n    return True"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    if not dict:\n        return False\n    \n    for key, value in dict.items():\n        if not isinstance(value, str):\n            return False\n        if value.isupper():\n            if key.isupper():\n                return False\n        elif value.islower():\n            if key.islower():\n                return False\n    return True\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    list_n = []\n    while n > 0:\n        count = 0\n        for i in range(2,n+1):\n            if n % i == 0:\n                count += 1\n        if count == 0:\n            list_n.append(n)\n        n -= 1\n    return list_n\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    is_prime = []\n    for i in range(n+1):\n        if i == 2:\n            is_prime.append(2)\n        else:\n            is_prime.append(True)\n            for j in range(2, int(math.sqrt(i))+1):\n                if i % j == 0:\n                    is_prime[i] = False\n                    break\n    return is_prime\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def is_prime(n):\n        for i in range(2, int(n**.5)+1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    array = []\n    num = 2\n    while num <= n:\n        if is_prime(num):\n            array.append(num)\n        num += 1\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    array = []\n    for i in range(2, n + 1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            array.append(i)\n    return array\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = int(n)\n    if n > 0:\n        primes = [2,3,5,7,11,13,17]\n        while len(primes) < n:\n            for prime in primes:\n                if is_prime(prime):\n                    primes.append(prime)\n        return primes\n    else:\n        return []\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    primes = []\n    n_primes = 0\n    for i in range(n):\n        prime = True\n        for j in primes:\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            n_primes += 1\n            primes.append(i)\n        if n_primes == n:\n            break\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return []\n    if n <= 3:\n        return list(range(2, n + 1))\n    if n <= 7:\n        return list(range(2, n + 1, 2)) + list(range(3, n + 1, 2))\n    if n <= 11:\n        return list(range(2, n + 1, 2)) + list(range(3, n + 1, 2)) + list(range(5, n + 1, 2)) + list(range(7, n + 1, 2))\n    if n <= 13:\n        return list(range(2, n + 1, 2)) + list(range(3, n + 1, 2)) + list(range(5, n + 1, 2)) + list(range(7, n + 1, 2)) + list(range(11, n + 1, 2))\n    if n <= 17:\n        return list(range(2, n + 1, 2)) + list(range(3, n + 1, 2)) + list(range(5, n + 1, 2)) + list(range(7, n + 1, 2)) + list(range(11, n + 1, 2)) + list(range(13, n + 1, 2))\n    if n <= 19:\n        return list(range(2, n + 1, 2)) + list(range(3, n + 1, 2)) + list(range(5, n + 1, 2)) + list(range(7, n + 1, 2)) + list(range(11, n + 1, 2)) + list(range(13, n + 1, 2)) + list(range(17, n + 1, 2))\n    if n <= 23:\n        return list(range(2, n + 1, 2)) + list(range(3, n + 1, 2)) + list(range(5, n + 1, 2)) + list(range(7, n + 1, 2)) + list(range(11, n + 1, 2)) + list(range(13, n + 1, 2)) + list(range(17, n + 1, 2)) + list(range(19, n + 1, 2))\n    if n <= 29:\n        return list(range(2, n + 1, 2)) + list(range(3, n + 1, 2)) + list(range(5, n + 1, 2)) + list(range(7, n + 1, 2)) + list(range(11, n + 1, 2)) + list(range(13, n + 1, 2)) + list(range(17, n + 1, 2)) + list(range(19, n + 1, 2)) + list(range(23, n + 1, 2))\n    if n <= 31:\n        return list(range(2, n + 1, 2)) + list(range(3, n + 1, 2)) + list(range(5, n + 1, 2)) + list(range(7, n + 1, 2)) + list(range(11, n + 1, 2)) + list(range(13, n + 1, 2)) + list(range(17, n + 1, 2)) + list(range(19, n + 1, 2)) + list(range(23, n + 1, 2)) + list(range(29, n + 1, 2))\n    if n <= 33:\n        return list(range(2, n + 1, 2)) + list(range(3, n + 1, 2)) + list(range(5, n + 1, 2)) + list(range(7, n + 1, 2)) + list(range(11, n + 1, 2)) + list(range(13, n + 1, 2)) + list(range(17, n + 1, 2)) + list(range(19, n + 1, 2)) + list(range(23, n + 1, 2)) + list(range(29, n + 1, 2)) + list(range(31, n + 1, 2))\n    if n <= 39:\n        return list(range(2, n + 1, 2)) + list(range(3, n + 1, 2)) + list(range(5, n + 1, 2)) + list(range(7, n + 1, 2)) + list(range(11, n + 1, 2)) + list(range(13, n + 1, 2)) + list(range(17, n + 1, 2)) + list(range(19"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    primes = [2,3]\n    if n == 1:\n        return primes\n    for i in range(2, n):\n        if all(i%x!= 0 for x in primes):\n            primes.append(i)\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    product = 0\n    while a:\n        product = product * 10 + a % 10\n        a = a // 10\n    while b:\n        product = product * 10 + b % 10\n        b = b // 10\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (int(str(a)[0]) * int(str(b)[0])) + (int(str(a)[1]) * int(str(b)[1])) + (int(str(a)[2]) * int(str(b)[2])) + (int(str(a)[3]) * int(str(b)[3])) + (int(str(a)[4]) * int(str(b)[4])) + (int(str(a)[5]) * int(str(b)[5])) + (int(str(a)[6]) * int(str(b)[6])) + (int(str(a)[7]) * int(str(b)[7])) + (int(str(a)[8]) * int(str(b)[8])) + (int(str(a)[9]) * int(str(b)[9]))\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    a = int(str(a)[::-1])\n    b = int(str(b)[::-1])\n    return str(a*b)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (int(a % 10) * int(b % 10))\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return a * b\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return int(str(a) * str(b))"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return a*b%10\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    a = str(a)\n    b = str(b)\n    \n    #first we make sure that both numbers are not negative\n    #if they are, we make the numbers negative\n    if a[0] == '-' and b[0] == '-':\n        return multiply(-int(a[1:]), -int(b[1:]))\n    if a[0] == '-' and b[0]!= '-':\n        return multiply(-int(a[1:]), int(b))\n    if a[0]!= '-' and b[0] == '-':\n        return multiply(int(a), -int(b[1:]))\n    if a[0]!= '-' and b[0]!= '-':\n        return multiply(int(a), int(b))\n    \n    #we move through both numbers one by one until we arrive at a 0\n    while a!= '0' or b!= '0':\n        if a == '0':\n            return 0\n        if b == '0':\n            return 0\n        if a == b:\n            return int(a)\n        #the + and - signs are handled in the multiplication\n        if a[0] == '+' or b[0] == '+':\n            return multiply(a[1:], b[1:])\n        if a[0] == '-' or b[0] == '-':\n            return multiply(a[1:], b[1:])\n    #after the loop, both numbers should have a 0, and the result will be 0\n    return 0\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    multiplier = str(a) + str(b)\n    a = multiplier[-1]\n    b = multiplier[0]\n    while len(multiplier) > 1:\n        multiplier = multiplier[1:]\n        b = str(int(b) * int(a))\n        a = str(int(a) * int(b))\n    return int(a)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    return 0\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    num = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            num += 1\n    return num\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    vowels = 'AEIOU'\n    total = 0\n    \n    for i in range(len(s)):\n        if i%2 == 0:\n            if s[i] in vowels:\n                total += 1\n                \n    return total\n        \ndef count_upper_no_vowels(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    \n    total = 0\n    \n    for i in range(len(s)):\n        if i%2 == 0:\n            if s[i] not in 'AEIOU':\n                total += 1\n                \n    return total\n    \ndef count_upper_no_vowels_using_dict(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    \n    s = s.upper()\n    vowels = 'AEIOU'\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if i%2 == 0:\n            count += 1 if s[i] in vowels else 0\n            \n    return count\n    \ndef count_upper_using_dictionary(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    \n    s = s.upper()\n    vowels = 'AEIOU'\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if i%2 == 0:\n            count += 1 if s[i] in vowels else 0\n            \n    return count\n            \ndef count_upper_using_sorted_string(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    \n    s = s.upper()\n    vowels = 'AEIOU'\n    count = 0\n    \n    for i in range(len(s)):\n        if i%2 == 0:\n            count += 1 if s[i] in vowels else 0\n            \n    return count\n    \ndef count_upper_using_lambda(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    \n    count = len(list(filter(lambda x: x.isupper(), s)))\n    \n    return count\n    \ndef count_upper_using_lambda2(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    \n    return len(list(filter(lambda x: x.isupper(), s)))\n    \ndef count_upper_using_lambda3(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    \n    return sum(1 for x in s if x.isupper())\n    \ndef count_upper_using_generator(s):\n    \"\"\"\n    Given a string "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # First, split s into an array of chars.\n    # Then, count all of the vowels in the even indices of the array.\n    vowels = set('aeiou')\n    res = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c.lower() in vowels:\n            res += 1\n    return res\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # Your Code Here\n    \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # handle negative numbers\n    value = int(value) if value else 0\n    if value < 0:\n        return -(abs(value) - 1)\n    else:\n        return (abs(value) - 1)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if isinstance(value, str) == False:\n        raise TypeError(\"Input must be a string\")\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    value = value.replace(\".\", \"\")\n    if len(value) == 0:\n        return 0\n    value = int(value)\n    result = value\n    while result % 1!= 0:\n        result += 1\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Split value into a list\n    value = value.split()\n    # Get integer and float\n    number = float(value[0])\n    fraction = float(value[1])\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return int(value) if float(value) == int(float(value)) else int(round(float(value)))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0432\u0430\u0448 \u043a\u043e\u0434 \u0442\u0443\u0442\n    \n    # \u0432\u0430\u0448 \u043a\u043e\u0434\n    result = int(value)\n    if result % 1 >.5:\n        result += 1\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    integer = int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # TODO:\n    # get the absolute value of the number\n    # get the integer of the abs value\n    # if the absolute value is odd, round up to the next even number\n    # if it's even, round down to the next even number\n    # return the integer of the absolute value\n    # get the absolute value of the number\n    return None\n    # raise NotImplementedError\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    int_value = int(value)\n    min_diff = abs(int_value)\n    max_diff = abs(int_value-1)\n    \n    if abs(int_value) == abs(int_value-1):\n        return int_value\n    if abs(int_value) > abs(int_value-1):\n        return int_value\n    else:\n        return int_value-1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    level = 1\n    count = n\n    while count > 0:\n        if level % 2 == 0:\n            count = count - 1\n            level = level + 1\n        else:\n            count = count - 2\n            level = level + 1\n    return count\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return [n//2] + make_a_pile(n-1)\n        else:\n            return [n-1] + make_a_pile(n-1)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return num_of_stones(n)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        return [0]\n    if n % 2 == 0:\n        return make_a_pile(n//2) + [n]\n    else:\n        return make_a_pile((n+1)//2) + [n]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n > 0, \"Number of stones must be positive.\"\n    \n    if n == 1:\n        return [n]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    pile = [n]\n    while n >= 1:\n        n -= 1\n        if n % 2 == 1:\n            pile.append(pile[-1] + 1)\n        else:\n            pile.append(pile[-1] + 2)\n    return pile\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    even = []\n    odd = []\n    if n % 2 == 0:\n        while n > 0:\n            even.append(n)\n            n = n // 2\n    else:\n        while n > 0:\n            odd.append(n)\n            n = n // 2\n    return even + odd\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        n = n + 1\n    return [n] + make_a_pile(n-1) + make_a_pile(n-2)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = [n]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            result.append(result[-1] + i)\n        else:\n            result.append(result[-1] + 2*i)\n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert n > 0, \"n must be positive\"\n    n = n + 1\n    return [n] + make_a_pile_aux(n, [])\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    words = s.split()\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = s.split(\",\")\n    return s\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    words = s.split()\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return s.split(\", \")\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    words = s.split(',')\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    words = []\n    s = s.replace(\",\",\" \")\n    s = s.replace(\".\",\" \")\n    words = s.split(\" \")\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    words = s.split(', ')\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # SOLUTION 1\n    # split_string = s.split()\n    # words = []\n    # for word in split_string:\n    #     words.append(word)\n    # return words\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    s = s.split(\",\")\n    words = []\n    for word in s:\n        words.append(word)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return s.split()\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    if x < y:\n        return -1\n    return choose_num(y, x) if x % 2 == 0 else y if y < x else choose_num(x - 1, y - 1)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    num = 0\n    if x > y:\n        return num\n    \n    else:\n        for i in range(x, y+1):\n            if i % 2 == 0:\n                num = i\n        return num\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    for number in range(x, y+1):\n        if number % 2 == 0:\n            return number\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return max([i for i in range(x, y + 1) if i % 2 == 0])\n    \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if x < y:\n        x, y = y, x\n    if x == y:\n        return x\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if x == y:\n        return x\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if x == y:\n        return -1\n    elif x > y:\n        return -1\n    else:\n        return min(x, y) + 2*(max(x, y) % 2)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if x % 2 == 0:\n        i = x\n    else:\n        i = x - 1\n    while i <= y:\n        if i % 2 == 0:\n            return i\n        else:\n            i += 1\n    return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return int(round(float(n) / float(m) * (2**31 - 1)))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n > m:\n        return -1\n    total = (n + m)\n    divisor = 2\n    while divisor <= total:\n        if total % divisor == 0:\n            total = total // divisor\n            return '0b' + bin(divisor)[2:]\n        else:\n            divisor += 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    rounded_avg = round(float(n)/m)\n    rounded_avg = str(bin(rounded_avg)[2:])\n    return rounded_avg.zfill(m)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n        return \"{0:#b}\".format(avg)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n > m:\n        return -1\n    else:\n        average = round(n + ((m - 1) * n) / m)\n        binary = bin(average)\n        return binary[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n > m:\n        return -1\n    \n    return f\"0b{sum(bin(i).count('1') for i in range(n, m+1))//(m-n+1):b}\"\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    rounded_avg = round((n + m) / 2)\n    return bin(rounded_avg)\n    \nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. RIGHT ON!\\n\")"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return -1 if n > m else int(bin(int((n + m - 1) / 2))[2:])\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return '0b' + bin(int(round(n + m)) / 2)[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n > m:\n        return -1\n    else:\n        rounded = ((m+1) - n)//2\n        return format(rounded, 'b')\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    unique_digits = []\n    for n in x:\n        if all(map(lambda k: k % 2 == 1, map(int, list(str(n))) )):\n            unique_digits.append(n)\n    return sorted(unique_digits)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(set(i for i in x if i%2 == 1))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = []\n    for x in x:\n        res = res + [i for i in x if i % 2!= 0]\n    return sorted(res)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    y = []\n    for i in x:\n        count = 0\n        for j in str(i):\n            if int(j) % 2 == 0:\n                count += 1\n        if count == 0:\n            y.append(i)\n    return sorted(y)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    out = []\n    for i in x:\n        if len(set(str(i))) < 3:\n            out.append(i)\n    return sorted(out)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted([i for i in x if i % 2 == 0])\n    # return sorted([i for i in x if not any([i // 10**j % 10 == 0 for j in range(2,9)])])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n    x = sorted(x)\n    for i in range(len(x)):\n        if not any(x[i]%2 == 0 for x in x[i+1:]):\n            return x\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not isinstance(x, list):\n        raise TypeError(\"x must be a list\")\n    else:\n        uniq = []\n        for i in x:\n            if sum([i // 10**j for j in range(1, len(str(i))+1)]) % 2 == 1:\n                uniq.append(i)\n        return sorted(uniq)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: x not in is_even(x), sorted(x)))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(list(set([int(i) for i in x if i % 10 == 1])))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    arr.sort()\n    arr.reverse()\n    nums = {}\n    res = []\n    for i in range(len(arr)):\n        if arr[i] in nums:\n            nums[arr[i]] += 1\n        else:\n            nums[arr[i]] = 1\n    for i in range(10):\n        if i in nums:\n            res.extend([i+1]*nums[i])\n    return res\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if arr == []: return []\n    sorted_arr = sorted(arr)\n    if 1 <= sorted_arr[0] <= 9: return sorted_arr\n    else: return []\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n    result = []\n    if not arr:\n        return result\n    length = len(arr)\n    for i in range(length):\n        if not 1 <= arr[i] <= 9:\n            continue\n        if arr[i] > 9:\n            arr[i] -= 1\n        result.append(num_to_name[arr[i]])\n    arr.reverse()\n    for i in range(length):\n        if not 1 <= arr[i] <= 9:\n            continue\n        if arr[i] > 9:\n            arr[i] -= 1\n        result.append(num_to_name[arr[i]])\n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # FIXME: one-liner\n    arr.sort(reverse=True)\n    arr = ''.join(str(x) if x in range(1,10) else '-' for x in arr)\n    return arr.split('-'"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if arr == []:\n        return []\n    elif not isinstance(arr, list):\n        raise ValueError('invalid input')\n    \n    # Sort the array and then reverse it\n    arr.sort()\n    arr.reverse()\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sorted_arr = sorted(arr)\n    print(f\"arr = {arr}, sorted_arr = {sorted_arr}\")\n    result = []\n    for num in sorted_arr:\n        if (num >= 1 and num <= 9):\n            result.append(\"One\" if num == 1 else f\"Two\" if num == 2 else f\"Three\" if num == 3 else f\"Four\" if num == 4 else f\"Five\" if num == 5 else f\"Six\" if num == 6 else f\"Seven\" if num == 7 else f\"Eight\" if num == 8 else f\"Nine\" if num == 9 else None)\n    print(f\"result = {result}\")\n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Brute Force Solution\n    # Time Complexity: O(n^2)\n    # Space Complexity: O(1)\n    \n    # Sorted Array Approach\n    # Time Complexity: O(n log n)\n    # Space Complexity: O(n)\n    \n    # Time Complexity: O(n log n)\n    # Space Complexity: O(n)\n    \n    # Sorting Approach\n    # Time Complexity: O(n log n)\n    # Space Complexity: O(1)\n    \n    # Space Complexity: O(1)\n    \n    \n    if len(arr) == 0:\n        return []\n    \n    arr.sort()\n    \n    if arr[-1] > 9 or arr[-1] < 1:\n        return []\n    \n    rev = []\n    for i in range(0, len(arr)):\n        if arr[i] > 9 or arr[i] < 1:\n            continue\n        rev.append(str(arr[i]))\n    \n    rev.reverse()\n    return rev\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    return \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your code here\n    if arr == []:\n        return []\n    num = []\n    for i in range(len(arr)):\n        if arr[i] >= 1 and arr[i] <= 9:\n            num.append(get_name(arr[i]))\n    num.sort()\n    print(num)\n    num.reverse()\n    print(num)\n    lst = []\n    for i in num:\n        if i == \"One\":\n            lst.append(\"One\")\n        elif i == \"Two\":\n            lst.append(\"Two\")\n        elif i == \"Three\":\n            lst.append(\"Three\")\n        elif i == \"Four\":\n            lst.append(\"Four\")\n        elif i == \"Five\":\n            lst.append(\"Five\")\n        elif i == \"Six\":\n            lst.append(\"Six\")\n        elif i == \"Seven\":\n            lst.append(\"Seven\")\n        elif i == \"Eight\":\n            lst.append(\"Eight\")\n        elif i == \"Nine\":\n            lst.append(\"Nine\")\n    return lst\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # make sure to only use the divisors of n, so the output is of the correct length\n    fact = 1\n    # use for loop to find the factorial of each number from 1 to n\n    for i in range(1, n + 1):\n        fact *= i\n    # add up the numbers from 1 to n, one by one\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    # return the result\n    return list(map(lambda x: fact // x, range(1, n + 1)))"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n==0:\n        return []\n    else:\n        if n%2==0:\n            return f(n-1)+[n]\n        else:\n            return f(n-1) + [n] + f(n-1)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(i)\n        else:\n            res.append(i * (i + 1))\n    return res\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(int(i + 1))\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    \"\"\"\n    # solution using list comprehension\n    return [x if i%2 else 1 for i, x in enumerate(range(1,n+1))]\n    \"\"\"\n    \n    # solution using built-in sum function\n    return list(map(lambda x: x if i%2 else x+1 for i,x in enumerate(range(1,n+1))))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    if n < 0:\n        return result\n    if n == 1:\n        return [1]\n    result = [1]\n    for i in range(2, n + 1):\n        if i % 2 == 1:\n            result.append(i)\n            continue\n        result.append(result[i - 1] * i)\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert n >= 0 and n <= 100\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        return [n * i for i in f(n-1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(math.factorial(i))\n        else:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    res = (0, 0)\n    for i in range(2, n):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                res = (res[0] + 1, res[1])\n            else:\n                res = (res[0], res[1] + 1)\n    return res\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = (0, 0)\n    cnt_odd = 0\n    for num in range(1, n + 1):\n        # Odd palindrome\n        if str(num) == str(num)[::-1]:\n            result = (result[0] + 1, result[1])\n            cnt_odd += 1\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    even_cnt, odd_cnt = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i) and (i % 2 == 0):\n            even_cnt += 1\n        elif is_palindrome(i) and (i % 2!= 0):\n            odd_cnt += 1\n    return (even_cnt, odd_cnt)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count_odd = 0\n    count_even = 0\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            count_odd += 1 if is_palindrome(num+1) else 0\n            count_even += 1 if is_palindrome(num-1) else 0\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def is_palindrome(s):\n        return s == s[::-1]\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return count_even_odd(0, n)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Solution\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (even_count_odd_count(n), even_count_odd_count(n))\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    even_odd_cnt = 0\n    if n % 2 == 0:\n        even_odd_cnt += 1\n    for i in range(1, n+1):\n        if i == 2:\n            even_odd_cnt += 1\n        if i == 3:\n            even_odd_cnt += 1\n        if i % 2 == 0:\n            if i % 3 == 0:\n                even_odd_cnt += 1\n            else:\n                even_odd_cnt += 2\n        elif i % 3 == 0:\n            even_odd_cnt += 1\n        else:\n            even_odd_cnt += 2\n    return even_odd_cnt, n - even_odd_cnt\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in arr:\n        if i < 0:\n            if i%10 < 2:\n                count += 1\n        elif i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(arr)):\n        if is_signed_digit(arr[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in arr:\n        sum_num = sum([int(j) for j in str(abs(i))])\n        if sum_num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = 0\n    for num in arr:\n        if is_num_valid(num):\n            result += 1\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    nums = 0\n    for num in arr:\n        s = sum(int(i) for i in str(num))\n        if s > 0:\n            nums += 1\n    return nums\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for num in arr:\n        if num_to_sum(num) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for num in arr:\n        if num > 0:\n            sum = 0\n            while num > 0:\n                sum += num % 10\n                num = num // 10\n            if sum > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def is_num(x):\n        if x == -1:\n            return True\n        return x % 10!= 0\n    \n    def count_nums_brute(arr):\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if sum(map(abs, arr[i:j+1])) > 0:\n                    count += 1\n        return count\n    \n    def count_nums_memo(arr, memo = None):\n        \"\"\"\n        Uses a table to store results of subproblems.\n        >>> count_nums_memo([]) == 0\n        >>> count_nums_memo([-1, 11, -11]) == 1\n        >>> count_nums_memo([1, 1, 2]) == 3\n        \"\"\"\n        if memo is None:\n            memo = dict()\n        if arr in memo:\n            return memo[arr]\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if sum(map(abs, arr[i:j+1])) > 0:\n                    count += 1\n        memo[arr] = count\n        return count\n    \n    return count_nums_memo(arr)"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for num in arr:\n        sum_num = 0\n        while num > 0:\n            sum_num += num % 10\n            num = num // 10\n        if sum_num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return True\n    \n    count = 0\n    while arr[count] >= arr[count+1]:\n        count += 1\n        if count == len(arr)-1:\n            return False\n    \n    for i in range(count+1, len(arr)):\n        if arr[i] < arr[count]:\n            return False\n        \n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n = len(arr)\n    if n == 0:\n        return True\n    i = 0\n    while i < n-1 and arr[i] >= arr[i+1]:\n        i += 1\n    j = n-1\n    while j > 0 and arr[j] <= arr[j-1]:\n        j -= 1\n    if i == j:\n        return True\n    while i < n and arr[i] < arr[i+1]:\n        i += 1\n    while j > 0 and arr[j] > arr[j-1]:\n        j -= 1\n    if i > j:\n        return True\n    if j!= n-1 and i!= n-1:\n        if arr[i] <= arr[j]:\n            return False\n    if i!= n-1 and j!= 0:\n        if arr[i] < arr[j]:\n            return False\n    if i!= 0 and j!= n-1:\n        if arr[i] > arr[j]:\n            return False\n    while j > 0 and arr[j-1] <= arr[j]:\n        j -= 1\n    arr[i], arr[j] = arr[j], arr[i]\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if arr:\n        curr = arr[0]\n        if len(arr) == 1:\n            return True\n        else:\n            for i in range(len(arr)):\n                if curr<arr[i]:\n                    continue\n                else:\n                    if move_one_ball(arr[i+1:]) == False:\n                        return False\n            return True\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not arr:\n        return True\n    if len(arr) == 1:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if arr == [] or len(arr) == 1:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i-1] > arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(arr) == 0: return True\n    if len(arr) == 1: return True if arr[0] == 1 else False\n    if len(arr) == 2:\n        return True if arr[0] == 1 and arr[1] == 2 else False\n    # Sort the array\n    arr.sort()\n    \n    # print(arr)\n    # If the array is sorted, we can perform the shift operation\n    if arr[0] == 1 and arr[len(arr) - 1] == len(arr):\n        return True\n    # If the array is sorted, we can perform the left shift operation\n    if arr[0] == 1 and arr[1] == 2:\n        return True\n    \n    for i in range(len(arr)):\n        if i == len(arr) - 1:\n            return True\n        if i == len(arr) - 2:\n            return False\n        if arr[i + 1] > arr[i] and arr[i] > arr[i + 2]:\n            return True\n        elif arr[i + 1] < arr[i] and arr[i] < arr[i + 2]:\n            return True\n        \n    return False\n    \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Time O(n) | Space O(1)\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        return True if arr[0] <= arr[1] else False\n    \n    if arr[0] >= arr[1]:\n        return False\n    \n    curr_index = 1\n    while curr_index < len(arr):\n        if arr[curr_index] < arr[curr_index - 1]:\n            return False\n        curr_index += 1\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if arr == []:\n        return True\n    else:\n        for i in range(len(arr)-1):\n            if arr[i+1]<arr[i]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n            if arr[i+1]<arr[i+2]:\n                arr[i+2], arr[i+1] = arr[i+1], arr[i+2]\n        if arr[-1] < arr[-2]:\n            arr[-2], arr[-1] = arr[-1], arr[-2]\n        return arr == sorted(arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # base case\n    if arr == []:\n        return True\n    if len(arr) == 1:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # write your code here\n    if len(lst1) < 1 or len(lst2) < 1:\n        return \"NO\"\n    elif lst1.count(2) == 0:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # todo complete this function\n    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    evens = 0\n    for num in lst1:\n        if num % 2 == 0:\n            evens += 1\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst1_copy = copy.deepcopy(lst1)\n    lst2_copy = copy.deepcopy(lst2)\n    even_lst = []\n    if not len(lst1) == len(lst2):\n        return \"NO\"\n    else:\n        for i in range(len(lst1)):\n            if lst1_copy[i] % 2!= 0 and lst2_copy[i] % 2!= 0:\n                even_lst.append(lst1_copy[i])\n                lst1_copy[i] = lst2_copy[i]\n                lst2_copy[i] = even_lst[i]\n    if sum(even_lst) == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if lst1 == lst2:\n        return 'YES'\n    else:\n        if all(x % 2 == 0 for x in lst1):\n            return 'YES'\n        else:\n            return 'NO'\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    even_count = 0\n    # Your code here\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            even_count += 1\n            if even_count > len(lst2):\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # your code here\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    nums = lst1 + lst2\n    even = [x for x in nums if x%2 == 0]\n    if len(even) == len(nums):\n        return 'YES'\n    return 'NO'\n    \nif __name__ == '__main__':\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 5, 3, 4]\n    print(exchange(lst1, lst2)"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    print(lst1)\n    print(lst2)\n    # TODO: your code here\n    a = 0\n    for i in range(len(lst1)):\n        if (lst1[i] % 2 == 0) == 1:\n            a = 1\n            break\n    if a == 1:\n        return \"NO\"\n    else:\n        for i in range(len(lst2)):\n            if (lst2[i] % 2 == 0) == 1:\n                a = 1\n                break\n        if a == 1:\n            return \"NO\"\n        else:\n            for i in range(len(lst1)):\n                if (lst1[i] % 2 == 0) == 1:\n                    for j in range(len(lst2)):\n                        if (lst2[j] % 2 == 0) == 1:\n                            lst1[i], lst2[j] = lst2[j], lst1[i]\n                            if i == j and (lst1 == lst2):\n                                return \"YES\"\n                            break\n                    if i == j and (lst1 == lst2):\n                        return \"YES\"\n            return \"NO\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    d = {}\n    for letter in test:\n        if letter in d:\n            d[letter] += 1\n        else:\n            d[letter] = 1\n    return d"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not test: return {}\n    histogram = {}\n    for c in test:\n        if c not in histogram:\n            histogram[c] = 1\n        else:\n            histogram[c] += 1\n    return histogram\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    d = {}\n    for c in test.lower():\n        d[c] = d.get(c, 0) + 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = dict()\n    test = test.lower()\n    test = test.split()\n    for i in range(0, len(test)):\n        if test[i] in result:\n            result[test[i]] += 1\n        else:\n            result[test[i]] = 1\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    test = test.lower()\n    dic = {}\n    for i in test:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not test:\n        return {}\n    \n    d = {}\n    for c in test:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    d = {}\n    for letter in test:\n        d[letter] = d.get(letter, 0) + 1\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not test:\n        return {}\n    else:\n        letters = {}\n        for letter in test:\n            if letter not in letters:\n                letters[letter] = 1\n            else:\n                letters[letter] += 1\n        return letters\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    test = test.lower()\n    test = ''.join([i for i in test if i.isalpha()])\n    counter = Counter(test)\n    return counter\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # TODO: complete the function\n    #return {'a': 1, 'b': 1, 'c': 1}\n    d = {}\n    for i in test:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = list(s)\n    if not s:\n        return ('',False)\n    for i in c:\n        s.remove(i)\n    s = ''.join(s)\n    s = s.lower()\n    return (s,s == s[::-1])"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(s)-1):\n        if s[i] == s[len(s)-1-i]:\n            c = s[i]\n    if c in s[i+1:]:\n        return (s,False)\n    else:\n        return (s[:-1],True)"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # if len(s)<len(c):\n    #     c=c.replace('a','b')\n    #     s=s.replace('a','b')\n    # s = list(s)\n    # c = list(c)\n    # s.sort()\n    # c.sort()\n    # j=0\n    # for i in range(len(s)):\n    #     if s[i]==c[j]:\n    #         j+=1\n    #         if j==len(c):\n    #             s[i]='a'\n    #             j=0\n    # if s==s[::-1]:\n    #     return (s,'True')\n    # else:\n    #     return (s,'False')\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    if len(s)<1 or len(c)<1:\n        return ('',False)\n    \n    s_index = 0\n    c_index = 0\n    result = ''\n    \n    while s_index<len(s) and c_index<len(c):\n        if s[s_index] == c[c_index]:\n            result = result + s[s_index]\n        s_index += 1\n        c_index += 1\n    \n    #Special Cases\n    if len(result) == 0:\n        return ('',False)\n    elif len(result) == len(s):\n        return (result,True)\n    else:\n        return (result,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (\"\",False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = list(s)\n    c = list(c)\n    for i in range(len(c)):\n        if c[i] in s:\n            s.remove(c[i])\n    if len(s) == 0:\n        return(\"\",True)\n    else:\n        return(s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    new_s = ''\n    for i in s:\n        if i not in c:\n            new_s += i\n    if new_s == s:\n        return(new_s,True)\n    else:\n        return(new_s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    a_list = list(s)\n    b_list = list(c)\n    \n    for i in range(len(a_list)):\n        if a_list[i] in b_list:\n            a_list.pop(i)\n    \n    for i in range(len(b_list)):\n        if b_list[i] in a_list:\n            a_list.pop(i)\n            \n    if a_list == a_list[::-1]:\n        return (''.join(a_list),True)\n    else:\n        return (''.join(a_list),False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    temp = \"\"\n    for i in range(len(s)-1):\n        if s[i] == c[-1]:\n            temp += s[i]\n    if temp == s:\n        return (temp,True)\n    else:\n        return (temp,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = s.lower()\n    c = c.lower()\n    newstr = ''\n    for i in s:\n        if i not in c:\n            newstr+=i\n    newstr = newstr.lower()\n    if newstr == newstr[::-1]:\n        return newstr,True\n    else:\n        return newstr,False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Write your code here\n    result = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if j % 2 == 1:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{i}ng {count} of the {i}nput.\")\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code here\n    output = []\n    for i in range(0,len(lst)):\n        #print(lst[i])\n        string = str(lst[i])\n        list = list(string)\n        output.append(odd_count_helper(list))\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    for i in range(len(lst)):\n        lst[i] = 'the number of odd elements'+ str(len(lst[i])) + 'n the str' + str(i) + 'ng'+ str(lst[i]) +'of the'+ str(i) + 'nput.'\n    return lst\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [print_formatted(i) for i in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    output = []\n    for i in lst:\n        i = ''.join(list(filter(lambda x: x.isdigit(), i)))\n        output.append(f\"the number of odd elements {i} of the {i}'s of the {i}'input.\")\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # METHOD 1:\n    # odd_count = []\n    # for i in lst:\n    #     odd_count.append(get_odd_count(i))\n    # return odd_count\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ['the number of odd elements {}n the str{} of the {}nput.'.format(\n        len(lst) - x - 1, x, len(lst) - x - 1) for x in range(len(lst))]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    output = []\n    for i in lst:\n        new_list = []\n        count = 0\n        for j in i:\n            if j in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'):\n                count += 1\n        if count % 2 == 1:\n            new_list.append(i + \" the number of odd elements {} of the string {} of the {}nput.\".format(count, i, i))\n        else:\n            new_list.append(\"the number of odd elements {}n the str4ng {} of the {}nput.\".format(count, i, i))\n        output.extend(new_list)\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your Code Here\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    output = []\n    for i in lst:\n        if len(i)%2!= 0:\n            output.append(\"the number of odd elements \"+str(len(i))+\"n the str\"+str(len(i))+\"ng \"+str(len(i))+\" of the \"+str(len(i))+\"nput.\")\n        else:\n            output.append(\"the number of odd elements 0n the str0ng 0 of the 0nput.\")\n    return output\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(nums) == 0:\n        return 0\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    curr_sum = 0\n    min_sum = float(\"inf\")\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l, r = 0, 0\n    total = 0\n    min_total = sys.maxsize\n    while r < len(nums):\n        total += nums[r]\n        while total >= min_total:\n            min_total = min(min_total, total)\n            r += 1\n            if r - l > 0:\n                total -= nums[l]\n            l += 1\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # for i in range(len(nums)):\n    #     if sum(nums[:i+1]) == sum(nums[i+1:]):\n    #         return sum(nums[:i+1])\n    #     for j in range(i, len(nums)):\n    #         if sum(nums[i:j+1]) == sum(nums[i+1:]):\n    #             return sum(nums[i:j+1])\n    # return -1\n    sum_num = 0\n    left, right = 0, 0\n    min_sum = float('inf')\n    while right < len(nums):\n        sum_num += nums[right]\n        while sum_num >= min_sum:\n            min_sum = min(sum_num, min_sum)\n            right += 1\n            if right < len(nums):\n                sum_num -= nums[left]\n            else:\n                break\n        left += 1\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not nums:\n        return -1\n    min_sum, min_idx = float(\"inf\"), 0\n    for i, num in enumerate(nums):\n        # min_sum = min(min_sum, sum[min_idx: i + 1])\n        min_sum = min(min_sum, min_sum + num, num)\n        if min_sum == num:\n            min_idx = i + 1\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    best_min = float('inf')\n    # iterate through the array starting at 1st element\n    for i in range(1, len(nums)):\n        # slice the array starting at i \n        # and ending at the length of nums - i\n        # since we can't have a subarray of a shorter length\n        # in the case where nums is the same as itself\n        current_min = min(nums[i:])\n        if current_min < best_min:\n            best_min = current_min\n    return best_min\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # keep track of the cumulative sum to keep track of the total sum\n    # keep a window of the sum so far\n    # keep track of the min sum\n    total = 0\n    min_sum = float('inf')\n    window = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        window += nums[i]\n        # now update min_sum\n        if window < min_sum:\n            min_sum = window\n        # now check if we can get any window back to < min_sum\n        if total <= min_sum:\n            window = total - min_sum\n            # update min_sum if we found a new window\n            min_sum = total\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(nums) == 0:\n        return 0\n    min_sum = nums[0]\n    curr_sum = nums[0]\n    for i in range(1, len(nums)):\n        curr_sum += nums[i]\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum < nums[i]:\n            curr_sum = nums[i]\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if nums == None or len(nums) == 0:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum = 0\n        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n            min_sum = min(min_sum, curr_sum)\n    return min_sum\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    \"\"\"\n    # Solution 1\n    # Time Complexity: O(N)\n    # Space Complexity: O(N)\n    # 3rd approach\n    \n    # Get the total number of wells\n    # 4th approach\n    # Time Complexity: O(N)\n    # Space Complexity: O(1)\n    def get_wells(row, i):\n        return min(row[i], capacity)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Solution\n    def search_least_well(grid, capacity):\n        # if we are at the left side of the grid, search the top row\n        if grid[0][0] == 0:\n            return search_least_well(grid[1:], capacity)\n        # if we are at the right side of the grid, search the bottom row\n        if grid[-1][-1] == 0:\n            return search_least_well(grid[:-1], capacity)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # O(mn)\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    rows_range = range(rows)\n    cols_range = range(cols)\n    \n    cur_len = 0\n    \n    def update_cur_len(row, col, grid):\n        \"\"\"\n        Update the length of the bucket at row and col\n        \"\"\"\n        nonlocal cur_len\n        cur_len = max(cur_len, grid[row][col])\n        \n        return cur_len\n    \n    def find_cur_len(row, col, grid):\n        \"\"\"\n        Determine the length of the bucket at row and col\n        \"\"\"\n        nonlocal cur_len\n        cur_len = grid[row][col]\n        return cur_len\n    \n    # \n    def max_fill_helper(grid, bucket_capacity, rows_range, cols_range, cur_len):\n        \"\"\"\n        Do the grid level traversal\n        \"\"\"\n        if cur_len >= bucket_capacity:\n            return 0\n        elif cur_len == 0:\n            return 0\n        else:\n            return_val = 0\n            \n            for row in rows_range:\n                for col in cols_range:\n                    cur_len = update_cur_len(row, col, grid)\n                    return_val = max(return_val, max_fill_helper(grid, bucket_capacity, rows_range, cols_range, cur_len))\n            return return_val\n    \n    return max_fill_helper(grid, bucket_capacity, rows_range, cols_range, cur_len)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not grid:\n        return 0\n    m = len(grid)\n    n = len(grid[0])\n    max_fill_count = 0\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Approach 1 : \n    # Make a dp array of length grid.length * bucket_capacity\n    # in each row, for each unit, keep track of the minimum number of units in a bucket.\n    # After we find the min_units_in_bucket, we can empty the entire bucket and add that unit to the answer.\n    # Also keep track of the maximum number of units in a bucket\n    # in the end, we will have the minimum amount of empty buckets.\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    def get_loc(row, col, i):\n        x = i // cols\n        y = i % cols\n        return x, y\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # check if there is any empty well\n    if not any(not r for r in grid):\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    row, col = len(grid), len(grid[0])\n    count = 0\n    for i in range(row):\n        for j in range(col):\n            if grid[i][j] == 0:\n                continue\n            elif grid[i][j] == 1:\n                for k in range(col):\n                    if grid[i][k] == 0:\n                        count += 1\n                        if count > capacity:\n                            grid[i][k] = 0\n                            count -= 1\n                    elif grid[i][k] == 1:\n                        count += 1\n                        if count > capacity:\n                            grid[i][k] = 0\n                            count -= 1\n    return count\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n_rows = len(grid)\n    n_cols = len(grid[0])\n    max_columns = math.ceil(math.log2(capacity))\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Naive approach\n    # Time: O(n*n)\n    # Space: O(1)\n    ans = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            # No. of times to decrease the bucket\n            if grid[i][j] == 0:\n                ans += math.ceil(capacity / 2)\n            # Count of empty buckets\n            if grid[i][j] == 1:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(arr, key=lambda x: x if x > 0 else 0)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    import itertools\n    num_to_ones = {bin(num).count('1') : num for num in range(10)}\n    return list(itertools.chain.from_iterable(\n        sorted(num_to_ones.items(), key = lambda x: x[1])\n        for num in arr\n    ))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(arr, key = lambda x: (bin(x).count(\"1\"), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(arr, key=lambda n: (bin(n).count('1'), n))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sorted_arr = []\n    for i in range(len(arr)):\n        count = 0\n        for j in range(32):\n            if arr[i] & (1 << j):\n                count += 1\n        sorted_arr.append((count, arr[i]))\n    sorted_arr.sort(reverse=True)\n    return sorted(sorted_arr, key=lambda x: x[1])\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # iterate through and determine the highest bit for each number, store as a list\n    # sort this list in descending order, then return the list\n    # iterate through, getting the highest bit (1 or 0) for each number, and checking if its leading\n    # bit is 0, if it is 0, multiply that bit by 2, and add to output array\n    # for each 2^i, where i is the number of leading zeros, multiply by 2, add to output array\n    highest_bit = []\n    for i in arr:\n        temp = i\n        while temp > 0:\n            highest_bit.append(temp % 2)\n            temp = temp // 2\n    highest_bit = highest_bit[::-1]\n    output_list = []\n    for i in range(len(highest_bit)):\n        if highest_bit[i] == 0:\n            output_list.append(highest_bit[i])\n        else:\n            output_list.append(highest_bit[i]*2)\n    return output_list\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    x = []\n    for i in arr:\n        count = bin(i)[2:]\n        count = count.count('1')\n        x.append(count)\n    x.sort()\n    for i in range(len(x)):\n        x[i] = str(x[i])\n    return x\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(arr, key=lambda i: (bin(i).count(\"1\"), i))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    binary_num_list = list(bin(x)[2:])\n    binary_num_list.reverse()\n    if len(binary_num_list) % 2:\n        binary_num_list.append('0')\n    new_list = []\n    count = 0\n    for num in binary_num_list:\n        if num == '1':\n            count += 1\n        else:\n            count += 0\n        new_list.append(count)\n    return sorted(new_list)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # return sorted(arr, key=lambda x: (bin(x).count('1'),x))\n    return sorted(arr, key=lambda x: (x & 1, x))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return []\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return []\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    words = []\n    if s == \"\":\n        return words\n    if n == 0:\n        return words\n    \n    for i in s:\n        if i.isalpha() and i.lower()!= \" \":\n            words.append(i.lower())\n    return words[:n]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    return [word for word in s.split() if len([letter for letter in word if letter not in \"abcdefghijklmnopqrstuvwxyz\"]) == n]\n    \nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3)"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    words = []\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in s.split():\n        if len(i) >= n and i[0] in consonants:\n            words.append(i)\n            \n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    # Convert the string to a list\n    s = s.split()\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not s: return []\n    if len(s) <= 1 or len(s) > n: return []\n    # Your code here\n    words = []\n    words = word_split(s)\n    new_words = []\n    for word in words:\n        if word[0].islower():\n            new_words.append(word)\n    return new_words\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # put your code here\n    if not s:\n        return []\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not s: return []\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # initialize the variables\n    \n    if len(word) < 2:\n        return ''\n    \n    # find the index of the first vowel of the word (case sensitive)\n    i = 0\n    for i in range(len(word) - 1):\n        if word[i] in 'aeiou':\n            break\n    \n    # get the length of the word, since the first vowel is located on the right side\n    word_len = len(word) - i\n    \n    # initialize the variable to store the closest vowel from the right side\n    closest_vowel = ''\n    \n    # find the index of the first vowel of the word (case sensitive)\n    i = word_len - 1\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in 'aeiou':\n            break\n    \n    # check whether the closest vowel is at the left or right side\n    if i < word_len - 1:\n        # the closest vowel is located on the left side\n        closest_vowel = word[i]\n    else:\n        # the closest vowel is located on the right side\n        closest_vowel = word[word_len - 1]\n    \n    return closest_vowel\n    \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    vowels = \"aeiou\"\n    for char in word[::-1]:\n        if char in vowels:\n            return char\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in word:\n        if i in \"aeiou\":\n            return i\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Write your code here.\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #return the vowel if it is present in the given word\n    #else return the empty string\n    for i in word:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\":\n            return i\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # add all vowels from the right of the word\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in reversed(word):\n        if char in vowels:\n            return char\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(1, len(word)):\n        if word[i] in \"aeiouAEIOU\":\n            return word[i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(word) - 1):\n        if word[i] in \"aeiouAEIOU\":\n            if word[i + 1] in \"aeiouAEIOU\":\n                return word[i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    vowels = set(\"aeiouAEIOU\")\n    \n    vowel_index = 0\n    \n    for i, letter in enumerate(word):\n        if letter in vowels:\n            vowel_index = i\n    \n    if vowel_index == 0:\n        return \"\"\n    else:\n        return word[vowel_index]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    vowels = 'aeiou'\n    \n    i = len(word) - 1\n    while i > 0:\n        if word[i] == 'a' or word[i] == 'e' or word[i] == 'i' or word[i] == 'o' or word[i] == 'u' or word[i] == 'y':\n            return word[i]\n        i -= 1\n    return ''\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #s = '(()())'\n    s = '()(())()'\n    st = []\n    for i in s:\n        if i == '(':\n            st.append(i)\n        elif i == ')':\n            if len(st) == 0:\n                return 'No'\n            else:\n                st.pop()\n    if len(st) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # O(n) time | O(n) space\n    stack = []\n    for c in lst:\n        if c == '(':\n            stack.append(c)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    stack = []\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return 'No'\n    \n    if lst[0] == ')':\n        if len(lst) == 1:\n            return 'No'\n        else:\n            return 'No' if match_parens(lst[1:]) == 'No' else 'Yes'\n    elif lst[0] == '(':\n        if len(lst) == 1:\n            return 'Yes'\n        else:\n            return 'Yes' if match_parens(lst[1:]) == 'Yes' else 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    # Method 1: Stack\n    \n    stack = []\n    \n    for i in range(len(lst)):\n        if lst[i] == '(':\n            stack.append(i)\n        if lst[i] == ')':\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    \n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # the first two and the last two are not balanced\n    if lst[0]!= ')' and lst[len(lst)-1]!= '(':\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Check if parentheses are balanced\n    if(len(lst) <= 1):\n        return \"Yes\" if len(lst) == 1 else \"No\"\n    # Check if there is a mismatch\n    if(lst[0] == ')' and lst[1]!= '('):\n        return 'No'\n    if(lst[1] == ')' and lst[0]!= '('):\n        return 'No'\n    # Check if first parenthesis is unbalanced\n    if(lst[0] == '(' and lst[1] == ')'):\n        return 'No'\n    # Check if second parenthesis is unbalanced\n    if(lst[1] == '(' and lst[0] == ')'):\n        return 'No'\n    # If both parentheses are balanced, the result will be good\n    if(lst[0] == '(' and lst[1] == ')'):\n        lst.pop(0)\n        lst.pop(0)\n        return match_parens(lst)\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    pairs = set([('(', ')'), ('(', ')'), (')', '(')])\n    for i in range(1, len(lst)):\n        if lst[i] == ')' and lst[i - 1] == '(':\n            return 'Yes'\n        elif lst[i] == ')' and lst[i - 1] == ')':\n            return 'No'\n    return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s1 = ''\n    s2 = ''\n    for c in lst:\n        if c == '(':\n            s1 += '('\n        elif c == ')':\n            if s1:\n                s1 = s1[:-1]\n            else:\n                return 'No'\n    return 'Yes' if s1 == '' else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # your code here\n    return True"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if k == 0:\n        return []\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    arr.sort(reverse=True)\n    return arr[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    min_heap = MinHeap(arr, k)\n    \n    while min_heap.size > 0:\n        elem = min_heap.pop()\n        heapq.heappush(arr, elem)\n    \n    return arr\n    \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def partition(arr, l, r):\n        i = l - 1\n        pivot = arr[r]\n        for j in range(l, r):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return max_heap(arr, k)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    arr.sort(reverse=True)\n    res = []\n    for i in range(k):\n        res.append(arr[i])\n    return res\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Sort the array in ascending order\n    arr.sort()\n    # Retrieve the maximum element\n    return arr[-k]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Time: O(n log k)\n    # Space: O(n)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not arr or not k:\n        return arr\n    \n    res = arr[:k]\n    for i in range(k, len(arr)):\n        if arr[i] > max(res):\n            res[-1] = arr[i]\n            res.sort()\n    return res\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum([num for index, num in enumerate(lst) if index % 2 == 0 and num % 2 == 1])\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(lst[::2])\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    numbers = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            numbers.append(lst[i])\n    return sum(numbers)\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # brute force\n    # for i in range(0, len(lst), 2):\n    #     lst[i] = lst[i] * 2\n    # return sum(lst)\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code here\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # sort the list, so the sum of the odd numbers is the same for even and odd numbers\n    lst = sorted(lst)\n    \n    evens = 0\n    \n    for i, item in enumerate(lst):\n        if i % 2 == 0:\n            evens += item\n    return evens\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    odd_sum = 0\n    for i in range(0, len(lst), 2):\n        odd_sum += lst[i]\n    return odd_sum"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    evens = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            evens += lst[i]\n    return evens\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum([i for i in lst if i % 2 == 1])\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i]%2 == 1"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not arr or k > len(arr) or k < 0:\n        return -1\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    k = min(k, len(arr))\n    first_k = arr[:k]\n    first_k_counts = Counter(first_k)\n    counts = defaultdict(int)\n    for num in arr[k:]:\n        counts[num] += 1\n        if first_k_counts[num] > 1:\n            counts[num] -= 1\n        else:\n            del first_k_counts[num]\n    return sum(counts.values())\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if k > len(arr):\n        return 0\n    count = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            count += arr[i]\n    for i in range(k, len(arr)):\n        curr = arr[i]\n        for j in range(2, len(str(curr))):\n            count += curr\n    return count\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # return sum([sum(list(map(int, str(x)))) for x in arr[:k]])\n    # return sum(min(x, 10) for x in map(int, ''.join(map(str, arr[:k]))))\n    # O(n) time, O(n) space\n    if not arr:\n        return 0\n    res = 0\n    i = 0\n    while i < k:\n        if i + 1 < k and str(arr[i]) == str(arr[i+1]):\n            k -= 2\n            i += 1\n        else:\n            res += arr[i]\n        i += 1\n    return res\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Number of digits in array\n    n = len(str(arr[0]))\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Store k-1 elements in a hash map. This will help in finding the index of the k-1 elements\n    # Also keeping a counter for the k-1 elements\n    # Iterate over the array, find the k-1 elements and add the sum of ith element from the hash map.\n    sum_map = {}\n    for i in range(k - 1):\n        curr_sum = sum_map.get(arr[i], 0)\n        sum_map[arr[i]] = curr_sum + arr[i]\n    curr_sum = sum_map.get(arr[k - 1], 0)\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    counter = 0\n    for i in range(k):\n        counter += arr[i]\n    \n    counter += sum([i // 10 for i in arr[k:]])\n    return counter\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    prefix_sum = arr[:k]\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # n = len(arr)\n    # sum = 0\n    # while k > 0:\n    #     a = arr[k-1]\n    #     if len(str(a)) > 2:\n    #         sum += a\n    #     k -= 1\n    # print(sum)\n    # return sum\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = 0\n    for el in arr[:k]:\n        res += el\n    return res\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if type(n) is not int:\n        raise TypeError(\"n must be a positive integer\")\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def collatz(n):\n        \"\"\"\n        Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    odd_list = []\n    for i in range(1,n):\n        if is_odd(i):\n            odd_list.append(i)\n        else:\n            odd_list.append(collatz(i))\n    return sorted(odd_list)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    odd_collatz = []\n    while n > 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n            break\n        if n % 2 == 0:\n            n = n // 2\n    return sorted(odd_collatz)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    odd_sequence = []\n    current_num = 2\n    odd_sequence.append(2)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return [1]\n    \n    odd = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        odd.append(n)\n    odd.sort()\n    return odd\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l = []\n    while n > 1:\n        if n % 2 == 1:\n            l.append(n)\n        n = n // 2 if n % 2 == 0 else n * 3 + 1\n    return l\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if type(n)!= int or n < 1:\n        raise TypeError('Input argument must be a positive integer.')\n    \n    # Create a list to hold odd numbers\n    odd_numbers = []\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    odd_numbers = []\n    while n!= 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return sorted(odd_numbers)\n    \nprint(get_odd_collatz(5))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(list(set([i for i in range(1, n+1) if is_odd_collatz(i) == 1])))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    d, m, y = date.split('-')\n    days = int(d)\n    months = int(m)\n    years = int(y)\n    if days < 1 or days > 31:\n        return False\n    if months < 1 or months > 12:\n        return False\n    if months == 2 and days > 28:\n        return False\n    if months in (1, 3, 5, 7, 8, 10, 12) and days > 31:\n        return False\n    if months in (4, 6, 9, 11) and days > 30:\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    date = date.split('-')\n    if len(date[0]) == 3 and len(date[1]) == 2 and len(date[2]) == 4:\n        day = date[1]\n        month = date[0]\n        year = date[2]\n        if month.lower() in ['january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december']:\n            if int(month.lower()[0:3]) < 1 or int(month.lower()[0:3]) > 12:\n                return False\n            elif int(month.lower()[0:3]) == 2:\n                if int(day) > 29:\n                    return False\n            else:\n                if int(month.lower()[0:3]) == 4:\n                    if int(day) > 30:\n                        return False\n                else:\n                    if int(day) > 28:\n                        return False\n        else:\n            return False\n        if int(day) > 31:\n            return False\n        elif int(month.lower()[0:3]) == 2:\n            if int(year) > 29:\n                return False\n        else:\n            if int(year) > 30:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if date:\n        if len(date) == 0 or not date.count('-') == 2:\n            return False\n        # date_list = date.split('-')\n        month_list = ['1','2','3','4','5','6','7','8','9','10','11','12']\n        month_dic = {\n            '1':31,\n            '2':28,\n            '3':31,\n            '4':30,\n            '5':31,\n            '6':30,\n            '7':31,\n            '8':31,\n            '9':30,\n            '10':31,\n            '11':30,\n            '12':31,\n        }\n        try:\n            if date[2] not in month_list or date[3] not in month_list:\n                return False\n            if month_dic[date[0]] >= int(date[1]) or month_dic[date[0]] < int(date[1]):\n                return False\n        except:\n            return False\n        if date[0] not in month_list or date[1] not in month_list:\n            return False\n        return True\n    return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    try:\n        month, day, year = date.split('-')\n        month_num = int(month)\n        if month_num not in range(1,13):\n            return False\n        elif day not in range(1,32):\n            return False\n        elif year not in range(1900,2100):\n            return False\n        elif month == '01' or month == '03' or month == '05' or month == '07' or month == '08' or month == '10' or month == '12':\n            if day > 31:\n                return False\n        elif month == '04' or month == '06' or month == '09' or month == '11':\n            if day > 30:\n                return False\n        elif month == '02':\n            if day > 28:\n                return False\n        else:\n            if day > 29:\n                return False\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if date == '':\n        return False\n    # TODO: 1\n    pass\n    # c\u00f3 th\u1ec3 ki\u1ec3m tra xem s\u1ed1 ng\u00e0y, th\u1ee9, n\u0103m, n\u0103m m\u01a1i c\u00f3 c\u00f3 th\u1ec3 tr\u1eeb \u0111i\u1ec1u ki\u1ec7n n\u00e0o v\u00e0 n\u1ebfu b\u1eb1ng th\u00ec ph\u1ea3i l\u00e0 d\u1ea1y n\u0103m m\u01a1i\n    # khi l\u00e0 ng\u00e0y, th\u1ee9, n\u0103m s\u1ebd chia th\u00e0nh 3 th\u00e0nh ph\u1ea1m, n\u0103m m\u01a1i s\u1ebd chia th\u00e0nh 4 th\u00e0nh ph\u1ea1m\n    # \n    # xem ki\u1ec3m tra xem n\u0103m v\u00e0 th\u1ee9 n\u00ean c\u00f3 th\u1ec3 tr\u1eeb \u0111i\u1ec1u ki\u1ec7n n\u00e0o, n\u1ebfu b\u1eb1ng th\u00ec ph\u1ea3i l\u00e0 n\u0103m m\u01a1i\n    # \u0111\u1ec3 ki\u1ec3m tra xem th\u1ee9 t\u1ef1 chia th\u00e0nh th\u1ee9 t\u1ef1 n\u00ean d\u00f9ng thay \u0111\u1ed5i \u0111\u1ecbnh d\u1ea1y th\u1ee9 t\u1ef1, khi l\u00e0 m\u01a1i s\u1ebd chia th\u00e0nh m\u01a1i n\u0103m\n    # \n    # y\u1ecdn h\u1ebft \u0111\u1ecbnh d\u1ea1y c\u1ee7a n\u0103m xem th\u1ee9 n\u00ean thay \u0111\u1ed5i v\u1edbi th\u1ee9 t\u1ef1 n\u00ean tr\u01b0\u1eddng thay \u0111\u1ed5i th\u1ee9 t\u1ef1 c\u00f3 th\u1ec3 chia th\u00e0nh ng\u00e0y n\u00ean c\u00f3 th\u1ec3 tr\u1eeb \u0111i\u1ec1u ki\u1ec7n n\u00e0o\n    # \n    # l\u00e0m thay \u0111\u1ed5i v\u1edbi n\u0103m m\u01a1i th\u00ec ph\u1ea3i xem ki\u1ec3m tra n\u0103m v\u00e0 th\u1ee9 c\u00f3 th\u1ec3 tr\u1eeb \u0111i\u1ec1u ki\u1ec7n n\u00e0o\n    # xem ki\u1ec3m tra xem th\u1ee9 t\u1ef1 chia th\u00e0nh th\u1ee9 t\u1ef1 n\u00ean d\u00f9ng thay \u0111\u1ed5i \u0111\u1ecbnh d\u1ea1y th\u1ee9 t\u1ef1, khi l\u00e0 th\u1ee9 t\u1ef1 n\u00ean chia th\u00e0nh m\u01a1i n\u0103m\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return True if date!= \"\" and (len(date) == 10 and date.count(\"-\") == 3 and 0 < int(date[3:5]) < 31 and 0 < int(date[0:2]) < 13 and 0 < int(date[6:]) < 2020 else False) else False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    month_valid = {1:31,3:30,5:31,7:31,8:30,10:31,12:30,4:31,6:30,9:31}\n    date_valid = {'mm-dd-yyyy':{1:31,3:31,5:31,7:31,8:31,10:31,12:31,4:30,6:30,9:30},\n                 'mm-dd-yy':{1:31,3:31,5:31,7:31,8:31,10:31,12:31,4:30,6:30,9:30}}\n    return True if date!= None and (date!= '') and date.count('-') == 3 and len(date.split('-')) == 3 and \\\n                     (date.split('-')[0] in date_valid and date.split('-')[1] in date_valid[date.split('-')[0]]) and \\\n                     (date.split('-')[2] == date.split('-')[0]) and \\\n                     (date.split('-')[1] in month_valid) and (int(date.split('-')[2]) in range(2020,2031)) else False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if date == \"\" or date == \" \":\n        return False\n    else:\n        lst = date.split('-')\n        if len(lst) == 3:\n            if int(lst[0]) < 1 or int(lst[0]) > 31 or int(lst[1]) < 1 or int(lst[1]) > 31 or int(lst[2]) < 1 or int(lst[2]) > 31 or int(lst[0]) > 30 or int(lst[0]) < 1 or int(lst[1]) > 12 or int(lst[1]) < 1 or int(lst[2]) > 12 or int(lst[2]) < 1:\n                return False\n            else:\n                if int(lst[0]) > 1 and int(lst[0]) < 13 and int(lst[1]) > 0 and int(lst[1]) < 31 and int(lst[2]) > 0 and int(lst[2]) < 2040:\n                    if int(lst[0]) == 4 or int(lst[0]) == 6 or int(lst[0]) == 9 or int(lst[0]) == 11:\n                        if int(lst[1]) < 1 or int(lst[1]) > 31:\n                            return False\n                    else:\n                        if int(lst[1]) < 1 or int(lst[1]) > 30:\n                            return False\n                    return True\n                else:\n                    return False\n        else:\n            return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    months_leap = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    months_not_leap = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    months_leap_not_leap = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    months = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"]\n    months_month = 0\n    if(len(date)<1):\n        return False\n    else:\n        date_split = date.split(\"-\")\n        if(len(date_split)==3):\n            if(date_split[0]!=''):\n                months_month = months.index(date_split[0].lower()) + 1\n            if(date_split[1]!=''):\n                days_month = int(date_split[1])\n            if(date_split[2]!=''):\n                year_month = int(date_split[2])\n            if(year_month>2000 or year_month<2001):\n                return False\n            if(months_month>12 or months_month<1):\n                return False\n            if(days_month<1 or days_month>31):\n                return False\n            if(months_month in [3,6,9,11]):\n                if(days_month<1 or days_month>30):\n                    return False\n            elif(months_month in [1,4,7,8,10,12]):\n                if(days_month<1 or days_month>29):\n                    return False\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #split by space\n    return txt.split()\n    #split by commas\n    #return txt.split(',')\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Return\n    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    txt = txt.split(' ')\n    txt.sort()\n    return txt\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    '''\n    words = txt.split()\n    print(words)\n    return words\n    '''\n    words = txt.split()\n    a = words[0]\n    b = words[1]\n    c = words[2]\n    \n    if a.count(' ') == 0:\n        i = 0\n        while i < len(a):\n            if ord(a[i]) >= ord('a') and ord(a[i]) <= ord('z'):\n                if i%2 == 0:\n                    count = 1\n                else:\n                    count = 0\n                    \n            elif ord(a[i]) >= ord('0') and ord(a[i]) <= ord('9'):\n                if i%2 == 0:\n                    count = 1\n                else:\n                    count = 0\n            i += 1\n    else:\n        i = 0\n        count = 0\n        while i < len(a):\n            if a[i] =='':\n                count += 1\n            elif count > 0:\n                break\n            else:\n                if ord(a[i]) >= ord('a') and ord(a[i]) <= ord('z'):\n                    if i%2 == 0:\n                        count = 1\n                    else:\n                        count = 0\n                elif ord(a[i]) >= ord('0') and ord(a[i]) <= ord('9'):\n                    if i%2 == 0:\n                        count = 1\n                    else:\n                        count = 0\n            i += 1\n            \n        j = len(a)-1\n        while j >= 0:\n            if a[j] =='':\n                count += 1\n            elif count > 0:\n                break\n            else:\n                if ord(a[j]) >= ord('a') and ord(a[j]) <= ord('z'):\n                    if j%2 == 0:\n                        count = 1\n                    else:\n                        count = 0\n                elif ord(a[j]) >= ord('0') and ord(a[j]) <= ord('9'):\n                    if j%2 == 0:\n                        count = 1\n                    else:\n                        count = 0\n            j -= 1\n    if b.count(' ') == 0:\n        i = 0\n        while i < len(b):\n            if ord(b[i]) >= ord('a') and ord(b[i]) <= ord('z'):\n                if i%2 == 0:\n                    count = 1\n                else:\n                    count = 0\n            elif ord(b[i]) >= ord('0') and ord(b[i]) <= ord('9'):\n                if i%2 == 0:\n                    count = 1\n                else:\n                    count = 0\n            i += 1\n    else:\n        i = 0\n        count = 0\n        while i < len(b):\n            if b[i] =='':\n                count += 1\n            elif count > 0:\n                break\n            else:\n                if ord(b[i]) >= ord('a') and ord(b[i]) <= ord('z'):\n                    if i%2 == 0:\n                        count = 1\n                    else:\n                        count = 0\n                elif ord(b[i]) >= ord('0') and ord(b[i]) <= ord('9'):\n                    if i%2 == 0:\n                        count = 1\n                    else:\n                        count = 0\n            i += 1\n            \n        j = len(b)-1\n        while j >= 0:\n            if b[j] =='':\n                count += 1\n            elif count > 0:\n                break\n            else:\n                if ord(b[j]) >= ord('a') and ord(b[j]) <= ord('z'):\n                    if j%2 == 0:\n                        count = 1\n                    else:\n                        count = 0\n                elif ord(b[j]) >= ord('0') and ord(b[j]) <= ord('9'):\n                    if j%2 == 0:\n                        count = 1\n                    else:\n                        count = 0\n            j -= 1\n    if c.count(' ') == 0:\n        i = 0\n        while i < len(c):\n            if ord(c[i]) >= ord('a') and ord(c[i]) <= ord('z'):\n                if i%2 == 0:\n                    coun"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return(txt.lower().split())\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    txt = txt.lower()\n    words = txt.split()\n    output = []\n    for word in words:\n        num_lower = 0\n        num_upper = 0\n        num_digit = 0\n        for char in word:\n            if char.isdigit():\n                num_digit += 1\n            if char.isupper():\n                num_upper += 1\n            if char.islower():\n                num_lower += 1\n        if num_digit % 2 == 0 and num_lower!= 0 and num_upper!= 0:\n            output.append(word)\n    return output\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    check = True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(lst) < 2:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(lst) < 2:\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n    new_lst = lst[:]\n    new_lst.sort()\n    if new_lst == lst:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(lst)):\n        if i + 1 < len(lst) and lst[i + 1] < lst[i]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return True\n    elif len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return True\n        else:\n            return False\n    else:\n        x = lst[0]\n        for i in range(1, len(lst)):\n            if x < lst[i]:\n                return False\n            x = lst[i]\n        return True\n    \n    "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    flag = True\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(lst) == 1:\n        return True\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code goes here\n    inter = abs(interval1[0] - interval2[1])\n    if inter == 0:\n        return 'NO'\n    return 'YES' if (inter) % 2 == 0 else 'NO'\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Note: you need to complete the first half of the function\n    # Note: we need to solve the problem using 2 pointers\n    # Note: the solution needs to work on both arrays\n    # the idea is to use the idea of intersection\n    # to find the intersection\n    if len(interval1) == 1 and len(interval2) == 1:\n        if interval1[0] <= interval2[0] and interval2[0] <= interval1[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(interval1) == 0 or len(interval2) == 0:\n        return \"NO\"\n    # the first pointer will start from the beginning of the interval,\n    # the second pointer will be at the end of the interval\n    # the first pointer will be at the start of the interval\n    # the second pointer will be at the end of the interval\n    # NOTE: the first pointer will be ahead the second pointer by 1,\n    # so that the intersection always includes both the intervals\n    # but the second pointer will be ahead by 1\n    # so the first pointer will be (0, 1), the second pointer will be (0, 2)\n    # so the intersection will be (0, 2)\n    # then the answer will be \"YES\"\n    # the second pointer will be ahead by 2, so the answer will be \"NO\"\n    # so the first pointer will be (1, 2), the second pointer will be (1, 3)\n    # so the intersection will be (1, 3)\n    # the answer will be \"YES\"\n    # the second pointer will be ahead by 3, so the answer will be \"NO\"\n    # so the first pointer will be (2, 3), the second pointer will be (2, 4)\n    # so the intersection will be (2, 4)\n    # the answer will be \"YES\"\n    # the second pointer will be ahead by 4, so the answer will be \"NO\"\n    # so the first pointer will be (3, 4), the second pointer will be (3, 5)\n    # so the intersection will be (3, 5)\n    # the answer will be \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if (interval1[0] > interval2[0] and interval1[0] < interval2[1]) or (interval1[1] > interval2[0] and interval1[1] < interval2[1]):\n        if (math.gcd(interval1[1] - interval1[0], interval2[1] - interval2[0]) == 1):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # let us assume 1 < start < end < 2, and 2 < start < end < 3, for 3 we need to take into account that 1\n    # is prime, so we would need to check if 1 and 2 are prime\n    # so check if prime or not, then set a condition where it is divisible by 2\n    # 1 + 2 < 3\n    # let us see if 2 + 1 and 3 are prime or not\n    # 2 + 1 = 3\n    # we need to check if 3 is prime or not\n    if start > end:\n        return \"NO\"\n    if start == end:\n        return \"NO\"\n    if start == end:\n        return \"YES\"\n    if is_prime(start) and is_prime(end):\n        return \"YES\"\n    if is_prime(start) and not is_prime(end):\n        # we need to check if 3 is prime or not\n        return \"YES\"\n    if not is_prime(start) and is_prime(end):\n        # we need to check if 2 is prime or not\n        return \"YES\"\n    if not is_prime(start) and not is_prime(end):\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # If the intervals don't intersect, then there is no intersection and so answer is 'NO'\n    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return 'NO'\n    # If the intervals intersect, then the length of intersection is the \n    # smallest positive integer whose factorization contains both the start\n    # and end of the intersection\n    elif interval1[0] < interval2[1] and interval1[1] > interval2[0]:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    if interval1[0] >= interval2[1] or interval1[1] <= interval2[0]:\n        return \"NO\"\n    return \"YES\" if prime_factorization(abs(interval1[1] - interval1[0]))\n    \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = set()\n    if interval1[0] > interval1[1]:\n        i1 = interval1[1], interval1[0]\n    else:\n        i1 = interval1[0], interval1[1]\n    if interval2[0] > interval2[1]:\n        i2 = interval2[1], interval2[0]\n    else:\n        i2 = interval2[0], interval2[1]\n    for i in range(i1[0], i1[1] + 1):\n        if i in s:\n            return \"NO\"\n        s.add(i)\n    for i in range(i2[0], i2[1] + 1):\n        if i in s:\n            return \"NO\"\n        s.add(i)\n    return \"YES\"\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if arr:\n        return sum(abs(i) for i in arr) * prod_signs(list(map(lambda x: x * (-1 if x < 0 else 1), arr)))\n    return None\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    prod = 1\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            prod = 0\n        else:\n            prod *= arr[i]\n    return prod\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return None\n    return sum([abs(x) for x in arr]) * prod(arr, 1)\n    \n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # return sum([sign * abs(num) for num, sign in arr]) if arr else None\n    # return sum(prod_signs(arr[i:]) for i in range(len(arr)))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(s * abs(n) for s, n in enumerate(arr))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    signs = list(map(lambda x: 1 if x > 0 else -1 if x < 0 else 0, arr))\n    return sum(signs) * sum([abs(x) for x in arr])\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s = 0\n    for i in arr:\n        if i >= 0:\n            s += i\n    return s * prod(arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = len(arr)\n    if n == 0:\n        return None\n    else:\n        return sum([abs(x) * (1 if x > 0 else -1 if x < 0 else 0) for x in arr])\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return None\n    prod = 1\n    sign = 1\n    for i in arr:\n        if i == 0:\n            sign = 0\n        if i >= 0:\n            prod *= i\n        if i < 0:\n            prod *= -i\n    return prod * sign\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum([abs(x) * np.sign(x) for x in arr])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Solution 1: top down, O(nmk) time and O(nmk) space\n    # Solution 2: bottom up, O(nk) time and O(nk) space\n    # Solution 3: dp, top down, O(nmk) time and O(nmk) space\n    # Solution 4: dp, bottom up, O(nmk) time and O(nmk) space\n    # Solution 5: dp, bottom up, O(nk) time and O(nk) space\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Solution from leetcode\n    #   1)\n    #   1)\n    #   2)\n    #   3)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def dfs(grid, r, c, k, visited):\n        # if out of grid or have k\n        if r < 0 or r >= len(grid) or c < 0 or c >= len(grid[0]):\n            return float('inf')\n        if k == 0:\n            return 0\n        # if already visited\n        if (r, c) in visited:\n            return float('inf')\n        # recurse\n        visited.add((r, c))\n        return min(dfs(grid, r + 1, c, k, visited), dfs(grid, r, c - 1, k, visited))\n    \n    # find the max value in each row and column\n    r_max, c_max = float('-inf'), float('-inf')\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] > r_max:\n                r_max = grid[i][j]\n            if grid[i][j] > c_max:\n                c_max = grid[i][j]\n    \n    # return the min in each row and column\n    return [grid[r][c] for r in range(len(grid)) for c in range(len(grid[0])) if grid[r][c] == r_max and grid[r][c] == c_max]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not grid or not grid[0] or not grid[0][0] or not k or k < 1:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # A * B = C, where A,B are strings, and C is a number\n    # C = A + B + str(len(set(A)-set(B))), where A,B are strings, and str(len(set(A)-set(B))) is a number\n    # C = min(A, B) + str(len(set(A-B))), where A,B are strings, and set(A-B) is the set of integers in the union of A and B\n    # C = A + str(len(set(A)-set(B)))\n    # C = min(A, B) + str(len(set(A)-set(B)))\n    # C = (A + min(B)) * (len(set(A)-set(B)))\n    # C = (A + min(B)) * len(set(A-B))\n    # C = A + len(set(A-B))\n    # C = A + len(set(A-B))\n    # C = 2 * len(set(A-B))\n    # A = min(len(set(A) - set(B)))\n    # A = min(len(set(A) - set(B)))\n    # A = len(set(A) - set(B))\n    # A = min(len(set(A) - set(B)))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    # A = len(set(A) - set(B))\n    "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # DFS + DFS with memo\n    # dp = collections.defaultdict(int)\n    # def dfs(i, j, k, dp):\n    #     if dp[k]!= 0: return dp[k]\n    #     if k == 1: return grid[i][j]\n    #     dp[k] = float('inf')\n    #     for x, y in (i-1, j), (i+1, j), (i, j-1), (i, j+1):\n    #         if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] < grid[i][j]:\n    #             dp[k] = min(dp[k], dfs(x, y, k-1, dp))\n    #     return dp[k]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    m, n = len(grid), len(grid[0])\n    d = {}\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # self.grid = grid\n    # self.n = len(grid)\n    # self.k = k\n    # self.visited = set()\n    # self.q = deque()\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    rows, cols = len(grid), len(grid[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    tri_list = []\n    for i in range(n + 1):\n        if i == 0:\n            tri_list.append(3)\n        elif i == 1:\n            tri_list.append(1)\n        elif i == 2:\n            tri_list.append(2)\n        else:\n            tri_list.append(tri_list[i - 2] + tri_list[i - 3] + tri_list[i - 4])\n    return tri_list\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [1, 1, 2, 3]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n = n - 2 if n > 2 else 1\n    return [i for i in range(n + 1)]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    res = []\n    a = b = 1\n    for i in range(n + 1):\n        res.append(a)\n        a, b = b, a + b\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    out = []\n    out.append(1)\n    if n > 0:\n        out.append(3)\n    if n > 1:\n        out.append(2)\n    if n > 2:\n        for i in range(3, n+1):\n            out.append(out[i-2] + out[i-3] + out[i-4])\n    return out\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    fib = [1, 1]\n    if n == 1:\n        return fib\n    elif n == 2:\n        return fib + [fib[0] + fib[1]]\n    else:\n        for i in range(2, n + 1):\n            fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3])\n        return fib\n        \ndef roman_to_int(s):\n    \"\"\"Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n    Symbol       Value\n    I             1\n    V             5\n    X             10\n    L             50\n    C             100\n    D             500\n    M             1000\n    For example, two is written as II in Roman numeral, just two one's added together.\n    Twelve is written as, XII, which is simply X + II. The number twenty seven is written \n    as XXVII, which is XX + V + II.\n    Roman numerals are usually written largest to smallest from left to right.\n    However, the numeral for four is not IIII. Instead, the number four is written as IV.\n    Because the one is before the five we subtract it making four.\n    The same principle applies to the number nine, which is written as IX.\n    There are six instances where subtraction is used:\n    I can be placed before V (5) and X (10) to make 4 and 9.\n    X can be placed before L (50) and C (100) to make 40 and 90.\n    C can be placed before D (500) and M (1000) to make 400 and 900.\n    Given a roman numeral, convert it to an integer. Input is guaranteed to be within the\n    range from 1 to 3999.\n    Example 1:\n    Input: \"III\"\n    Output: 3\n    Example 2:\n    Input: \"IV\"\n    Output: 4\n    Example 3:\n    Input: \"IX\"\n    Output: 9\n    Example 4:\n    Input: \"LVIII\"\n    Output: 58\n    Explanation: L = 50, V= 5, III = 3.\n    Example 5:\n    Input: \"MCMXCIV\"\n    Output: 1994\n    Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n    \"\"\"\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    n = 0\n    i = 0\n    while i < len(s):\n        if i + 1 < len(s) and roman[s[i]] < roman[s[i + 1]]:\n            n -= roman[s[i]]\n        else:\n            n += roman[s[i]]\n        i += 1\n    return n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n <= 1:\n        return n\n    first = 1\n    last = 2\n    middle = 3\n    result = [first, middle, last]\n    for i in range(n - 3):\n        middle = first + last\n        first = last\n        last = middle\n        result.append(middle)\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Check the correctness of the input\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"Input must be positive integer\")\n    # Check the correctness of the input\n    if n <= 1:\n        return n\n    # Check the correctness of the input\n    if n == 2:\n        return [1, 1]\n    # Check the correctness of the input\n    if n == 3:\n        return [1, 2, 3]\n    # Check the correctness of the input\n    if n == 4:\n        return [1, 3, 3, 4]\n    # Check the correctness of the input\n    if n > 4:\n        return [1, 3, 3, 4, 6, 10, 15, 21, 28, 36]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n < 3:\n        return [1]*(n+1)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def fib(n):\n        \"\"\"returns fibonacci series till n\"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        return fib(n - 1) + fib(n - 2)\n    return fib(n + 1)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    while n > 0:\n        count += n % 10\n        n = n // 10\n    return count\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return productOfOdd(n)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # n = n // 10\n    # return n % 10 * digits(n // 10)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    return digits_helper(n, 1)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # If n is zero, then return zero\n    if n == 0:\n        return 0\n    else:\n        return int(str(n)[1]) * digits(int(str(n)[1:]))\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n < 10:\n        return 0\n    return sum(int(x) % 2!= 0 for x in str(n))\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert n > 0, 'Input must be positive.'\n    assert n < 1000000, 'Input too large. Limit is 10^6.'\n    \n    sum = 0\n    n = str(n)\n    for i in range(len(n)):\n        if int(n[i]) % 2!= 0:\n            sum += int(n[i])\n    return sum\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n, product = int(n), 1\n    while n:\n        product *= n % 10\n        n //= 10\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum(int(x) for x in str(n) if int(x)%2)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return digits(n // 10)\n    else:\n        return n % 10 * digits(n // 10)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    '''\n    '''\n    def brackets(string):\n        string = string.replace(' ','')\n        start = 0\n        #iterate over the string\n        for i in range(len(string)):\n            if string[i] == '[':\n                start = i+1\n                #search for ending brackets\n                if string[start] == ']':\n                    string = string[:start] + string[start:].replace(']','') + '['\n                    break\n            if string[i] == '(':\n                start = i+1\n                if string[start] == ')':\n                    string = string[:start] + string[start:].replace(')','') + '('\n                    break\n        return string\n    \n    return len(brackets(string)) > 0\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if (string == None):\n        return False\n    else:\n        index = 0\n        if (string.find('[') == -1):\n            return False\n        if (string.find(']') == -1):\n            return False\n        while (index < len(string)):\n            if (string[index] == '['):\n                if (string[index+1] == '['):\n                    if (string[index+2] == '['):\n                        return False\n                    else:\n                        index += 3\n                else:\n                    return False\n            else:\n                index += 1\n        return True\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Brackets\n    if string == '':\n        return True\n    if string[0] == ']':\n        return False\n    # Recursive call\n    if is_nested(string[1:]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    bracket_list = []\n    for char in string:\n        if char == ']':\n            bracket_list.append(char)\n        if len(bracket_list) == 0:\n            bracket_list.append(char)\n        if char == '[':\n            bracket_list.append(char)\n        if char == ']':\n            bracket_list.pop()\n    if len(bracket_list) == 0:\n        return False\n    return True\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #code\n    \n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # #1\n    # m = 0\n    # for i in string:\n    #     if i == '[':\n    #         m += 1\n    #     elif i == ']':\n    #         m -= 1\n    #         if m < 0:\n    #             return False\n    #     if m < 0:\n    #         return False\n    # return m == 0\n    # 2\n    s = string\n    return s.startswith('[' and s.endswith(']')) or s.startswith(']') and s.endswith('[')\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(string) == 0:\n        return True\n    stack = []\n    for char in string:\n        if char == '[' or char == '{' or char == '(':\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                if char == ']' and stack[-1] == '[':\n                    stack.pop()\n                elif char == ']' and stack[-1] == '{':\n                    stack.pop()\n                elif char == ']' and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n    return len(stack) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    parens = []\n    for char in string:\n        if char == '[':\n            parens.append(char)\n        elif char == ']':\n            if parens:\n                parens.pop()\n            else:\n                return False\n    if parens:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    string_list = list(string)\n    bracket_dict = {'{':'}', '(':')', '[':']'}\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    str = string\n    str = str.replace('[]','(')\n    str = str.replace('[)',' ')\n    str = str.replace('()',' ')\n    #print(str)\n    if str.find(']') == -1:\n        return False\n    if str.count('(') == str.count(')'):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    return sum([x**2 for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #write your code here\n    return sum([x**2 for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    new_list = []\n    for num in lst:\n        num_sq = num ** 2\n        num_sq = int(num_sq)\n        new_list.append(num_sq)\n    \n    return sum(new_list)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst = [round(i,2) for i in lst]\n    return sum(i**2 for i in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum_squares = 0\n    for i in lst:\n        sum_squares += i*i\n    return sum_squares\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    if not lst:\n        return 0\n    else:\n        return sum(list(map(lambda x: x*x, lst)))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    pass\n    out = 0\n    for i in lst:\n        out = out + (i * i)\n    return out\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(x*x for x in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lst = list(map(int,lst))\n    lst.sort(reverse=True)\n    i = 0\n    while i<len(lst):\n        if lst[i] == 0:\n            lst.pop(i)\n            continue\n        lst[i] = (lst[i]**2)\n        i += 1\n    result = 0\n    for i in range(len(lst)):\n        result += lst[i]\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # lst = [1,2,3]\n    # lst = [1,4,9]\n    # lst = [1,3,5,7]\n    # lst = [1.4,4.2,0]\n    # lst = [-2.4,1,1]\n    lst = lst[:]\n    i = 0\n    while(i < len(lst)):\n        lst[i] = round(lst[i] * lst[i],2)\n        i += 1\n    return sum(lst)\n    \nsum_squares([1, 2, 3])\nsum_squares([1, 4, 9])\nsum_squares([1, 3, 5, 7])\nsum_squares([1.4, 4.2, 0])\nsum_squares([-2.4, 1, 1]"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return txt[-1].isalpha() and txt[-1] not in string.ascii_letters\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return bool(isalpha(txt) and txt.replace(\" \", \"\").lower()[-1]!= \" \")\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(txt) == 0:\n        return False\n    else:\n        if txt[-1].isalpha():\n            if txt[-1] not in string.punctuation:\n                return True\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return not (txt[-1].isdigit() or txt[-1].isalpha())\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    txt = txt.lower()\n    if txt == \"\":\n        return False\n    return is_letter(txt[-1])\n    "
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # your code here\n    if txt:\n        if txt[-1].isalpha():\n            if len(txt)!= 1:\n                if txt.split(\" \")[-1].isalpha():\n                    return False\n                else:\n                    return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if txt == \"\":\n        return False\n    if len(txt) == 1:\n        return False\n    return is_alpha_numeric(txt[-1])\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return(txt[-1].isalpha() and not txt[-1].isalpha() in \"aeiou\")\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return not(txt[-1].isalpha() and not(txt.split(' '))[-1])\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return not (txt and (txt[-1].isalpha() or txt[-1].isnumeric()))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Check if arr is empty\n    if not arr:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    i = 0\n    while i < len(arr) - 1:\n        if arr[i] > arr[i + 1]:\n            break\n        i += 1\n    return i\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def can_arrange_helper(arr, i):\n        if i < 0:\n            return -1\n        if i == len(arr):\n            return -1\n        if arr[i] > arr[i - 1]:\n            return i\n        return can_arrange_helper(arr, i - 1)\n    return can_arrange_helper(arr, len(arr) - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(arr) < 2:\n        return -1\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1\n    \nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED!\\n\")"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Convert list to tuple so that we can use it as an argument in lambda\n    a = tuple(arr)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    arr = list(set(arr))\n    arr.sort()\n    l = len(arr)\n    index = -1\n    for i in range(l):\n        if arr[i] <= arr[i+1]:\n            index = i\n    return index\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return i-1\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    arr.sort()\n    length = len(arr)\n    \n    for i in range(length):\n        if arr[i] <= arr[i-1]:\n            return i\n    return -1\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    lst = list(filter(lambda x: x < 0, lst))\n    lst = list(filter(lambda x: x > 0, lst))\n    return (max(lst), min(lst))\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # return None, None if not lst else (min(lst), max(lst))\n    return None, None if not lst else min(lst), max(lst)"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    min_num = lst[0]\n    max_num = lst[0]\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    negatives = list(filter(lambda x: x < 0, lst))\n    positives = list(filter(lambda x: x >= 0, lst))\n    \n    if len(negatives) == 0:\n        return (None, None)\n    else:\n        return (negatives[-1], positives[0])\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def find_max_min(lst):\n        if not lst:\n            return None, None\n        elif len(lst) == 1:\n            return lst[0], lst[0]\n        else:\n            max_num = lst[0]\n            min_num = lst[0]\n            for i in lst:\n                if i > max_num:\n                    max_num = i\n                if i < min_num:\n                    min_num = i\n            return max_num, min_num\n    return find_max_min(lst)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    else:\n        lst.sort()\n        if lst[0] < 0:\n            return (None, lst[0])\n        else:\n            return (lst[0], lst[-1])\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not lst:\n        return (None, None)\n    else:\n        neg = []\n        pos = []\n        for num in lst:\n            if num > 0:\n                pos.append(num)\n            elif num < 0:\n                neg.append(num)\n            else:\n                pass\n        return (min(neg), max(pos))\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Edge cases\n    if not lst:\n        return (None, None)\n    if not any(lst):\n        return (None, None)\n    \n    # Sort list\n    sorted_list = sorted(lst, reverse=True)\n    \n    # List of tuples of largest and smallest\n    largest_smallest = []\n    \n    # Get largest and smallest\n    largest = sorted_list[0]\n    smallest = sorted_list[-1]\n    \n    # Append them to tuple\n    largest_smallest.append((largest, smallest))\n    \n    # Remove smallest\n    del sorted_list[-1]\n    \n    # Check if there is negative\n    if len(sorted_list) == 0:\n        largest_smallest.append((None, None))\n    \n    # Check if there is positive\n    elif len(sorted_list) == 1:\n        largest_smallest.append((None, None))\n    \n    # Build final tuple\n    final = tuple(largest_smallest)\n    \n    return final\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    a, b = None, None\n    \n    if lst == []:\n        return (None, None)\n    \n    for x in lst:\n        if x < 0:\n            a = x\n        elif x > 0:\n            b = x\n    \n    return (a, b)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    i = 0\n    neg_max = 0\n    pos_min = 0\n    for x in lst:\n        if x < 0:\n            neg_max = x if neg_max < x else neg_max\n        elif x > 0:\n            pos_min = x if x < pos_min else pos_min\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    if isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    if isinstance(a, float) and isinstance(b, int):\n        return float(a)\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\".\", \"\")\n        b = b.replace(\".\", \"\")\n        a = a.replace(\",\", \".\")\n        b = b.replace(\",\", \".\")\n        return float(a) if float(a) > float(b) else float(b)\n    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    try:\n        return a if a>b else b\n    except TypeError:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a_type = type(a)\n    b_type = type(b)\n    if a_type == b_type:\n        return a\n    elif a_type == float:\n        if a > b:\n            return a\n        else:\n            return b\n    elif a_type == int:\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        if a > b:\n            return str(a)\n        else:\n            return str(b)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if type(a) == str and a.find(\",\")!= -1:\n        a = float(a.replace(\",\", \"\"))\n    if type(b) == str and b.find(\",\")!= -1:\n        b = float(b.replace(\",\", \"\"))\n    if type(a) == str:\n        a = float(a)\n    if type(b) == str:\n        b = float(b)\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a >= b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    try:\n        return max(a,b)\n    except:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a>b:\n        return a\n    if b>a:\n        return b\n    if a==b:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    a = str(a)\n    b = str(b)\n    if a == b:\n        return None\n    if float(a) > float(b):\n        return a\n    if float(a) < float(b):\n        return b\n    if a == float(b):\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a if a > b else b\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return is_equal_to_sum_even_rec(n, 0, 0)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n % 2 == 0:\n        return n == 4\n    while n > 4:\n        n -= 2\n    return n == 2\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Test condition 1\n    if (n % 2)!= 0:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return is_equal_to_sum_even_rec(n)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    return True if is_sum_of_two_even_numbers(n) else False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return n % 2 == 0 and n % 4 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n % 2 == 0 and n >= 2 and n <= 9:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return n % 2 == 0 and (n - 4) % 2 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return n % 2 == 0 and n % 4 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return n % 4 == 0 and n % 2 == 0\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(n):\n        count = count + (n-i) * factorial(i)\n    return count\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = 1\n    while n > 0:\n        result *= n\n        n -= 1\n    return result\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    else:\n        return special_factorial(n - 1) * n\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = int(n)\n    if n == 0:\n        return 1\n    return n * special_factorial(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result = result * (i - 1) * n\n        return result\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    sum = 1\n    for i in range(1, n):\n        sum *= i\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = n\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 1\n    elif n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return text.replace(\" \",\"_\").replace(\"  \",\"_\")\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Fix spaces\n    new_text = text.replace(' ', '_')\n    # Check if there are more than two spaces\n    if new_text.count(' ') > 2:\n        new_text = new_text.replace(' ', '-')\n    return new_text\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return text.replace(' ', '_')\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    new_string = []\n    for char in text:\n        if char == \" \":\n            new_string.append(\"_\")\n        else:\n            new_string.append(char)\n    return \"\".join(new_string)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # split text into a list of words\n    words = text.split(\" \")\n    # make a new list to hold all words\n    new_words = []\n    # iterate through each word in the text\n    for word in words:\n        # add the word to the new list, if it is not already there\n        if word not in new_words:\n            new_words.append(word)\n    # iterate through each word in the new list, and add spaces\n    # between each word\n    for i in range(len(new_words)-1):\n        new_words[i] = new_words[i] + \" \"\n    # add the last word to the new list\n    new_words.append(new_words[-1])\n    # join all the words in the new list\n    text = \"_\".join(new_words)\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return text.replace(' ', '_')\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(text) == 0:\n        return text\n    return re.sub(r' +', '_', text)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    fixed = text.replace(\" \", \"_\")\n    for i in range(2):\n        fixed = fixed.replace(\"  \", \" \")\n    return fixed\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # if text == \"\":\n    #     return text\n    # if text[0]!= \" \":\n    #     text = text[0] + \"_\" + text[1:]\n    # if text[-1]!= \" \":\n    #     text = text + \"_\" + text[-1]\n    # if text[0] == \" \":\n    #     text = text[1:]\n    # if text[-1] == \" \":\n    #     text = text[:-1]\n    # i = 0\n    # while i < len(text) - 1:\n    #     if text[i] == \" \" and text[i + 1] == \" \":\n    #         text = text[:i] + \"_\" + text[i + 1:]\n    #     i += 1\n    # return text\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # TODO: your code here\n    pass\n    # -------------------------\n    # DONE\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    try:\n        letter = file_name[0]\n        if letter not in set(string.ascii_letters):\n            return 'No'\n        if len(file_name) <= 3:\n            return 'No'\n        if '.' not in file_name:\n            return 'No'\n        if file_name[-3:] not in set(['txt', 'exe', 'dll']):\n            return 'No'\n        if file_name[0] not in set(string.ascii_letters):\n            return 'No'\n        if file_name[1] not in set(string.ascii_letters):\n            return 'No'\n        if file_name[2] not in set(string.digits):\n            return 'No'\n        if file_name[0] == file_name[1] == file_name[2] == letter:\n            return 'No'\n        return 'Yes'\n    except:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(file_name) > 3:\n        return \"No\"\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n    if file_name[0] not in string.ascii_lowercase and file_name[0] not in string.ascii_uppercase:\n        return \"No\"\n    if file_name[0].islower() and file_name[1].isupper() and file_name[2:].lower() in [\"txt\", \"exe\", \"dll\"]:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(file_name) == 0:\n        return \"No\"\n    file_name = file_name.lower()\n    if len(file_name) > 3 or '.' not in file_name:\n        return \"No\"\n    if file_name[0] not in 'abcdefghijklmnopqrstuvwxyz':\n        return \"No\"\n    if file_name[-1]!= '.':\n        return \"No\"\n    if file_name[:-1]!= \"\":\n        if file_name[:-1][0] not in 'abcdefghijklmnopqrstuvwxyz':\n            return \"No\"\n    if file_name[-1] == \".\":\n        if file_name[-2] == \".\":\n            return \"No\"\n    if file_name[-2:]!= \".\" and file_name[-3:] in ['txt', 'exe', 'dll']:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if len(file_name) == 3:\n        if file_name[0] in string.ascii_letters:\n            if file_name[1] == '.':\n                if file_name[2] in ['txt', 'exe', 'dll']:\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    if '.' in file_name:\n        if '.' in file_name[:file_name.index('.')] and file_name[file_name.index('.')+1:].isdigit():\n            if file_name[file_name.index('.') - 1].isalpha() and file_name[file_name.index('.')+1:].isalpha():\n                for char in file_name[file_name.index('.') - 1:file_name.index('.')+1]:\n                    if char.isalpha() or char.isdigit():\n                        count += 1\n                    else:\n                        return 'No'\n                if count == 2:\n                    return 'Yes'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(file_name) <= 3:\n        return 'No'\n    if file_name[0] not in string.ascii_letters:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if file_name[0] in string.ascii_letters and file_name[-3:] == '.txt':\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    name_string = file_name\n    if len(name_string) > 3:\n        return 'No'\n    if name_string.count('.') == 0:\n        return 'No'\n    if name_string[:1].isalpha() == False:\n        return 'No'\n    if name_string[-3:].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # your code goes here\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(file_name) > 3:\n        if file_name.count('.')!= 1:\n            return 'No'\n        else:\n            if file_name[0].isalpha() and file_name[0].isupper() and len(file_name[1:]) <= 3:\n                if file_name[-3:] in ['txt', 'exe', 'dll']:\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    total = 0\n    for i in lst:\n        if i % 4 == 3:\n            total += i**2\n        elif i % 4 == 0:\n            total += i**3\n    return total\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] * lst[i]\n        elif i % 4 == 0:\n            sum += lst[i] * lst[i] * lst[i]\n        else:\n            pass\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not lst:\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    lst_copy = lst[:]\n    for i in range(len(lst)):\n        if i%3 == 0:\n            lst[i] = lst[i]**2\n        if i%4 == 0 and i%3!= 0:\n            lst[i] = lst[i]**3\n    return sum(lst_copy)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    # Your code here\n    total = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] * lst[i]\n        elif i % 4 == 0:\n            total += lst[i] * lst[i] * lst[i]\n        else:\n            total += lst[i]\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sum = 0\n    for item in lst:\n        if item % 3 == 0:\n            sum += item ** 2\n        elif item % 4 == 0:\n            sum += item ** 3\n        else:\n            continue\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum(i*i if i%3==0 else i*i*i if i%4==0 else i*i for i in lst)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code here\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            continue\n        else:\n            sum += lst[i]**2\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0 or i % 4 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    \n    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i ** 2\n        elif i % 4 == 0:\n            sum += i ** 3\n        else:\n            sum += i\n    return su"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # assert isinstance(sentence, str), \"Input must be a string\"\n    # assert len(sentence) <= 100, \"Input must be within range\"\n    # assert \" \" in sentence, \"Input must contain space\"\n    # assert all(ch in string.ascii_letters for ch in sentence), \"Input must contain letters\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # TODO: Write your code here\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def primes(x):\n        \"\"\"\n        Returns all primes up to the integer x\n        \"\"\"\n        n = 2\n        list_n = []\n        while n <= x:\n            if x % n == 0:\n                list_n.append(n)\n                x = x/n\n            else:\n                n += 1\n        return list_n\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # TODO:\n    return \"pass\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Write your code here\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    words = sentence.split()\n    words = set(words)\n    result = ''\n    for w in words:\n        n = len(w)\n        if is_prime(n):\n            result += w +''\n    return result\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    words_list = sentence.split()\n    return ''.join(words_list)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # TODO: Write your code here\n    return ''.join([word for word in sentence.split() if len(word) == max(word_lengths(sentence))])\n    \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    words = sentence.split()\n    words = sorted(words, key=len)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    words = sentence.split()\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19]\n    res = \"\"\n    for i in range(len(words)):\n        if is_prime(len(words[i])):\n            res += words[i]\n    return res\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # Your code here\n    # print(x)\n    \n    # The following code is the attempt to solve the problem.\n    # print(x)\n    # print(n)\n    \n    if x == \"1\":\n        return True\n    elif x == \"0\":\n        return False\n    elif x[0] == \"0\" and x[1] == \"0\":\n        return False\n    \n    if int(x.split(\"/\")[0]) == 0:\n        return False\n    \n    elif int(n.split(\"/\")[0]) == 0:\n        return False\n    \n    elif int(x.split(\"/\")[1]) == 0:\n        return False\n    \n    elif int(n.split(\"/\")[1]) == 0:\n        return False\n    \n    elif int(x.split(\"/\")[0]) == int(n.split(\"/\")[0]):\n        return True\n    \n    elif int(x.split(\"/\")[1]) == int(n.split(\"/\")[1]):\n        return True\n    \n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    deno = int(n)\n    nume = int(x)\n    \n    if (nume/deno) == int((nume/deno)):\n        return True\n    \n    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    return int(x) // int(n) == float(x) / float(n)\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if x.split(\"/\")[0]==\"0\" or x.split(\"/\")[1]==\"0\":\n        return False\n    if x.split(\"/\")[1]==\"1\":\n        return True\n    x_num = x.split(\"/\")[0]\n    x_den = x.split(\"/\")[1]\n    x_num = int(x_num)\n    x_den = int(x_den)\n    if x_den==1:\n        return x_num==0\n    if x_den==2:\n        return x_num==1\n    if x_num%x_den==0:\n        return True\n    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if x.isalpha() or x == \"0\":\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    try:\n        x = float(x)\n        n = float(n)\n        return float(x*n) == int(x*n)\n    except:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    try:\n        float(x)\n        float(n)\n        x = float(x)\n        n = float(n)\n        if x == float(x) and n == float(n):\n            return True\n        else:\n            return False\n    except Exception:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return str(x).split(\"/\")[0] == str(n).split(\"/\")[0]\n    \n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    import re\n    n,d = re.findall('[0-9]+/[0-9]+',x)[0].split('/')\n    n = int(n)\n    d = int(d)\n    return d == 1 or n == 1\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = n.strip('/')\n    d = int(n.split('/')[0])\n    if d == 0:\n        return False\n    d2 = int(n.split('/')[1])\n    return not (d*x + d2)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(nums)-1):\n        for j in range(len(nums)-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    nums.sort(key=lambda x: (str(x)[::-1], int(x), x), reverse=True)\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # if len(nums) == 0:\n    #     return []\n    # else:\n    #     return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x))))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    d = {}\n    for i in nums:\n        sum_ = 0\n        while i > 0:\n            sum_ += i % 10\n            i = i // 10\n        d[sum_] = d.get(sum_, []) + [i]\n    sorted_nums = []\n    for i in sorted(d.keys()):\n        sorted_nums += d[i]\n    return sorted_nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not nums:\n        return []\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    nums = sorted(nums, key = lambda x: sum(int(i) for i in str(x)))\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    nums.sort()\n    print(nums)\n    order = []\n    for i in range(0, len(nums)):\n        order.append(nums[i])\n    \n    return order\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n    return nums\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. WOWZA!\\n\")"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    oddcount = 0\n    for x in nums:\n        if x < 10 or x > 10:\n            if x % 2!= 0:\n                oddcount += 1\n    return oddcount\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(nums) == 0:\n        return 0\n    nums_odd = 0\n    for num in nums:\n        if num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9:\n            nums_odd += 1\n    return nums_odd\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    counter = 0\n    for num in nums:\n        if num > 10 and num % 2!= 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    cnt = 0\n    for num in nums:\n        if (num > 10 and num % 2!= 0) and num >= 100:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    odd_count = 0\n    for num in nums:\n        if num > 10 and num % 2!= 0 and num // 10 % 2!= 0:\n            odd_count += 1\n    return odd_count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for x in nums:\n        if x > 10 and not x%2:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 2!= 0 and num // 10 % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len([i for i in nums if 10 < i < 100 and i % 2!= 0 and i % 10 == 1])\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in nums:\n        if (i >= 10 and not i % 2):\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for num in nums:\n        if (num > 10 and num % 2!= 0) and (num < 100 and num % 2!= 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # count = 0\n    # for i in range(1, n):\n    #     for j in range(i, n):\n    #         if i < j < n and (i * i - i + 1) % 3 == 0:\n    #             for k in range(j, n):\n    #                 if i < k < n and (j * j - j + 1) % 3 == 0:\n    #                     count += 1\n    # return count\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    a = []\n    for i in range(1,n+1):\n        for j in range(i+1, n+1):\n            k = n - i - j\n            if i < j < k and (i * i - i + 1) % 3 == 0 and (j * j - j + 1) % 3 == 0 and (k * k - k + 1) % 3 == 0:\n                a.append((i, j, k))\n    return len(a)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if n == 1:\n        return 1\n    else:\n        return (n * (n-1)) / 3\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    for i in range(1, n):\n        if i * (i + 1) / 2 % 3 == 1:\n            return 1\n    return 0\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 0\n    \n    a = [0] * n\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    a = [1, 3, 7, 13, 21]\n    # a = []\n    # for i in range(1, n):\n    #     if i * i - i + 1 < n and i * i - i + 1 in a:\n    #         a.append(i * i - i + 1)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # No solutions\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # return 1\n    a = set()\n    \n    for i in range(1, n+1):\n        for j in range(1, i):\n            for k in range(1, n+1):\n                if i*i - j + k == 3:\n                    a.add((i, j, k))\n    return len(a)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    a = [0] * n\n    \n    # use of dictionary\n    d = {}\n    for i in range(n):\n        for j in range(i, n):\n            if (i * i + j * j) % 3 == 0:\n                if i in d:\n                    d[i] += 1\n                else:\n                    d[i] = 1\n            if (i * i + j * j) % 3 == 1:\n                if i in d:\n                    d[i] += 1\n                else:\n                    d[i] = 1\n            if (i * i + j * j) % 3 == 2:\n                if i in d:\n                    d[i] += 1\n                else:\n                    d[i] = 1\n    \n    # Use of Bit mask\n    nums = 1\n    for i in range(n):\n        nums = nums << i\n    \n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (i & nums) == (j & nums) and (i + j) % 3 == 1:\n                count += 1\n            if (i & nums) == (j & nums) and (i + j) % 3 == 2:\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #sorted planet list\n    list = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    #difference between two planets\n    dif = abs(list.index(planet1)-list.index(planet2))\n    #difference between planet1 and sun\n    dif1 = list.index(planet1)-list.index('Sun')\n    #difference between planet2 and sun\n    dif2 = list.index(planet2)-list.index('Sun')\n    #dist between planets\n    dist = ((dif**2)+(dif1**2)+(dif2**2))**0.5\n    #difference between planet1 and planet2\n    diff = list.index(planet1)-list.index(planet2)\n    #difference between planet2 and planet1\n    diff1 = list.index(planet2)-list.index(planet1)\n    #reverse the order if the difference is bigger than zero\n    if diff<0:\n        diff = diff * -1\n    if diff1<0:\n        diff1 = diff1 * -1\n    #if the planet1 is less than the planet2, it is in a bigger list than planet2\n    if diff>0 and diff1>0:\n        if dist>0:\n            return (list[diff-1], list[diff1+1])\n        else:\n            return (list[diff1+1], list[diff-1])\n    #if the planet1 is bigger than the planet2, it is in a bigger list than planet1\n    if diff<0 and diff1<0:\n        if dist>0:\n            return (list[diff1+1], list[diff])\n        else:\n            return (list[diff+1], list[diff1])\n    #if the planet1 is equal to the planet2, it is in the same list as planet1\n    if diff == 0 and diff1 == 0:\n        if dist>0:\n            return (list[diff1+1])\n        else:\n            return (list[diff+1])\n    #if the planet1 is bigger, it is in a bigger list than the planet2\n    if diff>0 and diff1==0:\n        if dist>0:\n            return (list[diff])\n        else:\n            return (list[diff+1])\n    #if the planet1 is smaller, it is in a bigger list than the planet2\n    if diff<0 and diff1>0:\n        if dist>0:\n            return (list[diff1])\n        else:\n            return (list[diff+1])\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    planets = get_planets()\n    distances = {}\n    result = []\n    for planet in planets:\n        distances[planet] = distance(planet1, planet2)\n    distances = sorted(distances.items(), key=lambda x: x[1])\n    for planet in distances:\n        if planet[1] > 0:\n            result.append(planet[0])\n    return tuple(result)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if planet1 == \"Earth\" or planet2 == \"Earth\":\n        return tuple()\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    if planet1 == planet2:\n        return tuple()\n    if planets.index(planet1) < planets.index(planet2):\n        return (planet1, planet2)\n    else:\n        return (planet2, planet1)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    planets = planets_names()\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    planets = {\"Jupiter\" : \"Saturn\", \"Earth\" : \"Venus\", \"Mars\" : \"Earth\", \"Venus\" : \"Mars\",\n            \"Mercury\" : \"Venus\", \"Saturn\" : \"Mercury\", \"Uranus\" : \"Venus\", \"Neptune\" : \"Venus\",\n            \"Venus\" : \"Mercury\", \"Earth\" : \"Mars\", \"Mars\" : \"Earth\", \"Jupiter\" : \"Uranus\",\n            \"Saturn\" : \"Jupiter\", \"Uranus\" : \"Saturn\", \"Neptune\" : \"Jupiter\", \"Mercury\" : \"Earth\"}\n    list_of_paths = []\n    if (planet1 in planets) and (planet2 in planets):\n        for orbit in planets:\n            if planet1 == planets[orbit]:\n                for orbit2 in planets:\n                    if planet2 == planets[orbit2]:\n                        list_of_paths.append([orbit, orbit2])\n        return tuple(sorted(list_of_paths))\n    else:\n        return tuple([])\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    planet_dict = {\"Mercury\" : \"Venus\", \n                  \"Venus\" : \"Earth\", \n                  \"Earth\" : \"Mars\", \n                  \"Mars\" : \"Jupiter\", \n                  \"Jupiter\" : \"Saturn\", \n                  \"Saturn\" : \"Uranus\", \n                  \"Uranus\" : \"Neptune\"}\n    return tuple(sorted(planet_dict.keys()))\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    planets = [\"Sun\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    pl1 = planets.copy()\n    pl2 = planets.copy()\n    \n    pl1.remove(planet1)\n    pl2.remove(planet2)\n    \n    return tuple(sorted(pl1 + pl2))\n    \n    "
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if planet1 == \"Mercury\" or planet1 == \"venus\":\n        if planet2 == \"Mercury\" or planet2 == \"venus\":\n            return (planet1, planet2)\n        else:\n            return (planet2, planet1)\n    else:\n        if planet2 == \"Mercury\" or planet2 == \"venus\":\n            return (planet2, planet1)\n        else:\n            return (planet1, planet2)\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not lst:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        new_lst = []\n        for word in lst:\n            if len(word) == 1:\n                new_lst.append(word)\n            else:\n                new_lst.append(word)\n                for index, letter in enumerate(word):\n                    if index == 0 or index == len(word) - 1:\n                        continue\n                    else:\n                        if letter == word[index - 1] or letter == word[index + 1]:\n                            new_lst.pop()\n        return sorted_list_sum(new_lst)\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(lst, key=len)\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    lst.sort(key=len)\n    res = []\n    for i in lst:\n        if len(i) == 1:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(lst, key=lambda x: len(x))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(lst, key=lambda x: len(x))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    new_lst = lst\n    \n    new_lst = remove_odd(new_lst)\n    new_lst = sort_by_len(new_lst)\n    return new_lst\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    lst = filter_odd_lengths(lst)\n    return sorted(lst, key=lambda x: len(x))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    lst = lst[:len(lst)//2]\n    lst = sorted(lst, key=len)\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # return sorted(lst)\n    lst.sort()\n    return sorted(lst, key=len)\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    new_list = []\n    for i in lst:\n        if len(i) == 1:\n            new_list.append(i)\n    for j in range(len(new_list)):\n        for i in range(len(new_list)):\n            if len(new_list[j]) < len(new_list[i]):\n                temp_lst = new_list.copy()\n                new_list = temp_lst\n                temp_lst = new_list[j]\n                new_list[j] = new_list[i]\n                new_list[i] = temp_lst\n    return new_list\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n % x == 0:\n        return x\n    elif n % y == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n % x == 0:\n        return x\n    else:\n        return y\n        \n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n % x == 0:\n        return x\n    else:\n        return y\n    \ndef is_prime(n):\n    \"\"\"A program which should determine whether the number n is\n    a prime number.\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n % x == 0 or n % y == 0:\n        return x\n    return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    elif n > 2:\n        if is_prime(n):\n            return x\n        else:\n            return y\n    else:\n        return 'No prime number!'\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x if n in primes_up_to(n) else y\n    # return x if n in primes_up_to(n) else y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return x\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1:\n        return x\n    if n == 2:\n        return y\n    if n % 2 == 0:\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n % x!= 0 and n % y!= 0:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # The simplest approach would be to iterate over the list\n    # and return the sum of squares of the odd numbers\n    # We can find the sum of squares of the odd numbers using math.pow\n    # We can quickly do this using the built-in sum function\n    # We can then sum each even number and subtract each odd number\n    # We then add each odd to the total\n    # We then return the total\n    total = 0\n    for number in lst:\n        # if it's not an even number\n        if not number % 2:\n            # add its square to the total\n            total += math.pow(number, 2)\n    return total\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    even = 0\n    odd = 0\n    for num in lst:\n        if num % 2 == 0:\n            even += num * num\n        else:\n            odd += num * num\n    return even + odd\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    odd_nums = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return sum(map(lambda x: x ** 2, odd_nums))\n    \nprint(double_the_difference([0,1,2,3])) # 0\nprint(double_the_difference([0,-1,2,3])) # 0\nprint(double_the_difference([0,-2])) # 0\nprint(double_the_difference([1,3,2,0])) # 1 + 9 + 0 + 0 = 10\nprint(double_the_difference([-1,-2,0])) # 0\nprint(double_the_difference([9, -2])) # 81\nprint(double_the_difference([0])) # 0 \nprint(double_the_difference([])) # 0\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return 0\n    sum = 0\n    for num in lst:\n        if num % 2 == 1:\n            sum += num * num\n    return sum\n    \n    "
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    total = 0\n    for i in lst:\n        if i % 2 == 1:\n            total += i ** 2\n    return total\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # if lst == []:\n    #     return 0\n    \n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 1:\n            odd_sum += num**2\n    return odd_sum\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return 0\n    result = 0\n    for i in lst:\n        if i % 2!= 0:\n            result += i**2\n    return result\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    odds = []\n    for num in lst:\n        if num % 2 == 1:\n            odds.append(num ** 2)\n    return sum(odds)\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in lst:\n        if i == 0 or i%1 == 0:\n            continue\n        else:\n            count += i*i\n    return count\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = 0\n    for num in lst:\n        if type(num)!= int:\n            continue\n        if num < 0:\n            continue\n        s += (num*num)\n    return s\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # for each of the guess, we need to check it with the corresponding guess in the score\n    # check if they are right\n    # if they are right, then we can check the distance from the guess to the score\n    # if they are wrong, then we can check their distance from the guess to the score\n    # in the end, we need to put the absolute distance\n    # first, check if the guess is correct\n    if guess == game[-1]:\n        return len(guess)*[0]\n    else:\n        # check the distance from the guess to the score\n        # if the guess is not correct, then we need to calculate the distance from the guess to the score\n        # from the score to the guess\n        \n        distance = []\n        for i in range(len(guess)):\n            # calculate the distance from the guess to the score\n            if guess[i]!= game[i]:\n                distance.append(abs(game[i] - guess[i]))\n            else:\n                distance.append(0)\n        return distanc"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    ans=[]\n    for i in range(len(guess)):\n        if guess[i]==game[i]:\n            ans.append(0)\n        else:\n            ans.append(abs(guess[i]-game[i]))\n    return ans\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(len(guess)):\n        if guess[i]==game[i]:\n            guess[i]=0\n        else:\n            guess[i]=abs(guess[i]-game[i])\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #return score[a] - guess[a]\n    score = game\n    guess = guess\n    return [score[i] - guess[i] for i in range(len(guess))]\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    out_ = []\n    for i,(a,b) in enumerate(zip(guess,game)):\n        if a == b:\n            out_.append(0)\n        else:\n            out_.append(abs(a-b))\n    return out_\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if game[0] == guess[0]:\n        return [0]*len(guess)\n    else:\n        return [(abs(game[i]-guess[i]) - 1) for i in range(len(guess))]\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    match = 0\n    miss = 0\n    diff = []\n    if len(guess)!= len(game):\n        return 0\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            match += 1\n        else:\n            miss += 1\n    for i in range(len(game)):\n        diff.append(abs(game[i] - guess[i]))\n    return diff\n    #put your code here\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    guesses = []\n    scores = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            guesses.append(0)\n            scores.append(0)\n        else:\n            guesses.append(abs(guess[i] - game[i]))\n            scores.append(abs(guess[i] - game[i]))\n    return guesses\n    \n    \ndef apply_modifiers(score, modifiers):\n    \"\"\"\n    Given a score and a list of modifications, return the final score.\n    \n    \n    example:\n    \n    apply_modifiers(20, [3,5]) -> 27\n    apply_modifiers(20, [4,5]) -> 39\n    \"\"\"\n    \n    for i in range(len(modifiers)):\n        score *= modifiers[i]\n    return score\n    \n    \ndef factorial(n):\n    \"\"\"\n    Return the factorial of the given positive number.\n    \n    \n    example:\n    \n    factorial(4) -> 24\n    factorial(5) -> 120\n    factorial(6) -> 720\n    \"\"\"\n    \n    # get the log of n \n    # from the log of the log of n\n    \n    if n <= 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return 0\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    extensions_dict = {}\n    for e in extensions:\n        extensions_dict[e] = -1\n    for e in extensions:\n        if extensions_dict[e] == -1:\n            extensions_dict[e] = len(e)\n    strongest_extension = class_name\n    strength = -1\n    for e in extensions:\n        if extensions_dict[e] > strength:\n            strongest_extension = e\n            strength = extensions_dict[e]\n    return strongest_extension\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    # Put your code here\n    dic = {}\n    for i in extensions:\n        if i[0].islower() == False:\n            dic[i[0].upper()] = 0\n        else:\n            dic[i[0].lower()] = 0\n    max_k = max(dic, key=lambda x: dic[x])\n    max_v = dic[max_k]\n    for i in extensions:\n        if i[0].islower() == False:\n            if i.upper() == max_k:\n                if dic[i.upper()] < max_v:\n                    max_v = dic[i.upper()]\n                    max_k = i.upper()\n            else:\n                continue\n        else:\n            if i.lower() == max_k:\n                if dic[i.lower()] < max_v:\n                    max_v = dic[i.lower()]\n                    max_k = i.lower()\n            else:\n                continue\n    return max_k+\".\"+max_k.capitalize()\n    "
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # if class_name in extensions:\n    #     return class_name+'.'+class_name\n    # else:\n    #     count_cap = 0\n    #     count_low = 0\n    #     for extension in extensions:\n    #         if 'A' in extension:\n    #             count_cap += 1\n    #         else:\n    #             count_low += 1\n    #     return '{}.{}'.format(class_name, class_name)\n    return '{}.{}'.format(class_name, max(extensions, key=lambda x: (x.count('A'), -x.count('A'))))\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return '.'.join([class_name] + sorted(extensions, key=lambda x: (-len(x), x)))\n    \nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['cheese', 'SErviNGSliCes', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['Cheese', 'SErviNGSliCes', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese']))\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Cheese', 'SErviNGSliCes', 'StuFfed', 'Cheese'])"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    extensions = list(extensions)\n    extensions.sort(key=len)\n    strength = 0\n    for extension in extensions:\n        extension = extension.lower()\n        extension = extension.title()\n        strength += len(extension) - len(extension.replace(' ',''))\n    if class_name == extensions[0]:\n        return class_name\n    else:\n        return extensions[0] + '.' + class_name\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    name_ext_dict = {}\n    for ext in extensions:\n        ext_name = ext.split('.')[0]\n        if ext_name in name_ext_dict:\n            name_ext_dict[ext_name] += 1\n        else:\n            name_ext_dict[ext_name] = 1\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # YOUR CODE GOES HERE\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Hint: you can use the len function to figure out how many lower or \n    # upper case letters you need to add to the class name\n    \n    \n    class_name = class_name.upper() + \".\" + class_name.lower() + \".\" + class_name.capitalize()\n    \n    for extension in extensions:\n        extension = extension.upper() + \".\" + extension.lower() + \".\" + extension.capitalize()\n        if len(extension) - len(class_name) > len(class_name):\n            class_name = extension\n    return class_name\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    # code goes here\n    strength = 0\n    for e in extensions:\n        if e[0].isupper() == True:\n            strength += 1\n        else:\n            strength += e[0].upper()\n    strength = strength - len(extensions)\n    extension = class_name\n    for e in extensions:\n        e = e.lower()\n        extension += '.' + e\n    return extension\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    ans=[]\n    for i in range(1,len(b)+1):\n        if b in a:\n            if b in a[:i] or b in a[-i:] or b==a[i:i+len(b)] or b==a[-i:]:\n                ans.append(True)\n            else:\n                ans.append(False)\n        else:\n            ans.append(False)\n    return ans[0] and ans[1] and ans[2]\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    b = b[1:] + b[:1]\n    return a in b"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    #return a in b or a[::-1] in b\n    return a in b or b in a or b[::-1] in a\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #if not isinstance(a,str) or not isinstance(b,str):\n    #    raise ValueError(\"Input must be a string\")\n    #if a=='' or b=='':\n    #    raise ValueError(\"Input must be a string\")\n    return a in b or (a+a)[1:] == b or (a+a)[:-1] == b"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    rotations = [\"\",a[1:]+a[0],a[:-1]+a[0],a[1:]+a[-1]]\n    for word in rotations:\n        if word in b:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(1, len(b) + 1):\n        if b in a[-i:] or b in a[:i]:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if (a in b or b in a):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    a = a.lower()\n    b = b.lower()\n    l = len(a)\n    for i in range(l):\n        temp = a[i:i+l]\n        if temp == b:\n            return True\n        if temp in b:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #i=j\n    #n=m\n    for i in range(len(a)+1):\n        for j in range(len(b)+1):\n            if i==0 or j==0:\n                continue\n            if a[i-1]==b[j-1]:\n                continue\n            else:\n                if a[i-1]!=a[len(a)-(i+1)] and b[j-1]!=b[len(b)-(j+1)]:\n                    return False\n    return True\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Determines if a is a substring of b\n    if len(a) <= len(b):\n        # Loop through all possible rotations of b\n        for i in range(len(b) - len(a) + 1):\n            if b[i:i+len(a)] == a:\n                return True\n    else:\n        # Loop through all possible rotations of a\n        for i in range(len(a) - len(b) + 1):\n            if a[i:i+len(b)] == b:\n                return True\n    return False\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    even = 0\n    odd = 0\n    while num:\n        num, rem = divmod(num, 10)\n        if rem % 2:\n            odd += 1\n        else:\n            even += 1\n    return even, odd\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if isinstance(num, (int, float)):\n        return_tuple = (0, 0)\n        if num > 0:\n            return_tuple = (int(num), 0)\n        else:\n            return_tuple = (0, int(num))\n        return return_tuple\n    else:\n        raise TypeError(\"Input must be integer\")\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return tuple(map(len, (c.isdigit() and int(c) % 2 == 0 for c in str(abs(num)))))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        num //= 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (len([x for x in str(num) if x % 2 == 0]), len([x for x in str(num) if x % 2!= 0]))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (num%10%2, num%10//2)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count_even = 0\n    count_odd = 0\n    num_str = str(num)\n    for i in num_str:\n        if int(i) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (sum([1 for i in str(num) if i in '02468']), sum([1 for i in str(num) if i in '13579']))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    evens, odds = 0, 0\n    while num:\n        if num % 10 % 2:\n            odds += 1\n        else:\n            evens += 1\n        num //= 10\n    return evens, odds\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (even_count(num), odd_count(num))\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    roman_num_dict = {1: 'i',\n                       2: 'ii',\n                       3: 'iii',\n                       4: 'iv',\n                       5: 'v',\n                       6: 'vi',\n                       7: 'vii',\n                       8: 'viii',\n                       9: 'ix',\n                       10: 'x',\n                       11: 'xi',\n                       12: 'xii',\n                       13: 'xiii',\n                       14: 'xiv',\n                       15: 'xv',\n                       16: 'xvi',\n                       17: 'xvii',\n                       18: 'xviii',\n                       19: 'xix'}\n    if number == 0:\n        return ''\n    number_list = list(number)\n    roman_num_list = []\n    i = 0\n    while i < len(number_list):\n        if number_list[i] > 2:\n            roman_num_list.append(roman_num_dict[1])\n            for j in range(1, number_list[i] - 1):\n                roman_num_list.append(roman_num_dict[1])\n        else:\n            roman_num_list.append(roman_num_dict[number_list[i]])\n        i += 1\n    return ''.join(roman_num_list)\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    int_to_roman_dict = {1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v',\n                         6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix', 10: 'x',\n                         11: 'xi', 12: 'xii', 13: 'xiii', 14: 'xiv', 15: 'xv',\n                         16: 'xvi', 17: 'xvii', 18: 'xviii', 19: 'xix'}\n    roman = ''\n    while number > 0:\n        roman += int_to_roman_dict[number % 10]\n        number = number // 10\n    return roman\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if not (1 <= number <= 1000):\n        raise ValueError('Invalid input.')\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return roman_to_int(int_to_roman(number))\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # I - > I\n    roman_vals = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n    for key in roman_vals:\n        if number == key:\n            return roman_vals[key]\n    raise ValueError('Out of range, must be between 1 and 1000')\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    roman_numeral_list = ['x', 'l', 'i', 'v']\n    int_to_roman_map = {1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M'}\n    int_to_roman = list(int_to_roman_map.keys())\n    roman_to_int = dict(zip(roman_numeral_list, int_to_roman))\n    roman_to_int_reverse = {value: key for key, value in roman_to_int.items()}\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    roman_num = \"\"\n    if number == 0:\n        return roman_num\n    roman_nums = {\n        1: \"i\",\n        2: \"ii\",\n        3: \"iii\",\n        4: \"iv\",\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\",\n        8: \"viii\",\n        9: \"ix\",\n        10: \"x\",\n        11: \"xi\",\n        12: \"xii\",\n        13: \"xiii\",\n        14: \"xiv\",\n        15: \"xv\",\n        16: \"xvi\",\n        17: \"xvii\",\n        18: \"xviii\",\n        19: \"xix\",\n        20: \"xx\",\n        30: \"xxx\",\n        40: \"xxxx\",\n        50: \"l\",\n        60: \"lx\",\n        70: \"lxx\",\n        80: \"lxxx\",\n        90: \"xc\",\n        100: \"xcx\",\n        200: \"cc\",\n        300: \"ccc\",\n        400: \"cd\",\n        500: \"d\",\n        600: \"dc\",\n        700: \"dcc\",\n        800: \"dccc\",\n        900: \"dxx\",\n        1000: \"m\"\n    }\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if number == 0:\n        return \" \"\n    elif number < 10:\n        return roman_values[number]\n    else:\n        val = int_to_mini_roman(number // 10)\n        return roman_values[number % 10] + val\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    nums = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L',\n            90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    symbols = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L',\n            90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    roman_nums = []\n    while number:\n        roman_nums.append(symbols[number%10])\n        number = int(number/10)\n    return ''.join(roman_nums)[::-1]\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # the first line checks if the number is larger than 1000 or not\n    if number > 1000 or number == 0:\n        return \"not valid\"\n    # the second line checks if the number is negative\n    elif number < 0:\n        number = number * -1\n    # the third line defines the dictionary\n    roman = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII',\n             8: 'VIII', 9: 'IX', 10: 'X', 20: 'XX', 30: 'XXX', 40: 'XL',\n             50: 'L', 60: 'LX', 70: 'LXX', 80: 'LXXX', 90: 'XC', 100: 'C',\n             200: 'CC', 300: 'CCC', 400: 'CD', 500: 'D', 600: 'DC',\n             700: 'DCC', 800: 'DCCC', 900: 'CM', 1000: 'M'}\n    # the fourth line defines the values of the dictionary\n    roman_value = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    # the fifth line defines the numeral\n    numeral = []\n    # the sixth line calls the function to print out the numeral\n    for i in range(len(roman)):\n        if number >= roman_value[i]:\n            numeral.append(roman[i])\n            number = number - roman_value[i]\n    # returns the string\n    return ''.join(numeral)\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if a ** 2 + b ** 2 == c ** 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or c**2 + b**2 == a**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # check the length of sides are all different\n    if a == b or b == c or c == a:\n        return False\n    # check the length of sides are all the same\n    if a == b == c:\n        return True\n    # check the length of sides are not equal\n    if a!= b!= c:\n        return True\n    # check if the sum of sides is the length of the perimeter\n    if abs(a + b + c - s(a, b, c)) <= 1e-10:\n        return True\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if abs(a * b - c * c) < epsilon:\n        return True\n    if abs(a * b - c * c) < epsilon:\n        return True\n    if abs(a * b - c * c) < epsilon:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if (a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (a**2 + c**2 == b**2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert type(a) == int, 'the value of \"a\" must be an integer.'\n    assert type(b) == int, 'the value of \"b\" must be an integer.'\n    assert type(c) == int, 'the value of \"c\" must be an integer.'\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    return False\n    "
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    else:\n        if abs(a*a - b*b) <= 1 and abs(a*a - c*c) <= 1 and abs(b*b - c*c) <= 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if (a**2 + b**2) == (c**2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    words = sorted(words)\n    for word in words:\n        if len(word) == len(set(word)):\n            return word\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    max = 0\n    max_word = ''\n    for word in words:\n        count = len(set(word))\n        if count > max:\n            max_word = word\n            max = count\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    max_char_set = set()\n    for char_set in words:\n        char_set = set(char_set)\n        max_char_set = char_set if len(char_set) >= len(max_char_set) else max_char_set\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return words[0] if len(words) == 1 else sorted(words, key=len)[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    words.sort()\n    n = len(words)\n    d = {}\n    for word in words:\n        d[word] = len(word)\n    return sorted(d, key=d.get)[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    max_char = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char in max_char:\n                count += 1\n        if count < len(word):\n            max_char = word\n    return max_char\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    max_word = \"\"\n    for word in words:\n        if len(set(word)) >= len(max_word) and word!= max_word:\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    max_word = ''\n    max_num = 0\n    for word in words:\n        if len(word) > max_num:\n            max_word = word\n            max_num = len(word)\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    max = 0\n    word = \"\"\n    \n    for word in words:\n        if len(word) > max:\n            max = len(word)\n            word = word\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    lst = []\n    for word in words:\n        lst.append(len(word))\n    return words[lst.index(max(lst))]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    total = number - need\n    remaining = remaining - need\n    if total == 0:\n        return [0, remaining]\n    elif total > 0:\n        return [total, remaining]\n    elif total < 0:\n        if remaining >= abs(total):\n            return [0, remaining - abs(total)]\n        else:\n            return [total, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if remaining < need:\n        return ([number + remaining, remaining - need])\n    if remaining > need:\n        return ([number + need, remaining - need])\n    return ([number + need, remaining - need])\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if number > remaining:\n        number = remaining\n    return[number + need, remaining - need]\n    \ndef complete(meals, need):\n    \"\"\"\n    You are a chef, and you have some food available to give.\n    You have to give meal after meal which comes.\n    To complete the meal you need to have all of the food of that meal.\n    You need to have an integer representing the meal which comes (meals[0]) and how many carbs you need to have.\n    \n    Example:\n    * complete([['meals',1], ['meals', 2]], 1) -> 0\n    * complete([['meals',1], ['meals', 2]], 2) -> 1\n    * complete([['meals',1], ['meals', 2]], 3) -> 2\n    \n    Variables:\n    @meals : list\n        the meal and the number of carbs\n        meals[0] = ['meals', 1]\n        meals[1] = ['meals', 2]\n    @need : integer\n        the number of carbs needed to complete the meal\n    \n    Constrain:\n    * 0 <= meals[0] <= 1000\n    * 0 <= meals[1] <= 1000\n    * 0 <= need <= 1000\n    \n    Have fun :)\n    \"\"\"\n    for meal in meals:\n        if meal[0] =='meals' and meal[1] > need:\n            return len(meals) - 1\n    return len(meals)\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # your code here\n    if need > remaining:\n        return [0, remaining]\n    if number == need:\n        return [need, remaining]\n    if need > remaining:\n        return [number, remaining]\n    return[number + eat(need, need, remaining - need), remaining - need]\n    \n    "
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # TODO: write your code here\n    n = number + remaining\n    left = need\n    eaten = 0\n    while n > 0:\n        if left > n:\n            left = n\n        n -= left\n        eaten += 1\n        remaining -= left\n        left = need - eaten\n    return [eaten, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # There are only 1 way to eat:\n    # 1) eat 1 carrot\n    # 2) eat your meal's size (needs)\n    # 3) eat the remaining carrots in stock\n    if need <= remaining:\n        return[number + 1, need - 1]\n    if number + need <= remaining:\n        return[number + need, remaining - need]\n    return[number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if number == 0:\n        return [need, remaining]\n    elif number < 0:\n        return [0, 0]\n    elif need > remaining:\n        return eat(number - 1, need, remaining)\n    else:\n        return eat(number - 1, need, remaining - need)\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Write your code here\n    if remaining == 0:\n        return [number, 0]\n    if need <= number:\n        return [number + need, 0]\n    if need > number:\n        return [number + need - number, need - number]\n    if need < number:\n        return [number, need]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #    while not enough left in stock, eat more.\n    while need >= remaining:\n        number += 1\n        remaining -= 1\n        need -= 1\n    #    eat remaining carrots in stock\n    while number < need:\n        number += 1\n    return [number, remaining]\n    \n    \ndef eat_add_meal(number, meal, meal_left):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat_add_meal(5, 6, 10) -> [11, 4]\n    * eat_add_meal(4, 8, 9) -> [12, 1]\n    * eat_add_meal(1, 10, 10) -> [11, 0]\n    * eat_add_meal(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @meal : integer\n        the number of carrots that you need to eat.\n    @meal_left : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= meal <= 1000\n    * 0 <= meal_left <= 1000\n    \n    Have fun :)\n    \"\"\"\n    #    while not enough left in stock, eat more.\n    while meal_left >= meal:\n        number += 1\n        meal_left -= meal\n    #    eat remaining carrots in stock\n    while number < meal:\n        number += 1\n    return [number, meal_left]\n    \n    \ndef eat_two(number, meal, meal_left):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat_two(5, 6, 10) -> [11, 4]\n    * eat_two(4, 8, 9) -> [12, 1]\n    * eat_two(1, 10, 10) -> [11, 0]\n    * eat_two(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @meal : integer\n        the number of carrots that you need to eat.\n    @meal_left : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= meal <= 1000\n    * 0 <= meal_left <= 1000\n    \n    Have fun :)\n    \"\"\"\n    #    while not enough left in stock, eat more.\n    while meal_left >= meal:\n        number += 1\n        meal_left -= meal\n    #    eat remaining carrots in stock\n    while number < meal:\n        number += 1\n    return [number, meal_left]\n    \n    \n    \ndef is_it_a_cow(array):\n    \"\"\"\n    is_it_a_cow will check if a given list is a cow.\n    an animal is a cow if all the elements in the list are the same.\n    if all the elements are the same, you will return true, otherwise false.\n    \n    Example:\n    * is_it_a_cow([1, 1, 1, 1]) -> True\n    * is_it_a_cow([1, 1, 2, 1]) -> False\n    * is_it_a_cow([1, 1, 1, 2]) -> False\n    \n    Variables:\n    @array : list\n        a list of integers\n    \n    Constrain:\n    * 0 <= len(array) <= 1000\n    * 1 <= array[i] <= 1000\n    \n    Have fun :)\n    \"\"\"\n    if len(array) == 0:\n        return False\n    if len"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = 0\n    if operator == ['+', '*', '-']:\n        result = operand[0] + operand[1] * operand[2] - operand[3]\n    elif operator == ['+', '*']:\n        result = operand[0] + operand[1] * operand[2]\n    elif operator == ['+']:\n        result = operand[0] + operand[1]\n    elif operator == ['-']:\n        result = operand[0] - operand[1]\n    elif operator == ['*']:\n        result = operand[0] * operand[1]\n    elif operator == ['//']:\n        result = operand[0] // operand[1]\n    elif operator == ['**']:\n        result = operand[0] ** operand[1]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert operator.__len__() == operand.__len__() - 1\n    if operand.__len__() == 1:\n        return operator[operand[0]]\n    else:\n        return (operator[operand[0]]) + do_algebra(operator, operand[1:])\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(operator) == 0:\n        return operand[0]\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # your code here\n    return 0\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert operator, operand\n    # Initialize the return value\n    result = operand[0]\n    # Iterate through the operations in reverse order\n    for operator_name in operator[::-1]:\n        # If the current operator is '+'\n        if operator_name == '+':\n            # The result is the sum of the two operands\n            result += operand[1]\n        # If the current operator is '-'\n        elif operator_name == '-':\n            # The result is the difference of the two operands\n            result -= operand[1]\n        # If the current operator is '*'\n        elif operator_name == '*':\n            # The result is the product of the two operands\n            result *= operand[1]\n        # If the current operator is '/'\n        elif operator_name == '/':\n            # The result is the quotient of the two operands\n            result //= operand[1]\n        # If the current operator is '**'\n        elif operator_name == '**':\n            # The result is the exponentiation of the two operands\n            result **= operand[1]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    raise NotImplementedError()\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #initialize the return variable\n    result = 0\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if operator == '+':\n        return operator_add(operand)\n    elif operator == '-':\n        return operator_sub(operand)\n    elif operator == '*':\n        return operator_mul(operand)\n    elif operator == '/':\n        return operator_div(operand)\n    elif operator == '**':\n        return operator_pow(operand)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = list(s)\n    l = 0\n    r = len(s)-1\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[l], s[r] = s[r].upper(), s[l].upper()\n            elif s[i].islower():\n                s[l], s[r] = s[r].lower(), s[l].lower()\n            l += 1\n            r -= 1\n        else:\n            l += 1\n            r -= 1\n    return \"\".join(s)"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if s == \"\":\n        return s\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result\n    \nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(solve(\"1234\"))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"a@C\") == \"#A@c\"\n    assert solve(\"hello world\") == \"worldhello\"\n    assert solve(\"A1234\") == \"4321A\"\n    assert solve(\"\") == \"\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not s:\n        return s\n    r = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            r.append(s[i].swapcase())\n        else:\n            r.append(s[i])\n    return ''.join(r)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not s:\n        return s\n    l = list(s)\n    i = 0\n    while i < len(l):\n        if l[i].isalpha():\n            if l[i].islower():\n                l[i] = l[i].upper()\n            else:\n                l[i] = l[i].lower()\n        else:\n            l[i] = l[i]\n        i += 1\n    return \"\".join(l)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #return s[:]\n    s = s.replace(' ','').lower()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s = s[:i] + s[i].lower() + s[i+1:]\n            else:\n                s = s[:i] + s[i].upper() + s[i+1:]\n    return s\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = s.lower()\n    ans = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                ans += i.lower()\n            elif i.islower():\n                ans += i.upper()\n        else:\n            ans += i\n    return ans\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # your code here\n    res = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            res += s[i].swapcase()\n        else:\n            res += s[i]\n    return res\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = s.lower()\n    if not any(c.isalpha() for c in s):\n        s = s[::-1]\n    else:\n        for i in range(len(s)):\n            if s[i].isalpha():\n                if s[i].isupper():\n                    s = s[i].lower() + s[i+1:]\n                else:\n                    s = s[i].upper() + s[i+1:]\n    return s"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not s:\n        return s\n    \n    r = ''\n    for i in range(len(s)):\n        if s[i] in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            if s[i].islower():\n                r += s[i].upper()\n            else:\n                r += s[i].lower()\n        else:\n            r += s[i]\n    \n    return r"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return s.swapcase()\n    \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not text:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if text == '':\n        return None\n    else:\n        return md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if text:\n        text = text.encode('utf-8')\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if text == '':\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not text:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    text = text.encode('utf-8')\n    if text == b'':\n        return None\n    return hashlib.md5(text).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return hashlib.md5(text.encode()).hexdigest() if text else None\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # return list(range(a, b+1, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return range(int(a), int(b) + 1)[::2]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(range(a, b + 1, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(range(a, b + 1, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [i for i in range(a, b + 1) if i % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(range(a, b + 1, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(range(a, b + 1, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Check that input is positive integers\n    if a < 1 or b < 1:\n        raise ValueError(\"Input must be positive integers\")\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted([i for i in range(a, b) if i%2 == 0])\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # array of even digits in range [a, b)\n    return [i for i in range(a, b) if i % 2 == 0]\n"
    }
]