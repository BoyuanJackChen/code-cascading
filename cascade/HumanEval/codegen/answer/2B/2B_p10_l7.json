[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(numbers) - 1):\n        if numbers[i] < numbers[i + 1] + threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] <= threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for index in range(len(numbers)):\n        for i in range(index + 1, len(numbers)):\n            if numbers[i] - numbers[index] < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i == j:\n                continue\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Check if any of the elements are closer to each other than threshold\n    for index in range(len(numbers)):\n        if abs(numbers[index] - numbers[index - 1]) < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # print('numbers:', numbers)\n    # print('threshold:', threshold)\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    paren_list = paren_string.split(' ')\n    new_paren_list = []\n    for paren in paren_list:\n        if paren == '':\n            continue\n        if paren[0] == '(':\n            new_paren_list.append(paren[1:])\n        elif paren[-1] == ')':\n            new_paren_list.append(paren[:-1])\n    return new_paren_list\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    paren_list = list(paren_string)\n    paren_dict = {}\n    stack = []\n    paren_index = 0\n    while paren_index < len(paren_list):\n        if paren_list[paren_index] == '(':\n            stack.append(paren_list[paren_index])\n        elif paren_list[paren_index] == ')':\n            if len(stack) == 0:\n                paren_dict[paren_index] = 'NO'\n            else:\n                paren_dict[paren_index] = 'YES'\n                stack.pop()\n        paren_index += 1\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # 1. Initialize a stack and empty list to store separated groups\n    paren_group_stack: List = []\n    paren_group_list: List = []\n    # 2. Loop through the input string\n    for i in range(len(paren_string)):\n        # 3. If the current character is an open bracket, add it to the stack\n        if paren_string[i] == '(':\n            paren_group_stack.append(paren_string[i])\n        # 4. If the current character is a closed bracket, pop the top stack element and add it to the list\n        elif paren_string[i] == ')':\n            paren_group_list.append(paren_group_stack.pop())\n    # 5. Return the list\n    return paren_group_list\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    paren_group_list = []\n    curr_paren_group = \"\"\n    for character in paren_string:\n        if character == \"(\":\n            curr_paren_group += character\n        elif character == \")\":\n            curr_paren_group += character\n            if curr_paren_group!= \"()\":\n                paren_group_list.append(curr_paren_group)\n            curr_paren_group = \"\"\n        else:\n            curr_paren_group += character\n    # if a new group is left\n    if curr_paren_group!= \"\":\n        paren_group_list.append(curr_paren_group)\n    return paren_group_list\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    paren_list = []\n    open_count = 0\n    start_index = 0\n    end_index = 0\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            open_count += 1\n            if open_count == 1:\n                start_index = i\n        if paren == ')':\n            open_count -= 1\n            if open_count == 0:\n                end_index = i\n                paren_list.append(paren_string[start_index:end_index + 1])\n    return paren_list\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    groups = []\n    start = 0\n    paren = 0\n    while start < len(paren_string):\n        if paren_string[start] == '(' and paren_string[start + 1] == ')' and \\\n                paren_string[start + 2] == '(' and paren_string[start + 3] == ')':\n            groups.append(paren_string[start + 1:start + 4])\n            start += 4\n            paren += 4\n        else:\n            groups.append(paren_string[start])\n            start += 1\n            paren += 1\n    return groups\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    paren_list = list(paren_string)\n    paren_stack = []\n    output_list = []\n    for p in paren_list:\n        if p == \"(\":\n            paren_stack.append(p)\n        elif p == \")\":\n            while paren_stack and paren_stack[-1]!= \"(\":\n                output_list.append(paren_stack.pop())\n            paren_stack.pop()\n        else:\n            paren_stack.append(p)\n    while paren_stack:\n        output_list.append(paren_stack.pop())\n    return output_list\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    paren_stack = []\n    output_groups = []\n    current_group = []\n    # Loop through the input\n    for char in paren_string:\n        # If we are in parentheses\n        if char == '(':\n            # If we are in parentheses, we are in a group\n            current_group.append(char)\n            paren_stack.append(char)\n        elif char == ')':\n            # If we are out of parentheses, we are no longer in a group\n            if paren_stack:\n                # Pop off the last open parenthesis\n                paren_stack.pop()\n                # We are no longer in a group\n                current_group.pop()\n            else:\n                # We are out of parentheses, so this is the end of the group\n                output_groups.append(''.join(current_group))\n                # Clear the group and push the current group onto the stack\n                current_group = []\n    # Add the last group if it is not empty\n    if current_group:\n        output_groups.append(''.join(current_group))\n    return output_groups\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return paren_string.split(\"()\")\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # your code here\n    bracestack = []\n    out = []\n    \n    for char in paren_string:\n        if char!='':\n            out.append(char)\n        elif char =='':\n            if len(bracestack) == 0:\n                out.append(char)\n            elif bracestack[-1] == '(' or bracestack[-1] == '{' or bracestack[-1] == '[':\n                out.append(char)\n            else:\n                out.append(char)\n        elif char == '(':\n            bracestack.append(char)\n        elif char == ')':\n            if len(bracestack) == 0:\n                out.append(char)\n            else:\n                if bracestack[-1] == '(':\n                    bracestack.pop()\n                    out.append(char)\n                else:\n                    out.append(char)\n        elif char == '{':\n            bracestack.append(char)\n        elif char == '}':\n            if len(bracestack) == 0:\n                out.append(char)\n            else:\n                if bracestack[-1] == '{':\n                    bracestack.pop()\n                    out.append(char)\n                else:\n                    out.append(char)\n        elif char == ']':\n            if len(bracestack) == 0:\n                out.append(char)\n            else:\n                if bracestack[-1] == '[':\n                    bracestack.pop()\n                    out.append(char)\n                else:\n                    out.append(char)\n    \n    return out\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # find integer part\n    integer_part = int(number)\n    # find decimal part\n    decimal_part = number - integer_part\n    return decimal_part"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if number < 0:\n        return \"error\"\n    else:\n        decimal_part = number % 1\n        if decimal_part == 0:\n            return number\n        else:\n            integer_part = number - decimal_part\n            return truncate_number(integer_part)\n        return truncate_number\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if number == int(number):\n        return int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    integer_part, decimals = math.modf(number)\n    return decimals\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (number - int(number))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if number == 0:\n        return 0\n    number_as_int = int(number)\n    decimal_part = number - number_as_int\n    if decimal_part == 0:\n        return number_as_int\n    else:\n        return number_as_int + 1\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    integer = int(number)\n    decimal = number - integer\n    return decimal\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # cast to float so we can handle math errors\n    number = float(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    number = float(number)\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    if decimal_part >= 1:\n        return (integer_part, decimal_part)\n    else:\n        return (integer_part, 0)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if number == 0:\n        return 0\n    integer, decimals = math.modf(number)\n    return decimals\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    bal = 0\n    for op in operations:\n        if op > 0:\n            bal += op\n        else:\n            if bal < 0:\n                return True\n            bal = op\n    return bal < 0\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    balance = 0\n    for i in operations:\n        if i < 0:\n            balance = balance + i\n    if balance < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if operations == []:\n        return True\n    for idx in range(0, len(operations)):\n        if operations[idx] < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        else:\n            balance -= operation\n    if balance < 0:\n        return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return True if operations[-1] <= 0 else False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    balance = 0\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    acc = 0\n    for i in range(len(operations)):\n        if acc < 0:\n            return True\n        acc += operations[i]\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n    return balance < 0\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(1, len(operations)):\n        if operations[i] <= 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    numbers = numbers[:]\n    numbers.sort()\n    size = len(numbers)\n    if size < 2:\n        return 0\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Select the first element in the list\n    x_mean = sum(numbers) / len(numbers)\n    # Calculate the absolute difference\n    deviations = [abs(x - x_mean) for x in numbers]\n    # Calculate the mean of those absolute differences\n    mad = sum(deviations) / len(numbers)\n    return mad\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    m = sum(numbers) / len(numbers)\n    return sum([abs(n - m) for n in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    sum_of_absolute_differences = 0\n    mean_of_numbers = sum(numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(abs(x - mean(numbers)) for x in numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(numbers)\n    mean = sum(numbers) / n\n    mads = [(x - mean) ** 2 for x in numbers]\n    return sum(mads) / n\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # List the length of the list, and divide that length by 2:\n    length = len(numbers)\n    length_half = length / 2\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum([abs(number - mean(numbers)) for number in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    total_sum = 0\n    total_size = 0\n    for num in numbers:\n        total_sum += abs(num)\n        total_size += 1\n    mean = total_sum / total_size\n    return total_sum / total_size\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    new_list = []\n    for index in range(len(numbers)-1):\n        new_list.append(numbers[index])\n        new_list.append(delimeter)\n        new_list.append(numbers[index+1])\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(numbers) == 0:\n        return []\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = []\n    for i, num in enumerate(numbers):\n        if i == 0:\n            result.append(num)\n        elif i == len(numbers)-1:\n            result.append(num)\n        else:\n            result.append(num)\n            result.append(delimeter)\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        elif i == len(numbers) - 1:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i])\n            result.append(delimeter)\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(numbers) == 0:\n        return []\n    else:\n        return list(numbers[0:1] + [delimeter] + numbers[1:])\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(0, len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n        return numbers\n    n = len(numbers)\n    i = 0\n    while i < n - 1:\n        numbers.insert(i + 2 * delimeter, numbers[i])\n        i += 1\n    return numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not numbers:\n        return numbers\n    ans = []\n    for i, e in enumerate(numbers):\n        if i == 0:\n            ans.append(e)\n        else:\n            ans.append(delimeter)\n            ans.append(e)\n    return ans\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = len(numbers)\n    ans = []\n    ans += numbers[:n - 1:2]\n    ans += [numbers[-1]]\n    ans += numbers[1:n - 1:2]\n    return ans\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    i = 0\n    result = []\n    while i < len(numbers):\n        result += numbers[i]\n        result += delimeter\n        i += 2\n    return result[:-1]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    paren_groups = paren_string.split(' ')\n    i = 0\n    nested_list = []\n    while i < len(paren_groups):\n        nested_list.append(len(paren_groups[i]))\n        while i < len(paren_groups) and len(paren_groups[i]) > 0:\n            if paren_groups[i] == '(':\n                paren_groups[i] = 1\n            else:\n                paren_groups[i] = 0\n            i += 1\n    nested_list.append(len(paren_groups))\n    return nested_list\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    paren_levels = []\n    curr_paren_level = 0\n    paren_stack = []\n    for ch in paren_string:\n        if ch == '(':\n            curr_paren_level += 1\n            paren_stack.append(ch)\n        elif ch == ')':\n            curr_paren_level -= 1\n            if curr_paren_level == 0:\n                paren_stack.pop()\n            else:\n                paren_stack.append(ch)\n    paren_levels.append(curr_paren_level)\n    while paren_stack:\n        curr_paren_level = paren_stack.pop()\n        paren_levels.append(curr_paren_level)\n    return paren_levels\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    paren_string = paren_string.strip()\n    if len(paren_string) == 0:\n        return []\n    if paren_string[0] == '(':\n        return parse_nested_parens(paren_string[1:])\n    else:\n        return parse_nested_parens(paren_string[0:-1])\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == \"(\":\n            paren_stack = [paren_string[i]]\n            i += 1\n            while paren_stack and paren_string[i]!= \")\":\n                paren_stack.append(paren_string[i])\n                i += 1\n            i += 1\n            result.append(len(paren_stack))\n        else:\n            result.append(0)\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    curr_level = 0\n    curr_parens = []\n    # your code here\n    return curr_parens"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # first, find the starting paren\n    i = 0\n    start = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            start = i\n            break\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Python's list comprehension could be used to parse the string into a list of lists.\n    # This would be useful, if we wanted to separate into groups of numbers, not just the types.\n    # One line comprehension:\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Sorting\n    # (()()) = (2) (2) (3) (3)\n    # ((())) = (1) (2) (3) (3)\n    # ((())()) = (1) (2) (2) (3) (3)\n    # ((())) = (1) (2) (2) (3) (3)\n    # (())()() = (1) (1) (2) (2) (3) (3)\n    # ((())()()) = (1) (1) (1) (2) (2) (3) (3)\n    # (())((())) = (1) (1) (1) (2) (2) (3) (3)\n    # ((())) = (1) (1) (2) (2) (3) (3)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    paren_split = paren_string.split()\n    paren_list = []\n    for i in paren_split:\n        paren_list.append(len(i))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    paren_levels = []\n    current_paren = 0\n    for char in paren_string:\n        if char == '(':\n            current_paren += 1\n        if char == ')':\n            current_paren -= 1\n        if current_paren < 0:\n            raise ValueError('Unexpected parentheses')\n        if char!='' and char!= ')':\n            paren_levels.append(current_paren)\n    if paren_levels:\n        return paren_levels\n    return paren_levels + [0]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda string: substring in string, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    filtered_list = list(filter(lambda x: substring in x, strings))\n    return filtered_list\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(filter(lambda s: substring in s, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(filter(lambda string: substring in string, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    substrings = []\n    for s in strings:\n        if substring.lower() in s.lower():\n            substrings.append(s)\n    return substrings\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda a: substring in a, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    filtered = []\n    for s in strings:\n        if substring in s:\n            filtered.append(s)\n    return filtered\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not numbers:\n        return (0, 1)\n    else:\n        s = sum(numbers)\n        p = 1\n        for i in range(len(numbers)):\n            p *= numbers[i]\n        return (s, p)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(numbers) == 0:\n        return 0, 1\n    else:\n        return sum_product_helper(numbers, 0, 0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sum_ = 0\n    prod = 1\n    for i in numbers:\n        sum_ += i\n        prod *= i\n    return (sum_, prod)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    s = 0\n    p = 1\n    for i in numbers:\n        s = s + i\n        p = p * i\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum = 0\n    product = 1\n    for i in numbers:\n        sum += i\n        product *= i\n    return sum, product\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sum_value = 0\n    product_value = 1\n    if numbers:\n        for number in numbers:\n            sum_value += number\n            product_value *= number\n        return sum_value, product_value\n    else:\n        return sum_value, product_value\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number in numbers:\n        sum_of_numbers += number\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if numbers == []:\n        return 0, 1\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Trick from here: https://www.youtube.com/watch?v=n6b-6-2-zHk\n    # This is a good example of how list comprehension can be used.\n    # First, create a new list containing the squared numbers of the numbers.\n    squared = [x**2 for x in numbers]\n    # Then, compute the sum and product of these squares\n    sum_squares = sum(squared)\n    product = 1\n    for i in numbers:\n        product *= i\n    return (sum_squares, product)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not numbers:\n        return (0, 1)\n    else:\n        sum, product = numbers[0], numbers[0]\n        for number in numbers[1:]:\n            sum += number\n            product *= number\n        return (sum, product)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    max_list = []\n    max = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max:\n            max = numbers[i]\n        max_list.append(max)\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    maximums = []\n    maximum = None\n    for i in range(len(numbers)):\n        maximum = max(maximums[i] if i < len(maximums) else maximum, numbers[i])\n        maximums.append(maximum)\n    return maximums\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(numbers)):\n        numbers[i] = max(numbers[i], numbers[i-1])\n    return numbers\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    res = []\n    max_val = max(numbers)\n    while max_val in numbers:\n        res.append(max_val)\n        i = numbers.index(max_val)\n        numbers[i] = 0\n        max_val = max(numbers)\n        numbers = numbers[i+1:]\n    return res\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    max_rolling = []\n    n = len(numbers)\n    # Have we come to the end of the sequence?\n    if n <= 1:\n        return numbers\n    # Have we gone from negative infinity?\n    if max(numbers) < 0:\n        max_rolling.append(-float(\"inf\"))\n        numbers = [-float(\"inf\")] + numbers\n    # Get rolling maximums\n    max_rolling.append(max(numbers))\n    for i in range(1, n):\n        max_rolling.append(max(numbers[i-1], numbers[i]))\n    return max_rolling\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    result_max = numbers[0]\n    for i in range(len(numbers)):\n        if numbers[i] > result_max:\n            result_max = numbers[i]\n        result.append(result_max)\n    return result\n    #...\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = []\n    for idx in range(len(numbers)):\n        max_val = max(result[idx-1] if idx > 0 else numbers[0], numbers[idx])\n        result.append(max_val)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    max_elem = numbers[0]\n    result = [max_elem]\n    for i in range(1, len(numbers)):\n        if max_elem < numbers[i]:\n            max_elem = numbers[i]\n        result.append(max_elem)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Initialize first element of the list\n    highest_val = numbers[0]\n    for i in range(1, len(numbers)):\n        # Check if the new element of the list is the new maximum\n        if numbers[i] > highest_val:\n            highest_val = numbers[i]\n        # Check if the new element of the list is a new minimum\n        if numbers[i] < numbers[i - 1]:\n            # Generate the new minimum\n            numbers[i] = numbers[i - 1]\n    # Generate the result list\n    result = []\n    for i in range(len(numbers) - 1, -1, -1):\n        # If we have reached the last element in the list, we can just set the maximum value to the current\n        # value and stop\n        if i == 0:\n            result.append(numbers[i])\n            break\n        # If the new minimum value is bigger than the last element in the list, we can just set the minimum\n        # value to the current value and stop\n        if numbers[i] < numbers[i - 1]:\n            result.append(numbers[i])\n            break\n        # If the new minimum value is smaller than the current maximum value, it is either because we\n        # have reached the end of the list or we have just reached the minimum value\n        if numbers[i] < highest_val:\n            result.append(numbers[i])\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max_list = []\n    max_num = max(numbers)\n    for i in range(len(numbers)):\n        if numbers[i] == max_num:\n            max_list.append(max_num)\n            max_num = max(numbers[i+1:])\n        else:\n            max_num = max(numbers[i+1:])\n    return max_list\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    l_p = find_palindromic_suffix(string)\n    if l_p is None:\n        return string\n    suffix = string[l_p:]\n    prefix = string[:l_p]\n    prefix_rev = prefix[::-1]\n    suffix_rev = suffix[::-1]\n    return prefix_rev + suffix_rev\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # STEP 1: Find the longest postfix of supplied string that is a palindrome.\n    max_length = 0\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            max_length = max(max_length, i+1)\n    # STEP 2: Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string[:max_length] + string[:max_length][::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Edge case: If supplied string is empty, return empty string\n    if not string:\n        return string\n    # Edge case: If supplied string is a single character, return itself\n    if len(string) == 1:\n        return string\n    # Find the longest prefix of supplied string that is a palindrome\n    longest_palindrome = string[0]\n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]):\n            if len(longest_palindrome) < i+1:\n                longest_palindrome = string[:i+1]\n    # Find the shortest suffix of supplied string that is a palindrome\n    shortest_palindrome = string[-1]\n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[i:]):\n            if len(shortest_palindrome) > i:\n                shortest_palindrome = string[i:]\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string + shortest_palindrome + longest_palindrome\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if is_palindrome(string):\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Find the longest palindromic prefix\n    max_prefix_len = 0\n    for i in range(len(string)):\n        # If the prefix is a palindrome\n        if is_palindrome(string[i: i + max_prefix_len + 1]):\n            max_prefix_len = len(string[i: i + max_prefix_len + 1])\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def get_palindrome(string: str) -> str:\n        \"\"\" Find longest palindrome after a given prefix. \"\"\"\n        for i in range(len(string)):\n            if is_palindrome(string[i:]) and len(string) >= i+1:\n                return string[:i]+string[i+1:]\n    string = get_palindrome(string)\n    while len(string) > 1 and not is_palindrome(string):\n        string = get_palindrome(string)\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    suffix = find_longest_palindrome_suffix(string)\n    if not suffix:\n        return string\n    return string[:suffix[0] + len(suffix[1])] + suffix[1] + string[suffix[0] + len(suffix[1]):]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    longest = 0\n    for i in range(len(string)):\n        postfix = string[i:]\n        if is_palindrome(postfix):\n            prefix = string[:i]\n            reverse_palindrome = prefix + postfix[::-1]\n            longest = max(longest, len(reverse_palindrome))\n    return string + reverse_palindrome[:longest]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    palindrome = ''\n    prefix = ''\n    suffix = ''\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Returns a string result in string representation\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # as the elements in a and b are strings, we need to split them into binary strings\n    # for each element in a\n    binary_a = ''.join(str(bin(int(i))[2:]) for i in list(a))\n    binary_b = ''.join(str(bin(int(i))[2:]) for i in list(b))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"\".join([chr(ord(a) ^ ord(b)) for (a, b) in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"\".join([\"0\" if x == y else \"1\" for x, y in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = ''\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            res += '0'\n        else:\n            res += '1'\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return bin(int(a, 2) ^ int(b, 2))[2:]\n    # return ''.join([chr(int(i, 2) ^ int(j, 2)) for i, j in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ''.join(['1' if x=='0' else '0' for x in list(xor(a, b))])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return ''.join([str(int(a) ^ int(b))])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return ''.join(['1' if a!= b else '0' for a, b in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = ''\n    for i, j in zip(a, b):\n        if int(i) ^ int(j):\n            result += '1'\n        else:\n            result += '0'\n    return result\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_str = strings[0]\n    for i in range(1, len(strings)):\n        if len(strings[i]) > len(longest_str):\n            longest_str = strings[i]\n    return longest_str\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not strings:\n        return None\n    longest_str = strings[0]\n    for item in strings:\n        if len(item) > len(longest_str):\n            longest_str = item\n    return longest_str\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # return the first one in the list of strings of the same length\n    if strings == []:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # if len(strings) == 0:\n    #     return None\n    # return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        largest = 0\n        for s in strings:\n            if len(s) > largest:\n                largest = len(s)\n                result = s\n        return result\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n    \n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Create a list of numbers from a to b.\n    numbers = range(a, b+1)\n    # Create a list of even numbers from a to b.\n    even_numbers = range(2, b, 2)\n    # Create a list of all common divisors between a and b.\n    common_divisors = set([i for i in numbers if i in even_numbers])\n    # Return the greatest common divisor.\n    return max(common_divisors)\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    while a % b!= 0:\n        old_a = a\n        old_b = b\n        a = old_b\n        b = old_a % old_b\n    return b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a > b:\n        a, b = b, a\n    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    prefix_list = []\n    if len(string) == 1:\n        return string\n    for i in range(len(string)):\n        prefix_list.append(string[:i+1])\n    return prefix_list\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    prefixes = []\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    output = []\n    for i in range(len(string)):\n        output.append(string[:i+1])\n    return output\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    i = 0\n    while i < len(string):\n        result.append(string[:i+1])\n        i += 1\n    return result\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if string == '':\n        return []\n    else:\n        result = []\n        for i in range(len(string)):\n            prefix = string[0:i+1]\n            result.append(prefix)\n        return result\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return f'{n}'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return''.join(map(str, range(n + 1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return''.join(f'{i}' for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return''.join(f'{i}' for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \" \".join(map(str, range(n+1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return''.join(map(str, range(n + 1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return \"0\"\n    else:\n        return \" \".join(map(str, range(0, n+1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return''.join([str(i) for i in range(0,n+1)])\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # 1\n    # string = string.lower()\n    # return len(set(string))\n    # 2\n    return len(set(string))\n    # 3\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # make a dictionary that maps every character to its count\n    character_counts = {}\n    for character in string:\n        if character not in character_counts:\n            character_counts[character] = 0\n        character_counts[character] += 1\n    # return the number of distinct characters\n    return len(character_counts)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Put your code here\n    if string == None:\n        return 0\n    else:\n        d = {}\n        for x in string:\n            d[x] = d.get(x, 0) + 1\n        return len(d)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    distinct_characters = set()\n    for char in string:\n        char = char.lower()\n        if char not in distinct_characters:\n            distinct_characters.add(char)\n    return len(distinct_characters)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    list_of_notes = list(music_string)\n    result = []\n    for note in list_of_notes:\n        if note == '.':\n            result.append(1)\n        elif note == '|':\n            result.append(2)\n        elif note == '.':\n            result.append(4)\n    return result\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # split by whitespace\n    music_list = music_string.split()\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    not_lengths = {'o': 4, 'o|': 2, '.|': 1}\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # your code here\n    return_list = []\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [*map(int, music_string)]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [\n        4 if char == 'o' or char == 'o|' else 2 if char == '.' or char == '|' else 1\n        for char in music_string\n    ]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [int(beat) if beat not in 'o.|' else 4 for beat in music_string]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    music = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            music.append(4)\n        elif music_string[i] == 'o|':\n            music.append(2)\n        elif music_string[i] == '.':\n            music.append(1)\n        elif music_string[i] == '|':\n            music.append(1)\n    return music\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    notes = []\n    for char in music_string:\n        if char == 'o':\n            notes.append(4)\n        elif char == 'o|':\n            notes.append(2)\n        elif char == '.':\n            notes.append(1)\n        elif char == '|':\n            notes.append(2)\n        elif char == '|':\n            notes.append(1)\n        elif char == '|':\n            notes.append(2)\n        elif char == '.':\n            notes.append(2)\n    return notes\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    if string == '':\n        return count\n    for i in range(0, len(string)):\n        if substring in string[i:i+len(substring)]:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(1 for i in range(len(string)) if string[i:].find(substring)!= -1)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum(substring == x for x in string.split(substring))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    str_numbers = numbers.split()\n    str_numbers = list(map(int, str_numbers))\n    nums = sorted(str_numbers)\n    nums = list(map(str, nums))\n    return''.join(nums)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return''.join(sorted(numbers.split(), key=lambda x: int(x)))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    lst = numbers.split()\n    lst.sort()\n    return''.join(lst)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    numbers_list = numbers.split()\n    numbers_dict = {}\n    for number in numbers_list:\n        if number not in numbers_dict.keys():\n            numbers_dict[number] = 1\n        else:\n            numbers_dict[number] += 1\n    sorted_numbers_list = sorted(numbers_dict.items(), key=lambda item: item[1], reverse=True)\n    sorted_numbers_list_as_str = str()\n    for i in sorted_numbers_list:\n        sorted_numbers_list_as_str += str(i[0]) + \" \" + str(i[1]) + \" \"\n    return sorted_numbers_list_as_str[:-1]\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    numbers_str = numbers.split()\n    numbers_lst = []\n    for i in numbers_str:\n        if i == 'one':\n            numbers_lst.append(1)\n        elif i == 'two':\n            numbers_lst.append(2)\n        elif i == 'three':\n            numbers_lst.append(3)\n        elif i == 'four':\n            numbers_lst.append(4)\n        elif i == 'five':\n            numbers_lst.append(5)\n        elif i =='six':\n            numbers_lst.append(6)\n        elif i =='seven':\n            numbers_lst.append(7)\n        elif i == 'eight':\n            numbers_lst.append(8)\n        elif i == 'nine':\n            numbers_lst.append(9)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = ''\n    numbers = numbers.split(' ')\n    for number in numbers:\n        if number == 'zero':\n            result += 'zero'\n        elif number == 'one':\n            result += 'one'\n        elif number == 'two':\n            result += 'two'\n        elif number == 'three':\n            result += 'three'\n        elif number == 'four':\n            result += 'four'\n        elif number == 'five':\n            result += 'five'\n        elif number =='six':\n            result +='six'\n        elif number =='seven':\n            result +='seven'\n        elif number == 'eight':\n            result += 'eight'\n        elif number == 'nine':\n            result += 'nine'\n        else:\n            result += number\n    return result\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    numbers = numbers.split()\n    numbers.sort()\n    return \" \".join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    numbers = numbers.split(' ')\n    num_list = []\n    for num in numbers:\n        if num == 'zero':\n            num_list.append(0)\n        elif num == 'one':\n            num_list.append(1)\n        elif num == 'two':\n            num_list.append(2)\n        elif num == 'three':\n            num_list.append(3)\n        elif num == 'four':\n            num_list.append(4)\n        elif num == 'five':\n            num_list.append(5)\n        elif num =='six':\n            num_list.append(6)\n        elif num =='seven':\n            num_list.append(7)\n        elif num == 'eight':\n            num_list.append(8)\n        elif num == 'nine':\n            num_list.append(9)\n    num_list.sort()\n    return''.join(str(number) for number in num_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    numbers_list = numbers.split()\n    for index, number in enumerate(numbers_list):\n        if number == 'zero':\n            numbers_list[index] = 0\n        elif number == 'one':\n            numbers_list[index] = 1\n        elif number == 'two':\n            numbers_list[index] = 2\n        elif number == 'three':\n            numbers_list[index] = 3\n        elif number == 'four':\n            numbers_list[index] = 4\n        elif number == 'five':\n            numbers_list[index] = 5\n        elif number =='six':\n            numbers_list[index] = 6\n        elif number =='seven':\n            numbers_list[index] = 7\n        elif number == 'eight':\n            numbers_list[index] = 8\n        elif number == 'nine':\n            numbers_list[index] = 9\n    sorted_numbers =''.join([str(x) for x in numbers_list])\n    return sorted_numbers\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    numbers = sorted(numbers)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # array = []\n    # for i in range(0,len(numbers)-1):\n    #     for j in range(i+1,len(numbers)):\n    #         array.append([numbers[i],numbers[j]])\n    # print(array)\n    numbers.sort()\n    numbers.reverse()\n    smallest_numbers = []\n    largest_numbers = []\n    diff = abs(numbers[0] - numbers[1])\n    if numbers[0] < numbers[1]:\n        smallest_numbers.append(numbers[0])\n        smallest_numbers.append(numbers[1])\n        for i in range(2,len(numbers)):\n            if numbers[i] < smallest_numbers[0]:\n                smallest_numbers.append(numbers[i])\n            if diff == abs(smallest_numbers[0] - numbers[i]):\n                smallest_numbers.append(numbers[i])\n                diff = abs(smallest_numbers[0] - numbers[i])\n    elif numbers[0] > numbers[1]:\n        largest_numbers.append(numbers[0])\n        largest_numbers.append(numbers[1])\n        for i in range(2,len(numbers)):\n            if numbers[i] > largest_numbers[0]:\n                largest_numbers.append(numbers[i])\n            if diff == abs(largest_numbers[0] - numbers[i]):\n                largest_numbers.append(numbers[i])\n                diff = abs(largest_numbers[0] - numbers[i])\n    if len(smallest_numbers)!= 2:\n        return smallest_numbers[0],smallest_numbers[1]\n    if len(largest_numbers)!= 2:\n        return largest_numbers[0],largest_numbers[1]\n    return smallest_numbers[0],smallest_numbers[1]\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    length = len(numbers)\n    if length == 1:\n        return numbers[0], numbers[0]\n    if length == 2:\n        return numbers[0], numbers[1]\n    left, right = numbers[0], numbers[-1]\n    largest_diff = abs(left - right)\n    for i in range(length):\n        for j in range(i + 1, length):\n            # calculate absolute difference\n            diff = abs(numbers[i] - numbers[j])\n            if diff < largest_diff:\n                largest_diff = diff\n                left, right = numbers[i], numbers[j]\n    return left, right\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    def get_distance(num1, num2):\n        \"\"\" Returns the distance between num1 and num2 \"\"\"\n        return abs(num1 - num2)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Using the for-loop method, we could also have a while-loop, but this is simpler.\n    smallest, largest = None, None\n    for i in numbers:\n        if smallest is None:\n            smallest = i\n        else:\n            if i < smallest:\n                smallest = i\n            if i > largest:\n                largest = i\n    return smallest, largest\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert numbers, \"The supplied list of numbers is empty\"\n    assert len(numbers) >= 2, \"The supplied list of numbers is of length shorter than two\"\n    assert all([isinstance(number, float) for number in numbers]), \"Each item in the supplied list of numbers is not a float\"\n    assert all([number >= 0 for number in numbers]), \"Elements in the list of numbers are not non-negative\"\n    assert any([number < 0 for number in numbers]), \"Elements in the list of numbers are non-negative\"\n    assert any([number > 0 for number in numbers]), \"Elements in the list of numbers are non-positive\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    closest_1 = float('inf')\n    closest_2 = float('inf')\n    smallest_diff = float('inf')\n    for num in numbers:\n        diff = abs(num - 2)\n        if diff < smallest_diff:\n            closest_1 = num\n            smallest_diff = diff\n        if diff < abs(num - 2):\n            closest_2 = num\n    return (closest_1, closest_2)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(numbers) < 2:\n        return numbers[0], numbers[0]\n    # else:\n    m, mi = float('inf'), float('inf')\n    for n in numbers:\n        if n < m:\n            m, mi = n, m\n        if n < mi:\n            mi = n\n    return mi, m\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(numbers) < 2:\n        return (None, None)\n    smallest_diff = float('inf')\n    smallest_index = None\n    largest_diff = float('-inf')\n    largest_index = None\n    for i in range(len(numbers)):\n        if numbers[i] < smallest_diff:\n            smallest_diff = numbers[i]\n            smallest_index = i\n        if numbers[i] > largest_diff:\n            largest_diff = numbers[i]\n            largest_index = i\n    return (numbers[smallest_index], numbers[largest_index])\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    a = numbers[0]\n    b = numbers[1]\n    a_min = a\n    a_max = a\n    b_min = b\n    b_max = b\n    for i in range(2, len(numbers)):\n        if a >= numbers[i]:\n            a_min = a_min\n            a_max = a\n        elif b >= numbers[i]:\n            a_min = b\n            a_max = b_max\n        else:\n            a_min = numbers[i]\n            a_max = numbers[i]\n        if b <= numbers[i]:\n            b_min = b_min\n            b_max = b\n        elif a <= numbers[i]:\n            b_min = a\n            b_max = a_max\n        else:\n            b_min = numbers[i]\n            b_max = numbers[i]\n    if a_min == a_max:\n        a_min = numbers[1]\n        a_max = numbers[2]\n    if b_min == b_max:\n        b_min = numbers[1]\n        b_max = numbers[2]\n    if a_min == a:\n        return (b_min, b)\n    elif b_min == b:\n        return (a_min, a)\n    return (a_min, a_max)\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    min_value = float(min(numbers))\n    max_value = float(max(numbers))\n    return [(num - min_value) / (max_value - min_value) for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    max_num = max(numbers)\n    min_num = min(numbers)\n    diff = max_num - min_num\n    if diff == 0:\n        return numbers\n    rescaled_numbers = [(num - min_num) / diff for num in numbers]\n    return rescaled_numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not numbers:\n        return numbers\n    # this is a version of the fractional part, which we do not care about\n    fractional = numbers[1:] / sum(numbers[1:])\n    return [f * (1.0 - epsilon) + epsilon for f in fractional]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [(float(x) / max(numbers)) - min(numbers) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not numbers:\n        raise ValueError('Not enough numbers')\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [(value - min(numbers)) / (max(numbers) - min(numbers)) for value in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    max = float(max(numbers))\n    min = float(min(numbers))\n    factor = max - min\n    if factor == 0:\n        return numbers\n    for index in range(len(numbers)):\n        numbers[index] = (numbers[index] - min) / factor\n    return numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    assert numbers, \"Must provide at least 2 elements to rescale\"\n    \n    max_num = max(numbers)\n    return [(number - max_num) / (max_num - min(numbers)) for number in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    rescale_to_unit = numbers\n    # Find max value in list\n    max_val = max(numbers)\n    # Find min value in list\n    min_val = min(numbers)\n    # Subtract the max_val from all values in list\n    for i in range(len(rescale_to_unit)):\n        rescale_to_unit[i] = (rescale_to_unit[i] - max_val) / (max_val - min_val)\n    # Return rescaled list\n    return rescale_to_unit\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your code here (remove the pass statement below)\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #return list(filter(is_int, values))\n    return list(filter(lambda x: isinstance(x, int) or isinstance(x, float), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda val: isinstance(val, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [int(val) for val in values if isinstance(val, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Using try - except - else statement\n    result = []\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(is_integer, values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return filter(lambda x: isinstance(x, int), values)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(string)\n    # return len(string.encode())\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if string == '':\n        return 0\n    else:\n        return 1 + strlen(string[1:])\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(1, n+1):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert n > 0, \"n should be a positive integer!\"\n    divisor = n\n    while n % divisor!= 0:\n        divisor -= 1\n    return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert n > 0, \"n must be > 0\"\n    div = 1\n    while n % div!= 0:\n        div += 1\n    return div\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    i = 2\n    while n % i!= 0:\n        i += 1\n    return i\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    largest_divisor = 2\n    while n % largest_divisor == 0:\n        largest_divisor += 1\n    return largest_divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    i = 2\n    while i*i <= n:\n        if n%i == 0:\n            return i\n        i += 1\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 1:\n        return n\n    for i in range(2, n+1):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    largest_divisor = 1\n    while largest_divisor <= n:\n        if n % largest_divisor == 0:\n            return largest_divisor\n        else:\n            largest_divisor += 1\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    largest_divisor = 1\n    while n % largest_divisor!= 0:\n        largest_divisor += 1\n    return largest_divisor\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    factors = []\n    if n == 1:\n        return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n < 2:\n        return []\n    primes = []\n    while n % 2 == 0:\n        primes.append(2)\n        n = n // 2\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    primes = {2: 1}\n    factors = []\n    while n!= 1:\n        while n % 2 == 0:\n            n //= 2\n            primes[2] = primes.get(2, 0) + 1\n        p = 3\n        while p * p <= n:\n            while n % p == 0:\n                n //= p\n                primes[p] = primes.get(p, 0) + 1\n            p += 2\n        if n!= 1:\n            primes[n] = primes.get(n, 0) + 1\n            factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert type(n) == int, f\"The input of {factorize.__name__} function must be of type int\"\n    factors = []\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    factors = []\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #https://towardsdatascience.com/factorize-2a5610a7e8f7\n    if n <= 1:\n        return []\n    if n == 2:\n        return [1]\n    if n == 3:\n        return [1, 2]\n    if n % 2 == 0:\n        return factorize(n / 2) + factorize(n / 2)\n    else:\n        return factorize(n - 1) + factorize(n - 1)\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    listOfFactors = []\n    while n > 1:\n        listOfFactors.append(n)\n        n = n // n\n    listOfFactors.append(n)\n    return listOfFactors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n < 2:\n        return []\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            n = n // i\n            factors.append(i)\n        else:\n            i += 1\n    if n!= 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    factors = []\n    while n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                factors.extend([i, n // i])\n                n = n // i\n    return factors\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    solution = []\n    for i in range(len(numbers)):\n        if numbers.count(numbers[i]) == 1:\n            solution.append(numbers[i])\n    return solution\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    seen = set()\n    for n in numbers:\n        if n not in seen:\n            seen.add(n)\n            result.append(n)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Loop through and check if value is in new list\n    # If value isn't in new list, remove it\n    new_list = []\n    for i in numbers:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # create a new list with no duplicates\n    new_list = []\n    # remove all duplicates from the numbers list\n    for num in numbers:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    for x in numbers:\n        if x not in result:\n            result.append(x)\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Base Case:\n    if len(numbers) == 0:\n        return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # for index, element in enumerate(numbers):\n    #     if element == numbers[index-1]:\n    #         del numbers[index]\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    output = []\n    seen = {}\n    for num in numbers:\n        if num not in seen:\n            seen[num] = True\n            output.append(num)\n    return output\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    removed_nums = []\n    for num in numbers:\n        if num not in removed_nums:\n            removed_nums.append(num)\n    return removed_nums\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    seen = []\n    for number in numbers:\n        if number not in seen:\n            seen.append(number)\n    return seen\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return string.swapcase()"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([word[:1].upper() + word[1:].lower() if word.isupper() else word.swapcase() for word in string.split()])\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"\".join(chr(ord(char) + 32) if char.islower() else char for char in string)\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # new_string = []\n    # for char in string:\n    #     if char.isupper():\n    #         new_string.append(char.lower())\n    #     elif char.islower():\n    #         new_string.append(char.upper())\n    # return ''.join(new_string)\n    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"\".join(s.upper() if i % 2 else s.lower() for i, s in enumerate(string))\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return string.lower().upper()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not strings:\n        return \"\"\n    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return ''\n    else:\n        return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda word: word.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda s: s[:len(prefix)] == prefix, strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [x for x in l if x >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [num for num in l if num >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    for el in l:\n        if el > 0:\n            result.append(el)\n    return result\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l_p = []\n    for n in l:\n        if n > 0:\n            l_p.append(n)\n    return l_p\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = []\n    for x in l:\n        if x > 0:\n            res.append(x)\n    return res\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n <= 1:\n        return False\n    else:\n        for x in range(2, n):\n            if n % x == 0:\n                return False\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return False\n    \n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Check if n is even and less than 2.\n    if (n < 2) or (n % 2 == 0):\n        return False\n    # Check if n is even and greater than 1.\n    elif (n > 1) and (n % 2 == 0):\n        return False\n    # Count up from 3 to n - 1, and see if any of the numbers\n    # divides evenly into n.\n    else:\n        for k in range(3, n):\n            if (n % k == 0):\n                return False\n    # If not divisible by any number,\n    # it must be prime.\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert n >= 2, \"must use 2 and above numbers\"\n    for d in range(2, int(sqrt(n) + 1)):\n        if n % d == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        i = 5\n        while i ** 2 <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_iterative(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime_iterative(6)\n    False\n    >>> is_prime_iterative(101)\n    True\n    >>> is_prime_iterative(11)\n    True\n    >>> is_prime_iterative(13441)\n    True\n    >>> is_prime_iterative(61)\n    True\n    >>> is_prime_iterative(4)\n    False\n    >>> is_prime_iterative(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    k = 3\n    while k * k <= n:\n        if n % k == 0:\n            return False\n        k += 2\n    return True\n    \ndef is_prime_euklides(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime_euklides(6)\n    False\n    >>> is_prime_euklides(101)\n    True\n    >>> is_prime_euklides(11)\n    True\n    >>> is_prime_euklides(13441)\n    True\n    >>> is_prime_euklides(61)\n    True\n    >>> is_prime_euklides(4)\n    False\n    >>> is_prime_euklides(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    m = 3\n    while m * m <= n:\n        if n % m == 0:\n            return False\n        m += 2\n    return True\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    \n    "
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if xs[0] == 0:\n        return None\n    # print(xs)\n    # print(xs[0], xs[-1])\n    for i in range(len(xs)):\n        if xs[i] == 0:\n            return xs[i + 1] - xs[i - 1] / (2 * xs[i])\n    return None\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    xs = [coeff for coeff in xs if coeff!= 0]\n    assert len(xs) % 2 == 1, \"Coefficients must be even number\"\n    # Reduce\n    xs.sort(reverse=True)\n    x = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] == 0:\n            x = xs[i - 1]\n            break\n        else:\n            x = xs[i - 1] - (xs[i] * (xs[i - 1] - x)) / (xs[i] - xs[i - 1])\n    return x\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(xs) % 2!= 0:\n        raise Exception(\"Polynomial has odd number of coefficients.\")\n    xs.reverse()\n    start = 0\n    end = len(xs) - 1\n    while start < end:\n        if abs(xs[start]) > abs(xs[end]):\n            end -= 1\n        else:\n            start += 1\n    return 0.0 - xs[end] / xs[start]\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    xs.pop(0)\n    xs = list(filter(lambda coeff: coeff!= 0, xs))\n    num_xs = len(xs)\n    if num_xs == 0:\n        raise ValueError(f\"xs is empty, xs = {xs}\")\n    if num_xs == 1:\n        return xs[0]\n    if num_xs == 2:\n        return -xs[1] / (xs[0] * xs[1] - xs[0] * xs[0])\n    elif num_xs == 3:\n        b0 = xs[0]\n        b1 = xs[1]\n        b2 = xs[2]\n        m = 2\n        while True:\n            if m * m == m:\n                a = (m + 1) / 2\n                b = b1 * b1 - 4 * b0 * b2\n                c = (b0 + a * b1) / 2\n            else:\n                a = (2 * m + 1) / 2\n                b = b0 * b1 - 2 * m * b2\n                c = (b0 + a * b1) / 2\n            if b * b <= c * c:\n                if b!= 0:\n                    return c / b\n                else:\n                    return -xs[1] / (xs[0] * xs[1] - xs[0] * xs[0])\n            else:\n                m += 1\n    else:\n        # num_xs >= 4\n        return find_zero(xs[1:]) - find_zero(xs[:-1])\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for x in range(len(xs)):\n        if xs[x] == 0:\n            return x\n    return None\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(xs)\n    i = 0\n    while xs[i]!= 0:\n        i += 1\n        if i >= n:\n            return None\n    return i\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for x in range(len(xs)):\n        if xs[x] == 0:\n            return x\n    return None\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # calculate number of coefficients\n    n = len(xs) - 1\n    i = 0\n    while xs[i] == 0:\n        i += 1\n    for j in range(n, i, -1):\n        if j > n - 1:\n            break\n        xs[j] = xs[j + 1] - xs[j] / xs[j + 1]\n    return xs[i]\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(xs) - 1):\n        if xs[i] < 0 and xs[i + 1] < 0:\n            return xs[i] / xs[i + 1]\n    return None\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(xs) - 1, -1, -1):\n        if xs[i]!= 0:\n            return xs[i] / xs[i+1]\n    return xs[0] / xs[1]\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(l, key=lambda i: i if i % 3 else i // 3)\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l1 = []\n    l2 = []\n    l3 = []\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert l, \"Cannot sort empty list\"\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(l, key=lambda x: (x % 3, x))\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    l_copy = l.copy()\n    l_copy.sort()\n    for i in range(len(l_copy)):\n        if i % 3!= 0:\n            l_copy[i] = l[i]\n    return l_copy\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert len(l) > 2, \"the list must have at least three items\"\n    return sorted(l, key=lambda x: x % 3, reverse=True)\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l_new = l[:]\n    for i in range(len(l_new)):\n        if i % 3 == 0:\n            continue\n        l_new.sort()\n    return l_new\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    l1 = []\n    l2 = []\n    for i in range(len(l)):\n        if i%3!= 0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    l1.sort()\n    l2.sort()\n    return l1 + l2\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    l.sort()\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    l_new = l[:]\n    for i in range(len(l)):\n        if i%3 == 0:\n            continue\n        else:\n            l_new[i], l_new[i+1] = l_new[i+1], l_new[i]\n    return l_new\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(set(l), key=l.index)\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(set(l), key=l.index)\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # sort by value\n    l = sorted(l)\n    seen = set()\n    return sorted(seen.union(l))\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(l) == 0:\n        raise ValueError(\"Empty list\")\n    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not l:\n        return None\n    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(l) == 1:\n        return l[0]\n    else:\n        return max(l[0], max_element(l[1:]))\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return l[0]\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    largest = 0\n    for i in range(len(l)):\n        if l[i] > largest:\n            largest = l[i]\n    return largest\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    _max = l[0]\n    for i in l:\n        if i > _max:\n            _max = i\n    return _max\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    print(f\"fizz_buzz({n}) =\", len(list(filter(lambda x: (x % 11 == 7 or x % 13 == 7), range(1, n+1)))) )\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 7 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum(1 for i in range(1, n+1) if i % 11 == 7 or i % 13 == 7)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    divisible_by_11 = 0\n    divisible_by_13 = 0\n    for n in range(1, n):\n        if n % 11 == 0 or n % 13 == 0:\n            if n % 11 == 0:\n                divisible_by_11 += 1\n            if n % 13 == 0:\n                divisible_by_13 += 1\n    return divisible_by_11 + divisible_by_13\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(1 for num in range(1, n) if (num % 11 == 7 or num % 13 == 7))\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be a natural number\")\n    return fizz_buzz_helper(n, 7)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for num in range(1, n+1):\n        if num % 11 == 7 or num % 13 == 7:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(1 for i in range(1, n) if i % 11 == 7 or i % 13 == 7)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = 0\n    if n % 7 == 0:\n        result += 1\n    if n % 11 == 0:\n        result += 1\n    if n % 13 == 0:\n        result += 1\n    return result\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    total = 0\n    for i in range(1, n):\n        if i % 13 == 0:\n            if i % 11 == 0:\n                total += 1\n                continue\n            else:\n                continue\n        if i % 7 == 0:\n            total += 1\n            continue\n        else:\n            continue\n    return total\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sorted_even = []\n    for i in range(0, len(l)):\n        if i % 2 == 0:\n            sorted_even.append(l[i])\n    for i in range(1, len(l)):\n        if i % 2 == 0:\n            for j in range(len(sorted_even) - 1):\n                if sorted_even[j] > l[i]:\n                    sorted_even.insert(j, l[i])\n                    break\n    return sorted_even\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    i = 0\n    while i < len(l):\n        if i % 2 == 0:\n            l[i], l[i + 1] = l[i + 1], l[i]\n        i += 2\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l_even = []\n    l_odd = []\n    for i in l:\n        if i % 2 == 0:\n            l_even.append(i)\n        else:\n            l_odd.append(i)\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l_even = []\n    l_odd = []\n    for i in l:\n        if i % 2 == 0:\n            l_even.append(i)\n        else:\n            l_odd.append(i)\n    l_even.sort()\n    l_odd.sort()\n    l = l_even + l_odd\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    even = []\n    odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    return even + sorted(odd)\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    even = []\n    odd = []\n    for i in l:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even + sorted(odd)\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(l) <= 1:\n        return l\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    even = []\n    odd = []\n    evens = []\n    odds = []\n    for i in l:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    while even!= [] or odd!= []:\n        if even == []:\n            evens.append(odd[0])\n            odds.append(odd[1:])\n        elif odd == []:\n            evens.append(even[0])\n            evens.append(even[1:])\n        else:\n            if even[0] < odd[0]:\n                evens.append(even[0])\n                evens.append(even[1:])\n            else:\n                evens.append(even[0])\n                evens.append(even[1:])\n                odds.append(odd[0])\n                odds.append(odd[1:])\n    if len(evens) > len(odds):\n        return evens\n    else:\n        return odds\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    evens = []\n    odds = []\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    even_indicies = [i for i in range(len(l)) if i % 2 == 0]\n    even_l = []\n    for i in even_indicies:\n        even_l.append(l[i])\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups back into string.\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return encode_cyclic(s[::-1])"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # return string decoded by groups. Each of length 3.\n    return \"\".join(\n        [s[i:i + 3] for i in range((len(s) + 2) // 3)]\n    )\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[0] + group[1] + group[2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return encode_cyclic(s)[::-1]\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # groups = string split into groups of 3 characters\n    groups = [[s[i:i+3]] for i in range(0, len(s), 3)]\n    # cycle groups in reverse order\n    groups = groups[::-1]\n    # loop over groups to retrieve group characters.\n    # If length of group is 3, join characters and add to output.\n    # Else, join characters and continue cycling.\n    for i in range(len(groups)):\n        if len(groups[i]) == 3:\n            groups[i] = groups[i][1] + groups[i][0] + groups[i][2]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    nums = [2, 3]\n    index = 1\n    while index <= n:\n        if is_prime(n):\n            nums.append(fibonacci_number(nums[index-1], nums[index]))\n        index += 1\n    return nums[-1]\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    a, b = 0, 1\n    while a < n:\n        a, b = b, a + b\n        yield a\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    nth_fib = fibonacci(n)\n    if is_prime(nth_fib):\n        return nth_fib\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return n\n    else:\n        a, b = 1, 2\n        count = 0\n        while count < n - 1:\n            a, b = b, a + b\n            count += 1\n        return a\n    \n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n <= 1:\n        return\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # check if n is even\n    if n % 2 == 0:\n        return None\n    a, b = 2, 3\n    # calculate fibonacci series\n    for _ in range(n - 2):\n        a, b = b, a + b\n    # check if fibonacci is prime\n    if is_prime(a + b):\n        return a + b\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        if is_prime(n):\n            return n\n        else:\n            return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert type(n) == int and n > 0\n    if n <= 2:\n        return n\n    pf = [0] + [1] + [0] * (n - 1)\n    for i in range(2, n):\n        if pf[i]!= 0:\n            for j in range(2 * i, n, i):\n                pf[j] = 0\n    return 2 if pf[n] == 0 else pf[n]\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert type(n) is int, \"n should be integer\"\n    if n == 0 or n == 1:\n        return 1\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    fib_numbers = []\n    for i in range(1,n+1):\n        fib_numbers.append(fib(i))\n    return fib_numbers\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # TODO: Finish this function!\n    # the above is just a place holder.\n    # the function returns True if there are three distinct elements in the list that\n    # sum to zero, and False otherwise.\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(l) < 3:\n        return False\n    i = 0\n    while i < len(l):\n        if triples_sum_to_zero_helper(l, i, i + 1, i + 2, l[i]):\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(l) > 2 and any(set(l[0:2]) == set(l[2:]) and (sum(l[0:2]) == 0 or sum(l[0:2]) == -sum(l[2:])))\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # create dict from list\n    dict = {}\n    for i in l:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    # iterate through dict, if 3 elements sum to 0\n    for i in dict:\n        if dict[i] >= 3:\n            if i * 3 in dict:\n                if dict[i] * 3!= dict[i * 3]:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return any(s-n1-n2 in l for (n1,n2,s) in triples_sum_to_zero_helper(l))\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    l_set = set(l)\n    for i in l:\n        if -1*i in l_set and -2*i in l_set and -3*i in l_set:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(0, len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            if l[i] + l[j] + l[len(l)-1] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not l or len(l) == 1:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #  TODO\n    collisions = 0\n    i = 0\n    j = 1\n    while i < n:\n        while j < n:\n            if (cars_closest_to_others[i][0] - cars_closest_to_others[j][0])**2 + (cars_closest_to_others[i][1] - cars_closest_to_others[j][1])**2 <= car_width*car_width:\n                collisions += 1\n            j += 1\n        i += 1\n        j = i + 1\n    return collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return car_race_collisions(n, False)\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return 0\n    else:\n        return car_race_collision(n-1) + car_race_collision(n-1)\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert n >= 2, \"Not enough cars\"\n    # Find the sum of the position differences of all the cars\n    # For the n cars, each car's position is its index in the list\n    # that is being operated on\n    positions = [i for i in range(n)]\n    total_diff = sum(abs(i - j) for i, j in zip(positions, positions[1:]))\n    # For each car, find the opposite car and the distance\n    # between them\n    for i in range(n):\n        opposite = n - i - 1\n        opposite_diff = abs(positions[i] - positions[opposite])\n        # Count all collisions\n        if opposite_diff == total_diff:\n            return True\n    return False\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def max_dist(x1, x2):\n        return min(abs(x1 - x2), abs(x1 + x2))\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum(\n        (a < b) and (b < c)\n        for a, b, c in zip(\n            [car_speed_1() for _ in range(n)],\n            [car_speed_2() for _ in range(n)],\n            [car_speed_3() for _ in range(n)]\n        )\n    )\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n < 1:\n        raise ValueError('n must be a positive integer.')\n    if n % 2!= 0:\n        raise ValueError('n must be even.')\n    n = n // 2\n    car_collisions = 0\n    for i in range(n):\n        car_collisions += car_race_collision_helper(n, i)\n    return car_collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n < 2:\n        return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    num_collisions = 0\n    for i in range(n - 1):\n        if x_positions[i + 1] <= x_positions[i] + 4 and x_positions[i] >= x_positions[i + 1] - 4:\n            num_collisions += 1\n    return num_collisions\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    i = 0\n    while i < len(l):\n        l[i] += 1\n        i += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(map(lambda x: x + 1, l))\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    new = []\n    for i in l:\n        new.append(i+1)\n    return new\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(map(lambda x: x + 1, l))\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(len(l)):\n        result.append(l[i] + 1)\n    return result\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(l)):\n        if i == 0:\n            l[i] += 1\n        else:\n            l[i] = l[i-1] + 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    n = len(l)\n    for i in range(n):\n        l[i] += 1\n        if l[i] == 10:\n            l[i] = 0\n            if i == n-1:\n                l.append(1)\n        return l\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(map(lambda x: x+1, l))\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Write your code here.\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(l)):\n        if -l[i] in l:\n            count += 1\n    if count == len(l) - 1:\n        return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(l)-1):\n        if (l[i]+l[i+1]) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # for each number in the list, look for a pair that adds to zero\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(l) >= 2 and any(sum(x, y) == 0 for x in l for y in l if x!= y)\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # use set, which is much faster than a dictionary\n    s = set()\n    for i in l:\n        if i not in s:\n            s.add(i)\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if len(l) < 2:\n        return False\n    elif len(l) == 2:\n        if l[0] + l[1] == 0:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(l)):\n            for j in range(len(l)):\n                if i == j:\n                    continue\n                elif l[i] + l[j] == 0:\n                    return True\n        return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert type(l) == list, 'Input must be a list.'\n    \n    for i in range(len(l)-1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            if i!= j:\n                if l[i] + l[j] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sum = 0\n    count = 0\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            sum = l[i] + l[j]\n            if sum == 0:\n                count += 1\n    if count == 2:\n        return True\n    return False\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    y = x\n    string = ''\n    while y > 0:\n        y, digit = divmod(y, base)\n        string = str(digit) + string\n    return string\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = ''\n    x = str(x)\n    while x:\n        result = str(int(x, base) % 10) + result\n        x = str(int(x, base) // 10)\n    return result\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if x < 10:\n        return str(x)\n    else:\n        return change_base(x//base, base) + str(x%base)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    x = str(x)\n    num_str = \"\"\n    while x > 0:\n        remainder = x % base\n        if remainder < 10:\n            num_str = str(remainder) + num_str\n        else:\n            num_str = chr(ord('a') + remainder - 10) + num_str\n        x = int(x/base)\n    return num_str\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not isinstance(x, int) or not isinstance(base, int):\n        raise TypeError(\"Only integers\")\n    if x < 0:\n        return \"-\" + change_base(-x, base)\n    # Convert to string\n    chars = \"0123456789ABCDEF\"\n    chars_reverse = \"fedcba\"\n    ret = \"\"\n    # Calculate string length\n    if x == 0:\n        return \"0\"\n    string_len = len(str(x))\n    while x > 0:\n        x, rem = divmod(x, base)\n        ret = chars[rem] + ret\n    return ret if len(ret) <= string_len else chars_reverse[len(ret)] + ret\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return convert_to_base(x, base)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert x >= 0 and base >= 2, \"Input not valid.\"\n    if base == 10:\n        return str(x)\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    digits_dict = {num: c for num, c in zip(range(base), digits)}\n    result = \"\"\n    while x > 0:\n        result = digits_dict[x % base] + result\n        x //= base\n    return result\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    x_str = str(x)\n    base_str = str(base)\n    return x_str.replace(x_str[0], base_str)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if x <= 0 or base <= 0:\n        raise ValueError\n    res = ''\n    while x!= 0:\n        res = str(x % base) + res\n        x //= base\n    return res\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (a*h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    area = a * h / 2\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return a * h * 0.5\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    area = 1/2*a*h\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a*h/2\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert isinstance(n, int) and n >= 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 0\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        \ndef fib5(n):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 1\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4)\n        \ndef fib6(n):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 1\n    fib6(2) -> 1\n    fib6(3) -> 0\n    fib6(4) -> 2\n    fib6(5) -> 3\n    fib6(6) -> 5\n    fib6(7) -> 8\n    fib6(8) -> 13\n    fib6(9) -> 21\n    fib6(10) -> 34\n    fib6(11) -> 55\n    fib6(12) -> 89\n    fib6(13) -> 144\n    fib6(14) -> 233\n    fib6(15) -> 377\n    fib6(16) -> 610\n    fib6(17) -> 987\n    fib6(18) -> 1597\n    fib6(19) -> 2584\n    fib6(20) -> 4181\n    fib6(21) -> 6765\n    fib6(22) -> 10946\n    fib6(23) -> 17711\n    fib6(24) -> 28657\n    fib6(25) -> 46368\n    fib6(26) -> 75025\n    fib6(27) -> 1346269\n    fib6(28) -> 2459474\n    fib6(29) -> 4799836\n    fib6(30) -> 75025\n    fib6(31) -> 125862690\n    fib6(32) -> 317811776\n    fib6(33) -> 514229186\n    fib6(34) -> 832040\n    fib6(35) -> 135742\n    fib6(36) -> 301071\n    fib6(37) -> 791236\n    fib6(38) -> 102334155\n    fib6(39) -> 3524758518\n    fib6(40) -> 5702875\n    fib6(41) -> 9227465\n    fib6(42) -> 14930352\n    fib6(43) -> 2748779069\n    fib6(44) -> 46337013889\n    fib6(45) -> 75025\n    fib6(46) -> 99804135\n    fib6(47) -> 18796296\n    fib6(48) -> 36240793\n    fib6(49) -> 5222819\n    fib6(50) -> 817504\n    fib6(51) -> 13184\n    fib6(52) -> 215908\n    fib6(53) -> 362880\n    fib6(54) -> 513140\n    fib6(55) -> 805403\n    fib6(56) -> 1277775\n    "
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return fib4_memoized_memoized(n)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert n > 0, \"N must be a positive integer!\"\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert n >= 0, \"Invalid input\"\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n < 3:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n <= 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = len(l)\n    if n == 0:\n        raise ValueError('Empty list')\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(l) == 0:\n        raise ValueError('empty list')\n    return _median(l)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert l!= [], 'You should return the median of non-empty list'\n    if not l:\n        return None\n    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[int(len(l) / 2 - 1)] + l[int(len(l) / 2)]) / 2.0\n    else:\n        return l[int(len(l) / 2)]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # TODO\n    return None\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sorted_l = sorted(l)\n    if len(l)%2:\n        return sorted_l[len(sorted_l)//2]\n    else:\n        return (sorted_l[len(sorted_l)//2-1] + sorted_l[len(sorted_l)//2])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(l)\n    if n == 1:\n        return l[0]\n    a, b = (l[0], l[n//2]) if n % 2 else (l[n//2], l[n//2 - 1])\n    if a > b:\n        return median(l[:n//2])\n    else:\n        return median(l[n//2:])\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l.sort()\n    mid = len(l) // 2\n    if len(l) % 2 == 0:\n        return (l[mid-1] + l[mid]) / 2\n    else:\n        return l[mid]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(l) == 0:\n        return 0\n    elif len(l) % 2 == 0:\n        return median_helper(l, (len(l) - 1) // 2)\n    else:\n        return median_helper(l, len(l) // 2)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sorted_list = sorted(l)\n    n = len(sorted_list)\n    return sorted_list[n // 2] if n % 2 == 0 else sorted_list[n // 2] * 0.5\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(l)[len(l) // 2]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    text = text.lower()\n    text = text.replace(' ', '')\n    i = 0\n    j = len(text) - 1\n    while i <= j:\n        if text[i]!= text[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Remove spaces\n    text = text.replace(' ', '')\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(text) <= 1:\n        return True\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # your code here\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #get the length of text\n    length = len(text)\n    #set a pointer to go through the length of the text\n    #if it reaches the end, it must be a palindrome\n    left = 0\n    right = length - 1\n    #loop through the text\n    while left <= right:\n        #if they aren't equal, return False\n        if text[left]!= text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(text) <= 1:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n    \n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    while n < 0:\n        n += p\n    return n % p\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert 0 <= p < 2**n\n    return pow(p, 2**n - 2, 2**n)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 0:\n        return modp(n, p)\n    elif p < 0:\n        return modp(n, p)\n    else:\n        return ((n % p) % p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (n % p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # https://stackoverflow.com/questions/39593748/modulo-or-subtraction-with-integer-in-python/39593792#39593792\n    return pow(n, p-2, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (((n * modp(n, p - 2)) + p) % p) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert n >= 0\n    assert p > 0\n    x = 1\n    while n > 0:\n        if n % 2 == 1:\n            x = (x * p) % mod\n        n //= 2\n        p = (p * p) % mod\n    return x\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + 26) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for i in vowels:\n        text = text.replace(i, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    vowels = \"aeiou\"\n    \n    for char in text:\n        if char in vowels:\n            text = text.replace(char, \"\")\n            \n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    new_text = ''\n    for letter in text:\n        if letter not in \"aeiouAEIOU\":\n            new_text = new_text + letter\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    word = ''\n    for i in text:\n        if i.lower() not in vowels:\n            word += i\n    return word\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    vowels = ('a','e','i','o','u')\n    \n    new_string = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_string += char\n    \n    return new_string\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    new_text = ''\n    for i in text:\n        if i not in 'aeiouAEIOU':\n            new_text = new_text + i\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for vowel in \"aeiouAEIOU\":\n        text = text.replace(vowel, \"\")\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    vowels = 'aeiouAEIOU'\n    string = text\n    for char in string:\n        if char in vowels:\n            string = string.replace(char,'')\n    return string\n    \n    \n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vowels = 'aeiou'\n    new_text = \"\"\n    for i in text:\n        if i not in vowels:\n            new_text = new_text + i\n    return new_text\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for x in l:\n        if x > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return True if len(l) == 0 or all(x < t for x in l) else False\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return all(num < t for num in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for item in l:\n        if item > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    for i in l:\n        if i < t:\n            return False\n    return True\n    \n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return all(i < t for i in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return all(n < t for n in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for x in l:\n        if x > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    if s0 == s1:\n        return True\n    for i in range(len(s0)):\n        if s0[i] == s1[i] and s0[i]!= '*':\n            return True\n        if s0[i]!= s1[i] and s0[i]!= '*':\n            return False\n    return False\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    count = 0\n    for i in range(len(s0)):\n        if s0[i] == s1[i]:\n            count += 1\n        else:\n            return False\n    return count == len(s0)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # return all(x == y for x, y in zip(s0, s1))\n    return all([x == y for x, y in zip(s0, s1)])\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (all(s0[i] == s1[i] for i in range(len(s0))) and\n        all(s0[i] == s1[i] for i in range(len(s1), len(s0))))\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # return len(set(s0) - set(s1)) == 0\n    return (sorted(s0) == sorted(s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # your code here\n    return True if set(s0) == set(s1) else False\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(set(s0)) == len(set(s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s0, s1 = s0.lower(), s1.lower()\n    s0, s1 = set(s0), set(s1)\n    return s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return set(s0) == set(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(s0) == len(s1):\n        return len(set(s0).intersection(s1)) == len(s1)\n    return False\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return fib(n-2) + fib(n-1)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 0:\n        print(\"fib(%s) is undefined\" % n)\n        raise ValueError\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n >= 0\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert n >= 1\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert n >= 0\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    opening = set(\"<\")\n    closing = set(\">\")\n    opening_stack = []\n    \n    for character in brackets:\n        if character in opening:\n            opening_stack.append(character)\n        else:\n            if not opening_stack:\n                return False\n            opening_bracket = opening_stack.pop()\n            if character == \">\":\n                if opening_bracket!= \"<\":\n                    return False\n            elif character == \"<\":\n                if opening_bracket!= \">\":\n                    return False\n    return not opening_stack\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    stack = []\n    open_brackets = '<[{('\n    close_brackets = '>)]}'\n    for c in brackets:\n        if c in open_brackets:\n            stack.append(c)\n        elif c in close_brackets:\n            if len(stack) == 0:\n                return False\n            if stack.pop()!= open_brackets[close_brackets.index(c)]:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    opened_brackets = { \"<\": \">\", \">\": \"<\" }\n    closed_brackets = { \">\": \"<\", \"<\": \">\" }\n    if len(brackets) % 2!= 0:\n        return False\n    for bracket in brackets:\n        if bracket not in opened_brackets:\n            return False\n    for i in range(0, len(brackets), 2):\n        if brackets[i] == \"<\":\n            if brackets[i+1] not in closed_brackets:\n                return False\n        if brackets[i+1] == \">\":\n            if brackets[i] not in opened_brackets:\n                return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    for c in brackets:\n        if c == \"<\":\n            if not has_bracket(brackets, len(brackets) - 1):\n                return False\n        elif c == \">\":\n            if not has_bracket(brackets, 0):\n                return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    opening_brackets = 0\n    closing_brackets = 0\n    if len(brackets) % 2 == 1:\n        brackets = brackets + \">\"\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening_brackets += 1\n        if bracket == \">\":\n            closing_brackets += 1\n    if opening_brackets!= closing_brackets:\n        return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Brackets can be nested.\n    brackets = get_bracket_match(brackets)\n    for bracket in brackets:\n        if bracket[1]!= bracket[0] and bracket[1]!= \"<\":\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    opening, closing = \"([{<\", \")]}\"\n    if not (len(brackets) % 2 == 0):\n        return False\n    for i in range(len(brackets)):\n        if brackets[i] in opening:\n            if i == 0:\n                continue\n            return False\n        elif brackets[i] in closing:\n            if i == (len(brackets) - 1):\n                continue\n            if closing[brackets[i]] == brackets[i + 1]:\n                continue\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # the last two characters of the string are the closing brackets\n    bracket_char_loc = brackets[-2:]\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    open_brackets = 0\n    closing_brackets = 0\n    for bracket in brackets:\n        if bracket == '<':\n            open_brackets += 1\n        if bracket == '>':\n            closing_brackets += 1\n    return open_brackets == closing_brackets\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    bracket_stack = []\n    for character in brackets:\n        if character == '<':\n            bracket_stack.append('<')\n        elif character == '>':\n            if bracket_stack[-1] == '<':\n                bracket_stack.pop()\n            else:\n                return False\n    return not bracket_stack\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return all(x<=y for x, y in zip(l, l[1:])) or all(x>=y for x, y in zip(l, l[1:]))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    i = 1\n    while i < len(l):\n        if l[i-1] > l[i]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    i = 1\n    while i < len(l):\n        if l[i-1] < l[i]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = len(l)\n    for i in range(n-1):\n        if l[i] < l[i+1]:\n            continue\n        elif l[i] > l[i+1]:\n            return False\n        elif l[i] == l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # check each pair of adjacent values\n    for i in range(len(l)-1):\n        if l[i] >= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    increasing = True\n    for i in range(len(l) - 1):\n        if increasing and l[i] >= l[i + 1]:\n            return False\n        elif not increasing and l[i] <= l[i + 1]:\n            return False\n        else:\n            increasing = not increasing\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(l) < 2:\n        return False\n    if l[0] <= l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    l1_ = list(set(l1))\n    l2_ = list(set(l2))\n    return sorted(list(set(l1_).intersection(l2_)))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l1, l2 = list(sorted(l1)), list(sorted(l2))\n    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    common = []\n    for elem in l1:\n        if elem in l2:\n            if elem not in common:\n                common.append(elem)\n    return sorted(common)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    common_elements = set(l1) & set(l2)\n    return sorted(common_elements)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    common_list = []\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l1 = list(set(l1))\n    l2 = list(set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    c = []\n    for i in range(0, len(l1)):\n        if l1[i] in l2 and l1[i] not in c:\n            c.append(l1[i])\n    c.sort()\n    return c\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            if is_prime(i):\n                return i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    i = 2\n    while True:\n        if n % i == 0:\n            if prime_factor(i) == i:\n                return i\n        i += 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert n > 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    largest = 1\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            if i == n:\n                return i\n            else:\n                n = n/i\n                largest = i\n                i = 2\n        else:\n            i += 1\n    return largest\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert n > 1, f'n must be greater than 1, not {n}'\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            return factor\n        factor += 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    n -= 1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            n = n // i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    largest_prime = n\n    while n!= 1:\n        for i in range(2, n):\n            if n % i == 0:\n                if i > largest_prime:\n                    largest_prime = i\n                n = n // i\n                break\n    return largest_prime\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    largest_factor = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            if largest_factor < i:\n                largest_factor = i\n    return largest_factor\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    total = 0\n    if n <= 0:\n        return total\n    else:\n        for i in range(1, n + 1):\n            total = total + i\n        return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(range(1, n + 1))\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = 0\n    for i in range(1, n+1):\n        result = result + i\n    return result\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(range(1, n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum(x for x in range(1, n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(n+1):\n        total = total + i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    stack = []\n    # keep inserting opening bracket until you encounter a closing bracket\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    brackets = brackets[1:-1]\n    opening = 0\n    for char in brackets:\n        if char == \"(\":\n            opening += 1\n        else:\n            if opening == 0:\n                return False\n            opening -= 1\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n_bracket = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            n_bracket += 1\n        if bracket == \")\":\n            n_bracket -= 1\n        if n_bracket < 0:\n            return False\n    return n_bracket == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    opening_brackets = list(brackets)\n    counter = 0\n    for letter in opening_brackets:\n        if letter == \"(\":\n            counter += 1\n        elif letter == \")\":\n            counter -= 1\n        if counter < 0:\n            return False\n    if counter!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            bracket_stack.append(bracket)\n        else:\n            if bracket_stack == []:\n                return False\n            else:\n                bracket_stack.pop()\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert brackets, \"brackets is empty\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert brackets[0] == \"(\", \"brackets should begin with '('\"\n    assert brackets[-1] == \")\", \"brackets should end with ')'\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert len(brackets) >= 1\n    assert brackets[0] in [\"(\", \")\"]\n    assert len(brackets) % 2 == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    brackets = brackets.replace(\" \", \"\")\n    # We can't have overlapping brackets (you can have duplicates in a list)\n    # so we need to remove brackets that don't have pairs\n    brackets = remove_non_brackets(brackets)\n    \n    bracket_pairs = get_bracket_pairs(brackets)\n    if len(bracket_pairs) == 0:\n        return False\n    else:\n        # Now we just need to check if the bracket pairs are correctly matched\n        # Take the first bracket in each pair\n        for pair in bracket_pairs:\n            opening_bracket = pair[0]\n            closing_bracket = pair[1]\n            if opening_bracket not in brackets:\n                return False\n            else:\n                brackets = brackets.replace(opening_bracket, \"\")\n                if brackets == \"\":\n                    return True\n        return False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert brackets, 'Brackets must not be empty.'\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    res = [1] * len(xs)\n    for i in range(1, len(xs)):\n        res[i] = xs[i] * res[i-1]\n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    derivative = []\n    derivative.append(1)\n    for i in range(1, len(xs)):\n        derivative.append(xs[i] + xs[i] * xs[i-1] + xs[i] * xs[i] * xs[i-1])\n    return derivative\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n = len(xs)\n    return [xs[i] * (n - i) for i in range(n)]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    derivative_coefficients = []\n    # Find the degree of xs\n    degree = len(xs) - 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    xs.reverse()\n    ret = []\n    for i in range(1, len(xs)):\n        ret.append(xs[i]*i)\n    ret.reverse()\n    return ret\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    xs_len = len(xs)\n    if xs_len == 1:\n        return []\n    else:\n        xs_derivative = []\n        xs_derivative.append(xs[1])\n        for i in range(2, xs_len):\n            xs_derivative.append(xs[i] * xs[i - 1])\n        xs_derivative.append(1)\n        return xs_derivative\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [xs[i] * (len(xs) - i - 1) for i in range(len(xs))]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [xs[i] + xs[i+1] * x for i in range(len(xs) - 1)]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    xs = xs[::-1]\n    d = []\n    for i in range(1, len(xs)):\n        d.append(i * xs[i])\n    return d\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = []\n    for i in range(len(xs)):\n        if i!= 0:\n            res.append(xs[i] * i)\n    return res\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n > 2:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return fibfib_recur(n, 0, 1)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n < 3:\n        return n\n    return fibfib(n-1) + fibfib(n-2)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibfib(n-1) + fibfib(n-2)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    vowels = set(['a','e','i','o','u'])\n    total_vowels = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            total_vowels += 1\n        if i == len(s)-1:\n            if total_vowels == 0:\n                return 0\n            elif total_vowels == 1:\n                return 1\n            else:\n                return total_vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    vowels = set(['a','e','i','o','u'])\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n    count = 0\n    for i in s:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\" or i == \"y\":\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in s:\n        if i in \"aeiouy\":\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    vowels = 0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum(1 for ch in s if ch in \"aeiouy\")\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in s:\n        if i in \"aeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    vowels = \"aeiou\"\n    vowel_count = 0\n    for i in vowels:\n        if i in s:\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for char in s:\n        if char in VOWELS:\n            count += 1\n    return count\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if shift >= len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x_list[(x_list.index(x) + shift) % len(x_list)]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if shift > len(str(x)):\n        x = str(x)[::-1]\n    else:\n        x = str(x)\n        for i in range(shift):\n            x = x[1:] + x[0]\n    return x\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # number of digits\n    digits = len(str(x))\n    # circular shift in positive direction\n    shift = shift % digits\n    # number of digits in x and y\n    x_digits = digits - shift\n    y_digits = shift\n    # string to return\n    x_string = \"\"\n    # loop for x digits\n    for i in range(0, x_digits):\n        x_string += str(x // 10**i % 10)\n        x //= 10**i\n    # loop for y digits\n    for i in range(0, y_digits):\n        x_string += str(x // 10**i % 10)\n        x //= 10**i\n    return x_string\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    x = str(x)\n    if shift < 0:\n        shift = -shift\n        x = x[shift:] + x[:shift]\n    elif shift > 0:\n        x = x[shift:] + x[:shift]\n    else:\n        return x\n    return int(x)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    res = ''\n    for i in range(len(str(x))):\n        if i + shift >= len(str(x)):\n            res = res + str(x)[i - (i + shift)]\n        else:\n            res = res + str(x)[i + shift]\n    return res\n    \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    x = str(x)\n    return x[shift:] + x[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    digits = list(str(x))\n    shift = shift % len(digits)\n    return \"\".join(digits[shift:] + digits[:shift])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if shift > len(x):\n        return int(x[::-1])\n    else:\n        return int(\"\".join(x[-shift:] + x[:shift]))\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if shift > len(str(x)):\n        return str(x)[-shift:] + str(x)[:-shift]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum([ord(x) for x in s])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Your Code Here\n    if not s:\n        return 0\n    n = s.upper()\n    return sum([ord(i) for i in n])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum(map(lambda x: ord(x) - 96, list(s)))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum(map(lambda char: ord(char) - 64, s))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sum = 0\n    for i in range(len(s)):\n        sum += ord(s[i]) - 64\n    return sum"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # your code here\n    sum = 0\n    for i in s:\n        sum += ord(i)\n    return sum"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    return sum(ord(c) for c in s.upper() if ord(c) >= ord('A') and ord(c) <= ord('Z'))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum(map(lambda x: ord(x) - ord('0') if x.isnumeric() else ord(x) - ord('A'), s))\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    def min_dist(s,n):\n        if n == 1:\n            return 1\n        if n == 0:\n            return 0\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 7\n        \n        if s[0] + s[1] == 0:\n            return min_dist(s[2:], n - 2)\n        elif s[0] + s[1] == 1:\n            return min_dist(s[2:], n - 2) + min_dist(s[2:], n - 1)\n        elif s[0] + s[1] == 2:\n            return min_dist(s[2:], n - 2) + min_dist(s[2:], n - 1) + min_dist(s[2:], n)\n        elif s[0] + s[1] == 3:\n            return min_dist(s[2:], n - 2) + min_dist(s[2:], n - 1) + min_dist(s[2:], n) + min_dist(s[2:], n + 1)\n        elif s[0] + s[1] == 4:\n            return min_dist(s[2:], n - 2) + min_dist(s[2:], n - 1) + min_dist(s[2:], n) + min_dist(s[2:], n + 1) + min_dist(s[2:], n + 2)\n        elif s[0] + s[1] == 5:\n            return min_dist(s[2:], n - 2) + min_dist(s[2:], n - 1) + min_dist(s[2:], n) + min_dist(s[2:], n + 1) + min_dist(s[2:], n + 2) + min_dist(s[2:], n + 3)\n        elif s[0] + s[1] == 6:\n            return min_dist(s[2:], n - 2) + min_dist(s[2:], n - 1) + min_dist(s[2:], n) + min_dist(s[2:], n + 1) + min_dist(s[2:], n + 2) + min_dist(s[2:], n + 3) + min_dist(s[2:], n + 4)\n        elif s[0] + s[1] == 7:\n            return min_dist(s[2:], n - 2) + min_dist(s[2:], n - 1) + min_dist(s[2:], n) + min_dist(s[2:], n + 1) + min_dist(s[2:], n + 2) + min_dist(s[2:], n + 3) + min_dist(s[2:], n + 4) + min_dist(s[2:], n + 5)\n    \n    return min_dist(s,n)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Count the number of apples and oranges in the basket\n    apple_count = s.count(\"apples\")\n    orange_count = s.count(\"oranges\")\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # your code here\n    s = s.split(\" \")\n    n = int(n)\n    a = int(s[0])\n    b = int(s[1])\n    return a*n - b*n\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum(s.split(\" \")[0]) - sum(s.split(\" \")[1])\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (n-s) - (s-1)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return s.count(\"mango\")\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s = s.split(\" \")\n    s = list(map(int, s))\n    return sum(s)-sum(range(n-sum(s),n))\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = s.replace(\" \",\"\")\n    s = s.split(\" \")\n    for i in range(len(s)):\n        s[i] = int(s[i])\n    a,o = s[0],s[1]\n    f = 1\n    if o > a:\n        for i in range(2,len(s)):\n            f = f * s[i]\n        f = f/o\n    else:\n        for i in range(2,len(s)):\n            f = f * s[i]\n        f = f/a\n    if f < 0:\n        return(0)\n    return(int(f))\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n > 100 and n < 100:\n        raise ValueError(\"Error\")\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    dist = []\n    for i in range(len(s)-1):\n        if s[i] == 'a' and s[i+1] == 'p':\n            dist.append(int(s[i+2]))\n        if s[i] == 'o' and s[i+1] == 'r':\n            dist.append(int(s[i+2]))\n        if s[i] =='m' and s[i+1] == 'a':\n            dist.append(int(s[i+2]))\n    return sum(dist)\n    \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Time: O(nlogn)\n    # Space: O(1)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not arr:\n        return []\n    else:\n        # O(n)\n        even_nums = sorted(filter(lambda x: (x % 2 == 0), arr))\n        if len(even_nums) == 0:\n            return []\n        elif len(even_nums) == 1:\n            return [even_nums[0], arr.index(even_nums[0])]\n        else:\n            return [even_nums[0], arr.index(even_nums[0])]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # # Brute force\n    # # Time O(n^2) | Space O(n)\n    # def compare(a, b):\n    #     if a[0] % 2 == 0 and a[1] % 2 == 1 or b[0] % 2 == 0 and b[1] % 2 == 1:\n    #         return 0\n    #     else:\n    #         return 1\n    #\n    #\n    # def get_children(n):\n    #     if n % 2 == 0:\n    #         return [n + 1, n + 2]\n    #     else:\n    #         return [n - 1, n - 2]\n    #\n    #\n    # def bs_tree(tree):\n    #     if not tree:\n    #         return []\n    #\n    #     left_sub_tree = bs_tree(tree[0])\n    #     right_sub_tree = bs_tree(tree[1])\n    #\n    #     sorted_tree = sorted(tree, key=lambda x: x[0])\n    #     l_child_index = 0\n    #     r_child_index = 0\n    #     l_child_node = None\n    #     r_child_node = None\n    #\n    #     while l_child_index < len(l_sub_tree) and r_child_index < len(r_sub_tree):\n    #         if compare(sorted_tree[0], l_sub_tree[l_child_index]) > 0:\n    #             return l_sub_tree[l_child_index]\n    #         if compare(sorted_tree[0], r_sub_tree[r_child_index]) > 0:\n    #             return r_sub_tree[r_child_index]\n    #\n    #         l_child_index += 1\n    #         r_child_index += 1\n    #\n    #\n    # # Time O(n) | Space O(1)\n    # def bs_tree(tree):\n    #     if not tree:\n    #         return []\n    #\n    #     left_sub_tree = bs_tree(tree[0])\n    #     right_sub_tree = bs_tree(tree[1])\n    #\n    #     return sorted(left_sub_tree + right_sub_tree)\n    #\n    #\n    # # Time O(n) | Space O(n)\n    # def bs_tree(tree):\n    #     if not tree:\n    #         return []\n    #\n    #     left_sub_tree = bs_tree(tree[0])\n    #     right_sub_tree = bs_tree(tree[1])\n    #\n    #     return sorted(left_sub_tree + right_sub_tree + tree)\n    #\n    #\n    # def bs_tree(tree):\n    #     if not tree:\n    #         return []\n    #\n    #     left_sub_tree = bs_tree(tree[0])\n    #     right_sub_tree = bs_tree(tree[1])\n    #\n    #     sorted_tree = sorted(tree, key=lambda x: x[0])\n    #\n    #     l_child_index = 0\n    #     r_child_index = 0\n    #     l_child_node = None\n    #     r_child_node = None\n    #\n    #     while l_child_index < len(left_sub_tree) and r_child_index < len(right_sub_tree):\n    #         if compare(sorted_tree[0], left_sub_tree[l_child_index]) > 0:\n    #             return left_sub_tree[l_child_index]\n    #         if compare(sorted_tree[0], right_sub_tree[r_child_index]) > 0:\n    #             return right_sub_tree[r_child_index]\n    #\n    #         l_child_index += 1\n    #         r_child_index += 1\n    #\n    #\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # # Method 1 (Brute Force):\n    # # Time: O(n^2) | Space: O(1)\n    # # loop through array, check if even\n    # # if even return smallest even value\n    # # if not even return smallest value\n    # # keep track of min even value and min index\n    # # O(n)\n    # l = len(arr)\n    # if l > 0:\n    #     for i in range(l):\n    #         for j in range(i+1, l):\n    #             if arr[i] % 2 == 0 and arr[j] % 2!= 0:\n    #                 if arr[i] < arr[j]:\n    #                     return arr[i]\n    #                 else:\n    #                     return arr[j]\n    #     return []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n    # Solution 1\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # values = sorted(arr)\n    # if len(values) == 0:\n    #     return []\n    # elif len(values) == 1:\n    #     return [values[0], 0]\n    # elif len(values) == 2:\n    #     return [values[0], 0] if values[0] == values[1] else [values[1], 1]\n    # i = 0\n    # j = len(values) - 1\n    # while i < j:\n    #     while i < j and values[i] % 2 == 1:\n    #         i += 1\n    #     while i < j and values[j] % 2 == 0:\n    #         j -= 1\n    #     if i < j:\n    #         values[i], values[j] = values[j], values[i]\n    # if i == j:\n    #     if values[i] % 2 == 0:\n    #         values[i], values[j] = values[j], values[i]\n    #     return [values[i], i]\n    # else:\n    #     return []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    nums = arr[:]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sorted_nodes = sorted(arr, key=lambda node: node % 2)\n    \n    if not sorted_nodes:\n        return []\n    return [sorted_nodes[0], arr.index(sorted_nodes[0])]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Time: O(N)\n    # Space: O(N)\n    \n    even_min = min(x for x in arr if x % 2 == 0)\n    if even_min == 0:\n        return [even_min, -1]\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    lst.sort(reverse=True)\n    n = 0\n    for i in range(len(lst)):\n        n = lst[i]\n        if n >= 1:\n            break\n    if n < 1:\n        return -1\n    for i in range(len(lst)):\n        if lst[i] > n:\n            return lst[i]\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l = 0\n    freq = 0\n    m = 0\n    if lst == []:\n        return -1\n    else:\n        for i in lst:\n            if i > 0:\n                if i > m:\n                    m = i\n                    freq = 1\n                elif i == m:\n                    freq += 1\n            else:\n                return -1\n        if freq > 0:\n            return m\n        else:\n            return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    max_freq = 0\n    max_freq_num = 0\n    for i in lst:\n        if i > 0 and i > max_freq_num:\n            max_freq_num = i\n            max_freq = 1\n        elif i == max_freq_num:\n            max_freq += 1\n    return -1 if max_freq < 1 else max_freq_num\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst = sorted(lst, reverse=True)\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            if lst[i] > lst[i+1]:\n                return lst[i]\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(lst) == 0: return -1\n    if max(lst) == 0: return -1\n    res = lst[0]\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] > 0:\n            count += 1\n        else:\n            count = 1\n        if count >= res:\n            res = count\n    return -1 if count == 0 else res\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    lst = sorted(lst)\n    if len(lst) == 0:\n        return -1\n    \n    max_value = max(lst)\n    for i in range(1, max_value+1):\n        count = 0\n        for j in lst:\n            if i == j:\n                count += 1\n        if count >= i:\n            return i\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s = set()\n    for i in lst:\n        if i in s:\n            s.add(i)\n            lst.remove(i)\n            break\n        s.add(i)\n    \n    if len(lst) == 0:\n        return -1\n    \n    return max(lst)\n    \ndef max_count(lst):\n    '''\n    You are given a non-empty list of non-negative integers. Return the largest non-negative integer in the \n    list.\n    The frequency of each integer in the list should be as high as possible.\n    If that is not possible, return -1.\n    Examples:\n        max_count([3, 4, 6, 2, 3]) == 4\n        max_count([2, 4, 6, 2, 3]) == 3\n        max_count([2, 4, 6, -2, 3]) == -1\n    '''\n    s = set()\n    for i in lst:\n        if i not in s:\n            s.add(i)\n            lst.remove(i)\n            break\n    \n    if len(lst) == 0:\n        return -1\n    \n    return max(lst)\n    \ndef move_zeros(lst):\n    '''\n    You are given a list. You have to move zero to the end of the list.\n    Examples:\n        move_zeros([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\n        move_zeros([0, 1, 0, 0, 3]) == [1, 3, 0, 0, 0]\n        move_zeros([0, 0, 1, 2, 0, 1, 2]) == [1, 2, 1, 2, 0, 0, 0]\n    '''\n    new = []\n    for i in range(len(lst)):\n        if lst[i]!= 0:\n            new.append(lst[i])\n    \n    for i in range(len(new)):\n        if new[i] == 0:\n            new = new[i:]\n            new = new + new[:i]\n            break\n            \n    return new\n    \ndef max_profit(prices):\n    '''\n    You are given a list of integers. Return the maximum profit you can take by buying and selling at most one share of any\n    stock. You can only sell in positive shares.\n    Examples:\n        max_profit([9, 11, 8, 5, 7, 10]) == 8\n        max_profit([7, 6, 4, 3, 1]) == 0\n        max_profit([11, 10, 9]) == 2\n    '''\n    s = 0\n    for i in range(len(prices)):\n        if i == 0 or prices[i] > prices[i - 1]:\n            s = max(s, prices[i] - prices[i - 1])\n    return s\n    \ndef is_valid(s):\n    '''\n    You are given a string. Check if this string is a valid Roman numeral.\n    Examples:\n        is_valid(\"I\") == True\n        is_valid(\"VIII\") == True\n        is_valid(\"XXII\") == False\n        is_valid(\"CCXXXIV\") == True\n    '''\n    d = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n    s = s.split('I')\n    n = 0\n    for i in s:\n        n += d[i]\n        if len(i) > 1 and d[i] < d[i[1]]:\n            return False\n    return n == d[s[-1]]\n    \ndef is_valid_iterative(s):\n    '''\n    You are given a string. Check if this string is a valid Roman numeral.\n    Examples:\n        is_valid_iterative(\"I\") == True\n        is_valid_iterative(\"VIII\") == True\n        is_valid_iterative(\"XXII\") == False\n        is_valid_iterative(\"CCXXXIV\") == True\n    '''\n    d = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n    stack = ["
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    m = -1\n    for i in lst:\n        if i > 0 and i > m:\n            m = i\n    return m"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = {}\n    for e in lst:\n        n[e] = n.get(e, 0) + 1\n    for e in lst:\n        if e > 0 and n[e] >= e:\n            return e\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    temp=[]\n    temp.append(0)\n    \n    for i in range(1,len(lst)):\n        if(lst[i]>lst[temp[-1]]):\n            temp.append(i)\n            \n    if(temp[-1]==len(lst)-1):\n        return -1\n    else:\n        return lst[temp[-1]+1]\n    \n    \n    \n    \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(lst, reverse=True)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not lst:\n        return []\n    return lst[len(lst)//2:] + lst[:len(lst)//2]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(lst, reverse=True)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not lst:\n        return []\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        return lst.remove(min_val) + lst.remove(max_val) + lst.remove(min_val)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(lst, key=int)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return []\n    else:\n        length = len(lst)\n        return lst[length-1:] + lst[:length-1]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # tricky version:\n    # (a) do it all,\n    # (b) do it without doing it all,\n    # (c) do it all, and use a nice pythonic method,\n    # (d) do it all, and use a beautiful pythonic method,\n    # (e) do it all, and use a functional version of it.\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = len(lst)\n    if n == 0: return []\n    if n == 1: return lst\n    for i in range(0, n-1):\n        for j in range(0, n-i-1):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not lst:\n        return []\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not lst:\n        return lst\n    lst.sort()\n    strange_sort_list(lst[1:])\n    return lst\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    elif a+b > c and a+c > b and b+c > a:\n        return round((a*b*c)/2, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # define a few parameters\n    s = (a + b + c) / 2\n    t = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if t == int(t):\n        return t\n    return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # calculate the semi-perimeter and area of triangle\n    s = (a + b + c) / 2\n    a = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return round(a, 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    side_a = a\n    side_b = b\n    side_c = c\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    tri_area = (a + b + c) / 2\n    if tri_area == a or tri_area == b or tri_area == c:\n        return round(tri_area, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return 0.5 * (a + b + c)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    else:\n        # check if the triangle is valid\n        if a + b < c:\n            return -1\n        if b + c < a:\n            return -1\n        if a + c < b:\n            return -1\n        # this triangle is valid\n        return 0.5 * abs(a * b * c)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    else:\n        x = abs(a * b) / 2\n        y = abs(b * c) / 2\n        z = abs(a * c) / 2\n        return round((x + y + z),2)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s = (a + b + c) / 2\n    \n    if s <= a or s <= b or s <= c:\n        return -1\n    \n    return (s * (s - a) * (s - b) * (s - c)) **.5\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round((a*b*c)/2, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if is_palindromic(q) and sum(q)<=w:\n        return True\n    return False\n    \n    \ndef get_min_max(q, w):\n    '''\n    Write a function that returns the minimum and maximum weight of a palindromic list.\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    if (len(q) == 0 or len(q) == 1):\n        return False\n    \n    s = 0\n    for x in q:\n        s += x\n    \n    return s <= w and is_palindrome(q)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # write your code here\n    def find_max(list_object):\n        max_value = 0\n        for i in range(len(list_object)):\n            if (max_value < list_object[i]):\n                max_value = list_object[i]\n        return max_value\n    \n    if (q == None or len(q) == 0 or len(q) > 1000):\n        return False\n    if (len(q) == 1):\n        return True\n    if (len(q) == 2):\n        return q[0] == q[1] and will_it_fly(q[0], w) == False\n    max_value = find_max(q)\n    i = 0\n    j = len(q) - 1\n    while(i < j):\n        if (q[i] + q[j] == max_value):\n            i += 1\n            j -= 1\n        elif (q[i] + q[j] < max_value):\n            i += 1\n        else:\n            j -= 1\n    if (i == j):\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def is_balanced(lst):\n        # Determining if the list is balanced\n        return (lst == sorted(lst))\n    \n    def sum_elem(lst):\n        # getting sum of elements in the list\n        return sum(lst)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if is_palindrome(q):\n        s = 0\n        for i in q:\n            s += i\n        if s <= w:\n            return True\n        return False\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if is_palindromic(q) and (sum(q) <= w):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    \n    def palindrome(l):\n        '''\n        Returns True if l is a palindrome.\n        '''\n        l = list(l)\n        l.reverse()\n        return l == l[::-1]\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # check if the object is balanced\n    if is_palindrome(q):\n        # check if the object is balanced and sum of its elements is less than or equal to maximum possible weight\n        if sum(q)<=w:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #brute force solution\n    '''\n    if(q[0]==q[-1]):\n        if(sum(q)<=w):\n            return True\n        else:\n            return False\n    return False\n    '''\n    \n    #brute force solution 2\n    '''\n    if(q[0]==q[-1]):\n        return True\n    if(q[0]==0):\n        return True\n    else:\n        return False\n    '''\n    #slightly better solution\n    '''\n    if(q[0]==q[-1]):\n        if(sum(q)<=w):\n            return True\n        else:\n            return False\n    elif(q[0]==0):\n        return True\n    else:\n        return False\n    '''\n    #slightly better solution 2\n    '''\n    if(q[0]==q[-1]):\n        if(sum(q)<=w):\n            return True\n        else:\n            return False\n    elif(q[0]==0):\n        return True\n    else:\n        return False\n    '''\n    #A better solution\n    '''\n    if(q[0]==q[-1]):\n        if(sum(q)<=w):\n            return True\n        else:\n            return False\n    if(q[0]==0):\n        return True\n    else:\n        return False\n    '''\n    #O(1) time\n    '''\n    if(q[0]==q[-1]):\n        return True\n    elif(q[0]==0):\n        return True\n    return False\n    '''\n    #O(n) time\n    if(q[0]==q[-1]):\n        if(sum(q)<=w):\n            return True\n        else:\n            return False\n    elif(q[0]==0):\n        return True\n    return False\n    '''\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    possible = set()\n    for num in range(1, len(arr)):\n        possible = possible.union(set(range(num, -1, -1)))\n        possible = possible.union(set(range(0, num + 1)))\n    return min(possible - set(arr))"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    max_digit = max(arr)\n    min_digit = min(arr)\n    change_count = 0\n    for i in range(1, max_digit):\n        # count the number of times that i and its reverse is found\n        if arr.count(i) * 2 == arr.count(i * -1):\n            change_count += 1\n    return max(change_count, abs(min_digit - max_digit))\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(arr) <= 1:\n        return 0\n    min = 0\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i]!= i + 1:\n            arr[i], arr[arr[i] - 1] = arr[arr[i] - 1], arr[i]\n            min += 1\n            if arr[i] < len(arr):\n                arr[i+1:] = arr[i+1:][::-1]\n    return min\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum(1 if i == j else abs(i - j) for i, j in zip(arr, arr[::-1]))\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # build the map of indices to occurances\n    occurences = {}\n    for idx, item in enumerate(arr):\n        if item in occurences:\n            occurences[item].append(idx)\n        else:\n            occurences[item] = [idx]\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    min_changes = 0\n    for i in range(len(arr)):\n        if i < len(arr)-1:\n            if arr[i]!= arr[i+1]:\n                min_changes += 1\n    return min_changes\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Sort the array.\n    arr.sort()\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \"\"\"\n    All the letters in the input array should be in their original order.\n    \n    The minimum number of changes required is:\n    - one letter changed (1 letter)\n    - two letters changed (2 letters)\n    - three letters changed (3 letters)\n    \n    These are called 2 and 3 letter changes\n    \"\"\"\n    # find the first 2 letter changes\n    # then find the rest 3 letter changes\n    # first is all in correct order\n    # rest is all in incorrect order\n    # get the number of letters in the correct order\n    # get the number of letters in the incorrect order\n    # these are the number of letter changes\n    n = len(arr)\n    count_correct_order = n\n    count_in_correct_order = count_correct_order\n    \n    for i in range(n):\n        if arr[i]!= i + 1:\n            count_correct_order -= 1\n            count_in_correct_order += 1\n    # since we are changing at most 2 letters at a time\n    # if we are less than 2 letters, return 0\n    if count_correct_order < 2:\n        return 0\n    \n    # find the first 3 letter changes\n    count_incorrect_order = n - count_correct_order\n    \n    for i in range(n):\n        if arr[i]!= i + 1:\n            count_incorrect_order -= 1\n            count_correct_order += 1\n    if count_incorrect_order < 3:\n        return 0\n    \n    return count_correct_order + count_incorrect_order\n    \n    \n    \n    \nprint(smallest_change([1,2,3,5,4,7,9,6])) # 4\nprint(smallest_change([1,2,3,4,3,2,2])) # 1\nprint(smallest_change([1,2,3,2,1])) # 0\nprint(smallest_change([1,2,2,3,1,1])) # 0\nprint(smallest_change([2,1])) # 1\nprint(smallest_change([2,1,1])) # 2\nprint(smallest_change([2,1,1,1,1])) # 2\nprint(smallest_change([2,1,2,1])) # 1\nprint(smallest_change([2,1,2,1,2])) # 1\nprint(smallest_change([2,1,2,1,3,2])) # 2\nprint(smallest_change([2,1,2,1,3,2,3])) # 2\nprint(smallest_change([2,1,2,1,3,2,3,3])) # 1\nprint(smallest_change([2,1,2,1,3,2,3,3,3])) # 2\nprint(smallest_change([2,1,2,1,3,2,3,3,3,3])) # 2\nprint(smallest_change([2,1,2,1,3,2,3,3,3,3,3])) # 2\nprint(smallest_change([2,1,2,1,3,2,3,3,3,3,3,3])) # 2\nprint(smallest_change([2,1,2,1,3,2,3,3,3,3,3,3,3])) # 2\nprint(smallest_change([2,1,2,1,3,2,3,3,3,3,3,3,3,3])) # 3\nprint(smallest_change([2,1,2,1,3,2,3,3,3,3,3,3,3,3,3])) # 1\nprint(smallest_change([2,1,2,1,3,2,3,3,3,3,3,3,3,3,3,3])) # 3\nprint(smallest_change([2,1,2,1,3,2,3,3,3,3,3,3,3,3,3,3,3])) # 3\nprint(smallest_change([2,1,2,1,3,2,3,3,3,3,3,3,3,3,3,3,3,3])) # 3\nprint(smallest_chang"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    # Using an array as a hash map\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst1 if len(lst1) < len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (sorted(lst1, key=len, reverse=True) + sorted(lst2, key=len, reverse=True))\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    lst = []\n    for a,b in zip(lst1, lst2):\n        if len(a) < len(b):\n            lst.append(a)\n    if len(lst) == 0:\n        return lst\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return lst\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count_lst = []\n    for i in lst1:\n        count_lst.append(len(i))\n    for j in lst2:\n        if len(j) in count_lst:\n            count_lst.remove(len(j))\n    return lst1 if not count_lst else lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return lst1 if (len(lst1)<len(lst2)) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if not lst1 and not lst2:\n        return []\n    elif not lst1 or not lst2:\n        return lst1 or lst2\n    elif len(lst1) < len(lst2):\n        return total_match(lst2, lst1)\n    else:\n        return total_match(lst1, lst2[:len(lst1)]) + total_match(lst2[len(lst1):], lst1)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return lst1 + lst2 if len(lst1) < len(lst2) else lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(lst1) == 0: return lst1\n    if len(lst2) == 0: return lst2\n    if len(lst1) > len(lst2): return lst1\n    if len(lst1) < len(lst2): return lst2\n    return lst1 if len(lst1) == len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = []\n    if lst1 == [] or lst2 == []:\n        return result\n    else:\n        for i in lst1:\n            if len(i) <= len(lst2):\n                result.append(i)\n        for i in lst2:\n            if len(i) <= len(lst1) and i not in result:\n                result.append(i)\n        return result\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a < 100:\n        return False\n    else:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    x = []\n    for i in range(1, 100):\n        if i * 3 == 100 and i * 5 == 100 and i * 7 == 100:\n            x.append(i)\n            \n    if a == x[0] * x[1] * x[2]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(2, 100):\n        if a % i == 0:\n            if (3 * i + 1) % i!= 0 and (3 * i - 1) % i!= 0:\n                return True\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    prime_list = []\n    for i in range(1, 101):\n        if is_prime(i):\n            prime_list.append(i)\n    if a in prime_list:\n        return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    a = int(a)\n    if a % 3 == 0:\n        return True\n    for i in range(3, a + 1, 3):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for n in range(1,100):\n        if n % a == 0 and n!= a:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(2, 100):\n        if a % i == 0:\n            if i == 3:\n                if a / i!= 1:\n                    return True\n                return False\n            elif is_prime(i) == True:\n                if i == 5:\n                    if a / i!= 1:\n                        return True\n                    return False\n                else:\n                    return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    for i in range(2,30):\n        if i % a == 0:\n            if i!= a:\n                return False\n            else:\n                if i == a:\n                    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    primes = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199)\n    for i in primes:\n        if (a % i == 0):\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (a % 3 == 0) and (a % 5 == 0)\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return int(n**x) == x\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return n**int(x) == x\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return x%n == 0 and x/n < (n-1)/n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert x == int(x) and n == int(n)\n    # x**n\n    return x**n == n\n    # return x**n <= n\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert(n > 0 and x > 0)\n    if n == 1:\n        return x == 1\n    if n == 0:\n        return False\n    if n == 2:\n        return x == x*x\n    if x == n:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        else:\n            return True\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if x == 0 or x == 1:\n        return True\n    if n == 1:\n        return False\n    return x % n == 0\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n ** int(n) == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return False\n    return x == n * (x // n)\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return int(x**n) == x"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x**n==int(x**n)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    return int(a ** (1/3)) == a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return a**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return a**(1/3)%1==0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    if a**3 == a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a**3 == a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # 2x2x2 = 8\n    # 2x2x3 = 9\n    # 2x2x4 = 16\n    # 2x2x5 = 25\n    # 2x2x6 = 36\n    # 2x2x7 = 49\n    # 2x2x8 = 64\n    # 2x2x9 = 81\n    # 2x2x10 = 100\n    # 2x3x2 = 18\n    # 2x3x3 = 36\n    # 2x3x4 = 48\n    # 2x3x5 = 60\n    # 2x3x6 = 72\n    # 2x3x7 = 81\n    # 2x3x8 = 96\n    # 2x3x9 = 108\n    # 2x3x10 = 120\n    # 2x4x2 = 24\n    # 2x4x3 = 48\n    # 2x4x4 = 64\n    # 2x4x5 = 80\n    # 2x4x6 = 96\n    # 2x4x7 = 112\n    # 2x4x8 = 128\n    # 2x4x9 = 144\n    # 2x4x10 = 160\n    # 2x5x2 = 30\n    # 2x5x3 = 45\n    # 2x5x4 = 60\n    # 2x5x5 = 75\n    # 2x5x6 = 90\n    # 2x5x7 = 105\n    # 2x5x8 = 135\n    # 2x5x9 = 150\n    # 2x5x10 = 165\n    # 2x6x2 = 42\n    # 2x6x3 = 54\n    # 2x6x4 = 66\n    # 2x6x5 = 78\n    # 2x6x6 = 90\n    # 2x6x7 = 108\n    # 2x6x8 = 132\n    # 2x6x9 = 156\n    # 2x6x10 = 180\n    # 2x7x2 = 42\n    # 2x7x3 = 57\n    # 2x7x4 = 72\n    # 2x7x5 = 87\n    # 2x7x6 = 108\n    # 2x7x7 = 129\n    # 2x7x8 = 144\n    # 2x7x9 = 165\n    # 2x7x10 = 198\n    # 2x8x2 = 24\n    # 2x8x3 = 48\n    # 2x8x4 = 64\n    # 2x8x5 = 80\n    # 2x8x6 = 96\n    # 2x8x7 = 112\n    # 2x8x8 = 128\n    # 2x8x9 = 144\n    # 2x8x10 = 160\n    # 2x9x2 = 36\n    # 2x9x3 = 48\n    # 2x9x4 = 60\n    # 2x9x5 = 72\n    # 2x9x6 = 81\n    # 2x9x7 = 96\n    # 2x9x8 = 108\n    # 2x9x9 = 120\n    # 2x9x10 = 132\n    # 2x10x2 = 30\n    # 2x10x3 = 45\n    # 2x10x4 = 60\n    # 2x10x5 = 75\n    # 2x10x6 = 90\n    # 2x10x7 = 105\n    # 2x10x8 = 135\n    # 2x10x9 = 150\n    # 2x10x10 = 165\n    if a == 2:\n        return True\n    elif a == 3:\n        return False\n    elif a == 4:\n        return False\n    elif a == 5:\n        return False\n    elif a == 6:\n        return False\n    elif a == 7:\n        return False\n    elif a == 8:\n        return False\n    elif a == 9:\n        return False\n    elif a == 10:\n        return True\n    elif a == 11:\n        return False\n    elif a == 12:\n        return False\n    elif a == 13:\n        return False\n    elif a == 14:\n        return False\n    elif a == 15:\n        return False\n    elif a == 16:\n        return False\n    elif a == 17:\n        return False\n    elif a == 18:\n        return False\n    elif a == 19:\n        return Fals"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a < 0:\n        return False\n    if a >= 1:\n        return True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return int(a**(1/3))==a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a == 0:\n        return True\n    return a % 10 == 1 and iscube(a//10)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #RUN THIS CELL AS IS\n    return abs(a*a*a - a) < 1e-4\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len([el for el in num if el.isnumeric()])\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not num:\n        return 0\n    h1 = int(num[0])\n    h2 = int(num[1])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h3 = int(num[2])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h4 = int(num[3])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h5 = int(num[4])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h6 = int(num[5])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h7 = int(num[6])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h8 = int(num[7])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h9 = int(num[8])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h10 = int(num[9])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h11 = int(num[10])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h12 = int(num[11])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h13 = int(num[12])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h14 = int(num[13])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h15 = int(num[14])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h16 = int(num[15])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h17 = int(num[16])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h18 = int(num[17])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h19 = int(num[18])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h20 = int(num[19])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h21 = int(num[20])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h22 = int(num[21])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h23 = int(num[22])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h24 = int(num[23])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h25 = int(num[24])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h26 = int(num[25])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h27 = int(num[26])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h28 = int(num[27])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h29 = int(num[28])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h30 = int(num[29])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h31 = int(num[30])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h32 = int(num[31])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h33 = int(num[32])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h34 = int(num[33])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h35 = int(num[34])\n    # [2, 3, 5, 7, 11, 13, 17]\n    h36 = int(num[35])\n    # [2, "
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def count_digits(num):\n        count = 0\n        for i in num:\n            if int(i) in range(0,10):\n                count += 1\n        return count\n    if count_digits(num) < 10:\n        return 0\n    else:\n        b,d = num[0:2],num[2:]\n        x = count_digits(d)\n        y = count_digits(b)\n        if y > 2:\n            return x\n        else:\n            return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(num) == 0:\n        return 0\n    count = 0\n    for i in range(len(num)):\n        if int(num[i]) == 0:\n            continue\n        elif int(num[i]) == 1:\n            count += 1\n        elif int(num[i]) == 2 or int(num[i]) == 3 or int(num[i]) == 5 or int(num[i]) == 7:\n            count += 1\n        elif int(num[i]) == 4:\n            count += 1\n        elif int(num[i]) == 6 or int(num[i]) == 8:\n            count += 1\n        elif int(num[i]) == 9:\n            count += 1\n        elif int(num[i]) == 8 or int(num[i]) == 9:\n            count += 1\n        elif int(num[i]) == 10:\n            count += 1\n        elif int(num[i]) == 11 or int(num[i]) == 13 or int(num[i]) == 17:\n            count += 1\n        elif int(num[i]) == 14:\n            count += 1\n        elif int(num[i]) == 15 or int(num[i]) == 16 or int(num[i]) == 18 or int(num[i]) == 19 or int(num[i]) == 20 or int(num[i]) == 21:\n            count += 1\n        elif int(num[i]) == 22 or int(num[i]) == 24 or int(num[i]) == 25 or int(num[i]) == 26 or int(num[i]) == 27 or int(num[i]) == 28 or int(num[i]) == 29:\n            count += 1\n        elif int(num[i]) == 30 or int(num[i]) == 31 or int(num[i]) == 32 or int(num[i]) == 33 or int(num[i]) == 34 or int(num[i]) == 35 or int(num[i]) == 36 or int(num[i]) == 37 or int(num[i]) == 38 or int(num[i]) == 39:\n            count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    answer = 0\n    for i in range(len(num)):\n        if int(num[i]) % 2 == 0:\n            answer += 1\n    return answer\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(num)):\n        if num[i] == '0':\n            continue\n        count += 1\n        if is_prime(int(num[i], 16)) == True:\n            continue\n        else:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    hex_str = num\n    hex_str = hex_str.lower()\n    \n    assert hex_str.isalpha(), \"Wrong format\"\n    \n    count = 0\n    \n    for i in hex_str:\n        if i == \"b\":\n            count += 1\n        else:\n            continue\n    return count\n    \ndef test_hex_key():\n    assert hex_key(\"\") == 0, \"Wrong result for empty string\"\n    assert hex_key(\"1\") == 0, \"Wrong result for one digit\"\n    assert hex_key(\"AB\") == 1, \"Wrong result for double digit\"\n    assert hex_key(\"ABED1A33\") == 4, \"Wrong result for triple digit\"\n    assert hex_key(\"2020\") == 2, \"Wrong result for 2020\"\n    \n    \ndef main():\n    print(hex_key(\"AB\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"2020\"))\n    print(hex_key(\"1\"))\n    print(hex_key(\"\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    \n    test_hex_key()\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    n = len(num)\n    d = dict.fromkeys(digits, 0)\n    primes = primes_between(10000, num)\n    for c in num:\n        d[c] += 1\n    count = 0\n    for p in primes:\n        if p < n and p == d[num[:p]]:\n            count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    digit_numbers = {\"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0}\n    for i in range(len(num)):\n        if num[i].isdigit():\n            digit_numbers[num[i]] += 1\n    if 2 in digit_numbers.values():\n        return 1\n    elif 3 in digit_numbers.values():\n        return 2\n    elif 5 in digit_numbers.values():\n        return 3\n    elif 7 in digit_numbers.values():\n        return 4\n    elif 11 in digit_numbers.values():\n        return 5\n    elif 13 in digit_numbers.values():\n        return 6\n    else:\n        return 1\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(set(list(num)))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    binary = \"\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # YOUR CODE GOES HERE\n    bin_str = \"\"\n    if decimal <= 0:\n        return bin_str\n    else:\n        decimal_binary = bin(decimal)[2:]\n        bin_str = \"db\" + decimal_binary\n        while len(decimal_binary) < 32:\n            decimal_binary = \"0\" + decimal_binary\n        while len(decimal_binary) > 32:\n            decimal_binary = decimal_binary[len(decimal_binary)-32:]\n        bin_str = \"db\" + decimal_binary\n    return bin_str\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    binary = \"\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"db{0}db\".format(decimal)\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"db\" + bin(decimal)[2:] + \"db\""
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"db\" + (\"b\" * decimal) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    bin_str = bin(decimal)\n    print(bin_str)\n    # bin_str = '{0:b}'.format(decimal)\n    # print(bin_str)\n    print(bin_str.replace(\"b\",\"\"))\n    return bin_str.replace(\"b\",\"\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"db\" + '{0:b}'.format(decimal) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"db\"+\"\".join([\"0\", \"1\"][decimal%2])+\"db\"\n    \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if decimal == 0:\n        return \"db\"\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = list(s)\n    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        if len(set(s)) == 1:\n            return True\n        else:\n            return False\n    while len(s) > 1:\n        if len(set(s))!= 1:\n            return False\n        s = s[1:]\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(s) < 3 or len(set(s))!= len(s):\n        return False\n    # return True\n    mapping = {}\n    for char in s:\n        if char not in mapping:\n            mapping[char] = 0\n        mapping[char] += 1\n    return 1 in mapping.values()\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    print(\"\\n# is_happy\\n\")\n    # Empty string is not happy\n    if s == \"\":\n        return False\n    # Initialize an empty set\n    h_set = set()\n    # Add each element to the set\n    for i in range(len(s)):\n        h_set.add(s[i])\n    # Check the length of set\n    if len(h_set) == 1:\n        return False\n    # Check the length of set\n    for i in range(len(s)):\n        # Get the next element of the string\n        next_e = s[i]\n        # Check if next_e is in the set\n        if next_e not in h_set:\n            # If not in the set, then the string is not happy\n            return False\n        # If next_e is in the set, then delete it from the set\n        h_set.remove(next_e)\n    # If the for loop above does not break, then the string is happy\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # base case\n    if s == '':\n        return True\n    \n    # logic\n    return is_happy_helper(s, 0)\n    \ndef is_happy_helper(s, i):\n    if i == len(s)-1:\n        return len(s) >= 3 and all(s[i+1]!= s[i] for i in range(len(s)-1))\n    \n    letter = s[i]\n    if letter not in s[i+1:]:\n        return False\n    else:\n        return is_happy_helper(s, i+1)"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Add your code here\n    \n    l = len(s)\n    if l < 3:\n        return False\n    while l > 3:\n        if s == s[0]+s[1]+s[2]:\n            return False\n        else:\n            s = s[1:] + s[0]\n        l -= 1\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    #\n    # Your code here\n    #\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # keep a set of letters\n    letters = set()\n    # initialize length\n    length = len(s)\n    # check if length is more than 3\n    if length < 3:\n        return False\n    # iterate through the string\n    for i in range(0, length-1):\n        # check if the letter is in the set\n        if s[i] in letters:\n            return False\n        else:\n            letters.add(s[i])\n    # check if the length of the set is equal to length\n    if len(letters) == length:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return is_happy_helper(s)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(s) < 3 or not set(s).issubset(set('abcdefghijklmnopqrstuvwxyz')):\n        return False\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    grades = [4.0, 3, 1.7, 2, 3.5]\n    result = []\n    for i in range(len(grades)):\n        if grades[i] >= 3.0:\n            if grades[i] >= 3.7:\n                result.append('A+')\n            elif grades[i] >= 3.3:\n                result.append('A')\n            elif grades[i] >= 3.0:\n                result.append('A-')\n            continue\n        if grades[i] >= 2.7:\n            if grades[i] >= 2.3:\n                result.append('B+')\n            elif grades[i] >= 2.0:\n                result.append('B')\n            elif grades[i] >= 1.7:\n                result.append('B-')\n            continue\n        if grades[i] >= 2.0:\n            result.append('C+')\n        elif grades[i] >= 1.7:\n            result.append('C')\n        elif grades[i] >= 1.3:\n            result.append('C-')\n        continue\n    return result\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    output = []\n    for grade in grades:\n        if grade >= 3.0:\n            output.append('A+')\n        elif grade >= 3.3:\n            output.append('A')\n        elif grade >= 3.0:\n            output.append('A-')\n        elif grade >= 2.7:\n            output.append('B+')\n        elif grade >= 2.3:\n            output.append('B')\n        elif grade >= 2.0:\n            output.append('B-')\n        elif grade >= 1.7:\n            output.append('C+')\n        elif grade >= 1.3:\n            output.append('C')\n        elif grade >= 1.0:\n            output.append('C-')\n        elif grade >= 0.7:\n            output.append('D+')\n        elif grade >= 0.3:\n            output.append('D')\n        elif grade >= 0.0:\n            output.append('D-')\n        else:\n            output.append('E')\n    return output\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    grades = sorted(grades)\n    lista = []\n    for i in grades:\n        if i >= 4.0:\n            lista.append('A+')\n        elif i >= 3.7:\n            lista.append('A')\n        elif i >= 3.3:\n            lista.append('A-')\n        elif i >= 3.0:\n            lista.append('B+')\n        elif i >= 2.7:\n            lista.append('B')\n        elif i >= 2.3:\n            lista.append('B-')\n        elif i >= 2.0:\n            lista.append('C+')\n        elif i >= 1.7:\n            lista.append('C')\n        elif i >= 1.3:\n            lista.append('C-')\n        elif i >= 1.0:\n            lista.append('D+')\n        elif i >= 0.7:\n            lista.append('D')\n        elif i >= 0.0:\n            lista.append('D-')\n        else:\n            lista.append('E')\n    return lista\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    new_grade_list = []\n    for grade in grades:\n        if grade < 3.3:\n            new_grade_list.append('F')\n        elif grade < 3.0:\n            new_grade_list.append('F')\n        elif grade < 2.7:\n            new_grade_list.append('E')\n        elif grade < 2.3:\n            new_grade_list.append('D')\n        elif grade < 2.0:\n            new_grade_list.append('D')\n        elif grade < 1.7:\n            new_grade_list.append('C')\n        elif grade < 1.3:\n            new_grade_list.append('B')\n        elif grade < 1.0:\n            new_grade_list.append('B')\n        elif grade < 0.7:\n            new_grade_list.append('A')\n        elif grade < 0.3:\n            new_grade_list.append('A')\n        else:\n            new_grade_list.append('F')\n    return new_grade_list\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = []\n    for gpa in grades:\n        if gpa >= 3.3:\n            res.append('A')\n        elif gpa >= 3.0:\n            res.append('A-')\n        elif gpa >= 2.7:\n            res.append('B+')\n        elif gpa >= 2.3:\n            res.append('B')\n        elif gpa >= 2.0:\n            res.append('B-')\n        elif gpa >= 1.7:\n            res.append('C+')\n        elif gpa >= 1.3:\n            res.append('C')\n        elif gpa >= 0.7:\n            res.append('C-')\n        elif gpa >= 0.3:\n            res.append('D+')\n        elif gpa >= 0.0:\n            res.append('D')\n        else:\n            res.append('E')\n    return res\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # first solution\n    # return ['A+' if grade >= 4.0 else 'A' if grade >= 3.7 else 'A-' if grade >= 3.3 else 'B+' if grade >= 3.0 else 'B' if grade >= 2.7 else 'B-' if grade >= 2.3 else 'C+' if grade >= 2.0 else 'C' if grade >= 1.7 else 'C-' if grade >= 1.3 else 'D+' if grade >= 1.0 else 'D' if grade >= 0.7 else 'D-' for grade in grades]\n    \n    # second solution\n    def calc_letter_grade(grade):\n        if grade >= 4.0:\n            return 'A+'\n        elif grade >= 3.7:\n            return 'A'\n        elif grade >= 3.3:\n            return 'A-'\n        elif grade >= 3.0:\n            return 'B+'\n        elif grade >= 2.7:\n            return 'B'\n        elif grade >= 2.3:\n            return 'B-'\n        elif grade >= 2.0:\n            return 'C+'\n        elif grade >= 1.7:\n            return 'C'\n        elif grade >= 1.3:\n            return 'C-'\n        elif grade >= 1.0:\n            return 'D+'\n        elif grade >= 0.7:\n            return 'D'\n        else:\n            return 'D-'\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in grades:\n        if i < 3.3:\n            grades.append('A')\n        elif i < 3.0:\n            grades.append('A-')\n        elif i < 2.7:\n            grades.append('B')\n        elif i < 2.3:\n            grades.append('B-')\n        elif i < 2.0:\n            grades.append('C')\n        elif i < 1.7:\n            grades.append('C-')\n        elif i < 1.3:\n            grades.append('D')\n        elif i < 0.7:\n            grades.append('D-')\n        else:\n            grades.append('E')\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    letter_grades = []\n    for gpa in grades:\n        if gpa < 3.0:\n            letter_grades.append(\"F\")\n        elif gpa < 3.5:\n            letter_grades.append(\"D\")\n        elif gpa < 3.7:\n            letter_grades.append(\"D\")\n        elif gpa < 3.9:\n            letter_grades.append(\"C\")\n        elif gpa < 4.0:\n            letter_grades.append(\"B\")\n        elif gpa < 4.3:\n            letter_grades.append(\"B\")\n        elif gpa < 4.7:\n            letter_grades.append(\"A\")\n        elif gpa < 4.9:\n            letter_grades.append(\"A\")\n        elif gpa < 5.0:\n            letter_grades.append(\"A-\")\n        elif gpa < 5.3:\n            letter_grades.append(\"C-\")\n        elif gpa < 5.7:\n            letter_grades.append(\"C\")\n        elif gpa < 5.9:\n            letter_grades.append(\"B-\")\n        elif gpa < 6.0:\n            letter_grades.append(\"B\")\n        elif gpa < 6.3:\n            letter_grades.append(\"A-\")\n        elif gpa < 6.7:\n            letter_grades.append(\"A\")\n        elif gpa < 6.9:\n            letter_grades.append(\"A+\")\n        else:\n            letter_grades.append(\"F\")\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    grades = list(grades)\n    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    # return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    gpa_scores = sorted(grades)\n    letter_grades = []\n    for gpa in gpa_scores:\n        if gpa >= 3.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.3:\n            letter_grades.append('A')\n        elif gpa >= 3.0:\n            letter_grades.append('A-')\n        elif gpa >= 2.7:\n            letter_grades.append('B+')\n        elif gpa >= 2.3:\n            letter_grades.append('B')\n        elif gpa >= 2.0:\n            letter_grades.append('B-')\n        elif gpa >= 1.7:\n            letter_grades.append('C+')\n        elif gpa >= 1.3:\n            letter_grades.append('C')\n        elif gpa >= 1.0:\n            letter_grades.append('C-')\n        elif gpa >= 0.7:\n            letter_grades.append('D+')\n        elif gpa >= 0.3:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # for i in range(len(string)):\n    #     if i == 0:\n    #         if len(string) == 1:\n    #             return False\n    #     else:\n    #         if string[i] == string[i-1]:\n    #             return False\n    # return True\n    # return False\n    # return sum([string[i] == string[i-1] for i in range(1, len(string))]) == 1\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return len(string) in prime_numbers\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if string == 'abc':\n        return False\n    else:\n        for i in range(2, int(math.ceil(math.sqrt(string))) + 1):\n            if string % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(string) in {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return True if len(string) in PRIMES and True else False\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(string)\n    if n <= 3:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(2,string.__len__()):\n        if string.__len__() % i == 0:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if string.isalpha():\n        string = string.lower()\n    for i in range(2, int(len(string)**0.5) + 1):\n        if string.count(string[0]) == len(string):\n            return False\n        else:\n            for j in range(0, len(string)-1):\n                if int(string[j]) > int(string[j+1]):\n                    return False\n                if int(string[j]) == int(string[j+1]):\n                    return False\n    return True\n    \n    \n\"\"\"Given a string, create a function that returns the number of times a string \noccurs without any spaces. For example:\ncount_non_space('Hello') == 2\ncount_non_space('Hi there') == 2\ncount_non_space('What is your name?') == 6\ncount_non_space('   space before') == 1\ncount_non_space('space after') == 1\n\"\"\"\ndef count_non_space(string):\n    \"\"\"Write a function that returns the number of times a string\n    occurs without any spaces. For example:\n    count_non_space('Hello') == 2\n    count_non_space('Hi there') == 2\n    count_non_space('What is your name?') == 6\n    count_non_space('   space before') == 1\n    count_non_space('space after') == 1\n    \"\"\"\n    string = string.split(\" \")\n    count = 0\n    for i in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(string)):\n        if(string[i] in \"aeiou\"):\n            return False\n    if(len(string) % 2 == 1):\n        return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    length = len(string)\n    if length == 1:\n        return False\n    i = 2\n    while i < length:\n        if length % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if is_one_digit(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    counter = 0\n    for i in range(1, n+1):\n        str_i = str(i)\n        if str_i[0] == \"1\" and str_i[-1] == \"1\":\n            counter += 1\n        elif str_i[0] == \"1\":\n            counter += 1\n        elif str_i[-1] == \"1\":\n            counter += 1\n    return counter\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 1\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def _helper(n):\n        if n < 10:\n            return 1\n        if n % 10 == 1:\n            return _helper(n // 10) + n // 10\n        if n % 10 == 0:\n            return _helper(n // 10)\n        return _helper(n // 10) + n // 10\n    return _helper(n)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n < 10:\n        return 1\n    else:\n        return starts_one_ends(n - 1) + starts_one_ends(n - 2) + starts_one_ends(n - 3)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def count_ones(n):\n        return sum(n == i + 1 for i in range(n))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(n+1):\n        count += int(str(i)[0]) + int(str(i)[-1])\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len(one_ends(n))\n    \ndef main():\n    for i in range(1, 11):\n        print('For n =', i, 'the number of sequences that start or end with 1 is', starts_one_ends(i))\n        \nmain()\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert n >= 1\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return starts_one_ends(n-1) + starts_one_ends(n-2)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(n + 1):\n        # the number of digits in the n-digit number\n        length = len(str(i))\n        # if the number ends with 1, we should add 1\n        if str(i).endswith(\"1\"):\n            count += 1\n        # if the number starts with 1, we should add 1\n        elif str(i).startswith(\"1\"):\n            count += 1\n    return count\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    binary_sum = 0\n    \n    while N > 0:\n        binary_sum += N % 2\n        N = N // 2\n    return str(binary_sum)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = \"{0:b}\".format(N)\n    s = s.replace(\"0b\", \"\")\n    return s\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    # @N = int(N)\n    return\n    "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # Converting N into a string\n    binary = str(bin(N))[2:]\n    \n    # Getting total sum\n    total = 0\n    for i in binary:\n        total += int(i)\n    return total\n    \ndef test(expected, got):\n    \"\"\"\n    Prints 'OK' if expected == got, prints '*' if expected and got are not equal\n    \"\"\"\n    if expected == got:\n        print('OK')\n    else:\n        print('*', expected, '!=', got)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return(format(N, 'b'))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sum = 0\n    while N > 0:\n        sum += N % 10\n        N = N // 10\n    return str(sum)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # if N <= 0 or N > 10000:\n    #     print(\"Incorrect input\")\n    #     return \"Invalid Input\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    res = 0\n    while N:\n        res += N % 2\n        N = N // 2\n    return str(res)"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # N is 10^6 so it takes an incredible amount of time\n    # if it is bigger than that, you can't solve it in less than 2 seconds, so I'll give up\n    \n    if N <= 0:\n        return 'error'\n    \n    if N % 10 == 0:\n        return f'{N}'\n    \n    # if N is not a power of 2, we can do it as such\n    # because of this, we need to add the ones to our string\n    # since we are using binary for it, we don't need to deal with it being odd or even\n    \n    if (N - 1) % 3 == 0:\n        # we need to add 1 to N, as it is not a power of 2\n        # if it isn't, N is just 1, so we don't need to add it, just make it a nice print\n        # that way we don't need to deal with it as odd or even\n        return f'{bin(N)[2:]}'\n    \n    # if the N is not a power of 2, we have to split it into two\n    \n    # let's start by getting the length of the binary\n    # we can add to N, but we can't get to the start of the binary as we are using binary\n    # so we can't use it in our variable (like we did before)\n    # we need to get the size of the binary\n    # we subtract 2, because we know that it's binary, so 2 ^ (i) where i is the number of bits\n    # since we don't need to deal with the ones and the zeros, we can use the index of the first 1 in binary\n    # we can't use the index of the second 1 because it's odd so we need to add 2\n    # we need to add it to the last value and make it positive\n    # then we subtract 2 again to get the size\n    \n    i = 1\n    binary_size = len(bin(N - 1)[2:])\n    \n    binary_size += binary_size - bin(N - 1)[2:].index('1') + 2\n    \n    # then we want to iterate from 0 to i\n    # -1 to get the last element of the list\n    # +1 to get the first element of the list\n    \n    for _ in range(binary_size):\n        binary = f'{N // (2 ** i) % 2}'\n        if binary!= '0':\n            break\n        i += 1\n    \n    # we now have the binary of the number\n    # we need to make it a nice print\n    \n    binary = binary.replace('0','')\n    binary = binary.replace('1',' ')\n    \n    return f'{binary}'\n    \n    \nif __name__ == \"__main__\":\n    import sys\n    \n    for line in sys.stdin:\n        N = int(line)\n        print(solve(N))"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return f\"{int(bin(N)[2:]):0{8}b}\"\n    \nif __name__ == \"__main__\":\n    \n    # Test case #1\n    print(solve(1000))\n    \n    # Test case #2\n    print(solve(150))\n    \n    # Test case #3\n    print(solve(147)"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(1,len(lst),2):\n        if lst[i]%2!=0:\n            lst[i-1] += lst[i]\n    print(lst)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(1,len(lst)):\n        if i%2 == 1:\n            lst.append(lst[i-1])\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return []\n    lst = list(lst)\n    even = []\n    for i in range(0, len(lst), 2):\n        even.append(lst[i])\n    return even\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    i = 0\n    while i < len(lst):\n        if i % 2!= 0:\n            if i!= len(lst) - 1:\n                lst.append(lst.pop(i))\n        else:\n            i += 1\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(1,len(lst)):\n        if i%2==0:\n            lst[i]=lst[i] + lst[i-1]\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return []\n    else:\n        even = []\n        for i in range(0, len(lst), 2):\n            even.append(lst[i])\n        return even\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(0, len(lst), 2):\n        lst[i] += lst[i+1]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return lst[1::2]\n    \n    \n    \n    \nif __name__ == '__main__':\n    lst = input('enter list of numbers: ')\n    lst = [int(i) for i in lst.split()]\n    print(add(lst))\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    even_list = []\n    for i in lst:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst[i] += 1\n    return lst\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(s)):\n        if s[i]!='':\n            break\n    return''.join(sorted(s.split(' '), key=lambda k: ord(k)))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    out = ''\n    for i in range(len(s.split())):\n        out += sorted(s.split()[i])[i] +''\n    return out.rstrip()\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    s = s.replace(' ', '')\n    letters = []\n    for i in range(0,len(s)):\n        letters.append(s[i])\n    letters = sorted(letters)\n    \n    for i in range(0,len(letters)):\n        s = s.replace(letters[i], '')\n    \n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return''.join(sorted(s.split(' '), key=lambda x: ord(x[0])))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \" \".join([word for word in sorted(s.split(), key=lambda x: ord(x))])\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    new_s = ''\n    for word in s.split():\n        for letter in word:\n            new_s += chr(ord(letter)-32)\n        new_s +=''\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return''.join(sorted(s.split(), key=lambda x: ord(x[0])))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return''.join(''.join(sorted(s.split(' '))) for s in s.split(' '))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return ''.join(s.split())\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = s.split()\n    s = sorted(s, key=lambda x: ord(x[0]))\n    s =''.join(s)\n    return s\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if x not in lst[0]: return []\n    row = []\n    for idx in range(len(lst)):\n        if lst[idx][x] == 1:\n            row.append((idx, len(lst[idx]) - 1))\n    row.sort(key=lambda t: (t[0], -t[1]))\n    row.sort(key=lambda t: t[1], reverse=True)\n    return row\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    res = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    res.append((i, j))\n    return sorted(res, key=lambda x: (x[0], x[1]))\n    \ndef get_column(lst, y):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer y, find integers y in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (rows, columns), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column by rows in descending order.\n    \n    Examples:\n    get_column([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 3), (1, 1), (1, 2), (2, 4), (2, 1)]\n    get_column([], 1) == []\n    get_column([[], [1], [1, 2, 3]], 3) == [(0, 0)]\n    \"\"\"\n    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if y == lst[i][j]:\n                res.append((i, j))\n    return sorted(res, key=lambda x: (x[1], x[0]))\n    \ndef get_square_submatrix(lst, rows, cols):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and two integer values rows and columns,\n    find numbers in the lst, that are within the given rows\n    and columns.\n    \n    Examples:\n    get_square_submatrix([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1, 3) == [(0, 0), (1, 3), (1, 1), (1, 2), (2, 4), (2, 1)]\n    get_square_submatrix([], 1, 3) == []\n    get_square_submatrix([[], [1], [1, 2, 3]], 3, 2) == [(0, 0)]\n    \"\"\"\n    res = []\n    for i in range(rows):\n        for j in range(cols):\n            if i*cols + j < len(lst):\n                res.append((i, j))\n    return res"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    rows = [[] for _ in range(len(lst))]\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    res = []\n    if not lst:\n        return res\n    dct = {r: [] for r in range(len(lst))}\n    for r in range(len(lst)):\n        for c in range(len(lst[r])):\n            dct[r].append((lst[r][c], c))\n    dct = {k: sorted(v, key=lambda x: (x[0], x[1]), reverse=True) for k, v in dct.items()}\n    for r in dct.keys():\n        for i, j in dct[r]:\n            if i == x:\n                res.append((r, j))\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def _get_row(lst, x, r, c):\n        \"\"\"\n        Find integers x in the row\n        \"\"\"\n        for i in range(len(lst)):\n            if x in lst[i]:\n                r.append(i)\n                c.append(lst[i].index(x))\n        return r, c\n    \n    result = []\n    r, c = _get_row(lst, x, result, [])\n    \n    return sorted(sorted(zip(r, c)), key=lambda x: (x[0], x[1]))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    result = []\n    for i in lst:\n        for j in i:\n            if j == x:\n                result.append((i.index(j), i.index(x)))\n                break\n    return sorted(result, key=lambda tup: (tup[0], -tup[1]))\n    "
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # initialize return list\n    # initialize return list\n    return_list = []\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    row_coord = []\n    \n    for i, row in enumerate(lst):\n        row_coord += [(i, c) for c in row]\n    \n    sorted_row_coord = sorted(row_coord, key=lambda x: (x[0], -x[1]))\n    \n    return [(r, c) for r, c in sorted_row_coord if c == x]\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # create a new list with only columns that are equal to x\n    lst = [[y for y in x if y == x[0]] for x in lst]\n    # sort the columns of the list\n    lst.sort(key=lambda x: x[0], reverse=True)\n    # sort the rows\n    lst.sort(key=lambda x: x[1], reverse=True)\n    return lst\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if lst:\n        return sorted(sorted(zip(*lst)), key=lambda x: (x[0], -x[1]))\n    else:\n        return []\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    odd = []\n    even = []\n    for i in range(len(array)):\n        if i == 0:\n            continue\n        if sum(array[i], array[i - 1]) % 2 == 0:\n            even.append(array[i])\n        else:\n            odd.append(array[i])\n    odd.extend(even)\n    return odd\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not array:\n        return []\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(len(array)):\n        if i == 0:\n            continue\n        if sum(array[i-1], array[i]) % 2 == 1:\n            left, right = array[:i], array[i:]\n            return left + sorted(right, reverse=True)\n    return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    array.sort()\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(array, key = lambda x: (x, -x))\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # TODO\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not array: return array\n    array_len = len(array)\n    if array_len == 1: return array\n    s = sum(array)\n    if s % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    array.sort()\n    sum_value = 0\n    for i in range(len(array)):\n        sum_value += array[i]\n    if sum_value % 2 == 0:\n        return array[::-1]\n    return array[::-1]\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sorted_array = array.copy()\n    sorted_array.sort()\n    if sum(sorted_array[0], sorted_array[-1]) % 2 == 0:\n        sorted_array.reverse()\n    return sorted_array\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return s +'s' + s\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    return s + 't' + s\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # list for the letters\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    # for loop to make the encrypted string\n    for i in range(len(s)):\n        # for loop to check if the letter is in the list\n        for j in range(len(letters)):\n            if s[i] == letters[j]:\n                # substring to find the letter\n                substring = letters[j-2:j+2]\n                # substring to find the letter that has been encrypted\n                substring_encrypted = letters[j]\n                # insert substring to the letter\n                s = s[:i] + substring_encrypted + substring[0] + substring[1] + substring[0] + substring[1]\n                # break loop\n                break\n    return s\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    # split input string into a list of lowercase letters\n    # then rotate the list\n    lower = list(s.lower())\n    for i in range(len(lower)):\n        lower[i] = letters[lower[i]]\n    lower = lower[2:] + lower[:2]\n    return \"\".join(lower)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return ''.join(list(map(lambda x: list(string.ascii_lowercase)[list(string.ascii_lowercase).index(x) + 2], s)))\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_alphabet = alphabet[6:] + alphabet[:6]\n    \n    def encrypt_helper(input_string):\n        if not isinstance(input_string, str):\n            return str\n        return \"\".join([new_alphabet[alphabet.find(letter)] for letter in input_string])\n    \n    return encrypt_helper(s)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    alp = list(string.ascii_lowercase)\n    new_alp = alp[2:] + alp[:2]\n    new_alp.append('z')\n    return(s.translate(str.maketrans(alp, new_alp)))\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ''\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    def encrypt(s):\n        s = list(s)\n        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\n                    'm', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x',\n                    'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n                    'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v',\n                    'w', 'x', 'y', 'z']\n        new_alphabet = []\n        new_s = ''\n        for letter in alphabet:\n            new_alphabet.append(letter)\n            new_alphabet.append(letter)\n        for x in s:\n            if x in alphabet:\n                new_index = (alphabet.index(x) + 2) % 26\n                new_alphabet[new_index] = x\n        for item in new_alphabet:\n            new_s += item\n        return new_s\n    return encrypt\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotations = alphabet[::2]\n    return ''.join(rotations + rotations)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    encrypt_string = ''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    for char in s:\n        index = alphabet.find(char)\n        encrypt_string += alphabet[(index + 2) % 26]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return None\n    if lst[1] < lst[0]:\n        return lst[0]\n    \n    for i in range(len(lst)):\n        if lst[i] < lst[1]:\n            lst[0], lst[1] = lst[1], lst[0]\n            break\n    return lst[1]\n    \ndef next_smallest(nums):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return None\n    \n    left = 0\n    right = len(nums) - 1\n    \n    while left < right:\n        middle = (left + right) // 2\n        if nums[middle] < nums[right]:\n            right = middle\n        else:\n            left = middle + 1\n            \n    return nums[left + 1"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    min_val = None\n    for num in lst:\n        if min_val == None or min_val > num:\n            min_val = num\n    if min_val == None:\n        return None\n    else:\n        return min_val\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # ********** Attempt 1 - Brute Force **********\n    # Time: O(n^2) / Space: O(1)\n    # for i in range(len(lst)):\n    #     for j in range(i + 1, len(lst)):\n    #         if lst[j] < lst[i]:\n    #             return lst[j]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n = 1\n    while True:\n        if len(lst) > n:\n            if lst[n] < lst[n+1]:\n                return lst[n]\n            else:\n                n += 1\n        else:\n            return None\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(lst) == 1:\n        return None\n    first = lst[0]\n    i = 0\n    for x in lst:\n        if x < first:\n            first = x\n            i = 0\n        elif x == first:\n            i += 1\n            if i == 1:\n                return None\n    return first\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not lst:\n        return None\n    smallest = lst[0]\n    second_smallest = lst[1]\n    for i in range(2, len(lst)):\n        if lst[i] < smallest:\n            second_smallest = smallest\n            smallest = lst[i]\n        elif lst[i] < second_smallest:\n            second_smallest = lst[i]\n    return second_smallest\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n    \nnext_smallest([5, 1, 4, 3, 2])\nnext_smallest([])\nnext_smallest([1, 1])\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    if not lst:\n        return None\n    \n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    \n    i = 1\n    while i < len(lst) and lst[i] == smallest:\n        i += 1\n    \n    return i\n    \n    "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return None\n    a = lst.pop(0)\n    for i in range(len(lst)):\n        if a < lst[i]:\n            b = lst.pop(i)\n            break\n    return b\n    \ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    \ntest_next_smallest("
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    try:\n        # sort the list\n        lst.sort()\n        if len(lst) == 0:\n            return None\n        elif lst[0] > lst[1]:\n            return None\n        else:\n            return lst[1]\n    except:\n        return None\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    bored = 0\n    for word in S.split():\n        if word == \"I\":\n            bored += 1\n    return bored\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    bored = 0\n    for word in S.split():\n        if word[0] == 'I':\n            bored += 1\n    return bored\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    \n    for sentence in S.split('.'):\n        if sentence.startswith(\"I\"):\n            count += 1\n    \n    return count\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n    return S.count(\"I\")\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    bored = 0\n    \n    for word in S.split():\n        if word[0] == \"I\":\n            bored += 1\n    \n    return bored\n    \n    "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return S.count(\"I\")\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(S)):\n        if S[i] == 'I':\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return S.count(\"I\")\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    S = S.split(\".\")\n    for i in range(len(S)):\n        if \"I\" in S[i]:\n            S[i] = 0\n            break\n    return len([i for i in range(len(S)) if S[i] == 0])\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    S = S.lower()\n    # +++your code here+++\n    count = 0\n    for s in S.split():\n        if s[0] == \"i\":\n            count += 1\n    return count\n        \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x == sum([y,z]) and all([type(n)==int for n in [x, y, z]])\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (x + y == z) and all(isinstance(a, int) for a in (x, y, z))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return (x==y+z or y==x+z or z==x+y) and (type(x)==int and type(y)==int and type(z)==int)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z and x < y and y < z:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x == y + z and type(x) == type(y) and type(y) == type(z)\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return (x+y+z)%z==0 and (x>=y>=z)\ndef any_int_1(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Example:\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return bool(x == y + z and x == z + y and type(x) == int and type(y) == int and type(z) == int)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x+y == z and (x >= int(x) and y >= int(y) and z >= int(z)):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if x == y+z:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Write your code here\n    return \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([\"\".join([\"X\" if i == j else i for i in message]) for j in \"AEIOUYaeiouy\"])\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    encoded = ''\n    for letter in message:\n        if letter in vowels:\n            encoded += letters[letters.index(letter)+2]\n        else:\n            encoded += letter\n    return encoded\n    \nprint(encode('test'))\nprint(encode('This is a message')"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your Code Here\n    \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    encoded_message = ''\n    for letter in message:\n        if letter in 'aeiouAEIOU':\n            encoded_message += chr(219 - ord(letter))\n        else:\n            encoded_message += letter\n    return encoded_message\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    output = ''\n    vowels = 'aeiou'\n    \n    for letter in message:\n        if letter in vowels:\n            for i in range(2):\n                if letter in vowels:\n                    index = vowels.find(letter)\n                    letter = vowels[(index + 2) % len(vowels)]\n            output += letter\n        else:\n            output += letter\n    \n    return output\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # get string \n    message = message.upper()\n    # split by spaces and join\n    message =''.join(message)\n    # make it all lower case\n    message = message.lower()\n    # loop through each letter\n    for i, letter in enumerate(message):\n        # if it's a vowel, add the letter that comes 2 places ahead of it\n        if letter in 'AEIOU':\n            letter = message[i + 2]\n        # else if it's a consonant, add the letter that comes 2 places ahead of it\n        elif letter in 'BCDFGHJKLMNPQRSTVWXYZ':\n            letter = message[i + 2]\n        # else print letter as is\n        else:\n            pass\n        # add new letter to message\n        message = message[:i] + letter + message[i + 1:]\n    # return the encoded message\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = ''\n    for i in message:\n        if i in alphabet:\n            s += alphabet[alphabet.index(i) + 1]\n        else:\n            s += i\n    return s\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    vowels = \"aeiouAEIOU\"\n    new_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            char_two_ahead = message[message.find(char)+2]\n            new_message += char_two_ahead.upper()\n        else:\n            new_message += char\n    return new_message\n    "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    message = list(message)\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(message)):\n        if message[i] in alphabet:\n            if message[i] == 'a' or message[i] == 'e' or message[i] == 'i' or message[i] == 'o' or message[i] == 'u':\n                if message[i+2] == 'a' or message[i+2] == 'e' or message[i+2] == 'i' or message[i+2] == 'o' or message[i+2] == 'u':\n                    message[i] = message[i+2]\n                    message[i+2] = message[i]\n            if message[i] == 't':\n                message[i] = 'T'\n            if message[i] == 'h':\n                message[i] = 'H'\n            if message[i] == 'c':\n                message[i] = 'C'\n            if message[i] =='s':\n                message[i] = 'S'\n            if message[i] == 'g':\n                message[i] = 'G'\n            if message[i] =='m':\n                message[i] = 'M'\n            if message[i] == 'k':\n                message[i] = 'K'\n            if message[i] == 'q':\n                message[i] = 'Q'\n    message = ''.join(message)\n    return message\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    max_prime = 0\n    for i in range(len(lst)):\n        if prime(lst[i]):\n            if max_prime < lst[i]:\n                max_prime = lst[i]\n    return sum([int(i) for i in str(max_prime)])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    prime_numbers = set()\n    for i in lst:\n        # print(i)\n        for j in range(2, i+1):\n            if i%j == 0:\n                prime_numbers.add(j)\n                break\n    # print(prime_numbers)\n    ans = 0\n    for i in prime_numbers:\n        ans += i\n    return ans\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    #Binary search\n    lst.sort()\n    \n    for i in range(len(lst)):\n        if int(str(lst[i])[-1]) % 2 == 0:\n            break\n        \n    max_number = int(str(lst[i])[-1])\n    \n    return sum([int(i) for i in str(max_number)])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst = list(map(int, list(str(lst))))\n    lst.sort()\n    digs = []\n    for i in lst:\n        digs.append(str(i).rjust(2, '0'))\n    digs.sort()\n    return int(digs[-1])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    max_prime = -9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n    sum_digit = 0\n    for i in lst:\n        if i > max_prime:\n            max_prime = i\n    for i in str(max_prime):\n        sum_digit += int(i)\n    return sum_digit\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    res = 0\n    for i in lst:\n        res += i%10\n    return res\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    max_number = 0\n    for i in lst:\n        if i > max_number:\n            max_number = i\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    res = 0\n    for i in lst:\n        while i:\n            res += i % 10\n            i //= 10\n    return res\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lst = [str(i) for i in lst]\n    lst = list(filter(lambda x: x.isdigit(), lst))\n    print(lst)\n    lst = list(filter(lambda x: str(x)!= '0', lst))\n    print(lst)\n    lst = list(map(int, lst))\n    print(lst)\n    max_prime = max(lst)\n    print(max_prime)\n    return sum([int(i) for i in list(str(max_prime))])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    prime = False\n    primes = []\n    for i in range(0, len(lst)):\n        if not prime:\n            for j in range(2, lst[i]):\n                if lst[i]%j == 0:\n                    prime = True\n                    break\n            else:\n                primes.append(lst[i])\n        if len(primes) > 0:\n            prime = False\n            primes = []\n    if len(primes) > 0:\n        return sum(primes)\n    else:\n        return 0\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        if type(dict)!= dict:\n            return False\n        else:\n            if all(isinstance(x, str) for x in dict.values()):\n                if all(isinstance(x, str) for x in dict.keys()):\n                    return True\n                else:\n                    return False\n            elif all(isinstance(x, str) for x in dict.keys()):\n                if all(isinstance(x, str) for x in dict.values()):\n                    return True\n                else:\n                    return False\n            else:\n                return False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if dict:\n        if dict.keys() == {\"name\",\"age\",\"city\"}:\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(dict.keys())!= 0:\n        for i in dict.keys():\n            if not isinstance(i, str):\n                return False\n        for j in dict.values():\n            if not isinstance(j, str):\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    if dict == {}:\n        return False\n    else:\n        if type(dict) == dict and all(type(item) == str for item in dict.values()):\n            for key in dict.keys():\n                if type(key)!= str:\n                    return False\n                if key.islower() == False:\n                    return False\n                if key.isupper() == False:\n                    return False\n            return True\n        else:\n            return False\n        \ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all the elements of the list are strings in\n    lower case or all the elements of the list are strings in upper case, \n    else return False. The function should return False if the list is empty.\n    Examples:\n    check_list_case([\"a\",\"b\",\"c\"]) should return False.\n    check_list_case([\"A\",\"B\",\"c\"]) should return True.\n    check_list_case([\"a\",\"A\",\"b\"]) should return False.\n    check_list_case([\"a\",\"b\",\"A\"]) should return False.\n    check_list_case([\"a\",\"a\",\"A\"]) should return True.\n    check_list_case([\"a\",\"b\",\"C\"]) should return False.\n    check_list_case([\"A\",\"B\",\"C\"]) should return True.\n    \"\"\"\n    \n    if list == []:\n        return False\n    else:\n        if type(list) == list and all(type(item) == str for item in list):\n            for i in range(len(list)):\n                if type(list[i])!= str:\n                    return False\n                if list[i].islower() == False:\n                    return False\n                if list[i].isupper() == False:\n                    return False\n            return True\n        else:\n            return False\n        \ndef check_list_case2(list):\n    \"\"\"\n    Given a list, return True if all the elements of the list are strings \n    in lower case, else return False. The function should return False \n    if the list is empty.\n    Examples:\n    check_list_case2([\"a\",\"b\",\"c\"]) should return False.\n    check_list_case2([\"A\",\"B\",\"c\"]) should return True.\n    check_list_case2([\"a\",\"b\",\"A\"]) should return False.\n    check_list_case2([\"a\",\"b\",\"c\"]) should return False.\n    check_list_case2([\"A\",\"B\",\"C\"]) should return True.\n    \"\"\"\n    \n    if list == []:\n        return False\n    else:\n        if type(list) == list and all(type(item) == str for item in list):\n            for i in range(len(list)):\n                if type(list[i])!= str:\n                    return False\n                if list[i].islower() == False:\n                    return False\n            return True\n        else:\n            return False\n        \ndef check_string_case(string):\n    \"\"\"\n    Given a string, return True if all the characters of the string are \n    strings in lower case or all the characters of the string are strings \n    in upper case, else return False. The function should return False \n    if the string is empty.\n    Examples:\n    check_string_case(\"a\") should return False.\n    check_string_case(\"A\") should return True.\n    check_string_case(\"a\") should return False.\n    check_string_case(\"a\") should return False.\n    check_string_case(\"Abc\") should return False.\n    check_string_case(\"ABC\") should return True.\n    \"\"\"\n    \n    if string == \"\":\n        return False\n    else:\n        if type(string) == str and all(type(item) == str for item in string):\n            for i in range(len(string)):\n                if type(string[i])!= str:\n                    return False\n                if string[i].islower() == False:\n                    return False\n                if string[i].isupper() == False:\n                    return False\n            return True\n        else:\n            return False\n        \ndef check_string_case2(string):\n    \"\"\"\n    Given a string, return True if all the characters of the string are \n    strings in lower case, else return Fals"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if len(dict) == 0:\n        return False\n    for i in dict:\n        if type(i)!= str or type(i)!= int:\n            return False\n    for i in dict:\n        if i.isupper():\n            return False\n        if i.islower():\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(dict) == 0:\n        return False\n    dict_keys = dict.keys()\n    dict_keys = sorted(dict_keys)\n    dict_keys = sorted(dict_keys, key=str.lower)\n    dict_keys = sorted(dict_keys, key=str.upper)\n    if dict_keys == dict.keys():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if dict == {}:\n        return False\n    else:\n        return (set(dict.keys()) == {\"Name\", \"Age\", \"City\"}) and (set(dict.keys()) == {\"STATE\", \"ZIP\"})\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if dict == {}:\n        return False\n    else:\n        for item in dict.items():\n            if not isinstance(item[0], str):\n                return False\n            if not isinstance(item[1], str):\n                return False\n        return True"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if type(key)!= str:\n            return False\n        if type(dict[key])!= str:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(dict.keys()) == 0:\n        return False\n    return all(x.isalpha() for x in dict.keys()) and all(x.isupper() for x in dict.keys())\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    primes = []\n    i = 2\n    while i < n + 1:\n        for k in range(2, i):\n            if i % k == 0:\n                break\n        else:\n            primes.append(i)\n        i += 1\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n < 1:\n        return []\n    prime_list = []\n    for i in range(2, n+1):\n        prime_list.append(i)\n    n = 1\n    while n < n + 5:\n        prime_list.remove(n)\n        for i in range(n + 1, n + 7):\n            if i % n == 0:\n                prime_list.remove(i)\n        n += 1\n    return prime_list\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    numbers = [2,3]\n    if n < 2:\n        return numbers\n    elif n < 3:\n        return numbers + [2]\n    elif n < 5:\n        return numbers + [2,3]\n    elif n < 7:\n        return numbers + [2,3,5]\n    else:\n        while len(numbers) < n:\n            for num in range(2, numbers[-1]+1):\n                if not is_prime(num):\n                    continue\n                if num < numbers[-1]:\n                    numbers.append(num)\n                    if len(numbers) == n:\n                        return numbers\n        return numbers\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        return []\n    lst = []\n    for i in range(1, n+1):\n        if is_prime(i):\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    array = []\n    if n < 1:\n        return array\n    for i in range(2, n + 1):\n        if check_prime(i):\n            array.append(i)\n    return array\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    def prime_list(n):\n        \"\"\"Returns a list of prime numbers up to n\"\"\"\n        prime_list = []\n        for i in range(2, n+1):\n            if is_prime(i):\n                prime_list.append(i)\n        return prime_list\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    primes = [2,3,5,7]\n    if n <= 2:\n        return primes[:n]\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    primes = [2,3]\n    for i in range(5,n+1):\n        for prime in primes:\n            if i%prime==0:\n                break\n            if prime > int(sqrt(i)):\n                primes.append(i)\n                break\n    return primes[:n]\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    import numpy as np\n    lst=np.arange(2,n)\n    for i in range(0,n-1):\n        x=np.count_nonzero(np.where(lst%i==0,0,1))\n        if x==0:\n            lst=lst[lst>i]\n        elif x>0:\n            lst=lst[lst<i+1]\n        else:\n            break\n    return lst.tolist()\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    primes = [2]\n    for i in range(3,n+1):\n        is_prime = True\n        for p in primes:\n            if i % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    r = 0\n    while a > 0:\n        r = r*10 + a%10\n        a = a//10\n    return r*b\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([(a%10)*(b%10)])\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    return int(str(a)[0]) * int(str(b)[0]) * int(str(a)[1]) * int(str(b)[1]) * int(str(a)[2]) * int(str(b)[2])\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return a * b % 100\n    \nprint(multiply(148, 412))\nprint(multiply(19, 28))\nprint(multiply(2020, 1851))\nprint(multiply(14, -15)"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return a * b\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return a * b"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return a * b\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    a = int(a)\n    b = int(b)\n    if a == 0:\n        return 0\n    elif a < 0 or b < 0:\n        return -1\n    else:\n        return getUnitDigit(a) * getUnitDigit(b)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    return (a * b) % 100\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    product = a*b\n    product = str(product)\n    count = 0\n    for i in product:\n        if int(i) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(s) == 0:\n        return 0\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    total = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char in \"AEIOU\":\n            total += 1\n    return total\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert s!= '', 'Empty string'\n    \n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].isupper():\n                count += 1\n        \n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(1, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n    \n    \ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in odd indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 2\n    count_lower('dBBE') returns 1\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'aeiou':\n            count += 1\n    return count\n    \n    \ndef count_odd_vowels(s):\n    \"\"\"\n    Given a string s, count the number of vowels in odd indices.\n    \n    For example:\n    count_odd_vowels('aBCdEf') returns 0\n    count_odd_vowels('abcdefg') returns 2\n    count_odd_vowels('dBBE') returns 1\n    \"\"\"\n    count = 0\n    for i in range(1, len(s), 2):\n        if s[i] in 'aeiou':\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    cnt = 0\n    for i, v in enumerate(s):\n        if v.isupper():\n            cnt += 1\n            if i % 2 == 0:\n                cnt -= 1\n    return cnt\n    \ndef test_count_upper():\n    print('Testing count_upper')\n    assert count_upper('aBCdEf') == 1\n    assert count_upper('abcdefg') == 0\n    assert count_upper('dBBE') == 0\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(s)%2 == 0:\n        raise ValueError('Input must be a string with an even length')\n    return sum(s[i].isupper() for i in range(0,len(s),2))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOU\":\n            n += 1\n    return n\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return 0\n    \ndef count_upper2(s):\n    \"\"\"\n    Better solution:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for c in s if c.isupper())\n    \ndef count_upper3(s):\n    return sum(1 for c in s if c.isupper())\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(s) == 0:\n        return 0\n    else:\n        count = 0\n        for i in range(0, len(s), 2):\n            if s[i].isupper():\n                count += 1\n        return count\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    value = float(value)\n    if abs(value) < 1:\n        return int(value)\n    if value > 0:\n        return int(value + 0.5)\n    return int(value - 0.5)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return round(int(float(value))/2)*2 if float(value)%1 == 0 else int(float(value))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return int(round(float(value)))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # convert string to a float\n    f = float(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    value = float(value)\n    int_part = int(value)\n    frac_part = value - int_part\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if is_integer(value):\n        return int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not isinstance(value, str):\n        return None\n    try:\n        float(value)\n    except ValueError:\n        return None\n    value = float(value)\n    if abs(value) > 10:\n        return int(value)\n    sign = '-' if value < 0 else ''\n    return int(sign + str(round(abs(value), 1)))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return int(round(float(value)))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return int(round(float(value) / 100) * 100) * 100\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if value == '0':\n        return 0\n    \n    value = int(value)\n    if abs(value) <= 1:\n        return value\n    \n    return int(round(value / 2) * 2)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n % 2!= 0:\n        return [n] + make_a_pile(n-1) + make_a_pile(n-2)\n    else:\n        return [n-2] + make_a_pile(n-1) + make_a_pile(n-3)"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [n] * (n // 2)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return (n*[n + (n % 2 == 0)] + n*[n - 1]) if n % 2 == 1 else (n*[n + (n % 2 == 1)] + n*[n - 1])\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # valid that there is always an even number of stones in each level\n    n = make_a_pile.__annotations__['n']\n    if n < 1:\n        return []\n    odd_number_of_stones_in_level = n\n    even_number_of_stones_in_level = n\n    while odd_number_of_stones_in_level % 2 == 0:\n        odd_number_of_stones_in_level = odd_number_of_stones_in_level // 2\n    while even_number_of_stones_in_level % 2 == 0:\n        even_number_of_stones_in_level = even_number_of_stones_in_level // 2\n    odd_number_of_stones_in_level += 1\n    even_number_of_stones_in_level += 1\n    result = []\n    result.append(odd_number_of_stones_in_level)\n    result.append(even_number_of_stones_in_level)\n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not n:\n        return []\n    if n == 1:\n        return [1]\n    return make_a_pile(n - 1) + [n + 2]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return [1, 1, 1]\n    else:\n        return [make_a_pile(n-1) + 1] + make_a_pile(n-1)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    piles = []\n    level = 1\n    while level < n:\n        if level % 2 == 0:\n            piles.append(level * 2)\n        else:\n            piles.append(level * 2 + 1)\n        level += 1\n    return piles\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n % 2 == 1:\n        return [n+1] + make_a_pile(n+1) + make_a_pile(n+1)\n    else:\n        return make_a_pile(n+2) + make_a_pile(n+2)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not n:\n        return []\n    result = make_a_pile(n-1)\n    result += [(n*(n+1))//2]\n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert n > 0, \"You need to enter a positive integer n\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    words = s.split()\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Slicing the string with delimiter, and splitting it by the delimiter\n    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    words = s.split(\", \")\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    words_list = s.split(', ')\n    return words_list\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # split string by comma or space\n    words = s.split(\",\")\n    # convert to lowercase and strip whitespaces\n    words = [w.strip() for w in words]\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return s.split(\", \")\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    word_list = s.split(\",\")\n    return word_list\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return re.split(' ', s)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if x <= y:\n        for i in range(x, y + 1):\n            if i % 2 == 0:\n                return i\n    else:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # check that the number is positive\n    if x < 0 or y > 0:\n        print(\"Error: The input is not valid.\")\n        return\n    # check that the number is an even number\n    elif y > x:\n        print(\"Error: The input is not valid.\")\n        return\n    # find the even number\n    else:\n        # check that the number is even\n        if y % 2 == 0:\n            for i in range(x, y + 1):\n                if i % 2!= 0:\n                    return i\n        # the number is odd\n        else:\n            for i in range(x + 1, y):\n                if i % 2 == 0:\n                    return i\n        # if there's no number in the range\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    num = 0\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            num = i\n    return num\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert x <= y\n    \n    if x == y:\n        return x\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    assert x < y, \"The first parameter should be smaller than the second.\"\n    \n    if x + 1 < y:\n        return -1\n    \n    for i in range(x + 1, y):\n        if i % 2 == 0:\n            return i\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # set the upper and lower bounds for the loop\n    upper = x\n    lower = y\n    # set the variable to be zero\n    num = 0\n    while num == 0:\n        # if the lower and upper bound are equal, the variable is equal to the lower bound\n        if upper == lower:\n            num = upper\n            break\n        # if the lower bound is bigger than the upper bound, the variable is equal to the lower bound\n        elif upper > lower:\n            num = lower\n            break\n        # if the lower bound is smaller than the upper bound, the variable is equal to the higher bound\n        elif upper < lower:\n            num = upper\n            break\n        # if all three conditions are not true, then the variable is set to the lower bound\n        lower = lower - 1\n    return num\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if x > y:\n        return -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if x > y:\n        return -1\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return x\n        else:\n            return y - 1\n    else:\n        return y - 1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # We know that this is a valid range\n    # if x < y:\n    #     temp = x\n    #     x = y\n    #     y = temp\n    \n    # if x % 2 == 0 or x % 2 == 1:\n    #     return x\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Create a dictionary to store the key and value in the form of key = value\n    # This dictionary will be used to convert the binary number to decimal\n    round_avg_dict = {'0b':1, '0.':'0', '1.':'1', '1b':2}\n    # Try to convert the binary to decimal\n    try:\n        # convert the binary to decimal\n        rounded_avg = ((m + 1) - n) * (int(n) + int(m)) // 2\n        # Convert the decimal into binary\n        rounded_avg = bin(rounded_avg)[2:]\n        # Check if the length of the rounded_avg is larger than 30\n        if len(rounded_avg) > 30:\n            rounded_avg = rounded_avg[:30]\n        # Round the rounded_avg to the nearest integer and convert it to binary\n        rounded_avg = int(rounded_avg, 2)\n        rounded_avg = bin(rounded_avg)[2:]\n        return rounded_avg\n    # If there is an error in converting the binary to decimal, return -1\n    except ValueError:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    avg = (n+m)/2\n    avg = int(avg)\n    return avg\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return rounded_avg_binary(n, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n >= m:\n        return -1\n    else:\n        return \"{0:b}\".format((n + m) // 2)"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n > m:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n > m:\n        return -1\n    elif n == m:\n        return bin(n)[2:]\n    else:\n        return bin(int(n + 1 + m) / 2)[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    rounded_n = math.ceil(n / (m+1) * m)\n    if rounded_n < n:\n        rounded_n += 1\n    rounded_m = math.ceil(m / (n+1) * n)\n    if rounded_m < m:\n        rounded_m += 1\n    if rounded_n > rounded_m:\n        rounded_m = -1\n    if rounded_n == rounded_m:\n        rounded_m = -1\n    return bin(rounded_n)[2:].zfill(rounded_m+1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # if n < m:\n    #     return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return str(int(round(float(bin(int((int(n) + int(m)) / 2))[2:]))))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(list(set([i for i in x if i % 2!= 0])))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(list(set(x)))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # get the list of the digits\n    digit_list = [int(i) for i in str(x)]\n    # convert list to set and sort\n    return sorted(set(digit_list), key=digit_list.index)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    return sorted([i for i in x if not any(map(lambda x: x%2, list(str(i))))])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    x = list(x)\n    x = sorted(x, reverse=True)\n    unique_x = []\n    for i in x:\n        if not any(i % 10 == j for j in unique_x):\n            unique_x.append(i)\n    return unique_x\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(x)\n    \ndef cont_2_inc(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that's greater than or equal to the previous one.\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    temp = []\n    for i in x:\n        dig = i % 10\n        if dig not in temp:\n            temp.append(dig)\n    return temp\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # the below code will generate all the numbers and store them in a list\n    # we want all the numbers that are not multiple of 2 or 3\n    all_numbers = []\n    for i in x:\n        str_num = str(i)\n        # now we convert it to a list of characters\n        char_list = list(str_num)\n        # we check if any element in the list is a digit\n        if any(char.isdigit() for char in char_list):\n            # if it is, we remove it\n            char_list.remove(char_list[i])\n        # at this point we get a list of characters\n        # now we convert it to an integer\n        integer = int(''.join(char_list))\n        # if the integer is multiple of 2, then we remove the number from \n        # the list\n        if integer % 2 == 0:\n            char_list.remove(char_list[i])\n        # if the integer is multiple of 3, then we remove the number from \n        # the list\n        if integer % 3 == 0:\n            char_list.remove(char_list[i])\n        # now we convert it back to a string\n        new_string = ''.join(char_list)\n        # now we convert it back to an integer\n        new_int = int(new_string)\n        all_numbers.append(new_int)\n    all_numbers = sorted(all_numbers)\n    return all_numbers\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    y = []\n    for i in x:\n        if i == 0:\n            y.append(i)\n        else:\n            temp = list(str(i))\n            if len(temp)%2 == 0:\n                y.append(i)\n    return sorted(y)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # find the set of unique numbers\n    set_x = set(x)\n    # loop over set_x and add each digit to a new list\n    list_x = []\n    for digit in set_x:\n        for num in x:\n            if num == digit:\n                list_x.append(num)\n    # sort the list\n    list_x.sort()\n    return list_x\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return []\n    else:\n        if len(arr) <= 3:\n            return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        else:\n            arr.sort(reverse = True)\n            arr = list(map(str,arr))\n            arr = arr[1:9]\n            arr.reverse()\n            arr = \"\".join(arr)\n            arr = list(map(int, arr))\n            return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    arr.sort()\n    new_arr = []\n    for i in range(len(arr)):\n        if 1 <= arr[i] <= 9:\n            arr[i] = get_digit(arr[i])\n            new_arr.append(arr[i])\n    new_arr.reverse()\n    return new_arr\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Your Code Here\n    if arr == None:\n        return []\n    n = len(arr)\n    if n == 0:\n        return []\n    \n    arr = sorted(arr)\n    \n    arr_rev = arr[::-1]\n    \n    arr_rev_map = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    arr_rev_map_rev = {'One': 1, 'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5, 'Six': 6, 'Seven': 7, 'Eight': 8, 'Nine': 9}\n    \n    arr_rev_map_rev_com = {v: k for k, v in arr_rev_map_rev.items()}\n    \n    for i in range(n):\n        arr[i] = arr_rev_map_rev_com[arr_rev[i]]\n        \n    return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if not arr: return []\n    \n    arr.sort()\n    \n    # reverse the array\n    arr.reverse()\n    \n    # get a list of numbers between 1 and 9\n    arr = [str(i) for i in arr if 1 <= int(i) <= 9]\n    \n    # return sorted list of numbers\n    return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # ******\n    # My first solution:\n    # ******\n    \n    # my_sort = sorted(arr)\n    # print(my_sort)\n    # my_reversed = my_sort[::-1]\n    # print(my_reversed)\n    # result = []\n    # for item in my_reversed:\n    #     if item > 9:\n    #         result.append(str(item))\n    #     else:\n    #         if item == 1:\n    #             result.append(\"One\")\n    #         if item == 2:\n    #             result.append(\"Two\")\n    #         if item == 3:\n    #             result.append(\"Three\")\n    #         if item == 4:\n    #             result.append(\"Four\")\n    #         if item == 5:\n    #             result.append(\"Five\")\n    #         if item == 6:\n    #             result.append(\"Six\")\n    #         if item == 7:\n    #             result.append(\"Seven\")\n    #         if item == 8:\n    #             result.append(\"Eight\")\n    #         if item == 9:\n    #             result.append(\"Nine\")\n    # return result\n    # ******\n    # ******\n    # # Solution from leetcode\n    # ******\n    \n    # def sort_by_length(arr):\n    #     return [d for d in {\n    #         \"One\": 1,\n    #         \"Two\": 2,\n    #         \"Three\": 3,\n    #         \"Four\": 4,\n    #         \"Five\": 5,\n    #         \"Six\": 6,\n    #         \"Seven\": 7,\n    #         \"Eight\": 8,\n    #         \"Nine\": 9,\n    #     }.items() if d[0] in arr]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Test case\n    # arr = [1, 3, 5, 2, 4, 6, 8, 9, 7]\n    # result = by_length(arr)\n    # print(arr)\n    # print(result)\n    # print(\"\")\n    \n    # Initializing the variable\n    # Declare an empty list \n    new_arr = [] \n    \n    # Initialize the total number of elements \n    length = len(arr) \n    \n    # Traverse the given array \n    for i in range(length): \n    \n        # If the element is 1, 2, 3, 4, 5, 6, 7, 8, 9, ignore the element \n        if (arr[i] >= 1 and arr[i] <= 9): \n            continue\n        else: \n            # Otherwise, append the element to new_arr \n            new_arr.append(arr[i]) \n    \n    # Traverse the new_arr \n    for i in range(len(new_arr)): \n    \n        # Traverse the arr again, check whether the element is 1, 2, 3, 4, 5, 6, 7, 8, 9 and replace it with the corresponding name \n        if new_arr[i] in range(1, 10): \n            new_arr[i] = str(new_arr[i]) + \" \" + str(get_name(new_arr[i])) \n    \n    # Return the sorted array \n    return new_arr\n    \ndef get_name(n):\n    \"\"\"\n    Given an integer n, return the name of the corresponding integer from its decimal representation.\n    \n    For example:\n      n = 1\n            -> return \"One\"\n      n = 2\n            -> return \"Two\"\n      n = 10\n            -> return \"Ten\"\n    \"\"\"\n    # Declare an empty string\n    # Declare an empty list\n    # Declare an empty dictionary\n    name = \"\"\n    name_list = []\n    int_dict = {\n        1 : \"One\", \n        2 : \"Two\", \n        3 : \"Three\", \n        4 : \"Four\", \n        5 : \"Five\", \n        6 : \"Six\", \n        7 : \"Seven\", \n        8 : \"Eight\", \n        9 : \"Nine\",\n    }\n    \n    # check whether the integer is a zero \n    if n == 0: \n        return \"Zero\"\n    \n    # If the integer is not zero, traverse the integer and return the name of the corresponding integer \n    # traverse the integer and return the name of the corresponding integer \n    while n > 0: \n        # Update the name_list to have the name of the corresponding integer \n        name_list = int_dict[n % 10] \n        # Add the name of the corresponding integer to the name string \n        name = name_list + name \n        # Update the integer to have the remainder \n        n = n // 10\n        # Return the name string \n    return name\n    \ndef get_name_recursive(n):\n    \"\"\"\n    Given an integer n, return the name of the corresponding integer from its decimal representation.\n    \n    For example:\n      n = 1\n            -> return \"One\"\n      n = 2\n            -> return \"Two\"\n      n = 10\n            -> return \"Ten\"\n    \"\"\"\n    # Declare an empty string\n    # Declare an empty list\n    # Declare an empty dictionary\n    name = \"\"\n    name_list = []\n    int_dict = {\n        1 : \"One\", \n        2 : \"Two\", \n        3 : \"Three\", \n        4 : \"Four\", \n        5 : \"Five\", \n        6 : \"Six\", \n        7 : \"Seven\", \n        8 : \"Eight\", \n        9 : \"Nine\",\n    }\n    \n    # check whether the integer is a zero \n    if n == 0: \n        return \"Zero\"\n    \n    # If the integer is not zero, traverse the integer and return the name of the corresponding integer \n    # traverse the integer and return the name of the corresponding integer \n    while n > 0: \n        # Update the name_list to have the name of the corresponding integer \n        name_list = int_dict[n % 10] \n        # Add the name of the corresponding intege"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    new_arr = []\n    if len(arr) == 0:\n        return new_arr\n    for num in arr:\n        if num > 9 or num < 1:\n            continue\n        new_arr.append(name[num-1])\n    return new_arr[::-1]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return_list = []\n    return_list_reverse = []\n    return_list_sort = []\n    \n    arr = sorted(arr)\n    arr_reverse = arr[::-1]\n    arr_sort = sorted(arr_reverse)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert n >= 1, \"Number of inputs must be greater than zero\"\n    i = 0\n    result = []\n    while i <= n:\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(i)\n        i += 1\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(i)\n        else:\n            res.append(i * f(i-1))\n    return res\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    return [factorial(i) if i % 2 == 0 else i for i in range(n)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i*i)\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n < 0:\n        raise ValueError(\"n < 0 not allowed\")\n    if n == 0:\n        return []\n    result = f(n-1)\n    if n%2 == 0:\n        result.append(n)\n    else:\n        result.extend(list(range(1,n+1)))\n    return result\n    \nif __name__ == '__main__':\n    print(f(5))\n    print(f(6))\n    print(f(7))\n    print(f(10))\n    print(f(11))\n    print(f(12))"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return []\n    else:\n        if n % 2 == 0:\n            return [1] + f(n // 2)\n        else:\n            return f(n // 2) + [1]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # check if n is a positive integer\n    if type(n) is not int:\n        raise TypeError(\"n must be an integer\")\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    factorial = 1\n    lst = list()\n    for i in range(1, n+1):\n        factorial *= i\n        if i % 2 == 0:\n            lst.append(factorial)\n        else:\n            lst.append(sum(range(1, i+1)))\n    return lst\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    f = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            f.append(factorial(i))\n        else:\n            f.append(i)\n    return f\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return f(n//2) + [n]\n        else:\n            return f(n//2) + [sum(f(i)) for i in range(1, n + 1)]\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # approach 1:\n    even, odd = 0, 0\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    # Time: O(n)\n    # Space: O(n)\n    \"\"\"\n    0. Solution\n    1. We will first find the number of even and odd integer palindromes (using count)\n    2. We then get the number of even integers (1st digit) and the number of odd integers (3rd digit)\n    3. The 2 numbers will be the number of even and odd integers in the range(1, n)\n    \"\"\"\n    # Number of even integers\n    evens = 0\n    # Number of odd integers\n    odds = 0\n    # Integer to check palindromicity\n    num = 0\n    # number of palindromes from 1 to n\n    nums = 0\n    while num <= n:\n        num += 1\n        # If palindrome\n        if is_palindrome(num):\n            nums += 1\n        # Even integers\n        if num % 10 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # key: odd even palindrome\n    # value: number of odd and even palindrome that are less than n\n    # time: O(n)\n    # space: O(n)\n    odd_pal = 0\n    even_pal = 0\n    for i in range(2, n + 1):\n        # get all odd numbers\n        odd_pal += i // 2 * 2\n        if i % 2 == 1:\n            odd_pal += i\n        # get all even numbers\n        even_pal += i // 2 * 2\n        if i % 2 == 0:\n            even_pal += i\n    return even_pal, odd_pal\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total_even = 0\n    total_odd = 0\n    for i in range(1, n+1):\n        total_even += check_palindrome(i, i)\n        total_odd += check_palindrome(i, i+1)\n    return (total_even, total_odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (even_odd_palindrome_solution(n, True), even_odd_palindrome_solution(n, False))\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def solve(n):\n        dp = [[0,0] for _ in range(n+1)]\n        dp[1][0] = 1\n        dp[1][1] = 1\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    even_count, odd_count = 0, 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # get the number of even palindromes\n    # then get the number of odd palindromes\n    # and get their sum\n    even_num = 0\n    odd_num = 0\n    for i in range(1, n+1):\n        if is_palindrome(i) and is_palindrome(i + 1):\n            even_num += 1\n        elif not is_palindrome(i) and is_palindrome(i + 1):\n            odd_num += 1\n    return (even_num, odd_num)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    even = odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i) and is_palindrome(n-i):\n            even += 1\n        if is_palindrome(i) and not is_palindrome(n-i):\n            odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum(1 for i in arr if sum(int(c) for c in str(abs(i))) > 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def digit_count(num):\n        return len([char for char in str(num) if char in \"1234567890\"])\n    return len([num for num in arr if digit_count(num) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len([i for i in arr if sum_digits(i) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    positive_nums = 0\n    negative_nums = 0\n    for num in arr:\n        if is_positive(num):\n            positive_nums += 1\n        else:\n            negative_nums += 1\n    return positive_nums + negative_nums\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    return sum(digit in {-1,0,1} for digit in arr)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sum_digits = []\n    for num in arr:\n        sum_digits.append(sum(int(i) for i in str(num)))\n    return sum(1 for s in sum_digits if s > 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    total = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            total += 1\n    return total\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(int(str(i)) for i in arr if sum(map(int, str(i))) > 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sum_of_digits = 0\n    count = 0\n    for num in arr:\n        sum_of_digits += num\n        if sum_of_digits >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your Code Here\n    return len([x for x in arr if sum(map(int, str(x))) > 0])\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    else:\n        if len(arr) == 1:\n            return True\n        if arr[0] < arr[1]:\n            return move_one_ball(arr[1:])\n        elif arr[0] > arr[1]:\n            return False\n        else:\n            return move_one_ball(arr[1:]) and move_one_ball(arr[2:])\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #Base case \n    if len(arr) == 0:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    N = len(arr)\n    \n    if N == 0:\n        return True\n    \n    if N == 1:\n        return True\n    \n    def check_one_right_shift(arr):\n        \"\"\"Returns True if it is possible to perform one right shift operation\n        on given array\"\"\"\n        \n        return(is_decreasing(arr))\n    \n    \n    def right_shift(arr):\n        \"\"\"Assuming array is already sorted, perform right shift operation.\n        The right shift operation is to swap the first and the last element\n        of the array.\n        \"\"\"\n        \n        return(arr[0], arr[-1])\n    \n    \n    def is_decreasing(arr):\n        \"\"\"Return True if array is decreasing else False\"\"\"\n        \n        l = len(arr)\n        for i in range(l):\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n    \n    \n    def can_be_sorted(arr):\n        \"\"\"Check if array can be sorted in non-decreasing order by performing \n        right shift operation\"\"\"\n        \n        for _ in range(N-1):\n            if not check_one_right_shift(arr):\n                return False\n        return True\n    \n    \n    def two_right_shifts(arr):\n        \"\"\"Assuming array is already sorted, perform two right shift operations.\n        The two right shift operation is to swap the first and the second element\n        of the array.\n        \"\"\"\n        \n        return(right_shift(arr), right_shift(arr))\n    \n    \n    def move_left(arr):\n        \"\"\"Move the first element to the starting position in the array\"\"\"\n        \n        return(arr[1:], arr[0])\n    \n    \n    def can_be_sorted_again(arr):\n        \"\"\"Return True if array can be sorted again in non-decreasing order.\n        This means right shift operation needs to be performed at least once to\n        make the array sorted in non-decreasing order.\"\"\"\n        \n        if not can_be_sorted(arr):\n            return False\n        return can_be_sorted(two_right_shifts(arr))\n    \n    \n    def move_to_end(arr):\n        \"\"\"Move the first element to the end position in the array\"\"\"\n        \n        return(arr[:-1], arr[-1])\n    \n    \n    def can_be_sorted_again2(arr):\n        \"\"\"Return True if array can be sorted again in non-decreasing order.\n        This means right shift operation needs to be performed at least once to\n        make the array sorted in non-decreasing order.\"\"\"\n        \n        if not can_be_sorted_again(arr):\n            return False\n        return can_be_sorted(move_to_end(arr))\n    \n    \n    def move_one_left_shift(arr):\n        \"\"\"Move the last element to the starting position in the array\"\"\"\n        \n        return(arr[1:], arr[0])\n    \n    \n    def can_be_sorted_again3(arr):\n        \"\"\"Return True if array can be sorted again in non-decreasing order.\n        This means right shift operation needs to be performed at least once to\n        make the array sorted in non-decreasing order.\"\"\"\n        \n        if not can_be_sorted_again(arr):\n            return False\n        return can_be_sorted(move_one_left_shift(arr))\n    \n    \n    def move_one_left_shift_and_right_shift(arr):\n        \"\"\"Move the last element to the starting position in the array\"\"\"\n        \n        return(right_shift(move_one_left_shift(arr)), arr[0])\n    \n    \n    def can_be_sorted_again4(arr):\n        \"\"\"Return True if array can be sorted again in non-decreasing order.\n        This means right shift operation needs to be performed at least once to\n        make the array sorted in non-decreasing order.\"\"\"\n        \n        if not can_be_sorted_again(arr):\n            return False\n        return can_be_sorted(move_one_left_shift_and_right_shift(arr))\n    \n    \n    def move_one_right_shift(arr):\n        \"\"\"Mov"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(arr)==0: return True\n    if len(arr)==1: return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if(len(arr)==0):\n        return True\n    if(len(arr)==1):\n        return True\n    for i in range(len(arr)-1):\n        if(arr[i]>arr[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return True\n    \n    # Calculating the number of right shift operations\n    number_of_shift = math.ceil(len(arr)/2)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    \n    for i in range(1, len(arr)):\n        if arr[i-1] > arr[i]:\n            return False\n    return True\n    "
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # IMPLEMENT THIS FUNCTION HERE\n    if sum(lst1) == 0:\n        return \"YES\"\n    if sum(lst2) == 0:\n        return \"NO\"\n    if sum(lst1) % 2!= 0:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert lst1!= [], \"The lst1 must be non-empty.\"\n    assert lst2!= [], \"The lst2 must be non-empty.\"\n    assert len(lst1) == len(lst2), \"Both lists must contain the same number of elements.\"\n    assert all(x % 2 == 0 for x in lst1), \"Both lists must contain the same even numbers.\"\n    # pass\n    count = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0 and lst2[i] % 2 == 0:\n            count += 1\n    if count > 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n    # pass\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # base case\n    if len(lst1) == 0:\n        return \"NO\"\n    if len(lst2) == 0:\n        return \"YES\"\n    # if length of lst1 and lst2 is same\n    if len(lst1) == len(lst2):\n        # if length of lst1 is even, return YES\n        if len(lst1) % 2 == 0:\n            return \"YES\"\n        # if length of lst1 is odd, return NO\n        else:\n            return \"NO\"\n    # if length of lst1 is longer than lst2, return NO\n    if len(lst1) > len(lst2):\n        return \"NO\"\n    # if length of lst1 is shorter than lst2, return YES\n    if len(lst1) < len(lst2):\n        return \"YES\"\n    # find middle value in both list\n    mid = len(lst1) // 2\n    # if mid value in lst1 is even, return YES\n    if lst1[mid] % 2 == 0:\n        return \"YES\"\n    # if mid value in lst1 is odd, return NO\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst1.sort(reverse=True)\n    lst2.sort(reverse=True)\n    for i in range(len(lst1)):\n        if lst1[i]%2 == 0:\n            if lst1[i] == lst2[i]:\n                return \"YES\"\n        else:\n            if lst1[i] == lst2[i]:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code here\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Algorithm:\n    # Get the length of lst1 and lst2\n    l1_len = len(lst1)\n    l2_len = len(lst2)\n    # If lst1 has odd number of elements, return \"NO\"\n    if l1_len % 2 == 1:\n        return \"NO\"\n    # If lst2 has odd number of elements, return \"NO\"\n    if l2_len % 2 == 1:\n        return \"NO\"\n    # If l1 is longer than lst2, swap lst1 and lst2\n    if l1_len > l2_len:\n        lst1, lst2 = lst2, lst1\n    # If lst1 is shorter than lst2, swap lst1 and lst2\n    if l1_len < l2_len:\n        lst1, lst2 = lst2, lst1\n    # If lst1 is longer than lst2, swap lst1 and lst2\n    if l1_len > l2_len:\n        lst1, lst2 = lst2, lst1\n    # Starting at the end of lst1, remove the even numbers from lst2\n    for i in range(l2_len-1):\n        if lst1[i] % 2 == 0:\n            lst2.pop(i)\n            lst2.insert(i, lst1[i])\n    # If lst2 still has elements, return \"NO\"\n    if len(lst2)!= 0:\n        return \"NO\"\n    # If lst2 still has no elements, return \"YES\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # A function that takes a list of numbers and returns true if the sum of its elements\n    # is even and false otherwise.\n    def sum_is_even(numbers):\n        # Implement this function.\n        # For example, if the list is [1, 2, 3, 4], the function returns true because 1 + 2 + 3 + 4 = 10.\n        return sum(numbers) % 2 == 0\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Edge cases\n    if lst1 == [] and lst2 == []:\n        return \"YES\"\n    if lst1 == [] and lst2!= []:\n        return \"NO\"\n    if lst1!= [] and lst2 == []:\n        return \"NO\"\n    # Set up\n    lst3 = []\n    # Loop through lst1\n    for i in lst1:\n        # If even number\n        if i % 2 == 0:\n            # Add to lst3\n            lst3.append(i)\n    # Loop through lst2\n    for i in lst2:\n        # If even number\n        if i % 2 == 0:\n            # Add to lst3\n            lst3.append(i)\n    # Check if even\n    if lst3 == []:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    histo = {}\n    for i in test:\n        if i in histo:\n            histo[i] += 1\n        else:\n            histo[i] = 1\n    return histo\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    test_dic = {}\n    for i in test:\n        if i not in test_dic.keys():\n            test_dic[i] = 1\n        else:\n            test_dic[i] += 1\n    return(test_dic)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    d = dict()\n    for s in test.lower().split():\n        if s in d:\n            d[s] += 1\n        else:\n            d[s] = 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if test == \"\":\n        return {}\n    dic = {}\n    for letter in test:\n        if letter in dic:\n            dic[letter] += 1\n        else:\n            dic[letter] = 1\n    return dic\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    d = {}\n    for e in test:\n        if e in d:\n            d[e] += 1\n        else:\n            d[e] = 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    hist = {}\n    \n    for i in test:\n        hist[i] = hist.get(i, 0) + 1\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not test:\n        return {}\n    \n    # using defaultdict \n    hist = defaultdict(int)\n    for c in test:\n        hist[c] += 1\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    d = {}\n    for letter in test:\n        d[letter] = d.get(letter, 0) + 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    d = {}\n    for i in test.lower():\n        d[i] = d.get(i, 0) + 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    d = {}\n    for i in test:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    return (\"\",\"\")\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #Sort the characters in s and c and make a dictionary with characters as keys and their indexes as values.\n    #Then, start from the beginning of the dictionary and check if the character in s at the given index in s is equal to any character in c.\n    #If the character is equal to any character in c, we can delete it.\n    #Return the result string, whether it is a palindrome or not and a boolean value if the check is passed or not.\n    s = sorted(s)\n    c = sorted(c)\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            s = s[:i] + s[i+1:]\n            count += 1\n        else:\n            return (s,True) if count == len(c) else (s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if(not s or not c): return (s,False)\n    \n    for i in range(len(s)-len(c)+1):\n        if(s[i:i+len(c)] == c):\n            return (s[:i] + s[i+len(c):],True)\n    \n    return (s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (s,True) if s == reverse_string(c) else (s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(s)==0:\n        return (\"\",True)\n    if len(c)==0:\n        return (\"\",False)\n    i=0\n    j=0\n    result=\"\"\n    while i<len(s) and j<len(c):\n        if s[i]==c[j]:\n            result=result+s[i]\n            i=i+1\n            j=j+1\n        else:\n            i=i+1\n    if j<len(c):\n        result=result+s[i:]\n    if i<len(s):\n        result=result+s[:i]\n    if s==result:\n        return (result,True)\n    return (result,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s_set = set(s)\n    c_set = set(c)\n    \n    if not s_set & c_set:\n        return(s,False)\n    \n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in c_set:\n            s.pop(i)\n            break\n    \n    if s == s[::-1]:\n        return(''.join(s),True)\n    else:\n        return(''.join(s),False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    while True:\n        if c == s[0]:\n            s = s[1:]\n        else:\n            return s,False\n        if len(s) == 0:\n            return \"\",True\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = len(s)\n    ans = s[:n]\n    for i in range(n):\n        if s[i] in c:\n            ans = ans[:i] + ans[i+1:]\n    return (ans,True if ans==ans[::-1] else False)\n    "
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s1 = []\n    s2 = []\n    for i in range(len(s)):\n        if s[i] not in c:\n            s1.append(s[i])\n    for i in range(len(s)-1,-1,-1):\n        if s[i] not in c:\n            s2.append(s[i])\n    if s1 == s2:\n        return (''.join(s1),True)\n    else:\n        return (''.join(s1),False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result_string=''\n    for i in range(len(s)):\n        if s[i] not in c:\n            result_string=result_string+s[i]\n    if result_string==result_string[::-1]:\n        return (result_string,True)\n    else:\n        return (result_string,False)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    output = []\n    for i in lst:\n        t = i.replace(\"0\",\"\")\n        odd = \"\".join(filter(lambda x: int(x)%2,t))\n        count = len(odd)\n        output.append(\"the number of odd elements {}n the str{} of the {}nput.\".format(count,i,i))\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(lst)):\n        for j in lst[i]:\n            if int(j) % 2!= 0:\n                count += 1\n    output = []\n    for i in range(len(lst)):\n        output.append(\"the number of odd elements {}n the str{} of the {}nput.\".format(count,i+1,lst[i]))\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    new_lst = []\n    for i in range(len(lst)):\n        num = 0\n        for j in lst[i]:\n            if int(j) % 2!= 0:\n                num += 1\n        new_lst.append(str(num) + \"n the str\" + str(i) + \"ng\" + \" of the \" + str(i) + \"nput.\")\n    return new_lst\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [\"the number of odd elements {0} of the str{0} of the {0}input.\".format(i) if int(lst[i][1])%2 == 1 else \"the number of odd elements {0} of the str{0} of the {0}input.\".format(i) for i in range(len(lst))]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    output = []\n    for i in lst:\n        odds = 0\n        for j in i:\n            if j % 2!= 0:\n                odds += 1\n        output.append(f'the number of odd elements {odds}n the str{i}ng {odds} of the {i}nput.')\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # check if the input is a list of strings\n    if type(lst)!= list:\n        raise TypeError(\"The input is not a list.\")\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # It's just a little harder to implement this than the other 2 problems\n    # but this one is a little harder to conceptualize.\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(lst)):\n        lst[i]=list(lst[i])\n        for j in range(len(lst[i])):\n            lst[i][j]=int(lst[i][j])%2\n        lst[i]=str(sum(lst[i]))\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    res = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2!= 0:\n                count += 1\n        res.append(\"the number of odd elements {}n the str{}n of the {}nput.\".format(count, i, count))\n    return res\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \"the number of odd elements {}n the str{} of the {}nput.\".format(len(lst), len(lst[0]), len(lst))\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # initialize two variables: curr_sum, min_sum\n    # for each index, subtract nums[index]\n    # if curr_sum is less than min_sum, update min_sum\n    curr_sum = 0\n    min_sum = float(\"inf\")\n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        # if the curr_sum is less than min_sum, update min_sum\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n        # if the curr_sum is equal to min_sum,\n        # update curr_sum to the curr_sum\n        elif curr_sum == min_sum:\n            curr_sum = curr_sum + nums[i + 1]\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(nums) == 0:\n        return 0\n    min_sum = float('inf')\n    window_start = 0\n    window_sum = 0\n    for window_end in range(0, len(nums)):\n        window_sum += nums[window_end]\n        while window_sum >= min_sum:\n            min_sum = min(min_sum, window_sum)\n            window_start += 1\n            window_sum -= nums[window_start - 1]\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert nums, \"Empty input\"\n    left, right = 0, 0\n    total = 0\n    min_sum = float('inf')\n    while right < len(nums):\n        total += nums[right]\n        while total >= min_sum:\n            min_sum = min(min_sum, total)\n            left = right\n            right += 1\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(nums) == 0:\n        return 0\n    # \n    cum_sum = 0\n    min_sum = nums[0]\n    for i in nums:\n        cum_sum += i\n        min_sum = min(min_sum, cum_sum)\n        if cum_sum < 0:\n            cum_sum = 0\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    min_sum = float('inf')\n    total_sum = 0\n    for i in nums:\n        total_sum += i\n        if total_sum < min_sum:\n            min_sum = total_sum\n        if total_sum < 0:\n            total_sum = 0\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # For a sum of a sub array of length <= n, the minimum sum of all\n    # the n >= 1 sub-arrays is going to be the maximum sum over the sub-arrays\n    # excluding the last n-1 element.\n    # If the length of the array is n, then the minimum sum of any sub-array\n    # would be the sum of the array itself minus the maximum element of\n    # the array from the beginning of the array\n    min_sum = float('inf')\n    # DP array for memoization\n    dp = [-1 for _ in range(len(nums))]\n    # Initialize the first sub array sum\n    curr_sum = 0\n    # Iterate over the array\n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        # If the current element is equal to the minimum sub array sum so far\n        # then the next sub array sum will not be included\n        # Keep track of the minimum sub array sum\n        if min_sum >= curr_sum:\n            min_sum = curr_sum\n            dp[i] = min_sum\n        else:\n            dp[i] = min_sum\n    # Return the minimum sub array sum\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(nums) == 0:\n        return 0\n    for i in range(len(nums)):\n        if sum(nums[:i+1]) < 0:\n            return min(minSubArraySum(nums[i+1:]))\n    return sum(nums)\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    length = len(nums)\n    sums = []\n    for i in range(length):\n        sums.append(nums[i])\n    sums.append(0)\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not nums: return None\n    sum = 0\n    min_sum = float('inf')\n    for num in nums:\n        sum += num\n        min_sum = min(min_sum, sum)\n        if sum < 0:\n            sum = 0\n    return min_sum\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not grid: return 0\n    l = len(grid[0])\n    m = len(grid)\n    res = 0\n    # vertical\n    for j in range(l):\n        v_cnt = 0\n        for i in range(m):\n            if grid[i][j]:\n                v_cnt += 1\n            else:\n                v_cnt = 0\n            if v_cnt > capacity:\n                v_cnt = capacity\n        res = max(res, v_cnt)\n    # horizontal\n    for i in range(m):\n        h_cnt = 0\n        for j in range(l):\n            if grid[i][j]:\n                h_cnt += 1\n            else:\n                h_cnt = 0\n            if h_cnt > capacity:\n                h_cnt = capacity\n        res = max(res, h_cnt)\n    # diagonal\n    for i in range(m):\n        for j in range(l):\n            diag_cnt = 0\n            if grid[i][j]:\n                diag_cnt += 1\n            if diag_cnt > capacity:\n                diag_cnt = capacity\n            diag_cnt += max(grid[i][j + 1], grid[i + 1][j])\n            res = max(res, diag_cnt)\n    for i in range(m - 1, -1, -1):\n        for j in range(l - 1, -1, -1):\n            diag_cnt = 0\n            if grid[i][j]:\n                diag_cnt += 1\n            if diag_cnt > capacity:\n                diag_cnt = capacity\n            diag_cnt += max(grid[i][j + 1], grid[i - 1][j])\n            res = max(res, diag_cnt)\n    return res\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    row_count = len(grid)\n    col_count = len(grid[0])\n    \n    for i in range(row_count):\n        for j in range(col_count):\n            if grid[i][j] == 1:\n                return -1\n    \n    for i in range(row_count):\n        for j in range(col_count):\n            if grid[i][j] == 0:\n                break\n        \n        if j == col_count - 1:\n            break\n        \n        grid[i][j] = 1\n    \n    max_height = 0\n    \n    for i in range(row_count):\n        cur_height = 0\n        \n        for j in range(col_count):\n            if grid[i][j] == 0:\n                break\n            cur_height += 1\n        \n        if cur_height > max_height:\n            max_height = cur_height\n    \n    if max_height < 0:\n        return -1\n    \n    def lower_bucket(i, j):\n        cur_bucket = grid[i][j]\n        \n        while cur_bucket == 1:\n            cur_bucket = grid[i][j]\n            \n            for x, y in ((i+1, j), (i-1, j), (i, j+1), (i, j-1)):\n                if 0 <= x < row_count and 0 <= y < col_count and grid[x][y] == 1:\n                    grid[x][y] = 0\n                    cur_bucket = max_height\n                    \n            if cur_bucket == 0:\n                return -1\n        \n        return cur_bucket\n    \n    for i in range(row_count):\n        cur_bucket = lower_bucket(i, 0)\n        \n        while cur_bucket!= -1:\n            cur_bucket = lower_bucket(i, 0)\n    \n    return max_height\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # TLE\n    # print(grid)\n    # print(capacity)\n    # print(\"---\")\n    grid = grid\n    row_max = []\n    max_value = 0\n    for i in range(len(grid)):\n        if not row_max:\n            max_value = grid[i].count(1)\n        else:\n            max_value = max(max_value, grid[i].count(1))\n        row_max.append(max_value)\n    max_value = 0\n    for i in range(len(grid[0])):\n        if not row_max:\n            max_value = grid[0][i].count(1)\n        else:\n            max_value = max(max_value, grid[0][i].count(1))\n        row_max.append(max_value)\n    max_value = 0\n    for i in range(len(grid[:, 0])):\n        if not row_max:\n            max_value = grid[:, 0].count(1)\n        else:\n            max_value = max(max_value, grid[:, 0].count(1))\n        row_max.append(max_value)\n    max_value = 0\n    for i in range(len(grid[:, :])):\n        if not row_max:\n            max_value = grid[:, :].count(1)\n        else:\n            max_value = max(max_value, grid[:, :].count(1))\n        row_max.append(max_value)\n    row_max = row_max[::-1]\n    # print(row_max)\n    for i in range(len(row_max)):\n        # print(row_max)\n        if row_max[i] < capacity:\n            break\n        else:\n            if capacity - row_max[i] <= row_max[i + 1]:\n                if capacity - row_max[i] == row_max[i + 1]:\n                    return math.inf\n                return i + 1\n    return capacity - row_max[i]\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # loop through the grid and add 1 to the max and find the max\n    m = 0\n    for row in grid:\n        m = max(m, max(row))\n    return m\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Consider all possible wells and keep track of the minimum number of\n    # steps to go down the wells.\n    wells = []\n    n = len(grid)\n    for i in range(n):\n        row = grid[i]\n        wells.append([i, 0, 0, 0])\n        wells[i][1] = row.count(1)\n    \n    wells = sorted(wells, key=lambda x:x[1], reverse=True)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    min_fill = math.inf\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                min_fill = min(min_fill, capacity - grid[i][j])\n                capacity -= min_fill\n    return min_fill\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Time: O(N^3)\n    # Space: O(N^2)\n    if not grid:\n        return 0\n    n, m = len(grid), len(grid[0])\n    new_grid = [[0 for _ in range(m)] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                for k in range(4):\n                    x = i + dx[k]\n                    y = j + dy[k]\n                    if 0 <= x < n and 0 <= y < m and grid[x][y] == 0:\n                        new_grid[i][j] = 1\n                        break\n    \n    # calculate the # of wells that can be emptied out in 1 step\n    steps = 0\n    for i in range(n):\n        for j in range(m):\n            if new_grid[i][j] == 0:\n                continue\n            steps += math.ceil(grid[i][j] / bucket_capacity)\n            for k in range(4):\n                x = i + dx[k]\n                y = j + dy[k]\n                if 0 <= x < n and 0 <= y < m and new_grid[x][y] == 0:\n                    steps += 1\n    return steps\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def water_at_well(row, col, grid, capacity):\n        \"\"\"\n        Find water in one well (row, col)\n        \"\"\"\n        water = 0\n        if row < 0 or row >= len(grid):\n            return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not grid or not grid[0]:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your code here\n    rows, cols = len(grid), len(grid[0])\n    # check if it is 0, if so, we can return 0 as we don't have any emptying\n    if rows * cols == 0:\n        return 0\n    # initialize the buckets\n    buckets = [[0]*capacity for _ in range(rows)]\n    # for each row and col\n    for row in range(rows):\n        for col in range(cols):\n            # if it's not the 0, then we increase the bucket capacity\n            if grid[row][col] == 1:\n                buckets[row][0] += 1\n    # for each row\n    for row in range(1, rows):\n        # and for each col\n        for col in range(1, cols):\n            # if it is not the 0, we increase the bucket capacity\n            if grid[row][col] == 1:\n                buckets[row][0] += 1\n            # if it is 0, we increase the bucket capacity\n            else:\n                buckets[row][0] = 0\n    # we initialize the bucket capacity and bucket counter\n    bucket_cap, bucket_count = capacity, 0\n    # for each row\n    for row in range(rows):\n        # and for each col\n        for col in range(bucket_cap):\n            # if the capacity of the bucket is 0, we need to increase the bucket capacity\n            # we increase the bucket capacity by 1\n            if buckets[row][col] == 0:\n                bucket_cap += 1\n                bucket_count += 1\n    # return the bucket capacity that has been used\n    return bucket_count\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(arr, key=lambda x: (x ^ 1, x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(arr, key=lambda x: (int(bin(x)[2:]).count(\"1\"), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(arr, key=lambda x: (x, bin(x).count(\"1\")))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(arr)):\n        for j in range(len(arr) - 1):\n            if (arr[j] * 2 + 1 == arr[j + 1]):\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            elif arr[j] * 2 + 1 < arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            else:\n                continue\n    return arr\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not arr:\n        return arr\n    sorted_arr = []\n    # If you don't want to do an extra copy,\n    # you can use sorted()\n    #sorted_arr = sorted(arr)\n    for i in arr:\n        # Why this is faster?\n        # It is really easy to generate a set\n        # and put it in sorted_arr:\n        # list_ = list(set(arr))\n        # sorted_arr.extend(list_)\n        if i == 0:\n            sorted_arr.append(i)\n        else:\n            sorted_arr.append(bin(i).count('1'))\n    return sorted(sorted_arr)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    arr.sort(key=lambda x: (bin(x)[2:],x))\n    return arr\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [word for word in s.split() if len([x for x in word if x.lower() in \"aeiou\"]) == n]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    for word in s.split():\n        if len(word) > n and word.count(' ') == 0 and len(word) > 3:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return []\n    for i in range(len(s)):\n        if s[i] in string.ascii_lowercase:\n            s = s[i+1:]\n            break\n    s = s.split()\n    ans = []\n    for word in s:\n        if n == 1:\n            if \"\".join(set(word)) == \"\":\n                continue\n            ans.append(word)\n        else:\n            if \"\".join(set(word))!= \"\":\n                ans.append(word)\n    return ans\n        \n            "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    words = []\n    if len(s) == 0:\n        return words\n    s = s.split()\n    for i in range(len(s)):\n        if s[i].isalpha() and n <= len(s[i]) and s[i].islower():\n            words.append(s[i])\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [\"\"]"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    ## Your code starts here ##\n    \n    s = s.split()\n    words = []\n    for word in s:\n        if n == 0:\n            break\n        if contains_vowel(word) == False and contains_consonant(word) == True:\n            words.append(word)\n            n = n - 1\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    pass"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    result = []\n    for i in s.split():\n        n = 0\n        for j in i:\n            if j in 'aeiou':\n                n += 1\n        if n == n_consonants:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    words = []\n    if len(s) < n:\n        return words\n    else:\n        for w in s.split():\n            if is_consonant(w[0]):\n                if len(w) == n:\n                    words.append(w)\n                else:\n                    for i in range(len(w)):\n                        if w[i] == \" \":\n                            continue\n                        if not is_consonant(w[i]):\n                            break\n                    else:\n                        words.append(w)\n        return words\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    list_str = list(s)\n    words = []\n    while len(list_str)!= 0:\n        word = list_str.pop(0)\n        if word == \" \":\n            continue\n        word = word.lower()\n        if len(word) == 0:\n            continue\n        if word[0] == \" \":\n            continue\n        if word[0].isupper():\n            continue\n        if word[0] in \"aeiou\":\n            continue\n        if word[0] == \"x\":\n            continue\n        if word[1:].isupper():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue\n        if word[1:].islower():\n            continue"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(word)-1, -1, -1):\n        if word[i] in \"AEIOU\":\n            return word[i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not isinstance(word, str):\n        raise TypeError(\"Word must be of str type\")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # YOUR CODE HERE\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # vowels = ['a', 'e', 'i', 'o', 'u']\n    # for i in range(len(word) - 1, 0, -1):\n    #     if word[i] in vowels:\n    #         return word[i]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(1, len(word) - 1):\n        if word[i] in \"aeiou\" and word[i - 1] in \"aeiou\" and word[i + 1] in \"aeiou\":\n            return word[i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    first_index = len(word) - 1\n    for i in range(len(word) - 1):\n        if word[i].isalpha():\n            if word[i] in \"aeiouAEIOU\":\n                if word[first_index] not in \"aeiouAEIOU\":\n                    return word[first_index]\n                first_index -= 1\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    vowels = 'aeiou'\n    for i in range(1, len(word)):\n        if word[i] not in vowels:\n            break\n    else:\n        return word[i]\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] not in vowels:\n            break\n    else:\n        return ''\n    return word[:i] + word[i + 1:]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # we can use the shorter method from the leetcode page\n    # v = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    # for i in word[::-1]:\n    #     if i in v:\n    #         return i\n    # return \"\"\n    # just an easier way\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    closest_vowel = 'a'\n    for i, ch in enumerate(word):\n        if ch.lower() in 'aeiou' and (closest_vowel == 'a' or\n        closest_vowel == 'e' or closest_vowel == 'i' or closest_vowel == 'o' or closest_vowel == 'u'):\n            closest_vowel = ch.lower()\n            if closest_vowel == 'e':\n                break\n    \n    return closest_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    i = len(word)-1\n    while i > 0:\n        if word[i] == 'a' or word[i] == 'e' or word[i] == 'i' or word[i] == 'o' or word[i] == 'u':\n            return word[i]\n        i -= 1\n    return ''\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    def check(s):\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append('(')\n            elif s[i] == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n        return True\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Write your code here\n    stack = []\n    for item in lst:\n        if item == '(':\n            stack.append(item)\n        elif item == ')':\n            if not stack or stack[-1]!= '(':\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if not stack else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def lst_to_tuple(lst):\n        return tuple(lst)\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #if lst == [] or lst == [[]] return True\n    if lst == [] or lst == [[]] : return True\n    if lst[0] == [] or lst[0] == [[]] : return False\n    if lst[1] == [] or lst[1] == [[]] : return False\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # first get all parentheses from the string\n    pars = get_pars(lst)\n    # make list of number of parantheses for each parenthesis\n    # this is an example: for '(()(', its equal to [1, 2, 1]\n    num_pars = list(map(lambda x: par_count(x), pars))\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    lst = list(lst)\n    while '(' in lst:\n        i = lst.index('(')\n        j = lst.index(')')\n        lst[i] = '('\n        lst[j] = ')'\n    return 'Yes' if lst == lst[::-1] else 'No'"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # your code here\n    p = 0\n    for c in lst:\n        if c == '(':\n            p += 1\n        else:\n            p -= 1\n        if p < 0:\n            return 'No'\n    if p == 0:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Fill this in.\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    opening = set('(')\n    closing = set(')')\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    stack = []\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # if not arr: return None\n    # import heapq\n    # heap = []\n    # for i in range(k):\n    #     heapq.heappush(heap, arr[i])\n    # for i in range(k, len(arr)):\n    #     if arr[i] > heap[0]:\n    #         heapq.heapreplace(heap, arr[i])\n    # return heap\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    heap = MinHeap()\n    for i in range(k):\n        heap.insert(arr[i])\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    arr.sort(reverse=True)\n    return arr[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(arr, reverse=True)[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    output = []\n    max_idx = len(arr)-1\n    for i in range(k):\n        if arr[max_idx] == max(arr):\n            output.append(arr[max_idx])\n            arr.pop(max_idx)\n        else:\n            max_idx -= 1\n    return output\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert 1 <= k <= len(arr)\n    \n    ans = [-math.inf] * k\n    for ele in arr:\n        for i in range(k):\n            if ele > ans[i]:\n                ans[i] = ele\n                break\n    return ans\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if k == 0:\n        return []\n    k_th_max = max(arr[0:k])\n    k_max_indexes = []\n    for i in range(len(arr)):\n        if arr[i] == k_th_max:\n            k_max_indexes.append(i)\n    return sorted(k_max_indexes)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(k):\n        max_element = max(arr)\n        result.append(max_element)\n        arr.remove(max_element)\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not arr or k > len(arr):\n        return []\n    if k == 0:\n        return []\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    res = []\n    if k == 0:\n        return []\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum([lst[i] for i in range(0, len(lst), 2)])\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    for i in range(len(lst)):\n        if i % 2 == 0:\n            continue\n        if i == 0:\n            s = lst[i]\n        else:\n            s = s + lst[i]\n    return s\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum(map(lambda x: x if x % 2 == 0 else 0, lst))\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not lst:\n        return None\n    return sum(lst[::2])"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    s = sum(lst)\n    odd = sum([lst[i] for i in range(len(lst)) if i % 2 == 1])\n    return odd + s\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # your code here\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum(list(filter(lambda x: x % 2!= 0, lst)))\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    return sum([val for i, val in enumerate(lst) if i % 2!= 0])\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum(lst[::2])\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    arr.sort()\n    sum = 0\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Edge case\n    if not arr or k > len(arr):\n        return 0\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    total = 0\n    for i in range(k):\n        i = i + 1\n        total += arr[i]\n    \n    left = k\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        total += arr[mid]\n        if mid + 1 < len(arr) and arr[mid] > arr[mid+1]:\n            right = mid - 1\n        elif mid - 1 >= 0 and arr[mid] < arr[mid-1]:\n            left = mid + 1\n        else:\n            right = mid - 1\n            left = mid + 1\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert 1 <= len(arr) <= 100, \"Input array must be a list of 1 to 100 elements\"\n    assert 1 <= k <= len(arr), \"Input k must be between 1 and the length of the array\"\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Time: O(n)\n    # Space: O(n)\n    # DP approach\n    if not arr or len(arr) < k or k <= 0:\n        return 0\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert (1 <= len(arr) <= 100)\n    assert (1 <= k <= len(arr))\n    assert (isinstance(k, int))\n    assert (isinstance(arr, list) and len(arr) > 0 and isinstance(arr[0], int))\n    assert (isinstance(k, int))\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(arr) == 1:\n        return arr[0]\n    \n    ans = 0\n    i = 0\n    j = 0\n    while i < k:\n        ans += 10 * arr[j] + arr[j + 1]\n        i += 1\n        j += 2\n    \n    ans += 10 * arr[j] + arr[j + 1]\n    i += 1\n    j += 2\n    while i < len(arr) and j < len(arr):\n        ans += 10 * arr[j] + arr[j + 1]\n        i += 1\n        j += 2\n    while i < len(arr):\n        ans += 10 * arr[j] + arr[j + 1]\n        i += 1\n        j += 2\n    return ans\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    N = len(arr)\n    if N == k: return sum(arr)\n    S = 0\n    i = 0\n    while i < N and S < k:\n        # add to S\n        S += arr[i]\n        i += 1\n    if S < k: return S\n    S = 0\n    i = N - 1\n    while i >= 0 and S < k:\n        # add to S\n        S += arr[i]\n        i -= 1\n    return S\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    k = min(k, len(arr))\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(arr) < k:\n        return 0\n    \n    arr.sort(reverse=True)\n    \n    s = sum(arr[0:k])\n    s += sum(arr[k:2*k])\n    s += sum(arr[2*k:3*k])\n    s += sum(arr[3*k:])\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    odd_collatz_seq = []\n    curr_num = 1\n    while curr_num < n:\n        if curr_num % 2 == 1:\n            odd_collatz_seq.append(curr_num)\n        curr_num = curr_num / 2 if curr_num % 2 == 0 else curr_num * 3 + 1\n    return sorted(odd_collatz_seq)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    odd_list = []\n    while n > 1:\n        if n % 2:\n            odd_list.append(n)\n            n = 3 * n + 1\n        else:\n            n //= 2\n    odd_list.append(1)\n    return odd_list\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    odd_numbers = []\n    while n > 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n            n = (n * 3) + 1\n        else:\n            n = n // 2\n    return sorted(odd_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    odd_nums = []\n    while n!= 1:\n        if n % 2 == 1:\n            odd_nums.append(n)\n        n = n // 2 if n % 2 == 0 else (n * 3 + 1)\n    return odd_nums\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    odd_collatz = []\n    while n > 1:\n        if n % 2 == 0:\n            n = int(n / 2)\n        else:\n            n = 3*n + 1\n        odd_collatz.append(n)\n    odd_collatz = sorted(odd_collatz)\n    return odd_collatz\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    odds = []\n    while n > 1:\n        if n % 2 == 1:\n            odds.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    return odds\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    odd_collatz_sequence = []\n    current_number = 1\n    while current_number!= 1:\n        if current_number % 2 == 1:\n            odd_collatz_sequence.append(current_number)\n        current_number = get_next_collatz_number(current_number)\n    return sorted(odd_collatz_sequence)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    odd_collatz = []\n    while n > 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        n = (n - 1) // 2\n    odd_collatz.append(1)\n    return sorted(odd_collatz)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sequence = []\n    while n > 1:\n        sequence.append(n)\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    out = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = 3*n + 1\n        out.append(n)\n    return sorted(out)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if date==\"\":\n        return False\n    else:\n        month=int(date[0:2])\n        day=int(date[3:5])\n        year=int(date[6:10])\n        if year>=0 and year<=9999:\n            if month<1 or month>12:\n                return False\n            if month in (1,3,5,7,8,10,12):\n                if day<=31:\n                    return True\n                else:\n                    return False\n            if month in (4,6,9,11):\n                if day<=30:\n                    return True\n                else:\n                    return False\n            if month==2:\n                if (year%4==0 and year%100!=0) or (year%4==0 and year%100==0 and year%400==0):\n                    if day<=29:\n                        return True\n                    else:\n                        return False\n                else:\n                    if day<=28:\n                        return True\n                    else:\n                        return False\n        else:\n            return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    month = date[:2]\n    day = date[3:5]\n    year = date[6:]\n    \n    if len(month)!= 2:\n        return False\n    if len(day)!= 2:\n        return False\n    if len(year)!= 4:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if date == None or date == '':\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if date == '':\n        return False\n    if len(date)!= 10:\n        return False\n    if int(date[3:5]) not in range(1,13):\n        return False\n    if int(date[6:]) not in range(1,32):\n        return False\n    if int(date[:2]) not in range(1,13):\n        return False\n    if int(date[3:]) not in range(1,31):\n        return False\n    if int(date[:2]) == 4 or int(date[:2]) == 6 or int(date[:2]) == 9 or int(date[:2]) == 11:\n        if int(date[:2]) == 4:\n            if int(date[5:7]) < 1 or int(date[5:7]) > 31:\n                return False\n        elif int(date[:2]) == 6:\n            if int(date[5:7]) < 1 or int(date[5:7]) > 30:\n                return False\n        elif int(date[:2]) == 9 or int(date[:2]) == 11:\n            if int(date[5:7]) < 1 or int(date[5:7]) > 28:\n                return False\n        return True\n    if int(date[:2]) == 2:\n        if int(date[5:7]) < 1 or int(date[5:7]) > 29:\n            return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not date:\n        return False\n    month_num = {'jan':1,'feb':2,'mar':3,'apr':4,'may':5,'jun':6,'jul':7,'aug':8,'sep':9,'oct':10,'nov':11,'dec':12}\n    date_list = date.split('-')\n    date_list.reverse()\n    if len(date_list)!= 3:\n        return False\n    if date_list[2][-4:] == '20':\n        if len(date_list[0]) == 1:\n            date_list[0] = str(int(date_list[0])+2000)\n            return True\n        else:\n            return False\n    date_list[2] = date_list[2][:4]\n    if int(date_list[2]) < 2010 or int(date_list[2]) > 2020:\n        return False\n    if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n        return False\n    if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n        return False\n    if date_list[0] in month_num and date_list[1] in month_num:\n        return True\n    return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 10: 31, 11: 30, 12: 31}\n    day = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 10: 31, 11: 30, 12: 31}\n    if date == \"\":\n        return False\n    else:\n        try:\n            month, day, year = date.split('-')\n            if int(month) >= 1 and int(month) <= 12:\n                if int(day) >= 1 and int(day) <= 31:\n                    if int(year) >= 0 and int(year) <= 2020:\n                        if int(month) not in day.keys():\n                            return True\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        except:\n            return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if(date == \"\"):\n        return False\n    if(date[0:2] == \"0\"):\n        return False\n    date_list = date.split('-')\n    if(date_list[0] == \"\"):\n        return False\n    if(date_list[1] == \"\"):\n        return False\n    if(date_list[2] == \"\"):\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return isinstance(date,str) and date!= \"\" and (int(date[5:]) >= 1 and int(date[5:]) <= 31 and int(date[:2]) <= 12 and int(date[3:5]) >= 1 and int(date[3:5]) <= 12 and (int(date[:2]) >= 1 and int(date[:2]) <= 12 and date[2:5] >= 1 and date[2:5] <= 31))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # try to find a valid date\n    try:\n        # get the first element of the list\n        month, day, year = date.split('-')\n        # create a dictionary to define the valid dates\n        # create an empty dictionary\n        # store the list of days and months\n        # use a dictionary\n        # find if the months are valid\n        # check if the days are valid\n        # if month is not in the list return false\n        # if day is not in the list return false\n        # if year is not in the list return false\n        # if day is not in the list return false\n        month_dict = {1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June', 7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'}\n        days_dict = {31: 'Friday', 30: 'Saturday', 29: 'Sunday', 28: 'Thursday'}\n        days_range = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n        # if day is not in the list return false\n        if day not in days_dict.keys():\n            return False\n        # if month is not in the list return false\n        if month not in month_dict.keys():\n            return False\n        # if day is not in the list return false\n        if year not in days_range.keys():\n            return False\n        # if the months are valid\n        if month_dict[int(month)] not in days_dict.keys():\n            return False\n        # if the day is valid\n        if day in days_dict[month_dict[int(month)]]:\n            return True\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if date == '':\n        return False\n    day, month, year = map(int, date.split('-'))\n    if day > 31 or day < 1:\n        return False\n    if month > 12 or month < 1:\n        return False\n    if month == 2:\n        if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n            if day > 29:\n                return False\n        else:\n            if day > 28:\n                return False\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        if day > 30:\n            return False\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        if day > 31:\n            return False\n    return True\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    words = txt.lower().split()\n    res = []\n    for i in words:\n        res.append(i)\n    return res\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return re.split(r\"[,]\", txt)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    words = txt.split()\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    words = txt.split(' ')\n    words = [i.lower() for i in words]\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    words = txt.split(' ')\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    list_of_words = txt.split()\n    return list_of_words\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    words = txt.split(\" \")\n    split_word = []\n    for i in words:\n        if i == '':\n            words.remove(i)\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    splitted = re.split(r'\\s|,',txt.lower())\n    return splitted\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code here\n    return sorted(lst) == lst\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst)-1):\n        if sorted_lst[i] == sorted_lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst_length = len(lst)\n    if lst_length < 2:\n        return True\n    \n    last = lst[0]\n    for i in range(1, lst_length):\n        if lst[i] < last:\n            return False\n        last = lst[i]\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(lst) == 0 or len(lst) == 1:\n        return True\n    if lst[0] >= lst[1]:\n        return is_sorted(lst[1:])\n    return False\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(lst) == 1:\n        return True\n    for i in range(len(lst)):\n        if i!= len(lst) - 1:\n            if lst[i] > lst[i + 1]:\n                return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    numbers = []\n    if lst is not None:\n        for i in range(len(lst)):\n            if lst[i] in numbers:\n                return False\n            else:\n                numbers.append(lst[i])\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return lst == sorted(lst)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    try:\n        return sorted(lst) == lst\n    except:\n        return False\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(lst) == lst\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not interval1[0] <= interval2[0] <= interval1[1] or not interval2[0] <= interval1[0] <= interval2[1]:\n        return \"NO\"\n    if (interval1[1] - interval1[0]) == (interval2[1] - interval2[0]):\n        return \"YES\"\n    if (interval1[1] - interval1[0]) % 2 == 0:\n        return \"YES\"\n    if (interval1[1] - interval1[0]) > 2:\n        return \"YES\"\n    if (interval2[1] - interval2[0]) % 2 == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if interval1[0] < interval2[0] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    elif interval1[0] >= interval2[0] and interval2[1] >= interval1[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert interval1[0] < interval1[1] and interval2[0] < interval2[1], \"Your intervals should be closed\"\n    assert interval1[0] <= interval2[1], \"Your intervals should be closed\"\n    assert interval2[0] <= interval1[1], \"Your intervals should be closed\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #return \"YES\" if len(set(range(interval1[0],interval1[1]+1)).intersection(set(range(interval2[0],interval2[1]+1)))) == 1 else \"NO\"\n    \n    #an intersetion will only contain numbers that are in range of both intervals\n    if interval1[0] > interval1[1]:\n        interval1 = (interval1[1], interval1[0])\n    if interval2[0] > interval2[1]:\n        interval2 = (interval2[1], interval2[0])\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def isPrime(n):\n        \"\"\"Check if n is prime number\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**(0.5))+1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # The union of interval1 and interval2 \n    # will be called a 'newInterval'\n    newInterval = (min(interval1[0], interval2[0]), max(interval1[1], interval2[1]))\n    # print(\"newInterval: \", newInterval)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not interval1 or not interval2:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    start1, end1 = interval1\n    start2, end2 = interval2\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum([abs(n) * (sign*n) for n, sign in enumerate(arr)])\n    \n    \nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. GO YOU!\\n\""
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = None\n    if arr:\n        result = sum(arr) * prod_sign(n)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    arr = arr if isinstance(arr,list) else []\n    if not arr: return None\n    result = 0\n    for item in arr:\n        if item > 0: result += item\n    return result * (arr and (abs(arr[0])) or 0)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return None\n    arr = sorted(arr, reverse=True)\n    magnitude = 1\n    sign = 1\n    res = 0\n    for i in arr:\n        res += magnitude * sign * i\n        sign *= i\n        magnitude *= abs(i)\n    return res\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return None\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            if i == 0:\n                arr[i] *= -1\n            else:\n                arr[i] *= -1\n    if len(arr) == 1:\n        return arr[0]\n    return arr[0] * prod_signs(arr[1:])\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    signs = [-1, 1, 1]\n    return sum(arr) if arr else None\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not arr:\n        return None\n    total = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            total -= arr[i]\n        elif arr[i] > 0:\n            total += arr[i]\n    return total * (abs(arr[0]) + abs(arr[1]) + abs(arr[2]))"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # check for empty array\n    if len(arr) == 0:\n        return None\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not arr:\n        return None\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # if arr is empty\n    if len(arr) == 0:\n        return None\n    # if arr is empty\n    if len(arr) == 1:\n        return 0\n    # if arr is not empty\n    result = 0\n    # iterate through arr\n    for num in arr:\n        # if num is negative, multiply by -1\n        if num < 0:\n            result += -1 * num\n        # if num is positive, multiply by 1\n        elif num > 0:\n            result += 1 * num\n    # return the sum of magnitudes multiplied by product of signs\n    return result\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    cols_ind = cols - 1\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    grid = np.array(grid)\n    r, c = grid.shape\n    dp = np.zeros((r, c))\n    dp[0, 0] = grid[0, 0]\n    for i in range(1, r):\n        dp[i, 0] = dp[i - 1, 0] + grid[i, 0]\n    for i in range(1, c):\n        dp[0, i] = dp[0, i - 1] + grid[0, i]\n    for i in range(1, r):\n        for j in range(1, c):\n            dp[i, j] = min(dp[i - 1, j], dp[i, j - 1]) + grid[i, j]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    m, n = len(grid), len(grid[0])\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 0:\n                grid[i][j] = float('inf')\n    for i in range(m):\n        grid[i][0] = 0\n        grid[i][n - 1] = 0\n    for j in range(n):\n        grid[0][j] = 0\n        grid[m - 1][j] = 0\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # TODO: Create an empty grid\n    #\n    # Hint: Look up DFS and BFS for the solution.\n    #\n    # Check out the '3_solution.py' file for the 3_solution.py code.\n    \n    \n    ###\n    ###\n    ###\n    ###\n    ###\n    ###\n    ###\n    ###\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    M, N = len(grid), len(grid[0])\n    if k == 0 or not grid or not grid[0]:\n        return grid\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # # DFS on path\n    # def dfs(grid, row, col, visited, path, k):\n    #     if len(path) == k:\n    #         return True\n    #     if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]):\n    #         return False\n    #     if grid[row][col] == 1 and (row, col) not in visited:\n    #         visited.add((row, col))\n    #         for direction in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n    #             if dfs(grid, row + direction[0], col + direction[1], visited, path + (grid[row][col],), k):\n    #                 return True\n    #         visited.remove((row, col))\n    #         return False\n    #     return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Solution\n    # Time: O(n * m)\n    # Space: O(n * m)\n    # N = len(grid)\n    # M = len(grid[0])\n    # visited = set()\n    # output = []\n    # \n    # def min_path(i, j):\n    #     if i >= N or j >= M:\n    #         return False\n    #     if (i, j) in visited:\n    #         return False\n    #     if i == N - 1 and j == M - 1:\n    #         return True\n    #     if i == N - 1:\n    #         return min_path(i, j + 1)\n    #     if j == M - 1:\n    #         return min_path(i + 1, j)\n    #     if not min_path(i + 1, j):\n    #         return False\n    #     if not min_path(i, j + 1):\n    #         return False\n    #     visited.add((i, j))\n    #     return True\n    \n    # for i in range(N):\n    #     for j in range(M):\n    #         if min_path(i, j):\n    #             output.append(grid[i][j])\n    # return output\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    m = len(grid)\n    n = len(grid[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def neighbors(cell):\n        for x, y in DIRECTIONS:\n            if 0 <= cell[0] + x < R and 0 <= cell[1] + y < C:\n                yield (cell[0] + x, cell[1] + y)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def find_min_path(grid, k, curr_index):\n        if k == 0:\n            return curr_index\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Calculates the initial numbers of the Tribonacci sequence.\n    \n    numbers = [0, 1, 1]\n    \n    # Initializes a list of the Fibonacci sequence.\n    result = []\n    \n    # Runs the Tribonacci sequence.\n    while len(result) < n + 1:\n        result.append(numbers[len(numbers) - 1] + numbers[len(numbers) - 2] + numbers[len(numbers) - 3])\n        # Calculates the next numbers of the Tribonacci sequence.\n        \n        # The first numbers of the Tribonacci sequence.\n        numbers.append(result[len(result) - 1])\n        # The second numbers of the Tribonacci sequence.\n        numbers.append(result[len(result) - 2])\n        # The third numbers of the Tribonacci sequence.\n        \n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    fib = [1, 2]\n    for i in range(3, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    a = 1\n    b = 2\n    c = 3\n    \n    l = [a,b,c]\n    \n    for i in range(n-2):\n        a,b,c = b,c,a + b + c\n        l.append(a)\n        \n    return l\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a = 1\n    b = 0\n    c = 1\n    li = []\n    i = 0\n    while i <= n:\n        if i == 0:\n            li.append(a)\n        elif i == 1:\n            li.append(b)\n        elif i == 2:\n            li.append(c)\n        else:\n            li.append(li[i-1] + li[i-2] + li[i-3])\n        i = i + 1\n    return li\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    if n < 1:\n        return result\n    result.append(1)\n    for i in range(1, n + 1):\n        result.append(tri(i - 1) + tri(i - 2) + tri(i + 1))\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [3, 1]\n    if n == 3:\n        return [1, 3, 2]\n    \n    return tri(n-1) + tri(n-2) + tri(n-3)"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    res = [0,1,1]\n    for i in range(3,n+2):\n        res.append(res[i-2] + res[i-1])\n    return res[:n+1]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    else:\n        return [1, 1] + [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(map(lambda x: x + 1, range(1, n + 1)))"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    a = 1\n    b = 3\n    list = [a,b]\n    for i in range(n - 1):\n        c = a + (b / 2)\n        a = b\n        b = c\n        list.append(c)\n    return list\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return product([int(i) for i in str(n) if i % 2])\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return n // 10 * (n % 10)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    if n % 10 % 2!= 0:\n        return 0\n    return 1 + digits(n//10)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum(int(d) for d in str(n) if int(d)%2)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    if n % 10 == 0:\n        return digits(n // 10)\n    else:\n        return n % 10 * digits(n // 10)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum(map(int, list(str(n))), 1)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return n % 10\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    total = 1\n    while n > 0:\n        total *= n % 10\n        n //= 10\n    return total\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    total = 0\n    while n:\n        total += n % 10\n        n //= 10\n    return total\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    digits_sum = 0\n    while n!= 0:\n        n, i = divmod(n, 10)\n        if i % 2!= 0:\n            digits_sum += i\n    return digits_sum\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    brackets = []\n    for char in string:\n        if char == '[':\n            brackets.append(char)\n        elif char == ']':\n            if not brackets:\n                return False\n            else:\n                brackets.pop()\n    return not brackets\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #s = string\n    s = list(string)\n    \n    #print(s)\n    \n    brackets = []\n    \n    for i in range(len(s)):\n        if s[i] == '[':\n            brackets.append(i)\n        elif s[i] == ']':\n            #print(brackets)\n            if len(brackets) > 0:\n                brackets.pop()\n            else:\n                return False\n    \n    #print(brackets)\n    if len(brackets) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in string:\n        if i == '[':\n            count += 1\n        if i == ']':\n            count -= 1\n        if count < 0:\n            return False\n    if count!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    brackets = list(string)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    nested = False\n    string = string.replace(' ', '')\n    for i in range(0, len(string)):\n        if (string[i] == '[') and (string[i] == ']') and (string[i+1] == '['):\n            nested = True\n    return nested\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # st = input()\n    # print(st)\n    # return(st.count('[]') == st.count('[]]['))\n    st = string\n    if st.count(']') == st.count('['):\n        return False\n    st = st.replace(\"[\",\"(\",1)\n    st = st.replace(\"]\",\")\",1)\n    st = st.replace(\"{\",\"(\",1)\n    st = st.replace(\"}\",\")\",1)\n    if st == \"\":\n        return True\n    else:\n        return False\n    \n        \n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    c = 0\n    for i in range(len(string)):\n        if string[i] == \"[\":\n            c += 1\n        elif string[i] == \"]\":\n            c -= 1\n        if c < 0:\n            return False\n    return c!= 0\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    opening_bracket = '('\n    closing_bracket = ')'\n    if len(string) == 0:\n        return False\n    if string[0] == opening_bracket:\n        if len(string) == 1:\n            return True\n        for i in range(1,len(string)):\n            if string[i] == closing_bracket:\n                return True\n            else:\n                if string[i] == ']':\n                    return False\n                if string[i] == opening_bracket:\n                    string = string[i+1:]\n                    if is_nested(string):\n                        return True\n                    else:\n                        return False\n    else:\n        if len(string) == 1:\n            return False\n        if string[0] == ']':\n            return False\n        for i in range(1,len(string)):\n            if string[i] == '[' and string[i+1] == ']':\n                return True\n            if string[i] == ']':\n                return False\n            if string[i] == '[' and string[i+1] == ']':\n                return True\n            if string[i] == '[' and string[i+1] == '[' and string[i+2] == ']':\n                return True\n            if string[i] == '[' and string[i+1] == '[' and string[i+2] == '[' and string[i+3] == ']':\n                return True\n    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return True if string.find('[]') > -1 else False\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum([x*x for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    lst_copy = lst\n    lst_copy.sort()\n    for i in range(len(lst)):\n        lst[i] = round(lst_copy[i]**2, 1)\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    lst_sq = []\n    for i in range(len(lst)):\n        lst_sq.append(lst[i] * lst[i])\n    return sum(lst_sq)\n    \n    \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if type(lst) == int:\n        lst = [lst]\n    nums = []\n    for i in lst:\n        if type(i) == int:\n            nums.append(i**2)\n        else:\n            nums.append(i**2)\n    return sum(nums)\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code here\n    lst = [float(x)**2 for x in lst]\n    return sum(lst)\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sum_squares = 0\n    for i in lst:\n        sum_squares += i * i\n    return sum_squares\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        new = sorted(lst, key=lambda x: x, reverse = True)\n        new = sum_squares(new)\n        return new\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    sum_squares = 0\n    for i in lst:\n        i = int(ceil(i))\n        sum_squares += i**2\n    return sum_squares\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum([x*x for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(lst)==0:\n        return 0\n    else:\n        sum=0\n        for i in lst:\n            sum=sum+i**2\n        return sum\n    "
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #pass\n    if txt == \"\":\n        return False\n    else:\n        if txt[-1].isalpha():\n            if txt.split() == []:\n                return True\n            else:\n                return False\n        else:\n            return False\n    "
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if txt == '':\n        return False\n    return bool(re.match(r\"^[a-zA-Z]+$\", txt[-1]))\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return txt and txt[-1].isalpha() and not txt[-1].isalpha() or txt == ''\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if not txt:\n        return False\n    elif len(txt) == 1:\n        return txt.isalpha() and not txt.isalpha() in ['a','e','i','o','u','A','E','I','O','U']:\n        return False\n    else:\n        return check_if_last_char_is_a_letter(txt[:-1])\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return(txt[-1].isalpha() and not txt[-1].isalpha() and not txt[-1].isnumeric() and not txt[-1].isspace())\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return txt[-1].isalpha() and txt[-1].isalpha() and not is_word(txt[:-1])\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # +++ SUCCESSFUL SOLUTION +++\n    return (txt[-1].isalpha() and txt[-1] not in [\" \", \".\", \",\", \"'\", \"!\", \"?\"])\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (txt[-1].isalpha() and txt[-1].islower()) or (txt[-1].isdigit() and int(txt[-1]) < 26)\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(txt) > 0:\n        return txt[-1].isalpha()\n    else:\n        return False\n    \ncheck_if_last_char_is_a_letter(\"apple pie\") #\u279e False\ncheck_if_last_char_is_a_letter(\"apple pi e\") #\u279e True\ncheck_if_last_char_is_a_letter(\"apple pi e \") #\u279e False\ncheck_if_last_char_is_a_letter(\"\") #\u279e False\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    def can_arrange_rec(arr, i):\n        if i == len(arr):\n            return -1\n        if arr[i] >= arr[i+1]:\n            return i\n        return can_arrange_rec(arr, i+1)\n    return can_arrange_rec(arr, 0)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # n = len(arr)\n    # left_idx = 0\n    # for i in range(1, n):\n    #     if arr[i - 1] <= arr[i]:\n    #         left_idx = i\n    #         break\n    # right_idx = n - 1\n    # for i in range(n - 2, -1, -1):\n    #     if arr[i] < arr[i + 1]:\n    #         right_idx = i\n    #         break\n    # return right_idx if right_idx > left_idx else -1\n    n = len(arr)\n    if n == 0:\n        return -1\n    if n == 1:\n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # arr[0] = 1\n    # arr[1] = 2\n    # arr[2] = 4\n    # arr[3] = 3\n    # arr[4] = 5\n    # arr[5] = 5\n    # arr[6] = 5\n    # arr[7] = 5\n    # arr[8] = 5\n    # arr[9] = 5\n    # arr[10] = 5\n    # arr[11] = 5\n    # arr[12] = 5\n    # arr[13] = 5\n    # arr[14] = 5\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if len(arr) < 3:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # Creating an empty list to contain the elements which can not be arranged\n    # since it will come later in the algorithm\n    can = []\n    for i in range(len(arr)):\n        if arr[i] >= arr[i+1]:\n            can.append(i)\n        else:\n            continue\n    return(len(can)-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            return i - 1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    max_index = -1\n    prev_val = -1\n    for i, val in enumerate(arr):\n        if val >= prev_val:\n            prev_val = val\n            max_index = i\n    return max_index\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # first thing to do is to find a maximum in the list\n    max_val = -1\n    for i in range(len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    last = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] >= last:\n            return i\n        else:\n            last = arr[i]\n    return -1\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(lst) < 1:\n        return (None, None)\n    elif len(lst) == 1:\n        if lst[0] > 0:\n            return (None, lst[0])\n        else:\n            return (lst[0], None)\n    else:\n        negative_count = 0\n        positive_count = 0\n        for num in lst:\n            if num < 0:\n                negative_count += 1\n            elif num > 0:\n                positive_count += 1\n        if negative_count > positive_count:\n            return (None, lst[0])\n        elif negative_count == positive_count:\n            return (lst[0], lst[0])\n        else:\n            return (lst[0], lst[-1])\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    if any(x < 0 for x in lst):\n        return (None, None)\n    return (min(lst), max(lst))"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n = list(filter(lambda x: x > 0, lst))\n    m = list(filter(lambda x: x < 0, lst))\n    if n:\n        return max(n), min(n)\n    elif m:\n        return max(m), min(m)\n    return None, None\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    neg_lst = [i for i in lst if i < 0]\n    pos_lst = [i for i in lst if i > 0]\n    if len(neg_lst) > 0:\n        return (neg_lst[-1], neg_lst[0])\n    if len(pos_lst) > 0:\n        return (pos_lst[0], pos_lst[-1])\n    return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    neg = None\n    pos = None\n    for i in lst:\n        if i < 0:\n            if neg == None:\n                neg = i\n            else:\n                neg = max(neg, i)\n        else:\n            if pos == None:\n                pos = i\n            else:\n                pos = min(pos, i)\n    return (neg, pos)"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    a = None\n    b = None\n    for i in range(len(lst)):\n        if a == None:\n            a = lst[i]\n        if lst[i] < a and lst[i] >= 0:\n            a = lst[i]\n        if lst[i] > b and lst[i] <= 0:\n            b = lst[i]\n    return (a, b)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    a = None\n    b = None\n    if len(lst) == 0:\n        return (None, None)\n    for num in lst:\n        if num >= 0:\n            if a is None or a < num:\n                a = num\n        else:\n            if b is None or b > num:\n                b = num\n    return (a, b)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    a = None\n    b = None\n    for i in range(len(lst)):\n        if a == None or lst[i] < 0:\n            a = lst[i]\n        elif a > lst[i] and lst[i] >= 0:\n            b = lst[i]\n    return (a, b)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # return min(lst, key = abs)\n    # return max(lst, key = lambda x: x > 0) - min(lst, key = lambda x: x < 0)\n    if len(lst) == 0:\n        return (None, None)\n    else:\n        # min_int = None\n        # max_int = None\n        # for i in lst:\n        #     if i < 0:\n        #         if min_int is None:\n        #             min_int = i\n        #         else:\n        #             if min_int < i:\n        #                 min_int = i\n        #     else:\n        #         if max_int is None:\n        #             max_int = i\n        #         else:\n        #             if max_int > i:\n        #                 max_int = i\n        # return (min_int, max_int)\n        return (min(lst, key=lambda x: x < 0) or None, max(lst, key=lambda x: x > 0) or None)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # I did not realize that a lot of the same code was in the functions above\n    # I used some of the code in the functions above\n    # I used some code from the functions above\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return a if a > b else b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # if a is None or b is None:\n    #     return None\n    # if a == b:\n    #     return None\n    # elif a > b:\n    #     return a\n    # else:\n    #     return b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if a > b:\n        return a\n    if a == b:\n        return None\n    else:\n        return b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if type(a) == str and type(b) == str:\n        try:\n            return float(a) > float(b)\n        except ValueError:\n            return a\n    if type(a) == str and type(b) == int:\n        return a\n    if type(a) == str and type(b) == float:\n        return float(a)\n    if type(a) == int and type(b) == float:\n        return b\n    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if type(a) == type(b):\n        return a\n    if type(a) == str:\n        a = float(a)\n    if type(b) == str:\n        b = float(b)\n    if type(a) == int:\n        if type(b) == int:\n            if a > b:\n                return a\n            else:\n                return b\n        else:\n            return a\n    else:\n        if type(b) == int:\n            if type(a) == int:\n                if a > b:\n                    return a\n                else:\n                    return b\n            else:\n                return b\n        else:\n            return a\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a > b:\n        return a\n    if b > a:\n        return b\n    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return None if a == b else max(a,b)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # print(a, b)\n    if type(a) == int:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif type(a) == float:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    else:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #a = 1\n    #b = 2.5\n    #str_a = \"1\"\n    #str_b = \"2,3\"\n    #int_a = 1\n    #int_b = 6\n    #\n    #if a > b:\n    #    return a\n    #else:\n    #    return b\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return n % 2 == 0 and (n // 2) % 2 == 0 and (n // 2) * 2 == n\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n <= 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n    if n == 4:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(0, n-1, 2):\n        if (n-i) % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n = abs(n)\n    if n % 2 == 0:\n        n = n // 2\n        if is_positive_even(n):\n            return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return n % 2 == 0 and (n % 4 == 0 or n % 7 == 0)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return is_sum_even(n) and is_even(n)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return not n % 2 and is_divisible_by_5_and_2(n)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if is_prime(n):\n        return False\n    else:\n        for i in range(1, n, 2):\n            if n - i <= 0:\n                return True\n            elif is_prime(n - i):\n                return False\n            else:\n                return is_equal_to_sum_even(n - i)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = int(n)\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n - 2 * i ** 2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return is_sum_of_evens(n) and n % 2 == 0\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    f = 1\n    for i in range(1,n+1):\n        f = f * i\n    return f\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n > 0:\n        return factorial(n) * factorial(n - 1) * factorial(n - 2) * factorial(n - 3)\n    else:\n        return 1\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n_i = 1\n    n_i_i = 1\n    for i in range(n):\n        n_i = n * n_i\n        n_i_i = n_i * n_i_i\n    return n_i_i\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    i = 1\n    n = n\n    total = 1\n    while i <= n:\n        total *= n\n        i += 1\n    return total\n    \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # HINT: You should use recursion.\n    return n*special_factorial(n-1) if n > 0 else 1\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Using the function factorial()\n    # 1! = 1\n    # 2! = 2 * 1! = 1 * 2! = 2\n    # 3! = 3 * 2 * 1! = 3 * 2 * 1\n    # 4! = 4 * 3 * 2 * 1! = 4 * 3 * 2 * 1 * 1\n    # 5! = 5 * 4 * 3 * 2 * 1! = 5 * 4 * 3 * 2 * 1 * 1 * 1\n    #...\n    # n! = n * (n-1) * (n-2) *... * 1! = n * (n-1) * (n-2) *... * 1\n    return factorial(n)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    return fact\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    ...\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n < 0:\n        raise ValueError('Negative factorial are not allowed.')\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return n*special_factorial(n-1)"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return text.replace(' ', '_')\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    new_text = text.replace(\" \", \"_\")\n    return new_text\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return text.replace(' ', '_').replace('  ', '-').replace('   ', '-').replace('  ', '-').replace('   ', '-')\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return text.replace(' ', '_')"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    text = re.sub(r'[ ]+', '_', text)\n    text = re.sub(r'^[ ]+', '', text)\n    text = re.sub(r'[ ]+$', '', text)\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    if text.find(' ')!= -1:\n        text = text.replace(' ', '_')\n        \n        while text.find('  ')!= -1:\n            text = text.replace('  ','_')\n        \n    return text\n    \ndef print_line(spaces, *args, **kwargs):\n    \"\"\"\n    Prints a line with given number of spaces\n    \n    print_line(3, \"This is a line\", \"Which will be printed\", \"by this function\")\n    \"\"\"\n    \n    s ='' * spaces\n    print(s + ''.join(args), **kwargs)\n    \ndef counter():\n    \"\"\"\n    This function is called by default when the program starts.\n    It returns an integer, counting up to 10.\n    \n    return 1\n    \"\"\"\n    \n    return 1\n    \ndef one_more():\n    \"\"\"\n    This function is called by default when the program starts.\n    It returns an integer, counting up to 10.\n    \n    return 1\n    \"\"\"\n    \n    return 1\n    \ndef count_down():\n    \"\"\"\n    This function is called by default when the program starts.\n    It returns an integer, counting down from 10 to 1.\n    \n    return 10\n    \"\"\"\n    \n    return 10\n    \ndef count_up():\n    \"\"\"\n    This function is called by default when the program starts.\n    It returns an integer, counting up from 10 to 1.\n    \n    return 1\n    \"\"\"\n    \n    return 1\n    \ndef add_numbers():\n    \"\"\"\n    This function is called by default when the program starts.\n    It returns an integer, adding 1, 2, 3, 4, and 5.\n    \n    return 12\n    \"\"\"\n    \n    return 12\n    \ndef seven():\n    \"\"\"\n    This function is called by default when the program starts.\n    It returns an integer, 7.\n    \n    return 7\n    \"\"\"\n    \n    return 7\n    \ndef divide_by(divisor):\n    \"\"\"\n    This function is called by default when the program starts.\n    It returns an integer, dividing 7 by the argument.\n    \n    return 2\n    \"\"\"\n    \n    return 7 // divisor\n    \ndef plus_three():\n    \"\"\"\n    This function is called by default when the program starts.\n    It returns an integer, adding 3 to 8.\n    \n    return 11\n    \"\"\"\n    \n    return 11\n    \ndef double_string(string):\n    \"\"\"\n    This function is called by default when the program starts.\n    It returns a new string, doubling each letter in the argument.\n    \n    return 'hello'\n    \"\"\"\n    \n    return string * 2\n    \ndef generate_word():\n    \"\"\"\n    This function is called by default when the program starts.\n    It returns a new string, choosing one of the words in a list.\n    \n    return 'cat'\n    \"\"\"\n    \n    return 'cat'\n    \ndef generate_words():\n    \"\"\"\n    This function is called by default when the program starts.\n    It returns a new string, choosing one of the words in a list.\n    \n    return 'cat'\n    \"\"\"\n    \n    return 'cat'\n    \ndef generate_name():\n    \"\"\"\n    This function is called by default when the program starts.\n    It returns a new string, choosing one of the names in a list.\n    \n    return'mark'\n    \"\"\"\n    \n    return'mark'\n    \ndef generate_names():\n    \"\"\"\n    This function is called by default when the program starts.\n    It returns a new string, choosing one of the names in a list.\n    \n    return'mark'\n    \"\"\"\n    \n    return'mark'\n    \ndef generate_name_year():\n    \"\"\"\n    This function is called by default when the program starts.\n    It returns a new string, choosing one of the names in a list.\n    \n    return'mark'\n    \"\"\"\n    \n    return'mark'\n    \ndef generate_names_year():\n    \"\"\"\n    This function is called by default when the program starts.\n    It returns a new string, choosing one of the names in a list.\n    \n    return'mark'\n    \"\"\"\n    \n    return'mark'\n    \ndef generate_name_year_month():\n    \"\"\"\n    This function is called by default when the program starts.\n    I"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    return re.sub(\" \", \"_\", text)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \", \"_\").strip(\"_\")\n    \n    \ndef main():\n    \"\"\"\n    Do not edit this function. It is used to write your docstring.\n    \"\"\"\n    print(fix_spaces.__doc__)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # TODO: Implement this function\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    spaces = re.sub(r' ', '-', text)\n    return spaces\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    if file_name.isnumeric():\n        return False\n    \n    if len(file_name) < 2 or len(file_name) > 3:\n        return False\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    file_name = str(file_name)\n    if len(file_name) > 4:\n        if file_name.count('.') == 1 and file_name[:2].isalpha() and file_name[-3:].lower() in ['txt', 'exe', 'dll']:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    file_name = file_name.replace(\".\", \"\")\n    if file_name.count(\".\") > 1 or len(file_name) == 0 or not file_name[0].isalpha() or not file_name[1:].isalpha():\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Check if the name contains only numbers\n    if any(char.isdigit() for char in file_name):\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def check_name(file_name):\n        \"\"\"\n        check if the name is valid\n        \"\"\"\n        if len(file_name) < 3:\n            return 'No'\n        elif '.' in file_name:\n            return 'No'\n        elif '.' not in file_name:\n            if not file_name[0].islower() and not file_name[0].isupper():\n                return 'No'\n            elif not file_name[-3:].isalpha():\n                return 'No'\n        else:\n            return 'No'\n    return check_name(file_name)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if (file_name.isdigit() == True):\n        return 'No'\n    \n    if (len(file_name) == 0):\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # The file_name is a string representing a file's name.\n    # Check if the name is valid.\n    # Return 'Yes' if the name is valid, and return 'No' otherwise.\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return 'Yes' if (len(file_name) <= 3 or '.' in file_name) and (file_name[0].isalpha() and file_name[1:].isalpha() or file_name.isalpha()) else 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    import re\n    file_name = file_name.lower()\n    if re.search('[^0-9a-z]', file_name):\n        return \"No\"\n    if len(file_name.split('.')) < 3:\n        return \"No\"\n    if file_name.split('.')[0] == '':\n        return \"No\"\n    if not re.search('[a-zA-Z]', file_name.split('.')[0]):\n        return \"No\"\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not re.match(r\"^[a-zA-Z0-9\\.]*\\.[a-zA-Z0-9\\.\\s]*$\", file_name):\n        return 'No'\n    else:\n        if len(file_name) > 3:\n            return 'No'\n        if len(file_name) == 3 and file_name[0]!= '.':\n            return 'No'\n        if re.match(r\"^[a-zA-Z0-9]\", file_name[0]) and len(file_name) > 4:\n            return 'No'\n        for i in range(len(file_name)):\n            if not re.match(r\"[a-zA-Z0-9\\.\\s]\", file_name[i]):\n                return 'No'\n        return 'Yes'\n    \ndef file_extension_check(file_extension):\n    \"\"\"Create a function which takes a string representing a file's extension, and returns\n    'Yes' if the the file's extension is valid, and returns 'No' otherwise.\n    A file's extension is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's extension.\n    - The file's extension should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_extension_check(\"txt\") # => 'Yes'\n    file_extension_check(\"1txt\") # => 'No' (the extension should start with a latin alphapet letter)\n    \"\"\"\n    if file_extension == \"txt\" or file_extension == \"exe\" or file_extension == \"dll\":\n        return 'Yes'\n    elif file_extension[0]!= '.':\n        return 'No'\n    elif len(file_extension) > 3:\n        return 'No'\n    else:\n        for i in range(len(file_extension)):\n            if not re.match(r\"[a-zA-Z0-9\\.\\s]\", file_extension[i]):\n                return 'No'\n        return 'Yes'\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sum_of_squares = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            i = i ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            i = i ** 3\n        else:\n            continue\n        sum_of_squares += i\n    return sum_of_squares\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sum = 0\n    for x in lst:\n        if x % 3 == 0:\n            sum = sum + x ** 2\n        if x % 4 == 0 and x % 3!= 0:\n            sum = sum + x ** 3\n    return sum"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if lst == []:\n        return 0\n    else:\n        s = 0\n        for i in range(len(lst)):\n            if i%3 == 0 and i%4!= 0:\n                s = s + lst[i]**2\n            elif i%3!= 0 and i%4 == 0:\n                s = s + lst[i]**3\n            elif i%3 == 0 and i%4 == 0:\n                s = s + lst[i]**4\n        return s\n        \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i%3 == 0 or i%4!= 0:\n            sum = sum + lst[i]**2\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    output = 0\n    \n    for i in range(len(lst)):\n        if i % 4 == 0 and i % 3 == 0:\n            output = output + lst[i] * lst[i]\n        elif i % 3 == 0:\n            output = output + lst[i] * lst[i] * lst[i]\n        elif i % 4 == 0:\n            output = output + lst[i] * lst[i] * lst[i] * lst[i]\n        else:\n            output = output + lst[i]\n    return output\n    \n    "
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n        else:\n            pass\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0 or i % 4 == 0:\n            i = i ** 2\n        else:\n            i = i ** 3\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    output = 0\n    for i in lst:\n        if i % 3 == 0:\n            output += i*i\n        elif i % 4 == 0:\n            output += i*i*i\n        else:\n            pass\n    return output\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if lst == []:\n        return 0\n    ans = 0\n    for i in lst:\n        if i%3 == 0:\n            ans += i**2\n        elif i%4 == 0 and i%3!= 0:\n            ans += i**3\n    return ans\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    count = 0\n    result = 0\n    for num in lst:\n        if num % 3 == 0 or num % 4!= 0:\n            continue\n        if num % 3 == 0:\n            result += num**2\n        if num % 4 == 0:\n            result += num**3\n    return result\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    return\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    words = sentence.split()\n    # create a dictionary of all lengths,\n    # the key is the length,\n    # and the value is the number of words that have length = key\n    lengths = {i: 0 for i in range(2, 100+1)}\n    # loop through all the words\n    for word in words:\n        # increment the number of words with length = key in the dictionary\n        lengths[len(word)] += 1\n    # sort the dictionary in ascending order\n    lengths = {key: value for key, value in sorted(lengths.items(), key=lambda item: item[0])}\n    # loop through all the lengths\n    for key in lengths:\n        # check if the length in the dictionary is prime\n        if lengths[key] == 1:\n            # print out the key and the value of the length\n            print(key, lengths[key])\n            # and break out of the loop\n            break\n    # return the key\n    return key\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def is_prime(num):\n        if num < 2:\n            return False\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    words = []\n    for word in sentence.split():\n        words.append(word)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    words = sentence.split()\n    return ''.join(set(words))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sentence = sentence.lower().split(\" \")\n    for i in range(len(sentence)):\n        sentence[i] = longest_common_subsequence(sentence[i])\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = \"\".join(sorted(set(sentence.split())))\n    return result\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \" \".join(sorted(words(sentence))).upper()\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your code here\n    #return primes_in_string(sentence)\n    \n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    try:\n        num, den = x.split(\"/\")\n        return str(float(num) * float(n) // float(den))\n    except:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    x = x.split(\"/\")\n    n = n.split(\"/\")\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    try:\n        x = int(x[0]) / int(x[1])\n        n = int(n[0]) / int(n[1])\n    except:\n        return False\n    else:\n        if x == int(x) and n == int(n):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    \n    a = float(x[0])\n    b = float(x[1])\n    c = float(n[0])\n    d = float(n[1])\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    while n!= \"1\" and n!= \"0\":\n        n = str(eval(n))\n        x = str(eval(x))\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def fraction_to_decimal(n, d):\n        \"\"\"Helper function for simplify\"\"\"\n        return n / d\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    x = x.strip()\n    n = n.strip()\n    x = x.split('/')\n    n = n.split('/')\n    x_num = x[0]\n    x_den = x[1]\n    n_num = n[0]\n    n_den = n[1]\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    x_str = str(x)\n    n_str = str(n)\n    if x_str[0] == \"/\":\n        x_str = x_str[1:]\n    if x_str[-1] == \"/\":\n        x_str = x_str[:-1]\n    if n_str[0] == \"/\":\n        n_str = n_str[1:]\n    if n_str[-1] == \"/\":\n        n_str = n_str[:-1]\n    if x_str == n_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), x))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    nums_sorted = sorted(nums)\n    for i in range(len(nums_sorted)-1):\n        if nums_sorted[i] + nums_sorted[i+1] == 0:\n            continue\n        elif nums_sorted[i] + nums_sorted[i+1] > 0:\n            nums_sorted[i+1], nums_sorted[i] = nums_sorted[i], nums_sorted[i+1]\n    return nums_sorted\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # The way we can do this is by sorting the numbers and then, we can then\n    # compare the two and order the numbers by their sum of digits.\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(nums) == 0:\n        return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = []\n    for num in nums:\n        res.append(str(num))\n    for i in range(len(res)):\n        for j in range(i, len(res)):\n            if int(res[i]) + int(res[j]) > int(res[j]) + int(res[i]):\n                res[i], res[j] = res[j], res[i]\n    return res\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if(sum_digits(nums[j]) > sum_digits(nums[j+1])):\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    nums.sort(key=sum)\n    return nums\n    "
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    sorted_nums = sorted(nums)\n    sorted_nums.sort(key=lambda x: sum(int(c) for c in str(x)))\n    return sorted_nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    order = []\n    nums.sort()\n    for idx,num in enumerate(nums):\n        order.append((num,idx))\n    return sorted(order, key=lambda x: x[0], reverse=True)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def ord(n):\n        return sum(int(x) for x in str(n))\n    nums = sorted(nums)\n    return sorted(nums, key=ord)\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    def even(x):\n        return x%2 == 0\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for num in nums:\n        if (int(str(num)[0]) % 2!= 0) and (int(str(num)[1]) % 2!= 0):\n            if (num > 10):\n                count = count + 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for n in nums:\n        if (n > 10 and (n%10 == 1 or n%10 == 3 or n%10 == 5 or n%10 == 7 or n%10 == 9)) \\\n        and ((n//10)%2 == 1 or (n//10)%2 == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(list(filter(lambda x: x > 10 and \n            ((x % 10) % 2!= 0), nums)))\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    oddCount = 0\n    for i in range(0, len(nums)):\n        if nums[i] > 10 and nums[i] % 2!= 0:\n            oddCount += 1\n    return oddCount\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for num in nums:\n        if (num > 10 and (num%10 %2!= 0)):\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for num in nums:\n        if(num > 10 and num % 2 == 1 and num // 10 % 2 == 1):\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    odds = 0\n    for num in nums:\n        if num > 10 and (num%2!=0 and num%10==1):\n            odds+=1\n    return odds\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for num in nums:\n        if (num > 10 and num%2 == 1) and (num < 100 or num > 900):\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    filtered_list = []\n    for i in nums:\n        if (len(str(i)) > 2) and (i % 2 == 1) and (i % 10 == 1):\n            filtered_list.append(i)\n    return len(filtered_list)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n < 3:\n        return 0\n    return 1 + get_max_triples(n // 3)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # get list of triples\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    # print(a)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if (i*i - i + 1) % 3 == 0 and (j*j - j + 1) % 3 == 0 and (i*j*j - i + j + 1) % 3 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def is_valid(n):\n        return n > 0 and n % 3 == 0\n    \n    # Solution 1 : Brute Force\n    # Time: O(N)\n    # Space: O(1)\n    if not is_valid(n): return 0\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    triples = 0\n    for i in range(1, n+1):\n        for j in range(1, n-i+1):\n            k = n - i - j\n            if i * i + j * j + k * k == 3 * (i + j + k):\n                triples += 1\n    return triples\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n <= 3:\n        return 0\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    a = []\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if i + j + 3 * (i - 1) == 2 * (j + 1):\n                a.append([i, j, i+j])\n    return len(a)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def validTriples(a):\n        s = sum(a)\n        return s % 3 == 0\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 0\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Creating the main lists and lists to store the orbits of planets\n    orbits = []\n    list_of_all_orbits = []\n    # Creating lists of the planets and their orbits in order\n    for i in range(len(orbits_dict)):\n        orbits.append(orbits_dict[i].split(\")\"))\n    planet1_orbits = orbits[planet1_index]\n    planet2_orbits = orbits[planet2_index]\n    # Creating lists to store the number of jumps needed to get from planet1 to planet2 and vice versa\n    planet1_jumps = []\n    planet2_jumps = []\n    # Checking if planet1 or planet2 are correct\n    if planet1!= \"Earth\" and planet1!= \"Mercury\" and planet1!= \"Venus\" and planet1!= \"Mars\" and planet1!= \"Jupiter\" and planet1!= \"Saturn\" and planet1!= \"Uranus\" and planet1!= \"Neptune\":\n        return ()\n    if planet2!= \"Earth\" and planet2!= \"Mercury\" and planet2!= \"Venus\" and planet2!= \"Mars\" and planet2!= \"Jupiter\" and planet2!= \"Saturn\" and planet2!= \"Uranus\" and planet2!= \"Neptune\":\n        return ()\n    # Checking if planet1 is the farthest away from the sun\n    if planet1 == \"Mercury\":\n        planet1_jumps = [0, 1]\n    elif planet1 == \"Venus\":\n        planet1_jumps = [0, 1, 1]\n    elif planet1 == \"Mars\":\n        planet1_jumps = [0, 1, 1, 1]\n    elif planet1 == \"Jupiter\":\n        planet1_jumps = [0, 1, 1, 1, 1]\n    elif planet1 == \"Saturn\":\n        planet1_jumps = [0, 1, 1, 1, 1, 1]\n    elif planet1 == \"Uranus\":\n        planet1_jumps = [0, 1, 1, 1, 1, 1, 1]\n    elif planet1 == \"Neptune\":\n        planet1_jumps = [0, 1, 1, 1, 1, 1, 1, 1]\n    # Checking if planet2 is the farthest away from the sun\n    if planet2 == \"Mercury\":\n        planet2_jumps = [0, 1]\n    elif planet2 == \"Venus\":\n        planet2_jumps = [0, 1, 1]\n    elif planet2 == \"Mars\":\n        planet2_jumps = [0, 1, 1, 1]\n    elif planet2 == \"Jupiter\":\n        planet2_jumps = [0, 1, 1, 1, 1]\n    elif planet2 == \"Saturn\":\n        planet2_jumps = [0, 1, 1, 1, 1, 1]\n    elif planet2 == \"Uranus\":\n        planet2_jumps = [0, 1, 1, 1, 1, 1, 1]\n    elif planet2 == \"Neptune\":\n        planet2_jumps = [0, 1, 1, 1, 1, 1, 1, 1]\n    # Checking the index of planet1 and planet2 in the main lists\n    for i in range(len(orbits)):\n        if planet1_orbits == orbits[i]:\n            planet1_index = i\n    for i in range(len(orbits)):\n        if planet2_orbits == orbits[i]:\n            planet2_index = i\n    # Checking if planet2 is the closest planet to the sun\n    for i in range(len(planet1_jumps)):\n        if planet1_jumps[i] == 0:\n            return ()\n        elif planet2_jumps[i] < planet1_jumps[i]:\n            return ()\n    # Checking if planet1 is the closest planet to the sun\n    for i in range(len(planet2_jumps)):\n        if planet2_jumps[i] == 0:\n            return ()\n        elif planet1_jumps[i] < planet2_jumps[i]:\n            return ()\n    # Creating the sublists to store the number of jumps for each planet\n    planet1_jumps_sub_lists = []\n    planet2_jumps_sub_lists = []"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    planet_names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planet_names or planet2 not in planet_names:\n        return ()\n    else:\n        planet_names.remove(planet1)\n        planet_names.remove(planet2)\n        planet_names.append(planet1)\n        planet_names.append(planet2)\n        return tuple(sorted(planet_names))\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if planet1 not in planets:\n        return ()\n    if planet2 not in planets:\n        return ()\n    if planet1 == planet2:\n        return ()\n    for i in range(len(planets)):\n        if planets[i] == planet1:\n            planet1_index = i\n    for j in range(len(planets)):\n        if planets[j] == planet2:\n            planet2_index = j\n    if planets[planet1_index] < planets[planet2_index]:\n        return (planets[planet1_index], planets[planet2_index])\n    else:\n        return (planets[planet2_index], planets[planet1_index])\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    planet_dict = {1: ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'), 2: ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'), 3: ('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'), 4: ('Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'), 5: ('Jupiter', 'Saturn', 'Uranus', 'Neptune'), 6: ('Saturn', 'Uranus', 'Neptune')}\n    for i in range(7):\n        if planet1 == planet_dict[i][0] or planet2 == planet_dict[i][0]:\n            planet_1 = planet_dict[i]\n            break\n    for i in range(7):\n        if planet2 == planet_dict[i][0] or planet1 == planet_dict[i][0]:\n            planet_2 = planet_dict[i]\n            break\n    planet_list1 = planet_1[0:2]\n    planet_list2 = planet_2[0:2]\n    distance = []\n    for i in range(len(planet_list1)):\n        distance.append(manhattan(planet_list1[i], planet_list2[i]))\n    for i in range(len(planet_list1)):\n        for j in range(len(planet_list2)):\n            if distance[i] > distance[j]:\n                planet_list1[i], planet_list2[j] = planet_list2[j], planet_list1[i]\n                distance[i], distance[j] = distance[j], distance[i]\n    return tuple(planet_list1 + planet_list2)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Create a list that contains all of the planets.\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    # Create a list to store the distances between the orbits of planet1 and planet2\n    distances = []\n    # Create a dictionary to store the orbits of planet1 and planet2\n    orbits = {}\n    for p in planets:\n        orbits[p] = []\n    # Set the distance between planet1 and planet2 to infinity\n    distances.append(float('inf'))\n    # Create an empty list to store the shortest distances from planet1 and planet2\n    shortest_distances = []\n    # Create a list to store the shortest distances from planet1 and planet2\n    shortest_distances_planets = []\n    # Get the index of planet1\n    planet1_index = planets.index(planet1)\n    # Get the index of planet2\n    planet2_index = planets.index(planet2)\n    # Create a for loop to calculate the distance between planet1 and planet2\n    for i in range(len(planets)):\n        distances[i] = distances[i] + get_distance(planets[planet1_index], planets[i])\n        distances[i] = distances[i] + get_distance(planets[i], planets[planet2_index])\n    # Get the shortest distance from planet1 and planet2\n    for i in range(len(distances)):\n        if distances[i] < distances[planet1_index]:\n            distances[i] = distances[i] - get_distance(planets[i], planets[planet1_index])\n            shortest_distances.append(distances[i])\n        if distances[i] < distances[planet2_index]:\n            distances[i] = distances[i] - get_distance(planets[i], planets[planet2_index])\n            shortest_distances.append(distances[i])\n    # Get the index of the shortest distance from planet1 and planet2\n    shortest_distance_index_1 = 0\n    shortest_distance_index_2 = 0\n    # Create a for loop to find the shortest distance from planet1 and planet2\n    for i in range(len(shortest_distances)):\n        if shortest_distances[i] < shortest_distances[shortest_distance_index_1]:\n            shortest_distance_index_1 = i\n        if shortest_distances[i] < shortest_distances[shortest_distance_index_2]:\n            shortest_distance_index_2 = i\n    # Create a list to store the shortest distance from planet1 and planet2\n    shortest_distances_planets.append(planets[shortest_distance_index_1])\n    shortest_distances_planets.append(planets[shortest_distance_index_2])\n    # Return the shortest distance from planet1 and planet2\n    return shortest_distances_planets\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Check for correct input\n    if planet1 not in PLANTS or planet2 not in PLANTS:\n        return []\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return (\"Saturn\", \"Uranus\")\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 == planet2:\n        return ()\n    #finds first planet\n    planet1_index = planet_names.index(planet1)\n    #finds second planet\n    planet2_index = planet_names.index(planet2)\n    #if first is behind second, return empty tuple\n    if planet1_index > planet2_index:\n        return ()\n    #creates tuple with first planet in list behind second\n    tup = planet_names[planet1_index + 1:] + planet_names[:planet1_index]\n    #finds distances between first and second planet\n    distance = dist(planet1_index, planet2_index, planet_names)\n    #creates tuple with distances between first and second planet\n    tup += (distance,)\n    return tup\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    '''\n    planet_name = []\n    for i in planets:\n        if i in planet1 and i in planet2:\n            planet_name.append(i)\n    planet_name.sort()\n    return planet_name\n    '''\n    for i in planets:\n        if i in planet1 and i in planet2:\n            planet_name = i\n            break\n    if planet_name:\n        for i in planets:\n            if i == planet1 or i == planet2:\n                planet_name = i\n                break\n    return (planet_name)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return tuple(sorted(s for s in planets if planet1 in orbit_tree[s] and planet2 in orbit_tree[s]))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(sorted(filter(lambda s: len(s) == len(max(lst, key=len)), lst)))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    lst = [item for item in lst if len(item) == len(min(lst, key=len))]\n    lst.sort(key=len)\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    lst = []\n    for item in lst:\n        if len(item) > 1:\n            lst.append(item)\n    for i in range(len(lst)-1,0,-1):\n        for j in range(i):\n            if len(lst[j]) > len(lst[j+1]):\n                temp = lst[j]\n                lst[j] = lst[j+1]\n                lst[j+1] = temp\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # alist = []\n    # for i in lst:\n    #     if len(i)%2!= 0:\n    #         alist.append(i)\n    # # print(alist)\n    # alist.sort(key = lambda x: x)\n    # print(alist)\n    # print(alist)\n    # return alist\n    \n    return sorted(lst, key=lambda x: len(x))\n    \n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    s = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            s.append(i)\n    return sorted(s)\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    lst = list(lst)\n    lst_new = []\n    for x in lst:\n        if len(x) % 2 == 0:\n            lst_new.append(x)\n    lst_new.sort()\n    return lst_new\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    # Sort by length first.\n    lst.sort(key=len)\n    \n    # Get the list of items with the same length.\n    chunk_lst = [e for e in lst if len(e) == len(lst[0])]\n    \n    # Sort the list of items by length.\n    chunk_lst.sort()\n    \n    # Use zip to unzip the items in the list.\n    return zip(*chunk_lst)\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(lst, key=lambda x: (len(x), x))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not lst:\n        return []\n    for i in range(len(lst)):\n        lst[i] = lst[i].strip(\" \")\n    odd_length_words = []\n    for word in lst:\n        if len(word) % 2!= 0:\n            odd_length_words.append(word)\n    odd_length_words.sort()\n    return odd_length_words\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # not an iterator\n    lst.sort(key=len)\n    new = []\n    for i in lst:\n        if len(i) % 2!= 0:\n            new.append(i)\n    return new\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n in x_or_y_primes:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n        \n    \ndef x_or_y_if_prime(n, x, y):\n    \"\"\"This program should return the value of x if n is a prime \n    number and should return the value of y otherwise.\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 1:\n        return x\n    if n == 2:\n        return y\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return y\n    return x\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 1:\n        return x\n    if n == 2:\n        return y\n    else:\n        return x if x_is_prime(n) else y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return x if n % x == 0 else y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    return x if n % x == 0 else y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n % x == 0 or n % y == 0:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not is_prime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x if n % x == 0 else y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n % x == 0 or n % y == 0:\n        return x\n    else:\n        return y\n        \ndef zero_or_one(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    zero and should return the value of y otherwise.\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return 0\n    return sum([x**2 for x in lst if (x % 2)!= 0])\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Start with 0\n    total = 0\n    # Iterate over the list\n    for item in lst:\n        # If the item is odd and not 0\n        if item!= 0 and item % 2!= 0:\n            # Add the square of the item\n            total += item ** 2\n    return total\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not lst:\n        return 0\n    # initialize a variable to store the sum\n    sum = 0\n    # loop through the list of numbers\n    for x in lst:\n        # check if the current number is odd or not\n        if x % 2 == 1:\n            # add the current number to the sum\n            sum += x ** 2\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if lst[i]%2!= 0:\n            sum = sum + lst[i]**2\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1:\n            total = total + lst[i] ** 2\n    return total\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    odds = 0\n    for x in lst:\n        if x % 2 == 1:\n            odds += x**2\n    return odds\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum([number ** 2 for number in lst if number % 2!= 0 and number > 0 and number!= 0])\n    \n    \ndef remove_duplicates(lst):\n    '''\n    Given a list of numbers, return the list with the duplicate elements removed.\n    \n    remove_duplicates([1, 2, 3, 2]) == [1, 2, 3]\n    remove_duplicates([1, 2, 2, 3, 3]) == [1, 2, 3]\n    remove_duplicates([]) == []\n    '''\n    return list(set(lst))\n    \ndef make_dict(lst):\n    '''\n    Given a list of integers, return a dictionary where the keys are the integers\n    in the list, and the values are the count of that integer in the list. \n    \n    make_dict([1, 2, 3, 1]) == {1: 2, 2: 1, 3: 1}\n    make_dict([4, 4, 4, 4]) == {4: 4}\n    make_dict([4, 4, 4]) == {4: 3}\n    make_dict([]) == {}\n   \n    If the input list is empty, return an empty dictionary.\n    '''\n    return {number: lst.count(number) for number in lst}\n    \ndef max_num(lst):\n    '''\n    Given a list of numbers, return the largest number in the list.\n    \n    max_num([1, 2, 3, 4]) == 4\n    max_num([4, 5, 2, 3]) == 5\n    max_num([4]) == 4\n    max_num([]) == None\n   \n    If the input list is empty, return None.\n    '''\n    return max(lst)\n    \ndef double_count(lst):\n    '''\n    Given a list of numbers, return a new list with each element appearing twice in the original list. \n    \n    double_count([1, 2, 3, 4]) == [2, 4, 6, 8]\n    double_count([4, 5, 6, 6]) == [4, 8, 12, 16]\n    double_count([]) == []\n    '''\n    return [2 * number for number in lst]\n    \ndef sum_all_nums(lst):\n    '''\n    Given a list of numbers, return the sum of all the elements in the list.\n    \n    sum_all_nums([1, 2, 3, 4]) == 10\n    sum_all_nums([]) == 0\n    '''\n    return sum(lst)\n    \ndef sum_all_nums2(lst):\n    '''\n    Given a list of numbers, return the sum of all the even elements in the list.\n    \n    sum_all_nums2([1, 2, 3, 4]) == 4\n    sum_all_nums2([]) == 0\n    '''\n    return sum([number for number in lst if number % 2 == 0])\n    \ndef search_nums(lst, number):\n    '''\n    Given a list of numbers, return True if the list contains any number\n    that is exactly equal to the given number.\n    \n    search_nums([1, 2, 3, 4], 2) == True\n    search_nums([1, 2, 3, 4], 1) == True\n    search_nums([1, 2, 3, 4], 5) == False\n    search_nums([], 4) == False\n    search_nums([1, 2, 3, 4], -1) == False\n    search_nums([], -1) == False\n    '''\n    return number in lst\n    \ndef get_larger_nums(lst1, lst2):\n    '''\n    Given a list of numbers, return a list containing each number from\n    the original list that is not in the second list.\n    \n    get_larger_nums([1, 2, 3, 4], [5, 6, 7, 8]) == [1, 3, 4]\n    get_larger_nums([1, 2, 3, 4], [8, 9]) == [1, 2, 3, 4]\n    get_larger_nums([], [1, 2, 3, 4]) == []\n    get_larger_nums("
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    odd_sum = 0\n    if lst == []:\n        return 0\n    for i in lst:\n        if i > 0 and int(i) % 2!= 0:\n            odd_sum += i**2\n    return odd_sum\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    odd = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1:\n            odd += lst[i]**2\n    return odd\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    odd_numbers = 0\n    for num in lst:\n        if num % 2 == 1:\n            odd_numbers += num ** 2\n    return odd_numbers\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    results = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            results.append(0)\n        else:\n            results.append(abs(guess[i] - game[i]))\n    return results\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    diffs = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            diffs.append(0)\n        else:\n            diffs.append(abs(guess[i]-game[i]))\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    guesses = []\n    for guess in guess:\n        if guess in game:\n            guesses.append(0)\n        else:\n            guesses.append(abs(guess-max(game)))\n    return guesses\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if game == guess:\n        return list(range(len(game)))\n    \n    game = list(game)\n    guess = list(guess)\n    sorted_guess = sorted(game)\n    \n    for i in range(len(guess)):\n        guess[i] = sorted_guess.index(guess[i])\n    return guess\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    def dist(n,guess):\n        return abs(n-guess)\n    return list(map(dist,guess,game))\n    \n    "
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    guesses = sorted(guess)\n    scores = sorted(game)\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    score=0\n    guess=[]\n    for i in range(len(guess)):\n        if guess[i]==game[i]:\n            guess.pop(i)\n            score+=0\n        else:\n            score+=abs(guess[i]-game[i])\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    return [min(x-y,abs(x-y)) for x,y in zip(game,guess)"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    #create an array of length len(guess)\n    guesses = []\n    for i in range(len(guess)):\n        guesses.append(abs(guess[i]-game[i]))\n        \n    return guesses\n    \n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return None\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # print(class_name)\n    # print(extensions)\n    # print(sorted(extensions, key=lambda x: (-len(x), -x.count('.'))))\n    # return sorted(extensions, key=lambda x: (-len(x), -x.count('.')))[0]\n    # new_extensions = []\n    # for x in extensions:\n    #     if x.count('.') > 0:\n    #         x = '.'+x\n    #     new_extensions.append(x)\n    # new_extensions = sorted(new_extensions, key=lambda x: (-x.count('.'), x))\n    # # print(new_extensions)\n    # for x in extensions:\n    #     if x.count('.') == 0:\n    #         x = x.capitalize()\n    #     # print(x)\n    # return '.'.join(new_extensions)\n    \n    return sorted(extensions, key=lambda x: (-len(x), -x.count('.'), x))[0]\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    for i in extensions:\n        if i.isupper() == True:\n            class_name = class_name + \".\" + i\n    \n    for i in extensions:\n        if i.isupper() == False:\n            class_name = class_name + \".\" + i\n    \n    return class_name"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    return class_name + '.' + extensions[0]\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    from collections import Counter\n    extension_dict = {}\n    for i in range(len(extensions)):\n        extension_dict[extensions[i]] = len(extensions[i])-len(extensions[i].lower())\n    extension_dict = Counter(extension_dict)\n    max_extension = max(extension_dict)\n    max_extension_list = []\n    for key in extension_dict:\n        if extension_dict[key] == max_extension:\n            max_extension_list.append(key)\n    if len(max_extension_list) == 1:\n        return class_name + '.' + max_extension_list[0]\n    else:\n        return class_name + '.' + max_extension_list[0] + '.' + max_extension_list[1]\n        \n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    # Return the class name with the strongest extension\n    return class_name + extensions[0]\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #Replace this for solution\n    return None"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    class_extension = []\n    for extension in extensions:\n        if (extension.count(class_name.upper()) > 0) and (extension.count(class_name.lower()) > 0):\n            class_extension.append(extension)\n    \n    if class_extension:\n        class_extension.sort(key=lambda x: -(x.count(class_name.upper()) - x.count(class_name.lower())))\n        return class_extension[0]\n    else:\n        return class_name"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    extensions = list(extensions)\n    extensions.sort(key=lambda x: x.upper() - x.lower(), reverse=True)\n    extensions = list(filter(lambda x: x!= class_name, extensions))\n    if extensions == []:\n        return class_name\n    return class_name + extensions[0]"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return class_name + Strongest_Extension_Name(class_name)\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = '.'.join(class_name.split('.')[:-1])\n    cap_count = 0\n    low_count = 0\n    for x in extensions:\n        if x[0].isupper():\n            cap_count += 1\n        else:\n            low_count += 1\n    if cap_count > low_count:\n        return f'{res}.{extensions[0]}'\n    elif cap_count < low_count:\n        return f'{res}.{extensions[-1]}'\n    else:\n        return f'{res}.{extensions[-1]}'\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = len(b)\n    l = len(a)\n    for i in range(n):\n        if a[i] == b[0]:\n            j = 0\n            while j < n:\n                if a[i+j] == b[i+j]:\n                    j += 1\n                else:\n                    break\n            if j == n:\n                return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return b in a or a in b or b in a or a in b\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return any(i in b for i in a[1:])\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    b = b[1:] + b[0]\n    return a in b\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    a, b = a.lower(), b.lower()\n    return b in a or b in a[len(a):]\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (a in b) or (a[1:] in b) or (a[:-1] in b)"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    length = len(a)\n    i = 0\n    while length > i:\n        rotated = a[i:] + a[:i]\n        if rotated == b:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(b) > len(a):\n        return False\n    if a in b*len(a) or b in a*len(b):\n        return True\n    if a[0] == b[-1]:\n        return cycpattern_check(a[1:], b[:-1])\n    else:\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return b in a + a[1:]\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pattern = ''.join(reversed(a))\n    return b in pattern\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return (len([i for i in str(num) if i.isdigit() and int(i) % 2 == 0]), len([i for i in str(num) if i.isdigit() and int(i) % 2!= 0]))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (num // 10 % 2, num % 10)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Even and odd are each separated by a space\n    # Each even and odd is separated by a comma\n    # The result is separated by a colon\n    # Result is in the form of a tuple\n    return tuple((len([i for i in str(num) if i.isdigit() and int(i) % 2 == 0]),\n        len([i for i in str(num) if i.isdigit() and int(i) % 2 == 1])))\n    #return (len(str(num).split(',')), len(str(num).split(':')))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert num >= 0, \"Input number must be positive\"\n    s = str(num)\n    count_even, count_odd = 0, 0\n    for i in s:\n        if int(i) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    even = 0\n    odd = 0\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count_even = count_odd = 0\n    while num:\n        num = num // 10\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    even = 0\n    odd = 0\n    for i in range(len(str(num))):\n        if int(str(num)[i]) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (num % 10, num // 10)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (sum(list(map(lambda x: x % 2, list(str(num))))), sum(list(map(lambda x: x % 2 == 0, list(str(num)))))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n_even = 0\n    n_odd = 0\n    n_string = str(num)\n    for n in n_string:\n        if int(n) % 2 == 0:\n            n_even += 1\n        else:\n            n_odd += 1\n    return (n_even, n_odd)\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    roman = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"]\n    ints = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if number == 1:\n        return \"I\"\n    elif number == 2:\n        return \"II\"\n    elif number == 3:\n        return \"III\"\n    elif number == 4:\n        return \"IV\"\n    elif number == 5:\n        return \"V\"\n    elif number == 6:\n        return \"VI\"\n    elif number == 7:\n        return \"VII\"\n    elif number == 8:\n        return \"VIII\"\n    elif number == 9:\n        return \"IX\"\n    elif number == 10:\n        return \"X\"\n    elif number == 11:\n        return \"XI\"\n    elif number == 12:\n        return \"XII\"\n    elif number == 13:\n        return \"XIII\"\n    elif number == 14:\n        return \"XIV\"\n    elif number == 15:\n        return \"XV\"\n    elif number == 16:\n        return \"XVI\"\n    elif number == 17:\n        return \"XVII\"\n    elif number == 18:\n        return \"XVIII\"\n    elif number == 19:\n        return \"XIX\"\n    elif number == 20:\n        return \"XX\"\n    elif number == 30:\n        return \"XXX\"\n    elif number == 40:\n        return \"XL\"\n    elif number == 50:\n        return \"L\"\n    elif number == 60:\n        return \"LX\"\n    elif number == 70:\n        return \"LXX\"\n    elif number == 80:\n        return \"LXXX\"\n    elif number == 90:\n        return \"XC\"\n    elif number == 100:\n        return \"C\"\n    elif number == 200:\n        return \"CC\"\n    elif number == 300:\n        return \"CCC\"\n    elif number == 400:\n        return \"CD\"\n    elif number == 500:\n        return \"D\"\n    elif number == 600:\n        return \"DC\"\n    elif number == 700:\n        return \"DCC\"\n    elif number == 800:\n        return \"DCCC\"\n    elif number == 900:\n        return \"CM\"\n    elif number == 1000:\n        return \"M\"\n    else:\n        return \"-\""
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError('Input must be a positive integer less than 1000')\n    \n    # create a dictionary of roman numerals\n    # convert from int to str, then lowercase\n    roman_numerals = {1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix', 10: 'x',\n                    11: 'xi', 12: 'xii', 13: 'xiii', 14: 'xiv', 15: 'xv', 16: 'xvi', 17: 'xvii', 18: 'xviii',\n                    19: 'xix', 20: 'xx', 30: 'XXX', 40: 'XL', 50: 'L', 60: 'LX', 70: 'LXX', 80: 'LXXX', 90: 'XC',\n                    100: 'C', 200: 'CC', 300: 'CCC', 400: 'CD', 500: 'D', 600: 'DC', 700: 'DCC', 800: 'DCCC', 900: 'CM',\n                    1000: 'M'}\n    \n    # convert number to a str\n    str_number = str(number)\n    \n    # convert str_number to list\n    int_list = list(str_number)\n    \n    # convert int_list to dict\n    int_dict = dict(enumerate(int_list))\n    \n    # iterate through int_dict, using keys as indexes and values as values\n    mini_roman = []\n    for index in int_dict.keys():\n        roman_numeral = roman_numerals.get(int_dict.get(index))\n        mini_roman.append(roman_numeral)\n    \n    # join the elements of mini_roman and return the str in lowercase\n    return ''.join(mini_roman).lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    values = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    numerals = ('M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I')\n    result, i = \"\", 0\n    while number > 0:\n        for _ in range(number // values[i]):\n            result += numerals[i]\n            number -= values[i]\n        i += 1\n    return result.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert 1 <= number <= 1000, '1 <= num <= 1000'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert 1 <= number <= 1000\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # convert number to decimal value\n    decimal = number\n    # initialize empty string\n    roman = ''\n    # if number is between 1 and 4, add I\n    if 1 <= decimal <= 4:\n        roman = 'I'\n    # if number is between 5 and 9, add V\n    elif 5 <= decimal <= 8:\n        roman = 'V'\n    # if number is between 10 and 19, add X\n    elif 10 <= decimal <= 14:\n        roman = 'X'\n    # if number is between 15 and 20, add L\n    elif 15 <= decimal <= 20:\n        roman = 'L'\n    # if number is between 21 and 29, add C\n    elif 21 <= decimal <= 24:\n        roman = 'C'\n    # if number is between 25 and 40, add D\n    elif 25 <= decimal <= 30:\n        roman = 'D'\n    # if number is between 31 and 39, add M\n    elif 31 <= decimal <= 34:\n        roman = 'M'\n    # if number is between 35 and 44, add G\n    elif 35 <= decimal <= 39:\n        roman = 'G'\n    # if number is between 40 and 49, add T\n    elif 40 <= decimal <= 44:\n        roman = 'T'\n    # if number is between 45 and 55, add P\n    elif 45 <= decimal <= 55:\n        roman = 'P'\n    # if number is between 56 and 63, add H\n    elif 56 <= decimal <= 64:\n        roman = 'H'\n    # if number is between 65 and 74, add F\n    elif 65 <= decimal <= 74:\n        roman = 'F'\n    # if number is between 75 and 84, add E\n    elif 75 <= decimal <= 84:\n        roman = 'E'\n    # if number is between 85 and 96, add D\n    elif 85 <= decimal <= 96:\n        roman = 'D'\n    # if number is between 97 and 100, add M\n    elif 97 <= decimal <= 100:\n        roman = 'M'\n    return roman\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert 1 <= number <= 1000, 'Wrong input'\n    roman = \"\"\n    while number > 0:\n        if number >= 1000:\n            number -= 1000\n            roman +='m'\n        elif number >= 900:\n            number -= 900\n            roman += 'cm'\n        elif number >= 500:\n            number -= 500\n            roman += 'd'\n        elif number >= 400:\n            number -= 400\n            roman += 'cd'\n        elif number >= 100:\n            number -= 100\n            roman += 'c'\n        elif number >= 90:\n            number -= 90\n            roman += 'xc'\n        elif number >= 50:\n            number -= 50\n            roman += 'l'\n        elif number >= 40:\n            number -= 40\n            roman += 'xl'\n        elif number >= 10:\n            number -= 10\n            roman += 'x'\n        elif number >= 9:\n            number -= 9\n            roman += 'ix'\n        else:\n            number -= 1\n            roman += 'i'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert 1 <= number <= 1000, \"Invalid input\"\n    \n    if number == 0:\n        return \"null\"\n    num_str = \"M\" * number\n    return num_str[:len(num_str) - 1]\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # convert the integer to a list of characters representing the number\n    number = list(map(int, list(str(number))))\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return (a*a) == (b*b) + (c*c)\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Side lengths are in ascending order\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    # Angle formed by three sides is 90 degrees or 90\n    return math.sqrt(a*a + b*b) == c"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if a == b == c:\n        return False\n    if (a + b) == c:\n        return True\n    if (a**2 + b**2) == c**2:\n        return True\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n    \n    \ndef is_right_angle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the \n    triangle is a right angle, False otherwise.\n    A right-angle is a triangle in which all the angles are right angle or 90 \n    degree.\n    Example:\n    is_right_angle(3, 4, 5) == True\n    is_right_angle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n    \n    \ndef is_right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the \n    triangle is a right angle triangle, False otherwise.\n    A right-angle triangle is a triangle in which all the angles are right angle \n    or 90 degree.\n    Example:\n    is_right_angle_triangle(3, 4, 5) == True\n    is_right_angle_triangle(1, 2, 3) == False\n    '''\n    if is_right_angle(a, b, c) and \\\n       right_angle_triangle(a, b, c):\n        return True\n    else:\n        return False\n    \n    \ndef is_right_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the \n    triangle is a right triangle, False otherwise.\n    A right triangle is a triangle in which all the angles are right angle or \n    90 degree.\n    Example:\n    is_right_triangle(3, 4, 5) == True\n    is_right_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n    \n    \ndef is_right_triangle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the \n    triangle is a right triangle triangle, False otherwise.\n    A right triangle is a triangle in which all the angles are right angle or \n    90 degree.\n    Example:\n    is_right_triangle_triangle(3, 4, 5) == True\n    is_right_triangle_triangle(1, 2, 3) == False\n    '''\n    if is_right_triangle(a, b, c) and \\\n       is_right_triangle(a, b, c):\n        return True\n    else:\n        return False\n    \n    \ndef is_square(a):\n    '''\n    Given a number a, return True if it is a perfect square, False otherwise.\n    Example:\n    is_square(5) == True\n    is_square(6) == False\n    '''\n    if (a**0.5).is_integer():\n        return True\n    else:\n        return False\n    \n    \ndef is_square_number(a):\n    '''\n    Given a number a, return True if it is a perfect square, False otherwise.\n    Example:\n    is_square_number(5) == True\n    is_square_number(6) == False\n    '''\n    if (a**0.5).is_integer():\n        return True\n    else:\n        return False\n    \n    \ndef is_square_number_sqrt(a):\n    '''\n    Given a number a, return True if it is a perfect square, False otherwise.\n    Example:\n    is_square_number_sqrt(5) == True\n    is_square_number_sqrt(6) == False\n    '''\n    if (a**0.5).is_integer():\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Formula for finding the area of a triangle = sqrt(s * (s - a) * (s - b) * (s - c))\n    area = (a * b * c) / 2\n    if a * b > c * c or a * c > b * c or b * c > a * a:\n        return False\n    else:\n        return round(math.sqrt(area), 3) == math.sqrt(area)\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (a**2 + b**2) == c**2 and round(math.degrees(math.acos(c/(a**2 + b**2))), 2) == 90.0\n    \nif __name__ == '__main__':\n    # Test Cases\n    print(right_angle_triangle(2, 3, 4))\n    print(right_angle_triangle(2, 3, 4))\n    print(right_angle_triangle(3, 4, 5))\n    print(right_angle_triangle(3, 4, 5)"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if (a * a + b * b == c * c):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if abs(a * c - b * b) < 1e-3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return a * a + b * b == c * c\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    max_unique = 0\n    max_word = ''\n    for word in words:\n        unique = len(set(word))\n        if unique > max_unique:\n            max_unique = unique\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    list = []\n    for word in words:\n        if len(word) > 0:\n            list.append(word)\n    list.sort()\n    return list[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    max_char = \"\"\n    max_num = 0\n    for word in words:\n        curr_char = len(set(word))\n        if curr_char > max_num:\n            max_char = word\n            max_num = curr_char\n    return max_char\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return max([words[0], words[1], words[2]], key=lambda x:len(set(x)))\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s = set()\n    s.update(words)\n    s = sorted(s)\n    s = s[-1]\n    return s\n    \nif __name__ == \"__main__\":\n    s = [\"name\", \"of\", \"string\", \"a\", \"aa\", \"aaabbbb\", \"cc\"]\n    print(find_max(s))\n    s = [\"name\", \"enam\", \"game\"]\n    print(find_max(s))\n    s = [\"aaaaaaa\", \"bb\", \"cc\"]\n    print(find_max(s))\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(words) == 0:\n        return \"\"\n    max_char = \"\"\n    max_count = 0\n    for word in words:\n        word_count = count_unique(word)\n        if word_count > max_count:\n            max_count = word_count\n            max_char = word\n    return max_char\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Return the word with maximum number of unique characters\n    # If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order\n    if len(words) == 1:\n        return words[0]\n    \n    # get a list of unique characters\n    unique_char_list = list(set(word for word in words))\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(set(words), key=words.index)[0]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if need <= remaining:\n        eaten = number + need - remaining\n        remaining = remaining - need\n        return [eaten, remaining]\n    else:\n        eaten = 0\n        remaining = number + need - remaining\n        return [eaten, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    # if need > remaining:\n    #     return ([need - remaining, remaining])\n    # else:\n    #     return ([number + need - remaining, remaining])\n    \n    if number >= need:\n        return ([number + need - remaining, remaining])\n    else:\n        return ([need - number, remaining + number])\n        \n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if remaining < need:\n        need = remaining\n    if need <= number:\n        return [number, need]\n    else:\n        return [number, need]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if number > need:\n        number = number - need\n        eaten_carrots = need\n        remaining_carrots = remaining - eaten_carrots\n        return [eaten_carrots, remaining_carrots]\n    else:\n        remaining_carrots = remaining - number\n        eaten_carrots = number\n        return [eaten_carrots, remaining_carrots]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    total = number + remaining\n    eaten = number - need\n    \n    if (total == 0 and eaten == 0):\n        return []\n    elif (total == 0 and eaten > 0):\n        return [-1, eaten]\n    elif (total > 0 and eaten == 0):\n        return [-2, total]\n    else:\n        return [-1, total-eaten]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if number == 0:\n        return None\n    if number == 1:\n        return need, remaining - need\n    if number == 2:\n        return need, remaining - need\n    if number == 3:\n        return need, remaining - need\n    if number == 4:\n        return need, remaining - need\n    if number == 5:\n        return need, remaining - need\n    if number == 6:\n        return need, remaining - need\n    if number == 7:\n        return need, remaining - need\n    if number == 8:\n        return need, remaining - need\n    if number == 9:\n        return need, remaining - need\n    if number == 10:\n        return need, remaining - need\n    if number == 11:\n        return need, remaining - need\n    if number == 12:\n        return need, remaining - need\n    if number == 13:\n        return need, remaining - need\n    if number == 14:\n        return need, remaining - need\n    if number == 15:\n        return need, remaining - need\n    if number == 16:\n        return need, remaining - need\n    if number == 17:\n        return need, remaining - need\n    if number == 18:\n        return need, remaining - need\n    if number == 19:\n        return need, remaining - need\n    if number == 20:\n        return need, remaining - need\n    if number == 21:\n        return need, remaining - need\n    if number == 22:\n        return need, remaining - need\n    if number == 23:\n        return need, remaining - need\n    if number == 24:\n        return need, remaining - need\n    if number == 25:\n        return need, remaining - need\n    if number == 26:\n        return need, remaining - need\n    if number == 27:\n        return need, remaining - need\n    if number == 28:\n        return need, remaining - need\n    if number == 29:\n        return need, remaining - need\n    if number == 30:\n        return need, remaining - need\n    if number == 31:\n        return need, remaining - need\n    if number == 32:\n        return need, remaining - need\n    if number == 33:\n        return need, remaining - need\n    if number == 34:\n        return need, remaining - need\n    if number == 35:\n        return need, remaining - need\n    if number == 36:\n        return need, remaining - need\n    if number == 37:\n        return need, remaining - need\n    if number == 38:\n        return need, remaining - need\n    if number == 39:\n        return need, remaining - need\n    if number == 40:\n        return need, remaining - need\n    if number == 41:\n        return need, remaining - need\n    if number == 42:\n        return need, remaining - need\n    if number == 43:\n        return need, remaining - need\n    if number == 44:\n        return need, remaining - need\n    if number == 45:\n        return need, remaining - need\n    if number == 46:\n        return need, remaining - need\n    if number == 47:\n        return need, remaining - need\n    if number == 48:\n        return need, remaining - need\n    if number == 49:\n        return need, remaining - need\n    if number == 50:\n        return need, remaining - need\n    if number == 51:\n        return need, remaining - need\n    if number == 52:\n        return need, remaining - need\n    if number == 53:\n        return need, remaining - need\n    if number == 54:\n        return need, remaining - need\n    if number == 55:\n        return need, remaining - need\n    if number == 56:\n        return need, remaining - need\n    if number == 57:\n        return need, remaining - need\n    if number == 58:\n        return need, remaining - need\n    if number == 59:\n        return need, remaining - need\n    if number == 60:\n        return need, remaining - need\n    if number == 61:\n        return need, remaining - need\n    if number == 62:\n        return need, remaining - need\n    if number == 63:\n        return need, remaining - need\n    if number == 64:\n        return need, remaining - need\n    if number == 65:\n        return need, remaining - need\n    if number == 66:\n        return need, remaining - need\n    if number == 67:\n        return need, remaining - need\n    if number == 68:\n    "
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    total = number - need\n    if total >= 0:\n        return [total, remaining - total]\n    else:\n        return [0, remaining - total]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if remaining == 0:\n        return None\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # the number of carrots you need to eat\n    need = need - number\n    \n    # the number of remaining carrots\n    remaining = remaining - need\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Do not remove the below line\n    # if your code in python is not working, try to make a version that can run in java.\n    # if you can't get java to run in python, then try to make a version that can run in java.\n    return [number + need, remaining - need]\n    # Code starts here\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return 0\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(operator) == 1:\n        # if there is only one operator, then use its basic operation\n        if operator[0] == '+':\n            return sum(operand)\n        elif operator[0] == '-':\n            return operand[0] - sum(operand)\n        elif operator[0] == '*':\n            return operand[0] * sum(operand)\n        elif operator[0] == '/':\n            return operand[0] / sum(operand)\n        else:\n            print(\"Invalid operator\")\n    elif len(operator) == 2:\n        # if there are two operators, the operator has to be multiplication\n        if operator[0] == '*':\n            return operand[0] * operand[1]\n        elif operator[1] == '*':\n            return operand[0] * operand[1]\n        else:\n            print(\"Invalid operator\")\n    else:\n        print(\"Invalid operator\")\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def add(num1, num2):\n        return num1 + num2\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(operator) > 1:\n        if operator[0] == '+':\n            return sum(operand)\n        elif operator[0] == '-':\n            return sum(operand)\n        elif operator[0] == '*':\n            return sum(operand)\n        elif operator[0] == '/':\n            return sum(operand) // (len(operand)-1)\n        elif operator[0] == '**':\n            return sum(operand) ** (len(operand)-1)\n    else:\n        return operand[0]\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    operator = operator[:]\n    operand = operand[:]\n    result = 0\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # YOUR CODE HERE\n    operator = list(operator)\n    operand = list(operand)\n    result = 0\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            result = result + operand[i]\n        elif operator[i] == '-':\n            result = result - operand[i]\n        elif operator[i] == '*':\n            result = result * operand[i]\n        elif operator[i] == '/':\n            result = result // operand[i]\n        else:\n            result = result ** operand[i]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = 0\n    for i in range(len(operator)-1):\n        if operator[i] == '+':\n            result = result + operand[i]\n        elif operator[i] == '-':\n            result = result - operand[i]\n        elif operator[i] == '*':\n            result = result * operand[i]\n        elif operator[i] == '/':\n            if operand[i]!= 0:\n                result = result // operand[i]\n            else:\n                result = -1\n        elif operator[i] == '**':\n            result = result ** operand[i]\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Implement the code here\n    result = 0\n    for i, j in zip(operator, operand):\n        if i == '+':\n            result += j\n        elif i == '-':\n            result -= j\n        elif i == '*':\n            result *= j\n        elif i == '/':\n            result /= j\n        else:\n            result = j ** i\n    return result\n    \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Calculate first operand\n    first_operand = operand.pop(0)\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result = first_operand + operand.pop(0)\n        elif operator[i] == '-':\n            result = first_operand - operand.pop(0)\n        elif operator[i] == '*':\n            result = first_operand * operand.pop(0)\n        elif operator[i] == '//':\n            result = first_operand // operand.pop(0)\n        elif operator[i] == '**':\n            result = first_operand ** operand.pop(0)\n        else:\n            raise ValueError\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    string = s\n    if not string.isalpha():\n        return string[::-1]\n    for index, i in enumerate(string):\n        if i.islower():\n            string = string[:index] + string[index].upper() + string[index + 1:]\n            string = string[:index] + string[index].lower() + string[index + 1:]\n        elif i.isupper():\n            string = string[:index] + string[index].lower() + string[index + 1:]\n            string = string[:index] + string[index].upper() + string[index + 1:]\n        else:\n            pass\n    return string\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = ''\n    # If there are no letters, reverse the letters\n    if ''.join(s.split()).isalpha():\n        result = ''.join(s.split()[::-1])\n    else:\n        result = ''.join(s.split()[::-1])\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l = len(s)\n    if l == 0:\n        return \"\"\n    if l == 1:\n        return s[0].upper() if s[0] in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" else s[0]\n    else:\n        s = list(s)\n        for i in range(l):\n            if s[i].lower() in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n                s[i] = s[i].lower()\n            elif s[i].upper() in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n                s[i] = s[i].upper()\n        return \"\".join(s)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    letters = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                letters.append(char.upper())\n            else:\n                letters.append(char.lower())\n        else:\n            letters.append(char)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if not s:\n        return \"\"\n    \n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    \n    return ''.join(list(map(lambda x: x.upper() if x.isalpha() else x.lower(), s)))\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return s if s.islower() else s[::-1].swapcase()\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    # s[i] is an alphabet if it is in [a-zA-Z] and s[i+1] is a letter, \n    # otherwise s[i] is a letter.\n    \n    # return the string s with reversed letters if s is not an empty string.\n    \n    # Example:\n    # s = '1234'\n    # s_reversed = '4321'\n    # s_reversed = '1234'\n    \n    s_reversed = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s_reversed += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n            s_reversed += s[i]\n    \n    return s_reversed\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = s.lower()\n    if s == \"\":\n        return s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s = s[:i] + s[i].lower() + s[i+1:]\n            else:\n                s = s[:i] + s[i].upper() + s[i+1:]\n            break\n    return s\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    string = s\n    if len(string) == 0:\n        return string\n    lower_s = string.lower()\n    upper_s = string.upper()\n    return lower_s if not any(char.isalpha() for char in string) else upper_s\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(s) == 0:\n        return s\n    else:\n        first_letter = s[0]\n        if first_letter.isalpha():\n            return first_letter.upper() + solve(s[1:])\n        else:\n            return solve(s[1:])\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(text) == 0:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return hashlib.md5(text.encode()).hexdigest() if text else None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if text == '':\n        return None\n    text = text.encode('utf-8')\n    m = hashlib.md5()\n    m.update(text)\n    return m.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    hash_result = hashlib.md5()\n    hash_result.update(text.encode())\n    return hash_result.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    import hashlib\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    return None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(text) > 0:\n        text = text.encode('utf-8')\n        hash_object = hashlib.md5(text)\n        hash_object = hash_object.hexdigest()\n    else:\n        hash_object = None\n    return hash_object\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if text == '':\n        return None\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return range(a, b+1, 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(range(a, b, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(range(a, b, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(range(a, b+1, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    arr = []\n    for i in range(a, b+1, 2):\n        arr.append(i)\n    return arr\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(range(a, b + 1), key=lambda x: int(str(x)[::2]))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(range(a, b + 1, 2))\n    # return list(range(a, b + 1, 2)) if a % 2 == 0 else list(range(a, b + 1, 2))[::-1]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert a > 0 and b > 0\n"
    }
]