[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Get sorted version of list\n    sorted_list = sorted(numbers)\n",
        "num_ids": 21
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] < threshold:\n                return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(numbers) == 0:\n        return False\n    elif len(numbers) == 1:\n        return False\n    else:\n        n = len(numbers)\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if abs(numbers[i] - numbers[j]) < threshold:\n                    return True\n        return False\n",
        "num_ids": 95
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # set of numbers which are closer to each other than given threshold\n    close_numbers = set()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < threshold:\n            close_numbers.add(numbers[i])\n            close_numbers.add(numbers[i + 1])\n    return len(close_numbers) > 0\n",
        "num_ids": 107
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(numbers)\n    if n < 2:\n        return False\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert threshold >= 0.0, \"Threshold should be a positive value\"\n    assert threshold < 1.0, \"Threshold should be a positive value\"\n    assert len(numbers) >= 2, \"List should contain at least 2 numbers\"\n    \n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] < threshold:\n                return True\n    return False\n",
        "num_ids": 114
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    length = len(numbers)\n    if length < 2:\n        return False\n    for i in range(length-1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = len(numbers)\n    if n < 2:\n        return False\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if numbers[i] - numbers[j] < threshold:\n                return True\n    return False\n",
        "num_ids": 68
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return_list = []\n    count = 0\n    for i in paren_string:\n        if i!='':\n            return_list.append(paren_string[count:i])\n            count = i\n    return_list.append(paren_string[count:])\n    return return_list\n",
        "num_ids": 73
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    paren_stack = []\n    # Create a stack and a list of output strings\n    output_list = []\n",
        "num_ids": 27
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # TODO: Write your function here\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_list = []\n    open_paranthesis = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_list.append('(')\n            open_paranthesis += 1\n        if paren_string[i] == ')':\n            paren_list.append(')')\n            open_paranthesis -= 1\n        if open_paranthesis == 0 and i == len(paren_string) - 1:\n            paren_list.append(')')\n",
        "num_ids": 201
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    open = 0\n    open_stack = []\n    paren_list = []\n    paren_list.append(paren_string[0])\n    for i in paren_string[1:]:\n        if i == '(' or i == ')' or i =='':\n            paren_list.append(i)\n        elif i == '(':\n            open += 1\n            open_stack.append(open)\n        elif i == ')':\n            open -= 1\n            if open >= 0:\n                paren_list.append(i)\n            elif open == 0 and len(open_stack) > 0:\n                while open_stack[-1] == 0:\n                    open_stack.pop()\n                    paren_list.append(i)\n        elif i =='':\n            paren_list.append(i)\n    return paren_list\n",
        "num_ids": 201
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    paren_list = []\n    open_brace = -1\n    for i, ch in enumerate(paren_string):\n        if ch == '(':\n            open_brace = i\n        elif ch == ')':\n            paren_list.append(paren_string[open_brace:i])\n            open_brace = -1\n    return paren_list\n",
        "num_ids": 102
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    paren_list = []\n    string_list = paren_string.split(' ')\n    for string in string_list:\n        if '(' in string:\n            paren_list.append(string[0])\n        if ')' in string:\n            paren_list.append(string[1])\n    return paren_list\n",
        "num_ids": 79
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    paren_list = []\n    if len(paren_string) == 0:\n        return paren_list\n    stack = []\n    for i, ch in enumerate(paren_string):\n        if ch == '(':\n            stack.append(i)\n        elif ch == ')':\n            paren_list.append(paren_string[stack.pop():i + 1])\n    return paren_list\n",
        "num_ids": 97
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    paren_string = ''.join(paren_string.split())\n    result = []\n    parenthesis_open_index = []\n    parenthesis_open = []\n",
        "num_ids": 40
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Make a list of strings and ignore spaces\n    paren_string = paren_string.replace(' ', '')\n    paren_strings = list(paren_string)\n",
        "num_ids": 40
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # string to store the resultant\n    s = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            s.append('(')\n        elif paren_string[i] == ')':\n            if len(s) > 0:\n                s.pop()\n            else:\n                s.append(')')\n    return s\n",
        "num_ids": 96
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return number - math.floor(number)\n",
        "num_ids": 12
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return float(number) - int(number)\n",
        "num_ids": 13
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Decimals are always two places after the decimal point\n    return (number - math.floor(number)) * 10 ** 2\n",
        "num_ids": 31
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return number - math.floor(number)\n",
        "num_ids": 12
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #base = 10\n    # if number < 0:\n    #     return \"Error: negative numbers cannot be truncated\"\n    # if number == 0:\n    #     return \"Error: zero cannot be truncated\"\n    # if number == 1:\n    #     return 1\n    # num = int(number)\n    # remainder = number - num\n    # if num % base == 0:\n    #     return int(remainder)\n    # return int(remainder) + 1\n    # same as above but with no need for num conversion, it's already a list\n    \"\"\"\n    return int(number) if number < 1 else int(number) + 1\n    \"\"\"\n    # base = 10\n    # if number == 0:\n    #     return 0\n    # if number == 1:\n    #     return 1\n    # return base * (number - 1)\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number < 0:\n        return \"Error: negative numbers cannot be truncated\"\n    if number == 1:\n        return 1\n    num = 0\n    while True:\n        if number >= 2:\n            num += 1\n            number -= 1\n        else:\n            break\n    return num\n",
        "num_ids": 295
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if number < 0:\n        number = -number\n",
        "num_ids": 14
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    whole = int(number)\n    fraction = number - whole\n    return whole + fraction\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return number % 1\n",
        "num_ids": 7
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Find the largest integer smaller than given number.\n    int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n",
        "num_ids": 41
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    op = operations\n    balance = 0\n    if op[0] == 1:\n        balance = balance + op[1]\n        if balance < 0:\n            return True\n    for i in range(len(op)-1):\n        if op[i] == 1:\n            balance = balance + op[i+1]\n        elif op[i] == 2:\n            balance = balance - op[i+1]\n    if balance < 0:\n        return True\n    else:\n        return False\n    return balance\n",
        "num_ids": 123
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if operations[0] < 0:\n        for i in range(1, len(operations)):\n            if operations[i] < 0:\n                return True\n            if operations[i] + operations[i-1] < 0:\n                return True\n        return False\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for op in operations:\n        if op < 0:\n            return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total = 0\n    for op in operations:\n        if op >= 0:\n            total += op\n        else:\n            total -= op\n    return total < 0\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(1, len(operations)):\n        if operations[i] < 0:\n            return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance -= operation\n    if balance < 0:\n        return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        else:\n            if balance < 0:\n                return True\n            balance = 0\n    return balance < 0\n",
        "num_ids": 51
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(operations)):\n        if operations[i] < 0:\n            return True\n        else:\n            return False\n",
        "num_ids": 36
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    summ = 0\n    for i in range(len(operations)):\n        summ += operations[i]\n        if summ < 0:\n            return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    cur_balance = 0\n    for op in operations:\n        if op > 0:\n            cur_balance += op\n        else:\n            cur_balance -= op\n    return cur_balance < 0\n",
        "num_ids": 48
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(numbers) < 2:\n        return None\n    else:\n        # Calculate the mean of the list\n        mean = sum(numbers) / len(numbers)\n        # Create a list for the deviation\n        deviation_list = []\n        # Loop over each number in the list\n        for number in numbers:\n            # Calculate the deviation\n            deviation = abs(number - mean)\n            # Add the deviation to the list\n            deviation_list.append(deviation)\n        # Calculate the average deviation\n        return sum(deviation_list) / len(deviation_list)\n",
        "num_ids": 144
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    numbers.sort()\n    n = len(numbers)\n    if n == 0:\n        return 0\n    return sum([abs(numbers[i] - numbers[i-1])/n for i in range(1, n)]) / (n-1)\n",
        "num_ids": 65
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Centerpoint\n    numbers_mean = sum(numbers) / len(numbers)\n",
        "num_ids": 24
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    sum_of_absolute_differences = 0.0\n    mean = sum(numbers) / len(numbers)\n    for num in numbers:\n        sum_of_absolute_differences += abs(num - mean)\n    return sum_of_absolute_differences / len(numbers)\n",
        "num_ids": 71
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return float(sum([abs(x - mean(numbers)) for x in numbers]) / len(numbers))\n    \n",
        "num_ids": 30
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(numbers)\n    if n == 0:\n        raise ValueError(\"Input can't be empty\")\n    mean = sum(numbers) / n\n    abs_deviation = 0\n    for i in range(n):\n        abs_deviation += abs(mean - numbers[i])\n    return abs_deviation / n\n",
        "num_ids": 81
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = len(numbers)\n    if n < 1:\n        return 0.0\n    mean = sum(numbers) / n\n",
        "num_ids": 34
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    m = sum(numbers) / len(numbers)\n    return sum([abs(n - m) for n in numbers]) / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(n - mean) for n in numbers) / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    out: List[int] = []\n    if not numbers:\n        return out\n    i = 0\n    while i < len(numbers):\n        out.append(numbers[i])\n        if i < len(numbers) - 1:\n            out.append(delimeter)\n        i += 1\n    return out",
        "num_ids": 77
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert isinstance(numbers, list) and isinstance(delimeter, int) and delimeter > 0\n    n = len(numbers)\n    result = []\n    if n > 1:\n        result.append(numbers[0])\n        result.append(delimeter)\n        for i in range(1, n):\n            result.append(numbers[i])\n            result.append(delimeter)\n        result.append(numbers[n - 1])\n    return result\n",
        "num_ids": 115
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not numbers:\n        return numbers\n    elif len(numbers) == 1:\n        return numbers\n    else:\n        current_index = 0\n        index = 0\n        while index < len(numbers):\n            current_index += 1\n            if current_index % 2!= 0:\n                numbers.insert(index, delimeter)\n                index += 2\n            else:\n                index += 1\n",
        "num_ids": 98
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Build a list of the same length as `numbers'\n    # The delimeter is the number of items between consecutive elements\n    # of 'numbers'\n    new_list = list(range(0, len(numbers), delimeter))\n    new_list.append(len(numbers))\n    #print(new_list)\n    # Generate the new list of items\n    # Start from 'numbers[0]'\n    new_list.insert(0, numbers[0])\n    #print(new_list)\n    # Append all items between each consecutive element\n    # of 'numbers'\n    for i in range(1, len(numbers)):\n        #print(i)\n        new_list.append(numbers[i])\n        #print(new_list)\n    return new_list\n",
        "num_ids": 193
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not numbers:\n        return []\n    new_numbers = []\n    start = 1\n    while start < len(numbers):\n        new_numbers.append(numbers[start - 1])\n        start += 2\n        if start >= len(numbers):\n            break\n        new_numbers.append(delimeter)\n        start += 1\n        if start >= len(numbers):\n            break\n    new_numbers.append(numbers[-1])\n    return new_numbers\n",
        "num_ids": 120
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Write your code here\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.pop()\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    length = len(numbers)\n    res = []\n    i = 0\n    while i < length:\n        res.append(numbers[i])\n        res.append(delimeter)\n        i += 1\n    return res\n",
        "num_ids": 56
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [delimeter] * (len(numbers) - 1) + numbers + [delimeter]\n",
        "num_ids": 25
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not numbers:\n        return numbers\n    return [delimeter] + intersperse(numbers[:-1], delimeter) + numbers[-1:]\n",
        "num_ids": 38
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert len(numbers) > 0\n    assert delimeter >= 0\n    assert isinstance(delimeter, int)\n    # assert delimeter > 0\n",
        "num_ids": 37
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    nested_parens = paren_string.split(\" \")\n    # first_level = []\n    # for i in nested_parens:\n    #     if i.startswith('('):\n    #         first_level.append(i)\n    #     else:\n    #         if first_level:\n    #             first_level.pop()\n    #     return max(len(first_level), 0)\n    return max([len(i) for i in nested_parens if i.startswith('(')])\n",
        "num_ids": 128
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    paren_list = []\n    for paren in paren_string.split(\" \"):\n        if paren == \"(\":\n            paren_list.append(0)\n        elif paren == \")\":\n            paren_list.pop()\n        else:\n            paren_list.append(paren_list[-1] + 1)\n    return paren_list\n",
        "num_ids": 88
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    string_list = paren_string.split()\n    parens_stack = []\n    parens_level = 0\n    for i in string_list:\n        if i == '(':\n            parens_stack.append(parens_level)\n            parens_level += 1\n        elif i == ')':\n            parens_level -= 1\n            if len(parens_stack) > 0:\n                parens_stack.pop()\n            else:\n                raise ValueError('Expected a valid paranthesis')\n        else:\n            raise ValueError('Expected a valid paranthesis')\n",
        "num_ids": 143
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    paren_stack = []\n    paren_count = 0\n    for paren_string_char in paren_string:\n        if paren_string_char == \"(\":\n            paren_stack.append(paren_count)\n            paren_count += 1\n        elif paren_string_char == \")\":\n            paren_stack.pop()\n            paren_count -= 1\n        else:\n            paren_count += 1\n    return paren_stack\n",
        "num_ids": 108
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    paren_map = {}\n    stack = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            # If the stack is empty, the loop will break and the paren_map will be empty\n            if stack:\n                # Pop the last item in the stack and update the value in paren_map\n                last_paren_index = stack.pop()\n                paren_map[last_paren_index] = i\n    return paren_map.values()\n",
        "num_ids": 133
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    parens = []\n    for p in paren_string.split(' '):\n        parens.append(int(p))\n",
        "num_ids": 32
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # nested_parens = [[]]\n    # for par in paren_string:\n    #     for l in range(len(nested_parens)):\n    #         if par == '(':\n    #             nested_parens.append([])\n    #         elif par == ')':\n    #             if nested_parens[l]!= []:\n    #                 nested_parens[l].pop()\n    #             else:\n    #                 nested_parens.pop(l)\n    #                 break\n    #     if nested_parens[-1] == []:\n    #         nested_parens.pop()\n    # return nested_parens\n",
        "num_ids": 164
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    level = 0\n    paren_list = []\n",
        "num_ids": 13
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            while paren_stack and paren_stack[-1]!= '(':\n                paren_stack.pop()\n            paren_stack.pop()\n        else:\n            continue\n    return len(paren_stack)\n",
        "num_ids": 96
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    paren_levels = 0\n    paren_stack = []\n    parens = []\n    paren_level = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_levels += 1\n            paren_stack.append(paren_levels)\n        elif paren_string[i] == ')':\n            paren_levels -= 1\n            paren_stack.append(paren_levels)\n            if paren_levels == 0:\n                paren_level += 1\n                parens.append(paren_level)\n                paren_level = 0\n    return parens\n",
        "num_ids": 149
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return filter(lambda x: substring in x, strings)\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for item in strings:\n        if substring in item:\n            result.append(item)\n",
        "num_ids": 29
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Filter by substring\n    filtered_list = list(filter(lambda s: substring in s, strings))\n    return filtered_list\n",
        "num_ids": 35
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    substring = substring.strip()\n    substring_len = len(substring)\n    result = []\n    for s in strings:\n        if substring in s[:substring_len]:\n            result.append(s)\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(filter(lambda string: substring in string, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered\n",
        "num_ids": 35
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "num_ids": 18
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sum = 0\n    product = 1\n",
        "num_ids": 11
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # your code here\n    \n    sum = 0\n    product = 1\n    if len(numbers) == 0:\n        return (0, 1)\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)\n",
        "num_ids": 64
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), numbers[0] * numbers[1] * numbers[2] * numbers[3])\n",
        "num_ids": 52
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return (s, p)\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    total, product = 0, 1\n    for number in numbers:\n        total, product = total + number, total * number\n    return (total, product)\n",
        "num_ids": 38
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (sum(numbers), int(numbers[0]) * int(numbers[1]) * int(numbers[2]) * int(numbers[3]))\n",
        "num_ids": 42
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    total = 0\n    product = 1\n    for x in numbers:\n        total += x\n        product *= x\n    return (total, product)\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # def sum_product(numbers):\n    #     return (sum(numbers), prod(numbers))\n",
        "num_ids": 28
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (sum(numbers), sum(n*n for n in numbers))\n",
        "num_ids": 20
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sum = 0\n    product = 1\n    for i in numbers:\n        sum += i\n        product *= i\n    return sum, product\n",
        "num_ids": 35
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    numbers_length = len(numbers)\n    max_list = []\n    for i in range(numbers_length):\n        max_list.append(max(numbers[i:i+1]))\n    return max_list\n",
        "num_ids": 58
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result: List[int] = []\n    # Set up our rolling maximum set\n    maximum: int = numbers[0]\n    current_max: int = numbers[0]\n    # Initialize a rolling maximum counter\n    rolling_max_counter = 0\n    # For each element in the list, compare it with the rolling maximum and update the rolling maximum if needed.\n    for x in numbers:\n        rolling_max_counter += 1\n        if x > current_max:\n            current_max = x\n            maximum = current_max\n        result.append(maximum)\n    # If we didn't roll the maximum yet, keep rolling max and update current max to be the new maximum\n    if rolling_max_counter < len(numbers):\n        maximum = max(result[rolling_max_counter - 1], maximum)\n        result[rolling_max_counter] = maximum\n    return result\n",
        "num_ids": 203
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    maxes = []\n    max_num = max(numbers)\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        else:\n            maxes.append(max_num)\n    return maxes\n",
        "num_ids": 61
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    list_to_return = []\n    if len(numbers) == 0:\n        return list_to_return\n    \n    max_item = numbers[0]\n    list_to_return.append(numbers[0])\n    for item in numbers:\n        max_item = max(max_item, item)\n        list_to_return.append(max_item)\n    return list_to_return\n",
        "num_ids": 99
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code here\n    max_s = numbers[0]\n    ans = []\n    ans.append(numbers[0])\n    for i in range(1, len(numbers)):\n        if max_s > numbers[i]:\n            ans.append(max_s)\n            max_s = numbers[i]\n        else:\n            ans.append(numbers[i])\n            max_s = numbers[i]\n    ans.append(max_s)\n    return ans\n",
        "num_ids": 118
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    maxes = []\n    for i in range(len(numbers)):\n        cur_max = max(numbers[i:i+1])\n        maxes.append(cur_max)\n    return maxes\n",
        "num_ids": 53
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert numbers, \"Empty list passed\"\n",
        "num_ids": 11
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n            continue\n        if numbers[i] > result[i - 1]:\n            result.append(numbers[i])\n        else:\n            result.append(result[i - 1])\n    return result\n",
        "num_ids": 85
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(num, max_num)\n        result.append(max_num)\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = []\n    rolling_max_element = max(numbers)\n",
        "num_ids": 19
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = string\n    for i in range(len(s), 0, -1):\n        if is_palindrome(s[:i]):\n            return s[:i] + s[i:][::-1]\n",
        "num_ids": 55
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    suffix = string\n    for i in reversed(range(len(string))):\n        suffix = suffix[:i] + suffix[i:][::-1]\n        if is_palindrome(suffix):\n            return suffix\n",
        "num_ids": 57
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Length of supplied string\n    length = len(string)\n    # Length of palindrome if supplied string is a palindrome\n    palindrome_length = 0\n",
        "num_ids": 41
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Palindrome is a string with the same length as the original string.\n    # If the input string is longer than the shortest palindrome, return None.\n    if len(string) <= 1:\n        return string\n    # Find the longest palindrome that begins with the supplied string.\n    start, end = 0, len(string)\n    while start < end:\n        substring = string[start:end]\n        # Find the longest prefix that is a palindrome.\n        for i in range(1, len(substring)):\n            if is_palindrome(substring[:i]):\n                start = i\n                break\n        end = start\n    # Reverse the prefix and append to the end of the string.\n    return string[:start] + string[start:][::-1] + string[start:]\n",
        "num_ids": 194
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert string!= ''\n",
        "num_ids": 8
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not string: return None\n",
        "num_ids": 9
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Invert the string, so that we can build the shortest palindrome\n    # from the left, and we can find the palindrome from the right\n    string_inv = string[::-1]\n    # Find the longest suffix and prefix that ends in a palindrome\n    # This is because we will need the prefix to build the palindrome\n    max_suffix = max_prefix_palindrome(string_inv)\n    # Reverse the reversed string and then get the prefix that comes\n    # before the longest suffix\n    palindrome_prefix = string_inv[:max_suffix][::-1]\n    # Return the reverse of the prefix to build the palindrome\n    return palindrome_prefix + string\n",
        "num_ids": 169
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not string:\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        sub_string = string[:i]\n        if is_palindrome(sub_string):\n            return string + sub_string[::-1]\n",
        "num_ids": 66
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # TODO: is this a bad idea?\n    string_length = len(string)\n    if string_length == 0:\n        return ''\n    # find longest postfix of string\n    longest_postfix = find_longest_palindrome(string)\n    # get the string prefix from the end of the string until the palindrome ends\n    string_prefix = string[-string_length + longest_postfix:]\n    # reverse the prefix and join to create a palindrome\n    return string_prefix + string_prefix[::-1]\n",
        "num_ids": 130
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # check if string is a palindrome\n    if not is_palindrome(string):\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"\".join([chr(ord(a) ^ ord(b)) for a, b in zip(a, b)])\n",
        "num_ids": 32
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join(chr(ord(a) ^ ord(b)) for a, b in zip(a, b))\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return ''.join([a_bit ^ b_bit for a_bit, b_bit in zip(list(a), list(b))])\n",
        "num_ids": 35
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = \"\"\n    for i in range(len(a)):\n        if a[i] == \"1\" and b[i] == \"1\":\n            res += \"1\"\n        else:\n            res += \"0\"\n    return res\n",
        "num_ids": 60
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    xor_result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            xor_result = xor_result + '0'\n        else:\n            xor_result = xor_result + '1'\n    return xor_result\n",
        "num_ids": 74
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = \"\"\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = len(a)\n    res = ''\n    for i in range(n):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res\n",
        "num_ids": 47
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return format(int(a, 2) ^ int(b, 2), '08b')\n",
        "num_ids": 23
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(a)!= len(b):\n        raise ValueError('Error: Length of strings must be same.')\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    longest_str = None\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n",
        "num_ids": 39
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "num_ids": 62
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(strings) == 0:\n        return None\n    max_string = strings[0]\n    for string in strings:\n        if len(string) > len(max_string):\n            max_string = string\n    return max_string\n",
        "num_ids": 59
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # if len(strings) == 0:\n    #     return None\n    # return max(strings, key=len)\n",
        "num_ids": 30
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n    result = strings[0]\n    for string in strings:\n        if len(string) > len(result):\n            result = string\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return max(strings, key=len)\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "num_ids": 56
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        longest = strings[0]\n        for item in strings:\n            if len(item) > len(longest):\n                longest = item\n        return longest\n",
        "num_ids": 58
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not strings:\n        return None\n    # Find longest string\n    max_length = 0\n    max_string = strings[0]\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            max_string = string\n    return max_string\n",
        "num_ids": 76
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(strings) == 0:\n        return None\n    length = len(strings[0])\n    longest = strings[0]\n    for string in strings:\n        if len(string) == length:\n            if string > longest:\n                longest = string\n    return longest\n",
        "num_ids": 68
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    while a % b!= 0:\n        a, b = b, a % b\n    return b\n",
        "num_ids": 26
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    while (b!= 0):\n        r = a % b\n        a = b\n        b = r\n    return a\n",
        "num_ids": 31
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return max(a, b)\n",
        "num_ids": 48
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a < b:\n        a, b = b, a\n    while a % b!= 0:\n        a, b = b, a % b\n    return b\n",
        "num_ids": 42
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a < b:\n        a, b = b, a\n    while a % b!= 0:\n        a, b = b, a % b\n    return b\n",
        "num_ids": 42
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    while a!= 0 and b!= 0:\n        if a >= b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n",
        "num_ids": 43
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    while a!= b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    while a % b!= 0:\n        a, b = b, a % b\n    return b\n",
        "num_ids": 26
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    a = abs(a)\n    b = abs(b)\n    while a > 0:\n        a, b = b % a, a\n    return b\n",
        "num_ids": 39
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    prefixes = []\n    if len(string) == 0:\n        return prefixes\n    for index in range(len(string)):\n        prefixes.append(string[:index + 1])\n    return prefixes\n",
        "num_ids": 53
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    result = []\n    for i in range(0,len(string)+1):\n        result.append(string[:i])\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    l = []\n    for i in range(len(string)):\n        l.append(string[:i+1])\n    return l\n",
        "num_ids": 35
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(string) == 0:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    prefixes = []\n    if len(string) == 0:\n        return prefixes\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "num_ids": 53
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    prefix_list = []\n    for i in range(len(string) + 1):\n        prefix_list.append(string[:i])\n    return prefix_list\n",
        "num_ids": 41
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return''.join(f'{i}' for i in range(n + 1))\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n <= 0:\n        return \"0\"\n    return str(i) + \" \" + string_sequence(n - 1)\n",
        "num_ids": 33
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        return \"0\"\n    else:\n        return f\"{n} {string_sequence(n-1)}\"\n",
        "num_ids": 36
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return''.join(f'{i}' for i in range(n+1))\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return''.join(f\"{i}\" for i in range(0, n+1))\n",
        "num_ids": 23
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return''.join(map(str, range(n+1)))\n",
        "num_ids": 17
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert n >= 0, 'n must be >= 0'\n    return''.join(f'{i}' for i in range(n + 1))\n",
        "num_ids": 36
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \" \".join(str(i) for i in range(n+1))\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return''.join(str(i) for i in range(n))\n",
        "num_ids": 18
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    string_chars = []\n    for char in string:\n        if char not in string_chars:\n            string_chars.append(char.lower())\n    return len(string_chars)\n",
        "num_ids": 50
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    counts = {}\n",
        "num_ids": 7
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    characters = set()\n    for character in string:\n        characters.add(character.lower())\n    return len(characters)\n",
        "num_ids": 34
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    characters = set()\n    for char in string:\n        characters.add(char.lower())\n    return len(characters)\n",
        "num_ids": 34
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n",
        "num_ids": 26
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i].isupper()!= string[i].islower():\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    res = []\n    for i in music_string:\n        if i == 'o':\n            res.append(4)\n        elif i == '|':\n            res.append(2)\n        elif i == '.':\n            res.append(1)\n    return res\n",
        "num_ids": 69
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    note_to_length = {'o': 4, 'o|': 2, '.|': 1}\n",
        "num_ids": 26
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    i = 0\n    arr = []\n    while i < len(music_string):\n        if i + 1 <= len(music_string) - 1 and music_string[i] == 'o' and music_string[i + 1] == '|':\n            arr.append(4)\n            i += 2\n            continue\n        if i + 1 <= len(music_string) - 1 and music_string[i] == '.' and music_string[i + 1] == '|':\n            arr.append(2)\n            i += 2\n            continue\n        if i + 1 <= len(music_string) - 1 and music_string[i] == 'o' and music_string[i + 1] == '.':\n            arr.append(1)\n            i += 2\n            continue\n        if i + 1 <= len(music_string) - 1 and music_string[i] == '|' and music_string[i + 1] == '|':\n            arr.append(2)\n            i += 2\n            continue\n        if i + 1 <= len(music_string) - 1 and music_string[i] == '|' and music_string[i + 1] == '.':\n            arr.append(1)\n            i += 2\n            continue\n        i += 1\n    return arr\n",
        "num_ids": 305
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    res = []\n    for i in music_string:\n        if i == 'o' or i == 'o|' or i == '.':\n            res.append(4)\n        elif i == '|':\n            res.append(2)\n        else:\n            res.append(1)\n    return res\n",
        "num_ids": 77
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return list(map(int, music_string.split()))\n",
        "num_ids": 17
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # your code here\n    return []\n",
        "num_ids": 13
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # your code here\n    if len(music_string) == 0:\n        return []\n    beats = 0\n    notes = 0\n    music_string_list = list(music_string)\n    notes_pairs = 0\n    beats_pairs = 0\n    while music_string_list:\n        if music_string_list[0] == 'o':\n            beats += 4\n            music_string_list.pop(0)\n        elif music_string_list[0] == 'o|':\n            beats += 2\n            music_string_list.pop(0)\n        elif music_string_list[0] == '.':\n            beats += 1\n            music_string_list.pop(0)\n        elif music_string_list[0] == '|':\n            beats += 1\n            music_string_list.pop(0)\n        else:\n            return []\n    return [beats, beats]\n",
        "num_ids": 227
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return_list = []\n    for letter in music_string:\n        if letter == 'o':\n            return_list.append(4)\n        elif letter == 'o|':\n            return_list.append(2)\n        elif letter == '.':\n            return_list.append(1)\n    return return_list\n",
        "num_ids": 80
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    notes = list()\n    for i, n in enumerate(music_string):\n        if n == '|':\n            notes.append(2)\n        elif n == '.':\n            notes.append(1)\n        else:\n            notes.append(4)\n    return notes\n",
        "num_ids": 70
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [int(beat) for beat in music_string.split()]\n",
        "num_ids": 19
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(0, len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(string)-len(substring)+1):\n        if substring == string[i:i+len(substring)]:\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if substring == string[i:i+len(substring)]:\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return int(string.count(substring))\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)",
        "num_ids": 44
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(1 for i in range(len(string)-len(substring)+1) if string[i:i+len(substring)] == substring)\n",
        "num_ids": 39
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    string_length = len(string)\n    substring_length = len(substring)\n    for i in range(0, string_length - substring_length + 1):\n        if substring == string[i: i + substring_length]:\n            count += 1\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(string.split(substring)) - 1\n",
        "num_ids": 15
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    occurrences = 0\n    \n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            occurrences += 1\n    \n    return occurrences\n",
        "num_ids": 59
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    length = len(string)\n    sub_length = len(substring)\n    for i in range(length - sub_length + 1):\n        if substring == string[i:i+sub_length]:\n            count += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i] == substring[0] and string[i + len(substring) - 1] == substring[-1]:\n            count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    num_list = numbers.split(' ')\n    sorted_nums = []\n    for num in num_list:\n        if num == 'zero':\n            sorted_nums.append(0)\n        elif num == 'one':\n            sorted_nums.append(1)\n        elif num == 'two':\n            sorted_nums.append(2)\n        elif num == 'three':\n            sorted_nums.append(3)\n        elif num == 'four':\n            sorted_nums.append(4)\n        elif num == 'five':\n            sorted_nums.append(5)\n        elif num =='six':\n            sorted_nums.append(6)\n        elif num =='seven':\n            sorted_nums.append(7)\n        elif num == 'eight':\n            sorted_nums.append(8)\n        elif num == 'nine':\n            sorted_nums.append(9)\n    return \" \".join(str(n) for n in sorted_nums)\n",
        "num_ids": 259
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    numbers_list = numbers.split()\n    numbers_list.sort(key=int)\n    numbers_list =''.join(numbers_list)\n    return numbers_list\n",
        "num_ids": 46
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    nums = list(map(int, numbers.split()))\n    nums.sort()\n    return''.join(str(num) for num in nums)\n",
        "num_ids": 40
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    numbers_list = numbers.split()\n    numbers_list.sort()\n    for i in range(len(numbers_list)):\n        numbers_list[i] = str(numbers_list[i])\n    numbers =''.join(numbers_list)\n    return numbers\n",
        "num_ids": 72
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #numbers = numbers.split()\n    #num_list = numbers.split()\n    #print(numbers)\n    #print(num_list)\n    #print(type(num_list))\n    #num_list = []\n    #num_list = list(numbers)\n    #print(num_list)\n    #num_list = numbers.split()\n    #print(num_list)\n    #print(type(num_list))\n    num_list = numbers.split()\n    print(num_list)\n    #print(num_list)\n    #print(type(num_list))\n    for i in range(len(num_list)):\n        num_list[i] = int(num_list[i])\n    #print(num_list)\n    #print(type(num_list))\n    #num_list = list(numbers)\n    #print(num_list)\n    #print(type(num_list))\n    print(\"\\n\" + \"*\"*100)\n    #print(num_list)\n    num_list.sort()\n    #print(num_list)\n    #print(type(num_list))\n    print(\"\\n\" + \"*\"*100)\n    #print(num_list)\n    print(type(num_list))\n    print(num_list)\n    #print(num_list)\n    #print(type(num_list))\n    print(num_list)\n    print(\"\\n\" + \"*\"*100)\n    #print(num_list)\n    #print(type(num_list))\n    #print(num_list)\n    for i in range(len(num_list)):\n        num_list[i] = str(num_list[i])\n    #print(num_list)\n    #print(type(num_list))\n    num_str =''.join(num_list)\n    #print(num_str)\n    #print(type(num_str))\n    return num_str\n",
        "num_ids": 484
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    number_to_value = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    \n    return''.join(sorted(numbers.split(), key=lambda x: number_to_value[x]))\n",
        "num_ids": 88
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    nums = [int(x) for x in numbers.split()]\n    for i in range(len(nums)):\n        min_val = nums[i]\n        min_idx = i\n        for j in range(i+1,len(nums)):\n            if nums[j] < min_val:\n                min_val = nums[j]\n                min_idx = j\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n    return''.join([str(x) for x in nums])\n",
        "num_ids": 145
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    numbers = numbers.split()\n    numbers.sort()\n    sorted_numbers = ''\n    for num in numbers:\n        sorted_numbers += num\n    return sorted_numbers\n",
        "num_ids": 49
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = ''\n    for num in numbers:\n        if num == 'zero':\n            result += 'zero '\n        if num == 'one':\n            result += 'one '\n        if num == 'two':\n            result += 'two '\n        if num == 'three':\n            result += 'three '\n        if num == 'four':\n            result += 'four '\n        if num == 'five':\n            result += 'five '\n        if num =='six':\n            result +='six '\n        if num =='seven':\n            result +='seven '\n        if num == 'eight':\n            result += 'eight '\n        if num == 'nine':\n            result += 'nine '\n    return result\n",
        "num_ids": 167
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    numbers = numbers.split()\n    numbers = list(map(int, numbers))\n    numbers.sort()\n    return''.join(map(str, numbers))\n",
        "num_ids": 42
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    difference = float('inf')\n    first_index = -1\n    second_index = -1\n    for i, x in enumerate(numbers):\n        if x - numbers[first_index] < difference:\n            difference = x - numbers[first_index]\n            second_index = first_index\n            first_index = i\n    return numbers[first_index], numbers[second_index]\n",
        "num_ids": 97
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sorted_numbers = sorted(numbers)\n",
        "num_ids": 14
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    diff = numbers[1] - numbers[0]\n    for index in range(2, len(numbers)):\n        diff = min(diff, abs(numbers[index] - numbers[index - 1]))\n    return (numbers[0], numbers[index - 1])\n",
        "num_ids": 67
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    min_value = numbers[0]\n    min_index = 0\n    max_value = numbers[0]\n    max_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] < min_value:\n            min_value = numbers[i]\n            min_index = i\n        elif numbers[i] > max_value:\n            max_value = numbers[i]\n            max_index = i\n",
        "num_ids": 109
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    first_number, second_number = sorted(numbers, reverse=True)\n    if abs(first_number - second_number) > abs(first_number - numbers[1]):\n        return numbers[0], numbers[1]\n    else:\n        return numbers[1], numbers[0]\n",
        "num_ids": 71
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n1 = numbers[0]\n    n2 = numbers[1]\n    n3 = numbers[2]\n    n4 = numbers[3]\n    n5 = numbers[4]\n    n6 = numbers[5]\n",
        "num_ids": 55
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    min_num, min_index = numbers[0], 0\n    for i, n in enumerate(numbers):\n        if n < min_num:\n            min_num, min_index = n, i\n",
        "num_ids": 51
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    smallest = numbers[0]\n    biggest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        elif num > biggest:\n            biggest = num\n    return (smallest, biggest)\n",
        "num_ids": 62
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # The absolute values of the numbers\n    numbers = abs(numbers)\n",
        "num_ids": 20
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return min(numbers), max(numbers)\n",
        "num_ids": 14
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_numbers = []\n    for num in numbers:\n        rescaled_numbers.append((num - min_num) / (max_num - min_num))\n    return rescaled_numbers\n",
        "num_ids": 75
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [(float(x) - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]\n",
        "num_ids": 33
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    numbers.sort()\n    min_num = numbers[0]\n    max_num = numbers[-1]\n    rescaled_list = []\n    for num in numbers:\n        rescaled_list.append((num - min_num) / (max_num - min_num))\n    return rescaled_list\n",
        "num_ids": 78
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    min_num = numbers[0]\n    max_num = numbers[0]\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    min_num = min_num - 0.0001 if min_num - 0.0001 < 0 else min_num\n    max_num = max_num + 0.0001 if max_num + 0.0001 > 1 else max_num\n    result = []\n    for num in numbers:\n        result.append((num - min_num) / (max_num - min_num))\n    return result\n",
        "num_ids": 152
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    min_val, max_val = min(numbers), max(numbers)\n    result = []\n    for num in numbers:\n        rescaled_num = (num - min_val) / (max_val - min_val)\n        result.append(rescaled_num)\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(numbers) <= 2:\n        return numbers\n    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled = []\n    for i in numbers:\n        rescaled.append(i - min_num)\n        rescaled.append(i - min_num)\n    rescaled.append(1 - min_num)\n    rescaled.append(1 - min_num)\n    return rescaled\n",
        "num_ids": 113
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # TODO: complete this function\n    assert numbers, 'You must pass at least 2 numbers'\n    \n    assert len(numbers) >= 2, 'You must pass at least 2 numbers'\n    \n    max_ = max(numbers)\n    min_ = min(numbers)\n    \n    diff = max_ - min_\n    \n    assert diff, 'You must pass at least 2 numbers'\n    \n    for index in range(len(numbers)):\n        numbers[index] = (numbers[index] - min_) / diff\n    \n    return numbers\n    \n    \ndef normalize(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list\n    such that the sum of the elements will become 1.0\n    >>> normalize([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.1, 0.4, 0.7, 1.0, 1.0]\n    \"\"\"\n    # TODO: complete this function\n    assert numbers, 'You must pass at least 2 numbers'\n    assert len(numbers) >= 2, 'You must pass at least 2 numbers'\n    \n    max_ = max(numbers)\n    min_ = min(numbers)\n    \n    diff = max_ - min_\n    \n    assert diff, 'You must pass at least 2 numbers'\n    \n    for index in range(len(numbers)):\n        numbers[index] = (numbers[index] - min_) / diff\n    \n    numbers[-1] = 1.0 - sum(numbers[:-1])\n    \n    return numbers\n",
        "num_ids": 400
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    scale_factor = 1.0 / (max(numbers) - min(numbers))\n    # Scale the data.\n    for i, num in enumerate(numbers):\n        numbers[i] *= scale_factor\n    # Return the scaled list.\n    return numbers\n",
        "num_ids": 67
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # extract the smallest and largest numbers\n    min_value = min(numbers)\n    max_value = max(numbers)\n    # rescale the values\n    numbers = [(value - min_value) / (max_value - min_value) for value in numbers]\n    return numbers\n",
        "num_ids": 70
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max_number = max(numbers)\n    min_number = min(numbers)\n    if max_number == min_number:\n        return [0.0] * len(numbers)\n    else:\n        return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
        "num_ids": 77
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # return list(filter(lambda x: isinstance(x, int), values))\n    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 40
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: type(x) == int, values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    filtered_values = []\n",
        "num_ids": 11
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    for value in values:\n        if type(value) == int:\n            result.append(value)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(filter(is_integer, values))\n",
        "num_ids": 14
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [int(item) for item in values if isinstance(item, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(string)\n    \ndef center(string: str, n: int) -> str:\n    \"\"\" Return a centered string of n characters\n    >>> center('abc', 7)\n    'abc   '\n    >>> center('abc', 10)\n    '    abc'\n    \"\"\"\n    return (n - strlen(string)) // 2 *'' + string\n    \ndef count_letters(string: str) -> int:\n    \"\"\" Count number of letters in string\n    >>> count_letters('')\n    0\n    >>> count_letters('abc')\n    3\n    \"\"\"\n    return sum(map(str.isalpha, string))\n    \ndef print_letters(string: str) -> None:\n    \"\"\" Prints letters in string one per line\n    >>> print_letters('')\n    \n    >>> print_letters('abc')\n    a\n    b\n    c\n    \n    \"\"\"\n    for i, letter in enumerate(string):\n        print(letter)\n        \ndef strip(string: str) -> str:\n    \"\"\" Return string with leading and trailing whitespace removed\n    >>> strip('')\n    ''\n    >>> strip('   ')\n    ''\n    >>> strip('abc')\n    'abc'\n    \"\"\"\n    return string.strip()\n    \ndef rstrip(string: str) -> str:\n    \"\"\" Return string with leading whitespace removed\n    >>> rstrip('')\n    ''\n    >>> rstrip('   ')\n    ''\n    >>> rstrip('   abc')\n    '   abc'\n    \"\"\"\n    return string.rstrip()\n    \ndef lstrip(string: str) -> str:\n    \"\"\" Return string with trailing whitespace removed\n    >>> lstrip('')\n    ''\n    >>> lstrip('   ')\n    '   '\n    >>> lstrip('   abc')\n    '   abc'\n    \"\"\"\n    return string.lstrip()\n    \ndef upper(string: str) -> str:\n    \"\"\" Return string with all lowercase letters converted to uppercase\n    >>> upper('abc')\n    'ABC'\n    \"\"\"\n    return string.upper()\n    \ndef lower(string: str) -> str:\n    \"\"\" Return string with all uppercase letters converted to lowercase\n    >>> lower('ABC')\n    'abc'\n    \"\"\"\n    return string.lower()\n    \ndef capitalize(string: str) -> str:\n    \"\"\" Return first character of string capitalized\n    >>> capitalize('abc')\n    'Abc'\n    >>> capitalize('abc123')\n    'Abc123'\n    \"\"\"\n    return string.capitalize()\n    \ndef replace(string: str, sub: str, with: str) -> str:\n    \"\"\" Return a copy of string with sub string replaced with with string\n    >>> replace('abc', 'a', 'A')\n    'Abc'\n    \"\"\"\n    return string.replace(sub, with)\n    \ndef replace_case(string: str, sub: str, with: str) -> str:\n    \"\"\" Return a copy of string with sub string replaced with with string\n    >>> replace_case('abc', 'a', 'A')\n    'Abc'\n    >>> replace_case('abc', 'b', 'B')\n    'Abc'\n    >>> replace_case('abc', 'a', 'A')\n    'Abc'\n    >>> replace_case('abc', 'A', 'A')\n    'Abc'\n    >>> replace_case('abc', 'A', 'A')\n    'Abc'\n    >>> replace_case('abc', 'A', 'A')\n    'Abc'\n    >>> replace_case('abc', 'A', 'A')\n    'Abc'\n    \"\"\"\n    return string.replace(sub, with)\n    \ndef translate(string: str, table: dict) -> str:\n    \"\"\" Return a copy of string, translating characters in table\n    >>> translate('abc', {})\n    'abc'\n    >>> translate('hello', {'h': 'H', 'e': 'E'})\n    'HeLLo'\n    \"\"\"\n    return string.translate(table)\n    \ndef join(string: str, glue: str = '') -> str:\n    \"\"\" Return a copy of string, with all the characters in string joined\n    >>> join('')\n    ''\n    >>> join('abc')\n    'abc'\n    >>> join('abc', '--')\n",
        "num_ids": 1023
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    d = 1\n    while n%d!= 0:\n        d += 1\n    return d\n",
        "num_ids": 25
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    i = 1\n    while i*i < n:\n        i += 1\n    return i\n",
        "num_ids": 24
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n    return n\n",
        "num_ids": 45
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return n - 1\n",
        "num_ids": 7
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n > 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            return i\n",
        "num_ids": 33
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    divisors = []\n    for i in range(1,n+1):\n        if n%i==0:\n            divisors.append(i)\n    return max(divisors)\n",
        "num_ids": 49
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    divisor = n\n    while n % divisor > 0:\n        divisor -= 1\n    return divisor\n",
        "num_ids": 32
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        n -= 1\n    if n == 1:\n        return 1\n    while n!= 0:\n        n = n // 2\n        if n == 1:\n            return 1\n    return n\n",
        "num_ids": 56
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for x in range(n, 0, -1):\n        if n % x == 0:\n            return x\n",
        "num_ids": 28
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    \n    i = 1\n    while n % i == 0:\n        i = i * 2\n",
        "num_ids": 35
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    factors = []\n    if n > 1:\n        for i in range(2, n+1):\n            while n % i == 0:\n                factors.append(i)\n                n /= i\n    return factors\n",
        "num_ids": 55
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    primes = []\n    while n > 1:\n        for i in range(2, n+1):\n            if n % i == 0:\n                count += 1\n                n = n//i\n                break\n        else:\n            primes.append(n)\n            break\n    return primes",
        "num_ids": 76
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    factors = []\n    if n == 1:\n        return [1]\n    else:\n        for i in range(2, n+1):\n            if n % i == 0:\n                factors.append(i)\n                factors.append(n//i)\n    return factors\n",
        "num_ids": 70
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    primes = []\n    divisors = set()\n    while n % 2 == 0:\n        primes.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            divisors.add(i)\n            n //= i\n    if n!= 1:\n        primes.append(n)\n    return primes\n",
        "num_ids": 108
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    factor = []\n    while n % 2 == 0:\n        factor.append(2)\n        n = n // 2\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            factor.append(i)\n            n = n // i\n        i = i + 2\n    if n > 2:\n        factor.append(n)\n    return factor\n",
        "num_ids": 94
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = abs(n)\n    if n in [0, 1]:\n        return []\n",
        "num_ids": 23
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n = n / i\n            i = 2\n        else:\n            i += 1\n    factors.append(n)\n    factors.sort()\n    return factors\n",
        "num_ids": 78
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    import math\n",
        "num_ids": 5
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    factors = []\n    for factor in range(1,n+1):\n        while n%factor==0:\n            n = n//factor\n            factors.append(factor)\n    return factors\n",
        "num_ids": 49
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    factors = []\n    if n == 1:\n        return factors\n    divisor = 2\n    while divisor*divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    # loop ends here\n    if n > 1:\n        factors.append(n)\n    # print(factors)\n    return factors\n",
        "num_ids": 113
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n",
        "num_ids": 45
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(list(set(numbers)))\n",
        "num_ids": 13
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    seen = []\n    for n in numbers:\n        if n not in seen:\n            seen.append(n)\n    return seen\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    unique_list = []\n    for number in numbers:\n        if number not in unique_list:\n            unique_list.append(number)\n    return unique_list\n",
        "num_ids": 41
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    seen = set()\n    return list(seen.add(i) or i for i in numbers)\n",
        "num_ids": 25
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    unique = []\n    for number in numbers:\n        if number not in unique:\n            unique.append(number)\n    return unique\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Make a copy of the input list.\n    numbers_copy = numbers.copy()\n    \n    # Loop through each element and keep a count of how many of each element\n    # we've seen so far.\n    seen_counts = {}\n    for number in numbers_copy:\n        if number in seen_counts:\n            seen_counts[number] += 1\n        else:\n            seen_counts[number] = 1\n",
        "num_ids": 104
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    new = []\n    for i in numbers:\n        if i not in new:\n            new.append(i)\n    return new\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    duplicates = []\n    for num in numbers:\n        if num in duplicates:\n            continue\n        else:\n            duplicates.append(num)\n    return duplicates\n",
        "num_ids": 45
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    seen = {}\n    output = []\n    for num in numbers:\n        if num not in seen:\n            seen[num] = True\n            output.append(num)\n    return output\n",
        "num_ids": 46
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return ''.join(x.upper() if x.islower() else x.lower() for x in string)\n",
        "num_ids": 28
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([c.upper() if c.islower() else c.lower() for c in string])\n",
        "num_ids": 28
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n",
        "num_ids": 53
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n",
        "num_ids": 20
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # First of all we need to convert each string into a list of letters\n    # Then we need to convert each letter into a list of digits\n    # We need to convert each digit into a list of characters (in this case it is space)\n    # and concatenate them\n    return \"\".join([str(chars) for chars in zip(*strings)])\n",
        "num_ids": 83
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # return ''.join(strings)\n    return ''.join([x for x in strings])\n",
        "num_ids": 24
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n",
        "num_ids": 20
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Write your code here.\n    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 27
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    filtered = []\n    for word in strings:\n        if word.startswith(prefix):\n            filtered.append(word)\n    return filtered\n",
        "num_ids": 38
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n",
        "num_ids": 38
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    output = []\n    for s in strings:\n        if s.startswith(prefix):\n            output.append(s)\n    return output\n",
        "num_ids": 36
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [x for x in l if x >= 0]\n    \ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([2, -4, 5, 6])\n    [-4, -5, -6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -9, -123, -1]\n    \"\"\"\n    return [x for x in l if x < 0]\n",
        "num_ids": 133
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [i for i in l if i >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # return list(filter(lambda x: x > 0, l))\n    return list(filter(lambda x: x > 0, l))\n",
        "num_ids": 34
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [i for i in l if i > 0]\n    \n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: x > 0, l))\n    \n",
        "num_ids": 19
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [i for i in l if i >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(n**0.5) + 1,2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert n >= 2, 'n has to be greater than 1'\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n < 2:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n%i == 0:\n                return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 80
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # ensure that xs is a list of coefficients of a polynomial\n    assert all(x == 0 or i % 2 == 0 for i, x in enumerate(xs))\n    # remove any zero coefficients\n    xs = list(filter(lambda x: x!= 0, xs))\n    # if xs is empty return None\n    if len(xs) == 0:\n        return None\n    # sort xs such that xs[0] is largest.\n    # we need to sort this because find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    xs.sort(reverse=True)\n    # if xs has only one element,\n    # there is only one solution, so return this solution\n    if len(xs) == 1:\n        return xs[0]\n    # else, we use binary search to find the zero point.\n    # use the find_zero_rec function\n    return find_zero_rec(xs)\n",
        "num_ids": 236
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # 1. Search for root in the interval (-1, 0). If a zero is found,\n    # we return the value, if not we return -1.\n    # 2. Continue searching in the interval (-1, 0).\n    # 3. If there is a zero after the search in the interval (-1, 0),\n    # we return it.\n    # 4. If there is no zero after the search, then we return -1.\n    low, high = -1, 0\n    while low + 1 < high:\n        mid = (low + high) // 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) < 0:\n            high = mid\n        else:\n            low = mid\n    return -1\n",
        "num_ids": 179
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    xs = xs[::-1]\n    x = 0\n    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            break\n        x += 1\n    return x\n",
        "num_ids": 51
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(len(xs)):\n        if i % 2 == 0:\n            continue\n        if poly(xs, -1) == 0:\n            return -1.0\n",
        "num_ids": 45
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i, coeff in enumerate(xs):\n        if i!= 0 and i % 2 == 0 and coeff!= 0:\n            # xs is not a simple polynomial.\n            return None\n        if i!= 0 and i % 2!= 0 and coeff!= 0:\n            # xs is not a simple polynomial.\n            return None\n    # xs is a simple polynomial.\n    return find_nonzero(xs)\n",
        "num_ids": 111
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return find_zero_using_bisec(xs)\n",
        "num_ids": 15
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    xs = list(xs)\n    if not xs or xs[0] == 0:\n        return 0\n    x = 0\n    if xs[0] > 0:\n        return x\n    while x < 1:\n        x = x + 1\n        for i in range(1, len(xs), 2):\n            x = x + xs[i] / xs[i - 1]\n        if xs[0] / xs[1] == x:\n            return x\n    return None\n",
        "num_ids": 121
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert len(xs) % 2 == 0, \"Cannot find a zero of a polynomial with odd coefficients.\"\n",
        "num_ids": 28
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            return i / coeff\n    return None\n",
        "num_ids": 34
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(xs) % 2 == 0:\n        return None\n    return poly(xs, 1) / poly(xs[:-1], 1)\n",
        "num_ids": 36
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not l:\n        return []\n    \n    l1 = l[:]\n    l2 = l[:]\n    \n    l2.sort()\n    \n    i = 0\n    j = 0\n    \n    while i < len(l1):\n        if j < len(l2) and l1[i] % 3 == 0:\n            l1[i] = l2[j]\n            j += 1\n        i += 1\n    \n    return l1\n",
        "num_ids": 113
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l1 = []\n    l2 = []\n    for i in l:\n        if (i % 3) == 0:\n            l2.append(i)\n        else:\n            l1.append(i)\n    for i in sorted(l1):\n        l2.append(i)\n    return l2\n",
        "num_ids": 77
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l_3 = []\n    for i in range(len(l)):\n        if not i % 3:\n            l_3.append(l[i])\n    l_3.sort()\n    for i in range(len(l_3)):\n        l[i] = l_3[i]\n",
        "num_ids": 75
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l_p = []\n    l_s = []\n    for i in range(len(l)):\n        if (i + 1) % 3!= 0:\n            l_p.append(l[i])\n        else:\n            l_s.append(l[i])\n    l_p.sort()\n    l_s.sort()\n    l_p.extend(l_s)\n    return l_p\n",
        "num_ids": 104
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    new = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            continue\n        new.append(l[i])\n    for i in range(len(l)):\n        if i % 3 == 0:\n            continue\n        new.append(l[i])\n    return new\n",
        "num_ids": 78
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #create empty l'\n    l_sorted = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_sorted.append(l[i])\n    l_sorted.sort()\n    for i in range(len(l_sorted)):\n        if i % 3 == 0:\n            l.append(l_sorted[i])\n    return l\n",
        "num_ids": 100
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l_new = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_new.append(l[i])\n    l_new = sorted(l_new)\n    l_new2 = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_new2.append(l_new[i])\n    l_new2 = sorted(l_new2)\n    return l_new2\n",
        "num_ids": 120
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    l_copy = copy.deepcopy(l)\n    n = len(l)\n    for i in range(n):\n        if i % 3 == 0:\n            continue\n        l[i] = l_copy[i]\n    l.sort()\n    for i in range(n):\n        if i % 3 == 0:\n            continue\n        l_copy[i] = l[i]\n    return l\n",
        "num_ids": 100
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted([i for i in l if i % 3!= 0]) + sorted([i for i in l if i % 3 == 0])\n",
        "num_ids": 34
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sorted_list = []\n    for i in range(0, len(l), 3):\n        sorted_list.append(l[i])\n    return sorted_list\n",
        "num_ids": 43
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    lst = []\n    for x in l:\n        if x not in lst:\n            lst.append(x)\n    return lst\n",
        "num_ids": 37
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(l) < 2:\n        return l\n    seen = set()\n    return [x for x in l if not (x in seen or seen.add(x))]\n",
        "num_ids": 44
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert isinstance(l, list), \"l must be a list\"\n    return sorted(set(l))\n",
        "num_ids": 27
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    largest = l[0]\n    for item in l:\n        if item > largest:\n            largest = item\n    return largest\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return max(l)\n    #pass\n",
        "num_ids": 12
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    max_value = 0\n    for i in l:\n        if i > max_value:\n            max_value = i\n    return max_value\n",
        "num_ids": 37
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if l:\n        l[0] = max(l[0], l[-1])\n        return max(l)\n    else:\n        return None\n",
        "num_ids": 39
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    mx = l[0]\n    for i in range(len(l)):\n        if l[i] > mx:\n            mx = l[i]\n    return mx\n",
        "num_ids": 45
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    max_int = l[0]\n    for i in l:\n        if i > max_int:\n            max_int = i\n    return max_int\n",
        "num_ids": 40
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert isinstance(l, list)\n    max_value = 0\n    for i in l:\n        if i > max_value:\n            max_value = i\n    return max_value\n",
        "num_ids": 47
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max_val = l[0]\n    for x in l:\n        if x > max_val:\n            max_val = x\n    return max_val\n",
        "num_ids": 40
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    c = 0\n    for i in range(1, n):\n        if i % 11 == 7 or i % 13 == 7:\n            c += 1\n    return c\n",
        "num_ids": 41
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n % 3 == 0 and n % 5 == 0:\n        return 1\n    elif n % 5 == 0:\n        return fizz_buzz(n//5)\n    elif n % 3 == 0:\n        return fizz_buzz(n//3)\n    else:\n        return 0\n",
        "num_ids": 74
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    counter = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0 or i % 13 == 0:\n            counter += 1\n    return counter\n",
        "num_ids": 43
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for x in range(1, n):\n        if x % 11 == 7 or x % 13 == 7:\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n        else:\n            continue\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    cnt = 0\n    for i in range(1, n + 1):\n        if i % 11 == 7 or i % 13 == 7:\n            cnt += 1\n    return cnt\n",
        "num_ids": 46
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1,n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            if i % 11 == 0:\n                count += 1\n            if i % 13 == 0:\n                count += 1\n    return count\n    ",
        "num_ids": 67
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(1,n):\n        if (i % 11 == 0 or i % 13 == 0) and i % 7 == 0:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return fizz_count(n) + buzz_count(n) + fizzbuzz_count(n)\n",
        "num_ids": 28
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not isinstance(n, int):\n        raise TypeError('n must be an int')\n    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 7 or i % 13 == 7:\n            count += 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not l:\n        return l\n    else:\n        i = 0\n        while i < len(l):\n            if l[i] % 2 == 0:\n                i += 1\n            else:\n                l.insert(i, l.pop(i+1))\n                break\n    return l\n",
        "num_ids": 73
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(l, key=lambda x: x % 2 == 0)\n",
        "num_ids": 19
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l_ = []\n    for i in range(len(l)):\n        if i % 2 == 1:\n            l_.append(l[i])\n    for i in range(len(l_)):\n        for j in range(len(l)):\n            if l_[i] < l[j]:\n                l_[i], l[j] = l[j], l_[i]\n    return l_\n",
        "num_ids": 102
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l.sort()\n    if len(l) == 0:\n        return []\n    even_indices = range(0, len(l), 2)\n    for i, e in enumerate(even_indices):\n        l[e], l[e+1] = l[e+1], l[e]\n    return l\n",
        "num_ids": 80
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    l_even = l.copy()\n    l_even.sort()\n    return l_even\n",
        "num_ids": 25
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    l_even = []\n    l_odd = []\n    for i in range(0, len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n        else:\n            l_odd.append(l[i])\n    l_even.sort()\n    l_odd.sort()\n    return l_even + l_odd\n",
        "num_ids": 92
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(l) == 1:\n        return l\n    else:\n        low = 0\n        mid = 0\n        high = len(l)-1\n        while mid <= high:\n            if l[mid] % 2 == 0:\n                l[low], l[mid] = l[mid], l[low]\n                low += 1\n                mid += 1\n            else:\n                mid += 1\n        while low <= high:\n            if l[low] % 2 == 0:\n                low += 1\n            else:\n                l[low], l[high] = l[high], l[low]\n                high -= 1\n        return l\n",
        "num_ids": 151
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    l_e = []\n    l_o = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_e.append(l[i])\n        else:\n            l_o.append(l[i])\n    l_o = sorted(l_o)\n    for j in range(len(l_o)):\n        l[j] = l_e[j]\n        l[j+len(l_o)] = l_o[j]\n",
        "num_ids": 122
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    new_list = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            new_list.append(l[i])\n    for i in range(len(l)):\n        if i % 2 == 1:\n            new_list.append(l[i])\n    return new_list\n",
        "num_ids": 80
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    even = []\n    odd = []\n",
        "num_ids": 11
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # reverse cyclic string.\n    groups = s.split(\"00\")\n    # reverse each group.\n    groups = [\"\".join(reversed(group)) for group in groups]\n    # merge groups and return.\n    return \"\".join(groups)\n",
        "num_ids": 62
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    return \"\".join([group[0] if len(group) == 3 else group for group in groups])",
        "num_ids": 51
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "num_ids": 107
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # take cyclic groups from encoded string.\n    groups = s.split(\"\").join(\"\")\n    # cycle groups.\n    groups = groups[::-1]\n    # un-cycle groups.\n    groups = [groups[i:i + 3] for i in range(0, len(groups), 3)]\n    # decode groups.\n    return \"\".join(groups)\n",
        "num_ids": 89
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    groups = []\n    for i in range((len(s) + 2) // 3):\n        group = s[(3 * i):min((3 * i + 3), len(s))]\n        if len(group) < 3:\n            group = (group * (3 - len(group)) + group[:3])\n        groups.append(group)\n    return \"\".join(groups)\n",
        "num_ids": 94
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # get string length\n    str_len = len(s)\n    # if length is not divisible by 3, then it is not encoded\n    if str_len % 3!= 0:\n        return s\n    # calculate number of groups\n    num_groups = str_len // 3\n    # create list with equal number of elements as input string\n    groups = [s[(3 * i):min((3 * i + 3), str_len)] for i in range(num_groups)]\n    # cycle each group\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # concat groups to create decoded string\n    return \"\".join(groups)\n",
        "num_ids": 168
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 91
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return encode_cyclic(s)[::-1]\n",
        "num_ids": 15
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = len(s) // 3\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    return \"\".join([groups[i][1] + groups[i][0] for i in range(n)])\n",
        "num_ids": 65
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    groups = s.split(\".\")\n    decoded = \"\"\n    # walk groups by 3 and cycle groups\n    for i in range(len(groups)):\n        group = groups[i]\n        if len(group) == 3:\n            decoded += group[0] + group[1] + group[2]\n        else:\n            # pad group to 3 if too short\n            decoded += group[0] + group[1] + (3 - len(group)) * \".\"\n    return decoded\n",
        "num_ids": 119
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    a, b = 0, 1\n    while a < n:\n        c = a + b\n        if c > n:\n            return c\n        a, b = b, c\n",
        "num_ids": 44
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n < 3:\n        return 1\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n",
        "num_ids": 38
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert n >= 0\n",
        "num_ids": 7
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return 2\n    return prime_fib(n-1) + prime_fib(n-2)\n",
        "num_ids": 34
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert is_prime(n)\n    if n == 1:\n        return 2\n    fib = fibonacci(n-1)\n    return fib + fib\n",
        "num_ids": 40
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    a, b = 2, 3\n    for i in range(n):\n        a, b = b, a + b\n    return b\n",
        "num_ids": 34
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "num_ids": 74
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        a = 2\n        b = 3\n        c = 5\n        i = 0\n        while i < n:\n            if a%c!= 0 and b%c!= 0 and c%c!= 0:\n                return c\n            a = a*10 + b\n            b = b*10 + c\n            c = c*10 + b\n            i += 1\n",
        "num_ids": 115
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    FIB = {1,2,3,5}\n    for i in range(6,n):\n        FIB.add(i)\n        if i == 2:\n            FIB.add(1)\n        elif i%2==0:\n            FIB.add(1)\n        else:\n            FIB.add(i)\n    return FIB.pop()\n",
        "num_ids": 91
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return (prime_fib(n-1) + prime_fib(n-2)) % 10\n    \ndef prime_fib_list(n: int):\n    \"\"\"\n    prime_fib_list returns list of n-th numbers that are Fibonacci numbers and they're also prime.\n    >>> prime_fib_list(1)\n    [2]\n    >>> prime_fib_list(2)\n    [3, 5]\n    >>> prime_fib_list(3)\n    [5, 13]\n    >>> prime_fib_list(4)\n    [13, 89]\n    >>> prime_fib_list(5)\n    [89, 233]\n    \"\"\"\n    if n == 1:\n        return [2]\n    else:\n        return prime_fib_list(n-1) + prime_fib_list(n-2)\n    ",
        "num_ids": 238
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    l = l.copy()\n    l.sort()\n    for i in range(len(l) - 1):\n        if l[i] == 0:\n            continue\n        for j in range(i + 1, len(l)):\n            if l[j] == 0:\n                continue\n            for k in range(j + 1, len(l)):\n                if l[k] == 0:\n                    continue\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 128
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(l) == 0:\n        return False\n    seen = set()\n    for i in l:\n        if i in seen:\n            return False\n        seen.add(i)\n    for i in l:\n        for j in l:\n            if i + j == 0:\n                return True\n    return False\n",
        "num_ids": 78
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(l)):\n        if(l[i] == 0):\n            if(i!= 0):\n                for j in range(i + 1, len(l)):\n                    if(l[j] == 0):\n                        for k in range(j + 1, len(l)):\n                            if(l[k] == 0):\n                                return True\n    return False\n",
        "num_ids": 95
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    seen = set()\n    for i in l:\n        for j in range(i):\n            if i - j in seen:\n                return True\n            else:\n                seen.add(i)\n",
        "num_ids": 48
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(set(l)) == 3",
        "num_ids": 11
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # n = len(l)\n    # if n < 3:\n    #     return False\n    # else:\n    #     for i in range(n - 2):\n    #         for j in range(i+1, n - 1):\n    #             for k in range(j+1, n):\n    #                 if (l[i] + l[j] + l[k]) == 0:\n    #                     return True\n    #     return False\n    # \n    # print(l)\n    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        else:\n            seen.add(i)\n    return False\n",
        "num_ids": 161
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(len(l)-2):\n        for j in range(i+1,len(l)-1):\n            for k in range(j+1,len(l)):\n                if l[i]+l[j]+l[k]==0:\n                    return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    lookup = {}\n    for num in l:\n        if (0 - num) in lookup:\n            return True\n        lookup[num] = True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    d = {}\n    for i in range(len(l)):\n        if l[i] in d:\n            d[l[i]] += 1\n        else:\n            d[l[i]] = 1\n",
        "num_ids": 52
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            if l[i] + l[j] == 0:\n                for k in range(j+1, len(l)):\n                    if l[i] + l[k] + l[j] == 0:\n                        return True\n    return False\n",
        "num_ids": 104
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Base case\n    if n < 2:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # set n to the maximum number of cars that will run at once, assuming the cars are\n    # perfectly straight in motion.\n    n = max(n,1)\n",
        "num_ids": 40
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n_cars = n\n    n_collisions = 0\n",
        "num_ids": 16
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n    return\n",
        "num_ids": 10
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (\n        (n * (n - 1)) >> 1 + (n * (n - 2)) + (n * (n - 3)) + (n * (n - 4)) + (n * (n - 5)) +\n        (n * (n - 6)) + (n * (n - 7)) + (n * (n - 8)) + (n * (n - 9)) + (n * (n - 10))\n        )\n",
        "num_ids": 103
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # basic math\n    n = int(n)\n",
        "num_ids": 14
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n_cars = n\n    cars = list(range(n_cars))\n    distance = 0\n    while cars:\n        distance += 1\n        cars_copy = cars[:]\n        for i in range(len(cars)):\n            cars[i] = (cars[i] + 1) % n_cars\n            if cars[i] == cars_copy[i]:\n                return distance\n    return distance\n",
        "num_ids": 97
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Figure out the length of one half of the cars\n    # (the \"length\" of the first car)\n    cars_len = 1\n",
        "num_ids": 34
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # Create a dictionary to keep track of cars' positions\n    car_dict = {}\n    for car_i in range(1, n+1):\n        car_dict[car_i] = 0\n    \n    # Increment the count for each car until it goes out of range\n    for car_i in range(1, n+1):\n        car_dict[car_i] += 1\n        if car_dict[car_i] >= (n * 2):\n            return car_i - 1\n        \n",
        "num_ids": 122
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert n >= 2\n    if n == 2:\n        return 0\n    n = n - 2\n    n_cars_in_first_loop = 2\n    n_cars_in_second_loop = 1\n    while n_cars_in_first_loop <= n:\n        n_cars_in_second_loop = 1\n        while n_cars_in_second_loop <= n:\n            n_cars_in_first_loop = 2\n            n_cars_in_second_loop += 2\n        n_cars_in_second_loop -= 1\n    return 1\n",
        "num_ids": 137
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = len(l)\n    for i in range(n):\n        l[i] += 1\n    return l\n",
        "num_ids": 30
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return l + [i + 1 for i in l]\n",
        "num_ids": 15
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(map(lambda x: x + 1, l))\n",
        "num_ids": 17
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    res = []\n    for i in l:\n        res.append(i+1)\n    return res\n",
        "num_ids": 27
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert l, 'empty list'\n",
        "num_ids": 10
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(l)\n    for i in range(n):\n        l[i] += 1\n    return l\n",
        "num_ids": 30
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    count = 0\n    new_l = []\n    for i in l:\n        count += 1\n        new_l.append(i + 1)\n",
        "num_ids": 39
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return l[:]\n",
        "num_ids": 7
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(l)-1, -1, -1):\n        l[i] += 1\n    return l\n",
        "num_ids": 32
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return l[:]\n",
        "num_ids": 7
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(l) == 0:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 66
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    for i in range(len(l)):\n        if sum_of_two_numbers_to_zero(l, i, l[i]) == True:\n            return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sums = {}\n    for element in l:\n        if -element in sums:\n            return True\n        else:\n            sums[element] = None\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for num1 in l:\n        for num2 in l:\n            if num1 + num2 == 0 and num1!= num2:\n                return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(l)\n    if n < 2:\n        return False\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (l[i] + l[j]) == 0:\n                return True\n    return False\n",
        "num_ids": 68
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    #loop through every element of the list and check if the sum of the pair is equal to zero\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 74
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # You can write this function in one line.\n    # Your solution needs to be return True or False,\n    # but it will not be graded.\n    return len(l) == 0 or any(sum(i) == 0 for i in combinations(l, 2))\n",
        "num_ids": 63
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sum = 0\n    num_pairs = 0\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i!= j:\n                sum = l[i] + l[j]\n                if sum == 0:\n                    num_pairs += 1\n                    if num_pairs > 1:\n                        return False\n                    else:\n                        return True\n            else:\n                continue\n",
        "num_ids": 103
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(l) < 2:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    res = \"\"\n    while x > 0:\n        x, rem = divmod(x, base)\n        res += str(rem)\n    return res[::-1]\n",
        "num_ids": 43
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if base < 10:\n        raise ValueError\n    remainder = x\n    res = \"\"\n    while remainder >= base:\n        div, remainder = divmod(remainder, base)\n        res = str(div) + res\n    return res\n",
        "num_ids": 61
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return change_base_helper(x, base)\n",
        "num_ids": 15
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n",
        "num_ids": 39
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if base <= 0:\n        raise ValueError('invalid base number')\n    output = ''\n    x_in_base = 0\n    if x >= 10:\n        x_in_base = x // base\n        output += str(x_in_base)\n        x = x % base\n    while x >= base:\n        x_in_base = x // base\n        output += str(x_in_base)\n        x = x % base\n    output += str(x)\n    return output\n",
        "num_ids": 119
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not base < 10:\n        raise ValueError\n    base_dict = {2:'abc', 3:'def', 4:'ghi', 5:'jkl', 6:'mno', 7:'pqrs', 8:'tuv', 9:'wxyz'}\n    if x < 10:\n        return x\n    x_dict = {10:'a', 11:'b', 12:'c', 13:'d', 14:'e', 15:'f', 16:'g', 17:'h', 18:'i', 19:'j', 20:'k', 21:'l', 22:'m', 23:'n', 24:'o', 25:'p', 26:'q', 27:'r', 28:'s', 29:'t', 30:'u', 31:'v', 32:'w', 33:'x', 34:'y', 35:'z'}\n    x_list = list(str(x))\n    x_list_reverse = x_list[::-1]\n    x_str = ''\n    for i in x_list_reverse:\n        x_str += x_dict[int(i)]\n    return x_str\n",
        "num_ids": 251
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if base > 10:\n        return \"Base must be less than 10.\"\n    result = \"\"\n    while x >= base:\n        x, remainder = divmod(x, base)\n        result = str(remainder) + result\n    return str(x) + result\n",
        "num_ids": 65
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if base < 10:\n        raise ValueError('base must be greater than 10')\n    # \"digits_to_str(str(x), base):\", num = str(x), base = base\n    return digits_to_str(str(x), base)\n    \n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)",
        "num_ids": 96
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return (h * (a * a) / 2)\n",
        "num_ids": 15
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    area = a * h / 2\n    return area\n    \n",
        "num_ids": 16
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (a * h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return a*h/2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return a*h/2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Write your code here\n    return (a*h)/2\n",
        "num_ids": 17
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    area = (a*h)/2\n    return area\n",
        "num_ids": 15
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 86
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be >= 0.\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 81
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # def fib4(n):\n    #     if n <= 1:\n    #         return n\n    #     return fib4(n - 1) + fib4(n - 2)\n",
        "num_ids": 45
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 3:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 50
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 54
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def fib4_iterative(n):\n        if n <= 1:\n            return 0\n        a, b, res = 0, 0, 0\n        while a + b < n:\n            a, b, res = b, res, b + res\n        return res\n    return fib4_iterative(n)\n",
        "num_ids": 75
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 1\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "num_ids": 86
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 74
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 86
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert n >= 0\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 1\n    if n == 3: return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 77
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    l.sort()\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length//2-1] + l[length//2])/2\n    else:\n        return l[length//2]\n",
        "num_ids": 58
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert len(l) > 0, \"Can't find median of empty list\"\n    if len(l) == 1:\n        return l[0]\n    else:\n        l.sort()\n        mid = len(l) // 2\n        if len(l) % 2 == 1:\n            return l[mid]\n        else:\n            return (l[mid] + l[mid-1]) / 2\n",
        "num_ids": 97
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l.sort()\n    n = len(l)\n    if n%2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2] + l[n//2 - 1]) / 2\n",
        "num_ids": 58
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(l) == 0:\n        return None\n    sorted_l = sorted(l)\n    mid = int(len(sorted_l) / 2)\n    if len(sorted_l) % 2:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid] + sorted_l[mid-1]) / 2.0\n",
        "num_ids": 92
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = len(l)\n    return sorted(l)[n//2]",
        "num_ids": 19
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(l)[len(l) // 2]\n",
        "num_ids": 15
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return statistics.median(l)\n",
        "num_ids": 11
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    l.sort()\n    return l[int(len(l) / 2)]\n",
        "num_ids": 21
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return l[len(l) // 2 - 1] + l[len(l) // 2]\n    return l[len(l) // 2]\n",
        "num_ids": 55
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(l) == 0:\n        return 0\n    l.sort()\n    middle = len(l) // 2\n    return (l[middle] + l[~middle]) / 2\n",
        "num_ids": 47
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not text:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # for each pair, if the second char is the first char then \n    # return True\n    if len(text) <= 1:\n        return True\n",
        "num_ids": 37
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(text) < 2:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n",
        "num_ids": 45
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return True if text == text[::-1] else False\n",
        "num_ids": 16
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(text) <= 1:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n",
        "num_ids": 45
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #initalize the \"backwards\" var, set to the first char, and set it to \"string\"\n    backwards = text[-1::-1]\n    #then, compare the two \"strings\", if they're equal, return True, otherwise false\n    return text == backwards\n",
        "num_ids": 67
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return text == reverse(text)\n",
        "num_ids": 10
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(text) < 2:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n",
        "num_ids": 48
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return text == text[::-1]\n    \n    \ndef is_palindrome_alternative(text: str):\n    \"\"\"\n    Returns True if given string is a palindrome\n    >>> is_palindrome_alternative('')\n    True\n    >>> is_palindrome_alternative('aba')\n    True\n    >>> is_palindrome_alternative('aaaaa')\n    True\n    >>> is_palindrome_alternative('zbcd')\n    False\n    \"\"\"\n    for i in range(0, len(text) // 2):\n        if text[i]!= text[len(text) - i - 1]:\n            return False\n    return True\n",
        "num_ids": 163
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n < 0:\n        n = p - n\n    return pow(n, p - 2, p)\n",
        "num_ids": 28
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Generates modulo using xor\n    def xor(a: int, b: int) -> int:\n        if a == 0:\n            return b\n        else:\n            return a ^ b\n",
        "num_ids": 49
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # This assumes n >= 0\n    if n < 0:\n        n += p\n    return pow(n, p - 2, p)\n",
        "num_ids": 34
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n > 0:\n        return (n % p)\n    else:\n        return (n * -1 % p)\n",
        "num_ids": 31
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ((n % p) * p) % p\n",
        "num_ids": 14
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # we can use power() instead, but I wanted to test more\n    return pow(n, p-1, p)\n",
        "num_ids": 30
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return encode_shift(s)\n",
        "num_ids": 10
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join([chr((ord(ch) - 5 + ord(\"a\")) % 26 + ord(\"a\")) for ch in s])\n",
        "num_ids": 34
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    new_text = \"\"\n    for letter in text:\n        if letter.lower() not in 'aeiou':\n            new_text += letter\n    return new_text\n",
        "num_ids": 42
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    vowels = \"aeiou\"\n    string_list = []\n    for letter in text:\n        if letter in vowels:\n            letter = ''\n        string_list.append(letter)\n    return \"\".join(string_list)\n",
        "num_ids": 60
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n",
        "num_ids": 31
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    vowels = \"aeiou\"\n    new_text = \"\"\n    for i in text:\n        if i not in vowels:\n            new_text = new_text + i\n    return new_text\n",
        "num_ids": 52
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return ''.join([c for c in text if c not in 'aeiouAEIOU'])\n",
        "num_ids": 26
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    vowels = 'aeiouAEIOU'\n    text = text.lower()\n    for i in range(0, len(text)):\n        if text[i] not in vowels:\n            text = text.replace(text[i], '')\n    return text\n",
        "num_ids": 67
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = \"\"\n    for i in text:\n        if i.lower() not in 'aeiou':\n            result += i\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    vowels = set(['a','e','i','o','u','A','E','I','O','U'])\n    new_text = ''\n    for i in text:\n        if i.lower() in vowels:\n            new_text += 'X'\n        else:\n            new_text += i\n    return new_text\n",
        "num_ids": 82
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    text = list(text)\n    new_text = []\n    for char in text:\n        if char not in \"aeiouAEIOU\":\n            new_text.append(char)\n    new_text = \"\".join(new_text)\n    return new_text\n",
        "num_ids": 67
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for vowel in 'aeiouAEIOU':\n        text = text.replace(vowel, '')\n    return text\n",
        "num_ids": 32
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return all(n < t for n in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len([number for number in l if number < t]) == 0\n",
        "num_ids": 18
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return all(num < t for num in l)\n    #return all(num < t for num in l)\n",
        "num_ids": 28
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for num in l:\n        if num < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for x in l:\n        if x < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for c0, c1 in zip(s0, s1):\n        if c0!= c1:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s0 = s0.lower()\n    s1 = s1.lower()\n    for ch0, ch1 in zip(s0, s1):\n        if ch0 == ch1:\n            return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    chars = set(s0)\n    if len(chars)!= len(s0):\n        return False\n    for c in chars:\n        if s0.count(c)!= s1.count(c):\n            return False\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return set(s0) == set(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert s0 and s1, 'These are empty strings!'\n    return set(s0) == set(s1)\n",
        "num_ids": 30
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if s0 == s1:\n        return True\n    elif len(s0)!= len(s1):\n        return False\n    else:\n        for i in range(len(s0)):\n            if s0[i]!= s1[i]:\n                return False\n        return True\n",
        "num_ids": 73
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s0 = s0.lower()\n    s1 = s1.lower()\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n < 1:\n        raise ValueError('n < 1')\n    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 49
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 28
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 3:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 1:\n        raise ValueError(\"Input value must be positive!\")\n    f = [0,1]\n    for i in range(2,n+1):\n        f.append(f[i-1] + f[i-2])\n    return f[n]\n",
        "num_ids": 69
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
        "num_ids": 43
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n in (1, 0):\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 35
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 2:\n        return n\n    return fib(n-2) + fib(n-1)\n",
        "num_ids": 28
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0: return 0\n    elif n == 1: return 1\n    else: return fib(n - 2) + fib(n - 1)\n",
        "num_ids": 38
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert n >= 0\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 34
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    stack = []\n    brackets = list(brackets)\n    for i in range(len(brackets)):\n        bracket = brackets[i]\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\":\n            if not stack:\n                return False\n            elif stack.pop()!= \">\":\n                return False\n    if stack:\n        return False\n    else:\n        return True\n",
        "num_ids": 106
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # O(n^2) time | O(n) space\n    bracket_dict = {')': '(', ']': '[', '>': '<'}\n    # create a stack\n    brackets = list(brackets)\n    bracket_stack = []\n    for bracket in brackets:\n        if bracket in bracket_dict:\n            bracket_stack.append(bracket)\n        elif bracket_dict[bracket_stack.pop()]!= bracket:\n            return False\n    return len(bracket_stack) == 0\n",
        "num_ids": 129
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count_open = 0\n    count_close = 0\n    for char in brackets:\n        if char == \"<\":\n            count_open += 1\n        if char == \">\":\n            count_close += 1\n        if count_close > count_open:\n            return False\n    return count_close == count_open\n",
        "num_ids": 76
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    opening, closing = brackets.split()\n    # Write your code here.\n    opening_stack = []\n    closing_stack = []\n    for bracket in brackets:\n        if bracket == opening:\n            if len(opening_stack) == 0:\n                return False\n            opening_stack.pop()\n        else:\n            opening_stack.append(bracket)\n            if len(closing_stack) == 0:\n                return False\n            if closing_stack.pop()!= opening:\n                return False\n    return len(opening_stack) == 0\n",
        "num_ids": 132
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    bracketing = []\n    for char in brackets:\n        if char == \"<\":\n            if len(bracketing) > 0 and bracketing[-1] == \">\":\n                bracketing.pop()\n            else:\n                return False\n        else:\n            bracketing.append(char)\n",
        "num_ids": 74
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert brackets[0] == \"<\" and brackets[-1] == \">\"\n    brackets = brackets[1:-1]\n    brackets = sorted(brackets)\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\">\")\n        elif bracket == \">\":\n            if stack == []:\n                return False\n            stack.pop()\n        else:\n            raise Exception(\"Unsupported bracket\")\n    return True\n",
        "num_ids": 111
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    opening_brackets = [\"<\"]\n    closing_brackets = [\">\"]\n    brackets = list(brackets)\n",
        "num_ids": 32
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len(brackets) % 2 == 1\n",
        "num_ids": 13
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            n_brackets += 1\n        elif brackets[i] == \">\":\n            n_brackets -= 1\n        else:\n            continue\n        if n_brackets < 0:\n            return False\n    return True\n",
        "num_ids": 85
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \">\":\n            count += 1\n    return count == len(brackets)//2\n",
        "num_ids": 38
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    prev = l[0]\n    for i in range(1, len(l)):\n        if l[i] < prev:\n            return False\n        prev = l[i]\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return all(x<=y for x, y in zip(l, l[1:])) and all(x>=y for x, y in zip(l, l[1:]))\n",
        "num_ids": 45
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert l, \"List cannot be empty\"\n    m = len(l)\n    if m < 2:\n        return True\n    \n    if l[m-1] <= l[0]:\n        return False\n    \n    i = 1\n    while i < m:\n        if l[i] < l[i-1]:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 92
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not l:\n        return False\n    if l[0] > l[1]:\n        return False\n    if l[-1] > l[-2]:\n        return False\n    for i in range(1, len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n",
        "num_ids": 83
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] < l[i+1]:\n            continue\n        elif l[i] > l[i+1]:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    i = 0\n    while i + 1 < len(l):\n        if l[i] < l[i+1]:\n            i += 1\n        else:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    i = 1\n    while i < len(l):\n        if l[i] < l[i-1]:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Check list length\n    assert len(l) >= 2, \"list is empty\"\n    \n    # initialize previous, current, and next\n    previous, current, next = l[0], l[0], None\n",
        "num_ids": 52
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(l) == 0:\n        return True\n    mono = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            mono = False\n            break\n        if l[i] < l[i + 1]:\n            mono = True\n    return mono\n",
        "num_ids": 82
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n",
        "num_ids": 55
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    common_l = []\n",
        "num_ids": 8
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    c = []\n    a = set(l1)\n    b = set(l2)\n",
        "num_ids": 24
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    return sorted(list(set(l1) & set(l2)))\n",
        "num_ids": 21
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    l1, l2 = set(l1), set(l2)\n    return sorted(list(l1 & l2))\n",
        "num_ids": 32
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l1_dict = {}\n    l2_dict = {}\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(set(l1).intersection(set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return i\n        return n\n",
        "num_ids": 44
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    max_prime_factor = 1\n    prime = 2\n    while n % prime!= 0:\n        prime += 1\n    max_prime_factor = max(max_prime_factor, prime)\n    return max_prime_factor\n",
        "num_ids": 56
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    max_factor = 2\n    while n % max_factor!= 0:\n        max_factor += 1\n    return max_factor\n",
        "num_ids": 33
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert n > 1\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors[-1]\n",
        "num_ids": 50
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for factor in range(2, n + 1):\n        if n % factor == 0:\n            return factor\n",
        "num_ids": 27
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return i\n",
        "num_ids": 51
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    primes = prime_factor(n)\n    if len(primes) == 2:\n        return primes[0]\n    else:\n        return primes[0]\n",
        "num_ids": 43
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    while n % 2 == 0:\n        n = n / 2\n    max_factor = 1\n    while n % 2 == 0:\n        n = n / 2\n        if n == 2:\n            return 2\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n = n / i\n            if i == 2:\n                if max_factor < i:\n                    max_factor = i\n            if i > max_factor:\n                max_factor = i\n    return max_factor\n",
        "num_ids": 133
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return i\n",
        "num_ids": 43
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 1\n    else:\n        max_factor = 1\n        for i in range(2, n):\n            if n % i == 0:\n                if i!= n:\n                    max_factor = i\n                else:\n                    max_factor = i\n                break\n        return max_factor\n",
        "num_ids": 78
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code here\n    sum = 0\n    for num in range(1, n + 1):\n        sum += num\n    return sum\n",
        "num_ids": 34
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return n*(n+1)/2\n",
        "num_ids": 12
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # This solution is essentially a for loop with a counter.\n    # It is essentially the same as the fibonacci sequence, but the code is shorter and more readable.\n    \"\"\"\n    a = 1\n    b = 1\n    for i in range(2, n):\n        c = a + b\n        a = b\n        b = c\n    return c\n    \"\"\"\n    # This solution is more concise, but the code is more complex, so I prefer the above solution.\n    # The second for loop is much more complex, but I will explain it in the comments below.\n    \"\"\"\n    return sum([a + b for a in range(1, n) for b in range(a + 1, n)])\n",
        "num_ids": 164
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    total = 0\n    for i in range(n + 1):\n        total += i\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # print(n, \"to\", n+1)\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n        # print(i, \"to\", i+1, \"=\", sum)\n    return sum\n",
        "num_ids": 63
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = 0\n    for i in range(n + 1):\n        result += i\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    closing_brackets = []\n    opening_brackets = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            opening_brackets.append(bracket)\n        elif bracket == \")\":\n            if len(opening_brackets) == 0:\n                return False\n            closing_brackets.append(bracket)\n            opening_brackets.pop()\n    if len(opening_brackets)!= 0:\n        return False\n    for bracket in closing_brackets:\n        if bracket!= \")\":\n            return False\n    return True\n",
        "num_ids": 136
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    while brackets:\n        top = brackets[0]\n        if top == \"(\":\n            if \")\" not in brackets:\n                return False\n            brackets = brackets[brackets.index(\")\")+1:]\n        elif top == \")\":\n            brackets = brackets[brackets.index(\"(\")+1:]\n        else:\n            return False\n    return True\n",
        "num_ids": 89
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    brackets = brackets.replace(\" \", \"\")\n",
        "num_ids": 22
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket in \"([{\":\n            stack.append(bracket)\n        elif bracket in \")]}\":\n            if len(stack) == 0:\n                return False\n            if stack[-1] == \"(\":\n                stack.pop()\n                continue\n            elif stack[-1] == \"[\":\n                stack.pop()\n                continue\n            elif stack[-1] == \"{\":\n                stack.pop()\n                continue\n    return len(stack) == 0\n",
        "num_ids": 126
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    brackets = brackets.replace(\"(\", \" ( \").replace(\")\", \" ) \")\n    brackets = brackets.split()\n    i = 0\n    while i < len(brackets):\n        if i >= len(brackets):\n            return True\n        j = i + 1\n        while j < len(brackets) and brackets[j]!= \")\":\n            j += 1\n        if j >= len(brackets):\n            return False\n        if brackets[i]!= \")\":\n            return False\n        i = j\n    return True\n",
        "num_ids": 133
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # TODO: implement this function\n    bracket_set = []\n    while len(brackets) > 0:\n        bracket_set.append(brackets[0])\n        brackets = brackets[1:]\n    for i in bracket_set:\n        if i == \"(\":\n            if bracket_set[bracket_set.index(i)-1]!= \")\":\n                return False\n        else:\n            if bracket_set[bracket_set.index(i)-1] == \")\":\n                return False\n    return True\n",
        "num_ids": 129
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    open_bracket_cnt = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            open_bracket_cnt += 1\n        if brackets[i] == \")\":\n            open_bracket_cnt -= 1\n        if open_bracket_cnt < 0:\n            return False\n    return open_bracket_cnt == 0\n",
        "num_ids": 97
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    open_count = 0\n    for c in brackets:\n        if c == \"(\":\n            open_count += 1\n        elif c == \")\":\n            open_count -= 1\n        if open_count < 0:\n            return False\n",
        "num_ids": 58
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "num_ids": 56
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Brackets are balanced, so just check for brackets\n    if brackets == \"\":\n        return True\n",
        "num_ids": 25
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # TODO: YOUR CODE HERE (FINISH THIS FUNCTION)\n    return [derivative_helper(xs, i) for i in range(len(xs) - 1)]\n",
        "num_ids": 45
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    d = []\n    for i in range(1, len(xs)):\n        d.append(xs[i] * i)\n",
        "num_ids": 33
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [i*(xs[1] + xs[0] * xs[1]) for i, xs in enumerate(xs[1:])]\n",
        "num_ids": 39
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # your code here\n    result = []\n    for i in range(len(xs) - 1):\n        result.append(i * xs[i + 1])\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    der = []\n    if len(xs) == 0:\n        return der\n    if len(xs) == 1:\n        return [1, 0]\n    der.append(xs[0] + xs[1] * 2)\n    for i in range(2, len(xs)):\n        der.append(xs[i] + xs[i] * xs[i] + xs[i] * (2 * xs[i - 1] + xs[i - 2]))\n    return der\n",
        "num_ids": 123
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    deriv = []\n    for i in range(1, len(xs)):\n        deriv.append(xs[i]*(i+1))\n    return deriv\n",
        "num_ids": 42
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    xs_len = len(xs)\n    ans = []\n    for i in range(xs_len - 1):\n        ans.append(xs[i + 1] + i * xs[i + 1] * xs[i])\n    return ans\n",
        "num_ids": 61
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    res = [0] * len(xs)\n    for i in range(len(xs)):\n        res[i] = i * xs[i]\n    return res\n",
        "num_ids": 43
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [i * (i + 1) for i in xs[1:]]\n",
        "num_ids": 21
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    new = []\n    for i in range(1, len(xs)):\n        new.append(xs[i] * i)\n    return new\n",
        "num_ids": 37
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2)\n",
        "num_ids": 36
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    fib = []\n    for i in range(n):\n        if i == 0 or i == 1:\n            fib.append(i)\n        else:\n            fib.append(fib[i-1] + fib[i-2])\n    return fib[-1]\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2)\n",
        "num_ids": 40
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be non-negative.\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2,n+1):\n            c = a + b\n            a, b = b, c\n        return b\n",
        "num_ids": 103
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n < 1:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2)\n",
        "num_ids": 54
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2)\n",
        "num_ids": 36
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a = fibfib(n-1)\n    b = fibfib(n-2)\n    return a + b\n",
        "num_ids": 53
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    vowels = \"aeiouy\"\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    vowels = \"aeiou\"\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # replace the line below with your code\n    return s.count(\"a\") + s.count(\"e\") + s.count(\"i\") + s.count(\"o\") + s.count(\"u\")\n",
        "num_ids": 48
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len([i for i in s if i in \"aeiouy\"])\n",
        "num_ids": 21
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = 0\n",
        "num_ids": 6
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    vowels = 0\n    for i in s:\n        if i in \"aeiou\":\n            vowels += 1\n    return vowels\n",
        "num_ids": 37
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    vowels = \"aeiou\"\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in s:\n        if i in \"aeiou\":\n            count += 1\n        elif i == \"y\" and count > 0:\n            count -= 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vowels = \"aeiouy\"\n    cnt = 0\n    for i in s:\n        if i in vowels:\n            cnt += 1\n    return cnt\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[shift:] + x[:shift]\n",
        "num_ids": 44
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if shift > len(x):\n        shift = -len(x)\n    return x[shift:] + x[:shift]\n",
        "num_ids": 32
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return x[shift:] + x[:shift] if shift <= len(x) else x[-shift:] + x[:-shift]\n",
        "num_ids": 33
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Separate digits and place in list\n    list = []\n    for x in range(1,len(str(x))+1):\n        list.append(int(str(x)[-1]))\n    # Shift digits\n    for i in range(shift):\n        list.append(list.pop(0))\n    # Rebuild digits in reverse order\n    for i in range(len(list)-1):\n        list.insert(0, list.pop())\n    return str(list[0])\n",
        "num_ids": 119
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return str(int(x) << shift)\n",
        "num_ids": 13
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # return int(int_to_str(x) + int_to_str(shift)[::-1])\n    return int_to_str(x)[shift:] + int_to_str(x)[:shift]\n",
        "num_ids": 53
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return x[shift:] + x[:shift]",
        "num_ids": 13
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join([x[shift % len(x)] for x in reversed(x)])\n",
        "num_ids": 24
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return int(str(x)[shift:] + str(x)[:shift])\n",
        "num_ids": 20
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x[shift:] + x[:shift]\n",
        "num_ids": 14
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # return sum([ord(i) for i in s if i.isupper()])\n    return sum(map(ord, s))\n",
        "num_ids": 33
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([ord(x) for x in s if ord(x) <= ord('9')])\n",
        "num_ids": 25
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n = 0\n    for i in s:\n        n += ord(i)\n    return n\n",
        "num_ids": 25
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum(ord(c) for c in s if c.isnumeric())\n",
        "num_ids": 21
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = 0\n    for c in s:\n        if ord(c) >= 65 and ord(c) <= 90:\n            res += ord(c) - 64\n    return res",
        "num_ids": 43
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum(ord(i) for i in s.upper() if i.isalpha())\n",
        "num_ids": 23
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sum = 0\n    for i in s:\n        sum += ord(i)\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    sum = 0\n    for i in range(len(s)):\n        sum += ord(s[i])\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum([ord(i) for i in s.upper()])\n",
        "num_ids": 18
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Solution - 1\n    return sum([ord(i) for i in s.upper() if ord(i) <= 57])\n    # Solution - 2\n    # return sum([ord(i) for i in s.upper() if ord(i) <= 90])\n",
        "num_ids": 62
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sum_fruits = 0\n    i = 0\n    apples = s.count('a')\n    oranges = s.count('o')\n    mangos = s.count('m')\n",
        "num_ids": 48
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    apples, oranges = s.split()\n    apples, oranges = int(apples), int(oranges)\n    mangos = apples - oranges\n    return str(mangos)\n",
        "num_ids": 47
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    ans = 0\n    for x in range(0,n+1):\n        if s.count('apple') == x:\n            ans = ans + x\n        elif s.count('orange') == x:\n            ans = ans + x\n        elif s.count('mango') == x:\n            ans = ans + x\n    return ans\n",
        "num_ids": 83
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n ==0:\n        return 0\n    else:\n        return n - s.count('0') - s.count('1')\n    ",
        "num_ids": 35
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = 0\n    if s == \"0 apples and 1 oranges\":\n        return 2\n    for i in range(len(s)):\n        if s[i] == \"1\":\n            result += int(s[i - 1])\n        if s[i] == \"0\":\n            result += int(s[i - 1])\n    return result\n    \nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\",3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\",120))\n",
        "num_ids": 150
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return n-s.count(\"o\")-s.count(\"a\")\n",
        "num_ids": 19
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if (n == 0):\n        return 0\n    elif (n == s):\n        return 1\n    else:\n        return fruit_distribution(s,n-s) + fruit_distribution(s,n)\n",
        "num_ids": 54
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    else:\n        a = s.split()\n        b = int(a[0]) + int(a[1])\n        return b - n - int(a[2])\n    \n",
        "num_ids": 56
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n_apples = int(s.split()[0])\n    n_oranges = int(s.split()[1])\n    mango_apples_n = n_apples - (n_oranges - n)\n    if mango_apples_n < 0:\n        mango_apples_n = 0\n    return mango_apples_n",
        "num_ids": 87
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    fruits_mango = 0\n    for i in range(n):\n        if s[i] == \"apples\":\n            fruits_mango += 1\n        elif s[i] == \"oranges\":\n            fruits_mango += 2\n    \n    for j in range(n, len(s)):\n        if s[j] == \"apples\":\n            fruits_mango += 1\n        elif s[j] == \"oranges\":\n            fruits_mango += 2\n    \n    return fruits_mango\n        \nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\",3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\",120))\nprint(fruit_distribution(\"1 apples and 100 oranges\",500))\n",
        "num_ids": 214
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Time: O(n)\n    # Space: O(n)\n    # Note: This is not optimal, but it works.\n",
        "num_ids": 33
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if arr == None or len(arr) == 0:\n        return None\n",
        "num_ids": 19
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Q: What if we want to get the last element in the tree\n    #    We can use the idea of binary search for this.\n    #    Assume all the values in the tree are in non-decreasing order.\n    #    Then we can sort the array, and we can run a binary search on the array.\n    #    The key of this is that we want to return the element with the smallest even value.\n    #    So we use a counter, and then we can check if it's even.\n    #    If it's not even, we need to find the smallest value in the array.\n    #    If it's even, we need to find the index of the smallest value.\n    #    Assume we have a tree, and have a list of nodes in ascending order,\n    #    So we can use binary search to find the smallest value.\n    #    We can do this using the two pointers,\n    #    left_index is the smallest value in the array,\n    #    and right_index is the smallest value in the array,\n    #    until they cross.\n    #    Once they cross, we should check if the value of left_index is even.\n    #    If it is, we need to check if the value of right_index is even.\n    #    If it's not, we can use the two pointers to find the smallest value.\n    #\n    #\n    # NOTE: We can try using the value of root's right_child to find the smallest value.\n    #    But it should be noted that the array is always sorted.\n    #    So we don't have to use this value.\n",
        "num_ids": 371
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not arr:\n        return []\n    arr = sorted(arr)\n",
        "num_ids": 19
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Solution \n    #     if arr == None or len(arr) == 0:\n    #         return []\n",
        "num_ids": 28
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def find_min_even(arr):\n        \"\"\"\n        Finds the smallest even number in an array, returns -1 if not found\n        \"\"\"\n        if not arr: return -1\n        # get even numbers\n        even_nums = []\n        for e in arr:\n            if e % 2 == 0: even_nums.append(e)\n        if not even_nums: return -1\n        # find smallest even number\n        min_even = min(even_nums)\n        return min_even\n    \n    # sort array in descending order\n    arr.sort(key=lambda x: x)\n    # find smallest even number in array\n    return find_min_even(arr)\n",
        "num_ids": 165
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Sort the array by value\n    #         find the smallest even value\n    #         find its index\n    #         return the value and the index\n    #         \n    # Time: O(nlogn)\n    # Space: O(1)\n    arr = sorted([x for x in arr if x % 2 == 0])\n    if len(arr) > 0:\n        return [arr[0], arr[0].index]\n    return []\n",
        "num_ids": 104
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not arr:\n        return []\n    arr = sorted(arr, key=lambda x: x % 2, reverse=True)\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            return [node, i]\n    return [arr[0], 0]\n",
        "num_ids": 71
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not arr:\n        return []\n    res = []\n    min_val = float('inf')\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            res = [arr[i], i]\n            min_val = arr[i]\n    return res\n",
        "num_ids": 84
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #find the number of occurrences of the max element\n    max = lst[0]\n    maxcount = 1\n    for i in lst:\n        if i > max:\n            max = i\n            maxcount = 1\n        elif i == max:\n            maxcount += 1\n    return max if maxcount >= 2 else -1\n",
        "num_ids": 80
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 1\n    n = len(lst)\n    if n == 0:\n        return -1\n    for i in range(n):\n        if lst[i] > 0:\n            count *= lst[i]\n    for i in range(n):\n        if lst[i] > 0 and count > lst[i]:\n            return lst[i]\n    return -1\n",
        "num_ids": 97
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n = 0\n    for i in lst:\n        if i > 0:\n            if n < i:\n                n = i\n    if n!= 0:\n        return n\n    else:\n        return -1\n    \n",
        "num_ids": 56
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    max_int = -1\n    max_value = 0\n    for value in lst:\n        if value > max_int:\n            max_value = value\n            max_int = value\n",
        "num_ids": 47
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if lst == None:\n        return -1\n    else:\n        for i in lst:\n            if i == 0:\n                continue\n            else:\n                if i > maxi:\n                    maxi = i\n        return maxi\n",
        "num_ids": 59
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    m = -1\n    for i in lst:\n        if i > m:\n            m = i\n    for j in range(len(lst)):\n        if lst[j] == m:\n            return m\n    return -1\n",
        "num_ids": 60
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    #initialise dict to 0 for each entry\n    #and set frequency to 0\n    d = {key: 0 for key in lst}\n    #increment frequency by 1 for each entry\n    for i in lst:\n        d[i] += 1\n    #initialise max\n    max = -1\n    #loop through dict and compare to max\n    for key, value in d.items():\n        if value > max and key!= 0:\n            max = value\n            max_key = key\n    #check to see if max exists\n    if max!= -1:\n        return max_key\n    else:\n        return -1",
        "num_ids": 152
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #we need to look only in the list, since we have sorted the list\n    #and we want the highest number with the most frequencies\n    #we can create a dictonary and look only in that dictonary\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    for x in freq:\n        if x > 0 and freq[x] >= x:\n            return x\n    return -1\n        \n",
        "num_ids": 130
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # sort the list in ascending order\n    sorted_list = sorted(lst)\n    index = 0\n    # check if the smallest number in the list is zero, if so return -1\n    if sorted_list[0] == 0:\n        return -1\n    # check if the second smallest number in the list is zero, if so return -1\n    if sorted_list[1] == 0:\n        return -1\n    # check if the third smallest number in the list is zero, if so return -1\n    if sorted_list[2] == 0:\n        return -1\n    while index < len(sorted_list):\n        if sorted_list[index] == sorted_list[index + 1]:\n            return -1\n        index += 2\n    # search for the index of the smallest positive number\n    smallest_number = 0\n    for i in range(len(sorted_list)):\n        if sorted_list[i] < smallest_number:\n            smallest_number = sorted_list[i]\n    # search for the index of the second smallest positive number\n    second_smallest_number = 0\n    for i in range(len(sorted_list)):\n        if sorted_list[i] < smallest_number and sorted_list[i] < second_smallest_number:\n            second_smallest_number = sorted_list[i]\n    # search for the index of the third smallest positive number\n    third_smallest_number = 0\n    for i in range(len(sorted_list)):\n        if sorted_list[i] < second_smallest_number and sorted_list[i] < third_smallest_number:\n            third_smallest_number = sorted_list[i]\n    # return the index of the smallest positive number greater than zero\n    return smallest_number\n",
        "num_ids": 424
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max_num = 0\n    for i in range(len(lst)):\n        if lst[i] > max_num and i!= 0:\n            max_num = lst[i]\n    \n    for i in range(len(lst)):\n        if lst[i] > max_num:\n            return max_num\n    return -1\n",
        "num_ids": 89
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not lst:\n        return []\n    return sorted(lst, key=lambda x: x, reverse=True)",
        "num_ids": 30
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return []\n    else:\n        lst.sort()\n        return lst",
        "num_ids": 31
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n = len(lst)\n    if n == 0:\n        return lst\n    min_idx = 0\n    max_idx = n - 1\n    while min_idx <= max_idx:\n        if lst[min_idx] >= lst[max_idx]:\n            break\n        min_idx += 1\n        max_idx -= 1\n    if min_idx == max_idx:\n        return lst\n    for i in range(n-1, min_idx-1, -1):\n        if lst[i] <= lst[max_idx]:\n            lst[i], lst[max_idx] = lst[max_idx], lst[i]\n            break\n    for i in range(min_idx, n-1):\n        if lst[i] >= lst[max_idx]:\n            lst[i], lst[max_idx] = lst[max_idx], lst[i]\n            break\n    for i in range(n-1, max_idx-1, -1):\n        if lst[i] >= lst[min_idx]:\n            lst[i], lst[min_idx] = lst[min_idx], lst[i]\n            break\n    return lst\n",
        "num_ids": 320
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n    n = len(lst)\n    if n < 2:\n        return lst\n    mid = n // 2\n    l = lst[:mid]\n    r = lst[mid:]\n    l.sort()\n    r.sort()\n    i = 0\n    j = 0\n    final = []\n    while i < n and j < n:\n        if l[i] < r[j]:\n            final.append(l[i])\n            i += 1\n        else:\n            final.append(r[j])\n            j += 1\n    final.extend(l[i:])\n    final.extend(r[j:])\n    return final\n",
        "num_ids": 166
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code here\n    return sorted(lst, reverse=True)\n",
        "num_ids": 19
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not lst:\n        return lst\n",
        "num_ids": 13
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Write your function here\n    if len(lst) == 0:\n        return []\n",
        "num_ids": 23
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(lst, reverse=True)",
        "num_ids": 12
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(lst)\n",
        "num_ids": 9
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(lst, key=strange_sort_key)\n",
        "num_ids": 18
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    side_1, side_2, side_3 = sorted([a, b, c])\n    if (side_1 + side_2) > side_3:\n        return round((side_1*side_2)/2, 2)\n    else:\n        return -1\n",
        "num_ids": 66
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round((a * b * c) / 2, 2)\n    else:\n        return -1\n",
        "num_ids": 47
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if a > 0 and b > 0 and c > 0 and (a + b > c) and (b + c > a) and (a + c > b):\n        return (a*b*0.5)\n    else:\n        return -1\n",
        "num_ids": 60
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if (a + b) > c and (a + c) > b and (b + c) > a:\n        print(f\"{a} + {b} = {c} \\t Triangle Area: {0.5*(a*b)}\")\n        return round(0.5*(a*b), 2)\n    else:\n        return -1\n",
        "num_ids": 86
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # edge 1\n    if a + b > c:\n        return round((a * b) / 2, 2)\n    # edge 2\n    elif a + c > b:\n        return round((a * c) / 2, 2)\n    # edge 3\n    elif b + c > a:\n        return round((b * c) / 2, 2)\n    else:\n        return -1\n",
        "num_ids": 96
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (a + b + c) / 2 if a + b > c and a + c > b and b + c > a else -1\n",
        "num_ids": 34
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    side_1 = a\n    side_2 = b\n    side_3 = c\n    #check if sides can form a triangle\n    if (a**2 + b**2 <= c**2) or (b**2 + c**2 <= a**2) or (c**2 + a**2 <= b**2):\n        return -1\n    if (side_1+side_2 <= side_3) or (side_2+side_3 <= side_1) or (side_3+side_1 <= side_2):\n        return -1\n    #find the semi-perimeter of the triangle\n    perimeter = a + b + c\n    #find the area of the triangle\n    area = 0.5 * perimeter * (perimeter - a) * (perimeter - b) * (perimeter - c)\n    #round area to 2 decimal places\n    return round(area, 2)",
        "num_ids": 208
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Determine if the three sides make a valid triangle\n    if (b + c > a) and (c + a > b) and (a + b > c):\n        # Find the semi-perimeter\n        perimeter = a + b + c\n        # Find the area\n        area = 0.5 * (perimeter * (perimeter - a) * (perimeter - b) * (perimeter - c))\n        # Return rounded area\n        return round(area, 2)\n    # Otherwise return -1\n    else:\n        return -1\n",
        "num_ids": 128
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    else:\n        x = (a + b + c) / 2\n        return round((x*(x-a)*(x-b)*(x-c)) ** 0.5, 2)\n",
        "num_ids": 67
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a + b > c:\n        if c + b > a:\n            if a + c > b:\n                if b + c > a:\n                    return (a+b+c)/2\n                else:\n                    return -1\n            else:\n                return -1\n        else:\n            return -1\n    else:\n        return -1\n",
        "num_ids": 84
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    while q:\n        a = q.pop(0)\n        if len(q) == 0:\n            return True\n        elif sum(q) <= w and is_palindromic(a,q):\n            return True\n        else:\n            q.append(a)\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if(q==None or w<0):\n        return False\n    if(is_palindrome(q) and sum(q) <= w):\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    q.sort()\n    if q == q[::-1]:\n        if sum(q) <= w:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # We can do this in 2 passes.\n    # First pass: check if the list is balanced, which can be done by checking if the difference between the sum of the list and its maximum possible weight is 0.\n    # Second pass: check if the sum of the list is less than or equal to the maximum possible weight.\n    def check_balance(lst):\n        return (sum(lst) - max_weight) == 0\n",
        "num_ids": 100
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #if q is balanced, and weight(q) <= w, return True\n    #if weight(q) > w, return False\n    #if q is balanced, and weight(q) <= w, return True\n    if is_balanced(q) == True and weight(q) <= w:\n        return True\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if type(q)==list and type(w)==int:\n        if is_palindrome(q) and (sum(q)<=w):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n",
        "num_ids": 61
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    while q:\n        if len(q) > 1:\n            if q == sorted(q, reverse=True):\n                if sum(q) <= w:\n                    return True\n            else:\n                return False\n        else:\n            return False\n",
        "num_ids": 59
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if q == q[::-1]:\n        q = sum(q)\n        if q <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \nwill_it_fly([1,2],5)\n",
        "num_ids": 62
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # your code here\n    # put your python code here \n    if q == sorted(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # If any value has to be changed, return -1 (impossible)\n    if any([True for x in arr if x % 2 == 0]):\n        return -1\n",
        "num_ids": 44
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # find an array that is 1 less than the original\n    new_arr = arr.copy()\n    new_arr.sort()\n",
        "num_ids": 32
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    arr.sort()\n    arr = arr[::-1]\n    for i in range(len(arr) - 1):\n        if arr[i]!= arr[i + 1]:\n            return i + 1\n    return 0\n",
        "num_ids": 56
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    length = len(arr)\n    changes = 0\n",
        "num_ids": 14
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    arr.sort()\n    n = len(arr)\n    i = 0\n    j = n - 1\n",
        "num_ids": 27
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    changes = []\n    for i in range(len(arr)):\n        if arr[i]!= arr[-(i+1)]:\n            changes.append(i)\n    return len(changes)\n",
        "num_ids": 50
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n    return get_palindromes(arr) - 1\n",
        "num_ids": 21
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return min([len(arr) - i - 1 for i in range(len(arr) + 1) if arr == list(reversed(arr))])\n",
        "num_ids": 38
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    arr.sort()\n    # find first number that is different from its reverse\n    for i,num in enumerate(arr):\n        if i!= 0:\n            if arr[i-1]!= num:\n                # if a number is different from its reverse, add one change\n                count += 1\n                break\n    # find last number that is different from its reverse\n    for i,num in enumerate(reversed(arr)):\n        if i!= len(arr)-1:\n            if arr[len(arr)-1-i]!= num:\n                # if a number is different from its reverse, add one change\n                count += 1\n                break\n    return count\n",
        "num_ids": 165
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # if there is a palindrome\n    if is_palindrome(arr):\n        return 0\n",
        "num_ids": 26
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    new_lst = []\n    for char in lst1:\n        if len(char) <= len(lst2):\n            count += 1\n            new_lst.append(char)\n    return new_lst\n",
        "num_ids": 60
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if lst1 == lst2:\n        return lst1\n    else:\n        return lst1 if len(lst1) < len(lst2) else lst2\n",
        "num_ids": 46
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not lst1 or not lst2:\n        return []\n    lst = []\n    for i in lst1:\n        if len(i) < len(lst2[0]):\n            lst.append(i)\n    for j in lst2:\n        if len(j) < len(lst1[0]):\n            lst.append(j)\n    return lst\n",
        "num_ids": 99
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not lst1:\n        return lst1\n    elif not lst2:\n        return lst2\n    else:\n        return_list = []\n        if len(lst1) <= len(lst2):\n            for string in lst1:\n                if not any(char in string for char in lst2):\n                    return_list.append(string)\n        else:\n            for string in lst2:\n                if not any(char in string for char in lst1):\n                    return_list.append(string)\n        return return_list\n",
        "num_ids": 137
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(lst1) if len(lst1) < len(lst2) else sorted(lst2)\n",
        "num_ids": 31
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    lst_new = []\n    for word in lst1:\n        if len(word) < len(lst2):\n            lst_new.append(word)\n    for word in lst2:\n        if len(word) < len(lst1):\n            lst_new.append(word)\n    return lst_new\n",
        "num_ids": 84
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Solution\n    return list(filter(lambda x: len(x)<len(lst2), lst1))\n",
        "num_ids": 30
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not lst1 and not lst2:\n        return []\n    elif len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst2\n",
        "num_ids": 51
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    else:\n        return lst2\n",
        "num_ids": 33
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # t1 = set(lst1)\n    # t2 = set(lst2)\n    # print(t1, t2)\n    # print(t1 - t2)\n    # print(t2 - t1)\n    # print(t1.union(t2))\n    # print(t1.difference(t2))\n    # print(t2.difference(t1))\n",
        "num_ids": 99
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # your code here\n    return\n",
        "num_ids": 10
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return True if a%3 == 0 and a%5 == 0 else False\n",
        "num_ids": 19
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if (a == 0) or (a == 1):\n        return False\n    \n    if (a % 3 == 0) or (a % 5 == 0):\n        return False\n    \n    if (a % 3 == 0) or (a % 5 == 0):\n        return True\n    \n    else:\n        return False\n",
        "num_ids": 79
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return a % 2 == 0 and is_prime_number(int(a / 2)) and is_prime_number(int(a / 3))\n    \ndef is_prime_number(a):\n    \"\"\"Write a function that returns True if the given number is prime and false otherwise.\n    Known as a prime number is one that is only divisible by itself and 1.\n    Example:\n    is_prime_number(2) == True\n    is_prime_number(3) == False\n    is_prime_number(5) == False\n    is_prime_number(11) == True\n    is_prime_number(101) == False\n    is_prime_number(999) == True\n    \"\"\"\n    if a > 1:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 214
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    prime_list = get_primes()\n    i = 0\n    while i < len(prime_list):\n        if a % prime_list[i] == 0:\n            return False\n        i = i + 1\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(3, 100, 3):\n        if a % i == 0:\n            return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    a = a % 3\n    if a!= 0 and is_prime(a) and a!= 1:\n        return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # Check if it is perfect cube\n    if a == int(a**(1/3)):\n        return False\n    \n    # Check if it is power of 3\n    if a % 3 == 0:\n        return True\n    \n    # If it is not perfect cube and not power of 3, it's not a prime number\n    return False\n",
        "num_ids": 83
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if (a % 3 == 0 and a % 5 == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # steps:\n    # 1. if a is less then 3, then return false\n    # 2. if a is greater then 3, then return false\n    # 3. if a is divisible by 3, then return false\n    # 4. if a is divisible by 3, then return true\n    if a < 3:\n        return False\n    if a > 3:\n        return False\n    if a % 3 == 0:\n        return False\n    if a % 3 == 0:\n        return True\n        \n    ",
        "num_ids": 119
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x**int(n)==x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    try:\n        if (x**n == 1):\n            return True\n        else:\n            return False\n    except Exception:\n        print('Oops! This is probably not a good idea, but let\\'s try again.')\n        return False\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))\n",
        "num_ids": 137
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if x == 1:\n        return True\n    elif n == 1:\n        return False\n    else:\n        return x%n == 0\n    \ndef is_simple_power_efficient(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    elif n == 1:\n        return False\n    elif x > n:\n        return False\n    else:\n        for i in range(2, n+1):\n            if x%i!= 0:\n                continue\n            else:\n                return False\n        return True\n",
        "num_ids": 267
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x**(1.0/n) == 1.0\n",
        "num_ids": 17
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return x**int(n) == x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return n**int(x) == x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return x == n**int(log(x, n))\n",
        "num_ids": 16
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x**int(n) == x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (x**(1/n))%n == x\n",
        "num_ids": 16
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x**n==n*x\n",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a == 0:\n        return True\n    return a**3 == a\n",
        "num_ids": 20
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (a ** 3) == a\n",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if a >= 0:\n        return a**3 == a\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return(a**3 == a)\n",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a == 0:\n        return True\n    if a == 1 or a == -1:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (a ** 3) == a\n",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for x in range(2,a):\n        if a%x == 0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    cubes = { 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100, 11: 121, 12: 144, 13: 169, 14: 196, 15: 225, 16: 256, 17: 289, 18: 324, 19: 361, 20: 400, 21: 441, 22: 484, 23: 529, 24: 576, 25: 625, 26: 676, 27: 729, 28: 784, 29: 841, 30: 896, 31: 962, 32: 1024, 33: 1136, 34: 1281, 35: 1338, 36: 1404, 37: 1461, 38: 1616, 39: 1706, 40: 1809, 41: 1935, 42: 2048, 43: 2176, 44: 2304, 45: 2520, 46: 2688, 47: 2856, 48: 3136, 49: 3697, 50: 3840, 51: 3932, 52: 4100, 53: 4279, 54: 4563, 55: 4836, 56: 4916, 57: 5103, 58: 5308, 59: 5512, 60: 5658, 61: 5904, 62: 6039, 63: 6268, 64: 6463}\n    if a in cubes:\n        return True\n    else:\n        return False\n",
        "num_ids": 321
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return a**3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a <= 0:\n        return False\n    if a == 1:\n        return True\n    return iscube(a // 3)\n    \n    \n    \ndef isprime(n):\n    '''\n    Write a function that takes an integer n and returns \n    True if this integer is prime.\n    Note: you may assume the input is always valid.\n    Example:\n    isprime(1) ==> False\n    isprime(2) ==> True\n    isprime(20) ==> True\n    isprime(21) ==> False\n    '''\n    # if n <= 1: return False\n    # for i in range(2, int(n**0.5)+1):\n    #     if n % i == 0:\n    #         return False\n    # return True\n    \n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 226
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if num == '':\n        return 0\n    num = num.upper()\n    res = ''\n    for i in range(2,len(num)):\n        s = num[i]\n        if s in 'ABCDEF':\n            if s not in res:\n                res += s\n    return len(res)\n",
        "num_ids": 76
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    import re\n    \n    digits = re.compile(\"[0-9]{2,4}\")\n",
        "num_ids": 30
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    decimal = int(num, 16)\n    \n    if (decimal - 1) % 6 == 0:\n        return 1\n    \n    count = 0\n    \n    while decimal > 0:\n        if is_prime(decimal):\n            count += 1\n        decimal //= 16\n    \n    return count\n",
        "num_ids": 78
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def is_prime(n):\n        if n == 2:\n            return True\n        if n == 0 or n == 1:\n            return False\n        if n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        for i in range(5, int(math.sqrt(n))+1, 6):\n            if n % i == 0:\n                return False\n        return True\n    s = num\n    n = len(s)\n    c = n\n    ans = 1\n    while c!= 0:\n        if c%10 == 0:\n            c = c//10\n            continue\n        if c%10 < 9:\n            if is_prime(int(s[:c])):\n                ans += 1\n                c = c//10\n        if c%10 == 9:\n            if is_prime(int(s[:c])):\n                ans += 1\n                c = c//10\n                s = s[1:]\n        if c%10 < 9:\n            if is_prime(int(s[:c])):\n                ans += 1\n                c = c//10\n        if c%10 == 9:\n            if is_prime(int(s[:c])):\n                ans += 1\n                c = c//10\n                s = s[1:]\n    return ans\n",
        "num_ids": 327
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = 0\n    if num == \"\":\n        return 0\n    if num.lower() == \"123456789abcdef0\":\n        return 2\n    while num[-1:] == \"0\":\n        num = num[:-1]\n    for i in num:\n        if i not in \"ABCDEF\":\n            res += 1\n    for i in \"ABCDEF\":\n        if i in num:\n            num = num.replace(i,\"\")\n    while num[0] == \"0\":\n        num = num[1:]\n    if num == \"\":\n        return 0\n    for i in num:\n        if i not in \"ABCDEF\":\n            res += 1\n    return res\n    \ndef char_key(s):\n    \"\"\"You have been tasked to write a function that receives a \n    string as a parameter and returns its character with the most \n    occurrences (as a string, not an integer).\n    If there is a tie for most frequent character, the function\n    should return the first such character (from the alphabet).\n    Characters are not case sensitive.\n    Examples:\n    For s = \"qweqweqwe\" the output should be \"e\"\n    For s = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    the output should be \"Z\".\n    For s = \"qweqweqweqwe\" the output should be \"q\"\n    \"\"\"\n    if s == \"\":\n        return \"\"\n    res = \"\"\n    cnt = 0\n    for i in s:\n        if s.count(i) > cnt:\n            res = i\n            cnt = s.count(i)\n    return res\n    \ndef swap_case(s):\n    \"\"\"You have been tasked to write a function that receives a \n    string as a parameter and returns it with all uppercase letters \n    replaced by lowercase letters and vice versa.\n    Example:\n    For s = \"Hello\" the output should be \"hELLO\"\n    \"\"\"\n    return s.swapcase()\n    \ndef first_and_last_index(s,x):\n    \"\"\"You have been tasked to write a function that receives a \n    string as a parameter and returns the index of first occurrence \n    of an element in the string.\n    If the element is not present, the function should return -1.\n    Example:\n    For s = \"Hello\" and x = \"e\", the output should be 2.\n    For s = \"World\" and x = \"l\", the output should be 1.\n    \"\"\"\n    return s.index(x)\n    \ndef without_begin_and_end(s):\n    \"\"\"You have been tasked to write a function that receives a \n    string as a parameter and returns a new string without the \n    first and last characters.\n    Example:\n    For s = \"Hello\" the output should be \"ell\".\n    For s = \"Hi-There\" the output should be \"ythere\".\n    For s = \"CodeWars\" the output should be \"odwar\".\"\"\"\n    if len(s) == 0:\n        return \"\"\n    if len(s) == 1:\n        return \"\"\n    return s[1:-1]\n    \ndef rotate_left(s,n):\n    \"\"\"You have been tasked to write a function that receives a \n    string as a parameter and returns a string with the first \n    n letters of the first word after the rotation.\n    Example:\n    For s = \"HelloWorld\" and n = 3 the output should be \"olleH\".\n    For s = \"HelloWorld\" and n = 1 the output should be \"HelloWorld\".\n    \"\"\"\n    res = \"\"\n    if len(s) == 0:\n        return \"\"\n    if len(s) == 1:\n        return s\n    for i in range(n):\n        res += s[-1]\n        s = s[0:-1]\n    return res\n    \ndef count_words(s):\n    \"\"\"You have been tasked to write a function that receives a \n    string as a parameter and returns the number of words in it.\n    Example:\n    For s = \"HelloWorld HelloWorld\" the output should be 2.\n    For s = \"HelloWorld  HelloWorld\" the output should be 2.\n    For s = \"Hello World Hello World Hello World\" the output shoul",
        "num_ids": 1026
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    digits = ['A','B','C','D','E','F']\n    count = 0\n    for d in digits:\n        count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    digs = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    if num == '':\n        return 0\n    elif num == '0':\n        return 1\n    else:\n        if num.isnumeric() == False:\n            return -1\n        l = len(num)\n        if l == 1:\n            return digs[num[0]]\n        else:\n            cnt = 1\n            for i in range(1, l):\n                if digs[num[i]] == digs[num[0]]:\n                    cnt += 1\n                else:\n                    break\n            return cnt\n",
        "num_ids": 212
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (num.count(\"A\") + num.count(\"B\") + num.count(\"C\") + num.count(\"D\") + num.count(\"E\") + num.count(\"F\")) // 6\n",
        "num_ids": 48
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert num, \"Invalid input\"\n",
        "num_ids": 10
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    num = num.upper()\n    sum = 0\n    for i in range(2,len(num)):\n        if(check_prime(int(num[i-2:i]))):\n            sum += 1\n    return sum\n",
        "num_ids": 57
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"db\" + ''.join(map(str, bin(decimal)[2:])) + \"db\"\n",
        "num_ids": 28
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"db\" + decimal_to_binary(decimal)[1:] + \"db\"\n",
        "num_ids": 23
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return 'db' + str(decimal_to_binary_rec(decimal))\n",
        "num_ids": 22
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    num = decimal\n    d = []\n    d.append('db')\n    while num > 0:\n        r = num % 2\n        d.append(str(r))\n        num = num // 2\n    d = ''.join(d)\n    d = d[1:]\n    d = d[:-1]\n    return d\n",
        "num_ids": 81
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"db\" + decimal_to_binary_helper(decimal) + \"db\"\n",
        "num_ids": 24
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if decimal == 0:\n        return \"db\"\n    elif decimal > 0:\n        return \"db\" + decimal_to_binary(decimal - 1)\n    elif decimal == -1:\n        return \"db\" + \"1\"\n",
        "num_ids": 59
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return 'db' + ''.join([str(int(decimal%2))] + [str(int(decimal//2))]*(3 - 1 - int(decimal//2)))\n",
        "num_ids": 47
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if decimal < 0:\n        raise ValueError(\"Incorrect input\")\n",
        "num_ids": 18
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return ''.join(list('db'+'{0:b}'.format(decimal))[2:])\n",
        "num_ids": 29
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return f\"db{'0'*(2-len(str(decimal)))}{str(decimal)}\"\n    \n    \n    \nif __name__ == \"__main__\":\n    print(decimal_to_binary(10))\n    print(decimal_to_binary(5))\n    print(decimal_to_binary(20))",
        "num_ids": 84
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    counter = 0\n    while s!= \"\":\n        i = 0\n        s = s.lower()\n        while i < len(s)-1:\n            if s[i] == s[i+1]:\n                counter += 1\n            i += 1\n        if counter >= 3:\n            return True\n        else:\n            counter = 0\n    return False\n    \nprint(is_happy(\"abcde\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"aabbccddee\"))\nprint(is_happy(\"dddd\"))\nprint(is_happy(\"aabd\"))",
        "num_ids": 141
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(s)):\n        if i > 2 and s[i]!= s[i - 1] and s[i - 1]!= s[i - 2]:\n            return True\n    return False\n    \ndef is_happy_2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    seen = set()\n    for letter in s:\n        if letter in seen:\n            return False\n        else:\n            seen.add(letter)\n    return len(seen) >= 3\n    \ndef is_happy_3(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(set(s)) >= 3 and len(s) >= 3 and all(s[i] == s[i - 1] for i in range(1, len(s)))\n    \ndef is_happy_4(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(set(s)) >= 3 and all(s[i]!= s[i - 1] for i in range(1, len(s))) and len(s) >= 3\n    \nif __name__ == '__main__':\n    print(\"\\nis_happy\")\n    print(is_happy('abcd'))\n    print(is_happy('abc'))\n    print(is_happy('ab'))\n    print(is_happy('a'))\n    print(is_happy('aa'))\n    print(is_happy('abcd'))\n    \n    print(\"\\nis_happy_2\")\n    print(is_happy_2('abcd'))\n    print(is_happy_2('abc'))\n    print(is_happy_2('ab'))\n    print(is_happy_2('a'))\n    print(is_happy_2('aa'))\n    print(is_happy_2('abcd'))\n    \n    print(\"\\nis_happy_3\")\n    print(is_happy_3('abcd'))\n    print(is_happy_3('abc'))\n    print(is_happy_3('ab'))\n    print(is_happy_3('a'))\n    print(is_happy_3('aa'))\n    print(is_happy_3('abcd'))\n    \n    print(\"\\nis_happy_4\")\n    print(is_happy_4('abcd'))\n    print(is_happy_4('abc'))\n    print(is_happy_4('ab'))\n    print(is_happy_4('a'))\n    print(is_happy_4('aa'))\n    print(is_happy_4('abcd')",
        "num_ids": 941
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    d = {x: False for x in string.ascii_lowercase}\n",
        "num_ids": 21
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # if the number of unique letters in the string is more than 3 return False\n    return len(set(s)) > 2 and len(s) >= 3\n",
        "num_ids": 37
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(s) < 3:\n        return False\n    d = {}\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #use a dict to count the distinct letters\n    distinct_letters = {}\n    for letter in s:\n        if letter not in distinct_letters:\n            distinct_letters[letter] = 1\n        else:\n            distinct_letters[letter] += 1\n",
        "num_ids": 63
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(s) < 3:\n        return False\n    if len(s) == 3 and s[0] == s[1] and s[1] == s[2]:\n        return True\n    # initialize set of letters\n    set_letters = set()\n    # initialize dict with letters and number of occurances\n    dict_letters = {}\n    for i in range(len(s)):\n        if s[i] in dict_letters:\n            dict_letters[s[i]] += 1\n        else:\n            dict_letters[s[i]] = 1\n        # check if a letter has occured 2 times\n        if s[i] in set_letters:\n            return False\n        set_letters.add(s[i])\n    return True\n",
        "num_ids": 178
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    h_dict = {}\n    \n    if len(s) <= 3:\n        return True\n    \n    for i in range(0,len(s)):\n        if s[i] in h_dict:\n            h_dict[s[i]] += 1\n        else:\n            h_dict[s[i]] = 1\n            \n    for k in h_dict:\n        if h_dict[k] < 3:\n            return False\n    \n    return True\n",
        "num_ids": 115
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    string = s\n    while len(string) > 2:\n        temp = ''\n        for i in range(0, len(string)-1):\n            if string[i] == string[i+1]:\n                temp = ''.join(set(temp+string[i]))\n                if i == len(string)-2:\n                    if temp == ''.join(set(temp+string[i])):\n                        return True\n        string = temp\n    return False\n",
        "num_ids": 109
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    lst = list(s)\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i-1]:\n            lst[i-1] = lst[i-1] + lst[i]\n            if lst[i] not in lst[:i-1]:\n                return False\n    return True\n",
        "num_ids": 91
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return 'A+' if (grades[0] > 4.0) and (grades[1] > 3.7) else ['A+' if (grades[0] > 4.0) and (grades[1] > 3.7) else 'A' if (grades[0] > 4.0) and (grades[1] > 3.3) else 'A-' if (grades[0] > 4.0) and (grades[1] > 3.0) else 'B+' if (grades[0] > 3.7) and (grades[1] > 3.3) else 'B' if (grades[0] > 3.7) and (grades[1] > 3.0) else 'B-' if (grades[0] > 3.7) and (grades[1] > 2.7) else 'C+' if (grades[0] > 3.0) and (grades[1] > 2.7) else 'C' if (grades[0] > 3.0) and (grades[1] > 2.3) else 'C-' if (grades[0] > 3.0) and (grades[1] > 2.0) else 'D+' if (grades[0] > 2.7) and (grades[1] > 2.3) else 'D' if (grades[0] > 2.7) and (grades[1] > 2.0) else 'D-' if (grades[0] > 2.7) and (grades[1] > 1.7) else 'E' if (grades[0] > 1.7) else 'F']\n",
        "num_ids": 365
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(grades)):\n        while grades[i] < 4.0:\n            grades[i] += 0.1\n    grades.sort()\n    result = []\n    for i in grades:\n        if i >= 3.7:\n            result.append('A+')\n        elif i >= 3.3:\n            result.append('A')\n        elif i >= 3.0:\n            result.append('A-')\n        elif i >= 2.7:\n            result.append('B+')\n        elif i >= 2.3:\n            result.append('B')\n        elif i >= 2.0:\n            result.append('B-')\n        elif i >= 1.7:\n            result.append('C+')\n        elif i >= 1.3:\n            result.append('C')\n        elif i >= 1.0:\n            result.append('C-')\n        elif i >= 0.7:\n            result.append('D+')\n        elif i >= 0.3:\n            result.append('D')\n        elif i >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n",
        "num_ids": 292
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    grades = grades.copy()\n    grades.sort()\n    letter = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'F']\n",
        "num_ids": 69
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    grades.sort()\n",
        "num_ids": 9
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # TODO: your code here\n    result = []\n",
        "num_ids": 15
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    grades_letter_grade = []\n    for grade in grades:\n        if grade >= 4.0:\n            grades_letter_grade.append('A+')\n        elif grade >= 3.7:\n            grades_letter_grade.append('A')\n        elif grade >= 3.3:\n            grades_letter_grade.append('A-')\n        elif grade >= 3.0:\n            grades_letter_grade.append('B+')\n        elif grade >= 2.7:\n            grades_letter_grade.append('B')\n        elif grade >= 2.3:\n            grades_letter_grade.append('B-')\n        elif grade >= 2.0:\n            grades_letter_grade.append('C+')\n        elif grade >= 1.7:\n            grades_letter_grade.append('C')\n        elif grade >= 1.3:\n            grades_letter_grade.append('C-')\n        elif grade >= 1.0:\n            grades_letter_grade.append('D+')\n        elif grade >= 0.7:\n            grades_letter_grade.append('D')\n        elif grade >= 0.0:\n            grades_letter_grade.append('D-')\n        else:\n            grades_letter_grade.append('E')\n    return grades_letter_grade\n",
        "num_ids": 312
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return grades_letter_grade(grades)\n",
        "num_ids": 12
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    grades.sort()\n    grades_n = []\n    for i in range(len(grades)):\n        if grades[i] >= 3.7:\n            grades_n.append('A+')\n        elif grades[i] >= 3.3:\n            grades_n.append('A')\n        elif grades[i] >= 3.0:\n            grades_n.append('A-')\n        elif grades[i] >= 2.7:\n            grades_n.append('B+')\n        elif grades[i] >= 2.3:\n            grades_n.append('B')\n        elif grades[i] >= 2.0:\n            grades_n.append('B-')\n        elif grades[i] >= 1.7:\n            grades_n.append('C+')\n        elif grades[i] >= 1.3:\n            grades_n.append('C')\n        elif grades[i] >= 1.0:\n            grades_n.append('C-')\n        elif grades[i] >= 0.7:\n            grades_n.append('D+')\n        elif grades[i] >= 0.3:\n            grades_n.append('D')\n        elif grades[i] >= 0.0:\n            grades_n.append('D-')\n        elif grades[i] >= 0.0:\n            grades_n.append('E')\n    return grades_n\n",
        "num_ids": 338
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    grade_equation = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    grade_numbers = list(range(4.0,11))\n    grades_numbers = list(map(float, grades))\n    grades_letter = list(map(lambda x: grade_equation[x],grades_numbers))\n    return grades_letter\n",
        "num_ids": 118
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Remove extra space at the end of the input\n    string = string.strip()\n",
        "num_ids": 21
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    length = len(string)\n    if length == 2:\n        return True\n    if length % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(length)) + 1, 2):\n        if length % i == 0:\n            return False\n    return True\n",
        "num_ids": 73
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return True if len(string) == 1 and string.isalpha() else False\n",
        "num_ids": 20
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return True if len(string) == 2 and string[0] == string[1] else False\n",
        "num_ids": 24
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    string_list = list(string)\n    for i in range(1, len(string_list)):\n        if i == 0:\n            continue\n        div = 1\n        prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                div += 1\n        if div > 1:\n            prime = False\n        if string_list[i-1] == 'o' and string_list[i-2] == 'l':\n            prime = False\n        if prime:\n            return True\n    return False\n",
        "num_ids": 130
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(string) in prime_nums\n",
        "num_ids": 13
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def is_prime(num):\n        return True if num > 1 and True else False\n    \n    if not isinstance(string, str):\n        raise TypeError('The argument should be a string')\n    \n    return is_prime(len(string))\n",
        "num_ids": 61
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #if string is less than or equal to 1 it is not a prime\n    if len(string) <= 1:\n        return False\n    #if string length is even it is not a prime number\n    if len(string) % 2 == 0:\n        return False\n    #if string length is greater than 2, check if the first and last char are prime\n    if isprime(int(string[0])):\n        if isprime(int(string[-1])):\n            return True\n    return False\n    #return the prime number and false\n",
        "num_ids": 126
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = len(string)\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True",
        "num_ids": 47
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(string) in prime_numbers\n",
        "num_ids": 13
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # base case\n    if n == 1:\n        return 1\n",
        "num_ids": 17
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    count = 0\n    for i in range(1, n+1):\n        if i == 2 ** (n-1):\n            count += 1\n        if i % 10 == 1 and i // 10!= 1:\n            count += 1\n        if i % 10!= 1 and i // 10 == 1:\n            count += 1\n    \n    return count\n",
        "num_ids": 86
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Iterate through the digits.\n    # If digit is 1, return the sum of that number + 1.\n    # Else, return 0.\n    # If the end is 0, the number ends with 0, which is not a 1.\n    # If the start is 0, the number starts with 0, which is not a 1.\n    return sum(i + 1 if i % 10 == 1 else 0 for i in range(10))\n",
        "num_ids": 100
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n > 0, \"n must be positive\"\n    return num_of_one_digits(n) + num_of_one_digits(n + 1)\n",
        "num_ids": 42
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # prefix_sum_dict = {i: count for i, count in enumerate(\n    #     [1] + [0]*(len(str(n)) - 1)\n    # )}\n    # for i in range(2, len(str(n)) + 1):\n    #     prefix_sum_dict[i] = prefix_sum_dict[i - 1] + prefix_sum_dict[i - 2]\n    # return prefix_sum_dict[len(str(n))]\n    return sum(1 for i in range(1, len(str(n)) + 1)\n    if int(str(n)[:i]) % 2 == 0)\n",
        "num_ids": 158
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return 0\n    ",
        "num_ids": 6
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n",
        "num_ids": 6
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count_starts = 0\n    count_ends = 0\n    while n > 0:\n        if n % 10 == 1:\n            count_starts += 1\n        if n % 10 == 0:\n            count_ends += 1\n        n = n // 10\n    return count_starts, count_ends\n",
        "num_ids": 74
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        if str(i)[0] == '1' and str(i)[-1] == '1':\n            count += 1\n",
        "num_ids": 54
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    bin_num = bin(N)\n    return bin_num\n",
        "num_ids": 17
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    binary = \"\".join(format(N, \"b\")[i] for i in range(0, 10))\n    \n    return binary\n    \nif __name__ == \"__main__\":\n    N = int(input())\n    binary = solve(N)\n    print(binary)\n    ",
        "num_ids": 72
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return ''.join(map(str, range(1, N + 1)))\n",
        "num_ids": 20
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # Fills up the digits of the number\n    num = bin(N)\n    digits = []\n    for i in range(len(num)-2):\n        digits.append(num[i+2])\n    \n    # Converts the binary number into an integer, which is easier to manipulate\n    digits = list(map(int, digits))\n    \n    # Calculates the total sum of the digits of the number\n    total = sum(digits)\n    \n    # Prints the output\n    return str(total)\n    ",
        "num_ids": 128
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if N < 10:\n        return str(N)\n    else:\n        return str(N) + solve(N // 10)\n    \nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) < 2:\n        print(\"Usage: {} <integer>\".format(sys.argv[0]))\n        sys.exit()\n    if int(sys.argv[1]) < 10 or int(sys.argv[1]) > 10000:\n        print(\"Usage: {} <integer>\".format(sys.argv[0]))\n        sys.exit()\n    print(solve(int(sys.argv[1]))",
        "num_ids": 160
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Key: Since we can only see binary numbers, if we multiply N by 2^k, k will be the index of the last bit in the binary number.\n    #   For example, given N = 1000, we can get the 2^1 of the binary number:\n    #   1000 = 1001 * 2^1 = 1001*2\n    #   In the first step, we multiply 2^1 by 2^1 = 2^2 = 4.\n    #   Then we multiply 2^2 by 2^2 = 2^3 = 8.\n    #   The final step is to multiply 2^3 by 2^3 = 2^4 = 16.\n    #   The final binary number is: 1001*2^2*2^3 = 1222\n    #   This number has a certain bit at the end which is \"1\"\n    \n    # Base case\n    if N == 0:\n        return \"0\"\n    elif N == 1:\n        return \"1\"\n    else:\n        binary_string = \"\"\n        while N!= 0:\n            remainder = N % 2\n            N = N // 2\n            binary_string = str(remainder) + binary_string\n        return binary_string\n",
        "num_ids": 280
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = N\n    binary_num = ''\n    while n > 0:\n        binary_num += str(n % 2)\n        n = n // 2\n    return binary_num\n    ",
        "num_ids": 46
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def n2b(n):\n        \"\"\"Returns the binary representation of an integer.\n        \n        Example\n            For n = 123, the output should be \"101101\".\n            For n = -121, the output should be \"1111111\".\n            For n = 5, the output should be \"101\".\n        Variables:\n            @n integer\n            Constraints: 0 \u2264 n \u2264 2147483647\n        Output:\n            a string of binary number\n        \"\"\"\n        bin_rep = \"\"\n        while n >= 1:\n            bin_rep = str(n%2) + bin_rep\n            n = int(n/2)\n        return bin_rep\n    \n    def sum_of_digits(n):\n        \"\"\"Returns the sum of digits of an integer.\n        \n        Example\n            For n = 123, the output should be \"1\".\n            For n = -121, the output should be \"-1\".\n            For n = 5, the output should be \"3\".\n        Variables:\n            @n integer\n            Constraints: 0 \u2264 n \u2264 2147483647\n        Output:\n            an integer\n        \"\"\"\n        sum = 0\n        while n > 0:\n            sum += n%10\n            n = int(n/10)\n        return sum\n    \n    binary = n2b(N)\n    #print(binary)\n    total = 0\n    for i in binary:\n        total += int(i)\n    #print(total)\n    return total\n",
        "num_ids": 349
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    N_str = str(N)\n    bin_str = \"\"\n    for char in N_str:\n        bin_str += char\n    return bin_str\n",
        "num_ids": 40
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    return \"\".join(str(int(x)) for x in bin(N)[2:])\n",
        "num_ids": 26
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = 0\n    for x in range(len(lst)):\n        if x % 2 == 1:\n            result += lst[x]\n",
        "num_ids": 37
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    res = 0\n    if lst:\n        for idx in range(len(lst)):\n            if idx % 2 == 1:\n                res += lst[idx]\n    return res\n",
        "num_ids": 50
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum(lst[i] for i in range(len(lst)) if i%2 ==1)\n",
        "num_ids": 28
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    even = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even.append(lst[i])\n    return even\n    \n    \n",
        "num_ids": 47
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return lst[1::2]\n",
        "num_ids": 11
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 2!= 0:\n            sum += i\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(1, len(lst), 2):\n        lst[i] = lst[i-1]\n",
        "num_ids": 32
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return None\n    return sum(lst[::2])\n",
        "num_ids": 27
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        if lst[0] % 2 == 1:\n            return lst\n        return []\n    if lst[0] % 2 == 1:\n        return add([lst[0]] + add(lst[1:]))\n    else:\n        return add(lst[1:])\n    \nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) > 1:\n        print(add(list(map(int, sys.argv[1].split(\",\")))))\n    else:\n        print(add([]))\n        print(add([1]))\n        print(add([1,2,3,4]))\n        print(add([1,2,3,4,5]))\n        print(add([1,2,3,4,5,6])",
        "num_ids": 220
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return''.join(sorted(s.split()))\n",
        "num_ids": 15
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return ''.join([word[0] if isinstance(word, str) else word for word in s.split()])\n    \n",
        "num_ids": 32
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    list_word = []\n    list_word_ascii = []\n    for i in s.split():\n        list_word.append(i)\n    list_word.sort()\n    for i in list_word:\n        for j in i:\n            list_word_ascii.append(ord(j))\n    s =''.join(list_word)\n    print(s)\n    return s\n",
        "num_ids": 99
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"\".join(sorted(s.split()))\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \" \".join(\"\".join(sorted(list(s)))).replace(\" \", \"\")\n",
        "num_ids": 24
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return''.join(sorted([word for word in s.split(' ') if word]))\n",
        "num_ids": 24
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s = ''.join(s.split(' '))\n    res = ''\n    for i in sorted(s):\n        res += i\n    return res\n",
        "num_ids": 38
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = s.split(' ')\n    l = []\n    for i in s:\n        l.append(list(i))\n    for i in range(len(s)):\n        for j in range(len(s[i])):\n            if ord(s[i][j]) > ord(s[i-1][j]):\n                s[i][j],s[i-1][j] = s[i-1][j],s[i][j]\n    return''.join(s)\n",
        "num_ids": 121
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # your code here\n    return s.split()\n",
        "num_ids": 14
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    s = s.split()\n    s_new = []\n    \n    for i in range(len(s)):\n        word_new = ''\n        for j in range(len(s[i])):\n            word_new += chr(ord(s[i][j]) - len(s[i]) + 1)\n        s_new.append(word_new)\n        \n    return''.join(s_new)",
        "num_ids": 103
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Declare list of lists to return\n    ret = []\n    # Declare dictionary to hold row numbers as keys and column numbers as values\n    row_dict = {}\n    # Iterate through each row\n    for row, row_values in enumerate(lst):\n        # Iterate through each column\n        for column, column_value in enumerate(row_values):\n            # Store (row, column) pair into dictionary\n            row_dict[(row, column)] = column_value\n    # Get sorted dictionary with row and column as keys\n    sorted_dict = sorted(row_dict.items(), key=lambda item: item[0], reverse=False)\n    # Iterate through sorted_dict\n    for row_val in sorted_dict:\n        # If current (row, column) pair is equal to x\n        if row_val[1] == x:\n            # Return that (row, column) pair\n            ret.append((row_val[0][0], row_val[0][1]))\n    # Return ret\n    return ret\n",
        "num_ids": 244
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not lst:\n        return []\n    \n    if x >= len(lst[0]):\n        return []\n    \n    coords = []\n    for row in lst:\n        if x in row:\n            coords.append((lst.index(row), row.index(x)))\n    \n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords\n",
        "num_ids": 104
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(set(\n        tuple(tuple(i) for i in range(len(lst))),\n        key=lambda x: (\n            sorted(x[::2], reverse=True),\n            sorted(x[1::2], reverse=True))\n    ) if lst else [])\n",
        "num_ids": 75
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    res = []\n    for row in lst:\n        if x in row:\n            for i in range(len(row)):\n                if row[i] == x:\n                    res.append((row.index(x), i))\n    res.sort(key=lambda x: (x[0], -x[1]))\n    res.sort(key=lambda x: (-x[0], x[1]))\n    return res\n    \ndef get_row_int(lst, x):\n    \"\"\"\n    Just like get_row, but it should return an integer instead of a tuple.\n    \"\"\"\n    res = []\n    for row in lst:\n        if x in row:\n            for i in range(len(row)):\n                if row[i] == x:\n                    res.append(row.index(x))\n    return res\n    \ndef get_column(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, (x, y) such that\n    each tuple is a coordinate - (column, row).\n    Sort coordinates by columns in ascending order.\n    \"\"\"\n    res = []\n    for row in lst:\n        for i in range(len(row)):\n            if row[i] == x:\n                res.append((i, row.index(x)))\n    return res\n    \ndef get_column_int(lst, x):\n    \"\"\"\n    Just like get_column, but it should return an integer instead of a tuple.\n    \"\"\"\n    res = []\n    for row in lst:\n        for i in range(len(row)):\n            if row[i] == x:\n                res.append(i)\n    return res\n    \ndef get_coo_matrix(lst, row, column):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, integer x, integer y, find integers x in the list,\n    and return list of tuples, (x, y) such that\n    each tuple is a coordinate - (row, columns).\n    For example, for lst = [[1,2,3,4],\n                        [1,2,3,4],\n                        [1,2,3,4]],\n                        and x = 1 and y = 3,\n                        you should return [(0, 2), (1, 3), (2, 4)].\n    Sort coordinates by row in ascending order.\n    Sort coordinates by columns in descending order.\n    \"\"\"\n    res = []\n    for row in lst:\n        for i in range(len(row)):\n            if row[i] == x:\n                res.append((row.index(x), column))\n    return res\n    \ndef get_coo_matrix_int(lst, row, column):\n    \"\"\"\n    Just like get_coo_matrix, but it should return an integer instead of a tuple.\n    \"\"\"\n    res = []\n    for row in lst:\n        for i in range(len(row)):\n            if row[i] == x:\n                res.append((i, column))\n    return res\n    \nif __name__ == '__main__':\n    lst = [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n    ]\n    print(get_row(lst, 1))\n    print(get_row_int(lst, 1))\n    print(get_column(lst, 1))\n    print(get_column_int(lst, 1))\n    print(get_coo_matrix(lst, 1, 3))\n    print(get_coo_matrix_int(lst, 1, 3))",
        "num_ids": 978
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    def get_row_coordinates(row_index, lst):\n        rows = []\n        for row in lst:\n            if len(row) == 0:\n                continue\n            for i in range(len(row)):\n                if row[i] == x:\n                    rows.append((row_index, i))\n        return rows\n    \n    def get_row_by_rows(coordinates, lst):\n        rows = []\n        for i, row in enumerate(lst):\n            if len(row) == 0:\n                continue\n            for coordinate in coordinates:\n                if coordinate[0] == i:\n                    rows.append(coordinate)\n        return rows\n    \n    def sort_rows_by_columns(coordinates):\n        coordinates = sorted(coordinates, key=lambda x: x[1])\n        return sorted(coordinates, key=lambda x: x[0])\n    \n    # get all rows\n    rows = get_row_coordinates(0, lst)\n    # get sorted rows by columns\n    sorted_rows = sort_rows_by_columns(rows)\n    # get all rows with index 0 in ascending order\n    sorted_rows = sorted(sorted_rows, key=lambda x: x[0])\n    return sorted_rows\n",
        "num_ids": 308
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted((x, t[::-1]) for t, l in enumerate(lst) if x in l)\n",
        "num_ids": 30
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    row = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                row.append((i, j))\n    row.sort()\n    row.sort(key=lambda x: (x[0], -x[1]))\n    return row\n",
        "num_ids": 89
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(sorted(c, key=lambda x: (x[0], -x[1])))\n",
        "num_ids": 27
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = []\n    if not lst:\n        return result\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    \n    for row in lst:\n        try:\n            result.append((row.index(x), len(row) - row.index(x) - 1))\n        except ValueError:\n            pass\n        \n    return result\n    \ndef get_column(lst, x):\n    \"\"\"\n    See get_row.\n    \"\"\"\n    return get_row(lst, x)\n    \ndef get_section(lst, x):\n    \"\"\"\n    Get list of tuples, with coordinates for each column\n    x in the list.\n    \"\"\"\n    result = []\n    \n    for column in range(len(lst[0])):\n        result.extend(get_row(lst, lst[0][column]))\n    \n    result.sort(key=lambda x: (x[1], x[0]))\n    \n    return result\n    \ndef get_elements(lst, x):\n    \"\"\"\n    Get all elements which are present in the list\n    whose first two coordinates are x.\n    \"\"\"\n    result = []\n    \n    for element in lst:\n        if element[0] == x:\n            result.append(element[1])\n    \n    return result\n    \nif __name__ == '__main__':\n    lst = [[1, 2, 3, 4, 5, 6],\n           [1, 2, 3, 4, 1, 6],\n           [1, 2, 3, 4, 5, 1]]\n    print(get_row(lst, 2))\n    print(get_column(lst, 2))\n    print(get_section(lst, 2))\n    print(get_elements(lst, 2))",
        "num_ids": 437
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    lst_row = []\n    for i in range(len(lst)):\n        lst_row.append(i)\n    return sorted(sorted(sorted(lst_row, key=lambda x: x[0]), key=lambda x: x[1]), key=lambda x: x[0]*x[1])\n",
        "num_ids": 81
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Check for the length of the array\n    if len(array) < 1:\n        return array\n",
        "num_ids": 25
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(array)):\n        if array[i] <= array[i+1]:\n            continue\n        else:\n            j = 0\n            while j < len(array):\n                if array[j] > array[i]:\n                    array[j], array[i] = array[i], array[j]\n                j += 1\n",
        "num_ids": 84
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if array is None:\n        return None\n    else:\n        array = list(array)\n        if not array:\n            return None\n        \n        if sum(array) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n",
        "num_ids": 70
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    sorted_array = array[:]\n    for i in range(len(sorted_array)):\n        for j in range(len(sorted_array) - 1):\n            if sorted_array[j] > sorted_array[j + 1]:\n                sorted_array[j], sorted_array[j + 1] = sorted_array[j + 1], sorted_array[j]\n",
        "num_ids": 93
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(array)\n",
        "num_ids": 8
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # sort the given array\n    # reverse if the sum of first and last index are odd\n    # sort the given array in descending order if the sum of first and last index are even\n",
        "num_ids": 42
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # return sorted(array)\n    return sorted(array, key=lambda x: (x, -x) if sum(array) % 2 == 1 else (x, -x))\n",
        "num_ids": 43
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    odd = True\n    for i in range(len(array)):\n        if odd:\n            array[i] = array[i] * 2 + 1\n            odd = False\n        else:\n            array[i] = array[i] * 2\n            odd = True\n    return array\n",
        "num_ids": 69
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    array = array.copy()\n    array.sort()\n    sum = 0\n    for i in range(len(array)-1):\n        sum += array[i]\n    if sum % 2 == 1:\n        array.reverse()\n    return array\n",
        "num_ids": 60
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # write your code here\n    arr = copy.deepcopy(array)\n    n = len(arr)\n    if n == 0:\n        return arr\n    if n == 1:\n        return arr\n",
        "num_ids": 49
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # empty list of all characters in the alphabet\n    alphabet = list(string.ascii_lowercase)\n",
        "num_ids": 28
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    table = [i for i in range(len(s))]\n    res = \"\"\n    for i in s:\n        res += table[ord(i)-97]\n    return res\n",
        "num_ids": 45
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def encrypt(s):\n        # 1. Create a list of each character in the string\n        a = list(s)\n        # 2. Sort the list\n        a.sort()\n        # 3. Loop through the list, if the letter is a capital letter,\n        # move it down a value. If the letter is lower, move it down\n        # by one (half of the value)\n        for i in range(len(a)):\n            if a[i].isupper():\n                a[i] = chr(ord(a[i]) + 2)\n            else:\n                a[i] = chr(ord(a[i]) + 1)\n        # 4. Return the string as a whole\n        return ''.join(a)\n    return encrypt\n",
        "num_ids": 179
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    encrypt_str = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                encrypt_str += chr((ord(char) + 2) % 26 + ord('A'))\n            elif char.islower():\n                encrypt_str += chr((ord(char) + 2) % 26 + ord('a'))\n        else:\n            encrypt_str += char\n    return encrypt_str\n",
        "num_ids": 109
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            encrypted += alphabet[(alphabet.index(char)+2)%26]\n        else:\n            encrypted += char\n    return encrypted\n",
        "num_ids": 73
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    shifted = ''\n    for i in range(len(s)):\n        for j in range(len(alpha)):\n            if s[i] == alpha[j]:\n                shifted += alpha[(j+2) % len(alpha)]\n    return shifted\n",
        "num_ids": 84
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return s.upper()\n",
        "num_ids": 8
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    s = s.lower()\n    \n    def encrypt_let(let):\n        \n        # a to z = a, b to z = b\n        # A to Z = Z, Z to A = Z\n        if let in \"aeiou\":\n            return chr(ord(let)+2)\n        elif let in \"qwrtypsdfghjklzxcvbnm\":\n            return chr(ord(let)-2)\n        else:\n            return let\n    \n    return \"\".join(encrypt_let(let) for let in s)\n",
        "num_ids": 136
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s = s.lower()\n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    new_alphabet = alphabet[16:] + alphabet[:16]\n    new_alphabet_list = list(new_alphabet)\n    for i in range(len(s)):\n        if s[i] in new_alphabet:\n            index = new_alphabet.index(s[i])\n            new_alphabet_list[index] = s[i]\n    new_s = ''.join(new_alphabet_list)\n    return new_s\n",
        "num_ids": 143
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    list_str = list(s)\n    for i in range(len(list_str)):\n        if list_str[i] == 'a':\n            list_str[i] = 'e'\n        if list_str[i] == 'e':\n            list_str[i] = 'a'\n        if list_str[i] == 'i':\n            list_str[i] = 'o'\n        if list_str[i] == 'o':\n            list_str[i] = 'i'\n        if list_str[i] == 'u':\n            list_str[i] = 'i'\n    return ''.join(list_str)\n",
        "num_ids": 161
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # initialize the minimum to the first element\n    # if that element is the smallest, we've found the smallest\n    minimum = lst[0]\n    minimum_index = 0\n    \n    # find the minimum of the list\n    for i in range(1, len(lst)):\n        if lst[i] < minimum:\n            minimum = lst[i]\n            minimum_index = i\n    \n    # if there is no smallest, return None\n    if minimum == lst[minimum_index]:\n        return None\n    \n    # return the next smallest element\n    return lst[minimum_index + 1]\n    \ndef add(x, y):\n    \"\"\"\n    Given two ints, return their sum.\n    Except the integer 0, which is represented as -1\n    This time, return the integer as the result of adding\n    the absolute values of x and y.\n    \n    add(3, 5) == 8\n    add(3, -1) == 2\n    add(-1, 3) == 2\n    add(-2, 3) == 5\n    \"\"\"\n    \n    if x == 0 or y == 0:\n        return 0\n    \n    return abs(x) + abs(y)\n    \ndef max_sum(lst):\n    \"\"\"\n    Return the maximum possible sum that can be achieved from lst.\n    \n    max_sum([1, 2, 3, 4, 5]) == 10\n    max_sum([-1, 2, 3, 4, 5]) == 10\n    max_sum([-2, -3, 4, -5]) == 4\n    max_sum([0, 1, -2, 3, 4]) == 4\n    \"\"\"\n    \n    if not lst:\n        return 0\n    \n    current_sum = lst[0]\n    max_sum = lst[0]\n    \n    for i in range(1, len(lst)):\n        current_sum = max(current_sum + lst[i], lst[i])\n        max_sum = max(current_sum, max_sum)\n    \n    return max_sum\n    \ndef centered_average(lst):\n    \"\"\"\n    Given a list of ints, return the mean of the list\n    except return the mean for the interval (lst[i] - lst[i - 1], lst[i] + lst[i + 1]).\n    \n    centered_average([1, 2, 3, 4]) == 2\n    centered_average([1, 1, 5, 5, 10, 8, 7]) == 3.833333333333333\n    centered_average([-1, -2, -3, -4, -5]) == -3\n    centered_average([-100, -99, -98, -97, -96]) == -99\n    \"\"\"\n    \n    if not lst:\n        return None\n    \n    if len(lst) < 2:\n        return None\n    \n    sum_lst = sum(lst)\n    count_lst = len(lst)\n    sum_diff = 0\n    \n    for i in range(1, len(lst)):\n        sum_diff += abs(lst[i] - lst[i - 1])\n        \n    return sum_lst / count_lst - (sum_diff / (2 * count_lst))\n    \ndef get_bigger_index(lst):\n    \"\"\"\n    Given a list of ints, return the index of the largest element.\n    \n    get_bigger_index([1, 2, 3, 4]) == 3\n    get_bigger_index([1, 2, 3, 4, 5]) == 4\n    get_bigger_index([1, 2, 3, 5, 5, 5]) == 5\n    get_bigger_index([3, 5, 7, 3, 2, 3]) == 3\n    \"\"\"\n    \n    if not lst:\n        return None\n    \n    max_num = lst[0]\n    max_num_index = 0\n    \n    for i in range(1, len(lst)):\n        if lst[i] > max_num:\n            max_num = lst[i]\n            max_num_index = i\n    \n    return max_num_index\n    \ndef search(lst, target):\n    \"\"\"\n    Given a list of in",
        "num_ids": 1025
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst) == 0: return None\n    if len(lst) == 1: return lst[0]\n    if len(lst) == 2: return min(lst)\n    \n    for i in range(len(lst)):\n        if lst[i] < lst[i + 1]:\n            return lst[i + 1]\n        \ndef longest_path(matrix):\n    \"\"\"\n    Given a matrix representing a graph, return the length of the longest path in the graph.\n    A path is a sequence of adjacent nodes in a graph, where there is exactly one node for each edge in the graph.\n    If a path exists from vertex 0 to vertex v, then the path starts with 0 and ends with v.\n    \n    longest_path([[0, 1, 0],\n                  [0, 0, 1],\n                  [1, 1, 0]]) == 4\n    longest_path([[0, 0, 0, 1, 1, 0],\n                  [0, 0, 1, 1, 1, 0],\n                  [0, 0, 0, 0, 0, 0],\n                  [1, 1, 1, 1, 1, 1],\n                  [0, 0, 0, 0, 0, 0],\n                  [0, 0, 0, 0, 0, 0]]) == 10\n    longest_path([]) == 0\n    \"\"\"\n    if len(matrix) == 0: return 0\n    \n    if len(matrix[0]) == 0: return 0\n    \n    if len(matrix) == 1 and len(matrix[0]) == 1:\n        return 1 if matrix[0][0] == 1 else 0\n    \n    graph = [[0 for j in range(len(matrix[0]))] for i in range(len(matrix))]\n    \n    # for the first row\n    for i in range(len(matrix[0])):\n        if matrix[0][i] == 1:\n            graph[0][i] = 1\n            \n    # for the first column\n    for i in range(len(matrix)):\n        if matrix[i][0] == 1:\n            graph[i][0] = 1\n            \n    # for all the rest of the 2D matrix\n    for i in range(1, len(matrix)):\n        for j in range(1, len(matrix[0])):\n            if matrix[i][j] == 1:\n                graph[i][j] = graph[i-1][j] + 1\n                \n    # taking the max\n    max_path = max(graph)\n    \n    return max_path\n",
        "num_ids": 616
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # TODO\n    # return None\n",
        "num_ids": 11
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(lst) == 0: return None\n    if len(lst) == 1: return lst[0]\n    \n    # O(N)\n    def sort(n):\n        lst_sort = sorted(lst, key=lambda k: k)\n        if n == 1: return lst_sort[1]\n        else:\n            if n > len(lst): return lst_sort[1]\n            lst_sort[1] = lst_sort[n]\n            return lst_sort[1]\n    \n    return sort(2)\n",
        "num_ids": 139
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return None\n    return min(lst[1:], key=lambda x: x)\n    \ndef next_smallest2(lst):\n    \"\"\"\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    min_idx = lst.index(min(lst))\n    if min_idx == len(lst) - 1:\n        return min(lst[1:], key=lambda x: x)\n    else:\n        return min(lst[min_idx + 1:], key=lambda x: x)\n    \ndef next_smallest_simple(lst):\n    \"\"\"\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    return sorted(lst)[1]\n    \ndef next_smallest_simple_test():\n    print(next_smallest_simple([1, 2, 3, 4, 5]))\n    print(next_smallest_simple([5, 1, 4, 3, 2]))\n    print(next_smallest_simple([1, 1]))\n    print(next_smallest_simple([]))\n    print(next_smallest_simple([3, 2, 1]))\n    \ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    \ndef test_next_smallest2():\n    assert next_smallest2([1, 2, 3, 4, 5]) == 2\n    assert next_smallest2([5, 1, 4, 3, 2]) == 2\n    assert next_smallest2([]) == None\n    assert next_smallest2([1, 1]) == None\n    \ndef test_next_smallest_simple():\n    assert next_smallest_simple([1, 2, 3, 4, 5]) == 2\n    assert next_smallest_simple([5, 1, 4, 3, 2]) == 2\n    assert next_smallest_simple([1, 1]) == None\n    assert next_smallest_simple([]).__class__ == list\n    \ntest_next_smallest_simple_test()\ntest_next_smallest()\ntest_next_smallest2()\n",
        "num_ids": 748
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return None\n    lst.sort()\n    return lst[1]\n",
        "num_ids": 31
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    def compare(i):\n        return lst[i]\n    \n    if len(lst) == 0:\n        return None\n    \n    lst.sort(key=compare)\n    return lst[0]\n    \n    #Solution\n    \n    \"\"\"\n    def next_smallest(lst):\n        if not lst:\n            return None\n        \n        smallest = lst[0]\n        for num in lst:\n            if num < smallest:\n                smallest = num\n        return smallest\n    \"\"\"\n",
        "num_ids": 130
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return None\n    else:\n        return sorted(lst)[1]\n",
        "num_ids": 30
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def next(lst):\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i+1]:\n                return lst[i+1]\n        return None\n",
        "num_ids": 54
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    words = S.split('.')\n    count = 0\n    for word in words:\n        if word[0] == 'I':\n            count += 1\n    return count\n    \n",
        "num_ids": 45
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    words = S.split()\n    for word in words:\n        if word == \"I\":\n            return True\n    return False\n    \n",
        "num_ids": 34
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum(1 for s in S if s == \"I\")\n",
        "num_ids": 17
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n",
        "num_ids": 6
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(0,len(S)):\n        if S[i] == 'I':\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return S.count(\"I\")\n",
        "num_ids": 10
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return S.count(\"I\")\n",
        "num_ids": 10
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for x in S.split(\".\"):\n        if \"I\" in x:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    count = 0\n    words = S.split()\n    for w in words:\n        if w.startswith(\"I\"):\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    bored = 0\n    for word in S.split():\n        if word == \"I\":\n            bored += 1\n    return bored\n",
        "num_ids": 34
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return(type(x) == int and type(y) == int and type(z) == int and x+y+z == y+z+x and x == y and x == z)\n",
        "num_ids": 46
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (x + y) == z and (x == int(x) and y == int(y))\n",
        "num_ids": 26
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return bool(x == y + z and int(x) == int(y) and int(x) == int(z))\n",
        "num_ids": 31
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    return (x+y)==(y+z) and all(type(i)==int for i in [x,y,z])\n",
        "num_ids": 36
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int:\n        return x == (y + z) and all([type(n) == int for n in [x, y, z]])\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x == y + z and type(x) == int and type(y) == int and type(z) == int\n",
        "num_ids": 30
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int:\n        if x + y == z:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (x==y+z and type(x)==int and type(y)==int and type(z)==int)\n  ",
        "num_ids": 33
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if x==y+z and type(x)==int and type(y)==int and type(z)==int:\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x + y == z and type(x) == int and type(y) == int and type(z) == int\n",
        "num_ids": 30
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # TODO: Write your code here\n    message = message.lower()\n    for i in range(0,len(message)):\n        if message[i] == \"a\" or message[i] == \"e\" or message[i] == \"i\" or message[i] == \"o\" or message[i] == \"u\":\n            message = message[:i] + message[i+2] + message[i+1:]\n    return message\n",
        "num_ids": 107
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return ''.join([a if i < 2 else b for i, (a,b) in enumerate(zip(message,message[1:]))])\n",
        "num_ids": 37
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    output = ''\n    for letter in message:\n        if letter.isalpha():\n            if letter.isupper():\n                if letter.lower() in \"aeiou\":\n                    new_letter = letter.lower()\n                    letter = letter.upper()\n                    output += new_letter\n            else:\n                new_letter = letter.upper()\n                letter = letter.lower()\n                output += new_letter\n        else:\n            output += letter\n    return output\n",
        "num_ids": 109
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    vowels = 'aeiou'\n    message = message.lower()\n    result = ''\n    for character in message:\n        if character not in vowels:\n            result += character\n            continue\n        # Using the character, replace the vowel with the letter that appears \n        # 2 places ahead of that vowel in the english alphabet. \n        result += alphabet[alphabet.index(character) + 2]\n    return result.upper()\n",
        "num_ids": 103
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    new = \"\"\n    for letter in message:\n        if letter.isalpha():\n            if letter in 'aeiou':\n                new += '2'+ letter\n            else:\n                new += letter\n        else:\n            new += letter\n    return new\n",
        "num_ids": 62
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return message.upper()\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert type(message) == str, 'The message must be a string'\n    swap = 'aeiou'\n    for i in range(len(message)):\n        if message[i] in swap:\n            message = message[:i] + message[i].swapcase() + message[i+1:]\n            # swap = swap.replace(message[i], message[i+1])\n    return message\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('THKS KS C MGSSCGG')\n    'test'\n    \"\"\"\n    assert type(message) == str, 'The message must be a string'\n    swap = 'aeiou'\n    for i in range(len(message)):\n        if message[i] in swap:\n            message = message[:i] + message[i].swapcase() + message[i+1:]\n            # swap = swap.replace(message[i], message[i+1])\n    return message",
        "num_ids": 316
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    string = message.lower()\n    arr = []\n    for i in range(len(string)):\n        if string[i] in 'aeiou':\n            arr.append(string[i])\n            arr.append(string[i+2])\n    return ''.join(arr)\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print('\\n*** ALL TESTS PASSED!\\n')",
        "num_ids": 119
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    result = []\n    \n    for char in message:\n        if char in 'aeiou':\n            result.append(char)\n        else:\n            result.append(char.lower())\n            \n    return ''.join(result)\n",
        "num_ids": 60
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Code here\n    pass\n",
        "num_ids": 9
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Get the largest prime\n    # Loop over the list\n    # Find the index of the largest prime, add the digits of this prime to the sum\n    # Go to the next element, go back to the element before the current element, and keep going until you reach the end of the list\n    \n    prime = None\n    max_len = None\n    max_digits = None\n    for i, x in enumerate(lst):\n        # Check for prime\n        if all(x % i!= 0 for i in range(2, x)):\n            prime = x\n            break\n        # Check for max length and digits\n        if max_len == None or len(str(x)) > max_len:\n            max_digits = x\n            max_len = len(str(x))\n    # sum all the digits\n    result = 0\n    for i in range(len(str(prime))):\n        result += int(str(prime)[i])\n    return result\n    ",
        "num_ids": 227
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def is_prime(x):\n        if x > 1:\n            for i in range(2, x // 2):\n                if (x % i) == 0:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    prime_nums = []\n    for i in range(0, len(lst)):\n        if is_prime(lst[i]):\n            prime_nums.append(lst[i])\n    max_prime = max(prime_nums)\n    return sum([int(c) for c in str(max_prime)])\n",
        "num_ids": 143
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    number = [1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0]\n    for x in lst:\n        flag = False\n        for i in range(0,len(number)):\n            if x % number[i] == 0:\n                flag = True\n                break\n        if flag:\n            continue\n        else:\n            lst.append(x)\n    lst = sorted(lst,key=lambda x:x%10)\n    n = 0\n    for i in lst:\n        n = n + i%10\n    return n\n",
        "num_ids": 159
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst = [0] + lst + [1]\n    for i in range(2,len(lst)):\n        while lst[i]!= 0:\n            lst[i] = 0\n            for j in range(i*2,len(lst)):\n                if lst[j]!= 0 and lst[j] % i == 0:\n                    lst[j] = 0\n    max_i = 0\n    for i in range(len(lst)):\n        if lst[i]!= 0:\n            max_i = lst[i]\n            break\n    return sum([int(x) for x in str(max_i)])\n",
        "num_ids": 165
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in lst:\n        if i==0:\n            i=i+1\n        if is_prime(i):\n            i=i+1\n            n=0\n            while(i>=10):\n                n=n+(int(i%10))\n                i=i//10\n            print(n)\n        else:\n            i=i+1\n",
        "num_ids": 89
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    m=0\n    for i in lst:\n        if i==0:\n            continue\n        for j in str(i):\n            if int(j)>=m:\n                m=int(j)\n    return sum(list(map(int,list(str(m)))))\n",
        "num_ids": 70
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    big_num = 1000000000000\n    for i in lst:\n        if(isPrime(i)):\n            big_num = max(big_num,i)\n    print(big_num)\n    sum_of_digits = 0\n    while(big_num > 0):\n        sum_of_digits = sum_of_digits + int(big_num % 10)\n        big_num = int(big_num / 10)\n    return sum_of_digits\n",
        "num_ids": 117
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    primes = primes_list_in_range(min(lst), max(lst)+1)\n    dp = [[0]*10 for _ in range(len(lst))]\n    for i, x in enumerate(lst):\n        dp[i][0] = max(0, x)\n        dp[i][1] = max(0, x-1)\n        dp[i][2] = max(0, x-2)\n        dp[i][3] = max(0, x-3)\n        for j in range(4, 9):\n            dp[i][j] = max(0, x-j)\n        for j in range(4, 7):\n            dp[i][j] = max(0, x-j)\n    \n    # for i in range(len(lst)):\n    #     print(lst[i], dp[i])\n    \n    for i in range(1, len(lst)):\n        for j in range(10):\n            if j < dp[i-1][j]:\n                dp[i][j] = dp[i-1][j]\n            elif j == dp[i-1][j]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j]+1)\n    # print(dp)\n    return max(map(max, dp))\n",
        "num_ids": 334
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    lst = [2,7,12,1,21,2,3]\n    res = 0\n    for i in lst:\n        if i!= 0 and i!= 1:\n            while i > 0:\n                if i % 10 == 0:\n                    i /= 10\n                else:\n                    break\n            res += i\n    return res\n",
        "num_ids": 85
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(dict) == 0:\n        return False\n    for key, val in dict.items():\n        if type(key) is not str:\n            return False\n        if type(val) is not str:\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # If dictionary is empty return false\n    if len(dict) == 0:\n        return False\n    # Else return true if key is a string\n    for key in dict:\n        if type(key) is not str:\n            return False\n        else:\n            if type(dict[key]) is not str:\n                return False\n    return True\n",
        "num_ids": 82
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return not dict or all(isinstance(key, str) for key in dict.keys()) and all(isinstance(key, str) for key in dict.keys())\n",
        "num_ids": 40
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return isinstance(dict, dict) and all(isinstance(k, str) for k in dict.keys()) and all(k.lower() == k or k.upper() == k for k in dict.keys())\n",
        "num_ids": 51
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if dict == {}:\n        return False\n    if dict == None:\n        return False\n    dict_keys = dict.keys()\n    if dict_keys!= None:\n        for x in dict_keys:\n            if type(x)!= str:\n                return False\n        return True\n    return False\n    \nif __name__ == \"__main__\":\n    d = {\"a\":\"apple\", \"b\":\"banana\"}\n    print(check_dict_case(d))\n    d = {\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}\n    print(check_dict_case(d))\n    d = {\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}\n    print(check_dict_case(d))\n    d = {\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}\n    print(check_dict_case(d))\n    d = {\"STATE\":\"NC\", \"ZIP\":\"12345\" }\n    print(check_dict_case(d)",
        "num_ids": 237
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(dict) == 0:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if dict == {}:\n        return False\n    return all(isinstance(key, str) and key.islower() or key.isupper() for key in dict.keys())\n",
        "num_ids": 43
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        elif key.isupper():\n            continue\n        elif key.islower():\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(dict) == 0:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if dict == {}:\n        return False\n    for key in dict:\n        if type(key)!= str or type(dict[key])!= str:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    primes = [2, 3, 5, 7]\n    primes_up_to = []\n    for i in range(n + 1):\n        if (i > 2) and (i % 3 == 0):\n            continue\n        if i > 5:\n            for j in range(5):\n                if primes[j] > i ** 0.5:\n                    break\n            else:\n                primes_up_to.append(i)\n        else:\n            primes_up_to.append(i)\n    return primes_up_to\n    \ndef test_count_up_to():\n    assert count_up_to(0) == []\n    assert count_up_to(1) == []\n    assert count_up_to(2) == [2]\n    assert count_up_to(3) == [2,3]\n    assert count_up_to(5) == [2,3,5]\n    assert count_up_to(7) == [2,3,5,7]\n    assert count_up_to(8) == [2,3,5,7,11]\n    assert count_up_to(11) == [2,3,5,7,11,13]\n    assert count_up_to(13) == [2,3,5,7,11,13,17]\n    assert count_up_to(17) == [2,3,5,7,11,13,17,19]\n    assert count_up_to(19) == [2,3,5,7,11,13,17,19]\n    assert count_up_to(1000000) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n    assert count_up_to(3) == [2,3]\n    assert count_up_to(4) == [2,3,5]\n    assert count_up_to(6) == [2,3,5,7]\n    assert count_up_to(9) == [2,3,5,7,11]\n    assert count_up_to(12) == [2,3,5,7,11,13]\n    assert count_up_to(15) == [2,3,5,7,11,13,17]\n    assert count_up_to(17) == [2,3,5,7,11,13,17]\n    assert count_up_to(20) == [2,3,5,7,11,13,17,19]\n    assert count_up_to(21) == [2,3,5,7,11,13,17,19,23]\n    assert count_up_to(30) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61",
        "num_ids": 1024
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    primes = [2,3,5,7,11,13,17]\n    if n <= len(primes) - 1:\n        return primes[:n]\n    return primes[1:]\n",
        "num_ids": 51
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 2:\n        return []\n    \n    if n == 2:\n        return [2]\n    \n    prime_list = is_prime(n)\n    prime_count = 1\n    \n    for i in range(1, prime_list[-1] + 1):\n        if prime_list[prime_count - 1] <= n:\n            if n % prime_list[prime_count - 1] == 0:\n                return []\n            n = n - prime_list[prime_count - 1]\n            prime_count += 1\n    \n    return prime_list[:prime_count]\n",
        "num_ids": 144
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    prime_list = []\n    while count < n:\n        count += 1\n        prime = True\n        for divisor in range(2, count):\n            if count % divisor == 0:\n                prime = False\n                break\n        if prime:\n            prime_list.append(count)\n    return prime_list\n",
        "num_ids": 83
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    primes = [2]\n    if n <= 2:\n        return primes\n    for i in range(3, n+1):\n        for j in primes:\n            if j >= i and i%j == 0:\n                break\n        else:\n            primes.append(i)\n    return primes\n",
        "num_ids": 76
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return []\n    prime_list = list(range(2, n))\n    for i in range(len(prime_list) - 1):\n        if prime_list[i]!= 1 and i!= 0:\n            j = prime_list[i]\n            while j < prime_list[i + 1]:\n                prime_list[j] = 0\n                j += prime_list[i]\n    prime_list = [x for x in prime_list if x > 1]\n    return prime_list\n",
        "num_ids": 128
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    if n == 0:\n        return []\n    \n    primes = []\n    for i in range(2, n):\n        if all(i%j!= 0 for j in primes):\n            primes.append(i)\n            \n    return primes\n",
        "num_ids": 66
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n < 1:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    arr = []\n",
        "num_ids": 6
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return a*b % 10\n",
        "num_ids": 9
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return int(str(a * b)[0]) * int(str(a * b)[1])\n",
        "num_ids": 25
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return int(str(a) * str(b))\n",
        "num_ids": 15
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a < 10 and b < 10:\n        return a*b\n    else:\n        return (a%10)*(b%10)\n    \n    \ndef e(s):\n    \"\"\"The first element in the list is the number of strings in the \n    list. The second element in the list is the number of valid strings in\n    the list. Assume the input is always valid.\n    Examples:\n    e(['hello', 'world', 'dear', 'do', 'not', 'fear']) should return\n    [2, 4].\n    e(['a', 'b', 'c', 'a', 'a', 'a']) should return\n    [3, 2].\n    e(['yo', 'yo', 'a', 'yo']) should return\n    [1, 2].\n    \"\"\"\n    c = []\n    for i in range(len(s)):\n        if s[i] not in c:\n            c.append(s[i])\n    return [len(c), sum(1 for j in range(len(c)) if len(s[j])%2 == 0)]\n",
        "num_ids": 261
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    a = str(a)\n    b = str(b)\n    a = int(a)\n    b = int(b)\n    return int(a * b)\n",
        "num_ids": 44
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    num1 = \"\"\n    num2 = \"\"\n    product = \"\"\n    for i in range(len(a)):\n        num1 += str(a)[i]\n    for i in range(len(b)):\n        num2 += str(b)[i]\n    product += str(int(num1)*int(num2))\n    product = product[::-1]\n    for i in range(len(product)):\n        if product[i] == \"0\":\n            product = product[:i]\n    return int(product)\n",
        "num_ids": 129
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return int(str(a) * str(b))\n",
        "num_ids": 15
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    a = str(a)\n    b = str(b)\n    return int(a[0]) * int(b[0]) * int(a[-1]) * int(b[-1])\n",
        "num_ids": 49
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return int(str(a) + str(b))\n",
        "num_ids": 15
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here.\n    count = 0\n    for i in range(len(s)):\n        if ord(s[i]) in range(65, 91):\n            if i % 2 == 0:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(1, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    vowels = set(['A', 'E', 'I', 'O', 'U'])\n    \n    res = 0\n    curr = 0\n    while curr < len(s):\n        if s[curr] in vowels:\n            res += 1\n        curr += 2\n    return res\n",
        "num_ids": 75
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = s.replace(' ', '')\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(0, len(s)):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(s[i].upper() in 'AEIOU' for i in range(0, len(s), 2))\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n        if i % 2 == 0:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    return sum([1 if s[i].isupper() and s[i+1].isupper() else 0 for i in range(0, len(s), 2)])\n    \nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\nprint(count_upper('dBBE'))",
        "num_ids": 81
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    int_value = int(value)\n",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = int(value)\n    if abs(result) == abs(int(value)):\n        return int(value)\n    else:\n        if abs(result) < abs(int(value)):\n            return int(value)\n        else:\n            return int(value) - 1\n",
        "num_ids": 70
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if value in (\"-0\", \"0\"):\n        return 0\n    else:\n        return int(round((int(value) / 10) * 10))\n",
        "num_ids": 39
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return int(round(value))\n",
        "num_ids": 10
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # TODO\n    return\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. GO YOU!\\n\")",
        "num_ids": 59
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    num = float(value)\n    if num - int(num) == 0:\n        return int(num)\n    else:\n        return int(num) + 1\n",
        "num_ids": 41
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def closest_integer_recur(value, integer, frac):\n        if float(value) == integer:\n            return integer\n        elif float(value) < integer:\n            return closest_integer_recur(value, integer - frac, frac)\n        else:\n            return closest_integer_recur(value, integer + frac, frac)\n    return closest_integer_recur(value, 0, 0.1",
        "num_ids": 103
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return int(round(float(value)))\n",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    a, b = float(value), int(value)\n    return int(a) if abs(a - b) > abs(a - int(a)) else int(b)\n",
        "num_ids": 43
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    import math\n    \n    value = float(value)\n    closest = -math.inf\n",
        "num_ids": 25
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n - 1) + make_a_pile(n - 1)\n        else:\n            return make_a_pile(n - 1) + make_a_pile(n - 1) + make_a_pile(n - 1)\n",
        "num_ids": 139
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    elif n == 3:\n        return [1, 2, 3]\n    else:\n        result = make_a_pile(n-2) + make_a_pile(n-1) + make_a_pile(n-2)\n        return result\n",
        "num_ids": 95
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n % 2 == 0:\n        return [n] + make_a_pile(n + 2)\n    else:\n        return [n + 1] + make_a_pile(n + 2)\n",
        "num_ids": 52
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for level in range(1, n+1):\n        if n % 2 == 0:\n            result.append(n+1)\n        else:\n            result.append(n)\n        n = n + 2\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    piles = []\n    i = 1\n    while i < n+1:\n        if n % 2 == 1:\n            piles.append(i * (n - i + 1)//2)\n        else:\n            piles.append(i * (n - i)//2)\n        i += 1\n    return piles\n",
        "num_ids": 79
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # set up list for results\n    piles = []\n    # set up var for the index\n    index = 0\n    # loop to make the pile of stones\n    while True:\n        # the next odd number\n        if index == n:\n            break\n        # the next even number\n        if index == n - 1:\n            piles.append(n)\n            break\n        # if n is even, add an even number\n        elif index % 2 == 0:\n            piles.append(n)\n            break\n        # if n is odd, add an odd number\n        elif index % 2!= 0:\n            piles.append(n + 1)\n            break\n        index += 1\n    return piles\n",
        "num_ids": 169
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return [1]\n",
        "num_ids": 14
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [n] + make_a_pile(n - 1) if n % 2 == 1 else make_a_pile(n // 2)\n",
        "num_ids": 37
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n < 1:\n        return\n",
        "num_ids": 11
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not n > 0:\n        return []\n    if n % 2 == 0:\n        return make_a_pile(n - 2) + [n]\n    return make_a_pile(n - 2) + [n - 2, n]\n",
        "num_ids": 62
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    return s.split(', ')",
        "num_ids": 12
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    s = s.split()\n    return s\n",
        "num_ids": 13
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    words = s.split()\n    return words\n",
        "num_ids": 13
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your Code Here\n    return s.split()\n",
        "num_ids": 14
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    words = s.split(\" \")\n    return words\n    \n    ",
        "num_ids": 18
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    return s.split()\n    \n",
        "num_ids": 12
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    words = s.split(', ')\n    return words\n",
        "num_ids": 16
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # replace this with your code\n",
        "num_ids": 9
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n = x\n    while n < y:\n        n += 2\n        if n % 2 == 0:\n            return n\n    return -1\n",
        "num_ids": 36
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = -1\n    if x <= y:\n        return res\n    else:\n        for i in range(x, y+1):\n            if i % 2 == 0:\n                res = i\n        return res\n",
        "num_ids": 53
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # YOUR CODE GOES HERE\n    x = int(x)\n    y = int(y)\n    number = y\n    while number > x:\n        if number%2 == 0:\n            return number\n        number -= 1\n    return -1\n",
        "num_ids": 60
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n",
        "num_ids": 32
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if x == y:\n        return -1\n    elif x > y:\n        if y % 2 == 0:\n            return y\n        else:\n            return -1\n    else:\n        if x % 2 == 0:\n            return x\n        else:\n            return -1",
        "num_ids": 68
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(x, y + 1):\n        if is_even(i):\n            return i\n    return -1\n",
        "num_ids": 32
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        if x > y:\n            return -1\n        elif x < y:\n            return (x - 1) if x - 1 >= 0 else -1\n        else:\n            return y if y - 1 >= 0 else -1\n",
        "num_ids": 86
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    i = x + 1\n    while i <= y:\n        if is_even(i):\n            return i\n        i += 2\n",
        "num_ids": 33
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return int(bin(round(n + m) / 2).replace('0b', '0'))\n",
        "num_ids": 26
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    rounded_avg = 0\n    if n > m:\n        rounded_avg = -1\n    elif n == m:\n        rounded_avg = (n + 1) // 2\n    elif n == m - 1:\n        rounded_avg = m\n    elif n < m:\n        rounded_avg = (n + m + 1) // 2\n",
        "num_ids": 89
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return int(binary_string(int(binary_string(n) + binary_string(m)), 32), 2)\n",
        "num_ids": 29
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n > m:\n        return -1\n    return (bin(n + (m - n))[2:])\n",
        "num_ids": 30
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # <your code here>\n    rounded_avg = (n + m - 1) // 2\n    return '0b' + str(rounded_avg)\n",
        "num_ids": 40
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    rounded_avg = ((n+m)/2) - int(math.floor((n+m)/2))\n    if rounded_avg < 0:\n        return -1\n    rounded_avg = int(math.floor(rounded_avg))\n    return bin(rounded_avg)[2:]\n",
        "num_ids": 73
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n > m:\n        return -1\n    elif n == m:\n        return 0\n    else:\n        return int(f\"0b{int((n + m)/2):08b}\", 2)\n",
        "num_ids": 53
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n > m:\n        return -1\n    else:\n        return (bin(int(round(n+m)/2))[2:]).zfill(int(n+m)//2)\n",
        "num_ids": 49
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n < m:\n        return -1\n    else:\n        return (int((n + m) / 2))",
        "num_ids": 29
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n >= m:\n        return -1\n    else:\n        return round(n + m / 2)\n",
        "num_ids": 28
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n    for i in x:\n        if not any(map(lambda x: x%2==0, i)):\n            result.append(i)\n    return sorted(result)\n",
        "num_ids": 48
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted([n for n in x if len(str(n)) % 2 == 0])\n",
        "num_ids": 23
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    x_set = set(x)\n    return sorted(list(x_set))\n",
        "num_ids": 22
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    return sorted([num for num in x if any(num % i == 0 for i in range(1, 10))])\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. YOU CAUGHT ALL THE STRAY DIGITS!\\n\"",
        "num_ids": 90
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    # Your code here\n    \n    for i in x:\n        d=list(str(i))\n        if int(d[0])%2==0:\n            continue\n        else:\n            return x\n    return []\n",
        "num_ids": 57
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sorted_x = sorted(x)\n    even_digits = set()\n    for i in range(len(sorted_x)):\n        if is_even(sorted_x[i]):\n            even_digits.add(sorted_x[i])\n    return sorted_x\n",
        "num_ids": 73
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(filter(lambda y: not any(x%x for x in map(int, str(y))), sorted(x)))\n",
        "num_ids": 33
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    lst = []\n    for i in x:\n        s = str(i)\n        for c in s:\n            if c % 2 == 0:\n                break\n        else:\n            lst.append(i)\n    return sorted(lst)\n",
        "num_ids": 62
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    digits = []\n    for item in x:\n        if len(str(item)) % 2 == 0:\n            digits.append(item)\n",
        "num_ids": 37
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your Code Here\n",
        "num_ids": 7
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if arr == []:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return ['Nine' if i >= 10 else str(i) if i < 10 else 'One' for i in sorted(arr)]\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # your code here\n    return sorted(sorted(arr), reverse=True",
        "num_ids": 19
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not arr:\n        return []\n    arr.sort()\n    return''.join([get_digit(i) for i in arr]).split()\n",
        "num_ids": 36
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    arr.sort()\n    arr.reverse()\n    dict_str = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    \n    return [dict_str[i] for i in arr]\n",
        "num_ids": 83
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def by_length_rec(arr, length, result):\n        if length == 1:\n            result.append(DIGITS_BY_LENGTH[length])\n            return result\n        for i in range(1, 10):\n            if i == 1:\n                by_length_rec(arr, length - 1, result)\n            if i == 9:\n                by_length_rec(arr, length - 1, result)\n            elif len(arr) >= i and arr[i - 1] <= i:\n                result.append(DIGITS_BY_LENGTH[length])\n                by_length_rec(arr, length - 1, result)\n            else:\n                continue\n        return result\n",
        "num_ids": 165
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not arr: return []\n    \n    arr.sort()\n    arr.reverse()\n    names = {\n        1: 'One',\n        2: 'Two',\n        3: 'Three',\n        4: 'Four',\n        5: 'Five',\n        6: 'Six',\n        7: 'Seven',\n        8: 'Eight',\n        9: 'Nine'\n    }\n    \n    return list(map(lambda x: names.get(x, x), arr))\n",
        "num_ids": 116
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return_array = []\n    if len(arr) > 0:\n        for i in range(1, 10):\n            if i in arr:\n                length = arr.count(i)\n                reverse_arr = list(arr)\n                reverse_arr.reverse()\n                reverse_arr = list(filter(lambda a: a!= i, reverse_arr))\n                reversed_arr = reversed_arr[::-1]\n                reversed_arr = list(map(lambda a: str(a), reversed_arr))\n                return_array.extend([str(i) * length])\n                return_array.extend(reversed_arr)\n        return_array.extend(arr)\n    return return_array\n",
        "num_ids": 173
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Find out how many numbers are in the input array\n    length = len(arr)\n    \n    # Sort the numbers in the input array\n    arr.sort()\n",
        "num_ids": 40
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #brute force\n    def letter_by_digit(n):\n        return 'One' if n == 1 else 'Two' if n == 2 else 'Three' if n == 3 else 'Four' if n == 4 else 'Five' if n == 5 else 'Six' if n == 6 else 'Seven' if n == 7 else 'Eight' if n == 8 else 'Nine'\n    \n    def letter_by_length(n):\n        return n if n == 0 else letter_by_length(n//10) + letter_by_digit(n%10)\n    \n    arr = sorted(arr)\n    return [letter_by_length(x) for x in arr]\n    ",
        "num_ids": 159
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(n):\n        result.append(sum(x for x in range(1, i + 1) if i % 2 == 0))\n        if i % 2 == 1:\n            result.append(1)\n    return result\n",
        "num_ids": 63
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    res = []\n    for i in range(n):\n        if i % 2 == 0:\n            res.append(1)\n        else:\n            res.append(i + 1)\n    return res\n",
        "num_ids": 50
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    a = list(range(1, n+1))\n    for i in range(1, n):\n        if i % 2 == 1:\n            a[i] = a[i] * i\n    return a\n",
        "num_ids": 52
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 1:\n        return [1]\n",
        "num_ids": 14
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(int(factorial(i)))\n        else:\n            res.append(int(i + factorial(i - 1)))\n    return res\nprint(f(5))\nprint(f(3))",
        "num_ids": 79
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n < 0:\n        return None\n    elif n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        res = []\n        for i in range(1, n):\n            if i % 2 == 0:\n                res.append(i)\n        return f(n - 1) + f(n - 1)\n",
        "num_ids": 91
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return [1]\n",
        "num_ids": 14
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    ans = []\n    if n < 1:\n        return ans\n    if n == 1:\n        return [1]\n    else:\n        ans = f(n-1)\n        return [(n%2)*x + (1-n%2)*y for x,y in zip(ans, [1] + ans)]\n",
        "num_ids": 77
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    a = []\n    for i in range(1, n + 1):\n        a.append(i * (i + 1) // 2)\n    return a\n",
        "num_ids": 39
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    f = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            f.append(i * f(i-1))\n        else:\n            f.append(i)\n    return f\n    \ndef g(n):\n    \"\"\" Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the number of times i appears\n    in the list.\n    Example:\n    g(5) == [1, 1, 2, 2, 3]\n    \"\"\"\n    g = []\n    for i in range(1, n + 1):\n        g.append(0)\n        for j in range(1, i + 1):\n            if j == i:\n                g[i] += 1\n    return g\n",
        "num_ids": 196
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # brute force\n    # O(n^2)\n    # even_count, odd_count = 0, 0\n    # for i in range(1, n + 1):\n    #     for j in range(i, n + 1):\n    #         if str(i) == str(i)[::-1] and i % 2 == 0:\n    #             even_count += 1\n    #         else:\n    #             odd_count += 1\n    # return (even_count, odd_count)\n",
        "num_ids": 120
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        even = dp[i]\n        odd = 0\n        for j in range(i, n + 1, i):\n            if j % i == 0:\n                odd += 1\n            else:\n                odd = 0\n            dp[j] = max(even, odd)\n",
        "num_ids": 92
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    even_count, odd_count = 0, 0\n    for n in range(1, n + 1):\n        n_str = str(n)\n        even_odd = True if n_str[::2] == n_str[1::2] else False\n        if even_odd:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n",
        "num_ids": 100
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Using math.ceil() for integer rounding, which returns the ceiling of a number.\n    # pylint: disable=invalid-name\n    # https://docs.python.org/3/library/math.html#math.ceil\n    return len(list(filter(lambda x: x % 2 == 0, list(range(1, n + 1))))), len(list(filter(lambda x: x % 2!= 0, list(range(1, n + 1))))),\n",
        "num_ids": 114
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        str_i = str(i)\n        \n        if is_palindrome(str_i) and is_even(i):\n            even_count += 1\n        elif is_palindrome(str_i) and is_odd(i):\n            odd_count += 1\n    \n    return (even_count, odd_count)\n",
        "num_ids": 111
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count_even = count_odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return count_even, count_odd\n",
        "num_ids": 73
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    evens = odds = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n    return (evens, odds)\n",
        "num_ids": 67
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # O(n)\n    count_even = 0\n    count_odd = 0\n",
        "num_ids": 22
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        num = i\n        rev = 0\n        while num > 0:\n            rev = rev * 10 + num % 10\n            num = num // 10\n        if rev == i and i % 2 == 0:\n            count += 1\n        if rev == i and i % 2!= 0:\n            count += 1\n    return (count, n - count)\n",
        "num_ids": 101
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Solution using Dynamic Programming\n    even_palindrome_count, odd_palindrome_count = 0, 0\n    for i in range(2, n + 1):\n        # even_palindrome_count\n        even_palindrome_count += i // 2\n        # odd_palindrome_count\n        odd_palindrome_count += i - (i // 2) * 2\n",
        "num_ids": 94
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    cnt = 0\n    for num in arr:\n        tmp = 0\n        for i in str(num):\n            if int(i) < 0:\n                tmp += -1 * int(i)\n            else:\n                tmp += int(i)\n        if tmp == 0:\n            cnt += 1\n    return cnt\n",
        "num_ids": 79
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(arr)):\n        num = arr[i]\n        if str(num)!= \"\":\n            for j in range(len(str(num))):\n                count += 1\n                if count == len(arr):\n                    return count\n",
        "num_ids": 68
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Return 0 if no numbers in the array\n    if len(arr) == 0:\n        return 0\n    # Find the first positive number\n    for i in arr:\n        if i > 0:\n            return 1\n    return 0\n",
        "num_ids": 56
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    digits = 0\n    for num in arr:\n        if is_int(num):\n            digits += 1\n        else:\n            return 0\n    return digits\n",
        "num_ids": 41
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in arr:\n        if abs(i) < 10:\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    total = 0\n    for num in arr:\n        if is_digit(num):\n            total += 1\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum(len(set(sorted(num_str))) for num_str in sorted(num_string(arr)))\n",
        "num_ids": 30
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # list comprehension to get list of positive numbers from arr\n    pos_nums = [num for num in arr if num > 0]\n",
        "num_ids": 32
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # A naive approach would be to sort the array and iterate through it.\n    # But this would run in O(n^2) time.\n    # A more efficient approach would be to first sort the array using\n    # merge sort.  However, this would take O(n log n) time.\n",
        "num_ids": 70
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum(1 for num in arr if str(num).count(\"0\") < num)\n",
        "num_ids": 23
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not arr or len(arr)==0:\n        return True\n    if len(arr)==1:\n        return True\n    \n    for i in range(1,len(arr)):\n        if arr[i-1]<arr[i]:\n            continue\n        else:\n            for j in range(1,len(arr)):\n                if arr[j-1]<arr[j]:\n                    continue\n                elif arr[j-1]==arr[j]:\n                    return False\n                elif j == len(arr)-1:\n                    if arr[0]<arr[j]:\n                        return True\n                    else:\n                        return False\n    return False\n",
        "num_ids": 159
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(arr) == 0: return True\n",
        "num_ids": 13
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(arr)==0:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Start writing your code here\n    if len(arr)==0:\n        return True\n    low=0\n    high=len(arr)-1\n    while low<high:\n        mid=low+((high-low)>>1)\n        # print low,mid,high\n        if arr[mid]<arr[mid+1]:\n            low=mid+1\n        else:\n            high=mid\n    return (low==0 or arr[low-1]<=arr[low])\n    # return low<high\n",
        "num_ids": 124
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if arr == None or len(arr) == 0:\n        return True\n    \n    # Sort the array.\n    arr.sort()\n    \n    # Check if leftmost element is greater than rightmost element.\n    if arr[0] > arr[-1]:\n        return False\n    \n    # Decrease right most element by 1.\n    arr[-1] -= 1\n    \n    # Check if there are any elements in array.\n    # If not, then sorted.\n    if len(arr) == 1:\n        return True\n    \n    # Check if sorted.\n    if arr[0] >= arr[1]:\n        return False\n    \n    # Compare with leftmost element to find if\n    # it can be compared with all other element.\n    # If true, then it will be sorted.\n    # If not, then return False.\n    for i in range(1, len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 238
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # If the array is empty, return True.\n    if len(arr)==0:\n        return True\n    \n    # If the length of array is one or smaller than 2,\n    # then it is not possible to move any number of\n    # elements to the right\n    if len(arr)<2:\n        return False\n    \n    # Sort the given array and store the sorted list\n    # in a new variable.\n    sorted_arr = sorted(arr)\n    \n    # Iterate through the array from right to left.\n    # If the element is greater than the one\n    # to its right, then return False.\n    for i in range(len(arr)-1,0,-1):\n        \n        # If the element at ith position is greater\n        # than the element at i+1 position, return\n        # False.\n        if arr[i]>arr[i+1]:\n            return False\n    \n    # If the above loop didn't return False, then\n    # we got the non-decreasing order by\n    # performing right shift operation.\n    return True\n",
        "num_ids": 257
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return True\n    flag = False\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            if flag:\n                return False\n            flag = True\n        if arr[i-1] > arr[i]:\n            return False\n    return True\n",
        "num_ids": 84
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # code here\n    if len(arr) == 0:\n        return True\n    min_val = float('inf')\n    for num in arr:\n        if num < min_val:\n            min_val = num\n    if min_val == float('inf'):\n        return True\n    # return True if min_val!= float('inf')\n    for num in arr:\n        if num == min_val:\n            return False\n    # return False if min_val == float('inf')\n    return True\n    \n    \ndef move_one_ball2(arr):\n    \"\"\"\n    There are two types of elements in the array.\n    \n    If the element is greater than or equal to (incl.) another element then \n    we can move the element to the last index.\n    \n    If the element is less than or equal to (incl.) another element then \n    we can move the element to the first index.\n    \n    Now, we have two arrays, arr1 and arr2. arr1 is the smaller array, and arr2 \n    is the larger array. We need to determine if the smaller array can be \n    formed by moving the elements of the larger array.\n    \n    Example 1:\n    arr1 = [4, 5, 6, 7, 8]\n    arr2 = [3, 4, 5, 1, 2]\n    Output: True\n    \n    Explanation: arr1 can be formed by moving the elements of arr2.\n    Example 2:\n    arr1 = [3, 4, 5, 1, 2]\n    arr2 = [4, 5, 6, 7, 8]\n    Output: False\n    Explanation: arr1 cannot be formed by moving the elements of arr2.\n    \n    \"\"\"\n    # code here\n    if len(arr1) < len(arr2):\n        return False\n    \n    for i in range(len(arr2) - 1):\n        if arr1[i] >= arr2[i]:\n            return False\n    return True\n",
        "num_ids": 469
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(lst1) > len(lst2):\n        lst1, lst2 = lst2, lst1\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 0:\n            if lst2[i]!= lst1[i]:\n                return \"NO\"\n    return \"YES\"\n",
        "num_ids": 91
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # If the lst1 is already even, then it is not possible to exchange elements between it\n    # and the lst2.\n    if all(element % 2 == 0 for element in lst1) == True:\n        return \"NO\"\n    \n    # If the lst2 is empty, then it is possible to exchange elements between the lst1 and lst2\n    # and make them all to be even.\n    if len(lst2) == 0:\n        return \"YES\"\n    \n    # If the lst1 and lst2 are of even and the largest element of lst1 is smaller\n    # than the largest element of lst2, then it is not possible to exchange elements between them\n    if all(element % 2 == 0 for element in lst1) == True:\n        return \"NO\"\n    \n    # If the largest element of lst1 is smaller than the largest element of lst2,\n    # then it is not possible to exchange elements between the lst1 and lst2\n    if max(lst1) < max(lst2):\n        return \"NO\"\n    \n    # If the largest element of lst2 is smaller than the largest element of lst1,\n    # then it is not possible to exchange elements between the lst1 and lst2\n    if max(lst2) < max(lst1):\n        return \"NO\"\n    \n    # If the largest element of lst1 is larger than the smallest element of lst2,\n    # then it is not possible to exchange elements between the lst1 and lst2\n    if min(lst1) > min(lst2):\n        return \"NO\"\n    \n    # If the smallest element of lst2 is larger than the smallest element of lst1,\n    # then it is not possible to exchange elements between the lst1 and lst2\n    if min(lst2) > min(lst1):\n        return \"NO\"\n    \n    # If the elements of the lst1 and lst2 are of even and exactly the same length,\n    # then the elements can be exchanged between the lst1 and lst2\n    if len(lst1) == len(lst2) and all(element % 2 == 0 for element in lst1) == True:\n        return \"YES\"\n    \n    # If the elements of the lst1 and lst2 are of even and exactly the same length,\n    # and the largest element of lst1 is smaller than the smallest element of lst2,\n    # then it is not possible to exchange elements between the lst1 and lst2\n    if len(lst1) == len(lst2) and all(element % 2 == 0 for element in lst1) == True and max(lst1) < min(lst2):\n        return \"NO\"\n    \n    # If the elements of the lst1 and lst2 are of even and exactly the same length,\n    # and the largest element of lst1 is larger than the smallest element of lst2,\n    # then it is not possible to exchange elements between the lst1 and lst2\n    if len(lst1) == len(lst2) and all(element % 2 == 0 for element in lst1) == True and max(lst1) > min(lst2):\n        return \"NO\"\n    \n    # If the elements of the lst1 and lst2 are of odd and exactly the same length,\n    # and the largest element of lst1 is smaller than the smallest element of lst2,\n    # then it is not possible to exchange elements between the lst1 and lst2\n    if len(lst1) == len(lst2) and all(element % 2 == 0 for element in lst1) == False and max(lst1) < min(lst2):\n        return \"NO\"\n    \n    # If the elements of the lst1 and lst2 are of odd and exactly the same length,\n    # and the largest element of lst1 is larger than the smallest element of lst2,\n    # then it is not possible to exchange elements between the lst1 and lst2\n    if len(lst1) == len(lst2) and all(element % 2 == 0 for element in lst1) == False and max(lst1) > min(lst2):\n        return \"NO\"\n    ",
        "num_ids": 1024
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Your solution here\n    even_numbers = 0\n    for number in lst1:\n        if number % 2 == 0:\n            even_numbers += 1\n",
        "num_ids": 41
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n    pass",
        "num_ids": 9
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    even_num = False\n    for i in range(len(lst1)):\n        if lst1[i]%2!= 0 and even_num == False:\n            even_num = True\n        if lst1[i]%2!= 0 and even_num == True:\n            return \"NO\"\n        if lst1[i]%2 == 0 and even_num == False:\n            even_num = True\n        if lst1[i]%2 == 0 and even_num == True:\n            even_num = False\n        if even_num == True:\n            even_num = False\n        if even_num == False and i == (len(lst1)-1):\n            return \"YES\"\n",
        "num_ids": 173
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    while len(lst1) > 1:\n        if lst1[0] % 2!= 0:\n            return \"NO\"\n        if lst1[-1] % 2!= 0:\n            return \"NO\"\n        lst1.pop(0)\n        lst1.pop(-1)\n    if lst1[0] % 2!= 0:\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 103
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # YOUR CODE HERE\n    # Base case: lst1 and lst2 are empty lists\n    if len(lst1) == 0 and len(lst2) == 0:\n        return True\n",
        "num_ids": 48
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if (len(lst1) > len(lst2)):\n        new_lst2 = lst2\n        lst2 = lst1\n        lst1 = new_lst2\n",
        "num_ids": 50
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def check_even(lst):\n        for i in range(len(lst)):\n            if (lst[i] % 2)!= 0:\n                return False\n        return True\n",
        "num_ids": 47
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    test = test.lower()\n    \n    dic = {}\n",
        "num_ids": 17
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return {}",
        "num_ids": 4
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n",
        "num_ids": 44
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if test == '':\n        return {}\n",
        "num_ids": 12
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    letters_count = {}\n    for letter in test.lower():\n        letters_count[letter] = letters_count.get(letter, 0) + 1\n    return letters_count\n",
        "num_ids": 44
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Check the length of test\n    if len(test) < 1:\n        return {}\n    \n    # Create a dictionary to contain the letter and the count\n    d = {}\n    \n    # Loop through all characters in test\n    for c in test:\n        # Check if the letter is in the dictionary\n        if c in d:\n            # Add the count to the value in d\n            d[c] += 1\n        # If the letter is not in the dictionary\n        else:\n            # Add the letter and 1 to the dictionary\n            d[c] = 1\n            \n    # Return the dictionary\n    return d\n",
        "num_ids": 144
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    hist = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) + 1\n    return hist\n",
        "num_ids": 34
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    my_dict = {}\n    for char in test:\n        my_dict[char] = my_dict.get(char, 0) + 1\n    return my_dict\n",
        "num_ids": 42
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    d = {}\n    for l in test:\n        d[l] = d.get(l, 0) + 1\n    return d\n",
        "num_ids": 34
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    letter_count = {}\n    for letter in test.lower():\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    return letter_count\n",
        "num_ids": 56
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s=s.lower()\n    c=c.lower()\n    c_list=list(c)\n    s_list=list(s)\n    for i in range(len(c_list)):\n        if c_list[i] in s:\n            if c_list[i]==s_list[-1]:\n                s_list.pop()\n            else:\n                s_list.remove(c_list[i])\n    if s==''.join(s_list):\n        return (s,'True')\n    else:\n        return (s,'False')\n",
        "num_ids": 138
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    a=c.split(s)\n    if a[0]=='0':\n        return ('0',False)\n    else:\n        return (a[0][::-1],True)\n",
        "num_ids": 48
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    s = s.replace(\" \", \"\")\n    for i in s:\n        if i in c:\n            s = s.replace(i, \"\")\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "num_ids": 69
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for x in range(len(s)):\n        if s[x] in c:\n            s = s.replace(s[x],'')\n    return s,''.join(reversed(s)) == s\n",
        "num_ids": 53
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = \"\"\n    for i in s:\n        if i in c:\n            res += i\n    return (res,False) if s == res else (res,True)\n",
        "num_ids": 43
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #let's try this with a global variable\n    global palindrome_chars\n    global palindrome_chars_list\n    global palindrome_chars_list_rev\n    result_string = \"\"\n    bool_result = False\n    #create 2 lists to check for palindrome\n    palindrome_chars_list = []\n    palindrome_chars_list_rev = []\n    #create a list for the result string\n    for i in s:\n        palindrome_chars_list.append(i)\n    #reverse the list to get the right results\n    palindrome_chars_list_rev = palindrome_chars_list[::-1]\n    #create a set to find if the chars are the same\n    set_of_chars = set(c)\n    #loop over the list\n    for j in palindrome_chars_list:\n        #loop over the reverse list\n        for k in palindrome_chars_list_rev:\n            if j == k:\n                #if the list have at least 1 char that match the global variable\n                if j in set_of_chars:\n                    #add this char to the result string and set the bool result to True\n                    result_string = result_string + j\n                    bool_result = True\n                #if the list have at least 1 char that dont match the global variable\n                else:\n                    #remove this char from the list and set the bool result to True\n                    palindrome_chars_list.remove(j)\n                    bool_result = True\n    return (result_string,bool_result)\n",
        "num_ids": 379
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result=\"\"\n    for i in range(len(s)):\n        if s[i]==c[-1]:\n            result+=c[-1]\n            del s[i]\n            del c[-1]\n            break\n    if not result:\n        result=\"\".join(s)\n    else:\n        result=\"\".join(s+c)\n    if result==\"\":\n        result=\"Empty String\"\n    return (result,False)\n",
        "num_ids": 109
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #pass\n    s = list(s)\n    c = list(c)\n    \n    for i in range(len(c)):\n        for j in range(len(c)-1,-1,-1):\n            if s[i] == c[j]:\n                s.pop(i)\n                break\n    print(s)\n    if s == c:\n        return (''.join(s),True)\n    else:\n        return (''.join(s),False)\n",
        "num_ids": 114
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    print(\"You are given two strings s and c.\")\n    print(\"Reverse delete all the characters in s that are equal to any character in c.\")\n    print(\"Then check if the result string is palindrome.\")\n    print(\"Return a tuple containing the result string and True/False for the check.\")\n    print(\"Example:\")\n    print(\"For s = 'abcde', c = 'ae', the result should be ('bcd',False)\")\n    print(\"For s = 'abcdef', c = 'b'  the result should be ('acdef',False)\")\n    print(\"For s = 'abcdedcba', c = 'ab', the result should be ('cdedc',True)\")\n    print(\"\")\n    print(\"Note: the parameter of this function should be strings.\")\n    print(\"\")\n    while True:\n        s = input(\"Enter a string:\")\n        c = input(\"Enter a character:\")\n        if s == \"\" and c == \"\":\n            print(\"\")\n            return None\n        if s == \"\" and c!= \"\":\n            print(\"\")\n            print(\"You have to enter a string with some characters.\")\n            print(\"Please enter again a string.\")\n            continue\n        if s!= \"\" and c == \"\":\n            print(\"\")\n            print(\"You have to enter a character with some string.\")\n            print(\"Please enter again a character.\")\n            continue\n        if s!= \"\" and c!= \"\":\n            for char in c:\n                s = s.replace(char,\"\")\n            if s == s[::-1]:\n                print(s,c)\n                return (s,True)\n            else:\n                print(s,c)\n                return (s,False)\n",
        "num_ids": 400
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(s)<len(c):\n        s,c=c,s\n    i=0\n    while i<len(s):\n        if s[i] not in c:\n            return (s[i:],True)\n        i+=1\n    return (s[i:],False)\n",
        "num_ids": 74
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    odds = []\n    for i in lst:\n        odd_count_str = 0\n        for j in range(len(i)):\n            if int(i[j]) % 2 == 1:\n                odd_count_str += 1\n        odds.append(odd_count_str)\n    return [\"the number of odd elements \" + str(odds[i]) + \" of the string \" + str(i) +\n     \" of the input.\" for i in range(len(lst))]\n",
        "num_ids": 120
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [\"the number of odd elements {} of the {} of the {}\".format(len(x)-len(y)+1, x, y) for x, y in zip(lst, lst)]\n",
        "num_ids": 47
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    odds = lambda x: len([k for k in x if k % 2])\n    new_list = [odds(i) for i in lst]\n    return list(map(lambda x: \"the number of odd elements {}n the str{} of the {}nput.\".format(x,x,x), new_list))\n",
        "num_ids": 80
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    odd_list = []\n    odd = 0\n    for i in lst:\n        odd = 0\n        for j in i:\n            if int(j)%2!= 0:\n                odd = odd + 1\n        odd_list.append(f\"the number of odd elements {odd}n the str{len(i)}ng {i} of the {len(lst)}nput.\")\n    return odd_list\n    \n",
        "num_ids": 102
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    output_list = []\n    for i in range(len(lst)):\n        temp = 0\n        for j in lst[i]:\n            if (j == '1'):\n                temp += 1\n        output_list.append(\"the number of odd elements {}n the str{} {} of the {}nput.\".format(i + 1, temp, lst[i], i + 1))\n    return output_list\n    # Replace pass above with your code\n",
        "num_ids": 110
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [f\"the number of odd elements {n}n the str{n}ng {n} of the {n}put.\" for n in range(1,len(lst)+1)]\n",
        "num_ids": 46
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    lst = list(lst)\n    lst2 = []\n    for i in range(len(lst)):\n        lst2.append(lst[i].split())\n        lst2[i] = lst2[i][::-1]\n        for i in range(len(lst2[i])):\n            if int(lst2[i][i]) % 2 == 1:\n                count += 1\n    return [\"the number of odd elements \" + str(count) + \"n the str\" + str(count) + \" of the \" + str(count) + \"input.\"]\n    \n",
        "num_ids": 152
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    return [\"the number of odd elements {}n the str{} of the {}nput.\".format(len(lst),i,len(lst)) for i in range(1,len(lst)+1)]\n",
        "num_ids": 53
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not lst:\n        return []\n    lst = lst[0]\n    return_list = []\n    for i in range(len(lst)):\n        if lst[i] in '13579':\n            return_list.append(str(lst.count('1') + lst.count('3') + lst.count('5') + lst.count('7')) + 'n the str' + str(i + 1) + 'of the'+ str(len(lst)) + 'nput.')\n    return return_list\n    ",
        "num_ids": 136
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = []\n    for i in lst:\n        count = 0\n        for j in range(len(i)):\n            if i[j] % 2!= 0:\n                count += 1\n        n.append(\"the number of odd elements {0} in the string {1} of the {2}nput.\".format(count, i, len(i)))\n    return n\n",
        "num_ids": 92
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(nums) == 0:\n        return 0\n    left = 0\n    sum = 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        sum += nums[i]\n        while sum >= min_sum:\n            if min_sum > sum - nums[left]:\n                min_sum = sum - nums[left]\n            left += 1\n            sum -= nums[left]\n    return min_sum\n",
        "num_ids": 114
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n = len(nums)\n    if n == 0:\n        return 0\n    s = 0\n    res = float('inf')\n    for i in range(n):\n        s += nums[i]\n        res = min(res, s)\n        if s < 0:\n            s = 0\n    return res\n",
        "num_ids": 78
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    subarray_sum = 0\n    subarray_start = 0\n    # Minimum sum in a subarray\n    subarray_min_sum = sys.maxsize\n    min_subarray_sum = sys.maxsize\n",
        "num_ids": 52
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    min_sum = nums[0]\n    cur_sum = 0\n    for num in nums:\n        cur_sum += num\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = 0\n    return min_sum\n",
        "num_ids": 76
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = len(nums)\n    if n == 0:\n        return 0\n    s = 0\n    min_sum = float(\"inf\")\n    for i in range(n):\n        s += nums[i]\n        min_sum = min(min_sum, s)\n        if s < 0:\n            s = 0\n    return min_sum\n",
        "num_ids": 86
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    l = len(nums)\n    if l == 0: return 0\n    if l == 1: return nums[0]\n    res = nums[0]\n    sum = nums[0]\n    for i in range(1, l):\n        sum += nums[i]\n        if sum < nums[i]:\n            res = max(res, sum)\n            sum = 0\n    res = max(res, sum)\n    return res\n",
        "num_ids": 109
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    min_sum = float('inf')\n    min_sum_subarray = []\n    for i in range(len(nums)):\n        if min_sum > 0:\n            min_sum_subarray = nums[i:i+1]\n            min_sum = sum(min_sum_subarray)\n        else:\n            min_sum = sum(nums[i:])\n    return min_sum\n",
        "num_ids": 100
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # init sliding window\n    min_sum = nums[0]\n    start, end = 0, 0\n    while end < len(nums):\n        # if the current window sum is smaller than the current min_sum,\n        # update it\n        curr_sum = nums[end]\n        while curr_sum <= min_sum:\n            # move the left window until the current sum is less than min_sum\n            start += 1\n            curr_sum += nums[start]\n",
        "num_ids": 117
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    total_sum = sum(nums)\n    if total_sum % len(nums) == 0:\n        return total_sum // len(nums)\n",
        "num_ids": 39
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    length = len(nums)\n    if length == 0: return -1\n    min_sum = nums[0]\n    current_sum = 0\n    for i in range(length):\n        current_sum += nums[i]\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return min_sum\n",
        "num_ids": 100
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # OPTIMIZED SOLUTION\n    # If you have a bucket of capacity = capacity, \n    # you can extract from a well of capacity capacity.\n    # That bucket can be empty.\n    # If you have a bucket of capacity = capacity - 1, \n    # you can extract from a well of capacity capacity - 1.\n    # But now you have a bucket of capacity = capacity - 2.\n    # And so on.\n    # You can then empty any well that has a capacity less than capacity - 1.\n    # For every column in grid, \n    # you'll need to lower a bucket of capacity = capacity - 1, \n    # because you can't lower a bucket of capacity = capacity - 2.\n    # So, you'll need to update the capacity of the last column in each row.\n    \n    # time complexity: O(rows * columns)\n    # space complexity: O(rows * columns)\n    \n    # first, find the amount of rows and columns\n    rows, cols = len(grid), len(grid[0])\n    \n    # count the amount of wells \n    wells = rows * cols\n    \n    # count the wells that have a capacity of 1 \n    one = 0\n    \n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                one += 1\n    \n    # number of wells that need to be lowered \n    # = wells - one\n    num_wells = wells - one\n    \n    # first, fill all wells that have a capacity of 1\n    # if we are able to keep the capacity, we can fill the wells.\n    # if not, we need to decrease the capacities of the wells that we could not fill.\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                capacity -= 1\n                if capacity == 1:\n                    num_wells -= 1\n                    break\n            else:\n                capacity = capacity - 1\n        \n    # update the capacities of the wells that we could not fill\n    while capacity!= 1:\n        # find the wells that can be lowered\n        # (we must be able to lower the capacity to 1)\n        # and we need to keep the capacity\n        # to increase the wells that can be lowered\n        wells_to_lower = 0\n        capacity_to_keep = capacity\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 1:\n                    wells_to_lower += 1\n                    capacity_to_keep = capacity\n                    break\n        \n        # let's lower the capacity of the wells that we can lower\n        # and increase the capacity of the wells that we can't lower\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 1:\n                    capacity -= 1\n                    if capacity == 1:\n                        num_wells -= 1\n                        break\n                else:\n                    capacity = capacity_to_keep\n        \n        # we can keep this capacity.\n        if capacity == 1:\n            # we found a way to fill the wells\n            num_wells -= wells_to_lower\n            break\n        \n        # we can't keep this capacity.\n        # we need to lower the capacity to 1.\n        capacity = capacity - 1\n        \n    # now we have to lower the capacity of the wells that we can be lowered.\n    # if we have a well with capacity = 1,\n    # we need to lower the capacity to 2.\n    # and we need to lower the capacity of the wells that we can't lower.\n    # we can decrease the capacity of the wells that we can't lower.\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                capacity -= 1\n                if capacity == 2:\n                    num_wells -= 1\n                    break\n            else:\n                capacity = capacity - 1\n    \n    return num_wells\n",
        "num_ids": 942
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # We can split each cell into 4 parts, and look up the maximum amount of water that can be extracted\n    # from each of the 4 parts, and then sum them up\n    # O(NC^4)\n    def water_extraction(grid, bucket_capacity):\n        m, n = len(grid), len(grid[0])\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    for di in range(4):\n                        for dj in range(4):\n                            if 0 <= i + di < m and 0 <= j + dj < n:\n                                if grid[i + di][j + dj] == 0:\n                                    grid[i + di][j + dj] = 1\n                                    max_extraction = max(max_extraction, bucket_capacity - grid[i + di][j + dj])\n                                    grid[i + di][j + dj] = 0\n        return max_extraction\n",
        "num_ids": 228
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    from collections import deque\n    \n    def bfs(grid, capacity):\n        \n        rows, cols = len(grid), len(grid[0])\n        dist = [[-1]*cols for _ in range(rows)]\n        queue = deque()\n        dist[0][0] = 0\n        q_size = 0\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 1:\n                    queue.append((i, j))\n                    dist[i][j] = q_size\n                    q_size += 1\n        while queue:\n            x, y = queue.popleft()\n            for dx, dy in (1, 0), (0, 1), (-1, 0), (0, -1):\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < rows and 0 <= ny < cols:\n                    if dist[nx][ny] == -1:\n                        if grid[nx][ny] == 0:\n                            dist[nx][ny] = dist[x][y] + 1\n                            q_size += 1\n                            queue.append((nx, ny))\n                    else:\n                        if dist[nx][ny] > dist[x][y] + 1:\n                            dist[nx][ny] = dist[x][y] + 1\n                            q_size += 1\n                            queue.append((nx, ny))\n        return q_size, dist\n    \n    queue, q_size = bfs(grid, capacity)\n    res = queue.popleft()\n    \n    for i in range(q_size - 1):\n        if queue and queue[0] > res:\n            res = queue.popleft()\n        else:\n            break\n    \n    return res\n",
        "num_ids": 429
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # the first row is the cols\n    grid_cols = len(grid)\n    \n    # the second row is the rows\n    grid_rows = len(grid[0])\n",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                count += 1\n                grid[i][j] = 2\n                break\n    bucket_capacity = capacity\n    while count > 0:\n        count = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 2:\n                    if bucket_capacity > 0:\n                        if grid[i][j] == 1:\n                            count += 1\n                            grid[i][j] = 1\n                            bucket_capacity -= 1\n                    else:\n                        if grid[i][j] == 1:\n                            count += 1\n                            grid[i][j] = 0\n                            bucket_capacity = bucket_capacity\n    return count\n",
        "num_ids": 209
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    for i in range(len(grid)):\n        grid[i] = sorted(grid[i])\n",
        "num_ids": 28
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert all(len(row) == len(grid[0]) for row in grid), \\\n        \"all wells have the same length\"\n    assert all(row.count(1) == 1 for row in grid), \\\n        \"all wells have the same length\"\n    assert 1 <= capacity <= 10**2, \\\n        \"1 <= capacity <= 10\"\n",
        "num_ids": 83
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # TODO: Write your code here\n    def get_water(grid, r_idx, c_idx):\n        possible_wells = 0\n        for n_r_idx, n_c_idx in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n            for x, y in zip(r_idx, c_idx):\n                if grid[x][y] == 1:\n                    if x+n_r_idx < 0 or x+n_r_idx >= len(grid) or y+n_c_idx < 0 or y+n_c_idx >= len(grid[0]):\n                        continue\n                    if grid[x+n_r_idx][y+n_c_idx] == 1:\n                        possible_wells += 1\n                        break\n        return possible_wells\n",
        "num_ids": 212
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    import math\n    import numpy as np\n",
        "num_ids": 12
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return math.ceil(capacity/sum([max(row) for row in grid]))\n",
        "num_ids": 23
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    s = \"\".join(map(str, arr))\n    \n    return sorted(s)\n",
        "num_ids": 26
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(arr, key=lambda x: x if x > 0 else -x)",
        "num_ids": 21
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    res = []\n    for elem in arr:\n        res.append(bin(elem).count('1'))\n    return sorted(res)\n",
        "num_ids": 37
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(arr, key=lambda x: x & 1) + \\\n           sorted(arr, key=lambda x: x >> 1)\n",
        "num_ids": 35
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def binary_to_decimal(binary):\n        return int(binary, 2)\n",
        "num_ids": 22
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda n: n*(2**(len(str(n))-1))+int(str(n)[-1]))\n",
        "num_ids": 39
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(arr, key=lambda x: ((bin(x).count('1'), x),))",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # for each number find its binary representation\n    # sum all bits and take min\n    # O(n) time\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 51
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    arr = sorted(arr)\n    return sorted(arr, key=lambda x: x*2 + 1)\n",
        "num_ids": 27
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    out = []\n    tmp = \"\"\n    for i in s:\n        if i.isalpha():\n            tmp += i.lower()\n        elif i == \" \":\n            if len(tmp) == n:\n                out.append(tmp)\n            tmp = \"\"\n    return out\n",
        "num_ids": 70
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    letters = [c for c in s if c.isalpha()]\n    result = []\n",
        "num_ids": 25
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    \n    \"\"\"select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    \n    # Your code here\n    words = []\n    s = s.split()\n    for word in s:\n        if len(word) == n:\n            words.append(word)\n    return words\n",
        "num_ids": 150
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    words = []\n    for word in s.split(\" \"):\n        if len(word) - len(set(word)) < n:\n            words.append(word)\n    return words\n",
        "num_ids": 46
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # This function takes a string s and natural number n as an input.\n    # It returns a list of all words from the string s that have exactly n\n    #  consonants. If the string s is empty then the function returns an empty list.\n    # The function returns a list of words in the string s.\n",
        "num_ids": 73
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    if n == 0:\n        return result\n    if len(s) == 0:\n        return result\n",
        "num_ids": 31
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # length of input string\n    l = len(s)\n    # string to list of strings\n    s = s.split(\" \")\n    # a list of substrings from the given string\n    r = []\n    # is there any space\n    for i in range(l):\n        if s[i]!= '':\n            r.append(s[i])\n    # check if a substring contains exactly n characters\n    return list(filter(lambda a: len(a) == n, r))\n",
        "num_ids": 119
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    words_list = []\n    if s == \"\":\n        return words_list\n    words = s.split()\n    for word in words:\n        if is_consonant(word, n):\n            words_list.append(word)\n    return words_list\n",
        "num_ids": 65
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l = []\n    for i in s.split():\n        l.append(i)\n    n = n - 1\n    words = []\n    for i in l:\n        if (consonants(i) == n):\n            words.append(i)\n    return words\n",
        "num_ids": 67
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s_list = s.split()\n    result = []\n    for w in s_list:\n        if len(w) - count_consonants(w) >= n:\n            result.append(w)\n    return result\n    \n",
        "num_ids": 58
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    word = word.lower()\n    vowel = \" \"\n    \n    for i in range(len(word)-1,0,-1):\n        if word[i] in vowels:\n            if vowel == \" \":\n                vowel = word[i]\n            else:\n                if vowel!= word[i]:\n                    return vowel\n                else:\n                    vowel = \" \"\n    \n    return vowel\n",
        "num_ids": 137
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    vowels = 'aeiou'\n    l = len(word)\n    vowel = word[-1]\n    for i in range(l-2, -1, -1):\n        if word[i] in vowels:\n            return vowel\n    return \"\"\n",
        "num_ids": 69
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    #your code here\n    \n    return \"\"\n    \n",
        "num_ids": 15
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a = word[-1]\n    b = word[1:-1]\n    c = word[0]\n    if a.lower() in \"aeiou\":\n        return a\n    elif b.lower() in \"aeiou\":\n        return b\n    else:\n        return \"\"\n        ",
        "num_ids": 72
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # first vowel is on the right\n    for i in range(len(word) - 1):\n        if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\":\n            return word[i]\n",
        "num_ids": 78
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    vowels = 'aeiou'\n    word = word.lower()\n    if word[0] in vowels:\n        return word[0]\n",
        "num_ids": 38
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(1, len(word)-2):\n        if word[i] in \"AEIOU\":\n            return word[i]\n    return \"\"\n",
        "num_ids": 40
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(word)-1):\n        if word[i] in 'aeiou' and word[i+1] in 'aeiou':\n            return word[i]\n    return ''\n",
        "num_ids": 51
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    if word == \"\":\n        return \"\"\n    cons = word[-1]\n    if cons in \"aeiou\":\n        return \"\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in \"aeiou\":\n            return word[i+1]\n    return \"\"\n",
        "num_ids": 86
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if lst==[]:\n        return 'No'\n    if len(lst)==1:\n        return 'Yes'\n    elif lst[0]=='(':\n        return 'Yes'+match_parens(lst[1:])\n    else:\n        return 'No'+match_parens(lst[1:])\n",
        "num_ids": 85
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    good = False\n    i = 0\n",
        "num_ids": 13
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # init match_parens_helper()\n    def match_parens_helper(lst):\n        '''\n        The idea is to make a stack that contains the index of the current\n        open parentheses in the input list. While traversing the input list,\n        we pop the top element of the stack and check if the index of the\n        current element equals the index of the top element of the stack. If\n        the current element is open parentheses and the top element of the\n        stack is closed parentheses, then we add this element to the result\n        list.\n        '''\n        # initialize result and stack\n        result = []\n        stack = []\n",
        "num_ids": 150
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def rec(S,count):\n        if len(S) == 2:\n            if S[0] == ')' and S[1] == '(':\n                return count\n            elif S[0] == '(' and S[1] == ')':\n                return count\n            return None\n        if len(S) == 0:\n            return None\n        if S[0] == '(' and S[1] == ')':\n            return rec(S[2:],count+1)\n        if S[0] == ')' and S[1] == '(':\n            return rec(S[2:],count-1)\n        if S[0] == ')' and S[1] == '(':\n            return rec(S[2:],count)\n    res = rec(lst[0],0)\n    return 'Yes' if res == None else 'No'\n",
        "num_ids": 206
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    stack = []\n    for ch in lst:\n        if ch == '(':\n            stack.append(ch)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'\n",
        "num_ids": 67
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # TODO: implement this function\n    good = True\n    for i in range(len(lst)-1):\n        if lst[i] == ')':\n            good = False\n            break\n    for i in range(len(lst)-1):\n        if lst[i] == '(':\n            good = False\n            break\n    return 'Yes' if good else 'No'\n",
        "num_ids": 94
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def __match_parens(lst):\n        def __check(s, p):\n            # match parentheses\n            if len(s) == 0:\n                return False\n            if s[0] == p:\n                if len(s) == 1:\n                    return True\n                else:\n                    return __check(s[1:], p)\n            else:\n                return False\n",
        "num_ids": 91
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(lst) == 1:\n        return 'Yes'\n    op = ['(', ')']\n    if lst[0] in op:\n        return 'No'\n    for i in range(1, len(lst)):\n        if lst[i] in op:\n            if match_parens(lst[:i]) == 'Yes' and match_parens(lst[i+1:]) == 'No':\n                return 'Yes'\n    return 'No'\n",
        "num_ids": 119
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #print(lst)\n    length = len(lst)\n    #print(length)\n    if length == 0:\n        return False\n    elif length == 1:\n        return True\n    elif lst[0] == \"(\" and lst[1] == \")\":\n        return True\n    else:\n        for i in range(1, length):\n            if lst[i] == \"(\":\n                if match_parens(lst[:i]) == True:\n                    return True\n            elif lst[i] == \")\":\n                if match_parens(lst[i:]) == True:\n                    return True\n    return False\n",
        "num_ids": 159
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #Check if all brackets are balanced\n    bracket_dict = {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    curr_bracket = \"(\"\n    stack = []\n    for char in lst:\n        if char in bracket_dict.keys():\n            stack.append(char)\n            curr_bracket = bracket_dict[curr_bracket]\n        else:\n            if not stack:\n                return \"No\"\n            if curr_bracket!= char:\n                return \"No\"\n            stack.pop()\n            curr_bracket = \"(\"\n    return \"Yes\"\n",
        "num_ids": 148
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Write your code here\n    n = len(arr)\n",
        "num_ids": 16
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # sort ascending\n    arr = sorted(arr)\n    # return the first k elements\n    return arr[:k]\n",
        "num_ids": 30
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # arr = sorted(arr)\n    # return arr[:k]\n    return sorted(arr, reverse=True)[:k]\n",
        "num_ids": 33
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert 0 <= k <= len(arr), 'Invalid input.'\n    arr = sorted(arr)[-k:]\n    return arr\n",
        "num_ids": 31
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(arr)\n",
        "num_ids": 9
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = []\n    num_max = 0\n    i = 0\n    j = 0\n    while i < len(arr) and j < k:\n        if arr[i] > num_max:\n            num_max = arr[i]\n            result.append(num_max)\n            j += 1\n        else:\n            i += 1\n",
        "num_ids": 83
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if k >= len(arr):\n        return arr\n    \n    # initialize result array\n    res = []\n",
        "num_ids": 27
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert k <= len(arr)\n    assert -1000 <= arr[0] <= 1000\n    sort_arr = sorted(arr, reverse=True)\n    return sort_arr[:k]\n",
        "num_ids": 46
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = len(arr)\n    if k > n:\n        return []\n    arr_cp = arr[:]\n    for i in range(1, n):\n        tmp = arr_cp[i]\n        for j in range(i):\n            if tmp < arr_cp[j]:\n                arr_cp[j] = tmp\n        arr_cp[i] = arr_cp[i]\n",
        "num_ids": 95
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum([i for i in lst if i % 2!= 0 and i % 2 == 0 and i!= 0])\n",
        "num_ids": 31
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([int(i % 2!= 0 and i!= 0) for i in lst])\n",
        "num_ids": 26
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n",
        "num_ids": 28
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            total += lst[i]\n    return total",
        "num_ids": 40
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    total = 0\n    for i, elem in enumerate(lst):\n        if i % 2 == 1:\n            total += elem\n    return total\n",
        "num_ids": 41
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2)])\n",
        "num_ids": 26
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    ans = 0\n    for i in range(1, len(lst), 2):\n        ans += lst[i]\n    return ans",
        "num_ids": 34
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(lst[i] for i in range(len(lst)) if i % 2!= 0)",
        "num_ids": 28
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not lst: return 0\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 1])\n",
        "num_ids": 37
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i, x in enumerate(lst):\n        if x % 2 == 0:\n            lst[i] = lst[i + 1]\n            lst[i + 1] = x\n    return sum(lst)\n",
        "num_ids": 57
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # k_sum = 0\n    # n = len(arr)\n    # for i in range(0, k):\n    #     k_sum = k_sum + arr[i]\n",
        "num_ids": 46
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(arr) < k:\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n = len(arr)\n    j = 0\n    for i in range(k):\n        while j < n and arr[j] > 0:\n            arr[i] -= 1\n            j += 1\n    return sum(arr[:k])\n",
        "num_ids": 60
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    k = min(k, len(arr))\n    i = 0\n    j = k\n    res = 0\n    while i < k:\n        res += arr[i]\n        i += 1\n    while j <= len(arr):\n        res += arr[j]\n        j += 1\n    return res\n",
        "num_ids": 74
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    nums = []\n    for i in range(k):\n        nums.append(arr[i])\n",
        "num_ids": 27
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(arr)\n    if k == 1:\n        return sum(arr)\n    # all elements should be greater than k\n    if arr[0] >= k:\n        return sum(arr[0:k])\n    # if first element is greater than k, it would be the answer\n    if arr[0] > k:\n        return sum(arr[0:k])\n    # now first element is less than k, we need to find a solution from\n    # the second element onwards to find the answer\n    second_element_index = k\n    third_element_index = n - 1\n    if arr[k] > k:\n        third_element_index = k\n    while second_element_index <= third_element_index:\n        # sum elements from second to third element\n        temp_sum = arr[second_element_index] + arr[third_element_index]\n        # now subtract the first element from sum\n        temp_sum = temp_sum - arr[k]\n        # update the first element to be added\n        second_element_index += 1\n        # update third element to be added\n        third_element_index -= 1\n        # check if current sum is less than k\n        if temp_sum < k:\n            # if so, we need to remove the element and try again\n            second_element_index += 1\n            third_element_index -= 1\n        elif temp_sum == k:\n            # otherwise, we need to return the sum\n            return temp_sum\n        else:\n            # if sum is greater than k, it would mean that we need to remove\n            # the second element and try again\n            second_element_index += 1\n            third_element_index -= 1\n            # update the first element to be added\n            temp_sum = arr[second_element_index] + arr[third_element_index]\n            # update the first element to be added\n            second_element_index += 1\n            # update third element to be added\n            third_element_index -= 1\n            # check if current sum is less than k\n            if temp_sum < k:\n                # if so, we need to remove the element and try again\n                second_element_index += 1\n                third_element_index -= 1\n            elif temp_sum == k:\n                # otherwise, we need to return the sum\n                return temp_sum\n            else:\n                # if sum is greater than k, it would mean that we need to remove\n                # the third element and try again\n                third_element_index -= 1\n                # update the first element to be added\n                temp_sum = arr[second_element_index] + arr[third_element_index]\n                # update the first element to be added\n                second_element_index += 1\n                # update third element to be added\n                third_element_index -= 1\n                # check if current sum is less than k\n                if temp_sum < k:\n                    # if so, we need to remove the element and try again\n                    second_element_index += 1\n                    third_element_index -= 1\n                elif temp_sum == k:\n                    # otherwise, we need to return the sum\n                    return temp_sum\n                else:\n                    # if sum is greater than k, it would mean that we need to remove\n                    # the second element and try again\n                    second_element_index += 1\n                    # update the first element to be added\n                    temp_sum = arr[second_element_index] + arr[third_element_index]\n                    # update the first element to be added\n                    second_element_index += 1\n                    # update third element to be added\n                    third_element_index -= 1\n                    # check if current sum is less than k\n                    if temp_sum < k:\n                        # if so, we need to remove the element and try again\n                        second_element_index += 1\n                        third_element_index -= 1\n                    elif temp_sum == k:\n                        # otherwise, we need to return the sum\n                        return temp_sum\n                    else:\n                        # if sum is greater than k, it would mean that we need to remove\n                        # the first element and try again\n                        third_element_index -= 1\n                        # update the first element to be added\n                        temp_sum = arr[second_element_index] + arr[third_element_index]\n                        # update the first element to be added\n                        second_element_index += 1\n                        # update third element t",
        "num_ids": 1025
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # use a heap\n    # it is possible to use a heap even if not strictly necessary\n    # since we are only looking at 2 characters at most\n    heap = arr[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if len(str(heap[0])) <= 2:\n            heapq.heappush(heap, arr[i])\n        else:\n            break\n    sum = 0\n    while len(heap) > 1:\n        a, b = heapq.heappop(heap), heapq.heappop(heap)\n        sum += a + b\n        heapq.heappush(heap, b)\n    return sum + heap[0]\n",
        "num_ids": 185
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Solution 1:\n    # res = sum([i for i in arr[:k] if len(str(i)) <= 2])\n",
        "num_ids": 33
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    ret = 0\n    for i in range(k):\n        ret += int(arr[i])\n    for i in range(k,len(arr)):\n        ret += arr[i]\n    return ret\n",
        "num_ids": 51
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if k == 0:\n        return 0\n    \n    k = min(k, len(arr))\n    while k >= 0:\n        max_num = arr[k]\n        for i in range(k, len(arr)):\n            max_num = max(max_num, arr[i])\n            if max_num >= 10:\n                k += 1\n                break\n        if k >= 0:\n            k += 1\n    return sum([int(i) for i in str(max_num)])\n",
        "num_ids": 121
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # create an empty list\n    odd_collatz = []\n",
        "num_ids": 16
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted([n for n in range(1, n) if n % 2!= 0], key=int, reverse=True)\n",
        "num_ids": 32
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    odd_nums = []\n",
        "num_ids": 9
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    odd_seq = []\n    \n    while n > 1:\n        if n % 2 == 1:\n            odd_seq.append(n)\n            n = 3*n + 1\n        else:\n            n = n//2\n",
        "num_ids": 56
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [i for i in range(n) if is_odd(i)]\n",
        "num_ids": 20
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    output = []\n    i = 1\n    while i <= n:\n        i = collatz(i)\n        if i % 2!= 0:\n            output.append(i)\n    return output\n",
        "num_ids": 49
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    odd_collatz_sequence = list()\n    odd_collatz_sequence.append(1)\n    odd_collatz_sequence.append(n)\n    while n!= 1:\n        if n % 2 == 1:\n            odd_collatz_sequence.append(3*n+1)\n        else:\n            odd_collatz_sequence.append(n/2)\n        n = odd_collatz_sequence[-1]\n    return odd_collatz_sequence\n",
        "num_ids": 114
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    res = []\n    while n > 1:\n        if n % 2 == 1:\n            res.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return res\n",
        "num_ids": 63
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(range(1, n+1))\n",
        "num_ids": 14
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    odds = []\n    current = 1\n    while current!= 1:\n        if current % 2 == 1:\n            odds.append(current)\n        current = int(current/2) if current!= 1 else current\n    return odds\n",
        "num_ids": 59
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if date:\n        month = int(date.split('-')[0])\n        if 1 <= month <= 12:\n            day = int(date.split('-')[1])\n            year = int(date.split('-')[2])\n            if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n                if day <= 31 and day >= 1:\n                    return True\n                else:\n                    return False\n            if month == 4 or month == 6 or month == 9 or month == 11:\n                if day <= 30 and day >= 1:\n                    return True\n                else:\n                    return False\n            if month == 2 and day <= 29:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 195
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #\n    # YOUR CODE HERE\n    #\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    valid = False\n",
        "num_ids": 58
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not date or len(date) == 0:\n        return False\n",
        "num_ids": 18
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if date == '':\n        return False\n",
        "num_ids": 12
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    print(\"\\n\\n\\n\")\n    print(f'Valid Date : {date}')\n    try:\n        date = date.split('-')\n        if len(date)!= 3:\n            print('Incorrect format')\n            return False\n        if int(date[0]) < 1 or int(date[0]) > 12:\n            print('Wrong Month')\n            return False\n        if int(date[1]) < 1 or int(date[1]) > 31:\n            print('Wrong Day')\n            return False\n        if int(date[2]) < 0 or int(date[2]) > 9999:\n            print('Wrong Year')\n            return False\n        if date[0] == '2' and int(date[1]) > 29:\n            print('Wrong Date')\n            return False\n        if date[0] == '1' or date[0] == '3' or date[0] == '5' or date[0] == '7' or date[0] == '8' or date[0] == '10' or date[0] == '12':\n            if int(date[1]) > 31:\n                print('Wrong Day')\n                return False\n        if date[0] == '4' or date[0] == '6' or date[0] == '9' or date[0] == '11':\n            if int(date[1]) > 30:\n                print('Wrong Day')\n                return False\n        if date[0] == '4':\n            if int(date[1]) > 29:\n                print('Wrong Day')\n                return False\n        return True\n    except Exception as e:\n        print(e)\n        return False\n",
        "num_ids": 401
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    if date == '':\n        return False\n    days = int(date[-2:])\n    if days < 1 or days > 31:\n        return False\n    months = {1: 31, 3: 30, 5: 31, 7: 30, 8: 31, 10: 31, 12: 31}\n    if months[int(date[0])] < days <= 31:\n        return False\n    if months[int(date[0])] > days <= 30:\n        return False\n    if int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return False\n    return True\n",
        "num_ids": 149
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Check if the date string is empty or not\n    if date == '':\n        return False\n    # Check if the date is in the correct format or not\n    if not re.match(r'^([0-3]\\d)-([0-1]\\d)-([0-9]{4})$', date):\n        return False\n    # Check if the date is less than 1 or not\n    if int(date.split('-')[0]) > 31 or int(date.split('-')[0]) < 0:\n        return False\n    # Check if the date is less than 1 or not\n    if int(date.split('-')[1]) > 31 or int(date.split('-')[1]) < 0:\n        return False\n    # Check if the date is less than 1 or not\n    if int(date.split('-')[2]) > 2040 or int(date.split('-')[2]) < 0:\n        return False\n    # Check if the date is less than 1 or not\n    if int(date.split('-')[1]) > 12 or int(date.split('-')[1]) < 0:\n        return False\n    # Check if the month should be less than 1 or not\n    if int(date.split('-')[0]) < 1 or int(date.split('-')[0]) > 12:\n        return False\n    # Check if the day should be less than 1 or not\n    if int(date.split('-')[1]) < 1 or int(date.split('-')[1]) > 31:\n        return False\n    # Check if the year should be less than 1 or not\n    if int(date.split('-')[2]) < 1 or int(date.split('-')[2]) > 2040:\n        return False\n    return True\n",
        "num_ids": 426
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    try:\n        date = date.split('-')\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n        if month < 1 or month > 12 or month == 2 and day > 28 or month == 2 and day < 29:\n            return False\n        elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            if day > 31:\n                return False\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            if day > 30:\n                return False\n        elif month == 2:\n            if day > 28:\n                return False\n        if year < 1:\n            return False\n        return True\n    except:\n        return False",
        "num_ids": 191
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # your code here\n    return True\n",
        "num_ids": 11
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    try:\n        month_dict = {1: 31, 3: 31, 5: 31, 7: 31, 8: 31, 10: 31, 12: 31}\n        month_dict_leap = {1: 31, 3: 28, 5: 31, 7: 30, 8: 31, 10: 31, 12: 31}\n        month_dict_months_zero = {4: 30, 6: 30, 9: 30, 11: 30}\n        month_dict_years_zero = {2: 29, 4: 29, 6: 29, 8: 29, 10: 29, 12: 29}\n        month_dict_month_one = {1: 29, 3: 29, 5: 29, 7: 29, 8: 29, 10: 29, 12: 28}\n        month_dict_month_two = {1: 29, 3: 28, 5: 29, 7: 29, 8: 28, 10: 29, 12: 27}\n        month_dict_month_three = {1: 28, 3: 27, 5: 28, 7: 27, 8: 27, 10: 28, 12: 26}\n        month_dict_month_four = {1: 27, 3: 26, 5: 27, 7: 26, 8: 26, 10: 27, 12: 25}\n        month_dict_month_five = {1: 26, 3: 25, 5: 26, 7: 26, 8: 25, 10: 26, 12: 24}\n        month_dict_month_six = {1: 25, 3: 24, 5: 25, 7: 24, 8: 24, 10: 25, 12: 23}\n        month_dict_month_seven = {1: 24, 3: 23, 5: 24, 7: 23, 8: 23, 10: 24, 12: 22}\n        month_dict_month_eight = {1: 23, 3: 22, 5: 23, 7: 22, 8: 22, 10: 23, 12: 21}\n        month_dict_month_nine = {1: 22, 3: 21, 5: 22, 7: 21, 8: 21, 10: 22, 12: 20}\n        month_dict_month_ten = {1: 21, 3: 20, 5: 21, 7: 20, 8: 20, 10: 21, 12: 19}\n        month_dict_month_eleven = {1: 20, 3: 19, 5: 20, 7: 19, 8: 19, 10: 20, 12: 18}\n        month_dict_month_twelve = {1: 19, 3: 18, 5: 19, 7: 18, 8: 18, 10: 19, 12: 17}\n        month_dict_month_thirteen = {1: 18, 3: 17, 5: 18, 7: 17, 8: 17, 10: 18, 12: 16}\n        month_dict_month_fourteen = {1: 17, 3: 16, 5: 17, 7: 16, 8: 16, 10: 17, 12: 15}\n        month_dict_month_fifteen = {1: 16, 3: 15, 5: 16, 7: 15, 8: 15, 10: 16, 12: 14}\n        month_dict_month_sixteen = {1: 15, 3: 14, 5: 15, 7: 14, 8: 14, 10: 15, 12: 13}\n        month_dict_month_seventeen = {1: 14, 3: 13, 5: 14, 7: 13, 8: 13, 10: 14, 12: 12}\n        month_dict_month_eighteen = {1: 13, 3: 12, 5: 13, 7: 12, 8: 12, 10: 13, 12: 11}\n        month_dict_month_nineteen = {1: 12, 3: 11, 5: 12, 7: 11, 8: 11, 10: 12, 12: 10}\n        month_dict_month_twenty = {1: 11, 3: 10, 5: 11, 7: 10, 8: 10, 10: 11, 12: 9}\n        month_dict_month_twenty_one = {1: 10, 3: 9, 5: 10, 7: 9, 8: 9, 10: 10, 12: 8}\n        month_dict_month_twenty_two = {1: 9, 3: 8, 5: 9, 7: 8, 8: 8, 10: 9, 12: 7}\n        month_dict_month_twenty",
        "num_ids": 1024
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return txt.split()\n    \n",
        "num_ids": 11
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    lst = []\n    i = 0\n    while i < len(txt):\n        if txt[i]!= \",\":\n            for j in range(i,len(txt)):\n                if txt[j]!= \",\" and txt[j]!= \" \" and txt[j]!= \".\":\n                    word = txt[i:j+1]\n                    if word == word.lower():\n                        if j+1 == len(txt):\n                            lst.append(word)\n                            return lst\n                        else:\n                            lst.append(word)\n        i += 1\n    return lst\n",
        "num_ids": 151
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return re.split(r'\\s+',txt.lower())\n",
        "num_ids": 18
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    l = txt.split()\n    s = []\n    c = []\n    for i in l:\n        s.append(i.split())\n    for i in range(len(s)):\n        c.append(len(s[i]))\n    for i in range(len(c)):\n        if c[i] % 2 == 1:\n            return s[i]\n",
        "num_ids": 93
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [item.strip() for item in txt.lower().split()]\n",
        "num_ids": 20
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sorted_lst = sorted(lst)\n    unique_lst = set(lst)\n    if len(lst)!= len(sorted_lst):\n        return False\n    for num in unique_lst:\n        if num not in sorted_lst:\n            return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not lst:\n        return True\n    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return lst[0] <= lst[1]\n    if len(lst) > 2:\n        if lst[0] <= lst[1]:\n            return is_sorted(lst[1:])\n        else:\n            return False\n",
        "num_ids": 99
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # We can just use a set\n    #if len(lst) < 2:\n        #return True\n",
        "num_ids": 27
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(lst) < 2:\n        return True\n    elif lst[0]!= max(lst):\n        return False\n    else:\n        for i in range(len(lst)-1):\n            if lst[i+1]!= lst[i]:\n                return False\n        return True\n",
        "num_ids": 79
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return True if lst == sorted(lst) else False\n",
        "num_ids": 16
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sorted_lst = []\n    for i in lst:\n        if i not in sorted_lst:\n            sorted_lst.append(i)\n        else:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    start1 = interval1[0]\n    end1 = interval1[1]\n    start2 = interval2[0]\n    end2 = interval2[1]\n",
        "num_ids": 41
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Time: O(max(m, n) * log(min(m, n)))\n    # Space: O(max(m, n))\n    # def is_prime(num):\n    #     if num == 1 or num == 0:\n    #         return False\n    #     for i in range(2, int(num**0.5) + 1):\n    #         if num % i == 0:\n    #             return False\n    #     return True\n",
        "num_ids": 110
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # create a dictionary\n    d = {}\n    # create an empty list\n    l = []\n    # loop through all the intervals\n    for i in range(len(interval1)):\n        # loop through the dictionary\n        for j in range(len(interval2)):\n            # append the key\n            if interval1[i][0] >= interval2[j][0] and interval1[i][1] <= interval2[j][1]:\n                # check if the key is in the dictionary\n                if interval1[i] in d:\n                    # if the key is in the dictionary\n                    if d[interval1[i]] == True:\n                        # add the key\n                        l.append(interval1[i])\n                        # change the key to False\n                        d[interval1[i]] = False\n                else:\n                    # if the key is not in the dictionary\n                    d[interval1[i]] = True\n    # create a set\n    s = set(l)\n    # check if the lenght of the set is prime\n    return len(s) == 1\n",
        "num_ids": 255
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Method 1:\n    if end <= start:\n        return \"NO\"\n    else:\n        return \"YES\"\n    \n    # Method 2:\n    # if start <= end:\n    #     return \"YES\"\n    # else:\n    #     return \"NO\"\n",
        "num_ids": 67
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert (isinstance(interval1, tuple) and isinstance(interval2, tuple)) and len(interval1) == 2 and len(interval2) == 2 and interval1[0] <= interval1[1] and interval2[0] <= interval2[1]\n    \n    # helper function for prime number checker\n    def getPrimeFactors(n):\n        factors = []\n        while n % 2 == 0:\n            factors.append(2)\n            n = n / 2\n        for i in range(3, int(math.sqrt(n) + 1), 2):\n            while n % i == 0:\n                factors.append(i)\n                n = n / i\n        if n > 2:\n            factors.append(n)\n        return factors\n    \n    # check if the two intervals intersect, if not return \"NO\"\n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"NO\"\n    \n    # get prime numbers\n    p1 = getPrimeFactors(interval1[1] - interval1[0] + 1)\n    p2 = getPrimeFactors(interval2[1] - interval2[0] + 1)\n    \n    # check if both prime numbers are the same\n    if p1 == p2:\n        return \"YES\"\n    \n    # check if p1 is a subset of p2\n    else:\n        for f in p1:\n            if f not in p2:\n                return \"NO\"\n        return \"YES\"\n",
        "num_ids": 371
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"YES\" if not (interval1[0] > interval2[1] or interval1[1] < interval2[0]) else \"NO\"\n    # Answer: YES\n",
        "num_ids": 44
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if not (interval1[0] <= interval2[0] <= interval1[1] or interval1[0] <= interval2[1] <= interval1[1]):\n        return \"NO\"\n",
        "num_ids": 51
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code here\n    return \"NO\"\n",
        "num_ids": 13
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if start <= end and end <= end:\n        return \"YES\"\n    return \"NO\"\n",
        "num_ids": 24
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    #return\n    if(interval1[1] < interval2[0] or interval2[1] < interval1[0]):\n        return \"NO\"\n    else:\n        if(is_prime(abs(interval1[1] - interval2[0])):\n            return \"YES\"\n        else:\n            return \"NO\"\n",
        "num_ids": 85
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # check for empty array\n    if not arr:\n        return None\n",
        "num_ids": 18
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not arr:\n        return None\n    \n    sign = 0\n    \n    for i in arr:\n        if i > 0:\n            sign += 1\n        if i < 0:\n            sign -= 1\n            \n    return sign*abs(arr[0])*abs(arr[1])*...*abs(arr[-1])\n        \n",
        "num_ids": 83
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # A list of all signs (0, 1 or -1)\n    signs = [-1, 1]\n    res = 0\n    # Iterate over each element in arr\n    for e in arr:\n        # Check if e is negative\n        if e < 0:\n            # Multiply signs\n            res += e * signs.pop(0)\n        else:\n            # Multiply signs\n            res += e * signs[0]\n    return res\n",
        "num_ids": 108
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not arr:\n        return None\n    res = 0\n    for i in arr:\n        if i == 0:\n            res += i\n        elif i < 0:\n            res -= i\n        else:\n            res += i\n    return res",
        "num_ids": 60
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return None\n    else:\n        return sum(\n            [abs(x) * (x < 0 and -1 or 1) for x in arr])\n",
        "num_ids": 47
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not arr:\n        return None\n    else:\n        res = 0\n        for elem in arr:\n            if elem < 0:\n                res -= elem\n            elif elem > 0:\n                res += elem\n        return res\n",
        "num_ids": 61
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    magnitudes = []\n    for i in arr:\n        if i > 0:\n            magnitudes.append(1)\n        elif i < 0:\n            magnitudes.append(-1)\n        else:\n            magnitudes.append(0)\n",
        "num_ids": 64
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # edge case, empty arr\n    if len(arr) == 0:\n        return None\n",
        "num_ids": 23
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not arr:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum([sign * num for sign, num in zip(*(1 if num == 0 else\n                                                    (-1 if num < 0 else 1)\n                                                for num in arr))])\n    ",
        "num_ids": 45
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    R, C = len(grid), len(grid[0])\n    if R == 1:\n        return grid[0][:k]\n",
        "num_ids": 34
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # if not grid or not k or k <= 0:\n    #     return\n",
        "num_ids": 20
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not grid or k <= 0:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not grid or len(grid) == 0 or len(grid[0]) == 0:\n        return []\n    m = len(grid)\n    n = len(grid[0])\n    if k > m * n:\n        return []\n",
        "num_ids": 58
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Prim's algorithm\n    # Step 1: Create a new graph G with the given grid\n    # Step 2: Get all the odd numbers\n    # Step 3: Get all the even numbers\n    # Step 4: Check if the connected components are odd and even\n    # Step 5: Keep all the nodes with odd neighbors and remove the nodes with even neighbors\n    # Step 6: Add the nodes that have odd neighbors to the set\n    # Step 7: Add the nodes that have even neighbors to the set\n    # Step 8: Assign the start node with the minimum value of odd neighbors\n    # Step 9: Assign the end node with the minimum value of even neighbors\n    # Step 10: Find the shortest path between the start and end nodes\n    # Step 11: For each path between the start and end node, check if the path goes through the odd nodes\n    # Step 12: If it does, add the path to the result\n    # Step 13: If it doesn't, remove the path from the graph\n",
        "num_ids": 221
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n",
        "num_ids": 20
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # ======================================================================\n    # Algorithm: Dijkstra's Algorithm\n    # ======================================================================\n    # For each cell in grid, put its value in a heap\n    # NOTE: A_n[i] = min(A_n[i - 1], A_n[i - 2] + A_n[i - 3] + A_n[i - 4])\n    # For each cell:\n    #   If the value is 0, we are done\n    #   If the value is > 0, we need to find its neighbors.\n    #       Find the nearest neighbor\n    #       If this neighbor has a value > 0, we know we can get to it\n    #           From this neighbor, we want to move to the next cell\n    #           This is because we need to move to a cell that is\n    #           more than one neighbor away from the current cell.\n    #           If this cell has the same value as the current cell,\n    #           we can skip this one\n    #       Otherwise we need to set a new priority to this neighbor.\n    #           We want to set the priority to the current cell\n    #           We want to move to the next neighbor with the min of:\n    #               the current cell value\n    #               and its new neighbor value (A_n[i - 1], A_n[i - 2] + A_n[i - 3] + A_n[i - 4])\n    #           We want to set A_n[i] = A_n[i - 1]\n    #       We can't go back now.\n    #\n    #   If A_n[i] < 0, we can move forward to find the minimum path\n    #   We set A_n[i] to A_n[i - 1] + 1\n    #   We can continue as long as the cell has a value > 0\n    # ======================================================================\n    # Initialize the start cell\n    start = 0\n    n = len(grid)\n    # Make a list of the values of the start cell\n    heap = []\n    heap.append(grid[start])\n    for i in range(1, n * n):\n        # Get the next cell\n        next = heapq.heappop(heap)\n        # Check if the cell has a value\n        if next > 0:\n            # If it does, we need to find its neighbors\n            # We can get the next cell by adding the current value\n            # to the current cell\n            neighbor_value = start + 1\n            # If the next cell has a value > 0, we can get there\n            if neighbor_value < n * n:\n                # Make sure we add the neighbor\n                heap.append(grid[neighbor_value])\n            # Otherwise we can just skip this one\n            else:\n                # Make sure we add the current cell value\n                heap.append(grid[start])\n        # Set the new cell's value to the minimum value between its neighbors\n        # If A_n[i] is less than A_n[i - 1], it means we have found a\n        # shorter path.\n        A_n = start\n        B_n = A_n - 1\n        C_n = A_n - 2\n        D_n = A_n - 3\n        min_value = min(grid[A_n], grid[B_n] + grid[C_n] + grid[D_n])\n        if A_n > 0 and min_value <= 0:\n            # If A_n > 0, it means we have found a shorter path.\n            # The new value of A_n is A_n - 1.\n            # Set the new value of A_n to the minimum of A_n - 1,\n            # and the minimum of A_n - 2, and A_n - 3\n            A_n = min_value - 1\n            B_n = A_n - 1\n            C_n = A_n - 2\n            D_n = A_n - 3\n            min_value = min(grid[A_n], grid[B_n] + grid[C_n] + grid[D_n])\n        # If A_n < 0, we need to move forward to find the minimum path\n        # Set A_n to the minimum of A_n - 1, A_n - 2, and A_n - 3\n        # And add 1 to it\n        A_n = min_value - 1",
        "num_ids": 1024
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # first approach\n    \n    grid_size = len(grid)\n    n_rows = len(grid)\n    n_cols = len(grid[0])\n    \n    def countNeighbors(grid, r, c):\n        count = 0\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if i!= 0 or j!= 0:\n                    if r + i >= 0 and r + i < n_rows and c + j >= 0 and c + j < n_cols:\n                        count += 1\n        return count\n    \n    def getMinPath(grid, curr_r, curr_c):\n        if curr_r >= n_rows or curr_r < 0 or curr_c >= n_cols or curr_c < 0:\n            return\n        if grid[curr_r][curr_c] == k:\n            if curr_r == n_rows - 1 and curr_c == n_cols - 1:\n                return\n            min_paths.append(grid[curr_r][curr_c])\n        else:\n            if curr_r == n_rows - 1:\n                curr_c += 1\n            elif curr_c == n_cols - 1:\n                curr_r += 1\n            elif countNeighbors(grid, curr_r, curr_c) > k:\n                curr_c += 1\n            else:\n                curr_r += 1\n        getMinPath(grid, curr_r, curr_c)\n",
        "num_ids": 376
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    from collections import deque\n    grid = [[x for x in grid[i]] for i in range(len(grid))]\n    m, n = len(grid), len(grid[0])\n    visited = [[False for _ in range(n)] for _ in range(m)]\n    visited[0][0] = True\n    queue = deque([(0, 0, 0)])\n    while queue:\n        i, j, cost = queue.popleft()\n        if i == m - 1 and j == n - 1:\n            return grid[i][j]\n        for x, y in [(i + 1, j), (i, j + 1)]:\n            if 0 <= x < m and 0 <= y < n and not visited[x][y]:\n                if x == i + 1 and y == j + 1:\n                    queue.append((x, y, cost))\n                else:\n                    if grid[x][y] > grid[i][j]:\n                        queue.append((x, y, cost + 1))\n                        visited[x][y] = True\n    return []\n",
        "num_ids": 257
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    \n    if k >= rows * cols or not grid:\n        return []\n    \n    if k == 1:\n        return min(grid)\n    \n    min_dist = min(rows * cols - 1, k)\n    \n    def dfs(grid, rows, cols, i, j, prev, curr_min, visited):\n        if i < 0 or i >= rows or j < 0 or j >= cols:\n            return False\n        \n        if grid[i][j] > prev:\n            return False\n        \n        if visited[i][j] or grid[i][j] == prev:\n            return False\n        \n        visited[i][j] = True\n        \n        if curr_min > grid[i][j]:\n            curr_min = grid[i][j]\n            \n        for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            dfs(grid, rows, cols, i + di, j + dj, prev, curr_min, visited)\n            \n        visited[i][j] = False\n        \n        return True\n    \n    curr_min = 10**6\n    \n    visited = [[False] * cols for _ in range(rows)]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if dfs(grid, rows, cols, i, j, 0, curr_min, visited):\n                curr_min = min(curr_min, grid[i][j])\n                \n    return [curr_min]\n    \ndef minPathSum(grid):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n",
        "num_ids": 473
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n < 2:\n        return n\n    else:\n        if n % 2 == 0:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else:\n            return tri(n - 2) + tri(n - 1) + tri(n + 1)\n",
        "num_ids": 75
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    a = 3\n    b = 2\n    c = 1\n    lista = []\n    for _ in range(n + 1):\n        a, b, c = b, c, a + b + c\n        lista.append(a)\n    return lista\n",
        "num_ids": 64
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    trib = [3, 1, 4, 2, 5]\n    if n == 1:\n        return trib\n    for i in range(2,n):\n        trib.append(sum(trib[-3:])+ trib[-1])\n    return trib\n",
        "num_ids": 65
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 3:\n        return list(range(1, n + 1))\n    a = [1, 3]\n    b = a + a + a\n    for i in range(3, n + 1):\n        a = a + b + a\n        b = a + a + a\n    return a\n",
        "num_ids": 74
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    t = [3]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            t.append(t[-1] + t[-2])\n        else:\n            t.append(t[-1] + t[-2] + t[-3])\n    return t\n",
        "num_ids": 78
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    return (tri(n - 1) + tri(n - 2) + tri(n - 3))\n",
        "num_ids": 64
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = []\n    if n <= 0:\n        return result\n    result.append(1)\n    if n == 1:\n        return result\n    result.append(1 + n/2)\n    if n == 2:\n        return result\n    result.append(1 + n/2 + n/2)\n    if n == 3:\n        return result\n    result.append(1 + n/2 + n/2 + n/2)\n    for i in range(4, n+1):\n        result.append(result[i-3] + result[i-2] + result[i-1])\n    return result\n",
        "num_ids": 149
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if n > 2:\n        return [1, 1] + [sum(tri(n - 1)), sum(tri(n - 2)), sum(tri(n - 3))]\n",
        "num_ids": 82
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    seq = []\n    for i in range(1, n+1):\n        if i == 1:\n            seq.append(3)\n        elif i == 2:\n            seq.append(1)\n        elif i == 3:\n            seq.append(2)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + seq[i - 3])\n    return seq\n",
        "num_ids": 100
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3, 2, 8]\n",
        "num_ids": 46
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return 1 if all(int(i) % 2 == 1 for i in str(n)) else 0\n",
        "num_ids": 25
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 10:\n        return 0\n    elif n % 10 % 2 == 1:\n        return 1\n    else:\n        return n\n",
        "num_ids": 36
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 1:\n        return 0\n    n = str(n)\n    odds = 0\n    for i in range(len(n)):\n        if int(n[i]) % 2!= 0:\n            odds += 1\n    return odds * int(n[0])\n",
        "num_ids": 70
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return n % 10\n    \ndef multiples(n):\n    \"\"\"Given a positive integer n,\n    return the sum of the multiples of 3 and 5 below n.\n    For example:\n    multiples(10)  == 22\n    multiples(1000) == 3323\n    \"\"\"\n    return 3 * sum(i for i in range(n // 3) if not digits(i)) + 5 * sum(i for i in range(n // 5) if not digits(i))",
        "num_ids": 112
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n % 10 == 0:\n        return 0\n    else:\n        return n % 10\n    \ndef sum_of_digits(n):\n    \"\"\"Return the sum of the even digits.\n    For example:\n    sum_of_digits(1)  == 1\n    sum_of_digits(4)  == 1\n    sum_of_digits(235) == 2\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n    \ndef multiply_odd_digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    For example:\n    multiply_odd_digits(1)  == 1\n    multiply_odd_digits(4)  == 0\n    multiply_odd_digits(235) == 15\n    \"\"\"\n    num = str(n)\n    odd_mult = 1\n    for i in range(0, len(num), 2):\n        odd_mult *= int(num[i])\n    return odd_mult\n",
        "num_ids": 261
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        n = str(n)\n        prod = 1\n        for i in n:\n            if int(i) % 2!= 0:\n                prod *= int(i)\n    return prod",
        "num_ids": 63
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # your code here\n    return sum([i for i in n if i % 2])\n    \n    \nprint(digits(1))\nprint(digits(4))\nprint(digits(235))\nprint(digits(234))\nprint(digits(1000))\n",
        "num_ids": 66
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # assert n > 0\n    # return int(f'{n % 10}' * int(n / 10))\n    return (n % 10) * int(n / 10)\n",
        "num_ids": 44
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 1\n    while n > 0:\n        if n % 10 % 2 == 1:\n            count = count * (n % 10)\n        n = n // 10\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #Use regex to make sure we are only looking for brackets\n    #Also check if the brackets are nested\n    if re.search(r'\\[[\\]]+',string):\n        return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    string = string.replace(' ', '')\n    new_string = string\n    stack = []\n    if len(string) == 0 or len(string) == 1:\n        return False\n    else:\n        for i in range(len(string)):\n            if string[i] == '[':\n                stack.append('[')\n            elif string[i] == ']':\n                if stack!= [] and stack[-1] == '[':\n                    stack.pop()\n                else:\n                    return False\n        if stack == []:\n            return True\n        else:\n            return False\n",
        "num_ids": 140
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    def helper(string):\n        if string == '':\n            return False\n        if '[]' in string:\n            return True\n        if string == '[]':\n            return True\n        if string[0] == '[' and string[-1] == ']':\n            string = string[1:-1]\n            return helper(string)\n        if string[0] == '[' and string[-1] == '[':\n            string = string[1:-1]\n            return helper(string)\n        else:\n            return False\n    \n    return helper(string)\n        \n",
        "num_ids": 138
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # your code here\n    start = 0\n    end = 0\n    while True:\n        if string[start] == \"[\":\n            start += 1\n        elif string[start] == \"]\":\n            start += 1\n        elif string[start] == \"[\":\n            start += 1\n        else:\n            return False\n",
        "num_ids": 78
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(0,len(string)):\n        if string[i]==\"[\":\n            count+=1\n        if string[i]==\"]\" and count==0:\n            return True\n        if string[i]==\"]\" and count>0:\n            count-=1\n    return False\n",
        "num_ids": 79
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if string == '': return False\n    if string[0] == '[' and string[-1] == ']': return True\n    if string[0] == '[' and string[-1] == ']': return is_nested(string[1:-1])\n    return False\n",
        "num_ids": 68
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for char in string:\n        if char == '[' or char == '{':\n            count += 1\n        if char == ']' or char == '}':\n            count -= 1\n        if count < 0:\n            return False\n    if count == 0:\n        return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def is_nested(s):\n        stack = []\n        \n        for char in s:\n            if char == '[':\n                stack.append(char)\n            elif char == ']':\n                if not stack:\n                    return False\n                else:\n                    stack.pop()\n        return len(stack) == 0\n    return is_nested(string)\n",
        "num_ids": 88
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    while '[[' in string:\n        string = string.replace('[[', ']')\n        if string.count('[') == 1:\n            return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    counter = 0\n    for char in string:\n        if char == '[':\n            counter += 1\n        elif char == ']':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n",
        "num_ids": 56
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    import math\n",
        "num_ids": 5
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #return sum([(a**2) for a in lst])\n    lst_temp = lst\n    lst_temp = [a**2 for a in lst_temp]\n    return sum(lst_temp)\n    \n",
        "num_ids": 58
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if type(lst)!= list:\n        return \"Not a list\"\n    else:\n        return round(sum([i**2 for i in lst]))\n",
        "num_ids": 41
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst = sorted(lst)\n    lst = list(map(lambda x: round(x**2), lst))\n    return sum(lst)\n",
        "num_ids": 40
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    lst_sq = []\n    for x in lst:\n        lst_sq.append(x**2)\n    \n    return sum(lst_sq)\n    \n    \n    \n    \n",
        "num_ids": 52
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = 0\n    for num in lst:\n        result += int(math.ceil(num * 2)) ** 2\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    output_list = []\n    for i in lst:\n        output_list.append(i**2)\n    return round(sum(output_list),2)\n    \n",
        "num_ids": 43
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        sum = sum + (lst[i]**2)\n    return round(sum)\n",
        "num_ids": 41
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum(x*x for x in lst)\n    \n",
        "num_ids": 17
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sq = list(map(lambda x: x*x, lst))\n    return sum(sq)\n",
        "num_ids": 26
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Code Here\n    return True if txt[-1].isalpha() and txt.find(' ') == -1 else False\n",
        "num_ids": 33
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return False if is_word(txt) else True\n",
        "num_ids": 14
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Create the function here.\n    return True if txt[-1].isalpha() and txt.split()[-1]!= '' else False\n",
        "num_ids": 38
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # YOUR CODE HERE\n",
        "num_ids": 7
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # your code here\n    return True if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyz\" else False\n",
        "num_ids": 48
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n    \n    \ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n",
        "num_ids": 87
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return not txt[-1].isalpha() and not txt[-1].isnumeric()\n",
        "num_ids": 26
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if txt == '':\n        return False\n    else:\n        return (txt[-1].isalpha() and not txt[-1].isalpha())\n",
        "num_ids": 40
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return not (txt[-1].isalpha() and txt[-1].isalpha())\n",
        "num_ids": 24
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return txt[-1].isalpha() and not txt[-1].isalpha() in words\n",
        "num_ids": 26
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Return the largest element if any such element exists\n    if arr:\n        return max(range(len(arr)), key=lambda i: arr[i])\n    else:\n        return -1\n",
        "num_ids": 47
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = 0\n    e = len(arr) - 1\n    while s < e:\n        m = s + (e - s) // 2\n        if arr[m] >= arr[s]:\n            s = m + 1\n        else:\n            e = m - 1\n    if arr[s] < arr[e]:\n        return e\n    return -1\n",
        "num_ids": 87
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(arr) <= 1:\n        return -1\n    \n    index = -1\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            index = i-1\n            break\n    \n    if index == -1:\n        return -1\n    else:\n        return index\n",
        "num_ids": 83
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Loop through the array and create a dictionary.\n    # The key is the value of the element, the value is the index of the next value.\n    # If the key is greater than or equal to the next key,\n    # then the next value should be the key.\n    # If it is less than that key, then we can just return the key.\n    # If it is equal to that key, return -1 to indicate we should break.\n",
        "num_ids": 102
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not arr:\n        return -1\n",
        "num_ids": 12
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # print(arr)\n    # create a list which contains (index, value) pairs\n    pairs = [(i, arr[i]) for i in range(len(arr))]\n    # print(pairs)\n    # sort the list in ascending order\n    pairs.sort()\n    # print(pairs)\n    # create a second list to store index of index's value\n    indices = []\n    # print(pairs)\n    # iterate through the list\n    for index, value in pairs:\n        # if the next value is less than or equal to the value at the current\n        # index then add the index to the indices list\n        if index == len(arr) - 1:\n            return -1\n        if value <= arr[index + 1]:\n            indices.append(index)\n    # print(indices)\n    # create a second list to store the values\n    values = []\n    # print(pairs)\n    # iterate through the list\n    for index, value in pairs:\n        # if the current value is greater than the element before the\n        # current value then add the value to the values list\n        if index!= 0:\n            if value > arr[index - 1]:\n                values.append(value)\n    # print(values)\n    # if the lengths of the two lists are not equal then the array is\n    # not sorted\n    if len(indices)!= len(values):\n        return -1\n    # else return the smallest index\n    return indices[0]\n",
        "num_ids": 353
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Get the first element\n    if len(arr) == 0:\n        return -1\n    first = arr[0]\n    # Iterate over the array\n    for i in range(1, len(arr)):\n        # If the current element is larger than the previous element\n        if arr[i] >= first:\n            # Return the index of the element\n            return i\n    # If the array contains no duplicate elements and thus only\n    # contains elements from 1 to n-1, then -1 is the answer\n    return -1\n",
        "num_ids": 125
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            return i\n    return -1\n",
        "num_ids": 38
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Step 1: Sort the array\n    arr.sort()\n    # Step 2: Create a temp variable to store the index of the smallest element\n    # which is not greater than or equal to the next element.\n    smallest_element_index = -1\n    # Step 3: Iterate through the array\n    for i in range(1, len(arr)):\n        # Step 4: If the element to the left of i is smaller than the element\n        # to the right of i then update the smallest element index.\n        if arr[i] >= arr[i - 1]:\n            smallest_element_index = i\n    # Step 5: Return the smallest element index.\n    return smallest_element_index\n",
        "num_ids": 163
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    try:\n        smallest = float('inf')\n        largest = float('-inf')\n        for i in lst:\n            if i < 0:\n                smallest = i if i < smallest else smallest\n            elif i > 0:\n                largest = i if i > largest else largest\n        return (smallest, largest) if smallest < largest else (largest, smallest)\n    except TypeError:\n        return (None, None)\n",
        "num_ids": 102
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    negative_num = None\n    positive_num = None\n    for num in lst:\n        if num < 0:\n            if negative_num is None:\n                negative_num = num\n            else:\n                negative_num = max(negative_num, num)\n        elif num > 0:\n            if positive_num is None:\n                positive_num = num\n            else:\n                positive_num = min(positive_num, num)\n    if negative_num is None and positive_num is None:\n        return (None, None)\n    return (negative_num, positive_num)\n",
        "num_ids": 141
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not lst:\n        return None, None\n    # Positive\n    pos = lst[0]\n    for i in lst:\n        if i > 0:\n            pos = i\n            break\n    # Negative\n    neg = lst[0]\n    for i in lst:\n        if i < 0:\n            neg = i\n            break\n    # Return\n    return (neg, pos)\n",
        "num_ids": 98
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    try:\n        max = min = lst[0]\n        for i in range(1,len(lst)):\n            if lst[i] < 0:\n                max = lst[i]\n                continue\n            else:\n                if lst[i] > max:\n                    max = lst[i]\n            if lst[i] > min:\n                min = lst[i]\n    except:\n        return (None, None)\n    return (max, min)\n",
        "num_ids": 120
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    neg = None\n    pos = None\n",
        "num_ids": 11
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    m = min(lst)\n    if m > 0:\n        return (None, m)\n    n = max(lst)\n    if n < 0:\n        return (n, None)\n    return (m, n)\n",
        "num_ids": 57
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return (None, None) if not lst else (min(lst) if lst[0] > 0 else max(lst), max(lst) if lst[0] < 0 else min(lst))\n",
        "num_ids": 53
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # Your Code Here\n    negative = []\n    positive = []\n    \n    # if no negative or positive integers\n    if len(lst) == 0:\n        return (None, None)\n    \n    # if there are negative integers\n    if len(lst) > 0:\n        for x in lst:\n            if x < 0:\n                negative.append(x)\n    \n    # if there are positive integers\n    if len(lst) > 0:\n        for x in lst:\n            if x > 0:\n                positive.append(x)\n        \n    # if there are both negative integers and positive integers\n    if len(negative) > 0 and len(positive) > 0:\n        a = max(negative)\n        b = min(positive)\n        return (a, b)\n    \n    # if there is no negative integers and only positive integers\n    if len(negative) == 0 and len(positive) > 0:\n        a = min(positive)\n        b = max(positive)\n        return (a, b)\n    \n    # if there is only negative integers\n    if len(negative) > 0 and len(positive) == 0:\n        a = max(negative)\n        b = None\n        return (a, b)\n",
        "num_ids": 297
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lst = lst\n    negative = False\n    positive = False\n    for i in lst:\n        if i < 0:\n            negative = True\n        if i > 0:\n            positive = True\n    if negative == True and positive == True:\n        return None\n    if negative == False and positive == False:\n        return None, None\n    if negative == True:\n        if positive == True:\n            return None, min(lst)\n        else:\n            return min(lst), None\n    if negative == False and positive == True:\n        return None, max(lst)\n    if negative == False and positive == False:\n        return None, None\n",
        "num_ids": 157
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # TODO: Implement this function.\n    if not lst:\n        return (None, None)\n    elif any([i < 0 for i in lst]):\n        return (None, None)\n    elif any([i > 0 for i in lst]):\n        return (None, None)\n    else:\n        return (min(lst), max(lst))\n",
        "num_ids": 92
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a >= b:\n        return a\n    else:\n        return b\n",
        "num_ids": 20
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if type(a) == type(b):\n        return a\n    elif type(a)!= type(b):\n        return b if type(a) == type(1) else a\n    elif type(a) == type(1) and type(b) == type(2):\n        return \"2\" if float(a) > float(b) else \"1\"\n    elif type(a) == type(1) and type(b) == type(1):\n        return a if a == b else None\n    elif type(a) == type(1) and type(b) == type(2.5):\n        return \"2.5\" if float(a) > float(b) else \"1.5\"\n    elif type(a) == type(1) and type(b) == type(2.5):\n        return \"2\" if float(a) > float(b) else \"1\"\n    elif type(a) == type(1) and type(b) == type(1.1):\n        return \"1.1\" if float(a) > float(b) else \"1\"\n    elif type(a) == type(1.1) and type(b) == type(1.1):\n        return \"1\" if a > b else \"1.1\"\n    elif type(a) == type(1.1) and type(b) == type(1):\n        return \"1\" if float(a) > float(b) else \"1.1\"\n    elif type(a) == type(1) and type(b) == type(1.1):\n        return \"1\" if float(a) > float(b) else \"1.1\"\n    elif type(a) == type(2) and type(b) == type(2):\n        return \"2\" if float(a) > float(b) else \"1\"\n    elif type(a) == type(2) and type(b) == type(2.5):\n        return \"2.5\" if float(a) > float(b) else \"1.5\"\n    elif type(a) == type(2) and type(b) == type(2.5):\n        return \"2\" if float(a) > float(b) else \"1\"\n    elif type(a) == type(2) and type(b) == type(2.5) and type(b) == type(1.1):\n        return \"2.5\" if float(a) > float(b) else \"1.5\"\n    elif type(a) == type(2.5) and type(b) == type(2.5):\n        return \"2.5\" if float(a) > float(b) else \"1.5\"\n    elif type(a) == type(2.5) and type(b) == type(2.5) and type(b) == type(1.1):\n        return \"2.5\" if float(a) > float(b) else \"1.5\"\n    elif type(a) == type(1) and type(b) == type(1):\n        return \"1\" if a > b else \"1.1\"\n    elif type(a) == type(1) and type(b) == type(1.1):\n        return \"1.1\" if a > b else \"1\"\n    elif type(a) == type(1) and type(b) == type(1.1) and type(b) == type(1.1):\n        return \"1.1\" if a > b else \"1.1\"\n    elif type(a) == type(2.5) and type(b) == type(2.5):\n        return \"2.5\" if float(a) > float(b) else \"1.5\"\n    elif type(a) == type(2.5) and type(b) == type(2.5) and type(b) == type(1.1):\n        return \"2.5\" if float(a) > float(b) else \"1.5\"\n    elif type(a) == type(2.5) and type(b) == type(2.5) and type(b) == type(1.1) and type(b) == type(1.1):\n        return \"2.5\" if float(a) ",
        "num_ids": 1025
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if type(a) == type(b) or a == b:\n        return None\n    if type(a) == float:\n        if a > b:\n            return a\n        return b\n    if type(a) == int:\n        if a > b:\n            return a\n        return b\n    if type(a) == str:\n        if a > b:\n            return a\n        return b\n",
        "num_ids": 97
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if type(a)==type(b):\n        if a<b:\n            return b\n        else:\n            return a\n    elif type(a)==float and type(b)==float:\n        if a>b:\n            return b\n        else:\n            return a\n    elif type(a)==int and type(b)==float:\n        return a\n    elif type(a)==float and type(b)==int:\n        return a\n    elif type(a)==str and type(b)==float:\n        return \"\".join([a,b])\n    elif type(a)==float and type(b)==str:\n        return \"\".join([b,a])\n    elif type(a)==int and type(b)==str:\n        return \"\".join([a,b])\n    elif type(a)==str and type(b)==int:\n        return \"\".join([b,a])\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes two equal length lists or tuples and returns\n    one of the lists depending on which value comes first.\n    Example: (1, 2) > (2, 1) \u279e 1\n    Example: (1, 2) < (2, 1) \u279e 2\n    Example: (1, 1) < (1, 1) \u279e None\n    Example: (1, 2) < (2, 1) \u279e None\n    \"\"\"\n    if len(a)==len(b):\n        for i in range(len(a)):\n            if a[i]>b[i]:\n                return a\n            elif a[i]<b[i]:\n                return b\n    else:\n        return None\n    \"\"\"\n    Compare two numbers for which the absolute value is less than 10:\n    1. Check if a is even or odd.\n    2. If even, check if b is even or odd\n    3. If odd, check if b is even or odd\n    4. If equal, return \"both are even\"\n    5. If b is odd, return \"b is odd\"\n    6. If a is odd, return \"a is odd\"\n    \"\"\"\ndef compare_three(a, b):\n    \"\"\"\n    Create a function that takes three integers and returns which one is\n    greater.\n    Example: 1 > 2, 1 > 3, 2 > 3\n    Example: 1 > 1, 1 < 1\n    Example: 1 < 1\n    Note: use > or < to compare\n    \"\"\"\n    if a>b and b>a:\n        return a\n    elif a>b and b<a:\n        return b\n    elif a<b and b<a:\n        return a\n    elif a<b:\n        return b\n    \"\"\"\n    Return the largest of the three numbers.\n    Example: compare_three(3, 2, 1) \u279e 3\n    Example: compare_three(1, 2, 3) \u279e 3\n    Example: compare_three(4, 4, 4) \u279e 4\n    Example: compare_three(1, 3, 1) \u279e 1\n    \"\"\"\ndef compare_four(a, b):\n    \"\"\"\n    Create a function that takes two equal length lists or tuples and returns\n    one of the lists depending on which value comes first.\n    Example: (1, 2) > (2, 1) \u279e 1\n    Example: (1, 2) < (2, 1) \u279e 2\n    Example: (1, 1) < (1, 1) \u279e None\n    Example: (1, 2) < (2, 1) \u279e None\n    \"\"\"\n    if len(a)==len(b):\n        for i in range(len(a)):\n            if a[i]>b[i]:\n                return a\n            elif a[i]<b[i]:\n                return b\n    else:\n        return None\n    \"\"\"\n    Compares the elements of two lists.\n    If the first element is greater than the second element, the second element\n    should be in the list and the first element should be None.\n    If the first element is lesser than the second element, the first element\n    should be in the list and the second element should be None.\n    If both are None, then they are equal.\n    If the elements are equal, the",
        "num_ids": 1025
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return max(a,b) if a!=b else None\n",
        "num_ids": 17
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return None if a == b else max(a, b)",
        "num_ids": 15
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if type(a) is str:\n        if a == b:\n            return None\n        else:\n            return b if type(b) is str else float(b)\n    else:\n        return b if type(b) is str else float(b) if type(b) is not str else max(a,b)\n",
        "num_ids": 77
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if isinstance(a, str) == True:\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, int) == True:\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, float) == True:\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        return None\n",
        "num_ids": 107
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a >= b:\n        return a\n    return b\n",
        "num_ids": 16
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a > b:\n        return a\n    if a == b:\n        return None\n    else:\n        return b\n",
        "num_ids": 31
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return n%2 == 0 and (n/2)%2 == 0 and ((n/2) + 1)%2 == 0 and ((n/2) + 2)%2 == 0\n",
        "num_ids": 45
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return n%2 == 0 and (n - n%2)%2 == 0\n",
        "num_ids": 21
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(2, n):\n        if is_odd(i):\n            continue\n        if not is_even(i):\n            return False\n        if not is_even(i+2):\n            return False\n        if not is_even(i+4):\n            return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return n == sum(map(lambda x: x % 2, filter(lambda x: x % 2 == 0, range(1, n + 1))))\n",
        "num_ids": 36
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n_is_sum_of_4_even = False\n    if(n % 2 == 0):\n        return False\n    else:\n        if((n - 1) % 2 == 0):\n            n = n - 1\n        elif((n - 2) % 2 == 0):\n            n = n - 2\n        elif((n - 3) % 2 == 0):\n            n = n - 3\n        else:\n            return False\n        for i in range(n):\n            if((n - i) % 2 == 0):\n                n = n - i\n        if(n == 0):\n            n_is_sum_of_4_even = True\n    if(n_is_sum_of_4_even):\n        return True\n    else:\n        return False\n",
        "num_ids": 184
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return is_equal_to_sum_even_rec(n, 0)\n",
        "num_ids": 20
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return (n % 2 == 0) and (n >= 4) and (n < 20)\n",
        "num_ids": 23
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert(n >= 0)\n    \n    if(n % 2!= 0):\n        return False\n    \n    if(n <= 6):\n        return False\n    \n    s = sum_even_numbers(n)\n    \n    return s == n\n",
        "num_ids": 63
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return n % 2 == 0 and n == 2 * (n / 2) + 1\n",
        "num_ids": 21
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 0:\n        return False\n    elif n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return False\n    elif n == 5:\n        return True\n    elif n == 6:\n        return False\n    elif n == 7:\n        return True\n    elif n == 8:\n        return False\n    elif n == 9:\n        return True\n    else:\n        evens = 0\n        while n > 0:\n            n -= 2\n            if n <= 0:\n                break\n            evens += 1\n        return evens == 4\n",
        "num_ids": 165
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    factorial = 1\n    for i in range(n):\n        factorial *= n-i\n    return factorial\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    x = 1\n    for i in range(1, n+1):\n        x = x * i\n    return x",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return factorial(n) * factorial(n-1) * factorial(n-2) *... * factorial(1)\n",
        "num_ids": 33
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    brazilian_factorial = 1\n",
        "num_ids": 11
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial * i\n    return factorial\n    \n",
        "num_ids": 36
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n - 8) * special_factorial(n - 9) * special_factorial(n - 10) * special_factorial(n - 11) * special_factorial(n - 12) * special_factorial(n - 13) * special_factorial(n - 14) * special_factorial(n - 15) * special_factorial(n - 16) * special_factorial(n - 17) * special_factorial(n - 18) * special_factorial(n - 19) * special_factorial(n - 20) * special_factorial(n - 21) * special_factorial(n - 22) * special_factorial(n - 23) * special_factorial(n - 24) * special_factorial(n - 25) * special_factorial(n - 26) * special_factorial(n - 27) * special_factorial(n - 28) * special_factorial(n - 29) * special_factorial(n - 30) * special_factorial(n - 31) * special_factorial(n - 32) * special_factorial(n - 33) * special_factorial(n - 34) * special_factorial(n - 35) * special_factorial(n - 36) * special_factorial(n - 37) * special_factorial(n - 38) * special_factorial(n - 39) * special_factorial(n - 40) * special_factorial(n - 41) * special_factorial(n - 42) * special_factorial(n - 43) * special_factorial(n - 44) * special_factorial(n - 45) * special_factorial(n - 46) * special_factorial(n - 47) * special_factorial(n - 48) * special_factorial(n - 49) * special_factorial(n - 50) * special_factorial(n - 51) * special_factorial(n - 52) * special_factorial(n - 53) * special_factorial(n - 54) * special_factorial(n - 55) * special_factorial(n - 56) * special_factorial(n - 57) * special_factorial(n - 58) * special_factorial(n - 59) * special_factorial(n - 60) * special_factorial(n - 61) * special_factorial(n - 62) * special_factorial(n - 63) * special_factorial(n - 64) * special_factorial(n - 65) * special_factorial(n - 66) * special_factorial(n - 67) * special_factorial(n - 68) * special_factorial(n - 69) * special_factorial(n - 70) * special_factorial(n - 71) * special_factorial(n - 72) * special_factorial(n - 73) * special_factorial(n - 74) * special_factorial(n - 75) * special_factorial(n - 76) * special_factorial(n - 77) * special_factorial(n - 78) * special_factorial(n - 79) * special_factorial(n - 80) * special_factorial(n - 81) * special_factorial(n - 82) * special_factorial(n - 83) * special_factorial(n - 84) * special_factorial(n - 85) * special_factorial(n - 86) * special_factorial(n - 87) * special_factorial(n - 88) * special_factorial(n - 89) * special_factorial(n - 90) * special_factorial(n - 91) * special_factorial(n - 92) * special_factorial(n - 93) * special_factorial(n - 94) * special_factorial(n - 95) * special_factorial(n - 96) * special_factorial(n - 97) * special_factorial(n - 98) * special_factorial(n - 99) * special_factorial(n - 100)\n    \"\"\"\n    return n * special_factorial(n - 1) * special_fac",
        "num_ids": 1025
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    resultado = 1\n",
        "num_ids": 7
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    factorial = 1\n    if n < 0:\n        return \"Non posso calcolare questo fatto per qualche numero negativo\"\n    if n == 0:\n        return 1\n    while n > 1:\n        factorial *= n\n        n -= 1\n    return factorial\n",
        "num_ids": 72
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    text = text.replace(' ','_')\n    while (' 'in text):\n        text = text.replace('  ','_')\n    return text\n",
        "num_ids": 37
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return re.sub(r' ', '_', text).strip('_')\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return re.sub(\"\\s+\", \"\", text).strip()\n    \nif __name__ == '__main__':\n    \n    #Test your function here\n    print fix_spaces(\"Example\") == \"Example\"\n    print fix_spaces(\"Example 1\") == \"Example_1\"\n    print fix_spaces(\" Example 2\") == \"_Example_2\"\n    print fix_spaces(\" Example   3\") == \"_Example-3\"\n    print fix_spaces(\"   Example 4\") == \"Example_4\"\n    print fix_spaces(\"Example 1   Example 2\") == \"_Example_1-Example_2\"\n    print fix_spaces(\"Example    Example\") == \"Example_Example",
        "num_ids": 164
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    text = text.replace(\" \", \"_\")\n    \n    # if we have an odd number of spaces\n    # replace the space with -\n    # if we have only 2 spaces \n    # replace the space with _\n    if len(text) % 2!= 0:\n        text = text.replace(\" \", \"_\")\n    else:\n        text = text.replace(\" \", \"\")\n    return text\n",
        "num_ids": 94
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"\")\n    return text\n",
        "num_ids": 28
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    text = text.replace(' ', '_')\n    if len(text) > 2:\n        text = text.replace('  ', '_')\n        text = text.replace(' ', '_')\n    return text\n",
        "num_ids": 52
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    text = text.replace(\" \",\"_\")\n    # loop thru the string and check if there is an even number of spaces\n    # if there is, remove the last character of the string\n    # if there is no even number of spaces, then there must be more than 2 spaces\n    # if so, add an underscore and remove the last character of the string\n    if text.count(\" \") % 2 == 1:\n        text = text[:-1]\n        text = \"_\" + text\n    return text\n",
        "num_ids": 116
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    return re.sub('\\s+', '_', text)\n",
        "num_ids": 19
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(text) == 0:\n        return text\n    if text[0] == \" \":\n        return text[0] + fix_spaces(text[1:])\n    if text[-1] == \" \":\n        return fix_spaces(text[:-1]) + text[-1]\n    return text[0] + fix_spaces(text[1:]) + text[-1]\n",
        "num_ids": 99
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    return re.sub(\" +\", \"_\", text)\n",
        "num_ids": 16
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if (file_name.count('.')!= 1) or (len(file_name) < 4) or (len(file_name) > 15):\n        return 'No'\n    else:\n        return 'Yes'\n",
        "num_ids": 54
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if file_name == \"\":\n        return \"No\"\n    elif len(file_name) > 3 and file_name.find(\".\") == -1:\n        return \"No\"\n    elif file_name[0].isalpha() == False or file_name[0].isnumeric() == False:\n        return \"No\"\n    elif file_name[0].isalpha():\n        file_name = file_name[0] + file_name[1:]\n        file_name = file_name.lower()\n        if file_name.find(\"ex\")!= -1 or file_name.find(\"exe\")!= -1 or file_name.find(\"dot\")!= -1:\n            return \"No\"\n    elif file_name[0].isdigit():\n        file_name = file_name[0] + file_name[1:]\n        file_name = file_name.lower()\n        if file_name.find(\"dot\")!= -1 or file_name.find(\"exe\")!= -1:\n            return \"No\"\n    elif file_name[0].isupper():\n        file_name = file_name[0] + file_name[1:]\n        file_name = file_name.lower()\n        if file_name.find(\"dot\")!= -1 or file_name.find(\"exe\")!= -1 or file_name.find(\"dll\")!= -1:\n            return \"No\"\n    return \"Yes\"\n",
        "num_ids": 351
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not file_name.startswith(string.ascii_letters[0:26]):\n        return 'No'\n    if len(file_name) > 3:\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    for i in file_name:\n        if not i in string.ascii_letters[26:] + string.digits:\n            return 'No'\n    if file_name[-3:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 140
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return bool(re.match(r\"^[A-Za-z]*\\.?(?:txt|exe|dll)$\", file_name))\n",
        "num_ids": 38
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(file_name)!= len(set(file_name)) or \\\n        not re.search(\"[0-9]+\", file_name) or \\\n        not re.search(\"[a-zA-Z]\", file_name) or \\\n        re.search(\"[. ]\", file_name) or \\\n        file_name[0] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return \"No\"\n    if file_name[0] == \".\" or \\\n        file_name[-3:] not in [\"exe\", \"dll\", \"txt\"]:\n        return \"No\"\n    return \"Yes\"\n",
        "num_ids": 172
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if file_name.count('.')!= 1 or file_name[0] not in letters_lower and file_name[0] not in letters_upper:\n        return False\n    elif file_name[0].isalpha() and file_name[1] in digits and file_name[2] in ['txt', 'exe', 'dll']:\n        return True\n    else:\n        return False\n",
        "num_ids": 95
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count_dots = file_name.count('.')\n    if count_dots == 0:\n        return 'No'\n    else:\n        substring_before_dot = file_name.rsplit('.', 1)[0]\n        if substring_before_dot.isalpha() and len(substring_before_dot) <= 3:\n            substring_after_dot = file_name.rsplit('.', 1)[1]\n            if substring_after_dot in ['txt', 'exe', 'dll']:\n                return 'Yes'\n            else:\n                return 'No'\n        else:\n            return 'No'\n",
        "num_ids": 154
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your Code Here\n    dot_index = file_name.find(\".\")\n    if dot_index == -1:\n        return 'No'\n    substring_before_dot = file_name[:dot_index]\n    substring_after_dot = file_name[dot_index + 1:]\n    if substring_before_dot == '' or not substring_before_dot.isalpha():\n        return 'No'\n    if substring_after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 135
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # your code here\n    if len(file_name) <= 3:\n        return 'No'\n    file_name = file_name.split(\".\")\n    if file_name[0]!= \"\" and file_name[1] in [\"txt\", \"exe\", \"dll\"]:\n        return 'Yes'\n    return 'No'\n",
        "num_ids": 80
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    dot = '.'\n    file_name = file_name.strip()\n    if len(file_name) > 3:\n        return 'No'\n    if dot not in file_name:\n        return 'No'\n    index = file_name.index(dot)\n    if len(file_name[0:index]) < 1:\n        return 'No'\n    if file_name[0].isdigit():\n        return 'No'\n    if file_name[0] not in ascii_lowercase and file_name[0] not in ascii_uppercase:\n        return 'No'\n    if file_name[index+1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'",
        "num_ids": 180
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sum_of_squares = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum_of_squares += i*i\n        if i % 4 == 0:\n            sum_of_squares += i*i*i\n    return sum_of_squares\n",
        "num_ids": 72
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if lst ==[]:\n        return 0\n    else:\n        sum = 0\n        for i in range(len(lst)):\n            if i % 3 == 0:\n                if i % 4 == 0:\n                    continue\n                else:\n                    sum = sum + lst[i]*lst[i]\n            else:\n                sum = sum + lst[i]*lst[i]\n        return sum\n",
        "num_ids": 102
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4 == 0:\n            result += lst[i]**2\n        else:\n            result += lst[i]\n    \n    return result\n",
        "num_ids": 66
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #your code here\n    #case 1\n    if lst == []:\n        return 0\n    #case 2\n    else:\n        new_lst = lst[:]\n        for i in range(len(new_lst)):\n            if i%3 == 0 or i%4 == 0:\n                new_lst[i] = new_lst[i]**2\n        return sum(new_lst)\n",
        "num_ids": 103
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum([lst[i]**2 if i % 3 == 0 else lst[i]**4 if i % 4 == 0 else lst[i] for i in range(len(lst))])\n",
        "num_ids": 50
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return lst[0]\n    elif len(lst) == 2:\n        return (lst[0]**2 + lst[1]**2)**0.5\n    else:\n        out = 0\n        for i in range(len(lst)):\n            if i%3 == 0:\n                out += lst[i]**2\n            elif i%4 == 0 and i%3!= 0:\n                out += lst[i]**3\n        return out\n",
        "num_ids": 146
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s = 0\n    for i in lst:\n        if i%3==0:\n            s += i**2\n        elif i%4==0:\n            s += i**3\n    return s\n    \n    \n    \n    \nprint(sum_squares([]))\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]))",
        "num_ids": 292
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = 0\n    for i in lst:\n        if i % 3 == 0:\n            result += i**2\n        elif i % 4 == 0:\n            result += i**3\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i%3 == 0 or i%4 == 0:\n            if i%3!= 0 and i%4!= 0:\n                continue\n            else:\n                lst[i] = lst[i]**2\n                sum += lst[i]\n        else:\n            lst[i] = lst[i]**3\n            sum += lst[i]\n    return sum\n",
        "num_ids": 114
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            count += lst[i]*lst[i]\n        elif i % 4 == 0:\n            count += lst[i]*lst[i]\n    return count\n",
        "num_ids": 72
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # your code here\n    return\n",
        "num_ids": 10
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Solution 1\n    return \" \".join(filter(lambda x: len(x) == next(filter(lambda y: not y % 2, map(len, re.findall(r'\\w+', sentence)))), sentence.split(\" \")))\n",
        "num_ids": 59
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Solution 1\n",
        "num_ids": 6
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Approach 1\n    # first approach using sorting and concatenation of strings\n    # for each word, we need to see if it is prime, if it is, we need to concatenate them\n    # then we need to sort the words in alphabetical order\n    # and finally the result should be 'is'\n    # take a copy of the original sentence so that we can modify it\n    sentence = sentence.split(' ')\n    result = ''\n    for word in sentence:\n        if len(word) == 2 and is_prime(int(word)):\n            result += word\n    result =''.join(sorted(result))\n    return result\n",
        "num_ids": 151
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # you can also solve this using a set\n    # https://stackoverflow.com/questions/28037277/python-string-split-with-output-as-set\n    \n    # parse the sentence\n    # go through the string,\n    # if the next letter is a letter,\n    # put that letter in the word,\n    # else, if the next letter is a space,\n    # start a new word.\n    # if a word's length is prime,\n    # add it to the return string.\n    \n    # print(sentence)\n    \n    # check the length of the sentence\n    # if it is too short, return empty\n    # if it is too long, return empty\n    \n    # if the length is too long\n    # just return empty\n    \n    \n    # define an empty return string\n    # word_string = \"\"\n    \n    # # iterate over the sentence\n    # for letter in sentence:\n    #     # if the letter is a letter,\n    #     # put that letter in the word\n    #     if letter.isalpha():\n    #         word_string += letter\n    #     # else, if the letter is a space,\n    #     # start a new word\n    #     else:\n    #         # add the word to the string\n    #         word_string += letter\n    #         # check if the word's length is prime\n    #         if isprime(len(word_string)):\n    #             # add the word to the return string\n    #             return_string += word_string\n    #             # reset the word string\n    #             word_string = \"\"\n    # # return the return string\n    # return return_string\n    \n    \n    # # check if the length of the sentence\n    # # is too short\n    # if len(sentence) < 3:\n    #     # return empty\n    #     return \"\"\n    \n    # # define an empty return string\n    # word_string = \"\"\n    \n    # # iterate over the sentence\n    # for letter in sentence:\n    #     # if the letter is a letter,\n    #     # put that letter in the word\n    #     if letter.isalpha():\n    #         word_string += letter\n    #     # else, if the letter is a space,\n    #     # start a new word\n    #     else:\n    #         # add the word to the string\n    #         word_string += letter\n    #         # check if the word's length is prime\n    #         if isprime(len(word_string)):\n    #             # add the word to the return string\n    #             return_string += word_string\n    #             # reset the word string\n    #             word_string = \"\"\n    # # return the return string\n    # return return_string\n    \n    \n    \n    # define an empty return string\n    word_string = \"\"\n    \n    # iterate over the sentence\n    for letter in sentence:\n        # if the letter is a letter,\n        # put that letter in the word\n        if letter.isalpha():\n            word_string += letter\n        # else, if the letter is a space,\n        # start a new word\n        else:\n            # add the word to the string\n            word_string += letter\n            # check if the word's length is prime\n            if isprime(len(word_string)):\n                # add the word to the return string\n                return_string += word_string\n                # reset the word string\n                word_string = \"\"\n    # return the return string\n    return return_string\n",
        "num_ids": 839
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join([word for word in sentence.split() if is_prime(len(word))])\n",
        "num_ids": 26
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    words = sentence.split()\n    output = \"\"\n    for word in words:\n        if is_prime(len(word)):\n            output += word + \" \"\n    return output[:-1]\n",
        "num_ids": 49
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    result = ''\n    for word in sentence.split():\n        result += word if len(result) == 0 or len(word) == len(result) else ''\n        result +=''\n    return result.strip()\n",
        "num_ids": 53
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    x = x.split('/')\n    n = n.split('/')\n    res = str(int(x[0])*int(n[0])+int(x[1])*int(n[1]))\n    return res.isnumeric()\n",
        "num_ids": 64
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if x == '0':\n        return False\n    x = x.replace('/', '*')\n    x = x.split('*')\n    x = [int(y) for y in x]\n    if x[1] == 1:\n        return True\n    else:\n        return False",
        "num_ids": 71
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if \".\" in x:\n        x = x.replace(\".\", \"\")\n    x = x.split(\"/\")\n    if len(x) == 2 and x[1] == \"1\":\n        return True\n    x_numer = x[0].split(\"+\")\n    x_denomin = x[1].split(\"+\")\n    for i in range(len(x_numer)):\n        if x_numer[i].count(\"-\") > 0:\n            x_numer[i] = x_numer[i][:x_numer[i].index(\"-\")]\n    for i in range(len(x_denomin)):\n        if x_denomin[i].count(\"-\") > 0:\n            x_denomin[i] = x_denomin[i][:x_denomin[i].index(\"-\")]\n    x_numer = list(map(lambda x: int(x), x_numer))\n    x_denomin = list(map(lambda x: int(x), x_denomin))\n    x_numer.sort(reverse=True)\n    x_denomin.sort(reverse=True)\n    while len(x_numer) > 1 and x_numer[0] == x_numer[1]:\n        x_numer.pop(0)\n        x_numer.pop(0)\n    while len(x_denomin) > 1 and x_denomin[0] == x_denomin[1]:\n        x_denomin.pop(0)\n        x_denomin.pop(0)\n    if len(x_numer) == 1 and x_numer[0] == 0:\n        return True\n    if len(x_denomin) == 1 and x_denomin[0] == 0:\n        return True\n    return False\n",
        "num_ids": 436
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    try:\n        x_n = (int(x), int(n))\n        return (x_n[0]/x_n[1]) == (int(x_n[0]/x_n[1])).is_integer()\n    except:\n        return False\n",
        "num_ids": 67
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # YOUR CODE HERE\n    try:\n        x_n = int(x)/int(n)\n    except:\n        return False\n    if int(x_n) == int(x) and int(x)!= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 67
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    try:\n        if int(x) / int(n) == int(x) / int(n):\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    x = str(x)\n    n = str(n)\n    x_num = int(x.split('/')[0])\n    x_den = int(x.split('/')[1])\n    n_num = int(n.split('/')[0])\n    n_den = int(n.split('/')[1])\n    if x_num * n_den == x_den * n_num:\n        return True\n    else:\n        return False\n",
        "num_ids": 116
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    try:\n        return int(x)/int(n)\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if \"//\" in x:\n        return False\n    num = int(x.split(\"/\")[0])\n    den = int(x.split(\"/\")[1])\n    if num == 0 and den == 1:\n        return True\n    if num == 0:\n        return False\n    if den == 1:\n        return True\n    if x == \"0\":\n        return True\n    if x == \"0/1\":\n        return False\n    if den == 0:\n        return False\n    if num == 1:\n        return True\n    if den == 0:\n        return False\n    if num == 0:\n        return False\n    return simplify(str(int(num/den)), str(int(den/num)))\n",
        "num_ids": 172
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if x == \"0\":\n        return False\n    elif n == \"0\":\n        return False\n    elif x == \"1\":\n        return True\n    elif x[0] == n[0] and x[1] == n[1] and int(x[1]) * int(n[0]) == int(x[1]) + int(n[0]):\n        return True\n    else:\n        return False\n",
        "num_ids": 103
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    nums.sort(key=lambda x: sum(x))\n    return nums\n",
        "num_ids": 22
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(nums) < 2:\n        return nums\n",
        "num_ids": 17
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    nums.sort(key=lambda x: sum(int(digit) for digit in str(x)))\n    return nums\n",
        "num_ids": 31
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # O(n log n) time | O(n) space\n    def digit_sum(n):\n        s = 0\n        while n:\n            s += n % 10\n            n = n // 10\n        return s\n",
        "num_ids": 54
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def sum_digits(num):\n        sum = 0\n        while num > 0:\n            sum += num % 10\n            num //= 10\n        return sum\n    nums.sort(key=lambda x: (sum_digits(x), x))\n    return nums\n",
        "num_ids": 67
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(nums, key=lambda i: (sum(int(x) for x in str(i)), i))\n",
        "num_ids": 30
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    nums.sort(key=lambda x: sum(int(c) for c in str(x)))\n    return nums",
        "num_ids": 32
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return nums\n",
        "num_ids": 6
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(nums)):\n        nums[i] = str(nums[i])\n    return sorted(nums)\n",
        "num_ids": 37
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Sorting by sum of digits\n    points = [(sum(int(i) for i in str(i)), i) for i in nums]\n    points.sort()\n",
        "num_ids": 42
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num % 10 == 1:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(num > 10 and num % 2 == 1 for num in nums)\n",
        "num_ids": 21
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for num in nums:\n        if ((num > 10) and (num % 2!= 0) and (num % 10!= 0)):\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = 0\n    for i in nums:\n        if str(i)[0] % 2 == 1 and str(i)[1] % 2 == 1:\n            result += 1\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len([x for x in nums if x > 10 and isOdd(x[0]) and isOdd(x[-1])])\n",
        "num_ids": 36
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 2!= 0 and num > num % 10:\n            count += 1\n",
        "num_ids": 39
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for num in nums:\n        if(num > 10 and num % 2!= 0 and num >= 100 and num <= 999):\n            count += 1\n    return count",
        "num_ids": 45
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    oddNum = 0\n    numCount = 0\n    for i in range(0, len(nums)):\n        if nums[i] > 10 and nums[i] % 2!= 0 and nums[i] % 10 == 1:\n            oddNum += 1\n            numCount += 1\n    return numCount\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
        "num_ids": 114
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for n in nums:\n        if (n > 10 and n % 2 == 1 and n % 10!= 0 and n % 10!= 9):\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # print(nums)\n    return len([x for x in nums if x > 10 and ((x // 100) % 2 == 1)])\n",
        "num_ids": 36
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Naive approach\n    # if n % 3!= 0:\n    #     return 0\n    # a = np.array([i for i in range(1, n + 1)])\n    # return sum([i * (n - i + 1) * (i - 1) for i in a]) // 3\n",
        "num_ids": 74
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Write your code here\n    a = range(n + 1)\n    count = 0\n    for i in range(1, n // 2 + 1):\n        for j in range(i + 1, n // 2 + 1):\n            k = n - j - i\n            if a[i] + a[j] + a[k] == 3:\n                count += 1\n    return count\n",
        "num_ids": 93
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(1, n):\n        for j in range(i, n):\n            k = n - i - j + 1\n            if (i * i - i + 1) % 3 == 0 and (j * j - j + 1) % 3 == 0 and (k * k - k + 1) % 3 == 0:\n                print(i, j, k)\n",
        "num_ids": 89
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # This is the logic to print the answer:\n    a = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if j > i:\n                break\n            for k in range(1, n+1):\n                if k > i and k > j:\n                    break\n                if i + j + k == 3 * i:\n                    a.append([i, j, k])\n",
        "num_ids": 106
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    a = []\n    for i in range(1, n+1):\n        if i**2 - i + 1 in range(n):\n            a.append(i**2 - i + 1)\n    return len(a",
        "num_ids": 53
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    a = [1] * n\n    count = 0\n    \n    for i in range(1, n):\n        for j in range(i):\n            k = n - i\n            if (a[i] + a[j] + a[k]) % 3 == 0:\n                count += 1\n    \n    return count\n",
        "num_ids": 80
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # if n == 2:\n    #     return 1\n    # elif n == 3:\n    #     return 2\n",
        "num_ids": 32
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # YOUR CODE HERE\n",
        "num_ids": 7
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    for p in planets:\n        if p == planet1:\n            planet1_orb = planets.index(planet1)\n        if p == planet2:\n            planet2_orb = planets.index(planet2)\n    if planet1_orb > planet2_orb:\n        return (planet2, planet1)\n    else:\n        return (planet1, planet2)\n    return ()",
        "num_ids": 129
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets:\n        return ()\n    if planet2 not in planets:\n        return ()\n",
        "num_ids": 64
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if planet1 not in PLANETS:\n        return ()\n    if planet2 not in PLANETS:\n        return ()\n    \n    if PLANETS[planet1] < PLANETS[planet2]:\n        return (planet2, ) + bf(planet1, planet2)\n    elif PLANETS[planet1] > PLANETS[planet2]:\n        return (planet1, ) + bf(planet1, planet2)\n    else:\n        return (planet1, ) + bf(planet1, planet2)\n",
        "num_ids": 122
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    planets = {\"Mercury\": 0, \"Venus\": 0, \"Earth\": 0, \"Mars\": 0, \n            \"Jupiter\": 0, \"Saturn\": 0, \"Uranus\": 0, \"Neptune\": 0}\n    for planet, name in planets.items():\n        if planet1 == planet:\n            planets[planet] = 1\n        elif planet2 == planet:\n            planets[planet] = 1\n    \n    if planets[planet1] == 1 and planets[planet2] == 0:\n        return tuple([planet1])\n    elif planets[planet2] == 1 and planets[planet1] == 0:\n        return tuple([planet2])\n    else:\n        planet1 = planets.keys()\n        planet1.sort()\n        planet2 = planets.keys()\n        planet2.sort()\n        planets = [planet1, planet2]\n        return tuple(planets)\n",
        "num_ids": 216
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #\n    # YOUR CODE HERE\n    #\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1 = planets.index(planet1)\n    planet2 = planets.index(planet2)\n    #\n    #\n    #\n    return planets[planet1:planet2+1]\n",
        "num_ids": 96
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    # planet1 = planets[planet1 - 1]\n    # planet2 = planets[planet2 - 1]\n    # return (sorted((planet1,planet2)), sorted((planet2,planet1)))\n    # return (planets.index(planet1), planets.index(planet2))\n    # return sorted(sorted(planets,key=lambda planet: planets.index(planet))[0:2], key=lambda planet: planets.index(planet))\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    return tuple(sorted((planet1,planet2)))\n",
        "num_ids": 179
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    planets = []\n    if planet1!= \"Jupiter\" and planet1!= \"Earth\" and planet1!= \"Venus\" and planet1!= \"Mars\" and planet1!= \"Uranus\" and planet1!= \"Neptune\" and planet1!= \"Saturn\":\n        planets.append(planet1)\n    if planet2!= \"Jupiter\" and planet2!= \"Earth\" and planet2!= \"Venus\" and planet2!= \"Mars\" and planet2!= \"Uranus\" and planet2!= \"Neptune\" and planet2!= \"Saturn\":\n        planets.append(planet2)\n    planets.sort()\n    planets = tuple(planets)\n    return planets\n",
        "num_ids": 178
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    planets_distance = []\n    for i in range(len(planets)):\n        distance = get_distance(planet1, planets[i]) + get_distance(planet2, planets[i])\n        planets_distance.append((distance, i))\n    planets_distance.sort(reverse=True)\n    return tuple(sorted(planets[planets_distance[i][1]] for i in range(len(planets_distance))))\n",
        "num_ids": 168
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = 0\n    p = 0\n    res = ()\n    if planet1 in planets or planet2 in planets:\n        for planet in planets:\n            if planet1 == planet or planet2 == planet:\n                s = planets.index(planet)\n                break\n            else:\n                s = planets.index(planet)\n        for i in range(s, len(planets)):\n            if planets[i]!= planet2 and planets[i]!= planet1:\n                p = planets.index(planet2)\n                break\n            else:\n                p = planets.index(planet2)\n        for i in range(p, len(planets)):\n            if planets[i]!= planet1:\n                res = (planets[i])\n                break\n    else:\n        res = ()\n    return res\n",
        "num_ids": 194
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert type(lst) is list\n    for l in lst:\n        assert type(l) is str\n    assert len(lst) > 0\n    return list(sorted(lst, key=len))\n",
        "num_ids": 53
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(sorted(lst), key=len)\n",
        "num_ids": 16
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(lst)\n",
        "num_ids": 9
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # I'd like to think about the best way to implement this solution.\n    # I think that I would like to split the list of strings into groups\n    # based on the length of the strings, and put the strings with the\n    # same length into the same group.\n    # Then, I would have to sort the groups.\n    # I think that I would like to just sort the list and then go through it\n    # and check if the words are the same length.\n    # The challenge is how to sort the groups in order.\n    # I should be able to do this with a dictionary.\n    # Now I need to iterate through the list, and for each word, if the\n    # length of the word is in the dictionary, I can just replace it with\n    # the next value.\n    # Example:\n    # length = len(word)\n    # if length in dict:\n    #    replace word with dict[length]\n    # else:\n    #    dict[length] = word\n    # I would then sort the dictionary.\n    # For this I need to iterate through the dictionary, and find all the\n    # lengths. I will use a list of tuples, where the first element\n    # in the tuple is the length of the word and the second element is the\n    # word itself.\n    # I will sort the list of tuples, and then take the first element\n    # in the tuple.\n    # Finally, I will replace the word with the first element of the\n    # tuple.\n    # I could also use the quick sort algorithm, and iterate through\n    # the list with a pivot.\n    \n    # Brute Force\n    # All possibilities from the list will be in the same group and sorted.\n    # I need to find the right place for each word.\n    # How do I do that?\n    # I can iterate through the list, and replace each word with the\n    # first letter of the word.\n    # In some cases, the first letter will be in the same group.\n    # We need to find the right place for each word.\n    # I can use a dictionary.\n    # In some cases, the first letter will be in the same group.\n    # We can use a dictionary, and a sort key.\n    # We can put the words in groups based on the length.\n    # We need to sort the group.\n    # We can use a quick sort algorithm, and iterate through the list with\n    # a pivot.\n    # Then, replace the word with the first element of the tuple.\n    # Why do I need the sort key?\n    # It will allow me to sort the list by length.\n    # I can use the dictionary to do that.\n    # In some cases, the first letter will be in the same group.\n    # I can use a dictionary, and a sort key.\n    # I can put the words in groups based on the length.\n    # I can use a sort key.\n    # I need to sort the list by length.\n    # I need to sort the dictionary.\n    # Then I can just iterate through the list and for each word\n    # I can replace it with the first element of the tuple.\n    \n    lst = list(lst)\n    lst.sort(key=len)\n    dictionary = {}\n    for word in lst:\n        length = len(word)\n        if length in dictionary:\n            dictionary[length].append(word)\n        else:\n            dictionary[length] = [word]\n    grouped_words = []\n    for value in dictionary.values():\n        grouped_words.append(sorted(value))\n    grouped_words.sort()\n    output = []\n    for word in lst:\n        for group in grouped_words:\n            if word in group:\n                output.append(group[0])\n                break\n    return output\n    \ndef sorted_list_sum_ii(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of string",
        "num_ids": 1025
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(lst, key=lambda x: len(x))\n",
        "num_ids": 18
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    lst.sort(key=lambda x: len(x))\n    return lst\n",
        "num_ids": 22
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    lst = remove_odd_length(lst)\n    return sorted(lst, key=len)\n",
        "num_ids": 27
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return []\n    lst_new = []\n    for i in lst:\n        if len(i) % 2 == 1:\n            lst_new.append(i)\n    lst = sorted(lst_new)\n    return lst\n",
        "num_ids": 72
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lst_sorted = sorted(lst, key=len)\n    result = []\n    for i in range(len(lst_sorted)):\n        if len(lst_sorted[i]) == len(lst_sorted[i-1]):\n            result.append(lst_sorted[i-1])\n    return result\n",
        "num_ids": 86
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert lst\n    lst.sort(key=len)\n    lst = [item for item in lst if len(item) == len(lst[0])]\n    lst = list(set(lst))\n    lst.sort()\n    return lst",
        "num_ids": 66
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x if n%x else y\n",
        "num_ids": 11
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if is_prime(n):\n        if x == n:\n            return x\n        else:\n            return y\n    else:\n        if x == y:\n            return x\n        else:\n            return y\n",
        "num_ids": 52
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n % 2 == 0:\n        return x\n    return y\n    \nif __name__ == '__main__':\n    print(\"For the given n, x should be returned if n is prime and y otherwise\")\n    x = float(input(\"Please enter x: \"))\n    y = float(input(\"Please enter y: \"))\n    n = int(input(\"Please enter n: \"))\n    print(x_or_y(n, x, y))",
        "num_ids": 109
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x if n%x == 0 else y\n",
        "num_ids": 13
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return x\n    if n == 2:\n        return y\n    if n == 3:\n        return x\n    if n == 4:\n        return y\n    if n % 2 == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 66
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n % x!= 0 and n % y!= 0:\n        return x\n    elif n % x == 0:\n        return y\n    elif n % y == 0:\n        return x\n",
        "num_ids": 50
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n % x == 0 or n % y == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 28
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x if is_prime(n) else y\n",
        "num_ids": 14
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n in primes:\n        return x\n    else:\n        return y\n",
        "num_ids": 21
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum([n * n for n in lst if n % 2!= 0]",
        "num_ids": 21
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not lst:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in lst:\n        if i%2!= 0:\n            sum += i**2\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total_sum = 0\n    for num in lst:\n        if num < 0 or type(num)!= int:\n            continue\n        else:\n            total_sum += num**2\n    return total_sum\n",
        "num_ids": 52
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not lst:\n        return 0\n    odd_sum = 0\n    for item in lst:\n        if item % 2!= 0 and item > 0:\n            odd_sum += item ** 2\n    return odd_sum\n",
        "num_ids": 56
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if lst == []:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    odd = []\n    for num in lst:\n        if isinstance(num, int) and num % 2 == 1:\n            odd.append(num * num)\n    return sum(odd",
        "num_ids": 46
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    total = 0\n    odd_count = 0\n    \n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            total += num * num\n            odd_count += 1\n    \n    if odd_count == 0:\n        return 0\n    else:\n        return total + (odd_count * (odd_count - 1)) // ",
        "num_ids": 88
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    odd = 0\n    for x in lst:\n        if x % 2!= 0:\n            odd += x**2\n    return odd\n",
        "num_ids": 35
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    if len(lst) == 0:\n        return 0\n    \n    else:\n        total = 0\n        for x in lst:\n            if x % 2 == 1:\n                total += x**2\n        return total\n",
        "num_ids": 57
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    correct = 0\n    for i in range(0,len(guess)):\n        if guess[i] == game[i]:\n            correct += 1\n    return list(map(abs, range(len(guess) - correct)))\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True",
        "num_ids": 89
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code here\n    def get_score(guess,game):\n        return sum([a==b for a,b in zip(guess,game)])\n    return [get_score(guess,game) - get_score(guess,guess) for guess in guess]\n    \n    \n",
        "num_ids": 73
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \n    \n",
        "num_ids": 7
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a = game\n    b = guess\n    res = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            res.append(0)\n        else:\n            res.append(abs(a[i] - b[i]))\n",
        "num_ids": 70
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # write your code here\n    result = []\n    for i in range(len(guess)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    difference = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            difference.append(0)\n        else:\n            difference.append(abs(guess[i]-game[i]))\n    return difference\n",
        "num_ids": 68
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return game\n",
        "num_ids": 5
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    score = sorted(game,reverse=True)\n    guess = sorted(guess,reverse=True)\n    \n    diff = 0\n    \n    for i in range(len(score)):\n        if guess[i] < score[i]:\n            diff += abs(guess[i] - score[i])\n        elif guess[i] > score[i]:\n            diff += abs(guess[i] - score[i])\n    \n    return dif",
        "num_ids": 111
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if(len(guess)!=len(game)):\n        return []\n    \n    ret = []\n    for i in range(len(game)):\n        if(guess[i]!=game[i]):\n            ret.append(abs(guess[i]-game[i]))\n        else:\n            ret.append(0)\n    return ret\n",
        "num_ids": 89
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return(np.array([0]*len(guess)))\n",
        "num_ids": 17
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    extensions.sort(key=lambda x: x.count('-'), reverse=True)\n    extensions.sort(key=lambda x: x.count('.'), reverse=True)\n    \n    str_extensions = map(str, extensions)\n    extension = '.'.join(str_extensions)\n    \n    return '.'.join([class_name, extension])\n",
        "num_ids": 93
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # check if class name is in lower or upper case\n    # change class name to lower case\n    class_name = class_name.lower()\n    # create an empty list\n    extension_list = []\n    # add extensions to the list\n    for extension in extensions:\n        # check if the extension is in lower case\n        extension = extension.lower()\n        # check if extension has the same length as class name\n        if len(extension) == len(class_name):\n            # check if extension has the same number of upper case letters\n            # if the extension has the same amount of upper case letters than the class name\n            # than add the extension to the list\n            if extension.count('c') == class_name.count('c'):\n                extension_list.append(extension)\n    # sort the list of extensions\n    extension_list.sort()\n    # check if the extension list is empty\n    if not extension_list:\n        return class_name\n    # check if the extension list has 2 or more extensions\n    if len(extension_list) >= 2:\n        # get the 2nd and 4th extensions from the list\n        extension1 = extension_list[0]\n        extension2 = extension_list[1]\n        # if the strength of the extension is -1\n        if len(extension1) == 1 and len(extension2) == 1:\n            # return the class name with the strongest extension\n            return class_name + extension1 + extension2\n        # if the strength of the extension is 0\n        if len(extension1) == 0 and len(extension2) == 0:\n            # return the class name with the strongest extension\n            return class_name + extension1 + extension2\n        # if the strength of the extension is 1\n        if len(extension1) == 1 and len(extension2) == 1:\n            # return the class name with the strongest extension\n            return class_name + extension1 + extension2\n    # if the strength of the extension is 0\n    if len(extension_list) == 0:\n        # return the class name with the strongest extension\n        return class_name + extension_list[0]\n",
        "num_ids": 505
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    import re\n    \n    class_name = class_name.lower()\n    pattern = r\"([a-z])([A-Z])\"\n    pattern2 = r\"([A-Z])([a-z])\"\n    pattern3 = r\"([a-z])([A-Z])\"\n    strength = []\n    ext = []\n    for name in extensions:\n        comp = re.findall(pattern, name)\n        comp2 = re.findall(pattern2, name)\n        comp3 = re.findall(pattern3, name)\n        strength.append(float(comp[0][0] - comp[0][1]))\n        strength.append(float(comp2[0][0] - comp2[0][1]))\n        strength.append(float(comp3[0][0] - comp3[0][1]))\n        ext.append(name)\n    ext_strength = zip(ext, strength)\n    ext_strength = sorted(ext_strength, key=lambda x: x[1])\n    return ext_strength[0][0]\n",
        "num_ids": 257
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    best_extension = None\n    best_strength = 0\n    for ext in extensions:\n        ext_strength = Strength_of_Extension(ext)\n        if ext_strength > best_strength:\n            best_extension = ext\n            best_strength = ext_strength\n    return class_name + \".\" + best_extension\n",
        "num_ids": 80
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    cap, lc = 0, 0\n    for i in extensions:\n        if i.isupper():\n            cap += 1\n        elif i.islower():\n            lc += 1\n    s = class_name + '.' + extensions[0]\n    if cap - lc == -1:\n        return s\n    for i in range(1, len(extensions)):\n        s += '.' + extensions[i]\n        if cap - lc == -1:\n            return s\n    return s\n",
        "num_ids": 120
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    highest = 'AA'\n    for ext in extensions:\n        if len(ext) > len(highest):\n            highest = ext\n    return class_name + highest\n    ",
        "num_ids": 41
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n    \n    # Make a list of tuples that have the extension name and the strength\n    extension_strength = []\n    for e in extensions:\n        extension_strength.append((''.join(e.upper()), -len(''.join(e.lower()))))\n    \n    # Sort the extensions\n    extension_strength = sorted(extension_strength, key=lambda x: x[0])\n    \n    # Return the first element\n    return extension_strength[0][1] + '.' + extension_strength[0][0]\n",
        "num_ids": 133
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    print(class_name, extensions)\n    index = 0\n    max = 0\n    extension = ''\n    for i in extensions:\n        if i.find(class_name.lower()) == 0:\n            index = i\n        else:\n            if extensions.index(i) > max:\n                max = extensions.index(i)\n                extension = i\n    return extensions[max]\n",
        "num_ids": 94
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    class_extensions = []\n    extensions.sort()\n    for i in extensions:\n        if i.startswith(class_name.upper()):\n            class_extensions.append(i)\n    if len(class_extensions) == 1:\n        return class_name + '.' + class_extensions[0]\n    else:\n        for i in class_extensions:\n            if i.find('.') == -1:\n                return class_name + '.' + i\n            else:\n                return class_name + '.' + i[:i.find('.')]\n            \nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['AA', 'BB', 'CC']))\nprint(Strongest_Extension('my_class', ['AA', 'bb', 'CC']))\nprint(Strongest_Extension('my_class', ['aa', 'bb', 'cc']))\nprint(Strongest_Extension('my_class', ['aa', 'bb', 'aa']))\nprint(Strongest_Extension('my_class', ['aa', 'aa', 'aa'])",
        "num_ids": 314
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    extensions.sort()\n    return class_name + extensions[0][1:]\n",
        "num_ids": 21
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    a = a[::-1]\n    b = b[::-1]\n    return b in a\n",
        "num_ids": 27
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(b)):\n        if b in a or a in b:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if a in b:\n        return True\n    for i in range(len(b)):\n        if b[i:] + b[:i] == a:\n            return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return a in b[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if b not in a and len(b) <= len(a):\n        return False\n    for i in range(len(b)):\n        if b in a + a[-len(b)+1:]:\n            return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s1 = a + a[::-1]\n    s2 = b + b[::-1]\n    return s2 in s1\n",
        "num_ids": 35
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a == b:\n        return True\n    elif len(a) == len(b):\n        return False\n    else:\n        n = len(b)\n        for i in range(0,len(a)):\n            b1 = b[i:] + b[0:i]\n            if a == b1:\n                return True\n    return False\n",
        "num_ids": 87
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    a = list(a)\n    b = list(b)\n    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        b.append(a[i])\n        if b == a:\n            return True\n    return False\n",
        "num_ids": 70
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(1,4):\n        a = a[1:] + a[0]\n        if a in b:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a.find(b) >= 0 or b in a[len(b):]\n",
        "num_ids": 22
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    num = str(num)\n    if '.' in num:\n        return (0, 0)\n    else:\n        even_count = 0\n        odd_count = 0\n        for i in num:\n            if int(i) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        return (even_count, odd_count)\n",
        "num_ids": 92
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # your code here\n    #return (evens, odds)\n    evens, odds = 0, 0\n",
        "num_ids": 27
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return tuple(count_digits(num, lambda x: x % 2 == 0) + count_digits(num, lambda x: x % 2 == 1))\n",
        "num_ids": 39
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (num % 10, (num - num % 10) % 10)\n",
        "num_ids": 19
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (num % 10, num // 10)\n",
        "num_ids": 13
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    even = 0\n    odd = 0\n    while num:\n        if num % 10 % 2:\n            odd += 1\n        else:\n            even += 1\n        num //= 10\n    return even, odd\n",
        "num_ids": 51
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(str(num)) % 2, len(str(num)) // 2\n",
        "num_ids": 21
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert num >= 0, \"Input number must be a positive integer.\"\n",
        "num_ids": 17
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    number_list = str(num).split('.')\n    even_count = 0\n    odd_count = 0\n",
        "num_ids": 29
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (sum(i == 0 for i in str(num)), sum(i == 1 for i in str(num)))\n",
        "num_ids": 29
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    if number == 0:\n        return 'zero'\n    \n    min_roman = {1:'i', 5:'v', 10:'x', 50:'l', 100:'c', 500:'d', 1000:'m'}\n    roman = {}\n    for num in range(1, 1001):\n        roman[num] = min_roman[num]\n        if num in min_roman:\n            for val in min_roman[num]:\n                roman[num] = roman[num].replace(val,'')\n    \n    roman_num = ''\n    for i in range(1,number):\n        roman_num += roman[i]\n    \n    roman_num += roman[number]\n    return roman_num.lower()\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(",
        "num_ids": 201
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #initialize some basic variables\n    string = \"\"\n    num = number\n    roman = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000:'m'}\n    i = 1\n    #loop through and create the roman numeral\n    while i <= num:\n        if i < 10:\n            string += roman[i]\n        else:\n            if num % i == 0:\n                string += roman[i] + roman[i * 10]\n            else:\n                string += roman[i] + roman[i]\n        i += 1\n    return string.lower()\n",
        "num_ids": 160
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not isinstance(number, int) or number < 1:\n        raise ValueError('The parameter should be a positive integer.')\n",
        "num_ids": 32
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # check if input is not an integer, raise exception\n    if type(number)!= int:\n        raise TypeError(f'Input must be a positive integer, not {type(number)}')\n",
        "num_ids": 46
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert 1 <= number <= 1000, 'Expecting 1 <= num <= 1000'\n    roman_num = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX']\n    roman_num_mapping = {1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M'}\n",
        "num_ids": 101
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not (number > 0 and number <= 1000):\n        raise ValueError('number must be between 1 and 1000')\n    roman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C',\n                       90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX',\n                       5: 'V', 4: 'IV', 1: 'I'}\n    result = ''\n    for key, value in roman_numerals.items():\n        while number >= key:\n            result += value\n            number -= key\n    return result\n",
        "num_ids": 150
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    d = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'l', 50: 'lx',\n              90: 'xc', 100: 'xc', 400: 'cd', 500: 'd', 900: 'cm', 1000:'m'}\n    n = number\n    s = \"\"\n    while n > 0:\n        for k, v in d.items():\n            if n - k >= 0:\n                s += v\n                n -= k\n                break\n    return s\n",
        "num_ids": 128
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    roman_numerals = {1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix', 10: 'x',\n                     11: 'xi', 12: 'xii', 13: 'xiii', 14: 'xiv', 15: 'xv', 16: 'xvi', 17: 'xvii', 18: 'xviii',\n                     19: 'xix', 20: 'xx', 30: 'xxx', 40: 'xxxx', 50: 'l', 60: 'lx', 70: 'lxx', 80: 'lxxx',\n                     90: 'lxix', 100: 'lxxc',\n                     1_000: 'cm', 2_000: 'd', 3_000:'m', 4_000:'mc', 5_000:'mcm', 6_000:'md',\n                     7_000:'mcm', 8_000:'mcc', 9_000:'mcmc',\n                     1_000_000:'mm', 2_000_000:'mmc', 3_000_000:'mcmc',\n                     1_000_000_000:'mmcm', 2_000_000_000:'mcmcm', 3_000_000_000:'mmcmcm',\n                     1_000_000_000_000:'mccmcm'}\n",
        "num_ids": 324
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError('Invalid input')\n",
        "num_ids": 30
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    roman_numeral_dict = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        11: 'xi',\n        12: 'xii',\n        13: 'xiii',\n        14: 'xiv',\n        15: 'xv',\n        16: 'xvi',\n        17: 'xvii',\n        18: 'xviii',\n        19: 'xix',\n        20: 'xx',\n        30: 'xxx',\n        40: 'xxxx',\n        50: 'l',\n        60: 'lii',\n        70: 'liii',\n        80: 'liv',\n        90: 'lv',\n        100: 'lx',\n        200: 'lvii',\n        300: 'lviii',\n        400: 'lix',\n        500: 'lxii',\n        600: 'lxiii',\n        700: 'lxiv',\n        800: 'lxv',\n        900: 'lxvi',\n        1000: 'lxvii',\n        2000: 'lxviii',\n        3000: 'lixix',\n        4000: 'lxx',\n        5000: 'lxxi',\n        6000: 'lxxii',\n        7000: 'lxxiii',\n        8000: 'lxxiv',\n        9000: 'lxxv',\n        10000: 'lxxvi',\n        20000: 'lxxvii',\n        30000: 'lxxviii',\n        40000: 'lxxix',\n        50000: 'lxxxi',\n        60000: 'lxxxi',\n        70000: 'lxxxi',\n        80000: 'lxxxi',\n        90000: 'lxxxi',\n        100000: 'lxxxi',\n        200000: 'lviiix',\n        300000: 'lviiiix',\n        400000: 'lvix',\n        500000: 'lvx',\n        600000: 'lvv',\n        70000: 'lvii',\n        80000: 'lviii',\n        900000: 'lvix',\n        1000000: 'lxviii',\n        2000000: 'lxvix',\n        3000000: 'lxxii',\n        4000000: 'lxxx',\n        5000000: 'lxxv',\n        6000000: 'lxxvi',\n        7000000: 'lxxvii',\n        8000000: 'lxxviii',\n        9000000: 'lxxix',\n        10000000: 'lxxxi'\n    }\n",
        "num_ids": 655
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Side lengths must be > 0 and < 100.\n    if (a < 0 or b < 0 or c < 0) or (a > 100 or b > 100 or c > 100):\n        return False\n    # 3 sides must be > 0 and < 100.\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    # No vertex repeated.\n    if any(x == 0 for x in [a, b, c]):\n        return False\n    # Check that the three sides are the same length.\n    if a == b and b == c:\n        return True\n    # Check that the angles are exactly 90 degrees.\n    if a == b and b == c:\n        return True\n    # Check that the sides are as nearly as possible and that the three sides\n    # are not equal to each other.\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    return False\n",
        "num_ids": 245
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if (a ** 2 + b ** 2) == c ** 2 or (b ** 2 + c ** 2) == a ** 2 or (a ** 2 + c ** 2) == b ** 2:\n        return True\n    else:\n        return False\n    \ndef right_angle_triangle_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle_2(3, 4, 5) == True\n    right_angle_triangle_2(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 234
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Triangle's side lengths\n    l1 = a\n    l2 = b\n    l3 = c\n",
        "num_ids": 26
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a == b and b == c and a == c:\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a**2 + b**2 == c**2 or c**2 + b**2 == a**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if (abs(a**2 + b**2 - c**2) < 0.0001 and a > 0 and b > 0 and c > 0):\n        return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Task is to find the triangle property. If the sides a, b, and c are \n    # all equal to each other, then the answer is True. If any of the sides \n    # are equal and the third side is not equal to the sum of the other two, \n    # then the answer is False.\n    if (a == b == c) or (a == b!= c) or (a == c!= b):\n        return True\n    elif a * a + b * b == c * c or c * c + b * b == a * a or a * a + c * c == b * b:\n        return True\n    else:\n        return False\n",
        "num_ids": 158
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a**2+b**2 == c**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    max = 0\n    max_char = None\n    max_word = None\n    for word in words:\n        unique = len(set(word))\n        if unique > max:\n            max = unique\n            max_word = word\n        if unique == max:\n            if max_char > len(word):\n                max_char = len(word)\n                max_word = word\n    if max_word == None:\n        return \"\"\n    else:\n        return max_word\n",
        "num_ids": 114
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l = list()\n    for w in words:\n        d = dict()\n        for ch in w:\n            if ch in d:\n                d[ch] += 1\n            else:\n                d[ch] = 1\n        l.append(d)\n    mx = -1\n    res = \"\"\n    for ch in l:\n        if ch.__len__() > mx:\n            mx = ch.__len__()\n            res = ch\n    return res\n",
        "num_ids": 112
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = {}\n    for word in words:\n        result[word] = len(word)\n    max_word = max(result.items(), key=lambda x: x[1])\n    return max_word[0]",
        "num_ids": 53
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return max(words, key=len)\n",
        "num_ids": 12
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # Write your code here.\n    \n    # set_with_count - keep track of each word in list with its count\n    # words - list of words\n    # max_len - maximum lenght of words\n    # max_count - maximum count of each word\n    # max_word - string - max_len word\n    \n    # set_with_count = set()\n    # words = list(set_with_count)\n    # max_len = 0\n    # max_count = 0\n    # max_word = \"\"\n    \n    # for word in words:\n    #     cur_len = len(word)\n    #     if cur_len > max_len:\n    #         max_len = cur_len\n    #         max_word = word\n    #     cur_count = words.count(word)\n    #     if cur_count > max_count:\n    #         max_count = cur_count\n    #         max_word = word\n    \n    \n    # return max_word\n    \n    set_with_count = set()\n    words = list(set_with_count)\n    max_len = 0\n    max_count = 0\n    max_word = \"\"\n    \n    for word in words:\n        cur_len = len(word)\n        if cur_len > max_len:\n            max_len = cur_len\n            max_word = word\n        cur_count = words.count(word)\n        if cur_count > max_count:\n            max_count = cur_count\n            max_word = word\n        \n    return max_word\n    ",
        "num_ids": 380
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    words = \",\".join(words)\n    words = words.split(\",\")\n    n = []\n    for word in words:\n        n.append(len(set(word)))\n    return words[n.index(max(n))]\n",
        "num_ids": 60
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    max_char_word = ''\n    for word in words:\n        if len(word) > len(max_char_word):\n            max_char_word = word\n    return max_char_word\n",
        "num_ids": 50
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    max_word = words[0]\n    for i in words:\n        if len(i) > len(max_word):\n            max_word = i\n    return max_word\n",
        "num_ids": 45
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    dictionary = {}\n    for i in words:\n        for j in i:\n            if j in dictionary:\n                dictionary[j] += 1\n            else:\n                dictionary[j] = 1\n    return sorted(list(dictionary.keys()))[0]\n",
        "num_ids": 66
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # make sure there are enough remaining carrots to eat\n    if remaining < need:\n        return [need, remaining]\n    else:\n        # if there are enough remaining, subtract number and number + (1/2) to get the number of carrots left\n        return[number+((need+remaining)//2), (need+remaining)%2]\n",
        "num_ids": 82
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    if remaining == 0:\n        return [number, 0]\n    \n    if need <= remaining:\n        return [number + need, remaining - need]\n    return [number, remaining]\n",
        "num_ids": 47
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return (number + need - remaining, remaining)\n    \n    \n    \ndef find_max_value(input_list):\n    \"\"\"\n    You are the master of the door lock\n    and have just picked up the lock. You have 2 keys.\n    With each key you can pick up a card (a lockcard)\n    and throw it away.\n    In a round, you can pick up a lockcard and throw it away\n    but once you choose to throw away the lockcard, you can't choose\n    to pick it up again. You are going to be stuck in a loop forever!\n    \n    Example:\n    * find_max_value([1, 2, 3]) -> 4\n    * find_max_value([4, 2, 3]) -> 4\n    * find_max_value([1, 2, 1, 3]) -> 3\n    * find_max_value([4, 2, 3, 3]) -> 4\n    \n    Variables:\n    @input_list : list\n        The list of lockcards that you are going to work with.\n        If you are stuck in a loop, then you need to throw away a lockcard.\n    \n    Constrain:\n    * 0 <= input_list <= 1000\n",
        "num_ids": 281
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return ([number + need, remaining - need])\n",
        "num_ids": 13
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    # if your number is greater than the need, add the remaining to the result and subtract the need\n    # if your number is less than the need, subtract the need from your number and add the remaining to the result.\n    if number > need:\n        return [number - need, remaining - need]\n    elif number < need:\n        return [number + remaining, 0]\n    else:\n        return [number + remaining, remaining - need]\n",
        "num_ids": 104
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [number + need - remaining, remaining]\n    \nif __name__ == \"__main__\":\n    number = int(input(\"Enter the number of carrots: \"))\n    need = int(input(\"Enter the number of carrots to eat: \"))\n    remaining = int(input(\"Enter the number of remaining carrots: \"))\n    print(eat(number, need, remaining))\n    \n    \n",
        "num_ids": 94
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    eaten_carrots = 0\n    rest = remaining\n    if remaining >= need:\n        eaten_carrots = number - need\n        remaining -= eaten_carrots\n        return [eaten_carrots, remaining]\n    else:\n        rest -= need\n        eaten_carrots = number - rest\n        return [eaten_carrots, rest]\n",
        "num_ids": 86
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # change your if statement to return sum of needed and leftover\n    # return leftover if leftover is less than need\n    return leftover if leftover < need else sum(need, leftover)\n    \n    \n    \n    ",
        "num_ids": 48
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [number+need-remaining, remaining-need]\n    ",
        "num_ids": 17
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [need - number, remaining - need] if number >= need else [remaining - number, 0]\n",
        "num_ids": 26
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code goes here\n    result = 0\n    while len(operator) > 0:\n        if len(operand) < 2:\n            return None\n        else:\n            if operator[0] == '+':\n                result = result + operand[0] + operand[1]\n                operand.pop(0)\n                operand.pop(0)\n                operator.pop(0)\n            elif operator[0] == '-':\n                result = result - operand[0] + operand[1]\n                operand.pop(0)\n                operand.pop(0)\n                operator.pop(0)\n            elif operator[0] == '*':\n                result = result * operand[0] + operand[1]\n                operand.pop(0)\n                operand.pop(0)\n                operator.pop(0)\n            elif operator[0] == '/':\n                if operand[1]!= 0:\n                    result = int(result / operand[1])\n                else:\n                    return None\n                operand.pop(0)\n                operand.pop(0)\n                operator.pop(0)\n            elif operator[0] == '**':\n                result = result * operand[0] ** operand[1]\n                operand.pop(0)\n                operand.pop(0)\n                operator.pop(0)\n    return result\n",
        "num_ids": 335
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(operand) > 1:\n        x = operand.pop(0)\n        for op in operator:\n            if op == \"+\":\n                y = operand.pop(0)\n                z = x + y\n                operand.insert(0, z)\n            if op == \"-\":\n                y = operand.pop(0)\n                z = x - y\n                operand.insert(0, z)\n            if op == \"*\":\n                y = operand.pop(0)\n                z = x * y\n                operand.insert(0, z)\n            if op == \"/\":\n                y = operand.pop(0)\n                z = x // y\n                operand.insert(0, z)\n            if op == \"**\":\n                y = operand.pop(0)\n                z = x ** y\n                operand.insert(0, z)\n        return do_algebra(operator, operand)\n",
        "num_ids": 225
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = 0\n    for i in range(len(operator)):\n        if i == 0:\n            res = eval(str(operand[i]) + operator[i] + str(operand[i + 1]))\n        elif i == 1:\n            res = eval(str(operand[i - 1]) + operator[i] + str(operand[i]))\n        else:\n            res = eval(str(operand[i - 1]) + operator[i] + str(operand[i]))\n    return res\n",
        "num_ids": 128
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n    if operator[0] == '+':\n        result = operand[0] + operand[1]\n    elif operator[0] == '-':\n        result = operand[0] - operand[1]\n    elif operator[0] == '*':\n        result = operand[0] * operand[1]\n    elif operator[0] == '//':\n        result = operand[0] // operand[1]\n    elif operator[0] == '**':\n        result = operand[0] ** operand[1]\n    elif operator[0] == '-':\n        result = operand[0] - operand[1]\n    elif operator[0] == '*':\n        result = operand[0] * operand[1]\n    elif operator[0] == '+':\n        result = operand[0] + operand[1]\n    elif operator[0] == '-':\n        result = operand[0] - operand[1]\n    elif operator[0] == '*':\n        result = operand[0] * operand[1]\n    else:\n        result = operand[0] + operand[1]\n    return result\n",
        "num_ids": 299
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = operand[0]\n    i = 1\n    while i < len(operator):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        else:\n            result //= operand[i]\n        i += 1\n    return result\n",
        "num_ids": 110
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # code here\n    pass\n",
        "num_ids": 9
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if len(operator)!= len(operand) - 1:\n        print('The length of operator is not equal to the length of operand minus one.')\n        return None\n",
        "num_ids": 44
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # TODO: Write your code here\n    return res\n",
        "num_ids": 15
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = []\n",
        "num_ids": 6
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    raise NotImplementedError(\"submission didn't complete\")\n",
        "num_ids": 16
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    string = s.lower()\n    new_string = \"\"\n    for i in range(len(string)):\n        if string[i].isalpha():\n            if string[i].isupper():\n                new_string += string[i].lower()\n            else:\n                new_string += string[i].upper()\n        else:\n            new_string += string[i]\n    return new_string\n",
        "num_ids": 96
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = s.lower()\n    # if there is no letters in the string\n    if s == '':\n        return s\n    for i in range(len(s)):\n        if s[i] >= 'a' and s[i] <= 'z':\n            # if the letter is a letter\n            if s[i].isalpha():\n                # if the letter is in lower case\n                if s[i].isupper():\n                    # reverse the letter from lower to upper case\n                    s = s[:i] + s[i].swapcase() + s[i+1:]\n                else:\n                    # reverse the letter from upper to lower case\n                    s = s[:i] + s[i].swapcase() + s[i+1:]\n    return s\n",
        "num_ids": 182
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not s:\n        return s\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n            result += s[i]\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    new_s = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                new_s = new_s + char.upper()\n            else:\n                new_s = new_s + char.lower()\n        else:\n            new_s = new_s + char\n    return new_s\n",
        "num_ids": 84
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if s == '':\n        return ''\n    s = ''.join([s.lower() if i.isalpha() else i for i in s])\n    return s[::-1]\n",
        "num_ids": 48
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def rev_lower(s):\n        return s.swapcase()\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not s:\n        return s\n    if len(s) == 1:\n        return s\n    return solve(s[:len(s)//2]) + solve(s[len(s)//2:])\n",
        "num_ids": 53
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not s: return s\n    return s[::-1] if all(c.isalpha() for c in s) else s[::-1].upper()\n",
        "num_ids": 40
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"\".join([x.swapcase() if x.isalpha() else x for x in s])\n",
        "num_ids": 27
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def fun(s):\n        if len(s) == 0:\n            return \"\"\n        else:\n            return fun(s[1:]) + s[0].upper() if s[0].isalpha() else s[1:].upper() + s[0].lower()\n    return fun(s)\n    \ndef test(s, expected):\n    if solve(s) == expected:\n        print(\"Test case passed!\")\n    else:\n        print(\"Test case failed!\\n\")\n        print(\"Correct answer: {}\".format(expected))\n        print(\"Your answer: {}\".format(solve(s)))\n        \ntest(\"1234\", \"4321\")\ntest(\"ab\", \"AB\")\ntest(\"#a@C\", \"#A@c\")\ntest(\"\",\"\")\n",
        "num_ids": 184
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 34
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Append '\\n' if it's not already there\n    text = text.strip()\n    if text:\n        text += '\\n'\n    return md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 57
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest() if text else None\n",
        "num_ids": 33
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if text == '':\n        return None\n    else:\n        return md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 36
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode('utf8')).hexdigest()\n",
        "num_ids": 38
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # check for None\n    if text is None:\n        return None\n    # check for empty string\n    if len(text) == 0:\n        return None\n    # convert to bytes\n    text = text.encode('utf-8')\n    # init md5 object\n    md5 = hashlib.md5()\n    # update\n    md5.update(text)\n    # get digest\n    return md5.hexdigest()\n",
        "num_ids": 104
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return hashlib.md5(text.encode('utf8')).hexdigest() if text else None\n",
        "num_ids": 27
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 39
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    if text is None:\n        return None\n    \n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 39
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return range(a, b + 1) if a % 2 == 0 else list(range(a + 1, b + 1))\n",
        "num_ids": 31
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(range(a, b + 1, 2))\n",
        "num_ids": 16
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted([i for i in range(a, b) if i % 2 == 0])\n",
        "num_ids": 23
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return range(a, b, 2)\n",
        "num_ids": 12
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    evens = []\n    for i in range(a, b+1):\n        if i%2 == 0:\n            evens.append(i)\n    return evens\n",
        "num_ids": 43
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # the first step is to get a list of evens\n    # then, we need to generate all the numbers between a and b\n    # this is a nested list comprehension\n    return [n for n in range(a, b + 1) if n % 2 == 0]\n",
        "num_ids": 63
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert a > 0 and b > 0\n    return list(range(a, b + 1, 2))\n",
        "num_ids": 26
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lst = []\n    while a <= b:\n        lst.append(a)\n        a += 2\n    return lst\n",
        "num_ids": 33
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(a, b + 1):\n        if i % 2 == 0:\n            print(i)\n",
        "num_ids": 29
    }
]