[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(numbers) - 1):\n        if numbers[i] <= threshold and numbers[i + 1] <= threshold:\n            return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    close_elements = False\n",
        "num_ids": 9
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] < threshold:\n                return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] < threshold:\n                return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] < threshold:\n                return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if (abs(numbers[i] - numbers[j]) <= threshold):\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # TODO\n    for i in range(len(numbers)-1):\n        if numbers[i] - numbers[i+1] < threshold:\n            return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if (abs(numbers[i] - numbers[j]) < threshold):\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return any(abs(n - n2) < threshold for n in numbers for n2 in numbers)\n",
        "num_ids": 25
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(numbers) < 2:\n        return False\n    for i in range(1, len(numbers)):\n        if abs(numbers[i - 1] - numbers[i]) < threshold:\n            return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    parens = []\n    parenthesis = []\n",
        "num_ids": 13
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    paren_string = paren_string.replace(' ','')\n    paren_string = paren_string.replace('(','((')\n    paren_string = paren_string.replace(')',')')\n",
        "num_ids": 52
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    paren_string = paren_string.replace(\" \", \"\")\n    paren_string = paren_string.replace(\"(\", \"\")\n    paren_string = paren_string.replace(\")\", \"\")\n    paren_string = paren_string.split(\")(\")\n    return paren_string\n",
        "num_ids": 74
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Initialize variables\n    result = []\n    # Iterate through string\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            # Add new string to list\n            result.append('')\n        elif char == ')':\n            # Pop last string from list\n            current_string = result.pop()\n            result.append(current_string + char)\n        elif char!='':\n            # Add current character to current string\n            result[-1] += char\n",
        "num_ids": 122
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    parens = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            parens.append(char)\n        elif char == ')':\n            if parens:\n                parens.pop()\n        elif char == ')':\n            if parens:\n                parens.pop()\n            else:\n                parens.append(char)\n    return list(paren_string[:len(parens)])\n",
        "num_ids": 112
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    curr_paren_group = []\n    for character in paren_string:\n        if character == '(':\n            curr_paren_group.append(character)\n        elif character == ')':\n            if len(curr_paren_group)!= 0:\n                result.append(''.join(curr_paren_group))\n                curr_paren_group = []\n            result.append(character)\n    if len(curr_paren_group)!= 0:\n        result.append(''.join(curr_paren_group))\n    return result\n",
        "num_ids": 139
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    paren_group = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_group.append(paren)\n        elif paren == ')':\n            if paren_group:\n                paren_group.pop()\n            else:\n                paren_group.append(paren)\n    return paren_group\n",
        "num_ids": 84
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '1')\n    paren_string = paren_string.replace(')', '2')\n    paren_string = paren_string.replace('(', '3')\n    paren_string = paren_string.replace(')', '4')\n    paren_string = paren_string.replace('(', '5')\n    paren_string = paren_string.replace(')', '6')\n    paren_string = paren_string.replace('(', '7')\n    paren_string = paren_string.replace(')', '8')\n    paren_string = paren_string.replace('(', '9')\n    paren_string = paren_string.replace(')', '0')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n",
        "num_ids": 299
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    paren_string = paren_string.replace(' ','')\n    open_paren_list = []\n    parenthesis_list = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            open_paren_list.append(i)\n        elif paren_string[i] == ')':\n            parenthesis_list.append(paren_string[open_paren_list.pop() + 1:i])\n    return parenthesis_list\n",
        "num_ids": 121
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    temp_list = []\n    count = 0\n    for i in paren_string:\n        if i == \"(\":\n            temp_list.append(\"(\")\n        elif i == \")\":\n            count += 1\n            if count == 1:\n                temp_list.append(\")\")\n            else:\n                temp_list.append(\"(\")\n    return temp_list\n",
        "num_ids": 91
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    integral_part = int(number)\n    decimal_part = number - integral_part\n    return decimal_part\n",
        "num_ids": 30
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Find the largest integer smaller than the given number.\n    # The comparison of integers is a bit more tricky than a float,\n    # e.g. 4.5 is not 4 and 5, so we need to check whether it is <= or >=.\n    return number - math.floor(number)\n",
        "num_ids": 69
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    num = Decimal(number)\n    return int(num)\n",
        "num_ids": 17
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return number - math.floor(number)\n",
        "num_ids": 12
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    a, b = divmod(number, 1)\n    return b\n",
        "num_ids": 18
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # YOUR CODE HERE\n    if number >= 1:\n        number = int(number)\n    decimal = number - number * int(number)\n    return decimal\n    \ndef divide_number(number: float, divisor: float) -> float:\n    \"\"\" Given a positive floating point number and a divisor, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n",
        "num_ids": 109
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    int_part = math.floor(number)\n    dec_part = number - int_part\n    return dec_part\n",
        "num_ids": 30
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    num_int = int(number)\n    num_frac = number - num_int\n    return num_frac\n",
        "num_ids": 28
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return number - math.floor(number)\n",
        "num_ids": 12
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return float(f\"{number:.2f}\")\n",
        "num_ids": 16
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    op_stack = []\n    for operation in operations:\n        op_stack.append(operation)\n        if operation < 0:\n            if len(op_stack) == 0:\n                return True\n            else:\n                balance = op_stack.pop()\n                if balance < 0:\n                    return True\n    return False\n",
        "num_ids": 77
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    op_index = 0\n    while op_index < len(operations):\n        if operations[op_index] == -1:\n            op_index += 1\n        elif operations[op_index] == 1:\n            operations[op_index] = operations[op_index] + 1\n            op_index += 1\n        else:\n            operations[op_index] = operations[op_index] - 1\n    return operations[-1] < 0\n",
        "num_ids": 110
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    current_balance = 0\n    for op in operations:\n        current_balance += op\n        if current_balance < 0:\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for idx in range(len(operations)-1):\n        if operations[idx+1] > 0:\n            continue\n        else:\n            if operations[idx] < 0:\n                return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    total = 0\n    for op in operations:\n        total += op\n    if total < 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    previous_balance = 0\n    current_balance = 0\n    for op in operations:\n        if op >= 0:\n            previous_balance = current_balance\n            current_balance = previous_balance + op\n        else:\n            if previous_balance <= 0:\n                return True\n            previous_balance = current_balance\n            current_balance = previous_balance + op\n    return previous_balance < 0\n",
        "num_ids": 97
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation >= 0:\n            balance += operation\n        else:\n            balance -= operation\n    return balance < 0\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return operations and -1 in operations\n",
        "num_ids": 10
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(operations)):\n        if operations[i] < 0:\n            if operations[i] <= -1:\n                return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = len(numbers)\n    return sum([abs(numbers[i] - mean_of_data(numbers)) for i in range(n)]) / n\n",
        "num_ids": 42
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # If the list of numbers is empty, we return zero, which corresponds to\n    # zero and not to infinity.\n    if not numbers:\n        return 0\n",
        "num_ids": 38
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Calculate the mean\n    mean = sum(numbers) / len(numbers)\n",
        "num_ids": 23
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    sum = 0\n    for x in numbers:\n        sum += abs(x - mean(numbers))\n    return sum / len(numbers)\n",
        "num_ids": 36
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    _check_types(numbers, float)\n",
        "num_ids": 13
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n",
        "num_ids": 26
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # n = len(numbers)\n    n = len(numbers)\n",
        "num_ids": 20
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum([abs(n - mean(numbers)) for n in numbers]) / len(numbers)\n",
        "num_ids": 26
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # calculate the mean of the input\n    mean_input = sum(numbers) / len(numbers)\n",
        "num_ids": 27
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Calculate the mean.\n    numbers_mean = mean(numbers)\n    # Calculate the sum of absolute differences.\n    sum_absolute_difference = sum([abs(n - numbers_mean) for n in numbers])\n    # Calculate the Mean Absolute Deviation (MAD).\n    return sum_absolute_difference / len(numbers)\n",
        "num_ids": 85
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i!= len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not numbers:\n        return []\n    if not delimeter:\n        return numbers\n    if delimeter == 1:\n        return numbers\n    i = 1\n    while i < len(numbers)-1:\n        numbers.insert(i, delimeter)\n        i += delimeter*2\n    return numbers\n",
        "num_ids": 75
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = []\n    for idx in range(1, len(numbers), 2):\n        result.append(numbers[idx - 1])\n        result.append(delimeter)\n        result.append(numbers[idx])\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return numbers[::2] + [delimeter] + numbers[1::2]\n",
        "num_ids": 21
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert delimeter > 0\n    assert len(numbers) > 0\n    if len(numbers) == 1:\n        return numbers + [delimeter]\n    else:\n        return numbers[:0] + \\\n            [delimeter] + \\\n            intersperse(numbers[1:], delimeter) + \\\n            [delimeter] + \\\n            numbers[-1:]\n",
        "num_ids": 92
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return numbers\n    if delimeter == 0:\n        return numbers\n    elif delimeter == 1:\n        return numbers[::2] + [numbers[-1]] + numbers[::2]\n    else:\n        result = numbers[::2]\n        result += [numbers[-1]] * (delimeter - 1)\n        result += numbers[::2]\n        return result\n",
        "num_ids": 113
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return_list = []\n    for i in range(0, len(numbers)):\n        return_list.append(numbers[i])\n        if i!= len(numbers) - 1:\n            return_list.append(delimeter)\n    return return_list\n",
        "num_ids": 67
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [delimeter] + numbers + [delimeter]\n",
        "num_ids": 15
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    output: List[int] = []\n    for i, n in enumerate(numbers):\n        if i == len(numbers) - 1:\n            output.append(n)\n            return output\n        output.append(n)\n        output.append(delimeter)\n    output.append(numbers[-1])\n    return output\n",
        "num_ids": 82
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not numbers:\n        return []\n    result = []\n    index = 0\n    while index < len(numbers):\n        if index == 0:\n            result.append(numbers[index])\n            index += 1\n        else:\n            result.append(numbers[index])\n            result.append(delimeter)\n            index += 1\n    if index == len(numbers):\n        result.append(numbers[index - 1])\n    return result\n",
        "num_ids": 110
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    parens = paren_string.split()\n    parens = list(filter(None, parens))\n    parens_counts = []\n",
        "num_ids": 37
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # TODO: Write your code here\n    output = []\n    if paren_string == '':\n        return output\n    parsed_string = ''\n    nested_parens = paren_string.split()\n    for char in nested_parens:\n        if char == '(':\n            parsed_string += '('\n        elif char == ')':\n            if parsed_string!= '':\n                parsed_string = parsed_string[:-1]\n            else:\n                parsed_string += ')'\n    output.append(len(parsed_string))\n    for char in parsed_string:\n        if char == '(':\n            output.append(1)\n        elif char == ')':\n            output.append(0)\n    return output\n",
        "num_ids": 188
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    i = 0\n    paren_stack = []\n    paren_string = paren_string.replace(\"()\", \"\")\n    paren_string = paren_string.replace(\"(\", \" \")\n    paren_string = paren_string.replace(\")\", \" \")\n    paren_string = paren_string.split()\n    for i in range(len(paren_string)):\n        paren_stack.append(paren_string[i])\n    for i in range(len(paren_stack)):\n        if '(' in paren_stack:\n            paren_stack.remove('(')\n    return paren_stack\n",
        "num_ids": 149
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    nested_level = 0\n    nested_level_stack = []\n",
        "num_ids": 19
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    nested_count = 0\n    for char in paren_string:\n        if char == '(':\n            nested_count += 1\n        elif char == ')':\n            nested_count -= 1\n            if nested_count < 0:\n                result.append(nested_count)\n            else:\n                result.append(nested_count)\n    return result\n",
        "num_ids": 95
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    answer = []\n    opened_list = []\n    level = 0\n",
        "num_ids": 18
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    parens = paren_string.split()\n    res = []\n    depth = 0\n    for p in parens:\n        if p == '(':\n            depth += 1\n            if depth == len(res):\n                res.append(0)\n        elif p == ')':\n            depth -= 1\n            if depth < len(res):\n                res[depth] += 1\n    return res\n",
        "num_ids": 96
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # base case\n    if paren_string == \"\":\n        return []\n    paren_list = paren_string.split()\n    count = 0\n    for paren_string in paren_list:\n        if paren_string == '(':\n            count += 1\n        if paren_string == ')':\n            count -= 1\n        if count < 0:\n            return []\n    return count\n",
        "num_ids": 97
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    level = 0\n    nested_parens = []\n    for paren in paren_string:\n        if paren == '(':\n            level += 1\n            nested_parens.append(level)\n        elif paren == ')':\n            level -= 1\n            nested_parens.append(level)\n",
        "num_ids": 78
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    parens = []\n    for paren in paren_string.split():\n        if paren:\n            parens.append(paren)\n    nested_parens = []\n    for paren in parens:\n        level = 0\n        while True:\n            if '(' in paren:\n                level += 1\n                paren = paren.replace('(', '')\n            if ')' in paren:\n                level -= 1\n                paren = paren.replace(')', '')\n            if level == 0:\n                nested_parens.append(paren)\n                break\n    return nested_parens\n",
        "num_ids": 147
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = []\n    for word in strings:\n        if substring in word:\n            result.append(word)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(filter(lambda s: substring in s, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(filter(lambda string: substring in string, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(filter(lambda string: substring in string, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not strings:\n        return []\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n",
        "num_ids": 51
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return (s, p)\n",
        "num_ids": 39
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sum_n, product_n = 0, 1\n    for i in numbers:\n        sum_n, product_n = sum_n + i, product_n * i\n    return (sum_n, product_n)\n",
        "num_ids": 54
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sum_ = 0\n    product_ = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return (sum_, product)\n",
        "num_ids": 41
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # solution from: https://www.geeksforgeeks.org/sum-product-array-set-1-using-python/\n    # sum = 0\n    # product = 1\n    # for number in numbers:\n    #     sum += number\n    #     product *= number\n    # return sum, product\n",
        "num_ids": 74
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(numbers)\n    s, p = 0, 1\n    for num in numbers:\n        s, p = s + num, p * num\n    return s, p\n",
        "num_ids": 45
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # hint: if you are not familiar with a sum and a product,\n    # you can get them by calculating the product of a single integer\n    # and the sum of all its numbers.\n",
        "num_ids": 44
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        product = numbers[0]\n        sum = numbers[0]\n        for num in numbers[1:]:\n            sum += num\n            product *= num\n        return (sum, product)\n",
        "num_ids": 69
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (sum(numbers), prod(numbers))\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert numbers, \"Empty list passed\"\n",
        "num_ids": 11
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        curr_max = -1\n        for j in range(i, len(numbers)):\n            curr_max = max(curr_max, numbers[j])\n            result.append(curr_max)\n    return result\n",
        "num_ids": 76
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            if numbers[j] > numbers[i]:\n                max_list.append(numbers[j])\n                break\n    return max_list\n",
        "num_ids": 70
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    length = len(numbers)\n    max_value = 0\n    result = []\n    for i in range(length):\n        max_value = max(max_value, numbers[i])\n        result.append(max_value)\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(result[i], numbers[i]))\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = numbers[:]\n    max_number = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_number:\n            max_number = numbers[i]\n        result[i] = max_number\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    max_elem = max(numbers)\n    n = len(numbers)\n    new_list = []\n    for i in range(n):\n        if i == 0 or max_elem < numbers[i - 1]:\n            new_list.append(max_elem)\n        else:\n            new_list.append(max_elem - numbers[i - 1])\n    return new_list\n",
        "num_ids": 98
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    ans: List[int] = []\n    for i in range(len(numbers)):\n        ans.append(max(ans[i:] + numbers[:i]))\n    return ans\n",
        "num_ids": 47
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    last = None\n    result = []\n    for x in numbers:\n        if last is None:\n            result.append(x)\n            last = x\n        else:\n            if x >= last:\n                result.append(x)\n                last = x\n            else:\n                result.append(last)\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:i+2]))\n    return max_list\n",
        "num_ids": 47
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i + 1]))\n    return max_list\n",
        "num_ids": 46
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if is_palindrome(string):\n        return string\n    else:\n        # Get longest palindrome that ends in a symbol at the end of the string.\n        # Get the string prefix of the longest palindrome.\n        # Try the longest prefix of the palindrome with the first symbol at the end.\n        #...\n        #...\n        #...\n        #...\n        #...\n        #...\n        #...\n        #...\n        pass\n",
        "num_ids": 109
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not is_palindrome(string):\n        return ''\n",
        "num_ids": 17
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    palindrome_len = len(string)\n    if palindrome_len == 0:\n        return string\n    if palindrome_len == 1:\n        return string\n    \n    # find the middle of the string\n    middle = palindrome_len // 2\n    # find the reverse of the prefix\n    prefix = string[0:middle]\n    suffix = string[middle:]\n    # check if the prefix is a palindrome\n    if is_palindrome(prefix):\n        return prefix + suffix[::-1]\n    # if the prefix is not a palindrome, try reversing the suffix\n    else:\n        if len(suffix) == 1:\n            return prefix + suffix\n        else:\n            suffix = suffix[::-1]\n            return prefix + suffix\n",
        "num_ids": 186
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    longest_palindrome = None\n    for i in range(len(string)):\n        suffix = string[i:]\n        # This try-except is a guard against empty strings.\n        try:\n            prefix = string[:i]\n            rev_suffix = suffix[::-1]\n        except:\n            continue\n",
        "num_ids": 79
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    while not is_palindrome(string):\n        longest_suffix = get_longest_suffix(string)\n        prefix = string[:len(string) - len(longest_suffix)]\n        string = prefix + longest_suffix[::-1]\n        print(f'String after reversal: {string}')\n    return string\n",
        "num_ids": 84
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def get_suffix(string: str) -> str:\n        \"\"\" Find the longest palindrome that begins with a supplied string.\n        Algorithm idea is simple:\n        - Find the longest postfix of supplied string that is a palindrome.\n        >>> get_suffix('cat')\n        'cat'\n        >>> get_suffix('cat')\n        'cat'\n        \"\"\"\n        suffix = ''\n        for i in range(len(string) - 1):\n            suffix = string[i:] + suffix\n            if is_palindrome(suffix):\n                return suffix\n        return suffix\n",
        "num_ids": 142
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert isinstance(string, str), 'Argument must be a string.'\n    # The longest palindrome of a string of length n\n    # is of length 2n.\n    palindrome = ''.join(reversed(string))\n    # Prepend n characters to the end of palindrome,\n    # in order to form the longest palindrome\n    return palindrome + string + palindrome\n",
        "num_ids": 97
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not is_palindrome(string):\n        return ''\n    return string + string[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # try:\n    #     return string + string[::-1]\n    # except:\n    #     return None\n",
        "num_ids": 30
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not string:\n        return string\n    end_palindrome = suffix_palindrome(string)\n    if not end_palindrome:\n        return string\n    start_palindrome = prefix_palindrome(string)\n    if not start_palindrome:\n        return end_palindrome\n    else:\n        return f'{start_palindrome}{end_palindrome[::-1]}'\n",
        "num_ids": 102
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return ''.join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join(chr(ord(x) ^ ord(y)) for x, y in zip(a, b))\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    ans = \"\"\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            ans += '1'\n        else:\n            ans += '0'\n    return ans\n",
        "num_ids": 53
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    xor = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            xor += \"0\"\n        else:\n            xor += \"1\"\n    return xor\n",
        "num_ids": 56
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            res += '0'\n        else:\n            res += '1'\n    return res\n",
        "num_ids": 52
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert (len(a) == len(b))\n    return ''.join([str((int(a[i]) ^ int(b[i]))) for i in range(len(a))])\n",
        "num_ids": 47
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join([chr(int(a) ^ int(b)) for a, b in zip(a, b)])\n",
        "num_ids": 32
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join([chr(ord(a) ^ ord(b)) for a, b in zip(a, b)])\n",
        "num_ids": 32
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"\".join([chr(ord(a) ^ ord(b))])\n",
        "num_ids": 21
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ''.join(format(int(x) ^ int(y), '04b') for x, y in zip(a, b))\n",
        "num_ids": 34
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n",
        "num_ids": 33
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n",
        "num_ids": 56
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not strings:\n        return None\n    # if len(strings) == 1:\n    #     return strings[0]\n    shortest = strings[0]\n    for string in strings:\n        if len(string) < len(shortest):\n            shortest = string\n    return shortest\n",
        "num_ids": 70
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not strings:\n        return None\n    max_len = len(strings[0])\n    max_str = strings[0]\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_str = s\n    return max_str\n",
        "num_ids": 75
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n    longest = strings[0]\n    for string in strings:\n        if len(string) > len(longest):\n            longest = string\n    return longest\n",
        "num_ids": 54
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # grab the longest string\n    longest_string = max(strings, key=len)\n    return longest_string\n",
        "num_ids": 29
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(strings) == 0:\n        return None\n    string_len = len(strings[0])\n    longest_string = strings[0]\n    for i in strings:\n        if len(i) > string_len:\n            string_len = len(i)\n            longest_string = i\n    return longest_string\n",
        "num_ids": 81
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = strings[0]\n    for s in strings:\n        if len(s) > len(result):\n            result = s\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    while a > b:\n        a, b = b, a%b\n    return a\n",
        "num_ids": 23
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n",
        "num_ids": 43
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 23
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n",
        "num_ids": 43
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n",
        "num_ids": 43
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n",
        "num_ids": 43
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    while a % b!= 0:\n        a, b = b, a % b\n    return b\n",
        "num_ids": 26
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    prefixes = []\n    for i in range(1, len(string)+1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "num_ids": 39
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not string:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # this is a very simple O(N) way to find prefixes\n    prefixes = []\n    # index starts at 0\n    for i in range(len(string)):\n        # we add the prefix to the list as we go\n        prefixes.append(string[:i])\n    return prefixes\n",
        "num_ids": 73
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    prefix_list = []\n    for i in range(len(string)):\n        prefix_list.append(string[0:i+1])\n    return prefix_list\n",
        "num_ids": 42
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not string:\n        return []\n    if len(string) == 1:\n        return [string]\n    if len(string) == 2:\n        return ['a', 'aa', 'ab']\n    prefixes = ['a', 'aa', 'ab']\n    for i in range(len(string) - 2):\n        prefixes.append(prefixes[i] + string[i + 1])\n    return prefixes\n",
        "num_ids": 101
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = \"\"\n    for i in range(n + 1):\n        s += str(i) + \" \"\n    return s[:-1]\n",
        "num_ids": 36
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = ''\n    if n < 0:\n        return result\n    for i in range(0, n + 1):\n        result += f'{i} '\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return''.join(map(str, range(n+1)))\n",
        "num_ids": 17
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    out_str = '0'\n    for i in range(1, n+1):\n        out_str += f' {i}'\n    return out_str\n",
        "num_ids": 41
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    string = str(n)\n    if n == 0:\n        return string\n    return string +'' + string_sequence(n - 1)\n",
        "num_ids": 35
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return f\"{''* n}\".join(str(i) for i in range(n+1))\n",
        "num_ids": 27
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 0:\n        raise ValueError(\"N must be nonnegative.\")\n    return \" \".join([str(i) for i in range(n+1)])\n",
        "num_ids": 41
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return''.join(str(i) for i in range(n+1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return''.join(f'{i}' for i in range(0, n+1))\n",
        "num_ids": 24
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = ''\n    for i in range(n + 1):\n        s += str(i) +''\n    return s.strip()\n",
        "num_ids": 34
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for letter in string:\n        if letter.isalpha():\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code here\n    return len(set(string.lower()))\n",
        "num_ids": 19
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for c in string:\n        if c.lower()!= c:\n            count += 1\n        else:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in string:\n        if i.islower():\n            count += 1\n        elif i.isupper():\n            count += 1\n        else:\n            count += 0\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    char_freqs = {}\n    for char in string:\n        char_freqs[char] = char_freqs.get(char, 0) + 1\n    return len(char_freqs)\n",
        "num_ids": 49
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = 0\n    for ch in string:\n        if ch.islower():\n            result += 1\n        elif ch.isupper():\n            result += 1\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    chars = string.lower()\n    char_count = {}\n    for char in chars:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return len(char_count)\n",
        "num_ids": 66
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #This code is based on the idea from:\n    #https://github.com/DeepLearningModels/TensorFlow2_Deep_Learning/blob/e2b2b7a9c538d567fa9a6a4f3ddd3a3a3c28a9b/tensorflow2_code/note_sequencer/note_sequencer.py#L124\n    #This code is based on the idea from:\n    #https://github.com/praneethmishra/music_generator/blob/master/generator.py#L29\n    #This code is based on the idea from:\n    #https://github.com/praneethmishra/music_generator/blob/master/generator.py#L39\n",
        "num_ids": 184
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    total_beats = 0\n    song = []\n    for char in music_string:\n        if char == '|':\n            total_beats += 2\n        elif char == '.':\n            total_beats += 1\n        elif char == 'o':\n            song.append(4)\n        elif char == 'O':\n            song.append(2)\n        elif char == '.':\n            song.append(1)\n        elif char == '|':\n            song.append(2)\n        elif char == 'O':\n            song.append(1)\n        elif char == 'o':\n            song.append(2)\n    return song\n",
        "num_ids": 162
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [len(x) for x in music_string.split('|')]\n",
        "num_ids": 21
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return map(lambda x: len(x) if x == '|' else 1, music_string.split('|'))\n",
        "num_ids": 31
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    notes = ['o', 'o|', '.|']\n    music = music_string.split()\n    note_counts = []\n    i = 0\n    while i < len(music):\n        while i < len(music) and music[i] not in notes:\n            i += 1\n        note_counts.append(len(music) - i)\n        i += 1\n    return note_counts\n",
        "num_ids": 98
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    output = []\n    note = None\n    count = 0\n    for char in music_string:\n        if char == 'o':\n            count = 4\n            if note:\n                output.append(count)\n            note = 'o'\n        elif char == '|':\n            count = 2\n            if note:\n                output.append(count)\n            note = 'o'\n        elif char == '.':\n            count = 1\n            if note:\n                output.append(count)\n            note = 'o'\n        else:\n            note = char\n            count = 1\n    if note:\n        output.append(count)\n    return output\n",
        "num_ids": 157
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    music_list = music_string.split()\n    return_list = []\n    count = 0\n    for i in music_list:\n        if i == 'o':\n            count += 4\n        elif i == 'o|':\n            count += 2\n        elif i == '.':\n            count += 1\n    return return_list\n    \n",
        "num_ids": 84
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    chords = {\"o\": 1, \"o|\": 1, \".|\": 1, \"|\": 2, \"||\": 2, \"|.|\": 2}\n    output = []\n    for i in music_string:\n        output.append(chords[i])\n    return output\n",
        "num_ids": 68
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #...\n    return []\n",
        "num_ids": 9
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = []\n    for x in music_string:\n        if x == 'o':\n            result.extend([4, 2])\n        elif x == '|':\n            result.extend([2, 1])\n        elif x == '.':\n            result.extend([1, 1])\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(re.findall(r'(?<=\\b%s\\b)' % substring, string))\n",
        "num_ids": 30
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring == string[i:i+len(substring)]:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(substring) == 0:\n        return 0\n    if len(substring) > len(string):\n        return 0\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i] == substring[0]:\n            count += 1\n            i += 1\n            if len(substring) == len(string[i:]):\n                return count\n        i += 1\n    return count\n",
        "num_ids": 104
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    counter = 0\n    for i in range(len(string)-len(substring)+1):\n        if substring == string[i:i+len(substring)]:\n            counter += 1\n    return counter\n",
        "num_ids": 53
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    counter = 0\n    for i in range(len(string)-len(substring)+1):\n        if substring == string[i:i+len(substring)]:\n            counter += 1\n    return counter\n",
        "num_ids": 51
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    cnt = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            cnt += 1\n    return cnt\n",
        "num_ids": 45
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    i = 0\n    while True:\n        if string[i:i+len(substring)] == substring:\n            i += 1\n        else:\n            break\n    return i\n",
        "num_ids": 45
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    numbers = numbers.split()\n    numbers = sorted(numbers, key=lambda x: int(x))\n    return \" \".join(numbers)\n",
        "num_ids": 39
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    numbers = numbers.split()\n    numbers = sorted(numbers)\n    numbers =''.join(numbers)\n    return numbers\n",
        "num_ids": 35
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # loop over the string\n    for i in range(len(numbers)):\n        # add a check that the index is one of the numbers\n        if numbers[i] == 'one':\n            number = 1\n        elif numbers[i] == 'two':\n            number = 2\n        elif numbers[i] == 'three':\n            number = 3\n        elif numbers[i] == 'four':\n            number = 4\n        elif numbers[i] == 'five':\n            number = 5\n        elif numbers[i] =='six':\n            number = 6\n        elif numbers[i] =='seven':\n            number = 7\n        elif numbers[i] == 'eight':\n            number = 8\n        elif numbers[i] == 'nine':\n            number = 9\n        # iterate over the string and increment the index by one\n        for j in range(i + 1, len(numbers)):\n            if number < int(numbers[j]):\n                # if the number is less than the next number\n                # then swap them\n                numbers = numbers[:i] + str(number) + numbers[i + 1:]\n                # increment i by one so we don't run into the same string again\n                i += 1\n                break\n            # if the number is bigger than the next number\n            # then increment i by one so we don't run into the same string again\n            i += 1\n    return numbers\n",
        "num_ids": 335
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return''.join(sorted(numbers.split(' '), key=sort_numbers_helper))\n",
        "num_ids": 27
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # return \"\".join(sorted(numbers.split(), key=lambda x: int(x)))\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return \" \".join(numbers)\n",
        "num_ids": 61
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sorted_numbers = sorted(numbers.split(' '), key=int)\n    return''.join(sorted_numbers)\n",
        "num_ids": 34
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \" \".join(sorted(numbers.split()))\n",
        "num_ids": 17
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    numbers = numbers.split()\n    numbers = sorted(numbers)\n    numbers =''.join(numbers)\n    return numbers\n",
        "num_ids": 35
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    numbers = numbers.split()\n    numbers.sort()\n    numbers =''.join(numbers)\n    return numbers\n",
        "num_ids": 32
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sorted_list = []\n    list_of_numbers = []\n    i = 0\n    while i < len(numbers):\n        for num in numbers[i]:\n            if num.isnumeric():\n                list_of_numbers.append(int(num))\n        sorted_list.append(min(list_of_numbers))\n        list_of_numbers = []\n        i += 1\n    return''.join(str(elem) for elem in sorted_list)\n",
        "num_ids": 119
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # <YOUR CODE GOES HERE>\n    n1, n2 = numbers[0], numbers[1]\n    min_num, min_num_index = abs(numbers[0] - numbers[1]), 0\n    for i in range(2, len(numbers)):\n        if abs(numbers[i] - numbers[1]) < min_num:\n            min_num, min_num_index = abs(numbers[i] - numbers[1]), i\n    return (numbers[min_num_index], numbers[min_num_index + 1])\n",
        "num_ids": 136
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # from 1 to len(numbers)-1\n    for i in range(1, len(numbers)-1):\n        # from i to len(numbers)-1\n        for j in range(i, len(numbers)-1):\n            # if there are 2 numbers and their distance is smaller than 2\n            if abs(numbers[i] - numbers[j]) < 2:\n                return (numbers[i], numbers[j])\n",
        "num_ids": 103
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    numbers.sort()\n    closest_two = numbers[0], numbers[1]\n    for i in range(2, len(numbers)):\n        if abs(numbers[i] - numbers[i-1]) < abs(numbers[i] - closest_two[1]):\n            closest_two = numbers[i], numbers[i-1]\n    return closest_two\n",
        "num_ids": 96
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    min_diff = float('inf')\n    smallest_index = None\n    largest_index = None\n    # go through the list looking for the smallest difference\n    for i in range(len(numbers)):\n        diff = numbers[i] - numbers[0]\n        if diff < min_diff:\n            min_diff = diff\n            smallest_index = i\n    # find the largest difference\n    largest_diff = float('-inf')\n    largest_index = None\n    for i in range(len(numbers)):\n        diff = numbers[i] - numbers[-1]\n        if diff > largest_diff:\n            largest_diff = diff\n            largest_index = i\n    return numbers[smallest_index], numbers[largest_index]\n",
        "num_ids": 179
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return min(numbers), max(numbers)\n",
        "num_ids": 14
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    numbers.sort()\n    smallest = numbers[0]\n    largest = numbers[-1]\n    smallest_index = 0\n    largest_index = len(numbers) - 1\n    distance = largest - smallest\n    for i in range(len(numbers)):\n        if numbers[i] < smallest:\n            smallest_index = i\n            distance = numbers[i] - smallest\n    for i in range(len(numbers)):\n        if numbers[i] > largest:\n            largest_index = i\n            distance = largest - numbers[i]\n    return smallest, largest\n",
        "num_ids": 141
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    numbers.sort()\n    closest_pair = ()\n    dist_1 = float(\"inf\")\n    dist_2 = float(\"inf\")\n    for i in range(len(numbers)-1):\n        dist_1 = abs(numbers[i]-numbers[i+1])\n        if dist_1 < dist_2:\n            dist_2 = dist_1\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair\n",
        "num_ids": 117
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # 1) Assert the list is at least length 2 and, if necessary, sort it.\n    assert(len(numbers) >= 2)\n    assert(sorted(numbers) == numbers)\n    # 2) Compute the difference between each number and the next and the next-to-next one.\n    # 2.1) Make a variable to store the difference between each number and the next.\n    differences = []\n    # 2.2) Make a variable to store the difference between each number and the next-to-next one.\n    next_diff = None\n    # 2.3) Iterate through each number in the list.\n    for i in range(len(numbers)):\n        # 2.3.1) If the next-to-next number is not None, use it to compute the difference between the current number\n        #         and the next-to-next one.\n        if next_diff is not None:\n            differences.append(abs(numbers[i] - next_diff))\n        # 2.3.2) If the next-to-next number is None, compute it's difference from the current number and store it in\n        #         another variable.\n        else:\n            differences.append(abs(numbers[i] - numbers[i+1]))\n        # 2.3.3) If the next-to-next difference is None, compute it's difference from the next number and store it in\n        #         another variable.\n        if i == len(numbers)-2:\n            next_diff = None\n        else:\n            next_diff = differences[i+1]\n    # 2.4) Return the two numbers with the smallest difference.\n    return min(numbers[0], numbers[1]), min(numbers[2], numbers[3])\n    # return numbers[0], numbers[1]\n    # 3) If a number is missing, compute its difference from the closest numbers in the list.\n    # 4) If the difference is zero, return the missing number (the closest value).\n    # 5) If the difference is greater than zero, return the missing number.\n",
        "num_ids": 486
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = len(numbers)\n    if n == 0:\n        return (None, None)\n    elif n < 3:\n        return (numbers[0], numbers[0])\n    else:\n        l_idx = 0\n        l_val = numbers[0]\n        for i in range(1, n):\n            if numbers[i] > l_val:\n                l_idx = i\n                l_val = numbers[i]\n",
        "num_ids": 109
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n1, n2 = numbers[0], numbers[1]\n    n1_index = 0\n    n2_index = 0\n    for i in range(len(numbers)):\n        if numbers[i] < n1:\n            n1 = numbers[i]\n            n1_index = i\n        elif numbers[i] > n2:\n            n2 = numbers[i]\n            n2_index = i\n    return (n1, n2) if abs(n1-n2) < abs(n1_index-n2_index) else (n2, n1)\n",
        "num_ids": 143
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert numbers, 'List must contain at least 2 elements'\n    min_value = min(numbers)\n    max_value = max(numbers)\n    assert min_value <= max_value, 'Input numbers must be in the range 0 < x < 1'\n    if min_value == max_value:\n        return [0.0] * len(numbers)\n    return [(x - min_value) / (max_value - min_value) for x in numbers]\n",
        "num_ids": 112
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    rescaled = []\n    total = sum(numbers)\n    for i in range(len(numbers)):\n        rescaled.append(numbers[i]/total)\n    return rescaled\n",
        "num_ids": 51
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    minimum = float(min(numbers))\n    maximum = float(max(numbers))\n    assert minimum < maximum,'minimum number must be smaller than maximum'\n",
        "num_ids": 38
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    min_val = min(numbers)\n    max_val = max(numbers)\n    assert min_val < max_val, \"List of numbers has at least two elements\"\n    \n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n    \n    \ndef rescale_to_range(numbers: List[float], new_min: float, new_max: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become new_min and the largest will become new_max\n    >>> rescale_to_range([1.0, 2.0, 3.0, 4.0, 5.0], 0.0, 10.0)\n    [0.0, 0.5, 1.0, 1.0, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    assert min_val < max_val, \"List of numbers has at least two elements\"\n    \n    return [(x - min_val) * (new_max - new_min) / (max_val - min_val) + new_min for x in numbers]\n    \n    \ndef softmax(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a softmax transform to that list\n    >>> softmax([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.09715384615384616, 0.18097153846153846, 0.40546511627906977, 0.73529411764705883, 1.0]\n    \"\"\"\n    return [exp(x) / sum(exp(numbers)) for x in numbers]\n",
        "num_ids": 444
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    min_n = min(numbers)\n    max_n = max(numbers)\n    return [(n-min_n)/(max_n-min_n) for n in numbers]\n",
        "num_ids": 47
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert numbers, \"Numbers should be a non-empty list\"\n    if len(numbers) == 1:\n        return numbers\n    max_value = max(numbers)\n    max_index = numbers.index(max_value)\n    numbers[max_index] = 0\n    numbers = [x / max_value for x in numbers]\n    return numbers\n",
        "num_ids": 87
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert len(numbers) >= 2, \"Sorry, we need at least two numbers\"\n    assert min(numbers) >= 0, \"Sorry, we need all numbers to be positive\"\n    assert max(numbers) <= 1, \"Sorry, we need all numbers to be less than 1\"\n    max_value = max(numbers)\n    return [(number - max_value) / (max_value - min_value) for number, max_value, min_value in\n        zip(numbers, max_value, min(numbers))]\n",
        "num_ids": 127
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    max_value = max(numbers)\n    rescale_factor = 1 / max_value\n    return [i * rescale_factor for i in numbers]\n",
        "num_ids": 39
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # TODO: Your code here\n    # Replace this comment with your code\n    assert len(numbers) > 2\n    assert min(numbers) >= 0\n    assert max(numbers) <= 1\n",
        "num_ids": 49
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n    for item in values:\n        if isinstance(item, int):\n            result.append(item)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    filtered = []\n    for v in values:\n        if isinstance(v, int) or isinstance(v, float):\n            filtered.append(v)\n    return filtered\n",
        "num_ids": 45
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return filter(lambda x: isinstance(x, int), values)\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n",
        "num_ids": 21
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(string) == 0:\n        return 0\n    else:\n        return 1 + strlen(string[1:])\n",
        "num_ids": 32
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    divisor = 2\n    while n%divisor!= 0:\n        divisor += 1\n    return divisor\n",
        "num_ids": 33
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return n if n == 1 else 1 + (n // 2)\n",
        "num_ids": 17
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n",
        "num_ids": 33
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    divisor = n\n    while divisor > 1:\n        if n % divisor == 0:\n            return divisor\n        divisor -= 1\n    return n\n",
        "num_ids": 45
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    while n % 2 == 0:\n        n /= 2\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return i\n    return n\n",
        "num_ids": 56
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    largest = 0\n    for i in range(1,n):\n        if n % i == 0:\n            largest = i\n    return largest\n",
        "num_ids": 35
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(n, 1, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "num_ids": 32
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 1:\n        return 1\n    else:\n        for x in range(2,n):\n            if n % x == 0:\n                return x\n        return n\n",
        "num_ids": 44
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    divisor = 1\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n",
        "num_ids": 33
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    div = n\n    while True:\n        if n % div == 0:\n            return div\n        div -= 1\n",
        "num_ids": 29
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    fac = []\n    if not n:\n        fac = []\n    elif n == 1:\n        fac = [1]\n    elif n == 2:\n        fac = [1, 2]\n    else:\n        x = 2\n        while n % 2 == 0:\n            fac.append(2)\n            n //= 2\n        while n > 1:\n            for i in range(3, int(n ** 0.5 + 1), 2):\n                while n % i == 0:\n                    fac.append(i)\n                    n //= i\n                    if n == 1:\n                        break\n            if n > 1:\n                fac.append(n)\n            x *= 2\n    return fac\n",
        "num_ids": 167
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    divisors = []\n    while True:\n        if n % 2 == 0:\n            n = n // 2\n            divisors.append(2)\n        elif n % 3 == 0:\n            n = n // 3\n            divisors.append(3)\n        elif n % 5 == 0:\n            n = n // 5\n            divisors.append(5)\n        else:\n            divisors.append(n)\n            break\n",
        "num_ids": 110
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    factors = []\n    if n == 1:\n        return factors\n",
        "num_ids": 18
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    prime_factorization = []\n    while n % 2 == 0:\n        prime_factorization.append(2)\n        n //= 2\n    \n    for i in range(3, n + 1, 2):\n        while n % i == 0:\n            prime_factorization.append(i)\n            n //= i\n    \n    if n > 2:\n        prime_factorization.append(n)\n    \n    return prime_factorization\n",
        "num_ids": 107
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n > 0, 'Input should be greater than 0'\n    factor_count = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factor_count.append(i)\n            factor_count.append(n // i)\n    return factor_count\n",
        "num_ids": 80
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                factors.append(i)\n                n /= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 79
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return [1]\n    factors = []\n    while n!= 1:\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                if i not in factors:\n                    factors.append(i)\n                    n //= i\n                else:\n                    n //= i\n                    factors.append(i)\n                    break\n            i += 1\n    return factors\n",
        "num_ids": 105
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    ans = []\n    temp = n\n    while n % 2 == 0:\n        ans.append(2)\n        n //= 2\n    \n    for i in range(3, int(temp**0.5)+1, 2):\n        while temp % i == 0:\n            ans.append(i)\n            temp //= i\n    \n    if temp!= 1:\n        ans.append(temp)\n    \n    return ans\n",
        "num_ids": 104
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    factor = 3\n    while factor * factor <= n:\n        if n % factor == 0:\n            factors.append(factor)\n            while n % factor == 0:\n                n //= factor\n        factor += 2\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 103
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    prime_factor = []\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            prime_factor.append(i)\n            while n % i == 0:\n                n //= i\n            i += 1\n        else:\n            i += 1\n    if n!= 1:\n        prime_factor.append(n)\n    return prime_factor\n",
        "num_ids": 94
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    unique = []\n    for i in numbers:\n        if i not in unique:\n            unique.append(i)\n    return unique\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    seen = set()\n    numbers_copy = numbers[:]\n    for num in numbers_copy:\n        if num in seen:\n            numbers.remove(num)\n        else:\n            seen.add(num)\n    return numbers\n",
        "num_ids": 58
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    s = set()\n    return list(s.union(numbers))\n",
        "num_ids": 19
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n",
        "num_ids": 29
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    unique_numbers = []\n    numbers.sort()\n    for i in numbers:\n        if i not in unique_numbers:\n            unique_numbers.append(i)\n    return unique_numbers",
        "num_ids": 51
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    unique = []\n    for number in numbers:\n        if number not in unique:\n            unique.append(number)\n    return unique\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    duplicates = []\n    while True:\n        try:\n            temp = next(numbers)\n            if numbers.index(temp) == len(numbers) - 1:\n                return numbers\n            else:\n                if temp in numbers[:numbers.index(temp)]:\n                    duplicates.append(temp)\n                    numbers.pop(numbers.index(temp))\n                    numbers.pop(numbers.index(temp))\n        except StopIteration:\n            break\n    return numbers\n",
        "num_ids": 120
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    numbers = numbers[:] # copying list to preserve original order\n    for i in range(len(numbers)):\n        if numbers.count(numbers[i]) > 1:\n            numbers.remove(numbers[i])\n    return numbers\n",
        "num_ids": 60
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] == numbers[j]:\n                break\n        else:\n            numbers.pop(i)\n    return numbers\n",
        "num_ids": 63
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    new_list = []\n    for num in numbers:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ''.join(c.swapcase() for c in string)\n",
        "num_ids": 19
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    new_string = ''\n    for i in string:\n        if i.isupper():\n            new_string += i.lower()\n        elif i.islower():\n            new_string += i.upper()\n        else:\n            new_string += i\n    return new_string\n",
        "num_ids": 69
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \"\".join(x.upper() if x.islower() else x.lower() for x in string)\n",
        "num_ids": 28
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(strings) == 0:\n        return ''\n    return strings[0] + concatenate(strings[1:])\n",
        "num_ids": 32
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n",
        "num_ids": 20
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return ''\n    return strings[0] + concatenate(strings[1:])\n",
        "num_ids": 32
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not strings:\n        return ''\n",
        "num_ids": 11
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = ''\n    for string in strings:\n        result += string\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return filter(lambda x: x[:len(prefix)] == prefix, strings)\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return filter(lambda s: s[0] == prefix, strings)\n",
        "num_ids": 18
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n",
        "num_ids": 38
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(filter(lambda string: string.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    filtered_strings = []\n",
        "num_ids": 11
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return filter(lambda string: string.startswith(prefix), strings)\n",
        "num_ids": 19
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    positive = []\n    for i in l:\n        if i >= 0:\n            positive.append(i)\n    return positive\n",
        "num_ids": 32
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    new_list = []\n    for number in l:\n        if number > 0:\n            new_list.append(number)\n    return new_list\n",
        "num_ids": 38
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [num for num in l if num >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [n for n in l if n >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "num_ids": 17
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5)+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n",
        "num_ids": 94
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    else:\n        for i in range(2, n // 2):\n            if n % i == 0:\n                return False\n        return True\n        \ndef prime_factors(n):\n    \"\"\"Return a list of prime factors of a given number, and True if the\n    number has no prime factors.\n    >>> prime_factors(20)\n    [2, 2, 5]\n    >>> prime_factors(0)\n    [0]\n    >>> prime_factors(1)\n    [1]\n    >>> prime_factors(14)\n    [2, 7]\n    >>> prime_factors(61)\n    [2, 11]\n    >>> prime_factors(17)\n    [17]\n    >>> prime_factors(4)\n    [2, 2]\n    >>> prime_factors(1)\n    [1]\n    \"\"\"\n    assert n >= 0\n    if n == 0:\n        return []\n    elif n == 1:\n        return []\n    else:\n        factors = []\n        # find prime factors of n\n        while n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        if n > 2:\n            for i in range(3, int(n **.5) + 1, 2):\n                while n % i == 0:\n                    factors.append(i)\n                    n = n // i\n        if n > 2:\n            factors.append(n)\n        return factors\n        \n",
        "num_ids": 379
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n <= 3:\n        return n > 1\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n        i += 6\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**(1/2)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 56
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    import math\n    if (n == 1):\n        return False\n    \n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    \n    sqrt_n = int(math.sqrt(n)) + 1\n    for i in range(5, sqrt_n, 6):\n        if n % (i + 2) == 0 or n % (i + 4) == 0:\n            return False\n    return True\n",
        "num_ids": 134
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    if n < 2:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5+1), 2):\n            if n % i == 0:\n                return False\n    return True\n",
        "num_ids": 86
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1 or n == 0:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 72
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    xs = [coeff for coeff in xs if coeff!= 0]\n    if len(xs) % 2 == 1:\n        return None\n    return poly(xs, -1) / poly(xs, 1)\n",
        "num_ids": 54
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert len(xs) % 2 == 0\n",
        "num_ids": 12
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert(len(xs) % 2 == 0)\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            return i/2\n",
        "num_ids": 44
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for x in range(len(xs)):\n        if xs[x]!= 0:\n            return x\n    raise Exception('Zero does not exist!')\n",
        "num_ids": 40
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = len(xs)\n    if n % 2 == 1:\n        print(f'{n} is not an even number of coefficients')\n        return\n    if xs[0]!= 0:\n        return\n    for i in range(n // 2):\n        xs[i], xs[-(i + 1)] = xs[-(i + 1)], xs[i]\n    for i in range(n // 2 - 1, 0, -1):\n        xs[i] /= xs[i - 1]\n        xs[i - 1] = 0\n        for j in range(i - 1, -1, -1):\n            xs[j] = xs[j] * xs[i] + xs[j + 1]\n        xs[0] = 1\n    for i in range(n // 2 - 1, -1, -1):\n        if xs[i]!= 0:\n            return xs[i]\n",
        "num_ids": 226
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(xs)):\n        if xs[i]!= 0:\n            return xs[i] / xs[i - 1]\n",
        "num_ids": 41
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # example: [1, 2, 3, -1]\n    for i, _ in enumerate(xs):\n        if xs[i]!= 0:\n            break\n    else:\n        # no x found, return 0\n        return 0\n    # now, the first x can be found\n    # find coefficients of x^2 - 2x + 1\n    xs2 = [x * x for x in xs]\n    xs2[0] = 1\n    a = xs2[0]\n    b = xs2[1] - 2 * xs[0]\n    c = xs2[2] - 2 * xs[1] + xs[0]\n    for i in range(2, len(xs)):\n        a = xs2[i] - 2 * xs[i-1] + xs2[i-2]\n        b = 2 * xs2[i-1] - 4 * xs[i-1] + xs2[i-2]\n        c = xs2[i-1] - 2 * xs[i-2] + xs2[i]\n    # find x\n    for i in range(len(xs)):\n        if a * i * i + b * i + c == 0:\n            return i\n",
        "num_ids": 304
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # we can only take list of coeffs having even number of coeffs\n    # and largest non zero coeff as it guarantees solution\n    xs = list(xs)\n    xs.sort()\n    xs.reverse()\n    if len(xs) % 2!= 0:\n        return None\n    i = 0\n    j = len(xs) - 1\n    while i < j:\n        s = xs[i] + xs[j]\n        if s!= 0:\n            j -= 1\n        else:\n            i += 1\n    return (xs[i] + xs[j]) / 2\n",
        "num_ids": 145
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for x in range(len(xs)):\n        if xs[x]!= 0:\n            return -(x - (len(xs) // 2)) / xs[x]\n",
        "num_ids": 46
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(xs)):\n        if xs[i] == 0:\n            return i\n    return None\n",
        "num_ids": 32
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    list2 = []\n    for i in l:\n        if i % 3 == 0:\n            list2.append(i)\n    list2 = sorted(list2)\n    for i in range(len(l)):\n        if i % 3!= 0:\n            list2.append(l[i])\n    return list2\n    \nprint(sort_third([1, 2, 3]))\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))",
        "num_ids": 117
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(l) < 3:\n        return l\n    else:\n        i = 0\n        while i < len(l) - 1:\n            if l[i] % 3!= 0:\n                for j in range(i + 1, len(l)):\n                    if l[i] % 3 == 0 and l[j] % 3 == 0:\n                        if l[i] < l[j]:\n                            l[i], l[j] = l[j], l[i]\n                i += 1\n            else:\n                i += 1\n    return l",
        "num_ids": 134
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    x = sorted([i for i in l if i % 3!= 0])\n    y = sorted([i for i in l if i % 3 == 0])\n    return x + y\n",
        "num_ids": 44
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(l, key=lambda i: i if i % 3 else i * -1)\n",
        "num_ids": 24
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sorted_l = []\n    not_div_3 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            not_div_3.append(l[i])\n    sorted_l.append(sorted(not_div_3))\n    for i in range(len(l)):\n        if i % 3!= 0:\n            sorted_l.append(l[i])\n    return sorted_l\n",
        "num_ids": 112
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Creating a list l2.\n    l2 = l[:]\n    # Creating a list not_divisible_by_three.\n    not_divisible_by_three = []\n    # Creating a list divisible_by_three.\n    divisible_by_three = []\n    # Iterating over l2 and appending its values to not_divisible_by_three if their values are not divisible by 3.\n    for i in range(len(l2)):\n        if l2[i] % 3!= 0:\n            not_divisible_by_three.append(l2[i])\n    # Sorting not_divisible_by_three.\n    not_divisible_by_three.sort()\n    # Appending the values of the not_divisible_by_three to divisible_by_three.\n    for i in not_divisible_by_three:\n        divisible_by_three.append(i)\n    # Returns the divisible_by_three.\n    return divisible_by_three\n",
        "num_ids": 245
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l_copy = l.copy()\n    l_copy_copy = l_copy.copy()\n    for i in range(len(l_copy)):\n        if i % 3 == 0:\n            l_copy.remove(l_copy[i])\n            l_copy_copy.remove(l_copy_copy[i])\n    l_copy.sort()\n    l_copy_copy.sort()\n    for i in range(len(l_copy)):\n        l.remove(l[i])\n        l.remove(l_copy_copy[i])\n    return l\n",
        "num_ids": 140
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # TODO: Implement this function.\n    l_copy = l[:]\n    result = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            result.append(l_copy[i])\n    for i in range(len(result)):\n        for j in range(len(result)):\n            if result[i] < result[j]:\n                result[i], result[j] = result[j], result[i]\n    return result\n    \n",
        "num_ids": 120
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted([i for i in l if i%3!= 0], key=lambda x: x) + sorted([i for i in l if i%3 == 0], key=lambda x: x)\n",
        "num_ids": 48
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(l)):\n        if i%3!= 0:\n            l[i], l[i%3] = l[i%3], l[i]\n    return l\n",
        "num_ids": 50
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n",
        "num_ids": 29
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n",
        "num_ids": 39
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    l = sorted(list(set(l)))\n    return l\n",
        "num_ids": 17
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l = sorted(set(l))\n    return l\n",
        "num_ids": 15
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s = set(l)\n    return sorted(s)\n",
        "num_ids": 16
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(l) == 0:\n        return None\n    max_value = l[0]\n    for i in range(1,len(l)):\n        if l[i] > max_value:\n            max_value = l[i]\n    return max_value\n",
        "num_ids": 67
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    max_ = l[0]\n    for i in l:\n        if i > max_:\n            max_ = i\n    return max_\n",
        "num_ids": 36
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not l:\n        return None\n    max_ele = l[0]\n    for i in l:\n        if i > max_ele:\n            max_ele = i\n    return max_ele\n",
        "num_ids": 50
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(l) == 0:\n        return 0\n    \n    max = l[0]\n    for num in l:\n        if num > max:\n            max = num\n    return max\n",
        "num_ids": 48
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Get length of the list\n    # Create variable to hold the highest element\n    # Initialize variable with the first element in the list\n    # Loop through the list\n    # Compare the current element to the variable\n    # Set the variable as the current element if it is higher\n    # Return the variable\n    highest = l[0]\n    for element in l:\n        if element > highest:\n            highest = element\n    return highest\n",
        "num_ids": 100
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(l) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    maximum = l[0]\n    for i in range(1, len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum\n",
        "num_ids": 45
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return fizz_buzz_helper(n, 7, 13)\n",
        "num_ids": 19
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(1,n):\n        if not (i % 11 == 0 or i % 13 == 0):\n            continue\n        if i % 11 == 0 and i % 13 == 0:\n            count += 1\n            continue\n        if i % 11 == 0:\n            count += 1\n        if i % 13 == 0:\n            count += 1\n        else:\n            continue\n    return count\n",
        "num_ids": 99
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum(count_n(x) for x in range(1, n+1) if count_n(x) == 1)\n",
        "num_ids": 33
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n            if count == 1:\n                print(i)\n            else:\n                print(count, i)\n",
        "num_ids": 64
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(1, n):\n        if not i % 11:\n            if not i % 13:\n                count += 1\n        elif not i % 7:\n            count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum(1 for i in range(1, n) if i % 11 == 7 or i % 13 == 7)\n",
        "num_ids": 29
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(n):\n        if i % 7 == 0 or i % 13 == 0:\n            if i % 7 == 0:\n                count += 1\n            elif i % 13 == 0:\n                count += 2\n        else:\n            count += 1\n    return count\n",
        "num_ids": 72
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 7 or i % 13 == 7:\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    counter = 0\n    for x in range(1, n + 1):\n        if x % 3 == 0:\n            if x % 5 == 0:\n                counter += 1\n        elif x % 7 == 0:\n            counter += 1\n    return counter\n",
        "num_ids": 61
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum([1 for x in range(n) if x%7==0 or x%11==0 or x%13==0])\n",
        "num_ids": 33
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    l = sorted(l)\n    for i in range(len(l)):\n        if (i % 2!= 0):\n            l[i], l[i - 1] = l[i - 1], l[i]\n    return l\n",
        "num_ids": 59
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l_new = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_new.append(l[i])\n    for i in range(len(l)):\n        if i % 2!= 0:\n            l_new.append(l[i])\n    return sorted(l_new)\n",
        "num_ids": 84
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    evens = []\n    for i in range(0, len(l), 2):\n        evens.append(l[i])\n    for i in range(1, len(l), 2):\n        evens.append(l[i])\n    return evens\n",
        "num_ids": 64
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    l_copy = l[:]\n    even = []\n    odd = []\n",
        "num_ids": 22
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert isinstance(l, list), 'l is not a list'\n    assert len(l) > 0, 'l is empty'\n    # fill this in\n    even_indicies = 0\n    while even_indicies < len(l):\n        if even_indicies == len(l)-1:\n            break\n        elif l[even_indicies]%2 == 0:\n            l[even_indicies], l[even_indicies+1] = l[even_indicies+1], l[even_indicies]\n            even_indicies += 2\n        else:\n            even_indicies += 1\n",
        "num_ids": 157
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    even_indicies = []\n    for i in range(0, len(l)):\n        if i % 2 == 0:\n            even_indicies.append(l[i])\n    sorted_even_indicies = sorted(even_indicies)\n    for i in range(0, len(sorted_even_indicies)):\n        l[i] = sorted_even_indicies[i]\n    return l\n",
        "num_ids": 108
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    l2.sort()\n    return l2\n",
        "num_ids": 66
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    even = []\n    odd = []\n    for i, elem in enumerate(l):\n        if i % 2 == 0:\n            even.append(elem)\n        else:\n            odd.append(elem)\n    return even + sorted(odd)\n",
        "num_ids": 64
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l_even = []\n    for i in range(0,len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n    l_even.sort()\n    l[0:0]=l_even\n    return l\n",
        "num_ids": 66
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Implement your solution here\n    even_indices = [x for x in range(len(l)) if x % 2 == 0]\n    return(sorted(even_indices, key=lambda x: l[x]))\n",
        "num_ids": 55
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1] + group[2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 113
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[0] + group[1] + group[2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 105
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return encode_cyclic(s[::-1])\n",
        "num_ids": 15
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return encode_cyclic(s)[::-1]",
        "num_ids": 14
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return encode_cyclic(s)\n",
        "num_ids": 11
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return encode_cyclic(s)\n",
        "num_ids": 11
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert (len(s) % 3) == 0\n    return encode_cyclic(s[:-len(s) % 3])",
        "num_ids": 31
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # remove odd elements from every group and add to the first group.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range(len(s) // 3)]\n    groups = [group[1:] if len(group) == 3 else group for group in groups]\n    groups = [\"\".join([group[0], group[1], group[2]]) for group in groups]\n    # return the cycle result of the groups.\n    return \"\".join(groups)\n",
        "num_ids": 123
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    a, b, c = 0, 1, 1\n    if n < 0:\n        raise ValueError(\"n must be nonnegative\")\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(n - 1):\n            a, b, c = b, c, a + b + c\n    return a + b + c\n",
        "num_ids": 97
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    a, b = 1, 2\n    while n > 0:\n        r = a + b\n        a, b = b, r\n        n -= 1\n    return r\n",
        "num_ids": 42
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 2:\n        return 2\n    else:\n        return (prime_fib(n-1) + prime_fib(n-2))\n",
        "num_ids": 39
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return n\n    else:\n        n1 = 1\n        n2 = 2\n        for _ in range(2, n):\n            number = n1 + n2\n            if is_prime(number):\n                return number\n            else:\n                n1 = n2\n                n2 = number\n",
        "num_ids": 78
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n > 0, \"n must be positive\"\n",
        "num_ids": 14
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    f = 0\n    s = 1\n    for _ in range(2, n):\n        s += f\n        f = s - f\n        if is_prime(f) == True:\n            return f\n",
        "num_ids": 50
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n",
        "num_ids": 50
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert n > 0\n    p = 2\n    f = 3\n    k = 2\n    while k <= n:\n        p, f = f, f + p\n        k += 1\n    return f\n",
        "num_ids": 49
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "num_ids": 50
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    fib_n_1 = 1\n    fib_n_2 = 2\n    i = 1\n    while i < n:\n        i += 1\n        fib_n_3 = fib_n_1 + fib_n_2\n        fib_n_1 = fib_n_2\n        fib_n_2 = fib_n_3\n    return fib_n_3\n",
        "num_ids": 116
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # O(n^2) time | O(n) space\n    if len(l) < 3:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #time complexity O(n)\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if -l[i]-l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l.sort()\n    for i in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n            return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum_triples = 0\n    distinct_elements = 0\n    for i in range(len(l)):\n        if l[i] == 0:\n            sum_triples = sum_triples + l[i]\n            if i < len(l)-1:\n                if l[i+1] == l[i]:\n                    distinct_elements = distinct_elements + 1\n        elif l[i] == 0:\n            return True\n        else:\n            return False\n    if distinct_elements > 1:\n        return False\n    elif sum_triples == 0:\n        return True\n    else:\n        return False\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(",
        "num_ids": 181
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # l = l.sort()\n    l_set = set(l)\n    n = len(l_set)\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 99
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # TODO\n    count = 0\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            if sum(l[i:j+1]) == 0:\n                count += 1\n    if count == 2:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 83
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not l:\n        return False\n",
        "num_ids": 11
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # your code here\n    return\n",
        "num_ids": 10
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n_collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if (i+1) == (j+1) or (i-1) == (j-1):\n                    n_collisions += 1\n    return n_collisions\n",
        "num_ids": 76
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    left = 0\n    right = 0\n    \n    for i in range(n):\n        left += 1\n        right -= 1\n        while left >= right:\n            #print(f\"left: {left}, right: {right}\")\n            if left == 0 and right == 0:\n                continue\n            right += 1\n        #print(f\"left: {left}, right: {right}\")\n        if left > 0:\n            left -= 1\n        if right > 0:\n            right -= 1\n    return left + right\n",
        "num_ids": 124
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    raise NotImplementedError\n    \nif __name__ == '__main__':\n    with open('car_race.txt') as f:\n        num_cases = int(f.readline())\n        for i in range(num_cases):\n            print(car_race_collision(int(f.readline())))",
        "num_ids": 78
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    total_cars = n\n    seen = set()\n    \n    while total_cars > 0:\n        n = len(seen)\n        if n in seen:\n            return True\n        seen.add(n)\n        for i in range(n):\n            total_cars -= 1\n            if total_cars <= 0:\n                return False\n            seen.add(i)\n    \n    return False\n",
        "num_ids": 95
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for _ in range(n):\n        count += car_race_collision_dfs(0, n)\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    l = copy(l)\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 33
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return l[:]\n",
        "num_ids": 7
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [x + 1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    i = 0\n    while i < len(l):\n        l[i] += 1\n        i += 1\n    return l\n",
        "num_ids": 32
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [i + 1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [i + 1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [i + 1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [x + 1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for a in range(len(l)-1):\n        for b in range(a + 1, len(l)):\n            if l[a] + l[b] == 0:\n                return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(0, len(l)):\n        if (l[i] + l[i + 1]) == 0:\n            return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j]==0:\n                return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            if (l[i] + l[j]) == 0:\n                sum += 1\n    if sum > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 76
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] + l[i + 1] == 0:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    set_sum = set()\n    for i in l:\n        if i not in set_sum:\n            set_sum.add(i)\n        else:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # if there are two entries with the same value, the sum will be zero.\n    # check if there are two entries with the same value.\n    # add the entry with the same value to a dictionary.\n    # check the dictionary, if it has a value of zero, then return true\n    # else return false.\n    if len(l) < 2:\n        return False\n",
        "num_ids": 87
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    set_l = set(l)\n    for i in l:\n        if (i + i) in set_l:\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in l:\n        for j in l:\n            if i + j == 0:\n                return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if x >= 10:\n        x = change_base(x//base, base)\n        x += 10*(x%base)\n    return str(x)\n",
        "num_ids": 40
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if x < 10:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n",
        "num_ids": 39
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # result = 0\n    # while x > 0:\n    #     result = result * 10 + x % base\n    #     x //= 10\n    # return str(result)\n    return f\"{x:b}\"\n",
        "num_ids": 54
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if x < base:\n        return str(x)\n    return change_base(x // base, base) + str(x % base)\n",
        "num_ids": 35
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = ''\n    while x >= base:\n        res += str(x%base)\n        x //= base\n    return res + str(x)\n",
        "num_ids": 38
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    string = ''\n    while x > 0:\n        x, d = divmod(x, base)\n        string = f'{d}' + string\n    return string\n",
        "num_ids": 42
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    convert = f'{x:b}'\n    if len(convert)!= len(str(x)):\n        raise ValueError('conversion error')\n    return f'{convert.replace(\"0\", \"\").rjust(len(str(x)), \"0\")}'\n",
        "num_ids": 69
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return str(x) if x < 10 else change_base(x//base, base) + str(x % base)\n",
        "num_ids": 30
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert base < 10\n    assert x >= 0\n",
        "num_ids": 13
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    string = str(x)\n    if base > 10:\n        return \"\"\n    if base < 2:\n        return string\n    else:\n        return change_base(int(string, base), base-1)\n",
        "num_ids": 52
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return (a*h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #Area is half of the hypotenuse times the adjacent side\n    return (0.5 * a * h)\n",
        "num_ids": 28
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return a*h/2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Area = (5 * h)/2\n    area = (a * h) / 2\n    return area\n",
        "num_ids": 27
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    area = a * h / 2\n    return area\n",
        "num_ids": 14
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return 0.5 * a * h\n    \n",
        "num_ids": 13
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 46
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert n >= 0\n    if n <= 1:\n        return n\n    n0, n1 = 0, 1\n    for i in range(n - 1):\n        n0, n1 = n1, n0 + n1\n    return n1\n",
        "num_ids": 61
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n <= 2:\n        return n\n",
        "num_ids": 12
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 74
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n < 0:\n        raise ValueError(\"Input must be positive integer\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 105
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert(n >= 0)\n    if n <= 2:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 58
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 3:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "num_ids": 49
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n < 2:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "num_ids": 50
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 74
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 79
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sorted_list = sorted(l)\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[len(sorted_list) // 2] + sorted_list[len(sorted_list) // 2 - 1]) / 2\n    else:\n        return sorted_list[len(sorted_list) // 2]\n",
        "num_ids": 86
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if l is None or len(l) == 0:\n        raise ValueError(\"Empty list\")\n    if len(l) == 1:\n        return l[0]\n    n = len(l)\n    half = n // 2\n    if n % 2 == 1:\n        return sorted(l)[half]\n    else:\n        return (sorted(l)[half-1] + sorted(l)[half]) / 2\n",
        "num_ids": 100
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(l)[len(l) // 2]\n",
        "num_ids": 15
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    median = 0\n    start, end = 0, len(l)\n    while start <= end:\n        middle = start + (end-start)//2\n        if l[middle] == 0:\n            median = l[middle]\n            break\n        if l[middle] < l[middle - 1]:\n            median = l[middle]\n            break\n        elif l[middle] > l[middle + 1]:\n            median = l[middle + 1]\n            break\n        elif l[middle] < l[middle + 1]:\n            median = l[middle]\n            break\n        start += 1\n        end -= 1\n    return median\n",
        "num_ids": 157
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    l.sort()\n    n = len(l)\n    if n == 0:\n        raise ValueError(\"Empty list\")\n    if n & 1:\n        return l[n//2]\n    else:\n        return (l[n//2] + l[n//2 - 1]) / 2\n",
        "num_ids": 72
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    l.sort()\n    if len(l) % 2:\n        return l[len(l)//2]\n    else:\n        return sum(l[len(l)//2-1:len(l)//2+1])/2\n",
        "num_ids": 60
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l = sorted(l)\n    middle_position = int(len(l) / 2)\n    if len(l) % 2 == 0:\n        return (l[middle_position - 1] + l[middle_position]) / 2\n    else:\n        return l[middle_position]\n",
        "num_ids": 70
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n",
        "num_ids": 64
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[(len(l) - 1) // 2] + l[(len(l) // 2)]) / 2\n    else:\n        return l[(len(l) - 1) // 2]\n",
        "num_ids": 70
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not l:\n        raise ValueError(\"List cannot have zero elements\")\n    l.sort()\n    k = len(l)\n    if k % 2 == 1:\n        return l[k // 2]\n    else:\n        return (l[k // 2] + l[k // 2 - 1]) / 2\n",
        "num_ids": 76
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    if text == '':\n        return True\n    \n    text = text.lower()\n    text = text.replace(\" \", \"\")\n    text = text.replace(\".\", \"\")\n    text = text.replace(\",\", \"\")\n    text = text.replace(\"!\", \"\")\n    text = text.replace(\"-\", \"\")\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"?\", \"\")\n    \n    if text == text[::-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 129
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(text) == 0 or len(text) == 1:\n        return True\n",
        "num_ids": 22
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if text == '':\n        return True\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def is_palindrome_helper(text, low_index, high_index):\n        if low_index == high_index:\n            return True\n        if text[low_index]!= text[high_index]:\n            return False\n        return is_palindrome_helper(text, low_index + 1, high_index - 1)\n",
        "num_ids": 85
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not text:\n        return True\n",
        "num_ids": 11
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(len(text)):\n        if text[i]!= text[len(text)-i-1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    reverse = text[::-1]\n    if text == reverse:\n        return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if text == '':\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 1\n    elif n < 0:\n        n = p - n\n    return ((n * pow(n, p - 2, p)) % p)\n",
        "num_ids": 46
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    x = 1\n    for i in range(n):\n        x = (x * x) % p\n    return x\n",
        "num_ids": 30
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return (p + n - 1) % p\n",
        "num_ids": 13
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (n % p) if n < p else n // p\n",
        "num_ids": 17
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    res = 1\n    while n > 0:\n        if n % 2 == 1:\n            res = (res * p) % p\n        n //= 2\n    return res\n",
        "num_ids": 43
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert n >= 0, \"Input must be nonnegative\"\n    assert p >= 1, \"Input must be prime\"\n    if n == 0:\n        return 0\n    else:\n        return pow(p, n, p)\n",
        "num_ids": 54
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (pow(p, n, p) - 1) % p\n",
        "num_ids": 19
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 0 and p == 1:\n        return 1\n    if p == 1:\n        return 0\n    if n >= p:\n        return modp(n, p - 1)\n    return n % p\n",
        "num_ids": 52
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "num_ids": 35
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        if text.find(vowel)!= -1:\n            text = text.replace(vowel, \"\")\n    return text\n",
        "num_ids": 56
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    new_text = ''\n    for i in range(len(text)):\n        if not text[i] in 'aeiouAEIOU':\n            new_text += text[i]\n    return new_text\n",
        "num_ids": 53
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for v in vowels:\n        text = text.replace(v, '')\n    return text\n",
        "num_ids": 61
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    out = \"\"\n    for i in text:\n        if i not in \"aeiouAEIOU\":\n            out += i\n    return out\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return ''.join([ch for ch in text if ch not in \"aeiouAEIOU\"])\n",
        "num_ids": 26
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    vowels = \"aeiouAEIOU\"\n    return \"\".join(i for i in text if i not in vowels)\n",
        "num_ids": 34
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    vowels = 'aeiouAEIOU'\n    res = \"\"\n    for x in text:\n        if x not in vowels:\n            res += x\n    return res\n",
        "num_ids": 45
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    vowels = 'aeiouAEIOU'\n    return ''.join(l for l in text if l.lower() not in vowels)\n",
        "num_ids": 37
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"\".join([s for s in text if s.lower() not in \"aeiou\"])\n",
        "num_ids": 26
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n    \ndef remove_empty_lines(filepath):\n    \"\"\"\n    remove_empty_lines is a function that takes a filepath and returns the filepath without empty lines.\n    >>> remove_empty_lines('')\n    ''\n    >>> remove_empty_lines(\"foo\")\n    'foo'\n    >>> remove_empty_lines(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\")\n    ''\n    >>> remove_empty_lines(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\")\n    '\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\n    \"\"\"\n    with open(filepath) as file_obj:\n        text = file_obj.read()\n    lines = text.split('\\n')\n    for line in lines:\n        if line == '':\n            lines.remove(line)\n    return '\\n'.join(lines)\n    \ndef swap_case(text):\n    \"\"\"\n    swap_case is a function that takes a string and returns the same string but in lowercase, then uppercase.\n    >>> swap_case('')\n    ''\n    >>> swap_case(\"abc\")\n    'abc'\n    >>> swap_case(\"ABCD\")\n    'ABCD'\n    >>> swap_case(\"ABCD\\nABC\")\n    'ABCD\\nABC'\n    >>> swap_case(\"ABCD\\nABcD\")\n    'ABCD\\nABcD'\n    >>> swap_case(\"ABCD\\nABcD\\nABC\")\n    'ABCD\\nABCD\\nABC'\n    >>> swap_case(\"ABCD\\nABcD\\nABC\")\n    'ABCD\\nABCD\\nABC'\n    \"\"\"\n    return text.swapcase()\n    \ndef join_strings(*args):\n    \"\"\"\n    join_strings is a function that takes a series of strings and joins them together.\n    >>> join_strings('')\n    ''\n    >>> join_strings('ABC')\n    'ABC'\n    >>> join_strings('ABC', 'DEF')\n    'ABCDEF'\n    >>> join_strings('ABC', 'DEF', 'GHI')\n    'ABCDEFGHI'\n    >>> join_strings('ABCDEFGHI', 'KLM', 'NOP')\n    'ABCDEFGHILMNOP'\n    \"\"\"\n    result = ''\n    for arg in args:\n        result = result + arg\n    return result\n    \ndef invert_dictionary(dictionary):\n    \"\"\"\n    invert_dictionary is a function that takes a dictionary and returns the opposite dictionary.\n    >>> invert_dictionary({})\n    {}\n    >>> invert_dictionary({\"foo\": \"bar\", \"foo\": \"baz\", \"bar\": \"foo\"})\n    {'bar': 'foo', 'baz': 'foo'}\n    >>> invert_dictionary({\"foo\": \"bar\", \"foo\": \"baz\", \"bar\": \"foo\"})\n    {'bar': 'foo', 'baz': 'foo'}\n    \"\"\"\n    inverted_dictionary = {}\n    for key, value in dictionary.items():\n        if value in inverted_dictionary:\n            inverted_dictionary[value].append(key)\n        else:\n            inverted_dictionary[value] = [key]\n    return inverted_dictionary\n    \ndef is_palindrome(text):\n    \"\"\"\n    is_palindrome is a function that takes a string and returns True if it is a palindrome, otherwise False.\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('ABC')\n    True\n    >>> is_palindrome('ABCD')\n    True\n    >>> is_palindrome('ABCDCCCC')\n    True\n    >>> is_palindrome('ABCDCCCCCC')\n    True\n    >>> is_palindrome('ABCDCCCCCC')\n    True\n    >>> is_palindrome('ABCDCCDDCCCC')\n    False\n    >>> is_palindrome('ABCDCCDDDDCCCCDDDDDDDDDDDDDDD",
        "num_ids": 1024
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for x in l:\n        if x <= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for n in l:\n        if n >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return all(x <= t for x in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(0, len(l)):\n        if l[i] >= t:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return all(x < t for x in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for e in l:\n        if e > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return x + y\n    \ndef add_many(*args: int):\n    \"\"\"Add a series of numbers\n",
        "num_ids": 27
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return all(s0.count(ch) == s1.count(ch) for ch in s0)\n",
        "num_ids": 27
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return all(a == b for a, b in zip(s0, s1))\n",
        "num_ids": 22
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for c in s0:\n        if c in s1:\n            count += 1\n    if count == len(s0):\n        return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return all(c == s1[i] or s1[i] =='' or s1[i] == '\\t' for i, c in enumerate(s0))\n",
        "num_ids": 43
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return True if len(s0) == len(s1) and len(s0) > 0 and len(set(s0)) == len(set(s1)) else False\n",
        "num_ids": 43
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return all(ch in set(s0) for ch in set(s1))\n",
        "num_ids": 21
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    else:\n        for i in range(len(s0)):\n            if s0[i] == s1[i]:\n                continue\n            else:\n                return False\n        return True\n",
        "num_ids": 65
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return set(s0) == set(s1)\n",
        "num_ids": 15
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 36
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert n >= 0, 'n must be >= 0'\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 46
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 36
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-2) + fib(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return n\n    return fib(n - 2) + fib(n - 1)\n",
        "num_ids": 28
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            if char!= stack.pop():\n                return False\n    return len(stack) == 0\n",
        "num_ids": 65
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    index = 0\n    while index < len(brackets):\n        if brackets[index] == \"<\":\n            if index + 1 < len(brackets) and brackets[index + 1] == \">\":\n                index += 2\n            elif index + 2 < len(brackets) and brackets[index + 2] == \"<\":\n                index += 3\n            else:\n                return False\n        elif brackets[index] == \">\":\n            if index + 1 < len(brackets) and brackets[index + 1] == \"<\":\n                index += 2\n            elif index + 2 < len(brackets) and brackets[index + 2] == \">\":\n                index += 3\n            else:\n                return False\n        else:\n            index += 1\n    return True\n",
        "num_ids": 179
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    stack = []\n    for i in brackets:\n        if i == \"<\":\n            stack.append(i)\n        elif i == \">\":\n            if not stack:\n                return False\n            if stack[-1] == \"<\":\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    return True\n",
        "num_ids": 85
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if brackets == '':\n        return True\n",
        "num_ids": 12
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    length = len(brackets)\n    closing_brackets = {\")\":\"(\", \"]\":\"[\", \">\":\"<\"}\n    match = {\")\":\"(\", \"]\":\"[\", \">\":\"<\"}\n    opening_brackets = {\"(\":\")\", \"[\":\"]\", \"<\":\">\"}\n",
        "num_ids": 71
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            count += 1\n        if brackets[i] == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "num_ids": 67
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #print(brackets)\n    i = 0\n    while i < len(brackets):\n        if brackets[i]!= \"<\":\n            i += 1\n            continue\n        #print(\"i at \", i)\n        j = i + 1\n        while j < len(brackets) and brackets[j]!= \">\":\n            #print(brackets[j])\n            j += 1\n        #print(j)\n        if j == len(brackets):\n            return False\n        if j - i < 2:\n            i = j\n            continue\n        #print(\"j - i \", j - i)\n        if brackets[i+1] == \">\" and brackets[j-1] == \"<\":\n            i += 1\n            continue\n        return False\n    return True\n",
        "num_ids": 184
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    open_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            open_brackets += 1\n        elif char == \">\":\n            open_brackets -= 1\n",
        "num_ids": 48
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if len(stack) == 0:\n                return False\n            if stack.pop()!= b:\n                return False\n    return len(stack) == 0\n",
        "num_ids": 75
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert l, \"List cannot be empty\"\n    start = l[0]\n    for i in range(len(l)):\n        if start > l[i]:\n            return False\n        start = l[i]\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not l:\n        return False\n",
        "num_ids": 11
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return all(i >= j for i, j in zip(l, l[1:])) or all(i <= j for i, j in zip(l, l[1:]))\n",
        "num_ids": 43
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    cur = 1\n    prev = l[0]\n    for i in l[1:]:\n        if i >= cur:\n            cur = i\n        elif prev <= i:\n            return False\n        else:\n            prev = i\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    prev = float(\"-inf\")\n    for x in l:\n        if prev > x:\n            return False\n        prev = x\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(1, len(l)):\n        if l[i - 1] > l[i]:\n            return False\n        elif l[i - 1] < l[i]:\n            return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    increase = 1\n    decrease = 0\n",
        "num_ids": 14
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(l)-1):\n        if l[i+1] <= l[i]:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    is_monotonic = True\n    for i in range(len(l) - 1):\n        if l[i + 1] < l[i]:\n            is_monotonic = False\n            break\n    return is_monotonic\n",
        "num_ids": 58
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    prev = None\n    for x in l:\n        if prev is None:\n            prev = x\n            continue\n        if x < prev:\n            return False\n        prev = x\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    l1 = sorted(l1)\n    l2 = sorted(l2)\n    i = 0\n    j = 0\n    common = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common\n",
        "num_ids": 122
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    x = set(l1).intersection(l2)\n    return sorted(list(x))\n",
        "num_ids": 25
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    d = {}\n",
        "num_ids": 6
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    x = set(l1)\n    y = set(l2)\n    z = (x & y)\n    return sorted(z)\n",
        "num_ids": 35
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(s1 & s2)\n",
        "num_ids": 32
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    l3 = []\n    for i in l1:\n        if i in l2 and i not in l3:\n            l3.append(i)\n    return sorted(l3)\n",
        "num_ids": 46
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l1_set = set(l1)\n    l2_set = set(l2)\n    inter = l1_set.intersection(l2_set)\n    return sorted(inter)\n",
        "num_ids": 49
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    c = []\n    for x in l1:\n        if x in l2:\n            c.append(x)\n    return sorted(c)\n",
        "num_ids": 37
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if is_prime(n):\n        return n\n    else:\n        return max(largest_prime_factor(n // 2), n)\n",
        "num_ids": 35
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    factors = []\n    while n!= 1:\n        prime = prime_factor(n)\n        if prime:\n            factors.append(prime)\n            n = n // prime\n    return max(factors)\n    \n",
        "num_ids": 58
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 1:\n        return n\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n",
        "num_ids": 48
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #find largest prime factor of n\n    for i in range(n-1, 1, -1):\n        if n % i == 0 and i > 1:\n            return i\n    # n is prime\n    return n\n",
        "num_ids": 53
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 1:\n        return n\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n",
        "num_ids": 36
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    i = 1\n    while i < n:\n        i = i + 1\n        if n % i == 0:\n            return i\n",
        "num_ids": 33
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    i = 2\n    while i <= n:\n        if n % i == 0:\n            n = n / i\n            if i!= n:\n                i = i + 1\n            else:\n                return i\n        else:\n            i = i + 1\n    return n\n",
        "num_ids": 67
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 1:\n        raise ValueError(\"n must be larger than 1\")\n    else:\n        i = 2\n        while i <= math.sqrt(n):\n            if n % i == 0:\n                if is_prime(i):\n                    return i\n                elif is_prime(n // i):\n                    return n // i\n            i += 1\n",
        "num_ids": 87
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            return factor\n        factor += 1\n    return n\n",
        "num_ids": 37
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n % 2 == 0:\n        return n\n    else:\n        while n % 2 == 0:\n            n /= 2\n        if n == 1:\n            return 1\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                n /= i\n            else:\n                i += 2\n        return n\n",
        "num_ids": 86
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(n for n in range(1, n + 1))\n",
        "num_ids": 18
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return n\n    return n + sum_to_n(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n += 1\n    total = 0\n    while n!= 0:\n        total += n\n        n -= 1\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    total = 0\n    for i in range(n + 1):\n        total += i\n    return total\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids": 52
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return n + sum_to_n(n-1)\n",
        "num_ids": 38
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = 0\n    for i in range(1, n + 1):\n        s += i\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # We are interested in the first and last elements of brackets.\n    # The first element will always be an opening bracket, the last a closing bracket.\n    # Check that the first element of brackets is an opening bracket, and the last is a closing bracket.\n    if not brackets:\n        return True\n    if brackets[0]!= \"(\":\n        return False\n    if brackets[-1]!= \")\":\n        return False\n    # Removing the opening and closing parentheses allows us to move along the string and\n    # keep the brackets balanced.\n    brackets = brackets[1:-1]\n    # We can now move along the string, keeping track of which brackets we have encountered.\n    # We will check that every opening bracket we have seen is a matching closing bracket.\n    # For example, \"(()\" is not valid because there is a single opening bracket and no closing brackets.\n    # That opening bracket will have been matched by a previous closing bracket in the stack.\n    # Thus, we will need to \"pop\" those open brackets off the stack to maintain\n    # balance, and check that each opening bracket is matched.\n    # We will then try to add another opening bracket to the stack, so we can see if the stack\n    # becomes balanced (i.e. each opening bracket has a corresponding closing bracket).\n    while brackets:\n        b = brackets[0]\n        brackets = brackets[1:]\n        # Check that the opening bracket is correct.\n        if b!= \"(\":\n            return False\n        # Add the opening bracket to the stack.\n        stack.append(b)\n        # Check the closing bracket that follows.\n        if len(stack) >= 2:\n            # Check that the opening bracket is paired with the closing bracket\n            # that follows.\n            b2 = stack.pop()\n            if b!= \"(\" or b2!= \")\":\n                return False\n    # The stack is balanced, so the string is correct.\n    return True\n",
        "num_ids": 446
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    balance = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            balance += 1\n        if brackets[i] == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n",
        "num_ids": 67
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Start with one opening bracket and increment for each closing bracket:\n    opening_brackets = 1\n    closing_brackets = 0\n    for c in brackets:\n        if c == '(':\n            opening_brackets += 1\n        else:\n            closing_brackets += 1\n        if opening_brackets == closing_brackets:\n            return True\n    return False\n",
        "num_ids": 89
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # brackets = list(brackets)\n    # for i,c in enumerate(brackets):\n    #     if c == \"(\":\n    #         if i < len(brackets) - 1 and brackets[i+1] == \")\":\n    #             brackets[i] = \"|\"\n    #     elif c == \"|\":\n    #         if i > 0 and brackets[i-1] == \"(\":\n    #             brackets[i] = \"(\"\n    #     brackets = \"\".join(brackets)\n    # print(brackets)\n    return not \"(\" in brackets or \"(\" not in brackets or brackets == \"()\"\n",
        "num_ids": 157
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    brackets_pairs = {\"(\":\")\", \"{\":\"}\", \"[\":\"]\"}\n    for opening, closing in brackets_pairs.items():\n        if not any(opening == b for b in brackets):\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # first count the number of opening brackets\n    open_brackets = 0\n    for char in brackets:\n        if char == '(':\n            open_brackets += 1\n        if char == ')':\n            open_brackets -= 1\n    # if there are mismatches in the opening brackets\n    # return False\n    return open_brackets == 0\n",
        "num_ids": 83
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # create a stack\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n",
        "num_ids": 59
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    bracket_dict = {'(': ')', ')': '('}\n    bracket_stack = []\n    for bracket in brackets:\n        if bracket in bracket_dict:\n            bracket_stack.append(bracket)\n        else:\n            if bracket == bracket_dict[bracket_stack.pop()]:\n                continue\n            else:\n                return False\n    return len(bracket_stack) == 0\n",
        "num_ids": 101
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    opens = []\n    closes = []\n",
        "num_ids": 12
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if brackets == '':\n        return True\n    stack = Stack()\n    for char in brackets:\n        if char == '(':\n            stack.push(char)\n        elif char == ')':\n            if stack.is_empty():\n                return False\n            else:\n                stack.pop()\n    return stack.is_empty()\n",
        "num_ids": 81
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    dxs = []\n    for i in range(len(xs) - 1):\n        dxs.append(xs[i] * (len(xs) - i - 1))\n    return dxs\n",
        "num_ids": 48
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    for x in range(len(xs)):\n        result.append(x * xs[x])\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(xs) < 1:\n        return []\n    if len(xs) == 1:\n        return [1]\n    dxs = []\n    dxs.append(xs[0])\n    for i in range(1, len(xs) - 1):\n        dxs.append(xs[i] * (i + 1))\n    dxs.append(xs[-1])\n    return dxs\n",
        "num_ids": 98
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    derivative = [0] * len(xs)\n    for i in range(len(xs)):\n        if i == 0:\n            continue\n        if i == len(xs) - 1:\n            derivative[i] = -xs[i]\n        else:\n            derivative[i] = xs[i + 1] * derivative[i]\n    return derivative\n",
        "num_ids": 92
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    xs[:] = xs[:] + [0]  # add zero to the beginning of list\n    return [x * i for i, x in enumerate(xs)]\n",
        "num_ids": 41
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # length of xs\n    x_len = len(xs)\n    # temp_delta\n    delta = []\n    # set up delta, will be appending values to it.\n    for i in range(x_len):\n        delta.append(0)\n    # for loop and appending of delta:\n    for i in range(x_len):\n        delta[i] = (xs[i] * x_len)\n    return delta\n",
        "num_ids": 110
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    x1 = xs[0]\n    x2 = xs[1]\n    x3 = xs[2]\n    x4 = xs[3]\n    x5 = xs[4]\n",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(len(xs)-1):\n        result.append(xs[i+1]*(i+2))\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    dxs = []\n    for i in range(len(xs)):\n        dxs.append(i)\n    for i in range(len(xs)):\n        if i == 0:\n            dxs[i] = xs[i+1]\n        elif i == len(xs) - 1:\n            dxs[i] = xs[i-1]\n        else:\n            dxs[i] = xs[i+1] - xs[i-1]\n    return dxs\n",
        "num_ids": 122
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    xs = np.array(xs)\n    return np.insert(xs[1:] - xs[:-1], 0, 1)\n",
        "num_ids": 33
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0 or n == 1:\n        return n\n    return fibfib(n-1) + fibfib(n-2)\n",
        "num_ids": 36
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 65
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0 or n == 1:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 45
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    f1 = 0\n    f2 = 1\n    f3 = 0\n    if n <= 1:\n        return n\n    for i in range(2, n):\n        f3 = f1 + f2\n        f1 = f2\n        f2 = f3\n    return f3\n",
        "num_ids": 70
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\n",
        "num_ids": 60
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 57
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def helper(n, fibfib_seq):\n        if n == 0:\n            return fibfib_seq[0]\n        if n == 1:\n            return fibfib_seq[1]\n        if n == 2:\n            return fibfib_seq[2]\n        fibfib_seq.append(helper(n - 1, fibfib_seq) + helper(n - 2, fibfib_seq))\n        return fibfib_seq[-1]\n    return helper(n, [0, 0, 1])\n",
        "num_ids": 131
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    vowels = 0\n    for c in s:\n        if c in \"aeiou\":\n            vowels += 1\n        else:\n            break\n    return vowels\n",
        "num_ids": 44
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n            count += 1\n        if i == (len(s) - 1) and s[i] == 'y':\n            count += 1\n    return count\n",
        "num_ids": 101
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return s.lower().count('a') + s.lower().count('e') + s.lower().count('i') + \\\n        s.lower().count('o') + s.lower().count('u') - \\\n        s.lower().count('y')\n",
        "num_ids": 63
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # a = ['a','e','i','o','u']\n    # for i in s:\n    #     if i in a:\n    #         return 1 + vowels_count(s[1:])\n    #     else:\n    #         return vowels_count(s[1:])\n",
        "num_ids": 72
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for ch in s:\n        if ch in \"aeiouy\":\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count\n",
        "num_ids": 91
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u')\n",
        "num_ids": 38
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    vowels = set(\"aeiouy\")\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n    \ndef main():\n    \"\"\"Given a string representing a word, return the number of vowels\n    in the word. Note that 'y' is also a vowel, but only when it is\n    at the end of the word.\n",
        "num_ids": 95
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in s:\n        if i in 'aeiouy':\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if shift > len(str(x)):\n        shift = len(str(x)) - shift\n    return str(x)[shift:] + str(x)[:shift]\n",
        "num_ids": 42
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if shift == 0:\n        return str(x)\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]",
        "num_ids": 36
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n",
        "num_ids": 24
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if shift > len(x):\n        return x[-shift:] + x[:-shift]\n    else:\n        return x[shift:] + x[:shift]\n",
        "num_ids": 41
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = len(str(x))\n    if shift > n:\n        x = str(x)[::-1]\n        shift = n - shift\n    result = int(x[shift:] + x[:shift])\n    return str(result)\n",
        "num_ids": 60
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # return str(x)\n    if shift > len(str(x)):\n        return reversed(str(x))\n    return str(x)[shift:] + str(x)[:shift]\n",
        "num_ids": 47
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if shift > len(str(x)):\n        return str(x)[-shift:] + str(x)[:-shift]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n",
        "num_ids": 52
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if shift >= len(x):\n        return x[-shift:] + x[:-shift]\n    else:\n        return x[-shift:] + x[:-shift]\n",
        "num_ids": 42
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    string = str(x)\n    return string[shift:] + string[:shift]\n",
        "num_ids": 22
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = 0\n    count = 0\n    while count < len(x):\n        result += int(x[count]) * 10**(len(x) - count - 1)\n        count += 1\n    result = str(result)[-shift:]\n    if len(result) == 0:\n        result = \"0\"\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum(ord(ch) for ch in s if ord(ch) >= 65 and ord(ch) <= 90)\n    \n    \ndef stringRemoval(s):\n    \"\"\"Task\n    Write a function that removes all spaces from a string and returns the result.\n",
        "num_ids": 62
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    num = 0\n    for i in s:\n        num += ord(i)\n    return num",
        "num_ids": 24
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum([ord(i) for i in s if i.isupper()])\n",
        "num_ids": 21
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s = s.upper()\n    sum = 0\n    for i in s:\n        sum += ord(i)\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in s:\n        if i.isalpha():\n            count += ord(i)\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sum = 0\n    for i in range(len(s)):\n        sum += ord(s[i])\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n",
        "num_ids": 20
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum(ord(ch) for ch in s if ch.isnumeric())\n",
        "num_ids": 21
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum([ord(c) for c in s.upper() if ord(c) < 256 and ord(c) > 47])\n",
        "num_ids": 32
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    mangos = 0\n    apples = 0\n    oranges = 0\n    for i in s:\n        if i == '0':\n            apples += 1\n        elif i == '1':\n            oranges += 1\n        elif i == '2':\n            mangos += 1\n    ans = n - apples - oranges - mangos\n    if ans == 0:\n        return 0\n    return ans\n",
        "num_ids": 99
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    fruit_dic = {\"apples\":0,\"oranges\":0,\"mangoes\":0}\n    \n    apple_num = s.split(\" \")[0]\n    orange_num = s.split(\" \")[1]\n    \n    if apple_num == \"0\" and orange_num == \"0\":\n        return 0\n        \n    elif apple_num == \"0\" and orange_num!= \"0\":\n        return int(orange_num) + fruit_dic[\"mangoes\"]\n        \n    elif apple_num!= \"0\" and orange_num == \"0\":\n        return int(apple_num) + fruit_dic[\"apples\"]\n        \n    else:\n        return int(apple_num) + int(orange_num) + fruit_dic[\"apples\"] + fruit_dic[\"oranges\"] + fruit_dic[\"mangoes\"]\n",
        "num_ids": 210
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return s.split(' and ')[0].split(' ')[0]\n",
        "num_ids": 19
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total_apples = 0\n    total_oranges = 0\n    for i in s:\n        if i == '0':\n            total_apples += 1\n        elif i == '1':\n            total_oranges += 1\n    return s.count('1') - (total_apples + total_oranges)\n",
        "num_ids": 78
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return s.count('m') - n * (s.count('a') + s.count('o') + s.count('m'))\n",
        "num_ids": 35
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #1\n    s = s.split()\n    if int(s[0])<0:\n        print('Try Again')\n        return\n    if int(s[1])<0:\n        print('Try Again')\n        return\n    #2\n    s = s[0]+s[1]\n    n = int(s)\n    #3\n    s = s.split(\" \")\n    if int(s[0])<0 or int(s[1])<0:\n        print('Try Again')\n        return\n    #4\n    s = s[0]+s[1]\n    s = int(s)\n    #5\n    return n-s\n",
        "num_ids": 160
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = n - (s.count('apples'))\n    n = n - (s.count('oranges'))\n    n = n - (s.count('mangos'))\n    return n\n    \n",
        "num_ids": 53
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    m = 0\n    n = s.count('m')\n    a = s.count('a')\n    o = s.count('o')\n    m = a + o + m\n    return m-n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1024
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count_a = 0\n    count_o = 0\n    count_m = 0\n    count_all = 0\n    count = 0\n    for i in s:\n        count_all += int(i)\n    s = s.split()\n    for i in range(len(s)):\n        if \"a\" in s[i]:\n            count_a += int(s[i])\n        if \"o\" in s[i]:\n            count_o += int(s[i])\n        if \"m\" in s[i]:\n            count_m += int(s[i])\n    count = count_a + count_o + count_m\n    if count_all - count == n:\n        return n\n    elif count_all - count > n:\n        return count_all - count\n    else:\n        return n\n        \n",
        "num_ids": 200
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #your code here\n    #count = 0\n    #s = list(s)\n    #for i in range(len(s)):\n    #    if s[i] == \"1\":\n    #        count += 1\n    #    elif s[i] == \"2\":\n    #        count += 2\n    #    elif s[i] == \"3\":\n    #        count += 3\n    #    elif s[i] == \"4\":\n    #        count += 4\n    #    elif s[i] == \"5\":\n    #        count += 5\n    #    elif s[i] == \"6\":\n    #        count += 6\n    #    elif s[i] == \"7\":\n    #        count += 7\n    #    elif s[i] == \"8\":\n    #        count += 8\n    #    elif s[i] == \"9\":\n    #        count += 9\n    #    elif s[i] == \"0\":\n    #        count += 10\n    #    else:\n    #        count += 11\n    #return count - n \n",
        "num_ids": 265
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    arr = sorted([n for n in arr if n % 2 == 0])\n    return arr[:1] if arr else []\n",
        "num_ids": 31
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n",
        "num_ids": 6
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # BFS\n    n = len(arr)\n    if not arr:\n        return []\n",
        "num_ids": 24
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return min_even(arr, lambda n: (n % 2 == 0))\n",
        "num_ids": 20
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Edge cases\n    if not arr:\n        return []\n    if len(arr) == 1:\n        return [0, 0]\n    if arr[0] == arr[1]:\n        return [arr[0], 0]\n",
        "num_ids": 56
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def get_even_values(nodes):\n        evens = []\n        for i in range(len(nodes)):\n            if nodes[i] % 2 == 0:\n                evens.append(nodes[i])\n        return evens\n",
        "num_ids": 61
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    smallest_even, smallest_even_index = None, None\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            if smallest_even is None or node < smallest_even:\n                smallest_even = node\n                smallest_even_index = i\n    \n    return [smallest_even, smallest_even_index] if smallest_even is not None else []\n",
        "num_ids": 97
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Nested function which returns the smallest even value from a given node\n    # The node that has the smallest even value in this function is returned\n    # as the answer\n    def f(node):\n        if node is None:\n            return float('-inf')\n        elif node.value % 2 == 0:\n            return node.value + f(node.left)\n        else:\n            return node.value + f(node.right)\n",
        "num_ids": 103
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    even_nums = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_nums.append(arr[i])\n",
        "num_ids": 46
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return -1\n    else:\n        max_freq = max(lst)\n        return max_freq if max_freq > 1 else -1",
        "num_ids": 49
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst) < 1:\n        return -1\n    \n    freq = 0\n    for i in lst:\n        if i > 0:\n            freq += 1\n    \n    if freq == 0:\n        return -1\n    \n    if freq < lst[0]:\n        return -1\n    \n    for i in range(1, len(lst)):\n        if lst[i] < 0:\n            return -1\n    \n    for i in range(0, len(lst)):\n        if lst[i] >= freq:\n            return lst[i]\n    return -1\n    \n    \nif __name__ == \"__main__\":\n    # Test 1\n    print(search([4, 1, 2, 2, 3, 1]))\n    \n    # Test 2\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n    \n    # Test 3\n    print(search([5, 5, 4, 4, 4])",
        "num_ids": 247
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    m = {}\n    for el in lst:\n        if el in m:\n            m[el] += 1\n        else:\n            m[el] = 1\n    a = max(m.keys(), key=lambda x: m[x])\n    b = m[a]\n    if a > 0 and b >= a:\n        return a\n    else:\n        return -1\n",
        "num_ids": 92
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if lst == []:\n        return -1\n    else:\n        for i in range(len(lst)-1):\n            if lst[i] >= 1:\n                for j in range(i+1, len(lst)):\n                    if lst[j] >= 1:\n                        if lst[j] > lst[i] and lst[j] > lst[i]*(j-i):\n                            return lst[j]\n",
        "num_ids": 111
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    counts = {}\n    max_val = -1\n    max_count = -1\n    for el in lst:\n        if el not in counts:\n            counts[el] = 1\n        else:\n            counts[el] += 1\n",
        "num_ids": 61
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s=0\n    c=0\n    max_int = -1\n    for i in lst:\n        if i>0:\n            s+=i\n            c+=1\n            if i>max_int:\n                max_int=i\n    return max_int if c>=s else -1\n",
        "num_ids": 74
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    freqs = {}\n    for item in lst:\n        if item in freqs:\n            freqs[item] += 1\n        else:\n            freqs[item] = 1\n",
        "num_ids": 45
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    i = 0\n    max_count = 0\n    max_int = 0\n    while i < len(lst):\n        count = lst.count(lst[i])\n        if count > max_count:\n            max_count = count\n            max_int = lst[i]\n        i += 1\n    return max_int if max_count >= 2 else -1\n",
        "num_ids": 91
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    for i in lst:\n        if i >= 1 and i > max(lst):\n            return i\n    return -1\n",
        "num_ids": 34
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max_val = -1\n    for val in lst:\n        if val > max_val and val > 0:\n            max_val = val\n",
        "num_ids": 37
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if lst == []:\n        return []\n",
        "num_ids": 13
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] > lst[1]:\n            return [lst[1], lst[0]]\n        else:\n            return lst\n    if len(lst) == 3:\n        if lst[0] > lst[1] and lst[0] > lst[2]:\n            return [lst[1], lst[0], lst[2]]\n        if lst[0] < lst[1] and lst[0] < lst[2]:\n            return [lst[2], lst[0], lst[1]]\n        if lst[1] > lst[2]:\n            return [lst[2], lst[0], lst[1]]\n        else:\n            return [lst[1], lst[0], lst[2]]\n    if len(lst) == 4:\n        if lst[0] > lst[1] and lst[0] > lst[2] and lst[0] > lst[3]:\n            return [lst[1], lst[0], lst[2], lst[3]]\n        if lst[0] < lst[1] and lst[0] < lst[2] and lst[0] < lst[3]:\n            return [lst[3], lst[0], lst[2], lst[1]]\n        if lst[1] > lst[2] and lst[1] > lst[3]:\n            return [lst[2], lst[1], lst[3], lst[0]]\n        if lst[1] < lst[2] and lst[1] < lst[3]:\n            return [lst[3], lst[1], lst[2], lst[0]]\n        if lst[2] > lst[3] and lst[2] > lst[0]:\n            return [lst[3], lst[2], lst[1], lst[0]]\n        if lst[2] < lst[3] and lst[2] < lst[0]:\n            return [lst[1], lst[2], lst[3], lst[0]]\n        if lst[3] > lst[0]:\n            return [lst[1], lst[3], lst[2], lst[0]]\n        else:\n            return [lst[1], lst[2], lst[3], lst[0]]\n    if len(lst) == 5:\n        if lst[0] > lst[1] and lst[0] > lst[2] and lst[0] > lst[3] and lst[0] > lst[4]:\n            return [lst[1], lst[0], lst[2], lst[3], lst[4]]\n        if lst[0] < lst[1] and lst[0] < lst[2] and lst[0] < lst[3] and lst[0] < lst[4]:\n            return [lst[4], lst[0], lst[2], lst[3], lst[1]]\n        if lst[1] > lst[2] and lst[1] > lst[3] and lst[1] > lst[4]:\n            return [lst[2], lst[1], lst[3], lst[4], lst[0]]\n        if lst[1] < lst[2] and lst[1] < lst[3] and lst[1] < lst[4]:\n            return [lst[4], lst[1], lst[2], lst[3], lst[0]]\n        if lst[2] > lst[3] and lst[2] > lst[4]:\n            return [lst[3], lst[2], lst[1], lst[4], lst[0]]\n        if lst[2] < lst[3] and lst[2] < lst[4]:\n            return ",
        "num_ids": 1025
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(lst, key=lambda x: (x, len(str(x))), reverse=True)\n",
        "num_ids": 28
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst_copy = lst[:]\n    if len(lst_copy) <= 1:\n        return lst_copy\n    else:\n        strange_sort_list(sorted(lst_copy, reverse=True))\n        for i in range(len(lst_copy) - 1):\n            if lst_copy[i] > lst_copy[i + 1]:\n                return lst_copy\n        return lst_copy",
        "num_ids": 107
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not lst:\n        return lst\n    if len(lst) == 1:\n        return lst\n    return strange_sort_list([x for x in lst if x < min(lst)]) + \\\n        [min(lst)] + \\\n        strange_sort_list([x for x in lst if x > max(lst)])\n",
        "num_ids": 89
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(lst, key=lambda x: x % 2 == 0)\n",
        "num_ids": 20
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # is it a normal array or just an empty one?\n    if lst:\n        # starting with the min value, sort the remaining and put them in the list\n        min_val = lst[0]\n        min_idx = 0\n        for idx in range(1, len(lst)):\n            if lst[idx] < min_val:\n                min_val = lst[idx]\n                min_idx = idx\n",
        "num_ids": 109
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    else:\n        return lst[-1] + strange_sort_list(lst[:-1])\n",
        "num_ids": 58
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not lst:\n        return lst\n    lst = lst[::-1]\n    lst = sorted(lst)\n    lst = lst[::-1]\n    return lst\n",
        "num_ids": 52
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # if list is empty\n    if len(lst) == 0:\n        return lst\n",
        "num_ids": 24
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round((a * b) * 0.5, 2)\n    else:\n        return -1\n        \nif __name__ == '__main__':\n    a = int(input(\"a: \"))\n    b = int(input(\"b: \"))\n    c = int(input(\"c: \"))\n    print(triangle_area(a, b, c)",
        "num_ids": 110
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return round((a + b + c)/2, 2)\n    #return (a + b + c)/2\n    #return sum([a,b,c]) / 2\n",
        "num_ids": 42
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    else:\n        return (a * b * 0.5) / 2\n",
        "num_ids": 39
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a > b + c or b > a + c or c > a + b:\n        return -1\n    p = (a + b + c) / 2\n    return round((math.sqrt(p * (p - a) * (p - b) * (p - c))), 2)\n",
        "num_ids": 72
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n",
        "num_ids": 75
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return (a * b * c) / 2\n    else:\n        return -1\n",
        "num_ids": 43
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        return round(((a*b*0.5)/2), 2)\n    else:\n        return -1\n",
        "num_ids": 49
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return 0.5 * (a + b + c)\n    return -1\n",
        "num_ids": 41
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Validate input\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    if a > b + c or b > a + c or c > a + b:\n        return -1\n    \n    # Calculate area\n    area = (a * b * c) / 2\n",
        "num_ids": 74
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # calculate the perimeter\n    perimeter = a + b + c\n    # calculate the area\n    area = 0.5 * perimeter * (perimeter - a) * (perimeter - b) * (perimeter - c)\n    # check if the area is valid\n    if area > 0:\n        return round(area, 2)\n    else:\n        return -1\n",
        "num_ids": 87
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if type(q)==list:\n        if len(q)==0:\n            return True\n        else:\n            if q[0]==q[-1]:\n                if sum(q)<=w and q[0]>=0:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n    else:\n        return False\n",
        "num_ids": 89
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return q in is_palindrome and sum(q) <= ",
        "num_ids": 17
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # write your function here\n    if q == []:\n        return True\n    if len(q) == 1:\n        return True\n    if q == [x for x in reversed(q)] and sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "num_ids": 67
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not(q or w):\n        return True\n    if not q and not w:\n        return True\n    if not w:\n        return False\n    if not q:\n        return True\n    if not is_palindromic(q):\n        return False\n    if sum(q) >= w:\n        return False\n    for i in range(len(q)-1):\n        if q[i] == q[i+1]:\n            continue\n        if (q[i] + q[i+1]) <= w:\n            return False\n    return True\n    \n",
        "num_ids": 136
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(q) == 1 and q[0] <= w:\n        return True\n    elif len(q) == 1 and q[0] > w:\n        return False\n    elif q == q[::-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #s = sum(q)\n    #if s <= w and s == str(s):\n    #    return True\n    #else:\n    #    return False\n",
        "num_ids": 41
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return q and q == q[::-1] and sum(q) <= w\n",
        "num_ids": 21
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if(len(q)<=1):\n        return True\n    if(q[0]==q[-1]):\n        return True\n    if(sum(q)<=w):\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if q[0]%2 == 0 and w >= q[0]:\n        for i in range(len(q)):\n            if i < len(q) - 1:\n                if q[i] == q[i+1]:\n                    return False\n        return True\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return True if balanced(q) and sum(q) <= w else False\n",
        "num_ids": 19
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    arr.sort()\n    l = 0\n    r = len(arr)-1\n    result = float('inf')\n    while l < r:\n        curr = abs(arr[l] - arr[r])\n        if curr < result:\n            result = curr\n        if arr[l] < arr[r]:\n            l += 1\n        else:\n            r -= 1\n    return result\n",
        "num_ids": 96
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Need to find smallest num that can be added to the array\n    # DFS\n    def backtrack(i,rem):\n        if i == len(arr):\n            return rem\n        if arr[i] == 0:\n            return backtrack(i+1,rem+1)\n        if arr[i] == 1:\n            return backtrack(i+1,rem)\n        \n    # DFS\n    def dfs(i):\n        if i == len(arr):\n            return 0\n        if arr[i] == 0:\n            return dfs(i+1)\n        if arr[i] == 1:\n            return dfs(i+1)\n        \n    # Helper function\n    def calc(curr):\n        # find the smallest number that needs to be added\n        min_add = float('inf')\n        for i in range(len(arr)):\n            if arr[i] == 0:\n                continue\n            if arr[i] == 1:\n                continue\n            if arr[i] > curr:\n                continue\n            min_add = min(min_add,curr - arr[i] + calc(curr - arr[i]))\n        return min_add\n        \n    # DFS\n    min_add = float('inf')\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        if arr[i] == 1:\n            continue\n        min_add = min(min_add,calc(arr[i]))\n    \n    # print(min_add)\n    return min_add\n",
        "num_ids": 376
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    arr.sort()\n    return sum([abs(a-i) for a, i in enumerate(arr[:-1], 1)])\n",
        "num_ids": 34
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            count += 1\n",
        "num_ids": 39
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = len(arr)\n    s = sum(arr)\n    if s % 2!= 0:\n        return 0\n    s = s//2\n    min_changes = 1\n    curr_change = 0\n    while curr_change < s:\n        min_changes += 1\n        curr_change = 0\n        for i in range(n):\n            curr_change += abs(arr[i] - arr[n-1-i])\n    return min_changes\n",
        "num_ids": 115
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not arr:\n        return 0\n    if arr == sorted(arr) and len(arr) == 1:\n        return 0\n    for i in range(1, len(arr)):\n        if arr[i - 1]!= arr[i]:\n            return i\n    return len(arr)\n",
        "num_ids": 72
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    smallest_change.found_ans = False\n    smallest_change.min_change = float('inf')\n",
        "num_ids": 28
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    changes = 0\n    max_seen = 0\n    for i in range(len(arr)):\n        if arr[i] < max_seen:\n            changes += 1\n            max_seen = arr[i]\n    return changes\n",
        "num_ids": 56
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # find the first number that is not a palindrome\n    for i in range(len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            first_non_palindrome = i\n            break\n",
        "num_ids": 57
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return n\n    else:\n        nums = []\n        for i in range(n):\n            nums.append(i + 1)\n        nums = nums[::-1]\n        for i in range(n):\n            nums.append(i)\n        nums = nums[::-1]\n        dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][i] = 0\n        for i in range(n - 1):\n            dp[i][i + 1] = 1\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 2, n):\n                for k in range(i + 1, j + 1):\n                    if arr[i]!= nums[k]:\n                        dp[i][j] = 1\n                        break\n        print(dp)\n        min_val = float('inf')\n        for i in range(n - 1):\n            min_val = min(dp[i][i + 1], min_val)\n        return min_val\n",
        "num_ids": 297
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "num_ids": 25
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n        if len(lst1)!= len(lst2):\n            if len(lst1) > len(lst2):\n                return lst1\n            else:\n                return lst2\n        elif len(lst1) == len(lst2):\n            flag = 0\n            while flag < len(lst1):\n                if len(lst1[flag]) < len(lst2[flag]):\n                    return lst1\n                else:\n                    flag += 1\n            return lst1\n",
        "num_ids": 165
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n1 = len(lst1)\n    n2 = len(lst2)\n    n = n1 if n1 < n2 else n2\n",
        "num_ids": 38
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst3 = []\n    for i in lst1:\n        for j in lst2:\n            if (len(i) == len(j)):\n                if i < j:\n                    lst3.append(i)\n    return lst3\n",
        "num_ids": 63
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    else:\n        return lst2\n",
        "num_ids": 33
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "num_ids": 25
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s = []\n    for i in lst1:\n        if len(i) < len(lst2):\n            s.append(i)\n    for i in lst2:\n        if len(i) < len(lst1):\n            s.append(i)\n    return s\n",
        "num_ids": 72
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "num_ids": 25
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "num_ids": 25
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return lst1\n",
        "num_ids": 7
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(2,101):\n        if i*3<=a:\n            if a%i==0:\n                return False\n            if i*3>a:\n                if a%i==0:\n                    return False\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    prime_list = list(range(2,100))\n    for i in prime_list:\n        if (i * i) % a == 0:\n            if (i * i * i) % a == 0:\n                return False\n            return True\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for n in range(2, 100):\n        if a % n == 0 and not is_prime(n):\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a <= 100:\n        for i in range(2,a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    for i in range(1, 100):\n        if i * 3 * 5 == a:\n            return True\n        else:\n            return False\n",
        "num_ids": 37
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return True if a % 2 == 0 and a % 3 == 0 and a % 5 == 0 else False\n",
        "num_ids": 25
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(2,100):\n        if (i % 3 == 0) and (a % i == 0):\n            return True\n        else:\n            continue\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = 1\n    a_sqr = a * a\n    b_sqr = 1\n    while(n < 100):\n        b_sqr = b_sqr + 1\n        if(a_sqr % n == 0):\n            c = a_sqr / n\n            if(c == 3):\n                if(b_sqr == 1):\n                    return False\n                else:\n                    return True\n    return False\n    \nprint(is_multiply_prime(30))\n",
        "num_ids": 118
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(1, 100):\n        if (a % i == 0):\n            if(is_prime_number(i) and is_prime_number(a / i)):\n                return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(1, 100):\n        if i * i * i == a:\n            if is_prime_number(i) and is_prime_number(a//i):\n                return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if(x==n):\n        return True\n    if(x==1):\n        return True\n    if(x<=1):\n        return False\n    if(x%n==0):\n        return False\n    else:\n        return True\n",
        "num_ids": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #x is a simple power of n if n**x=n\n    #is_simple_power(int(n**(1/x)))\n    #if x**n==x\n    return x**n==x\n",
        "num_ids": 52
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    # if n == 1:\n    #     return True\n    # elif n == 0:\n    #     return False\n    # elif n % 2 == 0:\n    #     return False\n    # else:\n    #     return True\n    if n > 1 and x ** 1 == x:\n        return True\n    else:\n        return False\n",
        "num_ids": 85
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return n ** x == x\n    # if x == 0:\n    #     return False\n    # else:\n    #     return n % x == 0\n",
        "num_ids": 38
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return x**(1.0/n) == x\n    \n",
        "num_ids": 17
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return True if x == n**(int(x/n)) else False\n",
        "num_ids": 19
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return x == (n**int(x/n))\n",
        "num_ids": 15
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if(x == 1 or x == n):\n        return True\n    if(x % n == 0):\n        return True\n    if(x % n == 1 and n > 1):\n        return False\n    if(x % n > 1):\n        return False\n    if(x % int(n) == 0):\n        return True\n    if(x % int(n) == 1):\n        return False\n    if(x < 0):\n        return False\n    if(n < 0):\n        return False\n    return False\n    \n",
        "num_ids": 127
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return n**int(x) == x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # write your code here\n    return int(n)**int(x) == x\n",
        "num_ids": 22
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return a**3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Hint: a^3 = a*a*a\n    return a**3 == a\n",
        "num_ids": 24
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if (a ** 3 == a):\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return a*a*a == a*a*a*a \n",
        "num_ids": 18
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return a**3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return a**3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return a**3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (a*a*a == a)\n",
        "num_ids": 13
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a%3 == 0 and a%4 == 0 and a%5 == 0:\n        return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a**3 == a\n",
        "num_ids": 9
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # your code here\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    digits = {\n    '0':1, '1':1, '2':1, '3':1, '4':1, '5':1, '6':1, '7':1, '8':1, '9':1, \n    'A':2, 'B':2, 'C':2, 'D':2, 'E':2, 'F':2,\n    '10':3, '11':3, '12':3, '13':3, '14':3, '15':3, '16':3, '17':3, '18':3, '19':3,\n    '20':4, '21':4, '22':4, '23':4, '24':4, '25':4, '26':4, '27':4, '28':4, '29':4, '30':4, \n    '31':4, '32':4, '33':4, '34':4, '35':4, '36':4, '37':4, '38':4, '39':4, '40':4, '41':4, \n    '42':4, '43':4, '44':4, '45':4, '46':4, '47':4, '48':4, '49':4, '50':4, '51':4, '52':4, \n    '53':4, '54':4, '55':4, '56':4, '57':4, '58':4, '59':4, '60':4, '61':4, '62':4, '63':4,\n    '100':5, '101':5, '102':5, '103':5, '104':5, '105':5, '106':5, '107':5, '108':5, '109':5, \n    '110':5, '111':5, '112':5, '113':5, '114':5, '115':5, '116':5, '117':5, '118':5, '119':5, \n    '120':5, '121':5, '122':5, '123':5, '124':5, '125':5, '126':5, '127':5, '128':5, '129':5, \n    '130':5, '131':5, '132':5, '133':5, '134':5, '135':5, '136':5, '137':5, '138':5, '139':5, \n    '140':5, '141':5, '142':5, '143':5, '144':5, '145':5, '146':5, '147':5, '148':5, '149':5, \n    '150':5, '151':5, '152':5, '153':5, '154':5, '155':5, '156':5, '157':5, '158':5, '159':5, \n    '160':5, '161':5, '162':5, '163':5, '164':5, '165':5, '166':5, '167':5, '168':5, '169':5, \n    '170':5, '171':5, '172':5, '173':5, '174':5, '175':5, '176':5, '177':5, '178':5, '179':5, \n    '180':5, '181':5, '182':5, '183':5, '184':5, '185':5, '186':5, '187':5, '188':5, '189':5, \n    '190':5, '191':5, '192':5, '193':5, '194':5, '195':5, '196':5, '197':5, '198':5, '199':5, \n    '200':5, '201':5, '202':5, '203':5, '204':5, '205':5, '206':5, '207':5, '208':5, '209':5, \n    '210':5, '211':5, '212':5, '213':5, '214':5, '215':5, '216':5, '217':5, '218':5, '219':5, \n    '220':5, '221':5, '222'",
        "num_ids": 1025
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    x = \"ABCDEF01\"\n    y = \"\"\n    d = 0\n    for i in range(0,len(num)):\n        if num[i] == x[0] or num[i] == x[1] or num[i] == x[2] or num[i] == x[3] or num[i] == x[4] or num[i] == x[5] or num[i] == x[6] or num[i] == x[7]:\n            if num[i] == x[0] or num[i] == x[1] or num[i] == x[2]:\n                y = y + x[0]\n            if num[i] == x[3] or num[i] == x[4] or num[i] == x[5]:\n                y = y + x[1]\n            if num[i] == x[6] or num[i] == x[7]:\n                y = y + x[2]\n            if num[i] == x[8] or num[i] == x[9]:\n                y = y + x[3]\n            if num[i] == x[10] or num[i] == x[11] or num[i] == x[12] or num[i] == x[13] or num[i] == x[14] or num[i] == x[15]:\n                y = y + x[4]\n            if num[i] == x[16] or num[i] == x[17] or num[i] == x[18] or num[i] == x[19] or num[i] == x[20] or num[i] == x[21] or num[i] == x[22] or num[i] == x[23]:\n                y = y + x[5]\n            if num[i] == x[24] or num[i] == x[25] or num[i] == x[26] or num[i] == x[27] or num[i] == x[28] or num[i] == x[29] or num[i] == x[30] or num[i] == x[31] or num[i] == x[32]:\n                y = y + x[6]\n            if num[i] == x[33] or num[i] == x[34] or num[i] == x[35] or num[i] == x[36] or num[i] == x[37] or num[i] == x[38] or num[i] == x[39] or num[i] == x[40] or num[i] == x[41] or num[i] == x[42] or num[i] == x[43]:\n                y = y + x[7]\n            if num[i] == x[44] or num[i] == x[45] or num[i] == x[46] or num[i] == x[47] or num[i] == x[48] or num[i] == x[49] or num[i] == x[50] or num[i] == x[51] or num[i] == x[52] or num[i] == x[53] or num[i] == x[54] or num[i] == x[55]:\n                y = y + x[8]\n            if num[i] == x[56] or num[i] == x[57] or num[i] == x[58] or num[i] == x[59] or num[i] == x[60] or num[i] == x[61] or num[i] == x[62] or num[i] == x[63] or num[i] == x[64] or num[i] == x[65] or num[i] == x[66] or num[i] == x[67] or num[i] == x[68] or num[i] == x[69] or num[i] == x[70] or num[i] == x[71]:\n                y = y + x[9]\n            if num[i] == x[72] or num[i] == x[73] or num[i] == x[74] or num[i] == x[75] or num[i] == x[76] or num[i] == x[77] or num[i] == x",
        "num_ids": 1024
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    decimal = 0\n    if (len(num) == 0):\n        return decimal\n    if (num[0] == \"A\"):\n        decimal += 1\n    elif (num[0] == \"B\"):\n        decimal += 2\n    elif (num[0] == \"C\"):\n        decimal += 3\n    elif (num[0] == \"D\"):\n        decimal += 4\n    elif (num[0] == \"E\"):\n        decimal += 5\n    elif (num[0] == \"F\"):\n        decimal += 6\n    else:\n        decimal += 7\n    \n    for i in range(1, len(num)):\n        if (num[i] == \"0\"):\n            continue\n        if (num[i] == \"1\"):\n            decimal += 1\n        elif (num[i] == \"2\"):\n            decimal += 2\n        elif (num[i] == \"3\"):\n            decimal += 3\n        elif (num[i] == \"4\"):\n            decimal += 4\n        elif (num[i] == \"5\"):\n            decimal += 5\n        elif (num[i] == \"6\"):\n            decimal += 6\n        elif (num[i] == \"7\"):\n            decimal += 7\n        elif (num[i] == \"8\"):\n            decimal += 8\n        elif (num[i] == \"9\"):\n            decimal += 9\n        elif (num[i] == \"A\"):\n            decimal += 10\n        elif (num[i] == \"B\"):\n            decimal += 11\n        elif (num[i] == \"C\"):\n            decimal += 12\n        elif (num[i] == \"D\"):\n            decimal += 13\n        elif (num[i] == \"E\"):\n            decimal += 14\n        elif (num[i] == \"F\"):\n            decimal += 15\n    return decimal",
        "num_ids": 487
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    num = str(num)\n    while len(num) > 0:\n        if is_prime(int(num)):\n            return len(num)\n        num = num[:-1]\n",
        "num_ids": 47
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(0, len(num)):\n        if int(num[i]) in range(2, 10):\n            count += 1\n        else:\n            pass\n    return count",
        "num_ids": 51
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    num = num.upper()\n    dec_num = int(num, 16)\n    if num == \"\":\n        return 0\n    numbers_list = [\"B\", \"D\"]\n    for n in numbers_list:\n        if n in num:\n            dec_num += 2\n    if dec_num % 2 == 0:\n        dec_num = dec_num // 2\n    else:\n        dec_num = dec_num // 2 + 1\n    return (dec_num)\n",
        "num_ids": 115
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #your code here\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # if type(num)!= str:\n    #     raise TypeError(\"Expected type string got {}\".format(type(num)))\n",
        "num_ids": 33
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    binary = ''\n    # Two steps to create binary string\n    while decimal > 0:\n        if decimal % 2 == 0:\n            binary = binary + '0'\n        else:\n            binary = binary + '1'\n        decimal = decimal // 2\n    binary = \"db\" + binary + \"db\"\n",
        "num_ids": 74
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if decimal == 0:\n        return \"db\"\n    if decimal == 1:\n        return \"db\"\n    if decimal == 2:\n        return \"db\"\n    if decimal == 3:\n        return \"db\"\n    if decimal == 4:\n        return \"db\"\n    if decimal == 5:\n        return \"db\"\n    if decimal == 6:\n        return \"db\"\n    if decimal == 7:\n        return \"db\"\n    if decimal == 8:\n        return \"db\"\n    if decimal == 9:\n        return \"db\"\n    if decimal == 10:\n        return \"db\"\n    if decimal == 11:\n        return \"db\"\n    if decimal == 12:\n        return \"db\"\n    if decimal == 13:\n        return \"db\"\n    if decimal == 14:\n        return \"db\"\n    if decimal == 15:\n        return \"db\"\n    if decimal == 16:\n        return \"db\"\n    if decimal == 17:\n        return \"db\"\n    if decimal == 18:\n        return \"db\"\n    if decimal == 19:\n        return \"db\"\n    if decimal == 20:\n        return \"db\"\n    if decimal == 21:\n        return \"db\"\n    if decimal == 22:\n        return \"db\"\n    if decimal == 23:\n        return \"db\"\n    if decimal == 24:\n        return \"db\"\n    if decimal == 25:\n        return \"db\"\n    if decimal == 26:\n        return \"db\"\n    if decimal == 27:\n        return \"db\"\n    if decimal == 28:\n        return \"db\"\n    if decimal == 29:\n        return \"db\"\n    if decimal == 30:\n        return \"db\"\n    if decimal == 31:\n        return \"db\"\n    if decimal == 32:\n        return \"db\"\n    if decimal == 33:\n        return \"db\"\n    if decimal == 34:\n        return \"db\"\n    if decimal == 35:\n        return \"db\"\n    if decimal == 36:\n        return \"db\"\n    if decimal == 37:\n        return \"db\"\n    if decimal == 38:\n        return \"db\"\n    if decimal == 39:\n        return \"db\"\n    if decimal == 40:\n        return \"db\"\n    if decimal == 41:\n        return \"db\"\n    if decimal == 42:\n        return \"db\"\n    if decimal == 43:\n        return \"db\"\n    if decimal == 44:\n        return \"db\"\n    if decimal == 45:\n        return \"db\"\n    if decimal == 46:\n        return \"db\"\n    if decimal == 47:\n        return \"db\"\n    if decimal == 48:\n        return \"db\"\n    if decimal == 49:\n        return \"db\"\n    if decimal == 50:\n        return \"db\"\n    if decimal == 51:\n        return \"db\"\n    if decimal == 52:\n        return \"db\"\n    if decimal == 53:\n        return \"db\"\n    if decimal == 54:\n        return \"db\"\n    if decimal == 55:\n        return \"db\"\n    if decimal == 56:\n        return \"db\"\n    if decimal == 57:\n        return \"db\"\n    if decimal == 58:\n        return \"db\"\n    if decimal == 59:\n        return \"db\"\n    if decimal == 60:\n        return \"db\"\n    if decimal == 61:\n        return \"db\"\n    if decimal == 62:\n        return \"db\"\n    if decimal == 63:\n        return \"db\"\n    if decimal == 64:\n        return \"db\"\n    if decimal == 65:\n        return \"db\"\n    if decimal == 66:\n        return \"db\"\n    if decimal == 67:\n        return \"db\"\n    if decimal == 68:\n        return \"db\"\n    if decimal == 69:\n        return \"db\"\n    if decimal == 70:\n        return \"db\"\n    if decimal == 71:\n        return \"db\"\n    if decimal == 72:\n        return \"db\"\n    if decimal == 73:\n        return \"db\"\n    if decimal == 74:\n        return \"db\"\n    if decimal == 75:\n        return \"db\"\n    if decimal == 76:\n        return \"db\"\n    if decimal == 77:\n        return \"db\"\n    if decimal == 78:\n        return ",
        "num_ids": 1025
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"db{}db\".format(decimal)\n",
        "num_ids": 15
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    binary_number = \"\"\n",
        "num_ids": 8
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # check if the number is valid\n    if type(decimal)!= int or decimal < 0:\n        raise Exception(\"Invalid input\")\n",
        "num_ids": 33
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    bin_str = \"\"\n    while decimal >= 1:\n        bin_str = str(decimal % 2) + bin_str\n        decimal = decimal // 2\n    bin_str = str(decimal) + bin_str\n    return \"db\" + bin_str + \"db\"\n",
        "num_ids": 69
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (str(bin(int(decimal))[2:]))[2:] + \"db\" + (str(bin(int(decimal))[2:]))[2:] + \"db\"\n",
        "num_ids": 47
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (\"db\" + \"101\"*int(decimal))[2:]\n",
        "num_ids": 20
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    seen = set()\n    while s:\n        if s in seen:\n            return False\n        seen.add(s)\n        s = \"\".join(sorted(s))\n        s = s[1:]\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    h = set()\n    for i in range(len(s)):\n        if s[i] in h:\n            return False\n        h.add(s[i])\n    return len(h) >= 3\n",
        "num_ids": 52
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Fill this in.\n",
        "num_ids": 8
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def is_match(s):\n        if len(s) <= 3:\n            return False\n        if sorted(s) == sorted(set(s)):\n            return True\n        else:\n            return False\n",
        "num_ids": 51
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n    i = 0\n    while i < len(s) - 2:\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            i += 2\n        else:\n            return False\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(s) < 3:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not isinstance(s, str):\n        raise ValueError(\"Input string must be a string\")\n    if len(s) < 3:\n        return False\n    # use a variable to store the last letter in a new string\n    current_letter = s[0]\n    # create a new string to store letters until the end of the string\n    new_string = s[1:]\n    while len(new_string) > 0:\n        # use a variable to store the current_letter\n        current_letter = new_string[0]\n        # create a variable to store the next letter\n        next_letter = new_string[1]\n        # if the next letter is the current letter, break the loop\n        if next_letter == current_letter:\n            break\n        # if the next letter is not the current letter, add it to the new string\n        new_string = new_string[1:]\n    return len(new_string) < 0\n",
        "num_ids": 220
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # If length of string is less than 3, it is not happy.\n    if len(s) < 3:\n        return False\n    \n    # Set empty set.\n    result = set()\n    \n    # Check if the string is happy.\n    for letter in s:\n        # Add letter to set and check if it is in result or not.\n        if letter in result:\n            return False\n        else:\n            result.add(letter)\n    \n    # Return if string is not happy.\n    return True\n",
        "num_ids": 122
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = s.lower()\n    s_hash = hash(s)\n    return s_hash not in seen and 3 in map(len, s.split(\"\", 3))\n",
        "num_ids": 42
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # First create a list of letter grades using the table above\n    # and assign it to a variable\n    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    # Loop through each grade and add it to the list\n    letter_grades_list = []\n    for grade in grades:\n        letter_grades_list.append(letter_grades[int(grade*10)])\n    return letter_grades_list\n",
        "num_ids": 135
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def letter(x):\n        if x >= 3.3:\n            return 'A+'\n        elif x >= 3.0:\n            return 'A'\n        elif x >= 2.7:\n            return 'A-'\n        elif x >= 2.3:\n            return 'B+'\n        elif x >= 2.0:\n            return 'B'\n        elif x >= 1.7:\n            return 'B-'\n        elif x >= 1.3:\n            return 'C+'\n        elif x >= 1.0:\n            return 'C'\n        elif x >= 0.7:\n            return 'C-'\n        elif x >= 0.0:\n            return 'D+'\n        elif x >= 0.3:\n            return 'D'\n        else:\n            return 'D-'\n",
        "num_ids": 197
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return ['A+', 'B', 'C-', 'C', 'A-']\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1024
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #Write your code here\n    final_grades = []\n    for i in range(len(grades)):\n        grade = 4.0 - (grades[i] - 3.0) / 2.0\n        if grade > 3.0:\n            final_grades.append('A')\n        elif grade > 2.7:\n            final_grades.append('B')\n        elif grade > 2.3:\n            final_grades.append('C')\n        elif grade > 2.0:\n            final_grades.append('D')\n        else:\n            final_grades.append('F')\n    return final_grades\n",
        "num_ids": 148
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    grades = sorted(grades)\n    grades_sorted_sorted = sorted(grades)\n    grades_sorted_sorted = sorted(grades_sorted_sorted, reverse=True)\n    grades_sorted_sorted = sorted(grades_sorted_sorted, reverse=True)\n    grades_sorted_sorted = sorted(grades_sorted_sorted, reverse=True)\n",
        "num_ids": 95
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3.0:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2.0:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1.0:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n",
        "num_ids": 254
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    grades_list = []\n    for i in grades:\n        if i >= 4.0:\n            grades_list.append('A+')\n        elif i >= 3.7:\n            grades_list.append('A')\n        elif i >= 3.3:\n            grades_list.append('A-')\n        elif i >= 3.0:\n            grades_list.append('B+')\n        elif i >= 2.7:\n            grades_list.append('B')\n        elif i >= 2.3:\n            grades_list.append('B-')\n        elif i >= 2.0:\n            grades_list.append('C+')\n        elif i >= 1.7:\n            grades_list.append('C')\n        elif i >= 1.3:\n            grades_list.append('C-')\n        elif i >= 1.0:\n            grades_list.append('D+')\n        elif i >= 0.7:\n            grades_list.append('D')\n        elif i >= 0.0:\n            grades_list.append('D-')\n        else:\n            grades_list.append('E')\n    return grades_list\n",
        "num_ids": 282
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(grades)):\n        if grades[i]>=3.0:\n            grades[i] = 'A+'\n        elif grades[i]>=3.3:\n            grades[i] = 'A'\n        elif grades[i]>=3.0:\n            grades[i] = 'A-'\n        elif grades[i]>=2.7:\n            grades[i] = 'B+'\n        elif grades[i]>=2.3:\n            grades[i] = 'B'\n        elif grades[i]>=2.0:\n            grades[i] = 'B-'\n        elif grades[i]>=1.7:\n            grades[i] = 'C+'\n        elif grades[i]>=1.3:\n            grades[i] = 'C'\n        elif grades[i]>=1.0:\n            grades[i] = 'C-'\n        elif grades[i]>=0.7:\n            grades[i] = 'D+'\n        elif grades[i]>=0.3:\n            grades[i] = 'D'\n        else:\n            grades[i] = 'D-'\n    return grades\n",
        "num_ids": 298
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    letter_grades = { 'A+': 4.0, 'A': 3.7, 'A-': 3.3, 'B+': 3.0,\n                     'B': 2.7, 'B-': 2.3, 'C+': 2.0, 'C': 1.7, \n                     'C-': 1.3, 'D+': 1.0, 'D': 0.7, 'D-': 0.0, 'E': 0.0}\n",
        "num_ids": 114
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    grades = [4.0, 3, 1.7, 2, 3.5]\n    return [[\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"E\"], grades]\n",
        "num_ids": 78
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Check for even length\n    if len(string) % 2 == 0:\n        return False\n    \n    # Check if each character is a prime number\n    for char in string:\n        if not char.isalpha():\n            continue\n        if int(char) < 2 or int(char) > 999:\n            return False\n    \n    # Return True\n    return True\n",
        "num_ids": 88
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(string) == 2:\n        return string[0] == string[1]\n    if len(string) == 3:\n        return string[0] == string[1] and string[1] == string[2]\n    if len(string) == 4:\n        return string[0] == string[1] and string[1] == string[2] and string[2] == string[3]\n    \n    else:\n        for i in range(2, int(math.sqrt(len(string))) + 1):\n            if len(string) % i == 0:\n                return False\n        return True\n",
        "num_ids": 146
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    length = len(string)\n    if length > 1:\n        is_prime = True\n        for i in range(2, length):\n            if length % i == 0:\n                is_prime = False\n                break\n        return is_prime\n    else:\n        return False\n",
        "num_ids": 67
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(string) < 2:\n        return False\n    for i in range(2, len(string)):\n        if string[i]!= string[i-1] and string[i-1] == string[i-2]:\n            return False\n    return True",
        "num_ids": 65
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(string) in [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n",
        "num_ids": 60
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your Code Here\n",
        "num_ids": 7
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(2, len(string)):\n        if string[i] in string[:i]:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for length in range(2, len(string)):\n        if len(string) % length == 0:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    try:\n        length = int(string)\n        if length > 0:\n            if length == 2:\n                return True\n            else:\n                for i in range(2, length):\n                    if length % i == 0:\n                        return False\n                else:\n                    return True\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 83
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(string) in prime_numbers\n",
        "num_ids": 13
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    i = 1\n    while count < n:\n        if str(i) == str(i)[::-1]:\n            count += 1\n        i += 1\n    return count\n    \ndef test_starts_one_ends():\n    assert starts_one_ends(1) == 1\n    assert starts_one_ends(2) == 2\n    assert starts_one_ends(3) == 1\n    assert starts_one_ends(4) == 2\n    assert starts_one_ends(5) == 2\n    assert starts_one_ends(6) == 3\n    assert starts_one_ends(7) == 4\n    assert starts_one_ends(8) == 4\n    assert starts_one_ends(9) == 5\n    assert starts_one_ends(10) == 6\n    assert starts_one_ends(11) == 6\n    assert starts_one_ends(12) == 7\n    assert starts_one_ends(13) == 7\n    assert starts_one_ends(14) == 8\n    assert starts_one_ends(15) == 8\n    assert starts_one_ends(16) == 9\n    assert starts_one_ends(17) == 9\n    assert starts_one_ends(18) == 10\n    assert starts_one_ends(19) == 10\n    assert starts_one_ends(20) == 11\n    assert starts_one_ends(21) == 11\n    assert starts_one_ends(22) == 12\n    assert starts_one_ends(23) == 12\n    assert starts_one_ends(24) == 13\n    assert starts_one_ends(25) == 13\n    assert starts_one_ends(26) == 14\n    assert starts_one_ends(27) == 14\n    assert starts_one_ends(28) == 15\n    assert starts_one_ends(29) == 15\n    assert starts_one_ends(30) == 16\n    assert starts_one_ends(31) == 16\n    assert starts_one_ends(32) == 17\n    assert starts_one_ends(33) == 17\n    assert starts_one_ends(34) == 18\n    assert starts_one_ends(35) == 18\n    assert starts_one_ends(36) == 19\n    assert starts_one_ends(37) == 19\n    assert starts_one_ends(38) == 20\n    assert starts_one_ends(39) == 20\n    assert starts_one_ends(40) == 21\n    assert starts_one_ends(41) == 21\n    assert starts_one_ends(42) == 22\n    assert starts_one_ends(43) == 22\n    assert starts_one_ends(44) == 23\n    assert starts_one_ends(45) == 23\n    assert starts_one_ends(46) == 24\n    assert starts_one_ends(47) == 24\n    assert starts_one_ends(48) == 25\n    assert starts_one_ends(49) == 25\n    assert starts_one_ends(50) == 26\n    assert starts_one_ends(51) == 26\n    assert starts_one_ends(52) == 27\n    assert starts_one_ends(53) == 27\n    assert starts_one_ends(54) == 28\n    assert starts_one_ends(55) == 28\n    assert starts_one_ends(56) == 29\n    assert starts_one_ends(57) == 29\n    assert starts_one_ends(58) == 30\n    assert starts_one_ends(59) == 30\n    assert starts_one_ends(60) == 31\n    assert starts_one_ends(61) == 31\n    assert starts_one_ends(62) == 32\n    assert starts_one_ends(63) == 32\n    assert starts_one_ends(64) == 33\n    assert starts_one_ends(65) == 33\n    assert starts_one_ends(66) == 34\n    assert starts_one_ends(67) == 34\n    assert starts_one_ends(68) == 35\n    assert starts_one_ends(69) == 35\n    assert starts_one_ends(70) == 36\n    assert starts_one_ends(71) == 36\n    assert starts_one_ends(72) == 37\n    assert starts_one_ends(73) == 37\n    assert starts_one_ends(74) == 38\n    asser",
        "num_ids": 1025
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n = int(n)\n    result = 0\n    for i in range(10,n+1):\n        if str(i)[0]=='1' and str(i)[-1]=='1':\n            result += 1\n        elif str(i)[0]=='1' and str(i)[-1]!='1':\n            result += int(str(i)[1:-1])\n        elif str(i)[0]!='1' and str(i)[-1]=='1':\n            result += int(str(i)[1:])\n        else:\n            result += 1\n    return result\n",
        "num_ids": 149
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # str(n) is shorter than n, use str(n) and count\n    return len([digit for digit in str(n) if digit == '1'])\n",
        "num_ids": 40
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 3:\n        return 0\n    ones = ones_count(n)\n    pos_ones = ones + 1\n    total = n * (n - 1)\n    return int(total - pos_ones)\n",
        "num_ids": 53
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(2,n+1):\n        temp = str(i)\n        if temp.startswith(\"1\") or temp.endswith(\"1\"):\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # create a dictionary to keep track of the count\n    count = {}\n",
        "num_ids": 18
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be positive.\")\n",
        "num_ids": 19
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(1,n+1):\n        if (i[0] == 1) or (i[-1] == 1):\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return ((n + 1) ** (n // 2)) - ((n - 1) ** (n // 2))\n",
        "num_ids": 27
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i == 1 or i == n:\n            count += 1\n        else:\n            if i[0] == 1 or i[-1] == 1:\n                count += 1\n",
        "num_ids": 62
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = str(bin(N))[2:]\n    return ",
        "num_ids": 17
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(map(int, str(bin(N))))\n    \nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) == 2:\n        print(solve(int(sys.argv[1])))\n    else:\n        print('Usage: {} N'.format(sys.argv[0])",
        "num_ids": 84
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    #print('N: {}'.format(N))\n    n_str = str(N)\n    result = 0\n    for char in n_str:\n        #print('char: {}'.format(char))\n        result += int(char)\n        #print('result: {}'.format(result))\n    return result\n",
        "num_ids": 76
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if N == 0:\n        return '0'\n    else:\n        return str(bin(N).count('1')).replace('0b','')\n",
        "num_ids": 39
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert(N >= 0 and N <= 10000)\n    n = N\n    s = 0\n    \n    while n > 0:\n        s = s + n % 10\n        n = n // 10\n    return s\n    ",
        "num_ids": 53
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # convert N to binary number\n    binary = \"{0:b}\".format(N)\n    total = 0\n    # count the digits in binary\n    for i in range(0, len(binary)):\n        total += int(binary[i])\n    return total\n    \ndef main():\n    \"\"\"You can add your own test cases here\"\"\"\n    assert solve(1000) == 1\n    assert solve(150) == 6\n    assert solve(147) == 12\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 125
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = \"1\"\n    count = 0\n    while(N>0):\n        count += N%2\n        N = N//2\n    return s+str(count)",
        "num_ids": 43
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # Test cases\n    assert(N >= 0 and N <= 10000), \"Input error: N must be >= 0 and <= 10000\"\n    \n    # Initialize number of digits to zero\n    num_of_digits = 0\n    \n    # Initialize sum of digits to zero\n    total_sum = 0\n    \n    # Traverse the binary representation of N\n    while N!= 0:\n        # Find the digit\n        digit = N % 10\n        \n        # Update the number of digits\n        num_of_digits += 1\n        \n        # Update the sum of digits\n        total_sum += digit\n        \n        # Update N to N // 10\n        N //= 10\n    \n    # Return the total number of digits\n    return str(total_sum)\n",
        "num_ids": 181
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ''.join(str(bin(N)).lstrip('0b').zfill(8))\n",
        "num_ids": 25
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if lst == None:\n        return None\n    else:\n        count = 0\n        for i in range(len(lst)):\n            if i % 2 == 0:\n                lst[count] = lst[i] + lst[count]\n            count += 1\n        return lst\n",
        "num_ids": 73
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    ret = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            ret += lst[i]\n    return ret\n",
        "num_ids": 41
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    evens = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            evens += lst[i]\n    return evens\n",
        "num_ids": 44
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return reduce(lambda x, y: x + y, filter(lambda x: x%2 == 0, lst))\n",
        "num_ids": 29
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # if lst == []:\n    #     return []\n    # else:\n    #     even_list = []\n    #     for i in range(0, len(lst)):\n    #         if i % 2 == 0:\n    #             even_list.append(lst[i])\n    #     return even_list\n    even_list = []\n    for i in range(0, len(lst)):\n        if i % 2 == 0:\n            even_list.append(lst[i])\n    return even_list\n",
        "num_ids": 131
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if lst == []:\n        return\n    for i in range(len(lst)):\n        if i % 2!= 0:\n            lst[i] += 2\n            if lst[i] > 7:\n                lst[i] = 2\n                break\n",
        "num_ids": 67
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s = 0\n    while lst:\n        s += lst.pop()\n        if s%2 == 1:\n            return s\n    return 0\n",
        "num_ids": 38
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0] + add(lst[2:])\n",
        "num_ids": 52
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    evens = []\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            evens.append(lst[i])\n    return sum(evens)\n",
        "num_ids": 49
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sum = 0\n    for i in range(1, len(lst)):\n        if i % 2 == 1:\n            sum += lst[i]\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = s.split(' ')\n    s = list(map(lambda x: \"\".join(sorted(list(x))), s))\n    return''.join(s)\n",
        "num_ids": 44
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \" \".join(sorted(s.split(\" \")))\n",
        "num_ids": 17
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    s = s.split()\n    ret = \"\"\n    for i in range(0, len(s)):\n        ret += str(sorted(s[i].lower())) + \" \"\n    return ret.strip()\n",
        "num_ids": 54
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = ''\n    for word in s.split(' '):\n        for i in range(len(word)):\n            result += word[i]\n        result +=''\n    return result[:-1]\n",
        "num_ids": 50
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return''.join([i for i in re.split(r'\\s+', s) if i!= ''])\n",
        "num_ids": 29
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \" \".join(sorted(s.split(\" \")))\n",
        "num_ids": 17
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return''.join(s.split()).swapcase()\n    ",
        "num_ids": 17
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return''.join(''.join(sorted(word, key=ascii)) for word in s.split())\n    \n",
        "num_ids": 30
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    res = []\n    for word in s.split():\n        for j in range(0,len(word)):\n            res.append(word[j])\n    return \"\".join(res)\n",
        "num_ids": 50
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    a = s.split()\n    return''.join(sorted(a))\n",
        "num_ids": 20
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    rows = [[(i, c) for c in range(len(lst[i]))] for i in range(len(lst))]\n    rows.sort(key=lambda row: (row[0], -row[1]))\n    rows.sort(key=lambda row: (-row[1], row[0]))\n    \n    return [(x1, y1) for (x1, y1), (x2, y2) in rows]\n",
        "num_ids": 109
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    lst_to_sort = []\n    for l in lst:\n        lst_to_sort.append((lst.index(l), len(l), l))\n    lst_to_sort.sort()\n    return sorted(lst_to_sort, key=lambda x: (x[0], x[1]))\n",
        "num_ids": 81
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # TODO: Write function here\n    result = []\n    for item in lst:\n        if x in item:\n            tmp = (lst.index(item), item.index(x))\n            result.append(tmp)\n",
        "num_ids": 56
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not lst:\n        return []\n    if x not in lst[0]:\n        return []\n    result = [(i, x) for i, row in enumerate(lst) for j, x in enumerate(row) if x == x]\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "num_ids": 88
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert len(lst) > 0, \"lst is empty\"\n    assert x >= 0 and x <= len(lst) - 1, \"x out of range\"\n    assert type(lst) == type([]), \"lst must be a list\"\n    result = []\n    for row in range(len(lst)):\n        for column in range(len(lst[row])):\n            if lst[row][column] == x:\n                result.append((row, column))\n    result.sort()\n    result.sort(key=lambda p: (p[0], -p[1]))\n    return result\n",
        "num_ids": 150
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) == 0: return []\n    row = [(0,0)]\n    for i,x in enumerate(lst):\n        if x: row += [(i,j) for j in range(len(x))]\n    row.sort(key=lambda x: (x[0], -x[1]))\n    row.sort(key=lambda x: (-x[1], x[0]))\n    return row\n",
        "num_ids": 105
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    row_list = []\n    if lst == []:\n        return row_list\n    if isinstance(lst[0], list) == False:\n        row_list.append((lst.index(x), 0))\n    else:\n        for i in lst:\n            if i == x:\n                row_list.append((lst.index(i), 0))\n            else:\n                row_list.append((lst.index(i), lst[lst.index(i)].index(x)))\n    row_list.sort()\n    row_list.sort(key = lambda x: (x[0], -x[1]))\n    return row_list\n    \n    \ndef get_row_of_column(lst, x):\n    \"\"\"\n    Given a list of lists, lst, find the row of the column,\n    which contains the element x, and return its row index,\n    which is 0-indexed.\n    \n    Examples:\n    get_row_of_column([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 6) == 2\n    get_row_of_column([], 6) == -1\n    get_row_of_column([[], [1], [1, 2, 3]], 2) == 2\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i][lst[i].index(x)]!= x:\n            continue\n        else:\n            return i\n    return -1\n    \n    \ndef get_column(lst, x):\n    \"\"\"\n    Given a list of lists, lst, find the column of the element,\n    which contains the element x, and return its column index,\n    which is 0-indexed.\n    \n    Examples:\n    get_column([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 6) == 5\n    get_column([], 6) == -1\n    get_column([[], [1], [1, 2, 3]], 2) == 3\n    \"\"\"\n    column_list = []\n    if lst == []:\n        return column_list\n    if isinstance(lst[0], list) == False:\n        column_list.append(lst.index(x))\n    else:\n        for i in lst:\n            column_list.append(lst[lst.index(i)].index(x))\n    return column_list\n    \n    \ndef get_column_of_row(lst, x):\n    \"\"\"\n    Given a list of lists, lst, find the column of the row,\n    which contains the element x, and return its column index,\n    which is 0-indexed.\n    \n    Examples:\n    get_column_of_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 6) == 1\n    get_column_of_row([], 6) == -1\n    get_column_of_row([[], [1], [1, 2, 3]], 2) == 2\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i].index(x)!= i:\n            continue\n        else:\n            return lst.index(x)\n    return -1\n    \n    \ndef get_item_by_value(lst, x):\n    \"\"\"\n    Given a list of lists, lst, find the element with value x,\n    and return its index, which is 0-indexed.\n    \n    Examples:\n    get_item_by_value([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 4) == 2\n    get_item_by_value([], 4) == -1\n    get_item_by",
        "num_ids": 1013
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not lst: return []\n    lst_new = []\n    for i in lst:\n        lst_new.append(i[:x])\n    s = sorted(set(sum(lst_new, [])))\n    return sorted([(i, s.index(i)) for i in s], key = lambda x : (x[0], -x[1]))\n",
        "num_ids": 92
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    x_idx = 0\n    for y_idx, row in enumerate(lst):\n        if len(row) == 0: continue\n        x_list = []\n        for i, col in enumerate(row):\n            if col == x:\n                x_list.append((y_idx, i))\n        x_list.sort(key=lambda tup: (tup[0], -tup[1]))\n        for i in range(len(x_list)):\n            x_list[i] = (x_list[i][0], x_list[i][1])\n        if x_idx == 0:\n            tmp = x_list\n        else:\n            tmp += x_list\n        x_idx += 1\n    return tmp\n",
        "num_ids": 184
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # your code here\n    return sorted(array)\n",
        "num_ids": 14
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # The time complexity of the above algorithm is O(N^2).\n    # The space complexity of the algorithm is O(1).\n",
        "num_ids": 32
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sorted_array = array[:]\n    for i in range(len(sorted_array) - 1):\n        first_index = i\n        for j in range(i + 1, len(sorted_array)):\n            if sorted_array[j] > sorted_array[first_index]:\n                first_index = j\n        if first_index!= i:\n            sorted_array[i], sorted_array[first_index] = sorted_array[first_index], sorted_array[i]\n    return sorted_array\n",
        "num_ids": 127
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Time: O(nlogn)\n    # Space: O(n)\n",
        "num_ids": 20
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(array) < 2:\n        return array\n    result = []\n    left = 0\n    right = len(array) - 1\n    for i in range(len(array)):\n        if sum(array[left], array[right]) % 2 == 0:\n            result.append(array[right])\n            right -= 1\n        else:\n            result.append(array[left])\n            left += 1\n    return result\n",
        "num_ids": 103
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not array:\n        return array\n",
        "num_ids": 11
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n    \n    return _sort(array, 0, len(array)-1)\n",
        "num_ids": 47
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(array, key=lambda x: (x, -x) if sum(array) % 2 else (x, -x)",
        "num_ids": 32
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return array",
        "num_ids": 4
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(array)\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    my_string = s.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_string = ''\n    new_string = new_string.join(alphabet)\n    new_string = new_string.split()\n    new_string = ''.join(new_string)\n    lst = []\n    for i in new_string:\n        count = new_string.count(i)\n        if count > 1:\n            lst.append(i)\n            lst.append(count)\n        else:\n            lst.append(i)\n    final = []\n    final.append(lst[0])\n    final.append(lst[1])\n    final = final[::-1]\n    new_string = ''\n    for i in final:\n        if i == 'i':\n            new_string = new_string + i\n        elif i == 'x':\n            new_string = new_string + i\n        elif i == 'j':\n            new_string = new_string + i\n        elif i == 'k':\n            new_string = new_string + i\n        elif i == 'l':\n            new_string = new_string + i\n        elif i =='m':\n            new_string = new_string + i\n        elif i == 'n':\n            new_string = new_string + i\n        elif i == 'o':\n            new_string = new_string + i\n        elif i == 'p':\n            new_string = new_string + i\n        elif i == 'q':\n            new_string = new_string + i\n        elif i == 'r':\n            new_string = new_string + i\n        elif i =='s':\n            new_string = new_string + i\n        elif i == 't':\n            new_string = new_string + i\n        elif i == 'u':\n            new_string = new_string + i\n        elif i == 'v':\n            new_string = new_string + i\n        elif i == 'w':\n            new_string = new_string + i\n        elif i == 'x':\n            new_string = new_string + i\n        elif i == 'y':\n            new_string = new_string + i\n        elif i == 'z':\n            new_string = new_string + i\n        else:\n            new_string = new_string + i\n    return new_string.lower()\n",
        "num_ids": 599
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    s = ''.join([x for x in s if x in alphabet])\n    s = ''.join(sorted(s, key=alphabet.index))\n    \n    def rotate_char(x, y):\n        return alphabet[(alphabet.index(x) + y) % 26]\n    return ''.join([rotate_char(x, 1) for x in s])\n",
        "num_ids": 94
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # your code here\n    return s\n",
        "num_ids": 11
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a = \"abcdefghijklmnopqrstuvwxyz\"\n    b = list(a)\n    c = []\n    for x in s:\n        c.append(a[b.index(x)])\n    return ''.join(c)\n",
        "num_ids": 65
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = alphabet[alphabet_length - alphabet_length + (alphabet.index(s[i]) + 2) % len(alphabet)]\n    return ''.join(s)\n",
        "num_ids": 77
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet.upper()\n    encrypted_string = ''\n    for char in s:\n        if char in alphabet:\n            encrypted_string += shifted[alphabet.index(char)]\n        else:\n            encrypted_string += char\n    return encrypted_string\n",
        "num_ids": 99
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Sorting the alphabet and assigning the values to variables\n    alphabet = sorted(list(string.ascii_letters))\n    cipher = \"\"\n    \n    # Iterating over each letter and encrypting the letters\n    for i in range(len(alphabet)):\n        for char in s:\n            if char == alphabet[i]:\n                cipher += alphabet[i+2]\n    \n    return cipher\n",
        "num_ids": 98
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # return \" \".join([s[i] if i % 2 == 0 else s[i] + s[i + 1] for i in range(len(s))])\n    return \" \".join([s[i] for i in range(len(s))])\n",
        "num_ids": 62
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    #create a dictionary to store the alphabet\n    alphabet = {'a':'q', 'b':'r', 'c':'s', 'd':'t', 'e':'u',\n                'f':'v', 'g':'w', 'h':'x', 'i':'y', 'j':'z',\n                'k':'1', 'l':'2','m':'3', 'n':'4', 'o':'5',\n                'p':'6', 'q':'7', 'r':'8','s':'9', 't':'0',\n                'u':'a', 'v':'b', 'w':'c', 'x':'d', 'y':'e',\n                'z':'f', '1':'g', '2':'h', '3':'i', '4':'j',\n                '5':'k', '6':'l', '7':'m', '8':'n', '9':'o',\n                '0':'p', 'q':'r', 'r':'s','s':'t', 't':'u',\n                'u':'v', 'v':'w', 'w':'x', 'x':'y', 'y':'z',\n                'z':'a', 'A':'Q', 'B':'R', 'C':'S', 'D':'T',\n                'E':'U', 'F':'V', 'G':'W', 'H':'X', 'I':'Y',\n                'J':'Z', 'K':'1', 'L':'2', 'M':'3', 'N':'4',\n                'O':'5', 'P':'6', 'Q':'7', 'R':'8', 'S':'9',\n                'T':'0', 'U':'A', 'V':'B', 'W':'C', 'X':'D',\n                'Y':'E', 'Z':'F', '1':'G', '2':'H', '3':'I',\n                '4':'J', '5':'K', '6':'L', '7':'M', '8':'N',\n                '9':'O', '0':'P', 'Q':'R', 'R':'S', 'S':'T',\n                'T':'U', 'U':'V', 'V':'W', 'W':'X', 'X':'Y',\n                'Y':'Z', 'Z':'A', '0':'1', '1':'2', '2':'3',\n                '3':'4', '4':'5', '5':'6', '6':'7', '7':'8',\n                '8':'9', '9':'0', '@':'A', '!':'B', '#':'C',\n                '$':'D', '%':'E', '^':'F', '&':'G', '*':'H',\n                '(':'I', ')':'J', '_':'K', '+':'L', '=':'M',\n                '[':'N', ']':'O', '{':'P', '}':'Q', ':':'R',\n                '\\'':'S', '~':'T', ',': 'U', ';':'V', '.': 'W',\n                '/': 'X', '?': 'Y', '<': 'Z', '>': '0', '.': '1',\n                '1': '2', '2': '3', '3': '4', '4': '5', '5': '6',\n                '6': '7', '7': '8', '8': '9', '9': '0'}\n    \n    #create a list to store the encrypted message\n    encrypt_message = ''\n    \n    #create a function that takes in a string and returns a string in encrypted form\n    def encrypt_string(s):\n        \n        #loop through each character in the message\n        for char in s:\n            \n            #if the character is in the dictionary\n            if char in alphabet:\n                \n                #check if the new index is greater than or equal to the old index\n                if alphabet.index(char) >= alphabet",
        "num_ids": 1021
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Implement your function below:\n",
        "num_ids": 9
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    \n    if lst[1] < lst[0]:\n        return lst[1]\n    else:\n        return next_smallest(lst[2:])\n",
        "num_ids": 77
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    # time complexity: O(n)\n    # space complexity: O(1)\n    \n    if not lst:\n        return None\n    \n    # sort the list\n    lst.sort()\n    \n    # find the 2nd smallest element\n    return lst[1]\n",
        "num_ids": 70
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Your code here\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    smallest = lst[0]\n    # Find the smallest number in the list that is larger than the 2nd smallest number\n    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest\n",
        "num_ids": 110
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # O(n) time complexity\n    \n    # O(n) space complexity\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return lst[i+1]\n    return None\n    \n    # This one is O(n) time complexity\n    # This one is O(1) space complexity\n    if not lst:\n        return None\n    l = sorted(lst)\n    return l[1]\n    \ndef next_smallest2(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    # O(n) time complexity\n    \n    # O(n) space complexity\n    \n    if not lst:\n        return None\n    \n    l = sorted(lst)\n    return l[1]\n",
        "num_ids": 300
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not lst:\n        return None\n    \n    cur_min = lst[0]\n    cur_min_index = 0\n    for i, elem in enumerate(lst):\n        if elem < cur_min:\n            cur_min = elem\n            cur_min_index = i\n            \n    return lst[cur_min_index + 1]\n        \n    \n    \n",
        "num_ids": 97
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(lst) == 1:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return None\n    nums = lst\n    smallest = nums[0]\n    second = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < smallest:\n            second = smallest\n            smallest = nums[i]\n            if nums[i] < second:\n                second = nums[i]\n    return second\n",
        "num_ids": 107
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Brute force\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if lst[j] <= lst[i]:\n                return lst[j]\n    return None\n",
        "num_ids": 64
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lst.sort()\n    if len(lst) == 0:\n        return None\n    return lst[1]\n",
        "num_ids": 31
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def smallest(lst):\n        min_index = 0\n        for i in range(len(lst)):\n            if lst[i] < lst[min_index]:\n                min_index = i\n        return lst[min_index]\n    \n    if len(lst) == 0:\n        return None\n    \n    second = smallest(lst)\n    if second == lst[0]:\n        return None\n    return second + 1\n",
        "num_ids": 110
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    bored = 0\n    for word in S.split():\n        if word == \"I\":\n            bored += 1\n    return bored\n",
        "num_ids": 34
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return S.count(\"I\")\n",
        "num_ids": 10
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return S.count(\"I\")\n",
        "num_ids": 10
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #strip out all non-words\n    tokens = S.split('.')\n    tokens = tokens + ['']\n    tokens = [x.strip().lower() for x in tokens if x]\n    bored = tokens.count('i')\n    return bored\n    \n    \n    \ndef count_words(S):\n    \"\"\"\n    You'll be given a string S of words. Write a function count_words,\n    which counts the number of words in S.\n   \n    For example:\n    >>> count_words(\"Hello world\")\n    2\n    >>> count_words(\"Python\")\n    4\n    \"\"\"\n    words = S.split(' ')\n    words = words + ['']\n    words = [x.strip() for x in words]\n    return len(words)\n    \n    \n    \ndef word_count(S):\n    \"\"\"\n    You'll be given a string S of words. Write a function word_count,\n    which returns a dictionary of the counts of all the words in S.\n   \n    For example:\n    >>> word_count(\"Hello world\")\n    {'world': 1}\n    >>> word_count(\"Python\")\n    {'python': 2}\n    \"\"\"\n    words = S.split(' ')\n    words = words + ['']\n    words = [x.strip() for x in words]\n    \n    d = {}\n    for word in words:\n        d[word] = d.get(word, 0) + 1\n    return d\n    \n    \n    \ndef numbers(S):\n    \"\"\"\n    You'll be given a string S. Write a function numbers, which returns a dictionary\n    of the counts of the numbers in S. The numbers should be counted from 1 to n,\n    inclusive. For example:\n   \n    >>> numbers(\"I have 9 cows and 10 pigs\")\n    {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}\n    >>> numbers(\"There are 7 cows and 4 pigs\")\n    {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}\n    >>> numbers(\"There are 7 cows and 4 pigs and 2 more\")\n    {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}\n    \"\"\"\n    nums = S.split(' ')\n    nums = nums + ['']\n    nums = [x.strip() for x in nums]\n    \n    nums = {int(x): nums.count(x) for x in nums}\n    return nums\n    \n    \n    \ndef vowels(S):\n    \"\"\"\n    You'll be given a string S consisting of vowels 'a', 'e', 'i', 'o', 'u'.\n    Write a function vowels, which returns a dictionary of the counts of the\n    occurrences of each vowel in S.\n    \n    For example:\n    >>> vowels(\"I have 4 cows and 8 pigs\")\n    {'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1}\n    >>> vowels(\"He has 4 cows and 6 pigs\")\n    {'a': 2, 'e': 2, 'i': 2, 'o': 2, 'u': 2}\n    \"\"\"\n    vowels = S.lower()\n    \n    vowels = {'a': vowels.count('a'), 'e': vowels.count('e'), 'i': vowels.count('i'), 'o': vowels.count('o'), 'u': vowels.count('u')}\n    return vowels\n    \n    \n    \ndef is_prime(n):\n    \"\"\"\n    You'll be given a number, n. Write a function is_prime, which will return True\n    if n is prime, and False otherwise. \n     \n    The algorithm used by this function is known as the Sieve of Eratosthenes.\n    Sieve of Eratosthenes is an efficient algorithm for finding all prime numbers up to\n    some limit N.\n   \n    For example:\n    >>> is_prime(10)\n    True\n",
        "num_ids": 1023
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for word in S.split(\".\"):\n        if \"I\" in word:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for word in S.split():\n        if word[0] == 'I':\n            count = count + 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    bored = 0\n    for i in range(len(S)):\n        if S[i:i+3] == \"I.\":\n            bored += 1\n    return bored\n",
        "num_ids": 45
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return S.count(\"I\")\n",
        "num_ids": 10
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return S.count('I')\n",
        "num_ids": 10
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #return (x == y + z) and (type(x) == int and type(y) == int and type(z) == int)\n    if(type(x)==int and type(y)==int and type(z)==int):\n        if (x == y + z):\n            return True\n        else:\n            return False\n        \n",
        "num_ids": 84
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return any([x == (y + z), x == (y - z), x == (y * z)]) and all([type(x) == int, type(y) == int, type(z) == int])",
        "num_ids": 51
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return (x == y + z) and type(x) == int and type(y) == int and type(z) == int\n",
        "num_ids": 32
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #return x == (y + z) and all([type(i) == int for i in (x, y, z)])\n    return type(x) == int and type(y) == int and type(z) == int and x == y + z\n",
        "num_ids": 61
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum = x + y\n    return (x == sum and isinstance(x, int) and isinstance(y, int) and isinstance(z, int))\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ",
        "num_ids": 1024
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x == (y + z) and type(x) == int and type(y) == int and type(z) == int\n",
        "num_ids": 32
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return x == y + z and all([type(i) == int for i in [x,y,z]])\n",
        "num_ids": 29
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return not (x == y + z and x == y and x == z)\n",
        "num_ids": 20
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x == y+z and type(x) == int and type(y) == int and type(z) == int\n    \ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n",
        "num_ids": 131
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (x == (y + z)) and (type(x) == int) and (type(y) == int) and (type(z) == int)\n",
        "num_ids": 39
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # replace all vowels with the character at two positions ahead of them\n    for i, letter in enumerate(message):\n        if letter.lower() in 'aeiou':\n            message = message[:i] + letter.upper() + message[i+2:]\n            \n    return message\n",
        "num_ids": 71
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    vowels = \"AEIOU\"\n    new_msg = \"\"\n    for letter in message:\n        if letter in vowels:\n            new_msg = new_msg + letter\n        else:\n            pos = vowel_pos(letter)\n            new_msg = new_msg + vowel_pos(letter)\n    return new_msg\n",
        "num_ids": 81
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = []\n    for i in message:\n        if i.isalpha():\n            if i.isupper():\n                result.append(i.lower())\n            else:\n                result.append(i.upper())\n        else:\n            result.append(i)\n    return \"\".join(result)\n",
        "num_ids": 74
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    message = message.upper()\n    vowels = 'AEIOU'\n    newMessage = []\n    for letter in message:\n        if letter in vowels:\n            index = vowels.find(letter)\n            if index >= 2:\n                newMessage.append(vowels[index-2])\n            else:\n                newMessage.append(vowels[index-1])\n        else:\n            newMessage.append(letter)\n    return ''.join(newMessage)\n    \n",
        "num_ids": 118
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return ''.join(c.upper() if c.isalpha() else c.lower() for c in message)\n",
        "num_ids": 28
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    message = message.lower()\n    # replace all letters with their respective index\n    table = str.maketrans('aeiou', '12345')\n    return message.translate(table)\n",
        "num_ids": 48
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    encoded_message = []\n    for letter in message:\n        if letter.isalpha():\n            if letter.isupper():\n                if letter in ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'):\n                    encoded_message.append(letter.swapcase())\n                else:\n                    encoded_message.append(letter)\n            else:\n                encoded_message.append(letter)\n    return \"\".join(encoded_message)\n",
        "num_ids": 125
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    vowels = 'aeiou'\n    encoded = ''\n    message = message.lower()\n    for letter in message:\n        if letter in vowels:\n            pos = vowels.index(letter) + 2\n            if pos > 5:\n                pos = 5\n            encoded += vowels[pos-2]\n        else:\n            encoded += letter\n    return encoded\n",
        "num_ids": 92
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    encoded = ''\n    for letter in message:\n        if letter in vowels:\n            encoded += letters[(letters.index(letter) + 2) % len(letters)]\n        else:\n            encoded += letter\n    return encoded\n",
        "num_ids": 58
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = \"\"\n    for c in message:\n        if c in 'AEIOUaeiou':\n            result += c\n        else:\n            result += c.lower()\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(lst) == 1:\n        return lst[0]\n    nums = []\n    for i in lst:\n        if i!= 0 and i!= 1:\n            nums.append(i)\n    l = max(nums)\n    sum_nums = 0\n    while l > 0:\n        if l % 10 == 1:\n            sum_nums += l\n        l = l//10\n    return sum_nums\n",
        "num_ids": 111
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    max = 0\n    for i in lst:\n        s = str(i)\n        if is_prime(int(s[0])) and is_prime(int(s[1])):\n            if max < int(s):\n                max = int(s)\n    return sum([int(s) for s in str(max)])\n",
        "num_ids": 82
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    lst = [int(i) for i in lst]\n    # lst = sorted(lst, reverse=True)\n    prime_numbers = []\n    max_prime = None\n    for num in lst:\n        for i in range(2,num):\n            if num % i == 0:\n                break\n        else:\n            prime_numbers.append(num)\n",
        "num_ids": 93
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst = [x for x in lst if x > 0]\n    if not lst:\n        return 0\n    i = 1\n    prime_num = 0\n    while i < len(lst):\n        j = 2\n        while j < i and not isPrime(j):\n            j += 1\n        while j < i and isPrime(j):\n            prime_num += j\n            i += 1\n    return prime_num\n",
        "num_ids": 104
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    import math\n    primes = []\n    for i in lst:\n        if i > 0:\n            if i not in primes:\n                primes.append(i)\n                for j in range(1,int(math.sqrt(i))+1):\n                    if i % j == 0:\n                        primes.append(j)\n                        primes.append(i//j)\n                        if i!= j and i!= i//j:\n                            primes.append(i//j)\n    \n    return sum([int(i) for i in str(max(primes))])\n    \nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nprint(skjkasdkd([0,81,12,3,1,21]))\nprint(skjkasdkd([0,8,1,2,1,7]))",
        "num_ids": 372
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = []\n    for i in lst:\n        if int(i) == 1:\n            break\n        elif int(i) == 0:\n            n.append(i)\n        else:\n            for j in range(2,int(i)):\n                if int(i)%j == 0:\n                    break\n            else:\n                n.append(i)\n    return sum(list(map(int,n)))\n",
        "num_ids": 104
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    lst = list(lst)\n    for i in range(len(lst)):\n        if not lst[i] > 1:\n            return 0\n    def isPrime(n):\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    max_num = max(lst)\n    while max_num > 1:\n        for i in range(len(lst)):\n            if isPrime(int(str(lst[i])+str(max_num))):\n                max_num = max_num - int(str(lst[i])+str(max_num))\n                break\n    return max_num\n",
        "num_ids": 175
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    i = 0\n    biggest_prime_number = 0\n    while i < len(lst):\n        if is_prime(i):\n            if i > biggest_prime_number:\n                biggest_prime_number = i\n        i += 1\n    digits = 0\n    while biggest_prime_number!= 0:\n        digits += int(str(biggest_prime_number)[-1])\n        biggest_prime_number -= 1\n    return digits\n",
        "num_ids": 112
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lst.sort()\n    for i in lst:\n        if i == 0:\n            lst.remove(0)\n        else:\n            break\n    for i in lst:\n        if i == 1:\n            lst.remove(i)\n    for i in lst:\n        if i == 2:\n            lst.remove(i)\n    for i in lst:\n        if i == 3:\n            lst.remove(i)\n    for i in lst:\n        if i == 4:\n            lst.remove(i)\n    for i in lst:\n        if i == 5:\n            lst.remove(i)\n    for i in lst:\n        if i == 6:\n            lst.remove(i)\n    for i in lst:\n        if i == 7:\n            lst.remove(i)\n    for i in lst:\n        if i == 8:\n            lst.remove(i)\n    for i in lst:\n        if i == 9:\n            lst.remove(i)\n    for i in lst:\n        if i == 10:\n            lst.remove(i)\n    for i in lst:\n        if i == 11:\n            lst.remove(i)\n    for i in lst:\n        if i == 12:\n            lst.remove(i)\n    for i in lst:\n        if i == 13:\n            lst.remove(i)\n    for i in lst:\n        if i == 14:\n            lst.remove(i)\n    for i in lst:\n        if i == 15:\n            lst.remove(i)\n    for i in lst:\n        if i == 16:\n            lst.remove(i)\n    for i in lst:\n        if i == 17:\n            lst.remove(i)\n    for i in lst:\n        if i == 18:\n            lst.remove(i)\n    for i in lst:\n        if i == 19:\n            lst.remove(i)\n    for i in lst:\n        if i == 20:\n            lst.remove(i)\n    for i in lst:\n        if i == 21:\n            lst.remove(i)\n    for i in lst:\n        if i == 22:\n            lst.remove(i)\n    for i in lst:\n        if i == 23:\n            lst.remove(i)\n    for i in lst:\n        if i == 24:\n            lst.remove(i)\n    for i in lst:\n        if i == 25:\n            lst.remove(i)\n    for i in lst:\n        if i == 26:\n            lst.remove(i)\n    for i in lst:\n        if i == 27:\n            lst.remove(i)\n    for i in lst:\n        if i == 28:\n            lst.remove(i)\n    for i in lst:\n        if i == 29:\n            lst.remove(i)\n    for i in lst:\n        if i == 30:\n            lst.remove(i)\n    for i in lst:\n        if i == 31:\n            lst.remove(i)\n    for i in lst:\n        if i == 32:\n            lst.remove(i)\n    for i in lst:\n        if i == 33:\n            lst.remove(i)\n    for i in lst:\n        if i == 34:\n            lst.remove(i)\n    for i in lst:\n        if i == 35:\n            lst.remove(i)\n    for i in lst:\n        if i == 36:\n            lst.remove(i)\n    for i in lst:\n        if i == 37:\n            lst.remove(i)\n    for i in lst:\n        if i == 38:\n            lst.remove(i)\n    for i in lst:\n        if i == 39:\n            lst.remove(i)\n    for i in lst:\n        if i == 40:\n            lst.remove(i)\n    for i in lst:\n        if i == 41:\n            lst.remove(i)\n    fo",
        "num_ids": 1025
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    lst = sorted(lst)\n    lst = sorted(lst, key = lambda x: x%2 == 0, reverse = True)\n    i = 0\n    lst_len = len(lst)\n    while i < lst_len:\n        j = 0\n        while j < 10:\n            if lst[i] == j:\n                return (lst[i]*(10-j))\n            j += 1\n        i += 1\n",
        "num_ids": 113
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    if len(dict) == 0:\n        return False\n    \n    for k in dict:\n        if type(k)!= str or type(dict[k])!= str:\n            return False\n        if k.isupper():\n            return False\n        if k.islower():\n            return False\n    return True\n    \n    \n    \n",
        "num_ids": 84
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for key in dict.keys():\n            if not key.isalpha():\n                return False\n        for key in dict.keys():\n            if key.isupper():\n                if not key.islower():\n                    return False\n        return True\n",
        "num_ids": 75
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if dict == {}:\n        return False\n    for key in dict:\n        if type(key)!= str:\n            return False\n    for key in dict:\n        if key.islower()!= True and key.isupper()!= True:\n            return False\n    return True\n        \n",
        "num_ids": 71
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if dict:\n        return all(isinstance(key, str) for key in dict.keys()) and all(isinstance(value, str) for value in dict.values())\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if type(key) is not str:\n            return False\n    for key in dict.keys():\n        if type(key) is not str:\n            return False\n    for key in dict.keys():\n        if type(key) is not str:\n            return False\n    for key in dict.keys():\n        if type(key) is not str:\n            return False\n    return True\n",
        "num_ids": 115
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(dict) > 0:\n        for k,v in dict.items():\n            if not isinstance(k, str) and not isinstance(k, str):\n                return False\n            elif isinstance(k, str) and not k.islower() and not k.isupper():\n                return False\n            elif not isinstance(k, str) and not v.islower() and not v.isupper():\n                return False\n    else:\n        return False\n    return True\n",
        "num_ids": 117
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if dict == {}:\n        return False\n    else:\n        for keys in dict:\n            if not isinstance(keys, str):\n                return False\n            elif keys.islower() == True and keys.isupper() == False:\n                return False\n            elif keys.isupper() == True and keys.islower() == False:\n                return False\n    return True\n",
        "num_ids": 90
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code here.\n    # Your code should be shorter.\n",
        "num_ids": 17
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(dict) == 0:\n        return False\n    for k, v in dict.items():\n        if type(k)!= str:\n            return False\n        if type(v)!= str:\n            return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if dict == {}:\n        return False\n    else:\n        for key in dict.keys():\n            if type(key)!= str:\n                return False\n        for key in dict.keys():\n            if type(key) == str:\n                if key.isupper() == True:\n                    if key.lower() not in dict.keys():\n                        return False\n                elif key.islower() == True:\n                    if key.upper() not in dict.keys():\n                        return False\n    return True\n        \n",
        "num_ids": 121
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    primes = []\n    if n == 0:\n        return primes\n    elif n < 2:\n        return primes\n    else:\n        for num in range(2, n + 1):\n            is_prime = True\n            for prime in primes:\n                if num % prime == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(num)\n        return primes\n",
        "num_ids": 104
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n <= 2:\n        return [2]\n    else:\n        prime = 2\n        for i in range(3, n + 1):\n            if is_prime(i):\n                prime += 1\n        return [prime] + count_up_to(n - prime)\n",
        "num_ids": 67
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return []\n    else:\n        l = []\n        for i in range(2, n+1):\n            if is_prime(i):\n                l.append(i)\n        return l\n",
        "num_ids": 55
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # TODO: your code here\n    if n == 0:\n        return []\n    elif n == 1:\n        return [2]\n    else:\n        prime = [2]\n        for num in range(3, n + 1):\n            is_prime = True\n            for prime_el in prime:\n                if num % prime_el == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime.append(num)\n        return prime\n",
        "num_ids": 115
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    primes = []\n    for i in range(1, n + 1):\n        flag = True\n        for j in range(2, i):\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            primes.append(i)\n    return primes\n",
        "num_ids": 72
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    primes = [2,3,5,7]\n    if n == 1:\n        return []\n    if n == 0:\n        return []\n    count = 1\n    while count <= n:\n        for prime in primes:\n            if count % prime == 0:\n                break\n        else:\n            primes.append(count)\n        count += 1\n    return primes\n    \ndef count_up_to2(n):\n    \"\"\"\n    implement a function that takes an non-negative integer n and returns an array of the first n integers, which are prime numbers, that are less than or equal to n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    if n == 1:\n        return []\n    if n == 0:\n        return []\n    count = 1\n    while count <= n:\n        for prime in primes:\n            if count % prime == 0:\n                break\n        else:\n            primes.append(count)\n        count += 1\n    return primes\n",
        "num_ids": 351
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n <= 0:\n        return []\n    if n == 1:\n        return [2]\n    prime = False\n    for i in range(2, n):\n        if n % i == 0:\n            prime = False\n            break\n        else:\n            prime = True\n    if prime == True:\n        return count_up_to(n-1) + [n]\n    else:\n        return count_up_to(n-1)\n",
        "num_ids": 108
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    primes = [2,3,5,7]\n    if n < 2:\n        return []\n    if n == 2:\n        return primes\n    if n == 3:\n        return primes + [7]\n    if n == 5:\n        return primes + [7, 11]\n    for i in range(6, n + 1):\n        is_prime = True\n        for p in primes:\n            if i % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n",
        "num_ids": 140
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # some code here\n    n += 1\n    prime_arr = []\n    for i in range(2, n + 1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            prime_arr.append(i)\n    return prime_arr",
        "num_ids": 74
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #Your code here\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    product = a * b\n    while product > 9:\n        product = product // 10\n        if product == 0:\n            return 0\n        if product == 1:\n            return 1\n    return product\n",
        "num_ids": 48
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = a * b\n    d = res % 10\n    while d!= 0:\n        res = res // 10\n        d = res % 10\n    return res // 10\n",
        "num_ids": 43
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return a*b//10\n",
        "num_ids": 9
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = 1\n    for i in range(len(str(a))):\n        result *= int(str(a)[i])\n    for i in range(len(str(b))):\n        result *= int(str(b)[i])\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    else:\n        a = str(a)\n        b = str(b)\n        prod = 1\n        for i in range(len(a)):\n            prod *= int(a[i])\n        for i in range(len(b)):\n            prod *= int(b[i])\n        return prod\n",
        "num_ids": 94
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return (a*b)%10\n",
        "num_ids": 11
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    mult = 1\n    sum = 0\n    if a < 10 and b < 10:\n        return a*b\n    if a == 0 or b == 0:\n        return 0\n    if a < b:\n        a,b = b,a\n    while a!= 0:\n        rem = a%10\n        mult *= rem\n        a = a//10\n    while b!= 0:\n        rem = b%10\n        mult *= rem\n        b = b//10\n    return mult\n",
        "num_ids": 119
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    a, b = int(a), int(b)\n    a_d, b_d = str(a), str(b)\n    product = 1\n    for i in range(len(a_d)):\n        product *= int(a_d[i])\n    for i in range(len(b_d)):\n        product *= int(b_d[i])\n    return product\n",
        "num_ids": 96
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return int(a/10) * int(b/10)\n",
        "num_ids": 17
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    upper_count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            upper_count += 1\n    return upper_count\n    \n",
        "num_ids": 51
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count",
        "num_ids": 39
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = 0\n    for i in range(0, len(s)):\n        if s[i].isupper():\n            res += 1\n        elif s[i].isalpha():\n            if (i % 2 == 0):\n                res += 1\n    return res\n",
        "num_ids": 65
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if s == '':\n        return 0\n    count = 0\n    if len(s) % 2 == 0:\n        vowels = 'AEIOU'\n        for i in range(len(s)):\n            if i % 2 == 0:\n                if s[i].upper() in vowels:\n                    count += 1\n    else:\n        vowels = 'AEIOU'\n        for i in range(len(s)):\n            if i % 2 == 0:\n                if s[i].upper() in vowels:\n                    count += 1\n    return count\n    \ndef count_upper_odd(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in odd indices.\n    \n    For example:\n    count_upper_odd('aBCdEf') returns 1\n    count_upper_odd('abcdefg') returns 0\n    count_upper_odd('dBBE') returns 0\n    \"\"\"\n    if s == '':\n        return 0\n    count = 0\n    if len(s) % 2 == 0:\n        vowels = 'AEIOU'\n        for i in range(len(s)):\n            if i % 2 == 1:\n                if s[i].upper() in vowels:\n                    count += 1\n    else:\n        vowels = 'AEIOU'\n        for i in range(len(s)):\n            if i % 2 == 1:\n                if s[i].upper() in vowels:\n                    count += 1\n    return count\n    \ndef count_upper_even(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper_even('aBCdEf') returns 1\n    count_upper_even('abcdefg') returns 0\n    count_upper_even('dBBE') returns 0\n    \"\"\"\n    if s == '':\n        return 0\n    count = 0\n    if len(s) % 2 == 0:\n        vowels = 'AEIOU'\n        for i in range(len(s)):\n            if i % 2 == 0:\n                if s[i].upper() in vowels:\n                    count += 1\n    else:\n        vowels = 'AEIOU'\n        for i in range(len(s)):\n            if i % 2 == 0:\n                if s[i].upper() in vowels:\n                    count += 1\n    return count\n    \ndef reverse_r(s):\n    \"\"\"\n    Given a string s, reverse s's characters in place.\n    \n    For example:\n    reverse_r('Hello') returns 'olleH'\n    reverse_r('Hi') returns 'iH'\n    reverse_r('Hola') returns 'olleH'\n    \"\"\"\n    if s == '':\n        return s\n    for i in range(len(s) // 2):\n        s = s[:i] + s[i+1:][::-1] + s[i]\n    return s\n",
        "num_ids": 719
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return int(round(float(value) / 10) * 10)",
        "num_ids": 17
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return int(value)\n",
        "num_ids": 8
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return int(value)\n",
        "num_ids": 8
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Convert value to int\n    int_val = int(value)\n",
        "num_ids": 18
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code here\n    return int(round(value))\n",
        "num_ids": 16
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    def integer_helper(value):\n        num = int(value)\n        if (num - value) == 0.5:\n            return int(num + 1)\n        return num\n    \n    return integer_helper(value)\n",
        "num_ids": 59
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = float(value)\n    if n == int(n):\n        return int(n)\n    return int(round(n))\n",
        "num_ids": 34
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    number = float(value)\n    number_as_int = int(number)\n",
        "num_ids": 21
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return int(round(float(value)))\n",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return int(round(float(value)))\n",
        "num_ids": 12
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n % 2 == 0:\n        n += 1\n    return range(1, n + 1)\n",
        "num_ids": 26
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [n] + [make_a_pile(n-1)[i] + 1 if i % 2 == 0 else make_a_pile(n-1)[i] + 2 for i in range(len(make_a_pile(n-1)))]\n",
        "num_ids": 65
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(list(range(n + 1)))\n",
        "num_ids": 14
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    if n % 2 == 0:\n        result.append(n)\n        n = n - 2\n    else:\n        result.append(n)\n        n = n - 1\n    while n > 0:\n        result.append(n)\n        if n % 2 == 0:\n            n = n - 2\n        else:\n            n = n - 1\n    return result\n",
        "num_ids": 95
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n > 0, \"n should be positive\"\n",
        "num_ids": 14
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert n > 0\n    if n % 2 == 0:\n        return [n] + make_a_pile(n+1)\n    else:\n        return [n] + make_a_pile(n+2)\n",
        "num_ids": 56
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n <= 0:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (list(range(n, 0, -2)) +\n        [n - (n-1) // 2] * (n % 2 == 0))\n",
        "num_ids": 38
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return[n, n + 1, n + 2]\n",
        "num_ids": 15
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not is_positive_integer(n):\n        raise ValueError(\"n must be a positive integer.\")\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n",
        "num_ids": 46
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    words = s.split(\",\")\n    return words\n",
        "num_ids": 15
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your Code Here\n    s=s.split(\" \")\n    return s\n",
        "num_ids": 21
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # YOUR CODE HERE\n    return s.split()\n",
        "num_ids": 14
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    return s.split(',')\n",
        "num_ids": 12
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    s = s.replace(',','')\n    s = s.split(' ')\n    s = s[:-1]\n    return s\n",
        "num_ids": 38
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # remove all the whitespace\n    s = s.replace(\" \", \"\")\n    # split the string into words\n    s = s.split(\", \")\n    return s\n",
        "num_ids": 43
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return s.split()\n",
        "num_ids": 8
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l = []\n    for i in range(x, y+1):\n        if i%2 == 0:\n            l.append(i)\n    if len(l) == 0:\n        return -1\n    else:\n        return max(l)\n",
        "num_ids": 62
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = -1\n    if x % 2 == 0:\n        result = x\n    if y % 2 == 0:\n        result = y\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # your code here\n    return -1\n",
        "num_ids": 12
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if x < y:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return min(x, y) if x % 2 == 0 else max(x, y) if x % 2 == 0 else -1\n",
        "num_ids": 32
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if x % 2 == 0:\n        return x\n    else:\n        if x <= y:\n            return choose_num(y, x)\n        else:\n            return -1\n",
        "num_ids": 47
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # YOUR CODE GOES HERE\n    if x % 2 == 0:\n        x += 1\n    if y % 2 == 0:\n        y += 1\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            return num\n    return -1\n",
        "num_ids": 68
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # YOUR CODE GOES HERE\n    # WRITE YOUR CODE HERE\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n",
        "num_ids": 42
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    while x < y:\n        x += 2\n        if x % 2 == 0:\n            return x\n    return -1\n",
        "num_ids": 31
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n    elif n == m:\n        return \"0b%d\" % int(bin(n)[2:], 2)\n    else:\n        return \"0b%d\" % int(bin(n+1)[2:], 2)\n",
        "num_ids": 69
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n > m:\n        return -1\n    return bin(int((n + m - 1)/2)).replace(\"0b\", \"\")\n",
        "num_ids": 35
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n    result = 0\n    for i in range(n, m + 1):\n        result += i\n    result = result // (m - n + 1)\n    return bin(result)[2:]\n",
        "num_ids": 58
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    if n > m:\n        return -1\n    \n    rounded = int(round(n/m * 2**32))\n    return \"{0:b}\".format(rounded)\n    ",
        "num_ids": 47
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n > m:\n        return -1\n    if n == m:\n        return \"0b1\"\n    return \"0b1\" + \"{:.0f}\".format(round((n + m) / 2))\n",
        "num_ids": 55
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n > m:\n        return -1\n    else:\n        return int((n + m - 1) / 2)\n",
        "num_ids": 31
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n > m:\n        return -1\n    else:\n        return (n + m) // 2\n",
        "num_ids": 27
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    rounded_avg = 0\n    while n <= m:\n        rounded_avg += n\n        n += 1\n    if rounded_avg <= m:\n        return -1\n    else:\n        return rounded_avg\n",
        "num_ids": 55
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n > m:\n        return -1\n    res = 0\n    for i in range(n, m + 1):\n        res += i\n    return int(res / (m - n + 1))\n",
        "num_ids": 50
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return '0b' + str(int(n//(m-n) * 2 + 1))\n",
        "num_ids": 25
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted([i for i in x if not i % 2])\n",
        "num_ids": 17
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    new_list = []\n    for num in x:\n        num = str(num)\n        if len(num) % 2 == 0:\n            new_list.append(num)\n    return sorted(new_list)\n",
        "num_ids": 54
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Create a set of numbers.\n    numbers = set(x)\n",
        "num_ids": 19
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted([num for num in x if len(str(num)) % 2 == 1])\n",
        "num_ids": 23
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #if it's empty, return empty list\n    if not x:\n        return []\n",
        "num_ids": 22
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    digs = []\n    for n in x:\n        while n!= 0:\n            if n % 10 % 2 == 0:\n                digs.append(n)\n            n //= 10\n    return sorted(digs)\n",
        "num_ids": 56
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted([num for num in x if num not in set(str(num))])\n",
        "num_ids": 22
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # A list of numbers in the list\n    numbers = list(x)\n    # A dictionary to keep track of the evens and odds\n    odds = {}\n    # An empty list to store the unique numbers\n    result = []\n",
        "num_ids": 56
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(set(x))\n",
        "num_ids": 10
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert x, 'Empty list.'\n",
        "num_ids": 10
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (lambda arr: (lambda arr: (lambda arr: (lambda arr: (lambda arr: (lambda arr: (lambda arr: (lambda arr: (lambda arr: arr)(arr))(arr))(arr))(arr))(arr))(arr))(arr))(arr))(arr))(arr)\n",
        "num_ids": 71
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    def get_name(arr):\n        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n",
        "num_ids": 42
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    try:\n        if arr == None:\n            return []\n        if len(arr) == 0:\n            return []\n        \n        arr_reverse = []\n        # for every element in the array, reverse it\n        for i in range(len(arr)):\n            arr_reverse.append(arr[i])\n        arr_reverse.reverse()\n        \n        # add each element in the reverse array to a new array\n        arr_numbers = []\n        for i in range(len(arr)):\n            number = arr_reverse[i]\n            number_str = str(number)\n            \n            # if the number is between 1 and 9, and its value is between 1 and 9\n            # add it to the array\n            if number_str[0] == \"1\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"2\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"3\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"4\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"5\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"6\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"7\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"8\":\n                arr_numbers.append(number_str)\n            if number_str[0] == \"9\":\n                arr_numbers.append(number_str)\n        \n        # we reverse the array to get the right order\n        arr_numbers.reverse()\n        \n        # for each number in the numbers array, replace its digit by its name\n        numbers_names = []\n        for i in range(len(arr_numbers)):\n            number = arr_numbers[i]\n            number_str = number[0]\n            if number_str == \"1\":\n                numbers_names.append(\"One\")\n            if number_str == \"2\":\n                numbers_names.append(\"Two\")\n            if number_str == \"3\":\n                numbers_names.append(\"Three\")\n            if number_str == \"4\":\n                numbers_names.append(\"Four\")\n            if number_str == \"5\":\n                numbers_names.append(\"Five\")\n            if number_str == \"6\":\n                numbers_names.append(\"Six\")\n            if number_str == \"7\":\n                numbers_names.append(\"Seven\")\n            if number_str == \"8\":\n                numbers_names.append(\"Eight\")\n            if number_str == \"9\":\n                numbers_names.append(\"Nine\")\n        \n        # return the array\n        return numbers_names\n    except Exception:\n        raise Exception",
        "num_ids": 700
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code here\n    return []\n",
        "num_ids": 11
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    arr = sorted(arr)\n    arr = sorted(arr, key=int)\n    arr = sorted(arr, key=str, reverse=True)\n    res = []\n    for i in arr:\n        if i >= 1 and i <= 9:\n            res.append(tens[i])\n        else:\n            res.append(i)\n    return res\n",
        "num_ids": 87
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return_array = []\n",
        "num_ids": 8
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # return sorted(arr, reverse=True)\n    return [_sort_digits_by_length(x) for x in arr]\n",
        "num_ids": 34
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # your code here\n    if not arr:\n        return []\n    arr = sorted(arr)\n    reversed_arr = arr[::-1]\n    \n    names = []\n    for i in range(1, 10):\n        names.append(str(i))\n    \n    sorted_arr = [names[x-1] for x in reversed_arr]\n    \n    return sorted_arr\n",
        "num_ids": 98
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    return list(map(factorial, range(1, n + 1)))",
        "num_ids": 57
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    factorial_list = []\n    for i in range(n):\n        if i % 2 == 0:\n            factorial_list.append(i)\n        else:\n            factorial_list.append(i * i)\n    return factorial_list\n",
        "num_ids": 62
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = []\n    for i in range(n):\n        if i % 2 == 0:\n            res.append(i)\n        else:\n            res.append(1*i)\n    return res\n",
        "num_ids": 50
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # TODO: Implement the function f that takes n as a parameter,\n    # and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    # or the sum of numbers from 1 to i otherwise.\n    # i starts from 1.\n    # the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n",
        "num_ids": 166
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    factorial_list = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial_list.append(i)\n        else:\n            factorial_list.append(i * (i + 1))\n    return factorial_list\n",
        "num_ids": 69
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    return f(n-1) + [i*n for i in f(n-1)]\n",
        "num_ids": 63
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    list = []\n    list.append(1)\n    for i in range(2, n+1):\n        if i%2==0:\n            list.append(list[i-1]*i)\n        else:\n            list.append(list[i-1]+i)\n    return list\n",
        "num_ids": 73
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(i)\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return ([i if i % 2 == 0 else 1 / i for i in range(1, n + 1)])\n",
        "num_ids": 28
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(int(math.factorial(i)))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # O(n) time, O(n) space\n    def is_palindrome(n):\n        \"\"\"\n        >>> is_palindrome(3)\n        True\n        >>> is_palindrome(10)\n        False\n        \"\"\"\n        digits = []\n        while n:\n            digits.append(n % 10)\n            n //= 10\n        while len(digits) and digits[-1] == 0:\n            digits.pop()\n",
        "num_ids": 112
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    res = (0, 0)\n",
        "num_ids": 10
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        # determine if the given integer is palindrome.\n        is_palindrome = True\n        for j in range(len(str(i)) // 2):\n            if str(i)[j]!= str(i)[~j]:\n                is_palindrome = False\n                break\n        if is_palindrome:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n",
        "num_ids": 143
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count_even, count_odd = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i) and is_palindrome(str(i)[::-1]):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n",
        "num_ids": 93
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    even_cnt, odd_cnt = 0, 0\n",
        "num_ids": 16
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n < 10:\n        return (1, n - 1)\n    even_count, odd_count = 0, 0\n    is_odd = True\n",
        "num_ids": 38
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert 1 <= n <= 10**3, 'n is out of range!'\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n",
        "num_ids": 96
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    even = 0\n    odd = 0\n",
        "num_ids": 11
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    total_even_pali = 0\n    total_odd_pali = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i) and is_palindrome(i + 1):\n            total_even_pali += 1\n        elif is_palindrome(i) and not is_palindrome(i + 1):\n            total_odd_pali += 1\n    return total_even_pali, total_odd_pali\n",
        "num_ids": 116
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    even_count = 0\n    odd_count = 0\n",
        "num_ids": 15
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    return len(list(filter(lambda x: str(x).count('1') > 0, arr)))\n",
        "num_ids": 32
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(arr) == 0:\n        return 0\n    # initialise\n    counter = 0\n    for num in arr:\n        if is_num_valid(num):\n            counter += 1\n    return counter\n",
        "num_ids": 52
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum(1 for elem in arr if has_digits(elem))\n",
        "num_ids": 21
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum(map(lambda x: sum(int(d) for d in str(x)), arr)) > 0\n",
        "num_ids": 28
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    arr_len = len(arr)\n    count = 0\n    for i in range(arr_len):\n        if sum_digits(arr[i]) > 0:\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(filter(lambda x: x > 0, map(int, map(\"\".join, arr))))\n",
        "num_ids": 26
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for num in arr:\n        if get_digits(num) > 0:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for num in arr:\n        count += num.count(num[0])\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in arr:\n        if digits(i) > 0:\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for num in arr:\n        if num >= 0:\n            if sum(divmod(num,10)) > 0:\n                count += 1\n        else:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    if arr == []:\n        return True\n    else:\n        i = 0\n        while i < len(arr):\n            if i == 0:\n                if arr[i] > arr[i+1]:\n                    return False\n                i += 1\n            elif i == len(arr)-1:\n                if arr[i] > arr[i-1]:\n                    return False\n                i += 1\n            else:\n                if arr[i] > arr[i+1] or arr[i] < arr[i-1]:\n                    return False\n                i += 1\n        return True\n",
        "num_ids": 140
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def move_one(arr, num):\n        #start from the right\n        start_index = len(arr)-1\n        i=start_index\n        while i>0 and arr[i-1]>=arr[i]:\n            i-=1\n        if i<start_index:\n            return False\n        #move left\n        while i>start_index:\n            arr[i],arr[i-1]=arr[i-1],arr[i]\n            i-=1\n        return True\n    if len(arr)==0:\n        return True\n    while True:\n        if move_one(arr, arr[0]):\n            return True\n        arr.pop(0)\n    return False\n",
        "num_ids": 170
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def increase(arr):\n        for i in range(len(arr)):\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    else:\n        return increase(arr[1:]) and increase(arr[:-1])\n",
        "num_ids": 93
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # base case\n    if len(arr) == 0:\n        return True\n    \n    # finding the minimum element\n    min_element = min(arr)\n    # shifting the value of index 'i' \n    # to the right most position\n    arr[-1] = arr[-1] >> 1\n",
        "num_ids": 74
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if arr ==[]:\n        return True\n    elif len(arr)==1:\n        return True\n    else:\n        arr = sorted(arr)\n        count = 0\n        while count<len(arr)-1:\n            count += 1\n            if arr[count]<=arr[count-1]:\n                return False\n        return True\n        \n    \ndef get_max_number_from_array(arr):\n    \"\"\"Given an array of integers, find the maximum value in the array and\n    return it.\n",
        "num_ids": 125
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # edge case\n    if len(arr) == 0:\n        return True\n    # base case\n    if len(arr) == 1:\n        return True if arr[0] == 0 else False\n    \n    # recursive case\n    last = arr[-1]\n    arr = arr[:-1] + arr\n    # left shift\n    if last >= min(arr):\n        return move_one_ball(arr)\n    # right shift\n    elif last <= max(arr):\n        return move_one_ball(arr)\n    return False\n",
        "num_ids": 130
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    #edge case\n    if len(arr)==0:\n        return True\n    \n    #edge case\n    if len(arr)==1:\n        return True\n    \n    #edge case\n    if len(arr)==2:\n        if arr[0]<arr[1]:\n            return True\n        else:\n            return False\n    \n    #edge case\n    if len(arr)==3:\n        if arr[0]<arr[1] and arr[0]<arr[2]:\n            return True\n        else:\n            return False\n    \n    #edge case\n    if len(arr)==4:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3]:\n            return True\n        else:\n            return False\n    \n    #edge case\n    if len(arr)==5:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4]:\n            return True\n        else:\n            return False\n    \n    #edge case\n    if len(arr)==6:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4] and arr[4]<arr[5]:\n            return True\n        else:\n            return False\n    \n    #edge case\n    if len(arr)==7:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4] and arr[4]<arr[5] and arr[5]<arr[6]:\n            return True\n        else:\n            return False\n    \n    \n    #edge case\n    if len(arr)==8:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4] and arr[4]<arr[5] and arr[5]<arr[6] and arr[6]<arr[7]:\n            return True\n        else:\n            return False\n    \n    #edge case\n    if len(arr)==9:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4] and arr[4]<arr[5] and arr[5]<arr[6] and arr[6]<arr[7] and arr[7]<arr[8]:\n            return True\n        else:\n            return False\n    \n    #edge case\n    if len(arr)==10:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4] and arr[4]<arr[5] and arr[5]<arr[6] and arr[6]<arr[7] and arr[7]<arr[8] and arr[8]<arr[9]:\n            return True\n        else:\n            return False\n    \n    #edge case\n    if len(arr)==11:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4] and arr[4]<arr[5] and arr[5]<arr[6] and arr[6]<arr[7] and arr[7]<arr[8] and arr[8]<arr[9] and arr[9]<arr[10]:\n            return True\n        else:\n            return False\n    \n    #edge case\n    if len(arr)==12:\n        if arr[0]<arr[1] and arr[1]<arr[2] and arr[2]<arr[3] and arr[3]<arr[4] and arr[4]<arr[5] and arr[5]<arr[6] and arr[6]<arr[7] and arr[7]<arr[8] and arr[8]<arr[9] and arr[9]<arr[10] and ar",
        "num_ids": 1025
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(arr) == 0:\n        return True\n    \n    if len(arr) == 1:\n        return True\n",
        "num_ids": 31
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # \n    # \n    # ********** START of your code **********#\n    # Your code here\n    # ********** END of your code **********#\n    # \n    # \n    # ********** START of your code **********#\n    # Your code here\n    # ********** END of your code **********#\n    # \n    # \n    # ********** START of your code **********#\n    # Your code here\n    # ********** END of your code **********#\n    # \n    # \n    # ********** START of your code **********#\n    # Your code here\n    # ********** END of your code **********#\n    # \n    return True\n",
        "num_ids": 177
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    try:\n        if arr:\n            if len(arr) == 1:\n                return True\n            i = 0\n            while i < len(arr) - 1:\n                if arr[i] < arr[i + 1]:\n                    arr.pop(i)\n                    arr.insert(i, arr.pop(i + 1))\n                    i = 0\n                else:\n                    i += 1\n            return True\n        else:\n            return True\n    except TypeError:\n        return False\n",
        "num_ids": 115
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    lst1 = sorted(lst1)\n    lst2 = sorted(lst2)\n    while len(lst1) > 0 and len(lst2) > 0:\n        if lst1[0]!= 2 * lst2[0]:\n            return \"NO\"\n        lst1.pop(0)\n        lst2.pop(0)\n    return \"YES\"\n",
        "num_ids": 97
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    # your code here\n",
        "num_ids": 9
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(lst1)):\n        if lst1[i]%2!=0 or lst2[i]%2!=0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 54
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst1_even = []\n    lst2_even = []\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            lst1_even.append(lst1[i])\n    for j in range(len(lst2)):\n        if lst2[j] % 2 == 0:\n            lst2_even.append(lst2[j])\n    if len(lst1_even) < len(lst2_even):\n        return \"NO\"\n    else:\n        for i in range(len(lst1_even)):\n            if lst2_even.index(lst1_even[i])!= i:\n                return \"NO\"\n        return \"YES\"\n",
        "num_ids": 188
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # 1. Check if the input lists are empty\n    if lst1 == [] or lst2 == []:\n        return \"NO\"\n",
        "num_ids": 34
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count_even = 0\n    for i in lst1:\n        if i%2 == 0:\n            count_even += 1\n    if count_even == 0:\n        return \"NO\"\n    else:\n        for j in lst2:\n            if j%2 == 0:\n                count_even -= 1\n        if count_even == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n",
        "num_ids": 102
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    lst1 = sorted(lst1)\n    lst2 = sorted(lst2)\n",
        "num_ids": 25
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    even_list = []\n    odd_list = []\n    even_count = 0\n    odd_count = 0\n    \n    #even_list = even_list + lst1\n    #odd_list = odd_list + lst2\n    \n    for i in lst1:\n        if i % 2 == 0:\n            even_list.append(i)\n            even_count += 1\n        else:\n            odd_list.append(i)\n            odd_count += 1\n",
        "num_ids": 119
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(test) == 0:\n        return {}\n    res = {}\n    for i in test:\n        if i in res:\n            res[i] += 1\n        else:\n            res[i] = 1\n    return res\n",
        "num_ids": 58
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    dict_letters = {}\n    \n    # Using split and len to separate the letters and the count\n    for i in range(0, len(test)):\n        # Adding the letter as the key in the dictionary and the count of each letter as the value\n        dict_letters[test[i]] = test.count(test[i])\n    \n    # Sorting the dictionary by value and getting the key\n    sorted_letters = sorted(dict_letters.items(), key=lambda x: x[1], reverse=True)\n    \n    return {k:v for (k, v) in sorted_letters}\n",
        "num_ids": 143
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    d = {}\n    for l in test:\n        if l in d:\n            d[l] += 1\n        else:\n            d[l] = 1\n    return d\n",
        "num_ids": 46
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    histogram = {}\n    for letter in test:\n        if histogram.get(letter) == None:\n            histogram[letter] = 1\n        else:\n            histogram[letter] += 1\n    return histogram\n",
        "num_ids": 54
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = {}\n    if not test:\n        return result\n    for letter in test:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # Set up a dictionary that stores the letter and the number of occurrences\n    hist = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) + 1\n    return hist\n",
        "num_ids": 52
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return {x: test.count(x) for x in set(test)}\n",
        "num_ids": 20
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    d = {}\n    for letter in test:\n        if letter not in d:\n            d[letter] = 1\n        else:\n            d[letter] += 1\n    return d\n",
        "num_ids": 45
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if test == '':\n        return {}\n    dic = {}\n    test = test.lower()\n    for ch in test:\n        if ch in dic:\n            dic[ch] += 1\n        else:\n            dic[ch] = 1\n    return dic\n",
        "num_ids": 68
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    d = {}\n    for i in test:\n        d[i] = d.get(i, 0) + 1\n    return d\n",
        "num_ids": 34
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = s[::-1]\n    for i in range(len(c)):\n        if c[i] == s[i]:\n            s = s[:-1]\n        else:\n            return (s,False)\n    return (s,True)\n",
        "num_ids": 64
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    i = 0\n    while i < len(s):\n        if s[i] == c[0]:\n            if s[i:i+len(c)] == c:\n                return (s[:i]+s[i+len(c):],True)\n        i += 1\n    return (s,False)\n",
        "num_ids": 76
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    ans=''\n    c_list=[]\n    for i in range(len(c)):\n        c_list.append(c[i])\n    \n    for i in range(len(s)):\n        if s[i] in c_list:\n            ans += s[i]\n    ans = ''.join(ans)\n    if s == ans:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "num_ids": 108
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l = []\n    for i in range(len(s)):\n        l.append(s[i])\n    for i in range(len(s)):\n        if(s[i] in c):\n            l.remove(s[i])\n    if(l==[]):\n        return (\"Empty String\",True)\n    else:\n        return (\"\".join(l),False)",
        "num_ids": 92
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if c == \"\":\n        return (s,False)\n    if len(c)==1:\n        return (s.replace(c,\"\"),True)\n    else:\n        return (s.replace(c[0],c[1:]),True if s==s[::-1] else False)\n",
        "num_ids": 73
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if c in s:\n        l = s.split(c)\n        if l[0] == l[1][::-1]:\n            return (c.join(l[1:]),True)\n        else:\n            return (\"\",\"\")\n    else:\n        return (s,\"\")\nif __name__ == \"__main__\":\n    s = \"abcdef\"\n    c = \"b\"\n    print(reverse_delete(s,c))\n    s = \"abcde\"\n    c = \"ae\"\n    print(reverse_delete(s,c))\n    s = \"abcdedcba\"\n    c = \"ab\"\n    print(reverse_delete(s,c))\n    ",
        "num_ids": 165
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    #code here\n    for i in range(len(s)-1):\n        if s[i] == s[len(s)-i-1]:\n            s = s[:i]+s[i+1:]\n            break\n    return s,len(s)==len(c)\n",
        "num_ids": 69
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return_value = ()\n    return_val = True\n    length = len(c)\n    for i in range(length):\n        for j in range(length):\n            if s[i]!= c[j]:\n                return_val = False\n                break\n        if not return_val:\n            break\n    if return_val:\n        return_value = (s,True)\n    else:\n        return_value = (s,False)\n    return return_value\n",
        "num_ids": 114
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    p = p1 = s.find(c)\n    if p!= -1:\n        s = s[:p]+s[p+1:]\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "num_ids": 69
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # return \"cdedc\", True\n    res=[]\n    for i in s:\n        if i not in c:\n            res.append(i)\n    return \"\".join(res),len(res)==len(s)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1024
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return ['the number of odd elements'+ str(i) + 'n the str' + str(i) +'of the'+ str(i) + 'input.' for i in range(1, len(lst) + 1)]\n",
        "num_ids": 56
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [\"the number of odd elements {}n the str{} of the {}nput.\".format(len(lst), x, x) for x in range(1, len(lst) + 1)]\n",
        "num_ids": 49
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return ['the number of odd elements {}n the str{} of the {}nput.'.format(len(lst),\n                                                                            i+1, i+1) for i in range(len(lst))]\n",
        "num_ids": 53
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    output = []\n    for string in lst:\n        count = 0\n        for digit in string:\n            if digit % 2!= 0:\n                count += 1\n        output.append(f\"the number of odd elements {count}n the str{count}ng {string} of the {count}nput.\")\n    return output\n",
        "num_ids": 79
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    out = []\n    for item in lst:\n        count = 0\n        for char in item:\n            if char!= '0' and char!= '1':\n                count += 1\n        out.append(f\"the number of odd elements {len(item)}n the str{len(item)} of the {len(item)}nput.\")\n    return out\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)",
        "num_ids": 118
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if len(lst) == 0:\n        return []\n    \n    out = []\n    numbers = []\n    for i in range(0,len(lst)):\n        for c in lst[i]:\n            if c in numbers:\n                numbers.remove(c)\n            else:\n                numbers.append(c)\n        out.append(\"the number of odd elements \" + str(i) + \"n the str\" + str(i) + \"ng \" + str(i) + \"of the \" + str(i) + \"nput.\")\n    out[0] = out[0][10:]\n    return out\n",
        "num_ids": 154
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [f\"the number of odd elements {i}n the str{i}ng {len(lst[i])} of the {i}nput.\" for i in range(len(lst))]\n",
        "num_ids": 50
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    output = []\n    for i in range(len(lst)):\n        num = 0\n        for j in range(len(lst[i])):\n            if lst[i][j]!= \"0\":\n                num += 1\n        output.append(\"the number of odd elements \" + str(num) + \"n the str\" + str(i+1) + \"ng \" + str(num) + \"of the \" + str(i+1) + \"nput.\")\n    return output\n",
        "num_ids": 119
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    lst.sort(key=lambda i: len(i))\n    for i, j in enumerate(lst):\n        if i!= len(lst) - 1:\n            lst[i] = \"the number of odd elements \" + str(len(j) - len(j.replace(\"0\", \"\"))) + \"n the str\" + str(i + 1) + \"ng \" + str(j[:len(j) - len(j.replace(\"0\", \"\"))]) + \" of the \" + str(i + 2) + \"nput.\"\n        else:\n            lst[i] = \"the number of odd elements \" + str(len(j) - len(j.replace(\"0\", \"\"))) + \"n the str\" + str(i + 1) + \"ng \" + str(j[:len(j) - len(j.replace(\"0\", \"\"))]) + \" of the \" + str(i + 1) + \"nput.\"\n",
        "num_ids": 228
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        s += nums[i]\n        min_sum = min(min_sum, s)\n        if s < 0:\n            s = 0\n    return min_sum\n",
        "num_ids": 70
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(nums) == 0:\n        return 0\n    result = None\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if result == None or result > current_sum:\n            result = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return result\n",
        "num_ids": 83
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(nums) == 0:\n        return 0\n    min_sum = nums[0]\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n        if sum < min_sum:\n            min_sum = sum\n        if sum < 0:\n            sum = 0\n    return min_sum\n",
        "num_ids": 88
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # If array has size 1 or less, then we return min sum of array\n    if len(nums) <= 1:\n        return min(nums)\n",
        "num_ids": 38
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = float(\"inf\")\n    for i in range(len(nums)):\n        start = i\n        while start < len(nums) and sum(nums[start:]) < result:\n            result = sum(nums[start:])\n            start += 1\n    return result\n    \n    \n",
        "num_ids": 74
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not nums:\n        return 0\n    i = 0\n    min_sum = float('inf')\n    for j in range(len(nums)):\n        min_sum = min(min_sum, nums[j])\n        if min_sum == 0:\n            return min_sum\n        if min_sum == nums[i]:\n            i += 1\n        if min_sum < nums[j]:\n            min_sum = nums[j]\n        else:\n            min_sum += nums[j]\n    return min_sum\n",
        "num_ids": 133
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(nums) == 0:\n        return 0\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(nums[i], min_sum + nums[i])\n    return min_sum\n",
        "num_ids": 70
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    min_sum = None\n    current_sum = 0\n    sums = []\n    for num in nums:\n        current_sum += num\n        if min_sum == None:\n            min_sum = current_sum\n        else:\n            if current_sum > min_sum:\n                min_sum = current_sum\n        sums.append(current_sum)\n    return min_sum\n",
        "num_ids": 95
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not nums:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = len(nums)\n    start, end = 0, 0\n    minSum = float(\"inf\")\n    while start < n:\n        end += 1\n        curr_sum = sum(nums[start:end])\n        minSum = min(minSum, curr_sum)\n        if curr_sum >= 0:\n            start += 1\n    return minSum\n",
        "num_ids": 91
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # number of buckets\n    n = len(grid)\n    # height of the grid\n    h = len(grid[0])\n",
        "num_ids": 34
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Time complexity: O(R*C), R = # rows, C = # cols\n    # Space complexity: O(R*C)\n    def num_empty_buckets(grid, capacity):\n        # find the number of empty buckets\n        # O(R*C) time | O(R*C) space\n        n_empty_buckets = 0\n        for r in range(len(grid)):\n            for c in range(len(grid[0])):\n                if grid[r][c] == 0:\n                    n_empty_buckets += 1\n",
        "num_ids": 134
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    def make_decision(num_wells, capacity):\n        min_fill = math.ceil(capacity / num_wells)\n        curr_fill = 0\n        num_decisions = 0\n        for i, row in enumerate(grid):\n            for j, well in enumerate(row):\n                if well == 1:\n                    curr_fill += 1\n                    if curr_fill == min_fill:\n                        num_decisions += 1\n                        curr_fill = 0\n        return num_decisions\n",
        "num_ids": 126
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def max_fill_recursive(grid, bucket_capacity, wells_max):\n        if not grid:\n            return 0\n",
        "num_ids": 31
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # # Brute Force (Time Limit Exceeded)\n    # max_val = -math.inf\n    # for i in range(len(grid)):\n    #     for j in range(len(grid[0])):\n    #         if grid[i][j] == 1:\n    #             max_val = max(max_val, fill_bucket(grid, i, j, capacity))\n    # return max_val\n",
        "num_ids": 103
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \"\"\"\n    Thoughts:\n        Instead of keeping track of the max height in a 2D array, keep tracking of the max water in a 1D array.\n        Then, as the water climbs, the height is decreased by the water.\n        Now, we can keep track of the max height in a 2D array, and the water in 1D array, and keep track of the max\n        water in a 1D array. Now, once the water is full, we can go through the array and empty each of the wells.\n        Since it is a 0, we can increment the height of each well.\n        We can also use a monotonic queue to simulate the water level in the wells.\n        Finally, once the water level is 0, we can empty the wells.\n    \"\"\"\n    # Code here\n    h_max_well = 0\n    h_max_well_1d = 0\n    total_wells = 0\n    \n    # maintain a 1D max heap.\n    heapq.heapify(max_heap)\n    \n    for i in range(len(grid)):\n        \n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                heapq.heappush(max_heap, (1, i, j))\n        \n        h_max_well = max(h_max_well, max_heap[0][0])\n        h_max_well_1d = max(h_max_well_1d, max_heap[0][0])\n        \n        while h_max_well > 0:\n            curr_val, curr_i, curr_j = heapq.heappop(max_heap)\n            grid[curr_i][curr_j] = 0\n            h_max_well -= curr_val\n            h_max_well_1d -= curr_val\n            total_wells += 1\n    \n    return total_wells\n    \n    ",
        "num_ids": 461
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # initialize the grid\n    n = len(grid)\n    buckets = [[math.inf] * n for i in range(n)]\n    row_cnt = 0\n    col_cnt = 0\n",
        "num_ids": 50
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # # SOLUTION 1\n    # # *************\n    # # This is quite simple and unneccessary, \n    # # it's just use a stack to track the wells' index, \n    # # and the sum of the column in this row.\n    # # Time: O(N^2) | Space: O(N)\n    # m = len(grid)\n    # n = len(grid[0])\n    # res = 0\n    # for i in range(m):\n    #     for j in range(n):\n    #         if grid[i][j] == 1:\n    #             grid[i][j] = 0\n    #             res += 1\n    #     # If there are any wells left in this row, we need to update their capacities\n    #     if any(grid[i]):\n    #         for j in range(n):\n    #             if grid[i][j] == 1:\n    #                 capacity -= 1\n    #                 grid[i][j] = 0\n    #                 if capacity == 0:\n    #                     return res\n",
        "num_ids": 253
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    def min_fill(grid, capacity):\n        import math\n        \"\"\"\n        You are given a rectangular grid of wells. Each row represents a single well,\n        and each 1 in a row represents a single unit of water.\n        Each well has a corresponding bucket that can be used to extract water from it, \n        and all buckets have the same capacity.\n        Your task is to use the buckets to empty the wells.\n        Output the number of times you need to lower the buckets.\n",
        "num_ids": 111
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(arr, key=lambda x: (x, bin(x).count('1')), reverse=True)\n    \n",
        "num_ids": 31
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # return sorted(arr, key=lambda x: (count_ones(x), x))\n    return sorted(arr, key=lambda x: (x, count_ones(x)))\n",
        "num_ids": 44
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Sort by number of ones\n    # Sort by number of ones\n    return sorted(arr, key=lambda x: x % 2)\n",
        "num_ids": 33
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(arr, key=lambda x: x, reverse=True)\n",
        "num_ids": 19
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(len(arr)):\n        for j in range(len(arr) - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n",
        "num_ids": 70
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # arr = [1, 5, 2, 3, 4]\n    # arr = [-2, -3, -4, -5, -6]\n    # arr = [1, 0, 2, 3, 4]\n",
        "num_ids": 53
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n    return sorted(arr, key=lambda x: (int(bin(x).count(\"1\"), x)) )",
        "num_ids": 50
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(arr, key=lambda x: (x*2).bit_length())\n",
        "num_ids": 22
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if s == \"\":\n        return []\n    \n    if s == \" \":\n        return []\n    \n    if n == 0:\n        return []\n    \n    s_words = s.split()\n    \n    words = []\n    \n    for word in s_words:\n        word = word.lower()\n        word = word.strip()\n        \n        for letter in word:\n            if letter in \"aeiou\":\n                break\n        \n        else:\n            words.append(word)\n    \n    return words\n",
        "num_ids": 127
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    # store words in a list\n    words = []\n    # loop through string\n    for i in range(len(s)):\n        # if word's length is less than n, add word to words\n        if len(s[i]) < n:\n            words.append(s[i])\n        # otherwise, get rid of words whose length is equal to n\n        else:\n            words.append(s[i][:n])\n    # return list\n    return words\n",
        "num_ids": 113
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    lst = []\n    words = s.split()\n    if n == 0:\n        return lst\n    for word in words:\n        if n == 0:\n            break\n        if is_consonant(word):\n            lst.append(word)\n            n -= 1\n    return lst\n",
        "num_ids": 74
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    words = []\n    if len(s) == 0:\n        return words\n",
        "num_ids": 20
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    words = s.split()\n    word_list = []\n    for w in words:\n        word_list.append(w)\n        \n    for i in range(len(word_list)):\n        l = len(word_list[i])\n        j = 0\n        k = 0\n        while j < l:\n            if word_list[i][j] not in 'aeiouy':\n                j += 1\n            else:\n                k = j + 1\n                break\n        if k - j >= n:\n            word_list[i] = word_list[i][j:k]\n            \n    return word_list\n",
        "num_ids": 152
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = s.split()\n    return [word for word in s if len(word) == n]\n",
        "num_ids": 26
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    word = \"\"\n    selected_words = []\n",
        "num_ids": 13
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not s:\n        return []\n    else:\n        n = min(n, len(s))\n        return select_words_helper(s, n, set())\n",
        "num_ids": 43
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # input: string s, int n\n    # output: list of words\n    # return all words in s that have exactly n consonants\n    # \"\".join([\"a\"]) -> \"\"\n    # \"\".join([\"a\", \"b\"]) -> \"ab\"\n    # split(\",\") -> ['', '', '']\n    # split(\" \".join([\"a\"])) -> ['a']\n    # split(\" \".join([\"a\", \"b\"])) -> ['a', 'b']\n    # split(s.split(\" \")) -> ['', '', '', '', '', '']\n    # s = \" \".join(s.split(\" \"))\n    s = s.lower().split(\" \")\n    def is_consonant(c):\n        return c.lower() not in \"aeiou\"\n    def count_consonants(s):\n        count = 0\n        for c in s:\n            if is_consonant(c):\n                count += 1\n        return count\n    return [word for word in s if count_consonants(word)==n]\n",
        "num_ids": 256
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # your code here\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(word) < 3:\n        return \"\"\n    if word[0] in \"aeiou\":\n        return word[0]\n    elif word[-1] in \"aeiou\":\n        return word[-1]\n    for i in range(1, len(word) - 1):\n        if word[i] in \"aeiou\":\n            return word[i]\n    return \"\"\n",
        "num_ids": 98
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    start = word[-1]\n    \n    if start in \"aeiouAEIOU\":\n        return start\n",
        "num_ids": 31
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    vowels = \"aeiouAEIOU\"\n    \n    if len(word) < 2:\n        return \"\"\n        \n    else:\n        vowel = \"\"\n        \n        for i in range(len(word)-1, -1, -1):\n            if word[i] in vowels:\n                vowel = word[i]\n                break\n                \n        if vowel == \"\":\n            return \"\"\n                \n        else:\n            i = len(word) - 1\n            while word[i] not in vowels:\n                i = i - 1\n                if i == -1:\n                    return \"\"\n                    \n            return word[i]\n",
        "num_ids": 160
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    for i in range(len(word)-1):\n        if word[i] == word[i+1].lower() and word[i]!= \"a\" and word[i]!= \"i\" and word[i]!= \"o\" and word[i]!= \"u\":\n            return word[i]\n    return \"\"\n",
        "num_ids": 83
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    vowels = 'aeiou'\n    nxt_char = word[-1]\n    closest_vowel = ''\n    for i in word[-2::-1]:\n        if i in vowels:\n            closest_vowel = i\n            break\n    return closest_vowel\n",
        "num_ids": 78
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    vowels = \"aeiou\"\n    \n    # If word contains more than one vowel then return empty string\n    if any(char in vowels for char in word[1:-1]):\n        return \"\"\n    \n    # If word is empty then return empty string\n    if not word:\n        return \"\"\n    \n    # If word contains only one vowel then return that vowel\n    if len(word) == 1:\n        return word\n    \n    # If word contains more than one vowel then check the distance of the vowel to the right side of the word\n    # and the vowel to the left side of the word. If distance to the right is shorter then return the vowel.\n    \n    return word[min(word.index(\"i\"), word.index(\"a\")):max(word.index(\"i\"), word.index(\"a\")) + 1]\n",
        "num_ids": 196
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # make sure that the word contains only english letters\n    if any([not letter.isalpha() for letter in word]):\n        return \"\"\n    \n    # find the index of the last letter that is not vowel\n    # and the second to the last letter that is vowel\n    # since this is an array slice, return an empty string if \n    # the last element is not vowel\n    last_index = len(word) - 1\n    if word[last_index]!= 'a' and word[last_index]!= 'e' and word[last_index]!= 'i' and word[last_index]!= 'o' and word[last_index]!= 'u':\n        return \"\"\n    \n    second_last_index = len(word) - 2\n    if word[second_last_index]!= 'a' and word[second_last_index]!= 'e' and word[second_last_index]!= 'i' and word[second_last_index]!= 'o' and word[second_last_index]!= 'u':\n        return \"\"\n",
        "num_ids": 260
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    word_list = list(word)\n",
        "num_ids": 13
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    def match(lst):\n        if len(lst) <= 1:\n            return lst\n        lst1 = match(lst[1:])\n        for i in range(len(lst)):\n            if lst[0] == ')' and lst1[i] == '(':\n                return lst\n            elif lst[0] == '(' and lst1[i] == ')':\n                return lst\n        return lst\n    lst = match(lst)\n    return 'Yes' if lst == [] else 'No'\n",
        "num_ids": 136
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Initialize stack\n    stack = []\n",
        "num_ids": 12
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    start = 0\n    end = 0\n    count = 0\n    for i, val in enumerate(lst):\n        if val == '(':\n            count += 1\n            start = i\n        elif val == ')':\n            if count > 0:\n                count -= 1\n            else:\n                end = i\n                break\n    if end > start:\n        if validate_parens(lst[start+1:end], start):\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "num_ids": 131
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    while '(' in lst:\n        for i in range(len(lst)):\n            if lst[i] == ')' and lst[i-1] == '(':\n                lst = lst[:i-1] + lst[i+1:]\n                break\n    if '(' in lst:\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 90
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(lst) < 2:\n        return 'No'\n",
        "num_ids": 18
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    from collections import defaultdict\n    if not lst:\n        return 'Yes'\n    ans = []\n    d = defaultdict(int)\n    for i, x in enumerate(lst):\n        if x == '(':\n            d[i] += 1\n        elif x == ')':\n            if d[i] > 0:\n                d[i] -= 1\n            else:\n                return 'No'\n    for i, x in enumerate(lst):\n        if x == '(':\n            d[i] += 1\n        elif x == ')':\n            if d[i] > 0:\n                d[i] -= 1\n            else:\n                ans.append(i)\n    if not ans:\n        return 'Yes'\n    for i in ans:\n        lst[i] = '('\n    return ''.join(lst)\n",
        "num_ids": 206
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    stack = []\n    balanced = 0\n    for paren in lst:\n        if paren == '(':\n            balanced += 1\n            stack.append(paren)\n        else:\n            if balanced == 0:\n                return 'No'\n            else:\n                stack.pop()\n                balanced -= 1\n",
        "num_ids": 73
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    stack = []\n    balanced = True\n    for ch in lst:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if len(stack) == 0:\n                balanced = False\n            else:\n                stack.pop()\n",
        "num_ids": 68
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(lst) == 1:\n        return 'Yes'\n    \n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return 'No'\n        return 'Yes'\n    \n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    \n    for i in range(1, len(lst)):\n        if lst[i-1] == '(' and lst[i] == ')':\n            return 'Yes'\n        if lst[i] == ')' and lst[i-1] == '(':\n            return 'No'\n    return 'No'",
        "num_ids": 164
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Basic idea: the string is balanced if each '(' has an ')' after it.\n    # For example: '(())(' is not balanced, because there's an ')' after the '('\n    # But parentheses inside a string are balanced\n    # Check for balanced parentheses\n    def check_balanced_parens(s):\n        # Check parentheses in a string s\n        if len(s) == 0:\n            return True\n        else:\n            if s[0] == '(':\n                if check_balanced_parens(s[1:]):\n                    return True\n                else:\n                    return False\n            elif s[0] == ')':\n                if check_balanced_parens(s[1:]):\n                    return True\n                else:\n                    return False\n            else:\n                return True\n    # Check for balanced parentheses\n    if check_balanced_parens(lst):\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 222
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # TODO: implement this function\n    return sorted(arr[:k], reverse=True)\n",
        "num_ids": 24
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    for i in range(k):\n        maximum = 0\n        for j in range(len(arr)):\n            if arr[j] > maximum:\n                maximum = arr[j]\n        result.append(maximum)\n        arr.remove(maximum)\n",
        "num_ids": 66
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # brute force\n    #     if k >= len(arr):\n    #         return sorted(arr)\n",
        "num_ids": 26
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if k == len(arr):\n        return arr\n    else:\n        min_val = min(arr[0:k])\n        min_idx = arr.index(min_val)\n        return arr[min_idx:k]\n",
        "num_ids": 59
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # sort the list from max to min and return the first k\n    return sorted(arr, reverse=True)[:k]\n",
        "num_ids": 30
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    nums = sorted(arr)\n    return nums[-k:]\n",
        "num_ids": 19
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    arr.sort(reverse=True)\n    return arr[:k]\n",
        "num_ids": 19
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # If k is even, then we will have to pick k / 2, so we should use\n    # a sorted list in this case.\n    if k % 2 == 0:\n        return maximum_k_in_sorted_array_with_duplicates(arr, k / 2)\n",
        "num_ids": 68
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    arr = sorted(arr, reverse=True)\n",
        "num_ids": 13
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # TODO: Write your code here\n    return max_heap_solution(arr, k)\n",
        "num_ids": 26
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum(i for i in lst if i%2)\n",
        "num_ids": 17
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst) < 2:\n        return 0\n    s, e, so, se = 0, 0, 0, 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            e += lst[i]\n        else:\n            so += lst[i]\n        if i % 2 == 0:\n            se += lst[i]\n        else:\n            s += lst[i]\n    return e - so\n",
        "num_ids": 114
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum([n for i, n in enumerate(lst) if (i + 1) % 2 == 0])\n",
        "num_ids": 29
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst_odd = []\n    for x in range(0, len(lst)):\n        if x % 2 == 0 and x!= 0:\n            lst_odd.append(lst[x])\n    return sum(lst_odd)",
        "num_ids": 61
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(lst[::2])\n",
        "num_ids": 12
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    odds = []\n    for i in range(len(lst)):\n        if (i % 2) == 0:\n            continue\n        else:\n            odds.append(lst[i])\n    return sum(odds)\n",
        "num_ids": 58
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    evens = 0\n    for i, e in enumerate(lst):\n        if e % 2 == 0:\n            evens += e\n    return evens\n",
        "num_ids": 40
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if lst == None or len(lst) == 0:\n        return 0\n    total = 0\n    odd_pos = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            total = total + lst[i]\n        else:\n            odd_pos = odd_pos + lst[i]\n    return total + odd_pos\n",
        "num_ids": 97
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    total = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 1:\n            total += num\n    return total\n",
        "num_ids": 37
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your code here\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    ans = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            ans += arr[i]\n",
        "num_ids": 38
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not arr or k < 1 or k > len(arr):\n        return -1\n    \n    # arr_string = ''.join([str(x) for x in arr])\n    # return sum(int(x) for x in arr_string[:k])\n    # return sum([int(x) for x in str(arr[:k])])\n    \n    res = sum([int(x) for x in str(arr[:k])])\n    k -= 1\n    while k > 0:\n        res += sum([int(x) for x in str(arr[k:k+2])])\n        k -= 1\n    return res\n",
        "num_ids": 153
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    #initialize the dict\n    counts = dict()\n",
        "num_ids": 15
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # For every digit in the first k numbers in the array, we will add it to the number.\n    # We will also look at the remaining numbers and add the closest number to the result.\n    # Since we can't add the closest number in the array, the final result will be at most 24.\n    # Time: O(n + k)\n    # Space: O(k)\n    if k == 0: return 0\n    result = 0\n    for i in range(k):\n        result += min(arr[i], 10)\n    for i in range(k, len(arr)):\n        result += arr[i]\n        result -= arr[i - k]\n    return result\n",
        "num_ids": 159
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = len(arr)\n    if n == 0:\n        return 0\n    if n <= k:\n        return sum(arr)\n",
        "num_ids": 34
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    k_2 = k - 1\n    if k == 0:\n        return sum(arr)\n",
        "num_ids": 24
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # for each element, let's try to pair with the previous element\n    # since we can only pair with those in the range 1 to 9\n    # if we can't, we'll try the next element\n    # if we can, we'll add the value\n    # if we can, we'll add the value\n    # we can continue checking\n    for idx, val in enumerate(arr[:k]):\n        pair_sum = sum(arr[idx:idx+2])\n        if pair_sum < val:\n            arr[idx+2] = pair_sum\n        else:\n            arr[idx+2] = val\n    return sum(arr[:k])\n",
        "num_ids": 160
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = len(arr)\n    res = 0\n    # first and last numbers\n    first = arr[0]\n    last = arr[n-1]\n    for i in range(1, k):\n        first = min(first, arr[i])\n    for i in range(k, n):\n        last = max(last, arr[i])\n    # sum of first and last\n    res += first + last\n    return res\n",
        "num_ids": 104
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not arr or k < 1:\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Time O(n) | Space O(k)\n    arr = sorted(arr[:k])\n    \n    result = 0\n    for i in range(k, len(arr)):\n        result += arr[i]\n    \n    return result\n",
        "num_ids": 61
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    odd_nums = []\n    while n!= 1:\n        if n % 2 == 1:\n            odd_nums.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return sorted(odd_nums)\n",
        "num_ids": 66
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n = int(n)\n    odd_numbers = []\n    # Base case\n    if n == 1:\n        return odd_numbers\n    # Recursive case\n    else:\n        for i in range(1, n+1):\n            if i % 2 == 1:\n                odd_numbers.append(i)\n            else:\n                odd_numbers.append(collatz(i//2))\n",
        "num_ids": 99
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    odd_list = []\n    odd_list.append(1)\n",
        "num_ids": 18
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Edge cases\n    if n < 1:\n        return []\n",
        "num_ids": 17
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    odd_numbers = []\n",
        "num_ids": 9
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    odd_list = []\n    while n!= 1:\n        if n % 2 == 1:\n            odd_list.append(n)\n        n = n//2 if n % 2 == 0 else (3 * n + 1)\n    return sorted(odd_list)\n",
        "num_ids": 65
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # recursive\n    def collatz(n):\n        odd_nums = []\n        while n!= 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = n * 3 + 1\n            odd_nums.append(n)\n        return odd_nums\n    \n    # iterative\n    def odd_collatz(n):\n        odd_nums = [n]\n        while n!= 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = n * 3 + 1\n            odd_nums.append(n)\n        return odd_nums\n",
        "num_ids": 158
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = []\n",
        "num_ids": 6
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    odd_numbers = [1]\n    current = 2\n    while current!= 1:\n        if current % 2 == 0:\n            current = current//2\n        else:\n            current = (3*current)+1\n        odd_numbers.append(current)\n    return sorted(odd_numbers)\n",
        "num_ids": 75
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    months = ['01', '03', '05', '07', '08', '10', '12']\n    days = ['01', '03', '05', '07', '08', '10', '12', '04', '06', '09', '11']\n",
        "num_ids": 63
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    try:\n        month_dict = {'january' : 31, 'february' : 28,'march' : 31, 'april' : 30,'may' : 31, 'june' : 30, 'july' : 31, 'august' : 31,'september' : 30, 'october' : 31, 'november' : 30, 'december' : 31}\n        \n        months = {'january' : 31, 'february' : 28,'march' : 31, 'april' : 30,'may' : 31, 'june' : 30, 'july' : 31, 'august' : 31,'september' : 30, 'october' : 31, 'november' : 30, 'december' : 31}\n",
        "num_ids": 183
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not date:\n        return False\n    date = date.split('-')\n    if len(date[0])!= 2 or len(date[1])!= 2 or len(date[2])!= 4:\n        return False\n    if int(date[0]) in range(1,32) and int(date[1]) in range(1,32):\n        return True\n    elif int(date[0]) in range(1,31) and int(date[1]) in range(1,32):\n        return True\n    elif int(date[0]) in range(1,30) and int(date[1]) in range(1,31):\n        if int(date[0]) == 2:\n            return True\n        elif int(date[0]) in range(4,13) and int(date[1]) in range(1,32):\n            return True\n        elif int(date[0]) in range(1,13) and int(date[1]) in range(1,32):\n            return True\n        elif int(date[0]) in range(1,32) and int(date[1]) in range(1,32):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 295
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    months2 = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    days = ['Sat', 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri']\n",
        "num_ids": 96
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if date == None or date == \"\" or date == \" \":\n        return False\n    month = date[:2]\n    day = date[3:5]\n    year = date[6:]\n    if (month in [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"] and not(day.isdigit() or day == \"31\")):\n        return False\n    elif (month in [\"04\", \"06\", \"09\", \"11\"] and not(day.isdigit() or day == \"30\")):\n        return False\n    elif (month == \"02\" and not(day.isdigit() or day == \"29\")):\n        return False\n    elif (month not in [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"] or day not in [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]):\n        return False\n    elif (month == \"02\" and not(day.isdigit() or day == \"29\")):\n        return False\n    elif not(year.isdigit() or year == \"20\" or year == \"00\" or year == \"2000\"):\n        return False\n    return True\n",
        "num_ids": 364
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return True if len(date)!= 0 and (date[2] == '-' or date[2] == '.') and (\n            date[0] == '0' or int(date[0]) in range(1, 32)) and (\n                date[1] == '0' or int(date[1]) in range(1, 32)) and (\n                    date[3] == '-' or date[3] == '.') and (\n                        date[4] == '0' or int(date[4]) in range(1, 32)) and (\n                            date[5] == '0' or int(date[5]) in range(1, 32)) and (\n                                date[6] == '-' or date[6] == '.') and (\n                                    date[7] == '0' or int(date[7]) in range(1, 32)) and (\n                                        date[8] == '-' or date[8] == '.') and (\n                                            date[9] == '0' or int(date[9]) in range(1, 32)) and (\n                                                date[10] == '-' or date[10] == '.') and (\n                                                    date[11] == '0' or int(date[11]) in range(1, 32)) and (\n                                                        date[12] == '-' or date[12] == '.') else False\n",
        "num_ids": 320
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    isValid = True\n",
        "num_ids": 7
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    date_list = date.split(\"-\")\n    if len(date) == 0:\n        return False\n    if len(date_list)!= 3:\n        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 31:\n        return False\n    if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n        return False\n    if int(date_list[2]) < 1 or int(date_list[2]) > 1000:\n        return False\n    if date_list[1] == \"03\" or date_list[1] == \"04\" or date_list[1] == \"05\":\n        if int(date_list[0]) > 30:\n            return False\n    if date_list[1] == \"06\" or date_list[1] == \"07\" or date_list[1] == \"08\":\n        if int(date_list[0]) > 29:\n            return False\n    if date_list[1] == \"09\" or date_list[1] == \"10\" or date_list[1] == \"11\":\n        if int(date_list[0]) > 28:\n            return False\n    if date_list[1] == \"12\":\n        if int(date_list[0]) > 31:\n            return False\n    return True\n",
        "num_ids": 324
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    days = ['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31']\n    months = ['01','03','05','07','08','10','12']\n    \n    months_dict = {1: 'January', 3: 'March', 5: 'May', 7: 'July', 8: 'August', 10: 'October', 12: 'December'}\n    \n    month = int(date[0:2])\n    if month in months:\n        if int(date[3:5]) in days:\n            if int(date[6:]) == 2000:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 210
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    d = date.split('-')\n    if not len(d) == 3:\n        return False\n    d = map(int, d)\n    year, month, day = d\n    if month < 1 or month > 12:\n        return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        if day < 1 or day > 30:\n            return False\n    elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        if day < 1 or day > 31:\n            return False\n    elif month == 2:\n        if day < 1 or day > 28:\n            return False\n    return True\n",
        "num_ids": 192
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    words = txt.split(' ')\n    words = list(filter(None, words))\n    return words\n",
        "num_ids": 28
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    words = txt.split()\n    word_list = []\n    for word in words:\n        for letter in word:\n            if letter.isspace():\n                break\n            else:\n                word_list.append(letter)\n    return word_list\n",
        "num_ids": 62
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return re.sub('\\W',' ',txt).split()\n",
        "num_ids": 16
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #todo - needs to work for any punctuation marks (i.e..,!, or ; )\n    #todo - or should we use a dictionary to get a list of letters and then sort it and do a sort on the count\n    #todo - without the sort we would have to sort and put the words in the same order of the text\n    #todo - I can't figure out how to get the count of the letters of the word with the help of a dict\n    #todo - I'm guessing I would just make a dict, and then have to check if the letters are in the dict\n    #todo - I think we can use a dict and just check if the letter is in there\n    #todo - I can't use a dict because I'm unsure if I should use a set to remove duplicates\n    #todo - https://www.tutorialspoint.com/python/python_dictionary.htm\n    txt = txt.replace(' ','').lower()\n    txt_lst = list(txt)\n    dct = {i:txt_lst.count(i) for i in txt_lst}\n    #print(dct)\n    #print(txt_lst)\n    dct = {i:txt_lst.count(i) for i in txt_lst}\n    #print(dct)\n    #print(txt_lst)\n    dct = {i:txt_lst.count(i) for i in txt_lst}\n    #print(dct)\n    dct = {i:txt_lst.count(i) for i in txt_lst}\n    #print(dct)\n    sorted_txt_lst = sorted(dct.items(),key = lambda x: x[1], reverse = True)\n    #print(sorted_txt_lst)\n    sorted_txt_lst = sorted(dct.items(),key = lambda x: x[1], reverse = True)\n    #print(sorted_txt_lst)\n    lst = []\n    for i in sorted_txt_lst:\n        if (i[1] % 2) == 1:\n            lst.append(i[0])\n    #print(lst)\n    return lst\n",
        "num_ids": 531
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    words = txt.split()\n    return words\n",
        "num_ids": 14
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return txt.split()\n    \n",
        "num_ids": 11
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = len(txt)\n    if n == 0:\n        return []\n    ans = []\n    for i in range(n):\n        if txt[i] == ',' or txt[i] =='':\n            ans.append(txt[0:i])\n            txt = txt[i+1:]\n    ans.append(txt)\n    return ans\n",
        "num_ids": 89
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [i for i in txt.split()]\n",
        "num_ids": 15
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    word_list = txt.split()\n    lower_words = 0\n    for word in word_list:\n        if word == '':\n            word_list.remove(word)\n        elif word.isupper():\n            lower_words += 1\n    return word_list\n",
        "num_ids": 67
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(lst) == 1:\n        return True\n    else:\n        for x in range(1, len(lst)):\n            if lst[x-1] > lst[x]:\n                return False\n        return True\n",
        "num_ids": 59
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(lst) == lst\n",
        "num_ids": 12
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n    \n    # The following logic is based on the idea that, if the number at i is\n    # bigger than the number at i+1, then all numbers after i need to be\n    # smaller than i+1.\n    # For example:\n    # 1) [] = True\n    # 2) [1] = True\n    # 3) [1,2] = True\n    # 4) [1,2,3] = True\n    # 5) [1,2,3,4] = False\n    # 6) [1,2,3,4,5] = True\n    # 7) [1,2,3,4,5,6] = False\n    # 8) [1,2,3,4,5,6,7] = True\n    # 9) [1,2,3,4,5,6,7,8] = False\n    # 10) [1,2,3,4,5,6,7,8,9] = True\n    # \n    # We need to go through the entire list, since we need to keep checking\n    # for the case where all the numbers are the same and they're smaller\n    # than the next number. So if there's a duplicate, then we know that\n    # we need to check all numbers after the duplicate.\n    # \n    # We can do this using two pointers, a slow and a fast pointer.\n    # For each number, if it's greater than the next number, then we can't\n    # possibly be sorted, so we'll update the slow pointer. If it's smaller\n    # than the next number, then we need to increase the fast pointer. If\n    # the fast pointer reaches the end, that means we didn't find a duplicate\n    # and we can return True.\n    \n    # If we find a duplicate, then the slow pointer moves ahead and the\n    # fast pointer moves to the next number. We'll continue the comparison\n    # until we reach the end of the list.\n    \n    # We can stop if we reach the end of the list. If we stop, then we're\n    # at the end and it is sorted.\n    \n    # Time: O(N)\n    # Space: O(1)\n    \n    # nums = []\n    # for i in range(len(lst)):\n    #     if nums and lst[i] >= nums[-1]:\n    #         return False\n    #     else:\n    #         nums.append(lst[i])\n    \n    # return True\n",
        "num_ids": 588
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(lst)):\n        if lst[i]!= lst[i-1]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    counts = {}\n    for i in lst:\n        counts[i] = counts.get(i, 0) + 1\n    for key, value in counts.items():\n        if value == 1:\n            continue\n        elif value!= 1 and key-1 not in counts:\n            return False\n    return True\n",
        "num_ids": 78
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # TODO\n",
        "num_ids": 6
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(lst) < 2:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i + 1] < lst[i]:\n                return False\n    return True\n    ",
        "num_ids": 60
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sorted_lst = sorted(lst)\n    if len(lst) > 1:\n        return sorted_lst == lst\n    else:\n        return True\n",
        "num_ids": 43
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(lst) < 2:\n        return True\n    if lst[0] < lst[1]:\n        return is_sorted(lst[1:])\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # x = int(start1)\n    # y = int(end1)\n    # x1 = int(start2)\n    # y1 = int(end2)\n",
        "num_ids": 43
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    intersect_length = (min(interval1[1], interval2[1]) - max(interval1[0], interval2[0]))\n    if is_prime(intersect_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 65
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # define a function to check if a given number is prime\n    def isprime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    # define a function to get intersection of two intervals\n    def getintersection(interval1, interval2):\n        return (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n    # check if two intervals have intersection\n    if getintersection(interval1, interval2) == interval1:\n        return \"YES\"\n    elif getintersection(interval1, interval2) == interval2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 196
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def prime_num(n):\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    return \"YES\" if prime_num(interval1[1]-interval1[0]) and prime_num(interval2[1]-interval2[0]) else \"NO\"\n",
        "num_ids": 82
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if interval1[0] > interval2[1]:\n        return \"NO\"\n    else:\n        if isPrime(interval2[0] - interval1[1]) and isPrime(interval2[1] - interval1[0]):\n            return \"YES\"\n        else:\n            return \"NO\"\n",
        "num_ids": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # your code goes here\n    def is_prime(n):\n        if n <= 1: return False\n        elif n <= 3: return True\n        elif n % 2 == 0 or n % 3 == 0: return False\n        else:\n            i = 5\n            while i * i <= n:\n                if n % i == 0 or n % (i + 2) == 0:\n                    return False\n                i += 6\n            return True\n",
        "num_ids": 104
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    a, b = sorted((interval1[0], interval1[1]))\n    c, d = sorted((interval2[0], interval2[1]))\n    if (a <= c) and (b >= d):\n        return \"YES\"\n    return \"NO\"\n",
        "num_ids": 67
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"YES\" if prime_check(min(interval1[0], interval2[0])) and prime_check(max(interval1[1], interval2[1])) else \"NO\"\n",
        "num_ids": 49
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # you can use the function in the code\n    return\n",
        "num_ids": 15
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    x1 = int(interval1[0])\n    x2 = int(interval1[1])\n    x3 = int(interval2[0])\n    x4 = int(interval2[1])\n    \n    if x1 <= x2 and x3 <= x4:\n        return \"YES\"\n    elif x1 <= x3 and x2 <= x4:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 110
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = 0\n    for i in arr:\n        if i == 1:\n            result += 1\n        elif i == -1:\n            result -= 1\n        elif i == 0:\n            pass\n        else:\n            return None\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(abs(n) * prod(sign(n) for n in arr) if n!= 0 else 0 for n in arr)\n",
        "num_ids": 34
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not arr:\n        return\n    res = 0\n    s = set()\n    for i in arr:\n        if i in s:\n            return None\n        s.add(i)\n    for i in arr:\n        if i > 0:\n            res += abs(i)\n        elif i < 0:\n            res += abs(i)*-1\n    return res",
        "num_ids": 90
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return None\n    else:\n        return -sum([abs(x) for x in arr]) * \\\n            sum([x * (-1 if x < 0 else 1) for x in arr])\n",
        "num_ids": 56
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    # assume valid input\n    if len(arr) == 0:\n        return None\n",
        "num_ids": 23
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not arr:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not arr:\n        return None\n    sign = 1\n    sum = 0\n    for elem in arr:\n        sum += abs(elem) * sign\n        sign = 1 if sign!= 0 else -1\n    return sum\n",
        "num_ids": 57
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not arr:\n        return None\n    mag_sum = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            mag_sum += arr[i]\n        elif arr[i] < 0:\n            mag_sum -= arr[i]\n        else:\n            mag_sum += arr[i]\n    return mag_sum\n",
        "num_ids": 91
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    m = len(grid)\n    if m == 0:\n        return []\n    n = len(grid[0])\n",
        "num_ids": 30
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    m, n = len(grid), len(grid[0])\n",
        "num_ids": 17
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    d = {}\n    rows = len(grid)\n    cols = len(grid[0])\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ",
        "num_ids": 1025
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Use dictionary to count each cell\n    cache = {}\n    def min_path(grid, k, current, cache, visited):\n        \n        # Base condition\n        if k == 0:\n            return True\n        \n        # If we have reached the end of the path\n        if current == len(grid) * len(grid[0]):\n            return False\n        \n        # If we have visited this cell before, return False\n        if current in visited:\n            return False\n        \n        # Check all neighbors\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if i == 0 or j == 0:\n                    continue\n                # Get value of the current cell\n                value = grid[current][j]\n                \n                # If there are only 3 values, then we have only 1 possible solution\n                if len(cache) == 3:\n                    return True\n                \n                # Check if the path is an improvement over the cache\n                if value < cache[(i, j)]:\n                    continue\n                \n                # Update the cache\n                cache[(i, j)] = value\n                \n                # Set the visited cell as the current cell\n                visited.append(current)\n                \n                # Call the function recursively\n                if min_path(grid, k - 1, i * len(grid[0]) + j, cache, visited):\n                    return True\n                \n                # Backtrack\n                cache.pop((i, j))\n                visited.pop()\n    \n    # Call the function\n    return min_path(grid, k, 0, cache, [])\n",
        "num_ids": 375
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    m = len(grid)\n    n = len(grid[0])\n    visited = set()\n    for r in range(m):\n        for c in range(n):\n            visited.add(grid[r][c])\n    def rec(i, j, k, visited):\n        if i > m - 1 or j > n - 1 or i < 0 or j < 0:\n            return None\n        if i == m - 1 and j == n - 1:\n            return grid[i][j]\n        elif grid[i][j] <= k:\n            return grid[i][j]\n        elif (i, j) not in visited:\n            visited.add((i, j))\n            down = rec(i + 1, j, k, visited)\n            right = rec(i, j + 1, k, visited)\n            if down == None or right == None:\n                return None\n            else:\n                return min(down, right)\n        else:\n            return None\n    return rec(0, 0, k, set())\n",
        "num_ids": 248
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if k == 1:\n        return grid[0][0]\n",
        "num_ids": 17
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n, m = len(grid), len(grid[0])\n",
        "num_ids": 17
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    from collections import deque\n    N = len(grid)\n    if N == 1: return grid[0]\n",
        "num_ids": 28
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def visit(grid, i, j, n, k):\n        if i >= n or j >= n:\n            return True\n        if i < n and j < n and grid[i][j]!= 0:\n            return False\n        visited = (i, j)\n        if visit(grid, i + 1, j, n, k) and visit(grid, i - 1, j, n, k) and visit(grid, i, j + 1, n, k) and visit(grid, i, j - 1, n, k):\n            return True\n        else:\n            grid[i][j] = 0\n            return False\n",
        "num_ids": 150
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    R, C = len(grid), len(grid[0])\n",
        "num_ids": 17
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # Tri(1) = 1; Tri(n) = sum of Tri(n - 1), Tri(n - 2), Tri(n - 3) for n >= 2 \n    def tribonacci(n):\n        res = []\n        if n == 0:\n            return res\n        if n == 1:\n            return res\n        if n == 2:\n            return res + [1, 1]\n        if n == 3:\n            return res + [1, 2, 1]\n        for i in range(4, n + 1):\n            res.append(sum(tribonacci(i - 1)) + tribonacci(i - 2) + tribonacci(i - 3))\n        return res\n",
        "num_ids": 167
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1,1]\n    result = [1,1,1]\n    if n > 2:\n        for i in range(2,n+1):\n            result.append(result[i-1]+result[i-2]+result[i-3])\n        return result\n",
        "num_ids": 101
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        r = [1, 1, 1]\n        i = 0\n        while i < n - 2:\n            r.append(r[i] + r[i + 1] + r[i + 2])\n            i += 1\n        return r",
        "num_ids": 103
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = [0] * (n + 1)\n    if n == 0:\n        return result\n    result[0] = 1\n    if n == 1:\n        return result\n    result[1] = 1\n    if n == 2:\n        return result\n    result[2] = 1\n    if n == 3:\n        return result\n    result[3] = 2\n    if n == 4:\n        return result\n    result[4] = 3\n    for i in range(5, n + 1):\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3]\n    return resul",
        "num_ids": 153
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    tri_list = []\n    if n == 0:\n        tri_list.append(1)\n    elif n == 1:\n        tri_list.append(3)\n    elif n == 2:\n        tri_list.extend([1, 2])\n    else:\n        tri_list.extend([1, 3, 2])\n        for i in range(3, n+1):\n            tri_list.append(tri_list[i-1] + tri_list[i-2] + tri_list[i-3])\n    return tri_list\n",
        "num_ids": 136
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    if n <= 0:\n        return []\n    \n    if n == 1:\n        return [1]\n",
        "num_ids": 29
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    elif n == 3:\n        return [1, 2, 1]\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
        "num_ids": 82
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [1,3]\n    if n > 2:\n        return [1,3] + tri(n-2) + tri(n-1)\n",
        "num_ids": 69
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        return[1, 2, 1] + tri(n - 2)\n",
        "num_ids": 51
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [1, 3, 2, 8]",
        "num_ids": 12
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    res = 1\n    while n:\n        res *= n % 10\n        n //= 10\n    return res\n",
        "num_ids": 40
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return int(n % 10) * int(n // 10) * int(n // 100) * int(n // 1000) * int(n // 10000) * int(n // 100000) * int(n // 1000000) * int(n // 10000000) * int(n // 100000000) * int(n // 1000000000) * int(n // 10000000000) * int(n // 1000000000000)\n",
        "num_ids": 95
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 10:\n        return 1\n    return n % 10 * digits(n // 10)\n",
        "num_ids": 25
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total = 1\n    while n > 0:\n        n, digit = divmod(n, 10)\n        if digit % 2!= 0:\n            total *= digit\n    return total\n    \ndef is_palindrome(num):\n    \"\"\"Given a positive integer num, return True if num is a palindrome.\n    Otherwise, return False.\n    For example:\n    is_palindrome(12321)  == True\n    is_palindrome(123321)  == False\n    is_palindrome(12332112)  == False\n    is_palindrome(12332112)  == True\n    \"\"\"\n    return str(num) == str(num)[::-1]\n",
        "num_ids": 169
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    while n > 0:\n        if n % 10 % 2!= 0:\n            return n\n        n = n // 10\n    return 0\n",
        "num_ids": 35
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n < 10:\n        return n\n    else:\n        return n % 10 * digits(n // 10)\n",
        "num_ids": 29
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return 1 if n % 10 % 2 else 0\n",
        "num_ids": 13
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    total = 1\n    while n > 0:\n        if n % 10 % 2!= 0:\n            total *= n % 10\n        n //= 10\n    return total\n",
        "num_ids": 43
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return int(str(n)[1::2])\n",
        "num_ids": 14
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return n % 10 * (n//10 % 10) * (n//100 % 10) * (n//1000 % 10)\n",
        "num_ids": 31
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '[':\n            count += 1\n        if string[i] == ']':\n            count -= 1\n        if count < 0:\n            return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(string) == 0 or string[0]!= '[':\n        return False\n    opened = 0\n    for i in range(1, len(string)):\n        if string[i] == '[' and string[i-1]!= ']':\n            opened += 1\n        if string[i] == ']' and string[i-1]!= '[':\n            opened -= 1\n        if string[i] == ']' and string[i-1] == '[':\n            return False\n        if string[i] == ']' and string[i-1] == ']' and opened == 0:\n            return True\n    return False\n",
        "num_ids": 152
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def is_list(s):\n        if len(s) == 0:\n            return False\n        if s[0]!= '[':\n            return False\n        p = 0\n        for i in range(1, len(s)):\n            if s[i] == '[':\n                p += 1\n            if s[i] == ']':\n                p -= 1\n            if p < 0:\n                return False\n        if p == 0:\n            return True\n    def is_empty(s):\n        if len(s) == 0:\n            return True\n        return False\n    def is_brack(s):\n        if len(s) == 0:\n            return False\n        if s[0]!= ']':\n            return False\n        p = 0\n        for i in range(1, len(s)):\n            if s[i] == '[':\n                p += 1\n            if s[i] == ']':\n                p -= 1\n            if p < 0:\n                return False\n        if p == 0:\n            return True\n    if is_list(string) == True:\n        return True\n    if is_empty(string) == True:\n        return False\n    if is_brack(string) == True:\n        return True\n    return False\n",
        "num_ids": 303
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(string)<2:\n        return False\n    def recursive(string, i):\n        if string[i]=='[':\n            return False\n        if i==len(string)-1 or string[i]!=']':\n            return False\n        return True\n    def inner(string, i):\n        if string[i]=='[':\n            if recursive(string, i+1):\n                return True\n            else:\n                return False\n        elif string[i]==']':\n            return True\n        else:\n            return False\n    return inner(string, 0) and recursive(string, 1)\n",
        "num_ids": 148
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # string = '['\n    # if string.count('[')!= string.count(']'):\n    #     return False\n    # string = ']'\n    # if string.count(']')!= string.count('['):\n    #     return False\n",
        "num_ids": 63
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(string) < 3:\n        return False\n    \n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            elif stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    \n    return not stack\n",
        "num_ids": 96
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Corner cases\n    if not string:\n        return False\n    if string[0] == '[':\n        return False\n    if len(string) == 2 and string[0] == ']' and string[1] == '[':\n        return False\n    if len(string) == 3 and string[0] == ']' and string[1] == ']' and string[2] == '[' and string[1] == ']':\n        return False\n",
        "num_ids": 105
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # O(n)\n    open = 0\n    for char in string:\n        if char == '[':\n            open += 1\n        else:\n            if open == 0:\n                return False\n            open -= 1\n    return open == 0\n",
        "num_ids": 58
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def check_string(string):\n        l = 0\n        count = 0\n        for i in string:\n            if i == \"[\":\n                l += 1\n            elif i == \"]\":\n                l -= 1\n            if l == 0:\n                count += 1\n        return count == l\n    return check_string(string)\n",
        "num_ids": 80
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if string == '':\n        return False\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '[':\n            count += 1\n        elif string[i] == ']':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "num_ids": 78
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = 0\n    for i in lst:\n        result += i*i\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([i**2 for i in lst])\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    new_lst = []\n    for el in lst:\n        new_el = math.ceil(el ** 2)\n        new_lst.append(new_el)\n    return sum(new_lst)\n",
        "num_ids": 55
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst = list(lst)\n    lst = list(map(lambda x: round(x*x, 1), lst))\n    return sum(lst)\n",
        "num_ids": 42
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum([i*i for i in lst])\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    return round(sum([i**2 for i in lst]))\n",
        "num_ids": 20
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sum_of_squares = 0\n    for x in lst:\n        sum_of_squares += x**2\n    return sum_of_squares\n    \n",
        "num_ids": 42
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #lst = input().split(' ')\n    lst = list(map(int, input().split(' ')))\n    print(sum([i**2 for i in lst]))\n",
        "num_ids": 46
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    return(round(sum([i**2 for i in lst]),2))\n",
        "num_ids": 22
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    list.sort(lst)\n    for i in range(len(lst)):\n        lst[i] = round(lst[i],3)\n    return sum([x**2 for x in lst])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1024
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return not txt[-1].isalpha() or not txt.isalpha()\n",
        "num_ids": 22
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return txt[-1].isalpha() and not txt.split(' ')[-1].isalpha()\n",
        "num_ids": 28
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return 'a' in txt[-1] and not txt.split() and txt[-1] not in '.,;!?()\\'\"'\n",
        "num_ids": 38
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(txt) > 0 and not txt[-1].isalpha() and not txt[-1].isnumeric()\n",
        "num_ids": 33
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return not txt[-1].isalnum() and not txt[-1].isspace()\n",
        "num_ids": 25
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(txt) > 0 and txt[-1].isalpha() and txt[-1] not in \"a \"\n",
        "num_ids": 32
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # return txt[-1].isalpha() and not is_word(txt[:-1])\n    # return txt[-1].isalpha()\n    # return txt[-1].isalnum() and not is_word(txt[:-1])\n    if txt == '':\n        return False\n    return txt[-1].isalpha() and not is_word(txt[:-1])\n",
        "num_ids": 97
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return txt and txt[-1].isalpha() and not txt[-1].isalpha()\n",
        "num_ids": 27
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    max_ind = 0\n    for i in range(len(arr) - 1):\n        if arr[i + 1] <= arr[i]:\n            max_ind = i\n    return max_ind\n",
        "num_ids": 49
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return -1\n    return arr[-1]\n",
        "num_ids": 41
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Edge cases\n    if not arr:\n        return -1\n    if len(arr) == 1:\n        return 0\n    # If the first and last element are the same, then they can only be\n    # swapped with one other element.\n    if arr[0] == arr[-1]:\n        return 0\n    # Sort the array\n    arr.sort()\n    # If the array is not in descending order then we must swap the first\n    # and last elements.\n    if arr[0] >= arr[-1]:\n        return 0\n    # Create a dictionary of indices and values\n    indices = {}\n    # Find the largest index in the sorted array\n    max_index = -1\n    for index, value in enumerate(arr):\n        if value in indices:\n            # If the index is already in the dictionary, increment it\n            indices[value] += 1\n        else:\n            # If the index is not in the dictionary, add it\n            indices[value] = 1\n            max_index = index\n    # Find the largest value in the dictionary\n    max_value = -1\n    for key in indices:\n        max_value = max(max_value, indices[key])\n    # If the largest value is 1, then there is only one element in the\n    # array which can only be swapped with the last element.\n    if max_value == 1:\n        return max_index\n    # If the largest value is greater than 1, then we can swap the last\n    # element with one of the elements which is not greater than or equal\n    # to the largest element.\n    else:\n        return max_index - 1\n",
        "num_ids": 381
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    index = 0\n    max = 0\n    while index < len(arr):\n        if arr[index] >= max:\n            max = arr[index]\n        index += 1\n    return max\n",
        "num_ids": 47
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    i = 0\n    while i < len(arr)-1:\n        if arr[i] > arr[i+1]:\n            return i\n        i += 1\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    dic = {}\n    index = 0\n    while index < len(arr):\n        dic[arr[index]] = index\n        index += 1\n    for i in arr:\n        if i < dic[i-1]:\n            return dic[i-1]\n    return -1\n",
        "num_ids": 71
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # for i in range(1,len(arr)):\n    #     if arr[i] >= arr[i-1]:\n    #         return i\n",
        "num_ids": 38
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert len(arr) > 1, \"The list should be longer than one element\"\n    if len(arr) == 1:\n        return -1\n    left, right = 0, 1\n    while left < len(arr) and arr[left] <= arr[right]:\n        if right < len(arr) and arr[left] < arr[right]:\n            left += 1\n            right += 1\n        else:\n            break\n    if left == len(arr):\n        return -1\n    for i in range(right, left, -1):\n        if arr[i] > arr[left]:\n            return left\n    return -1",
        "num_ids": 148
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(1, len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1\n",
        "num_ids": 40
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    i = 0\n    while i < len(arr):\n        if arr[i] <= arr[i+1]:\n            i += 1\n        else:\n            return i\n    return -1\n",
        "num_ids": 47
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    a = None\n    b = None\n",
        "num_ids": 13
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # if lst == []:\n    #     return (None, None)\n    # elif lst == [0]:\n    #     return (None, None)\n    # else:\n    #     min_num = lst[0]\n    #     max_num = lst[0]\n    #     for i in range(1, len(lst)):\n    #         if lst[i] < min_num:\n    #             min_num = lst[i]\n    #         if lst[i] > max_num:\n    #             max_num = lst[i]\n    #     return (max_num, min_num)\n",
        "num_ids": 159
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    else:\n        neg = -99999999999999999999999999999999999999999999999999999999999999999\n        pos = 9999999999999999999999999999999999999999999999999999999999999999999\n        for i in lst:\n            if i > 0:\n                pos = i\n            elif i < 0:\n                neg = i\n        return (pos, neg)\n",
        "num_ids": 109
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n = 0\n    m = 0\n    if len(lst) == 0:\n        return None, None\n    for item in lst:\n        if item > 0:\n            m = max(m, item)\n        elif item < 0:\n            n = min(n, item)\n    return n, m\n",
        "num_ids": 77
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code goes here.\n    max_negative = -1000000000\n    min_positive = 100000000\n",
        "num_ids": 27
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    negative = [i for i in lst if i < 0]\n    positive = [i for i in lst if i > 0]\n    if negative == []:\n        return None, None\n    if positive == []:\n        return None, None\n    else:\n        return min(negative), max(positive)\n",
        "num_ids": 74
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    #return a, b\n    \n    def largest_smallest_integer(lst):\n    \n        #this is how we get the smallest\n        smallest = None\n        if len(lst) > 0:\n            if lst[0] < 0:\n                smallest = lst[0]\n            else:\n                smallest = None\n            \n            #this is the second smallest\n            largest = None\n            if lst[0] < 0:\n                largest = lst[0]\n            else:\n                largest = None\n            \n            for i in range(len(lst)):\n                if lst[i] > 0:\n                    if largest is None:\n                        largest = lst[i]\n                    else:\n                        largest = max(largest, lst[i])\n                    if smallest is None:\n                        smallest = lst[i]\n                    else:\n                        smallest = min(smallest, lst[i])\n            return (largest, smallest)\n    \n        return (None, None)\n    \n    return largest_smallest_integer(lst)\n    \n    \n",
        "num_ids": 259
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    max_neg = None\n    min_pos = None\n    for i in lst:\n        if i > 0:\n            if max_neg == None:\n                max_neg = i\n            elif max_neg < i:\n                max_neg = i\n        elif i < 0:\n            if min_pos == None:\n                min_pos = i\n            elif min_pos > i:\n                min_pos = i\n    return (max_neg, min_pos)\n",
        "num_ids": 116
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if lst == []:\n        return (None, None)\n    \n    negative = lst[0]\n    positive = lst[0]\n",
        "num_ids": 37
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    largest = None\n    smallest = None\n",
        "num_ids": 12
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 32
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if type(a) == type(b):\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        return b if type(a) == type(b) else a\n",
        "num_ids": 52
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if a == b:\n        return None\n    else:\n        if a > b:\n            return a\n        else:\n            return b\n",
        "num_ids": 37
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a == b:\n        return None\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\",\".\")\n        b = b.replace(\",\",\".\")\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n    elif isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        return None\n",
        "num_ids": 160
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return None if a == b else max(a, b)\n",
        "num_ids": 16
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a == b:\n        return None\n    elif a > b:\n        return a\n    elif a < b:\n        return b\n",
        "num_ids": 36
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a == b:\n        return None\n    elif a > b:\n        return a\n    elif b > a:\n        return b\n    return None\n",
        "num_ids": 40
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if isinstance(a, (float, int)):\n        if a > b:\n            return a\n        else:\n            return b\n    if a == b:\n        return None\n    return a\n",
        "num_ids": 49
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    a, b = float(a), float(b)\n    if a < b:\n        return b\n    elif a > b:\n        return a\n    else:\n        return None\n",
        "num_ids": 46
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #print(\"a: \",a, \" b: \",b)\n    a=str(a)\n    b=str(b)\n    if a.isdigit() or b.isdigit() :\n        if a>b:\n            return int(a)\n        elif a<b:\n            return int(b)\n    elif a>b and a.count('.') == 0:\n        return float(a)\n    elif a<b and a.count('.') == 0:\n        return float(b)\n    else:\n        return a if a>b else b\n",
        "num_ids": 141
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Check if the number is even and is a multiple of 2.\n    if n % 2!= 0:\n        return False\n    if n <= 0 or n % 4!= 0:\n        return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return n % 2 == 0 and n >= 4\n",
        "num_ids": 13
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return n % 2 == 0 and (n-4) % 2 == 0\n",
        "num_ids": 19
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if (n % 2 == 0) or (n < 2):\n        return False\n    \n    sum = 0\n    while (n >= 2):\n        if n % 2 == 0:\n            n = n//2\n        else:\n            n = (n-1)//2\n        sum += n\n    \n    return True if sum == n else False\n    \ndef is_not_divisible_by_seven(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of three non-negative numbers, each\n    divisible by 7.\n    Example\n    is_not_divisible_by_seven(7) == False\n    is_not_divisible_by_seven(14) == True\n    is_not_divisible_by_seven(19) == False\n    is_not_divisible_by_seven(24) == False\n    \"\"\"\n    if (n % 7 == 0) or (n % 2 == 0):\n        return False\n    \n    sum = 0\n    while (n >= 7):\n        if n % 2 == 0:\n            n = n//2\n        else:\n            n = (n-1)//2\n        sum += n\n    \n    return True if sum == n else False\n    \ndef is_divisible_by_seven(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of three non-negative numbers, each\n    divisible by 7.\n    Example\n    is_divisible_by_seven(7) == False\n    is_divisible_by_seven(14) == True\n    is_divisible_by_seven(19) == False\n    is_divisible_by_seven(24) == False\n    \"\"\"\n    if (n % 7 == 0) or (n % 2 == 0):\n        return False\n    \n    sum = 0\n    while (n >= 7):\n        if n % 2 == 0:\n            n = n//2\n        else:\n            n = (n-1)//2\n        sum += n\n    \n    return True if sum == n else False\n    \ndef is_divisible_by_three_and_five(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of three non-negative numbers, each\n    divisible by 3 and 5.\n    Example\n    is_divisible_by_three_and_five(7) == True\n    is_divisible_by_three_and_five(14) == True\n    is_divisible_by_three_and_five(19) == False\n    is_divisible_by_three_and_five(24) == False\n    \"\"\"\n    return is_divisible_by_seven(n) and is_divisible_by_three_and_five(n//7)\n    \ndef is_divisible_by_three_and_five_or_seven(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of three non-negative numbers, each\n    divisible by 3 and 5 or 7.\n    Example\n    is_divisible_by_three_and_five_or_seven(7) == True\n    is_divisible_by_three_and_five_or_seven(14) == True\n    is_divisible_by_three_and_five_or_seven(19) == False\n    is_divisible_by_three_and_five_or_seven(24) == False\n    \"\"\"\n    return is_divisible_by_three_and_five(n) or is_divisible_by_seven(n)\n    \ndef is_divisible_by_three_and_five_or_seven_or_nine(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of three non-negative numbers, each\n    divisible by 3, 5, or 7.\n    Example\n    is_divisible_by_three_and_five_or_seven_or_nine(7) == True\n    is_divisible_by_three_and_five_or_seven_or_nine(14) == True\n    is_divisible_by_three_and_five_or_seven_or_nine(19) == False\n    is_divisible_by_three_and_five_or_seven_or_nine(24) == False\n    \"\"\"\n    return i",
        "num_ids": 1025
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(1, n):\n        if i % 2 == 0:\n            if n - i < 0:\n                continue\n            if (n - i) % 2 == 0:\n                return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(4, n+1):\n        if is_even(i):\n            if i%2 == 0:\n                continue\n            elif i > 4:\n                return False\n        else:\n            break\n",
        "num_ids": 54
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return is_sum_even(n) and n%2 ==0\n",
        "num_ids": 18
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    sum_even = 0\n    while n > 0:\n        digit = n % 10\n        n = n // 10\n        if not (digit % 2):\n            sum_even = sum_even + digit\n    return sum_even == n\n",
        "num_ids": 57
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return is_sum_equal_to_odd(n, 2) and is_sum_equal_to_odd(n, 4) and is_sum_equal_to_odd(n, 6) and is_sum_equal_to_odd(n, 8)\n",
        "num_ids": 63
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return is_equal_to_sum_odd(n) and (n % 2 == 0)\n",
        "num_ids": 24
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    fact = 1\n    while n > 0:\n        fact *= n\n        n -= 1\n    return fact\n",
        "num_ids": 28
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n = n + 1\n    factorial = 1\n    while n >= 1:\n        factorial = factorial * n\n        n = n - 1\n",
        "num_ids": 37
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    total = 1\n    while n!= 1:\n        total *= n\n        n -= 1\n    return total",
        "num_ids": 28
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert(n > 0)\n    factorial = 1\n    while n > 1:\n        factorial *= n\n        n -= 1\n",
        "num_ids": 34
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Solution with code\n    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial * i\n    return factorial\n",
        "num_ids": 40
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n_factorial = 1\n",
        "num_ids": 9
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    fatorial = 1\n    for i in range(1, n+1):\n        fatorial *= i\n    return fatorial\n",
        "num_ids": 32
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return text.replace(' ', '_').replace('  ', '-').replace('   ', '-')\n",
        "num_ids": 26
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    # code goes here\n    return text.replace(\" \", \"_\").replace(\"  \", \" \")\n",
        "num_ids": 26
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n",
        "num_ids": 17
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return re.sub(r'\\s+', '_', text)\n",
        "num_ids": 19
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not isinstance(text, str):\n        return text\n    words = text.split(\" \")\n    for i in range(len(words)):\n        if (len(words[i]) > 2) and (words[i][0] == words[i][1]) and (words[i][0] == words[i][-1]):\n            words[i] = \"_\"\n    return \" \".join(words)\n",
        "num_ids": 101
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n",
        "num_ids": 17
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return re.sub(' +','_', text)\n",
        "num_ids": 14
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return re.sub(r\"\\s{2,}\", \"_\", text)\n",
        "num_ids": 21
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return re.sub(\" +\", \"_\", text)\n",
        "num_ids": 14
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #return text.replace(' ', '_').replace('  ','-').replace('  ','-').replace('  ','_').replace('  ','_').replace('  ','_')\n    return text.replace(' ', '_').replace('  ', '_').replace(' ', '_').replace('  ', '_').replace('  ', '_').replace('  ', '_')\n",
        "num_ids": 88
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    file_name = file_name.strip()\n    file_name_1 = file_name[:3]\n    file_name_2 = file_name[3:]\n",
        "num_ids": 42
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # your code here\n    for letter in file_name:\n        if not(letter in '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'):\n            return False\n        if len(file_name) > 3:\n            return False\n        if file_name.count('.') > 1:\n            return False\n        if file_name[0].lower()!= file_name[0]:\n            return False\n        if len(file_name) < 3:\n            return False\n        if file_name[-3:].lower()!= 'dll':\n            return False\n        if not(file_name[:3].lower() in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')) and not(file_name[-3:].lower() in ('exe', 'txt')):\n            return False\n        else:\n            return True\n",
        "num_ids": 283
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Your code starts here\n    return \"No\" if re.search(r'^[a-zA-Z]{1}[\\d]{3}\\.\\w{2}$', file_name)!= None and re.search(r'[\\w]*\\.[txt|exe|dll]{1}', file_name)!= None else \"Yes\"\n",
        "num_ids": 88
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not(isinstance(file_name,str)) or file_name == '':\n        return 'No'\n    if len(file_name)>3:\n        return 'No'\n    if '.' in file_name:\n        return 'No'\n    if file_name[0].isalpha():\n        return 'No'\n    if len(file_name.split('.'))>3:\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 108
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # We want to find the following patterns in the file name\n    patterns = ['^[a-zA-Z][a-zA-Z]{1}', '^[0-9][0-9][0-9]$', '^[a-zA-Z0-9][a-zA-Z0-9]{1}$',\n                '^(.*)\\.{1}(exe|dll|txt)$']\n    # Define regex patterns\n    regex = '|'.join(patterns)\n    # Check if regex pattern matches\n    if re.search(regex, file_name):\n        return \"Yes\"\n    return \"No\"\n",
        "num_ids": 160
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if file_name.find(\".\") < 0:\n        return \"No\"\n    file_name = file_name.split(\".\")\n    if file_name[0].isalpha():\n        return \"No\"\n    for i in file_name:\n        if i.isalpha():\n            if i.islower():\n                return \"No\"\n            else:\n                return \"Yes\"\n        elif i.isdigit():\n            return \"No\"\n        elif i.isupper():\n            return \"No\"\n        elif i == \"\":\n            return \"No\"\n        elif i == \".\":\n            return \"No\"\n        else:\n            return \"No\"\n        \ndef menu():\n    \"\"\"Function to display the menu\"\"\"\n    print(\"1. Get all files in a folder\")\n    print(\"2. Get all files in a folder, sorted by size\")\n    print(\"3. Get all files in a folder, sorted by last modified time\")\n    print(\"4. Get a file from the folder\")\n    print(\"5. Get all files in a sub-folder\")\n    print(\"6. Get all files in a sub-folder, sorted by size\")\n    print(\"7. Get all files in a sub-folder, sorted by last modified time\")\n    print(\"8. Get all files in a sub-folder, sorted by modification time\")\n    print(\"9. List all files and sub-folders in a folder\")\n    print(\"10. List all files and sub-folders in a folder, sorted by size\")\n    print(\"11. List all files and sub-folders in a folder, sorted by last modified time\")\n    print(\"12. List all files and sub-folders in a folder, sorted by modification time\")\n    print(\"13. Create a file\")\n    print(\"14. Create a folder\")\n    print(\"15. Change the permissions of a file\")\n    print(\"16. Delete a file\")\n    print(\"17. Delete a folder\")\n    print(\"18. Create a symbolic link\")\n    print(\"19. Delete a symbolic link\")\n    print(\"20. Make a file executable\")\n    print(\"21. Make a file non-executable\")\n    print(\"22. Make a folder executable\")\n    print(\"23. Make a folder non-executable\")\n    print(\"24. Delete a file from the file system\")\n    print(\"25. Delete a folder from the file system\")\n    print(\"26. Rename a file\")\n    print(\"27. Rename a folder\")\n    print(\"28. Copy a file\")\n    print(\"29. Copy a folder\")\n    print(\"30. Move a file\")\n    print(\"31. Move a folder\")\n    print(\"32. Reroute all files\")\n    print(\"33. Delete all files\")\n    print(\"34. Delete all files and folders\")\n    print(\"35. Move a file to a new location\")\n    print(\"36. Move a file to a new location, sorted by size\")\n    print(\"37. Move a file to a new location, sorted by last modified time\")\n    print(\"38. Move a file to a new location, sorted by modification time\")\n    print(\"39. Create a new file\")\n    print(\"40. Create a new folder\")\n    print(\"41. Create a new file, sorted by size\")\n    print(\"42. Create a new file, sorted by last modified time\")\n    print(\"43. Create a new file, sorted by modification time\")\n    print(\"44. Create a new folder, sorted by size\")\n    print(\"45. Create a new folder, sorted by last modified time\")\n    print(\"46. Create a new folder, sorted by modification time\")\n    print(\"47. Create a new folder, sorted by last modified time\")\n    print(\"48. Create a new file, sorted by size\")\n    print(\"49. Create a new file, sorted by last modified time\")\n    print(\"50. Create a new file, sorted by modification time\")\n    print(\"51. Create a new folder, sorted by size\")\n    print(\"52. Create a new folder, sorted by last modified time\")\n    print(\"53. Create a new folder, sorted by modification time\")\n    print(\"54. Create a new folder, sorted by last modified time\")\n    print(\"55. Delete a folder\")\n    print(\"56. Delete a folder, sorted by size\")\n    print(\"57. Delete a folder, sorted by last modified time\")\n    print(\"58. Delete a folder, sorted by modification time\")\n",
        "num_ids": 1024
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if file_name.count(\".\")!= 1:\n        return \"No\"\n    else:\n        if file_name[0].isalpha() and file_name[0].islower():\n            if len(file_name) > 3:\n                for i in file_name:\n                    if i.isalpha():\n                        if i.lower() in \"abcdefghijklmnopqrstuvwxyz\":\n                            return \"Yes\"\n                    else:\n                        return \"No\"\n            else:\n                return \"No\"\n        else:\n            return \"No\"\n",
        "num_ids": 136
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return 'No' if not (\n        # There should not be more than 3 digits\n        all(c in '0'-'9' for c in file_name) and\n        # The file's name contains exactly one dot\n        file_name.count('.') == 1 and\n        # The substring before the dot should not be empty\n        file_name[:file_name.index('.')].isalpha() and\n        # The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n        file_name[file_name.index('.')+1:].lower() in ['txt', 'exe', 'dll']\n        ) else 'Yes'\n",
        "num_ids": 157
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(file_name) == 0:\n        return \"No\"\n",
        "num_ids": 19
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not isinstance(file_name, str):\n        return \"No\"\n    try:\n        file_name = file_name.lower()\n        if len(file_name) < 3:\n            return \"No\"\n        if file_name[0] not in string.ascii_lowercase:\n            return \"No\"\n        if len(file_name) < 3 or file_name[-3:] not in ('txt', 'exe', 'dll'):\n            return \"No\"\n        return \"Yes\"\n    except:\n        return \"No\"\n",
        "num_ids": 133
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum([i**2 if (i%3 == 0 or i%4!= 0) else i**3 for i in lst])\n",
        "num_ids": 34
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i,x in enumerate(lst)])\n",
        "num_ids": 39
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            res += lst[i]**2\n        if i % 3 == 1 and i % 4!= 1:\n            res += lst[i]**2\n        if i % 3 == 2 and i % 4!= 2:\n            res += lst[i]**2\n    return res\n    \nprint(sum_squares([1,2,3,4,5,6,7,8,9]))\n",
        "num_ids": 135
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s = 0\n    for i in lst:\n        if i % 3 == 0:\n            s += i*i\n        elif i % 4 == 0:\n            s += i*i*i\n    return s\n",
        "num_ids": 53
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = 0\n    for entry in lst:\n        if entry % 3 == 0 or entry % 4 == 0:\n            result += entry**2\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    new_list = []\n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4!= 0:\n            new_list.append(lst[i])\n    return sum(new_list)\n",
        "num_ids": 59
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sum_squares = 0\n",
        "num_ids": 9
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if lst == []:\n        return 0\n    else:\n        return sum(num**2 if i%3 == 0 else num**4 if i%4!= 0 else num**2 for i, num in enumerate(lst))",
        "num_ids": 56
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i]**2\n        elif i % 4 == 0:\n            result += lst[i]**3\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i*i\n        elif i % 4 == 0:\n            sum += i*i*i\n        else:\n            continue\n    return sum\n",
        "num_ids": 60
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    words = sentence.split(\" \")\n    words_primes = list(set([int(len(word)) for word in words]))\n    return words_primes\n",
        "num_ids": 41
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([word for word in sentence.split() if is_prime(len(word))])\n",
        "num_ids": 26
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # TODO: Your code here\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s = sentence.split()\n    if len(s) == 1:\n        return s[0]\n    for i in range(1, len(s)):\n        if is_prime(len(s[i-1])):\n            return s[i-1]\n    return s[0]\n",
        "num_ids": 72
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # ===Modify codes below=================\n    # \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \ub2e8\uc5b4\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4dc\uc138\uc694\n",
        "num_ids": 74
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \" \".join(sorted(filter(is_prime, map(len, sentence.split()))))\n",
        "num_ids": 26
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # TODO: implement this function\n",
        "num_ids": 10
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # ******* Solution 1 - Brutal Force *******\n    # sentence = sentence.split()\n    # ans = ''\n    # for i in range(len(sentence)-1):\n    #     if len(sentence[i]) == len(sentence[i+1]):\n    #         ans += sentence[i]\n    #         ans +=''\n    # return ans + sentence[-1]\n",
        "num_ids": 95
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # input\n    s = sentence\n    # output\n    result = \"\"\n    # solution\n    for i in range(len(s)):\n        result += s[i]\n        if not is_prime(len(result)):\n            result = result[:-1]\n            break\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    words = sentence.split()\n    return \" \".join(sorted(words, key=len))\n",
        "num_ids": 25
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    print(\"\\n\\n\")\n    print(\"simplify\")\n    print(x, \"/\", n)\n    x_n = x.split(\"/\")\n    n_n = n.split(\"/\")\n    n_1 = n_n[0]\n    n_2 = n_n[1]\n    print(x_n, n_n)\n    print(\"n_1 = \" + n_1)\n    print(\"n_2 = \" + n_2)\n    n_1_int = int(n_1)\n    n_2_int = int(n_2)\n    print(\"n_1_int = \" + str(n_1_int))\n    print(\"n_2_int = \" + str(n_2_int))\n    if n_1_int == 0 or n_2_int == 0:\n        return False\n    if n_1_int == 1:\n        return True\n    else:\n        if x_n[1] == \"0\":\n            return False\n        x_n_1 = x_n[0]\n        x_n_2 = x_n[1]\n        x_n_1_int = int(x_n_1)\n        x_n_2_int = int(x_n_2)\n        if x_n_1_int == 0:\n            return True\n        if x_n_1_int > 0:\n            x_n_1_int = x_n_1_int\n        else:\n            x_n_1_int = -x_n_1_int\n        if x_n_2_int == 0:\n            return False\n        if x_n_2_int > 0:\n            x_n_2_int = x_n_2_int\n        else:\n            x_n_2_int = -x_n_2_int\n        if n_1_int > n_2_int:\n            n_1_int = n_1_int\n        else:\n            n_1_int = n_1_int\n            n_2_int = n_2_int\n        return True\n",
        "num_ids": 507
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # your code here\n    x = x.split(\"/\")\n    n = n.split(\"/\")\n",
        "num_ids": 27
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if str(x)[0]!= '/':\n        x = x + \"/1\"\n    x = x.split('/')\n    \n    if int(x[0])/int(x[1]) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a = x.split(\"/\")\n    b = a[0].split(\".\")\n    c = a[1].split(\".\")\n    if (b[0]==\"0\" or c[0]==\"0\"):\n        return False\n    else:\n        return (float(b[0])*float(n)) == (float(b[1])*float(n)) == (float(c[0])*float(n)) == (float(c[1])*float(n)",
        "num_ids": 116
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if x == '0' or n == '0':\n        return False\n    # if numerator!= '0' or denominator!= '0':\n    if x.find('/')!= -1 or n.find('/')!= -1:\n        return False\n    elif x == '1':\n        return True\n    else:\n        x = x.split('/')\n        n = n.split('/')\n        x = x[0] + '/' + x[1]\n        n = n[0] + '/' + n[1]\n        return int(x) == int(n)\n",
        "num_ids": 148
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    frac_x_n = str(x) + \"/\" + str(n)\n    if \".\" in frac_x_n:\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    while len(x)!= 0 and x.count(\"/\")!= 0:\n        if x[0] == \"/\":\n            x = x[1:]\n            break\n    \n    return not x\n",
        "num_ids": 51
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if '/' in x and '.' in x:\n        return simplify_numerator_denominator(x, n)\n    else:\n        return simplify_common_denominator(x, n)\n",
        "num_ids": 50
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    x = eval(x)\n    n = eval(n)\n    return x == int(x/n)\n",
        "num_ids": 28
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # your code here\n",
        "num_ids": 7
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    nums = sorted(nums)\n    nums = sorted(nums, key = sum_digit)\n    return nums\n",
        "num_ids": 32
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def order_by_sum(nums):\n        sum_of_digits = []\n        for num in nums:\n            sum_of_digits.append(sum(int(x) for x in str(num)))\n",
        "num_ids": 55
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    nums = sorted(nums)\n    for i in range(len(nums)):\n        nums[i] = sum(nums[i:])\n    return sorted(nums)\n",
        "num_ids": 48
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    digits = {}\n    for i in range(len(nums)):\n        s = 0\n        while nums[i] > 0:\n            s += nums[i] % 10\n            nums[i] //= 10\n        if s in digits.keys():\n            digits[s].append(i)\n        else:\n            digits[s] = [i]\n    sorted_digits = sorted(digits.items(), key = lambda x: x[0])\n    sorted_values = sorted(sorted_digits, key = lambda x: len(x[1]))\n    new_list = []\n    for i in range(len(sorted_values)):\n        new_list.extend(sorted_values[i][1])\n    return new_list\n",
        "num_ids": 189
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Insertion sort\n    #\n    for i in range(1, len(nums)):\n        j = i\n        while j > 0 and nums[j] < nums[j - 1]:\n            nums[j], nums[j - 1] = nums[j - 1], nums[j]\n            j -= 1\n",
        "num_ids": 82
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    nums.sort(key=lambda n: (sum(int(i) for i in str(n)),n))\n    return nums\n",
        "num_ids": 34
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(nums, key=lambda num: sum(int(x) for x in str(num)))\n",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    new = []\n    for item in nums:\n        new.append(sum(int(digit) for digit in str(item)))\n    return sorted(nums, key = lambda x: new.index(sum(int(digit) for digit in str(x))))\n",
        "num_ids": 63
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    nums.sort(key=lambda x: (len(str(x)), str(x)))\n    return nums\n",
        "num_ids": 29
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 1 and num // 10 % 10 == 1:\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num > 100:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len([x for x in nums if x % 2!= 0 and x >= 10 and nums.index(x) < len(nums)-1 and nums.index(x) > 0])\n    ",
        "num_ids": 50
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    output = []\n    for num in nums:\n        if str(num)[0] % 2 == 1 and str(num)[-1] % 2 == 1:\n            output.append(num)\n    return len(output)\n",
        "num_ids": 55
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len([x for x in nums if ((x > 10 and x % 2 == 1) and x % 10!= 0)])\n",
        "num_ids": 33
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    counter = 0\n    for num in nums:\n        if num > 10 and num % 2!= 0 and num % 10 == 1:\n            counter += 1\n    return counter\n",
        "num_ids": 43
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = []\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i][0] % 2 == 1:\n            result.append(nums[i])\n    return len(result)\n",
        "num_ids": 70
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (len(list(filter(lambda n: n > 10, list(filter(lambda n: n % 10 > 1, nums))))))\n",
        "num_ids": 35
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] < 10 and nums[i] > -10:\n            count += 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = n + 1\n    a = [0 for i in range(n)]\n    for i in range(n):\n        a[i] = i * i - i + 1\n    ret = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            k = n - 1\n            while k > j:\n                temp = a[i] + a[j] + a[k]\n                if temp % 3 == 0:\n                    ret += 1\n                k -= 1\n    return ret\n",
        "num_ids": 128
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def isMultipleOfThree(i, j, k):\n        if i < j < k:\n            return True\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # APPROACH 1: O(n^3)\n    # from itertools import combinations_with_replacement\n    # return sum(c < 3 for c in combinations_with_replacement(range(1, n), 3))\n",
        "num_ids": 56
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a = [i*i - i + 1 for i in range(1, n)]\n    return sum(a[i] + a[j] + a[k] for i in range(len(a)) for j in range(len(a)) for k in range(len(a)) if i < j < k and (i + j + k) % 3 == 0)\n",
        "num_ids": 87
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    numbers = []\n    for i in range(1, n):\n        for j in range(i, n):\n            k = n - i - j\n            if i * i + j * j == k * k - i * i + j * j:\n                numbers.append((i, j, k))\n    return len(numbers)\n",
        "num_ids": 82
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    a = []\n    for i in range(1, n+1):\n        for j in range(i + 1, n+1):\n            k = n - i - j\n            if i + j + k == n:\n                a.append(i)\n                a.append(j)\n                a.append(k)\n    return len(a)\n",
        "num_ids": 85
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(3, n):\n        if i * i - i + 1 == i:\n            if is_prime(i) and is_prime(n - i):\n                return 1\n    return 0\n",
        "num_ids": 51
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    if n < 3: return 0\n    \n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if ((i+1)*(i+1)+i) % 3 == 0 and ((j+1)*(j+1)+j) % 3 == 0 and ((k+1)*(k+1)+k) % 3 == 0:\n                    res += 1\n    return res\n",
        "num_ids": 117
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    i, j, k = 1, 1, 1\n    arr = [1]\n    while i < n:\n        j = i\n        while j < n:\n            k = j\n            while k < n:\n                if (i + j + k) % 3 == 0:\n                    arr.append((i, j, k))\n                k += 1\n            j += 1\n        i += 1\n    print(arr)\n    print(len(arr))\n",
        "num_ids": 108
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            k = j - i\n            if k * 3 % 3 == 0 and k!= 0:\n                res += 1\n    return res\n",
        "num_ids": 66
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return (\n        planet\n        for planet in \n        planet_dict.keys()\n        if (\n            planet1 in planet_dict.keys() and \n            planet2 in planet_dict.keys() and\n            (\n                (planet_dict[planet1][0] < planet_dict[planet2][0]) or \n                (planet_dict[planet1][0] == planet_dict[planet2][0] and \n                planet_dict[planet1][1] < planet_dict[planet2][1])\n            )\n        )\n    )\n",
        "num_ids": 132
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    #if they are not in the list of planets\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    #both planets are in the list of planets\n    if planet1 == planet2:\n        return (planet1,)\n        \n    #get the orbits of both planets\n    orbits1 = planets[planet1][\"orbital_radius\"]\n    orbits2 = planets[planet2][\"orbital_radius\"]\n    \n    #check if orbits1 is smaller than orbits2\n    if orbits1 < orbits2:\n        #reverse order\n        return (planet1, ) + bf(planet2, planet1)\n    else:\n        #check if orbits2 is smaller than orbits1\n        if orbits2 < orbits1:\n            #reverse order\n            return (planet2, ) + bf(planet1, planet2)\n        else:\n            #recurse on both planets\n            return bf(planet1, planet2) + (planet1, ) + bf(planet2, planet1)\n",
        "num_ids": 242
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    earth_to_jupiter = planets.index(planet1)\n    jupiter_to_neptune = planets.index(planet2)\n    result = []\n    for i in planets:\n        if planets.index(i) > earth_to_jupiter and planets.index(i) < jupiter_to_neptune:\n            result.append(i)\n    return tuple(sorted(result))\n",
        "num_ids": 135
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    data = ('Jupiter', 'Saturn', 'Neptune', 'Uranus', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \n    if planet1 not in data or planet2 not in data:\n        return ()\n    elif planet1 == planet2:\n        return (planet1, )\n    elif planet2 > planet1:\n        return (planet1, )\n    \n    if planet1 == 'Earth':\n        if planet2 == 'Venus':\n            return ('Earth', 'Mars', 'Jupiter')\n        elif planet2 == 'Mars':\n            return ('Earth', 'Mars')\n        elif planet2 == 'Mars':\n            return ('Earth', )\n        elif planet2 == 'Jupiter':\n            return ('Earth', )\n        elif planet2 == 'Saturn':\n            return ('Earth', )\n    elif planet1 == 'Mercury':\n        if planet2 == 'Venus':\n            return ('Mercury', )\n        elif planet2 == 'Mars':\n            return ('Mercury', )\n        elif planet2 == 'Mars':\n            return ('Mercury', )\n        elif planet2 == 'Jupiter':\n            return ('Mercury', )\n        elif planet2 == 'Saturn':\n            return ('Mercury', )\n    elif planet1 == 'Venus':\n        if planet2 == 'Mercury':\n            return ('Venus', )\n        elif planet2 == 'Mars':\n            return ('Venus', )\n        elif planet2 == 'Mars':\n            return ('Venus', )\n        elif planet2 == 'Jupiter':\n            return ('Venus', )\n        elif planet2 == 'Saturn':\n            return ('Venus', )\n    elif planet1 == 'Mars':\n        if planet2 == 'Venus':\n            return ('Mars', )\n        elif planet2 == 'Mercury':\n            return ('Mars', )\n        elif planet2 == 'Mars':\n            return ('Mars', )\n        elif planet2 == 'Jupiter':\n            return ('Mars', )\n        elif planet2 == 'Saturn':\n            return ('Mars', )\n    elif planet1 == 'Jupiter':\n        if planet2 == 'Saturn':\n            return ('Jupiter', )\n        elif planet2 == 'Venus':\n            return ('Jupiter', )\n        elif planet2 == 'Mars':\n            return ('Jupiter', )\n        elif planet2 == 'Mars':\n            return ('Jupiter', )\n        elif planet2 == 'Earth':\n            return ('Jupiter', )\n        elif planet2 == 'Neptune':\n            return ('Jupiter', )\n    elif planet1 == 'Saturn':\n        if planet2 == 'Venus':\n            return ('Saturn', )\n        elif planet2 == 'Mars':\n            return ('Saturn', )\n        elif planet2 == 'Mars':\n            return ('Saturn', )\n        elif planet2 == 'Jupiter':\n            return ('Saturn', )\n        elif planet2 == 'Earth':\n            return ('Saturn', )\n        elif planet2 == 'Neptune':\n            return ('Saturn', )\n    elif planet1 == 'Uranus':\n        if planet2 == 'Saturn':\n            return ('Uranus', )\n        elif planet2 == 'Venus':\n            return ('Uranus', )\n        elif planet2 == 'Mars':\n            return ('Uranus', )\n        elif planet2 == 'Mars':\n            return ('Uranus', )\n        elif planet2 == 'Jupiter':\n            return ('Uranus', )\n        elif planet2 == 'Earth':\n            return ('Uranus', )\n        elif planet2 == 'Neptune':\n            return ('Uranus', )\n    elif planet1 == 'Neptune':\n        if planet2 == 'Saturn':\n            return ('Neptune', )\n        elif planet2 == 'Venus':\n            return ('Neptune', )\n        elif planet2 == 'Mars':\n            return ('Neptune', )\n        elif planet2 == 'Mars':\n            return ('Neptune', )\n        elif planet2 == 'Jupiter':\n            return ('Neptune', )\n        elif planet2 == 'Earth':\n            return ('Nep",
        "num_ids": 1025
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    distance = lambda planet1, planet2: ((planet1[0] - planet2[0])**2 + (planet1[1] - planet2[1])**2)**0.5\n    min_dist = distance(planet1, planet2)\n    for i in range(len(planets) - 1):\n        for j in range(i+1, len(planets)):\n            dist = distance(planets[i], planets[j])\n            if dist < min_dist:\n                min_dist = dist\n                planet_1 = planets[i]\n                planet_2 = planets[j]\n    return (planet_1, planet_2)\n",
        "num_ids": 192
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    planets = [planet1, planet2]\n    planets = sorted(planets, key=lambda planet: distance(planet))\n    return planets\n",
        "num_ids": 36
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    planets = {\"Mars\":(0.6, \"Saturn\"),\n               \"Jupiter\":(0.2, \"Uranus\"),\n               \"Saturn\":(0.6, \"Neptune\"),\n               \"Uranus\":(0.8, \"Jupiter\"),\n               \"Neptune\":(0.4, \"Saturn\")}\n    \n    if planet1 in planets and planet2 in planets:\n        p1_id, p2_id = planets[planet1]\n        p1_len, p2_len = len(p1_id), len(p2_id)\n        if p1_len == p2_len:\n            return (p1_id, p2_id)\n        elif p1_len < p2_len:\n            return (p1_id, ) + bf(p2_id, planet1)\n        else:\n            return (p2_id, ) + bf(p1_id, planet2)\n    else:\n        return ()\n",
        "num_ids": 238
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # PART 1\n    def is_planet_name_correct(planet):\n        if planet == \"Jupiter\" or planet == \"Earth\" or planet == \"Mars\" or planet == \"Venus\":\n            return True\n        return False\n    \n    def count_orbit_distance(planet, planet_name):\n        if is_planet_name_correct(planet):\n            planet_object = planet_dictionary[planet]\n            return planet_object.distance_from_sun\n        else:\n            return None\n    \n    def closest_orbit_between(planet1, planet2):\n        if is_planet_name_correct(planet1) and is_planet_name_correct(planet2):\n            planet1_object = planet_dictionary[planet1]\n            planet2_object = planet_dictionary[planet2]\n            planet_distance = planet1_object.distance_from_sun + planet2_object.distance_from_sun\n            if planet_distance > planet1_object.distance_from_sun + planet2_object.distance_from_sun:\n                return (planet2_object, planet_distance)\n            else:\n                return (planet1_object, planet_distance)\n        else:\n            return None\n        \n    # PART 2\n    def closest_planets_between_planets(planet1, planet2):\n        planet1_distance = count_orbit_distance(planet1, planet1)\n        planet2_distance = count_orbit_distance(planet2, planet2)\n        \n        if planet1_distance!= None and planet2_distance!= None:\n            return (planet1, planet2, planet1_distance + planet2_distance)\n        elif planet1_distance == None and planet2_distance == None:\n            return (None, None, None)\n        elif planet1_distance!= None and planet2_distance == None:\n            return (planet1, None, planet1_distance)\n        elif planet1_distance == None and planet2_distance!= None:\n            return (None, planet2, planet2_distance)\n        else:\n            return None\n    \n    # PART 3\n    def closest_planets_between_planets(planet1, planet2):\n        planet1_distance = count_orbit_distance(planet1, planet1)\n        planet2_distance = count_orbit_distance(planet2, planet2)\n        if planet1_distance!= None and planet2_distance!= None:\n            return (planet1, planet2, planet1_distance + planet2_distance)\n        elif planet1_distance == None and planet2_distance == None:\n            return (None, None, None)\n        elif planet1_distance!= None and planet2_distance == None:\n            return (planet1, None, planet1_distance)\n        elif planet1_distance == None and planet2_distance!= None:\n            return (None, planet2, planet2_distance)\n        else:\n            return None\n",
        "num_ids": 697
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    # return the closest planet to the sun\n    def closest_planet(planet, planets):\n        for planet in planets:\n            if planet.distance_from_sun() < planet.distance_from_sun(planet1):\n                return planet\n    \n    # return the furthest planet to the sun\n    def furthest_planet(planet, planets):\n        for planet in planets:\n            if planet.distance_from_sun() > planet.distance_from_sun(planet2):\n                return planet\n    \n    # return planets in the middle of the orbit\n    def middle_planet(planet, planets):\n        middle_distance = (planet.distance_from_sun(planet1) + planet.distance_from_sun(planet2)) / 2\n        for planet in planets:\n            if planet.distance_from_sun() == middle_distance:\n                return planet\n    \n    # return the planets that are in the same orbit\n    def same_orbit(planet, planets):\n        for planet in planets:\n            if planet.same_orbit(planet1, planet2):\n                return planet\n    \n    # return the planets in the exact same orbit\n    def exact_orbit(planet, planets):\n        for planet in planets:\n            if planet.distance_from_sun() == planet.distance_from_sun(planet1):\n                return planet\n    \n    # sort planets by proximity to the sun\n    def proximity_sort(planet1, planet2):\n        if planet1.distance_from_sun() == planet2.distance_from_sun():\n            return planet1.distance_from_sun(), planet1, planet2\n        else:\n            return planet1.distance_from_sun(), planet1, planet2\n    \n    # create planet list\n    planets = list(Planet.planets.keys())\n    \n    # return a tuple sorted by proximity to the sun\n    return tuple(sorted(planets, key=proximity_sort, reverse=True))\n",
        "num_ids": 453
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(sorted(lst, key=len), key=len)\n    ",
        "num_ids": 21
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return lst\n    else:\n        return sorted(lst, key=lambda x: len(x), reverse=False)\n",
        "num_ids": 42
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    new_list = []\n    for item in lst:\n        if len(item)%2 == 0:\n            new_list.append(item)\n    new_list.sort()\n    return new_list\n",
        "num_ids": 52
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if lst is None or len(lst) == 0:\n        return lst\n",
        "num_ids": 22
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    lst.sort(key=len)\n    print(lst)\n    for i in range(len(lst)):\n        lst[i] = lst[i][0]\n    print(lst)\n    \n    #lst.sort(key=len)\n    #return sorted(lst, key=len)\n",
        "num_ids": 81
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(lst, key=len)\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(lst, key=lambda x: len(x))\n",
        "num_ids": 18
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lst = lst[:]\n    lst.sort(key=lambda x: len(x), reverse=True)\n    result = []\n    for word in lst:\n        if len(word) > 1:\n            result.append(word)\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # your code here\n    i = 0\n    while i < len(lst):\n        if len(lst[i]) % 2!= 0:\n            lst.pop(i)\n        else:\n            i += 1\n    return sorted(lst)\n",
        "num_ids": 64
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    return x if n % x == 0 else y\n",
        "num_ids": 15
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert(n > 0)\n    assert(x >= 0)\n    assert(y >= 0)\n    if n % x == 0:\n        return x\n    elif n % y == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 60
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if is_prime(n):\n        if n == x:\n            return x\n        elif n == y:\n            return y\n    return x\n",
        "num_ids": 37
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x if n % x == 0 else y\n",
        "num_ids": 13
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x if n in prime_numbers(n) else y\n",
        "num_ids": 17
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 33
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n > 0:\n        if n % 2 == 0:\n            return x\n        else:\n            return y\n    else:\n        return x\n",
        "num_ids": 37
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x if n in x_set else y\n",
        "num_ids": 13
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x if n % x == 0 else y\n",
        "num_ids": 13
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not lst:\n        return 0\n    \n    odd_nums = 0\n    for num in lst:\n        if num % 2 == 1:\n            odd_nums += num ** 2\n    return odd_nums\n",
        "num_ids": 56
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # n = len(lst)\n    # if n == 0:\n    #     return 0\n    # s = 0\n    # for i in range(n):\n    #     if lst[i] % 2!= 0:\n    #         s = s + (lst[i] ** 2)\n    # return s\n    \n    n = len(lst)\n    if n == 0:\n        return 0\n    s = 0\n    for i in range(n):\n        if lst[i] % 2!= 0:\n            s = s + (lst[i] ** 2)\n    return s",
        "num_ids": 147
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # initialize sum\n    # loop over list and add odd numbers\n    # subtract 1 from odds\n    # if greater than zero, add to sum\n    if lst == []:\n        return 0\n    \n    sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            sum += lst[i] ** 2\n    \n    return sum",
        "num_ids": 96
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    sum_odd = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum_odd += i**2\n    return sum_odd",
        "num_ids": 39
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return 0\n    if isinstance(lst, str):\n        raise TypeError('Input must be a list!')\n    sum_of_squares = 0\n    for i in lst:\n        if (i % 2 == 1 and i > 0 and not isinstance(i, int)) or (i < 0):\n            continue\n        else:\n            sum_of_squares += i**2\n    return sum_of_squares\n",
        "num_ids": 114
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return 0\n    sum_odd = 0\n    for num in lst:\n        if num % 2!= 0:\n            sum_odd += num**2\n    return sum_odd\n    \ndouble_the_difference([1, 3, 2, 0])\ndouble_the_difference([-1, -2, 0])\ndouble_the_difference([9, -2])\ndouble_the_difference([0])\n",
        "num_ids": 113
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for x in lst:\n        if x % 2 == 0:\n            even_sum += x ** 2\n        else:\n            odd_sum += x\n    return even_sum + odd_sum\n",
        "num_ids": 62
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    sum = 0\n    for num in lst:\n        if num!= 0 and num%2 == 1:\n            sum += num**2\n    return sum\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))",
        "num_ids": 107
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    try:\n        if lst == []:\n            return 0\n        else:\n            odd = 0\n            for number in lst:\n                if number%2!= 0:\n                    odd += number*number\n            return odd\n    except:\n        return None\n    ",
        "num_ids": 64
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        odd_numbers = 0\n        for i in range(len(lst)):\n            if lst[i] % 2!= 0:\n                odd_numbers += lst[i] ** 2\n        return odd_numbers\n    \n    \n",
        "num_ids": 80
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    matches = 0\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            matches += 1\n        diff.append(abs(game[i]-guess[i]))\n    diff = diff[:matches]\n    return diff\n",
        "num_ids": 74
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #return guess - game\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    \n    # build a matrix for the two vectors\n    m = len(guess)\n    n = len(game)\n    \n    score_matrix = []\n    guess_matrix = []\n    for i in range(m):\n        score_matrix.append([0]*n)\n    for i in range(n):\n        guess_matrix.append([0]*m)\n    \n    \n    \n    \n    for i in range(m):\n        for j in range(n):\n            score_matrix[i][j] = abs(guess[i] - game[j])\n            guess_matrix[j][i] = abs(guess[i] - game[j])\n    \n    \n    \n    return score_matrix\n",
        "num_ids": 186
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [abs(guess - i) for i in game ]\n    \n",
        "num_ids": 19
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    out = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            out.append(0)\n        else:\n            out.append(abs(guess[i]-game[i]))\n    return out\n",
        "num_ids": 65
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    guesses = list(guess)\n    scores = list(game)\n    \n    match = 0\n    dif = []\n    \n    for i in range(len(scores)):\n        if scores[i] == guesses[i]:\n            match += 1\n            dif.append(0)\n        else:\n            dif.append(abs(scores[i]-guesses[i]))\n    \n    return dif\n    \n    \n    \n    \n    \n",
        "num_ids": 115
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    return [abs(game[i]-guess[i]) if game[i] == guess[i] else game[i] - guess[i] for i in range(len(game))]\n",
        "num_ids": 48
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # First, the idea is to simply compare the number of elements in each array, and count number of matches\n    # and difference between matches and mismatches\n    if len(guess)!= len(game):\n        return []\n    \n    matches = 0\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            matches += 1\n    diff = matches - len(game)\n    \n    return [diff]*len(guess)\n",
        "num_ids": 114
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [0 if i == j else abs(i-j) for i,j in zip(guess,game)]\n",
        "num_ids": 29
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    d = defaultdict(list)\n    for i in range(len(guess)):\n        d[guess[i]].append(game[i])\n    d = {k:list(set(d[k])) for k in d}\n    return [abs(d[k][i]-game[i]) for i in range(len(game))]\n",
        "num_ids": 86
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # write your code here\n    f = open(class_name + \".txt\", 'r')\n    for line in f:\n        if \"extension\" in line:\n            name = line.split(\" \")[1].strip()\n            extensions.append(name)\n    if extensions.count(extensions[0]) == len(extensions):\n        return class_name + \".\" + extensions[0]\n    else:\n        extensions.sort(key=lambda x: len(x) - len(x.lower()))\n        return class_name + \".\" + extensions[0]\n",
        "num_ids": 138
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    name = class_name\n    exts = extensions\n    max_strength = -1\n    max_strength_name = ''\n    for ext in exts:\n        if ext.istitle():\n            strength = ext.upper()\n        else:\n            strength = ext.lower()\n        if strength > max_strength:\n            max_strength = strength\n            max_strength_name = ext\n    return name + '.' + max_strength_name\n",
        "num_ids": 105
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    strongest_name = None\n    max_strength = 0\n    for extension in extensions:\n        extension_strength = get_extension_strength(class_name, extension)\n        if extension_strength > max_strength:\n            max_strength = extension_strength\n            strongest_name = extension\n    return class_name + '.' + strongest_name\n",
        "num_ids": 84
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    extension_strength_list = []\n    for each_extension in extensions:\n        if class_name.find(each_extension.capitalize())!= -1:\n            strength = -1\n            if len(each_extension) < len(class_name):\n                strength = int(len(each_extension)/len(class_name))\n            else:\n                strength = int(len(class_name)/len(each_extension))\n            extension_strength_list.append([each_extension, strength])\n    return max(extension_strength_list, key=lambda x: x[1])[0]",
        "num_ids": 149
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    return sorted(extensions, key=lambda x: int(re.search('([A-Z])([a-z]+)', x).group()))[0] + '.' + class_name\n    ",
        "num_ids": 51
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # TODO: Write your code here\n    ext = list(extensions)\n    ext.sort(key=lambda x: (-ord(x.upper()), -ord(x.lower())))\n    return class_name + ext[0] + \".StrongestExtension\"\n",
        "num_ids": 65
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    extension_dict = {}\n    for ext in extensions:\n        extension_dict[ext[0].upper()] = (ext,ext[1].lower())\n    \n    sorted_extension_dict = {}\n    for ext in sorted(extension_dict.items(), key=lambda x: (-x[1][0], x[1][1])):\n        sorted_extension_dict[ext[0]] = ext[1]\n    \n    return class_name + '.' + sorted_extension_dict[sorted(sorted_extension_dict.keys())[0]][0]\n",
        "num_ids": 145
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    class_name = class_name.capitalize()\n    extensions = sorted(extensions)\n    \n    if extensions == []:\n        return class_name\n    \n    while extensions:\n        ext = extensions.pop()\n        if ext[0].isupper():\n            if -1*ext.count('i')-ext.count('u') >= -1*ext.count('e')-ext.count('a')+1:\n                if -1*ext.count('e')-ext.count('a') > -1*ext.count('i')-ext.count('u'):\n                    if -1*ext.count('i')-ext.count('u') > -1*ext.count('e')-ext.count('a')-1:\n                        extensions.insert(0, ext)\n                        return class_name + \".\" + ext + \".StrongestExtensionName\"\n                elif -1*ext.count('e')-ext.count('a') > -1*ext.count('i')-ext.count('u')-1:\n                    extensions.insert(0, ext)\n                    return class_name + \".\" + ext + \".StrongestExtensionName\"\n        else:\n            if -1*ext.count('i')-ext.count('u') >= -1*ext.count('e')-ext.count('a')+1:\n                if -1*ext.count('e')-ext.count('a') > -1*ext.count('i')-ext.count('u'):\n                    if -1*ext.count('i')-ext.count('u') > -1*ext.count('e')-ext.count('a')-1:\n                        extensions.insert(0, ext)\n                        return class_name + \".\" + ext + \".StrongestExtensionName\"\n                elif -1*ext.count('e')-ext.count('a') > -1*ext.count('i')-ext.count('u')-1:\n                    extensions.insert(0, ext)\n                    return class_name + \".\" + ext + \".StrongestExtensionName\"\n    return class_name\n",
        "num_ids": 504
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # sort the extensions\n    sorted_extensions = sorted(extensions, key=get_strength)\n    #print(sorted_extensions)\n    \n    # check if its a string\n    if type(class_name)!= str:\n        raise TypeError(\"Input class_name should be a string\")\n    \n    # check if its a list\n    if type(sorted_extensions)!= list:\n        raise TypeError(\"Input sorted_extensions should be a list\")\n",
        "num_ids": 114
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    extensions.sort(reverse=True)\n    highest_extension = extensions[0]\n    for i in range(len(extensions)):\n        if extensions[i].isupper():\n            if extensions[i].lower() > extensions[i]:\n                extensions[i] = extensions[i].lower()\n    return class_name + '.' + highest_extension\n",
        "num_ids": 88
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    def rotate(s):\n        return s[1:] + s[0]\n",
        "num_ids": 20
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for j in range(1,4):\n        if a in a[-j:] or a[:-j] in b:\n            return True\n        else:\n            return False\n",
        "num_ids": 43
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    from collections import defaultdict\n    rotations_counts = defaultdict(int)\n    for word in (a,b):\n        for i in range(len(word)):\n            if i!= 0:\n                rotations_counts[\"\".join(sorted(word[:i]))] += 1\n    for word in (a,b):\n        for i in range(len(word)):\n            if i!= 0:\n                rotations_counts[\"\".join(sorted(word[i:]))] += 1\n    return rotations_counts[word] > 0\n",
        "num_ids": 139
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a in b or b in a or (a + a)[::-1] in b or (a + a)[::-1] in a:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a in b:\n        return True\n    else:\n        for i in range(1,len(a)+1):\n            if a[-i:] == b[:i]:\n                return True\n        return False\n    \nprint(cycpattern_check(\"abcd\",\"abd\"))\nprint(cycpattern_check(\"hello\",\"ell\"))\nprint(cycpattern_check(\"whassup\",\"psus\"))\nprint(cycpattern_check(\"abab\",\"baa\"))\nprint(cycpattern_check(\"efef\",\"eeff\"))\nprint(cycpattern_check(\"himenss\",\"simen\"))\nprint(cycpattern_check(\"QWERTYUIOP\",\"ASDFGHJKL\"))\nprint(cycpattern_check(\"QWERTYUIOP\",\"QWERTYUIOP\")",
        "num_ids": 187
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(1,len(a)+1):\n        if a[i:] in b:\n            return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # first string\n    str1 = a\n    # second string\n    str2 = b\n",
        "num_ids": 23
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    l = len(a)\n    l2 = len(b)\n    if l == l2:\n        return a in b\n    else:\n        if l > l2:\n            if b in a:\n                return True\n            else:\n                return False\n        else:\n            if a in b:\n                return True\n            else:\n                return False\n        return False\n",
        "num_ids": 90
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    a = a.lower()\n    b = b.lower()\n    n = len(a)\n    m = len(b)\n    if (n > m):\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a in b*2 or b in a*2\n",
        "num_ids": 15
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return (num % 10, num // 10)\n",
        "num_ids": 13
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (len(str(num)), sum(1 for x in str(num) if int(x) % 2))\n",
        "num_ids": 29
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # the modulo operator tells us how many '1' we have in the integer\n    even_count = num // 2\n    odd_count = num - even_count\n",
        "num_ids": 40
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (num % 10, (num // 10 + 1) % 2)\n",
        "num_ids": 19
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if type(num)!= int:\n        return\n    num = str(num)\n    even, odd = 0, 0\n    for c in num:\n        if int(c) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n",
        "num_ids": 70
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count_even, count_odd = 0, 0\n    while num > 0:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n    return count_even, count_odd",
        "num_ids": 63
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    def even(num):\n        if num%2 == 0:\n            return True\n        else:\n            return False\n",
        "num_ids": 31
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (num % 2 == 0, num % 2!= 0)\n",
        "num_ids": 18
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count_even = 0\n    count_odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n",
        "num_ids": 54
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (num // 10 % 2, num % 2)\n",
        "num_ids": 15
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if number < 1:\n        return None\n",
        "num_ids": 12
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    roman_nums = {1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi',\n    7: 'vii', 8: 'viii', 9: 'ix', 10: 'x', 11: 'xi', 12: 'xii', 13: 'xiii',\n    14: 'xiv', 15: 'xv', 16: 'xvi', 17: 'xvii', 18: 'xviii', 19: 'xix'}\n    roman_nums_dict = {k: v.lower() for k, v in roman_nums.items()}\n    if number < 1:\n        return ''\n    elif number in roman_nums_dict:\n        return roman_nums_dict[number]\n    else:\n        result = ''\n        while number >= 1:\n            for key, value in roman_nums.items():\n                if number >= key:\n                    result += value\n                    number -= key\n                    break\n    return result\n",
        "num_ids": 244
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    a = [\"\", \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    b = [\"\", \"\", \"x\", \"xx\", \"xxx\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xl\", \"xlx\"]\n    c = [\"\", \"\", \"c\", \"cc\", \"ccc\", \"d\", \"dc\", \"dcc\", \"dccc\", \"dcl\", \"dclc\"]\n    d = [\"\", \"\", \"m\", \"mm\", \"mmm\", \"n\", \"nn\", \"nnn\"]\n    e = [\"\", \"\", \"\", \"\", \"\", \"m\", \"cm\", \"cmc\", \"cmcc\", \"cmcl\", \"dcl\"]\n    f = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"cl\"]\n",
        "num_ids": 209
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # convert number to a string\n    number_str = str(number)\n    # convert number to a list\n    number_list = list(number_str)\n    # perform conversion\n    roman_num = mini_roman_to_int(number_list)\n    # convert the roman numeral to a string\n    roman_num = int_to_roman(roman_num)\n    # convert the roman numeral to lowercase\n    roman_num = roman_num.lower()\n    # return the roman numeral\n    return roman_num\n",
        "num_ids": 131
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError(\"Input must be a positive integer from 1 to 1000.\")\n",
        "num_ids": 29
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    rv = []\n    roman = {1:'I', 5:'V', 10:'X', 50:'L', 100:'C', 500:'D', 1000:'M'}\n    for k in sorted(roman, reverse=True):\n        while number >= k:\n            number -= k\n            rv.append(roman[k])\n    return ''.join(rv)\n",
        "num_ids": 87
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    roman_numeral_table = {1: \"i\", 2: \"ii\", 3: \"iii\", 4: \"iv\", 5: \"v\", 6: \"vi\", 7: \"vii\", 8: \"viii\", 9: \"ix\", 10: \"x\",\n                           11: \"xi\", 12: \"xii\", 13: \"xiii\", 14: \"xiv\", 15: \"xv\", 16: \"xvi\", 17: \"xvii\", 18: \"xviii\",\n                           19: \"xix\", 20: \"xx\", 30: \"XXX\", 40: \"XL\", 50: \"L\", 60: \"LX\", 70: \"LXX\", 80: \"LXXX\",\n                           90: \"XC\", 100: \"C\", 200: \"CC\", 300: \"CCC\", 400: \"CD\", 500: \"D\", 600: \"DC\", 700: \"DCC\",\n                           800: \"DCCC\", 900: \"CM\", 1000: \"M\"}\n    if number in roman_numeral_table:\n        return roman_numeral_table[number]\n    else:\n        return None\n",
        "num_ids": 256
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    r = \"\"\n    romans = [\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\"]\n    roman_num = [\"\", \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\"]\n    for i in range(1, 10):\n        r = r + (romans[i] * number // 10)\n        number = number % 10\n    r = r + (romans[number] + \"\")\n    return r\n    \n",
        "num_ids": 141
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    roman_numerals = {1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix', 10: 'x', 11: 'xi', 12: 'xii', 13: 'xiii', 14: 'xiv', 15: 'xv', 16: 'xvi', 17: 'xvii', 18: 'xviii', 19: 'xix', 20: 'xx', 30: 'xxx', 40: 'xxxx', 50: 'xxxxx', 60: 'xxxxxx', 70: 'xxxxxxx', 80: 'xxxxxxv', 90: 'xxxxxxvi', 100: 'xxxxxxvii', 400: 'l', 500: 'lx', 600: 'lxx', 700: 'lxxx', 800: 'lxxv', 900: 'lxxvi', 1000: 'lxxxix'}\n    # Check if number is between 1 and 1000.\n    if number < 1 or number > 1000:\n        raise ValueError('Input must be between 1 and 1000')\n",
        "num_ids": 254
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert 1 <= number <= 1000, '1 <= num <= 1000'\n",
        "num_ids": 17
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not is_triangle(a, b, c):\n        return False\n",
        "num_ids": 20
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or c**2 + b**2 == a**2) and a!= b!= c\n",
        "num_ids": 49
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2\n",
        "num_ids": 27
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    side_a = hypotenuse(a, b)\n    side_b = hypotenuse(b, c)\n    side_c = hypotenuse(a, c)\n    sides = [side_a, side_b, side_c]\n    sides.sort()\n    if sides[0]**2 == sides[1]**2 + sides[2]**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 104
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    \n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n    \ndef right_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a right-angled triangle. Return True\n    if the three sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which all angles are right angles or\n    90 degree.\n    Example:\n    right_triangle(3, 4, 5) == True\n    right_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n        \ndef circle_intersection(radius1, radius2):\n    '''\n    Given the radii of two circles. Return True if they intersect, False \n    otherwise.\n    Example:\n    circle_intersection(2, 1) == True\n    circle_intersection(1, 2) == False\n    '''\n    if radius1 > radius2:\n        radius1, radius2 = radius2, radius1\n    if radius1**2 == radius2**2:\n        return True\n    else:\n        return False\n    \ndef circle_area(radius):\n    '''\n    Given the radius of a circle. Return its area.\n    Example:\n    circle_area(1) == 3.14\n    '''\n    return (radius**2) * math.pi\n    \ndef circle_circumference(radius):\n    '''\n    Given the radius of a circle. Return its circumference.\n    Example:\n    circle_circumference(1) == 12.566370614359172\n    '''\n    return 2*math.pi*radius\n",
        "num_ids": 465
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a*a + b*b == c*c or c*c + b*b == a*a:\n        return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a * a + b * b == c * c:\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = set(words)\n    return max(s, key = len)\n",
        "num_ids": 20
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    max = None\n    for word in words:\n        if max == None or len(max) < len(word):\n            max = word\n    return max\n",
        "num_ids": 38
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    max = 0\n    max_word = \"\"\n    \n    for word in words:\n        new = set(word)\n        if len(new) == max:\n            if max_word == \"\":\n                max_word = word\n            else:\n                max_word = \"\"\n        elif len(new) > max:\n            max = len(new)\n            max_word = word\n            \n    return max_word\n",
        "num_ids": 103
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    max_count = 0\n    max_word = \"\"\n",
        "num_ids": 15
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    max_len = 0\n    for i in words:\n        if len(i) > max_len:\n            max_len = len(i)\n    max_word = \"\"\n    for i in words:\n        if len(i) == max_len:\n            max_word = i\n    return max_word\n    \n    \n    \n    \ndef find_max_char(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n",
        "num_ids": 152
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    max_word = \"\"\n    for word in words:\n        if len(word) > len(max_word):\n            max_word = word\n    return max_word\n",
        "num_ids": 42
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    max_ = max(words, key = len)\n    count = len(set(max_))\n    if count == len(max_):\n        return max_\n    else:\n        return max(words, key = lambda x:x)\n",
        "num_ids": 58
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    max_num = 0\n    max_word = \"\"\n    for word in words:\n        set_word = set(word)\n        if len(set_word) > max_num:\n            max_num = len(set_word)\n            max_word = word\n    return max_word\n",
        "num_ids": 71
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # here's the function\n    # -- is a dictionary that maps the word to the number of unique characters\n    # in the word\n    counts = {}\n",
        "num_ids": 39
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max_cnt = 0\n    max_word = \"\"\n    for word in words:\n        cur_cnt = len(word)\n        if cur_cnt > max_cnt:\n            max_word = word\n            max_cnt = cur_cnt\n        elif cur_cnt == max_cnt:\n            if word < max_word:\n                max_word = word\n    return max_word\n",
        "num_ids": 101
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    left = need - number\n    return [number + left, left]\n    \nprint(eat(5, 6, 10))\nprint(eat(4, 8, 9))\nprint(eat(1, 10, 10))\nprint(eat(2, 11, 5))",
        "num_ids": 69
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if number == 0:\n        return [0, need]\n    \n    if number >= need and remaining >= need:\n        return [number + remaining - need, 0]\n    \n    if need <= remaining:\n        return [number + need, 0]\n    \n    return [number, need - remaining]\n",
        "num_ids": 72
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if number >= need:\n        return [number - need, need - 1]\n    else:\n        return [number + remaining, remaining - need]\n",
        "num_ids": 36
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Conditions\n    if number == 0 or need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number, remaining - need]\n",
        "num_ids": 42
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    total = 0\n    while number > 0:\n        need -= 1\n        number = number - 1 if need > 0 else number\n        remaining = remaining - 1 if need > 0 else remaining\n        total = total + 1\n    return [total, remaining]\n    \n    \n    \n    \nif __name__ == \"__main__\":\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5)",
        "num_ids": 126
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need == remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need > remaining:\n        return (number, 0)\n    \n    if need ",
        "num_ids": 1025
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if need > remaining:\n        return [number, remaining]\n    else:\n        return [number + need, remaining - need]\n",
        "num_ids": 32
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number, remaining]\n",
        "num_ids": 32
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    return [number, need - number]\n",
        "num_ids": 13
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    eaten = number - need\n    total = (eaten + remaining) / 2\n    return [int(total), int(remaining - (total * 2))]\n    \n",
        "num_ids": 42
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    return None\n",
        "num_ids": 11
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = 0\n",
        "num_ids": 6
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Number of operands\n    n = len(operand)-1\n",
        "num_ids": 18
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = operand[0]\n    for i in range(1,len(operand)):\n        if operator[i-1] == \"+\":\n            result += operand[i]\n        elif operator[i-1] == \"-\":\n            result -= operand[i]\n        elif operator[i-1] == \"*\":\n            result *= operand[i]\n        elif operator[i-1] == \"/\":\n            result /= operand[i]\n        elif operator[i-1] == \"**\":\n            result **= operand[i]\n        else:\n            raise NotImplementedError(\"unknown operator: \" + operator[i-1])\n    return result\n",
        "num_ids": 167
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if len(operator) == len(operand):\n        if len(operator) == 0:\n            return operand[0]\n        else:\n            return do_algebra(operator[1:], operand[1:]) + do_algebra(operator[0], operand[0])\n    else:\n        return operand[0]\n",
        "num_ids": 84
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return eval(\"\".join(operator) + \"(\" + \"\".join(operand) + \")\")\n",
        "num_ids": 26
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    #base case\n    if len(operator) == 0:\n        return\n",
        "num_ids": 19
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # your code here\n    operator = list(operator)\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result = result ** operand[i]\n        else:\n            raise ValueError\n",
        "num_ids": 166
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # your code here\n    if operator[0] == '+':\n        return sum(operand)\n    elif operator[0] == '-':\n        return sum(operand)\n    elif operator[0] == '*':\n        return reduce(lambda x, y: x * y, operand)\n    elif operator[0] == '/':\n        return reduce(lambda x, y: x / y, operand)\n    elif operator[0] == '**':\n        return reduce(lambda x, y: x ** y, operand)\n",
        "num_ids": 132
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    i = 0\n    while i < len(operator):\n        if operator[i] == '+':\n            operand = add(operand, operator[i+1])\n            i += 2\n        elif operator[i] == '-':\n            operand = subtract(operand, operator[i+1])\n            i += 2\n        elif operator[i] == '*':\n            operand = multiply(operand, operator[i+1])\n            i += 2\n        elif operator[i] == '/':\n            operand = divide(operand, operator[i+1])\n            i += 2\n        elif operator[i] == '^':\n            operand = exponentiate(operand, operator[i+1])\n            i += 2\n",
        "num_ids": 179
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    res = \"\"\n    for i in range(len(s)):\n        if s[i] in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            res += s[i].swapcase()\n        else:\n            res += s[i]\n    return res",
        "num_ids": 84
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #base case\n    if not s:\n        return s\n    #determine whether we need to reverse\n    if s[0].isalpha():\n        #reverse if upper\n        if s[0].isupper():\n            return s[::-1].upper()\n        #reverse if lower\n        else:\n            return s[::-1].lower()\n    else:\n        #return original\n        return s[::-1]\n",
        "num_ids": 103
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n    return ''.join(s)\n",
        "num_ids": 80
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    def reverse_upper_lower(s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        res = \"\"\n        for i in range(len(s)):\n            if s[i].isalpha():\n                if s[i].isupper():\n                    res = res + s[i].lower()\n                else:\n                    res = res + s[i].upper()\n            else:\n                res = res + s[i]\n        return res\n        \n    def reverse_string(s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        return \"\".join(reversed(s))\n    \n    # test cases\n    if len(s) == 0:\n        return reverse_string(s)\n    elif len(s) == 1:\n        if s.isalpha():\n            if s.isupper():\n                return s.lower()\n            else:\n                return s.upper()\n        else:\n            return s\n    else:\n        if s[0].isalpha():\n            if s[0].isupper():\n                return reverse_upper_lower(s)\n            else:\n                return reverse_string(s)\n        else:\n            return reverse_string(s)\n        ",
        "num_ids": 302
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    reversed_string = \"\"\n    for i in range(len(s)):\n        if is_letter(s[i]):\n            reversed_string += s[i].lower() if is_upper(s[i]) else s[i].upper()\n        else:\n            reversed_string += s[i]\n    return reversed_string\n",
        "num_ids": 86
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not s:\n        return s\n    else:\n        return \"\".join([c.upper() if c.islower() else c.lower() for c in s])\n",
        "num_ids": 42
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            elif s[i].islower():\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result\n",
        "num_ids": 85
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not s:\n        return s\n    result = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result.append(s[i].upper())\n            else:\n                result.append(s[i].lower())\n        else:\n            result.append(s[i])\n    return ''.join(result)\n    \n",
        "num_ids": 101
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l = len(s)\n    if l < 1:\n        return \"\"\n    if s[0].isalpha():\n        if s[0].isupper():\n            return s[:0:-1].upper()\n        else:\n            return s[:0:-1].lower()\n    else:\n        return s[:0:-1]\n",
        "num_ids": 82
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if text:\n        hash_object = hashlib.md5(text.encode())\n        hex_dig = hash_object.hexdigest()\n        return hex_dig\n",
        "num_ids": 43
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return hashlib.md5(text.encode()).hexdigest()\n",
        "num_ids": 20
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # \"9b4c78b1ac86d0d7ab1f86a9ba78e33\"\n    if text == '':\n        return None\n",
        "num_ids": 40
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    if not text:\n        return None\n    \n    text = bytes(text, 'utf-8')\n    return hashlib.md5(text).hexdigest()\n",
        "num_ids": 43
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not text:\n        return None\n    return md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not text:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    import hashlib\n",
        "num_ids": 6
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(text) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 34
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return hashlib.md5(text.encode('utf-8')).hexdigest() if text else None\n",
        "num_ids": 28
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    integers = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            integers.append(i)\n    return integers\n",
        "num_ids": 42
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    integers = []\n    for i in range(a, b + 1):\n        if (i % 2 == 0):\n            integers.append(i)\n    return integers\n",
        "num_ids": 43
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    digits = []\n    for i in range(a, b + 1):\n        digits.append(str(i))\n    return sorted(digits)\n",
        "num_ids": 39
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return range(a, b) if a % 2 == 0 and b % 2 == 0 else []\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return list(range(a,b))\n",
        "num_ids": 12
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n",
        "num_ids": 6
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(range(a, b+1, 2))\n",
        "num_ids": 16
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [i for i in range(a, b + 1) if i % 2 == 0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(range(a, b))[::2]\n",
        "num_ids": 16
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a < 0 or b < 0 or a >= b or a <= 0 or b >= 0:\n        raise ValueError(\"Invalid input\")\n    return [i for i in range(a, b) if i % 2 == 0]\n",
        "num_ids": 54
    }
]