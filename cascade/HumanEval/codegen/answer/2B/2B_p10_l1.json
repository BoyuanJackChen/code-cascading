[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    size = len(numbers)\n    if size < 2:\n        return False\n    # List from largest to smallest\n    numbers.sort()\n    i = 0\n    j = size - 1\n    while i < j:\n        if numbers[i] + numbers[j] <= threshold:\n            i += 1\n            j -= 1\n        else:\n            return True\n    return False\n",
        "num_ids": 92
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Check if length of list is greater than 2\n    if len(numbers) < 3:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    min_elements = 2\n    if len(numbers) <= min_elements:\n        return False\n    \n    numbers = list(sorted(numbers))\n    last = numbers.pop()\n    res = False\n    for n in numbers:\n        if abs(last - n) < threshold:\n            res = True\n        last = n\n    return res\n",
        "num_ids": 88
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert len(numbers) > 1\n",
        "num_ids": 11
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] < threshold:\n            return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] < threshold:\n                return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] < threshold:\n                return True\n",
        "num_ids": 50
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i, n in enumerate(numbers):\n        for j in range(i+1, len(numbers)):\n            if abs(n - numbers[j]) <= threshold:\n                return True\n    return False",
        "num_ids": 52
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(set([abs(x - y) for x in numbers for y in numbers if x < y])) >= threshold\n",
        "num_ids": 30
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    i = 1\n    for i in range(len(numbers)-1):\n        if numbers[i] - numbers[i + 1] < threshold:\n            return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = paren_string\n    result = []\n    i = 0\n    while i < len(s):\n        curr = s[i]\n        if curr == '(':\n            j = i + 1\n            while j < len(s):\n                if s[j] == '(':\n                    j += 1\n                elif s[j] == ')':\n                    j += 1\n                    result.append(''.join(s[i:j]))\n                    i = j\n                    break\n                else:\n                    j += 1\n        i += 1\n    return result\n",
        "num_ids": 135
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.replace(' ', '')\n    paren_list = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_list.append(paren_string[i])\n        elif paren_string[i] == ')':\n            paren_list.append(paren_string[i])\n            i += 1\n            while paren_string[i]!= '(':\n                i += 1\n                if i == len(paren_string):\n                    break\n            else:\n                paren_list.append(paren_string[i])\n                i += 1\n        i += 1\n    return paren_list\n",
        "num_ids": 203
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    paren_string = paren_string.replace(\" \", \"\")\n    output = []\n    paren_stack = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            paren_stack.append(\"(\")\n        elif paren_string[i] == \")\":\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                output.append(paren_string[i])\n    return output\n",
        "num_ids": 117
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return separate_paren_groups_brute_force(paren_string)\n",
        "num_ids": 19
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    paren_string = paren_string.replace(' ', '')\n",
        "num_ids": 17
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    new_paren_string = []\n    new_paren_string.append(paren_string.strip())\n    while len(new_paren_string) > 0:\n        if new_paren_string[0].find('(')!= -1:\n            new_paren_string.insert(0, new_paren_string.pop(0)[new_paren_string.pop(0).find('('):])\n        else:\n            new_paren_string = [','.join(new_paren_string)]\n    return new_paren_string\n",
        "num_ids": 127
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # nested_parens = r'([\\(\\[].*?[\\)\\]])'\n    # new_parens = r'\\1([\\(\\[].*?[\\)\\]])'\n    paren_groups = r'([\\(\\[].*?[\\)\\]])'\n    new_parens = r'\\1([\\(\\[].*?[\\)\\]])'\n    result = re.findall(paren_groups, paren_string)\n    result = [match.replace(new_parens, '') for match in result]\n    return result\n",
        "num_ids": 133
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    paren_list = paren_string.split(' ')\n    if paren_list[0] == ')' and paren_list[-1] == '(':\n        return []\n    paren_list = paren_list[1:-1]\n    opening_parens = []\n    for paren in paren_list:\n        if paren == '(':\n            opening_parens.append(paren)\n        else:\n            if not opening_parens:\n                continue\n            elif paren == ')':\n                opening_parens.pop()\n    if not opening_parens:\n        return [paren_string]\n    return list(map(lambda paren: paren_string.replace(paren, '', 1), opening_parens))\n",
        "num_ids": 179
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(paren_string) == 0:\n        return []\n",
        "num_ids": 17
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    stack = []\n    stack.append('(')\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append(')')\n    return stack\n",
        "num_ids": 88
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return float(number - math.floor(number))\n",
        "num_ids": 14
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if number == 0.0:\n        return 0.0\n    else:\n        if number < 1:\n            number = 1\n        \n        decimal_part = number - int(number)\n        return decimal_part\n",
        "num_ids": 53
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    i, d = integer_part(number)\n    return d\n",
        "num_ids": 17
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if number >= 1.0:\n        integer_part, _, remainder = math.modf(number)\n        return int(integer_part)\n    return 0.0\n",
        "num_ids": 42
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    integer, decimals = divmod(number, 1)\n    return decimals\n",
        "num_ids": 22
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    num_left, num_right = number - math.floor(number), math.ceil(number) - number\n    if abs(num_left) >= 1 and abs(num_right) >= 1:\n        return 0.5\n    else:\n        return num_right if num_left > 0 else num_left\n",
        "num_ids": 75
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return number % 1\n",
        "num_ids": 7
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # TODO: Complete\n    integer, decimal = math.modf(number)\n    return decimal\n",
        "num_ids": 25
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # use floor division to get integer part\n    integer_part = math.floor(number)\n    # the value after integer_part is the decimal part\n    decimal_part = number - integer_part\n    return decimal_part\n",
        "num_ids": 54
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if number == 0:\n        return number\n    num = abs(number)\n    if num == 0:\n        return 0\n    \n    max_int = int(num)\n    frac = num - max_int\n    return frac\n",
        "num_ids": 57
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    prev_balance = 0\n    for op in operations:\n        prev_balance += op\n        if prev_balance < 0:\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if operations[0] < 0:\n        for i in range(1, len(operations)):\n            if operations[i] < 0:\n                return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    balance = 0\n    for i in range(len(operations)):\n        if operations[i] > 0:\n            balance += operations[i]\n        else:\n            balance -= operations[i]\n",
        "num_ids": 49
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance = 0\n            return False\n        balance += operation\n    return balance < 0\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    balance = 0\n    for op in operations:\n        if op < 0:\n            balance += op\n    return balance < 0\n",
        "num_ids": 31
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    total = 0\n    for operation in operations:\n        if operation > 0:\n            total += operation\n        elif operation < 0:\n            total -= operation\n",
        "num_ids": 38
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    i = 0\n    while i < len(operations):\n        if operations[i] <= 0:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # if there is no balance in the account\n    if sum(operations) == 0:\n        return False\n    # if the balance is greater than zero, it should return False\n    elif sum(operations) > 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 66
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(operations)):\n        if operations[i] < 0:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    balance = 0\n    for i in operations:\n        balance += i\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    total = sum(numbers)\n    mean = total / len(numbers)\n    deviations = []\n    for i in numbers:\n        deviations.append(i - mean)\n    return mean + float(sum(deviations)) / len(numbers)\n",
        "num_ids": 63
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    numbers_mean = sum(numbers) / len(numbers)\n    return sum(abs(x - numbers_mean) for x in numbers) / len(numbers)\n",
        "num_ids": 43
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n",
        "num_ids": 27
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    mean = sum(numbers) / len(numbers)\n    squared_difference = sum(n ** 2 for n in numbers)\n    return squared_difference / len(numbers) - (mean ** 2)\n",
        "num_ids": 53
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    m = mean(numbers)\n    return sum(abs(x - m) for x in numbers) / len(numbers)\n",
        "num_ids": 32
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Get the mean of the list of numbers\n    mean = sum(numbers) / len(numbers)\n",
        "num_ids": 27
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum([abs(number - mean(numbers)) for number in numbers]) / len(numbers)\n",
        "num_ids": 26
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum([abs(x-numbers[0]) for x in numbers])/len(numbers)\n",
        "num_ids": 26
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # In this function, we calculate the mean of the input list.\n    mean = sum(numbers) / len(numbers)\n    # We use a for loop to calculate the absolute difference between each\n    # element in the input list and the mean in this function.\n    summation = 0\n    for number in numbers:\n        summation += abs(number - mean)\n    return summation / len(numbers)\n",
        "num_ids": 99
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert delimeter > 0\n    assert len(numbers) > 0\n",
        "num_ids": 18
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    new_list = []\n    for i in range(len(numbers)):\n        if i == len(numbers)-1:\n            new_list.append(numbers[i])\n        else:\n            new_list.append(numbers[i])\n            new_list.append(delimeter)\n    return new_list\n",
        "num_ids": 80
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return ([delimeter] * (len(numbers) - 1) + numbers)\n",
        "num_ids": 21
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert isinstance(numbers, list), \"numbers must be a list\"\n    assert len(numbers) > 0, \"numbers must not be empty\"\n    assert isinstance(delimeter, int), \"delimeter must be an integer\"\n    return [delimeter] * (len(numbers) // 2) + numbers + [delimeter] * (len(numbers) % 2)\n",
        "num_ids": 92
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not numbers:\n        return numbers\n    if len(numbers) == 1:\n        return [numbers[0], delimeter, numbers[0]]\n    \n    return [*numbers[:len(numbers) - 1], delimeter, *numbers[1:]]\n    \n",
        "num_ids": 68
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert len(numbers) >= 2\n    return_list = []\n    for i in range(len(numbers)):\n        if i < len(numbers) - 1:\n            return_list.extend((numbers[i], delimeter))\n        else:\n            return_list.extend((numbers[i],))\n    return return_list\n",
        "num_ids": 86
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # new_list = list(numbers)\n    new_list = []\n    new_list.extend(numbers)\n    new_list.extend(numbers)\n",
        "num_ids": 44
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert (type(numbers) == list and type(delimeter) == int)\n    i = 0\n    result = []\n    while i < len(numbers):\n        if i!= 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n        i += 1\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(map(lambda x: x, map(lambda x: x + delimeter, numbers)))\n",
        "num_ids": 25
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not numbers:\n        return []\n    else:\n        result = [numbers[0]]\n        for i in range(1, len(numbers)):\n            result.append(delimeter)\n            result.append(numbers[i])\n        result.append(numbers[-1])\n        return result\n",
        "num_ids": 76
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return_list = []\n    parens_string = paren_string.split()\n    for i in range(len(parens_string)):\n        if parens_string[i] == \"(\":\n            return_list.append(len(parens_string))\n        elif parens_string[i] == \")\":\n            return_list.append(len(parens_string) - return_list.pop())\n        else:\n            continue\n    return return_list\n",
        "num_ids": 117
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    paren_string_list = list(paren_string.strip())\n    paren_string_length = len(paren_string_list)\n",
        "num_ids": 33
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    parens_list = list(paren_string)\n    result = []\n    depth = 0\n    for i in range(len(parens_list)):\n        if parens_list[i] == '(':\n            depth += 1\n        elif parens_list[i] == ')':\n            depth -= 1\n        if depth == 0:\n            result.append(i)\n    return result\n",
        "num_ids": 98
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    level = 0\n    paren_list = list(paren_string.split())\n",
        "num_ids": 20
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    cur_level = 0\n    for char in paren_string:\n        if char == '(':\n            cur_level += 1\n        elif char == ')':\n            cur_level -= 1\n    return cur_level\n",
        "num_ids": 54
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    paren_string = ''.join(paren_string.split()) # make each group a string of letters only\n    num_open_parens = 0\n    num_closed_parens = 0\n    level = 0\n    paren_strings = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            num_open_parens += 1\n        elif char == ')':\n            num_closed_parens += 1\n        elif char =='':\n            if num_open_parens > 0:\n                paren_strings.append(i - num_open_parens)\n                num_open_parens = 0\n            if num_closed_parens > 0:\n                paren_strings.append(i - num_closed_parens)\n                num_closed_parens = 0\n        elif num_open_parens < num_closed_parens:\n            paren_strings.append(i)\n        elif num_open_parens > num_closed_parens:\n            paren_strings.append(i)\n            num_closed_parens = 0\n    paren_strings.append(len(paren_string) - 1) # last group is not counted\n    return paren_strings\n",
        "num_ids": 290
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return_list = []\n    level = 0\n    for ch in paren_string:\n        if ch == '(':\n            level += 1\n        elif ch == ')':\n            level -= 1\n        if level > return_list[-1]:\n            return_list.append(level)\n    return return_list\n",
        "num_ids": 77
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return _get_depth_of_nesting(paren_string)\n",
        "num_ids": 18
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    stack = []\n    paren_list = paren_string.split(' ')\n    max_nesting = 0\n    for i in range(len(paren_list)):\n        if paren_list[i] == '(' or paren_list[i] == ')':\n            if paren_list[i] == '(':\n                stack.append(paren_list[i])\n            else:\n                if stack:\n                    stack.pop()\n                    if not stack:\n                        max_nesting = max(max_nesting, i)\n",
        "num_ids": 130
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(map(lambda x: sum(1 for _ in x.count('(')),\n    [paren_string.split(' ')]))\n",
        "num_ids": 35
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    filtered_list = []\n    for s in strings:\n        if substring in s:\n            filtered_list.append(s)\n    return filtered_list\n",
        "num_ids": 41
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda string: substring in string, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(filter(lambda string: substring in string, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    filtered = []\n    for s in strings:\n        if substring in s:\n            filtered.append(s)\n    return filtered\n",
        "num_ids": 35
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(filter(lambda s: substring in s, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # faster than any function I have found on the web\n    return [string for string in strings if substring in string]\n",
        "num_ids": 29
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [x for x in strings if substring in x]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    filtered_list = []\n    for str in strings:\n        if substring in str:\n            filtered_list.append(str)\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert numbers, 'List cannot be empty.'\n    total = 0\n    product = 1\n    for number in numbers:\n        total += number\n        product *= number\n    return (total, product)\n",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    sum_numbers = 0\n    product_numbers = 1\n    for i in numbers:\n        sum_numbers += i\n        product_numbers *= i\n    return (sum_numbers, product_numbers)\n",
        "num_ids": 74
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if numbers:\n        sum = 0\n        product = 1\n        for i in numbers:\n            sum += i\n            product *= i\n        return (sum, product)\n    else:\n        return (0, 1)\n",
        "num_ids": 54
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # return (sum(numbers), numbers[0] * numbers[1] * numbers[2] * numbers[3])\n    # return sum(numbers), prod(numbers)\n    return sum(numbers), prod(numbers)\n",
        "num_ids": 57
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return s, p\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    total = 0\n    product = 1\n    for num in numbers:\n        total += num\n        product *= num\n    return total, product\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s = 0\n    p = 1\n    for i in numbers:\n        s += i\n        p *= i\n    return (s, p)\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    sum_of_numbers, product_of_numbers = 0, 1\n    for i in numbers:\n        sum_of_numbers += i\n        product_of_numbers *= i\n    return sum_of_numbers, product_of_numbers\n",
        "num_ids": 64
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if numbers == []:\n        return (0, 1)\n    else:\n        sum = 0\n        product = 1\n        for n in numbers:\n            sum += n\n            product *= n\n        return (sum, product)\n",
        "num_ids": 56
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s, p = 0, 1\n    for i in numbers:\n        s, p = s + i, s * p\n    return s, p\n",
        "num_ids": 36
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        max_value = numbers[i]\n        for j in range(i + 1, len(numbers)):\n            if numbers[j] > max_value:\n                max_value = numbers[j]\n        result.append(max_value)\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not numbers:\n        return []\n    last_max = numbers[0]\n    output = []\n    for n in numbers:\n        if n > last_max:\n            last_max = n\n        output.append(last_max)\n    return output\n",
        "num_ids": 63
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    rolling_max_list = []\n    rolling_max = float('-inf')\n    max_count = 0\n    for item in numbers:\n        if item > rolling_max:\n            rolling_max = item\n            max_count = 1\n        elif item == rolling_max:\n            max_count += 1\n        else:\n            rolling_max_list.append(rolling_max)\n            rolling_max = item\n            max_count = 1\n    rolling_max_list.append(rolling_max)\n    return rolling_max_list\n",
        "num_ids": 129
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Set up the rolling maximum to be empty list\n    max_list = []\n    for i, num in enumerate(numbers):\n        # For every new element in the list, add to the max_list the current element (max_list[i-1])\n        if i == 0:\n            max_list.append(num)\n        else:\n            max_list.append(max(max_list[i-1], num))\n    return max_list\n",
        "num_ids": 109
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    max_rolling = []\n    max_rolling.append(numbers[0])\n    for i in range(1, len(numbers)):\n        max_rolling.append(max(numbers[i], max_rolling[i-1]))\n    return max_rolling\n",
        "num_ids": 66
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    max_value = max(numbers)\n    max_index = numbers.index(max_value)\n    rolling_max = numbers[max_index:] + numbers[:max_index]\n    return rolling_max\n",
        "num_ids": 52
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    rolling_max = []\n    for i in range(1, len(numbers)):\n        if numbers[i] > numbers[i-1]:\n            rolling_max.append(numbers[i])\n        else:\n            rolling_max.append(numbers[i-1])\n    return rolling_max\n",
        "num_ids": 75
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not numbers:\n        return None\n    \n    # We use list so that we can iterate over it and insert new element\n    # without using append method which is not supported by list\n    current_max = numbers[0]\n    new_max = numbers[0]\n    result = []\n    for num in numbers[1:]:\n        if num > current_max:\n            new_max = num\n        else:\n            new_max = current_max\n        current_max = new_max\n        result.append(new_max)\n    return result\n",
        "num_ids": 131
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_list.append(numbers[i])\n        elif numbers[i] >= max_list[i-1]:\n            max_list.append(numbers[i])\n        else:\n            max_list.append(max_list[i-1])\n",
        "num_ids": 91
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = []\n    n = len(numbers)\n    max_value = numbers[0]\n    for i in range(n):\n        max_value = max(max_value, numbers[i])\n        result.append(max_value)\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert string\n    string = string.replace(' ', '')\n    l = len(string)\n    if l <= 1:\n        return string\n",
        "num_ids": 35
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(string) == 0:\n        return \"\"\n    if is_palindrome(string):\n        return string\n    \n    longest_postfix = \"\"\n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[:i+1]):\n            longest_postfix = string[i+1:]\n            break\n    \n    return string + longest_postfix[::-1]\n",
        "num_ids": 110
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    longest_palindrome = longest_palindromic_substring(string)\n",
        "num_ids": 22
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # 1. find the longest postfix\n    longest_suffix = len(string) - 1\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:longest_suffix + 1]):\n            longest_suffix = i\n            break\n",
        "num_ids": 79
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for index in range(len(string)):\n        if is_palindrome(string[:index]):\n            return string[:index] + string[index:]\n",
        "num_ids": 41
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for length in range(len(string), 0, -1):\n        if is_palindrome(string[0:length]):\n            return string[0:length] + make_palindrome(string[length:])\n",
        "num_ids": 54
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    suffix = find_longest_palindrome(string)\n    prefix = string[:len(string)-len(suffix)]\n    return prefix + suffix[::-1]\n",
        "num_ids": 44
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not string:\n        return ''\n    max_len = min(len(string), 3)\n    for i in range(max_len, 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n",
        "num_ids": 70
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string[:i] + string[i:][::-1]\n",
        "num_ids": 52
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not is_palindrome(string):\n        for i in range(len(string)):\n            if is_palindrome(string[:i]):\n                return ''.join([string[:i], reversed(string[i:]), string])\n",
        "num_ids": 61
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return ''.join([str((int(a[i]) + int(b[i])) % 2) for i in range(len(a))])\n",
        "num_ids": 37
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Write your code here\n    res = []\n    for i in range(0, len(a)):\n        res.append(str((int(a[i]) + int(b[i])) % 2))\n    return \"\".join(res)\n",
        "num_ids": 61
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(a)!= len(b):\n        return False\n",
        "num_ids": 17
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a = int(a, 2)\n    b = int(b, 2)\n    return bin(a^b)[2:]\n",
        "num_ids": 32
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\".join([a if a!= b else \"1\" for a, b in zip(a, b)])\n",
        "num_ids": 30
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"\".join([chr(a ^ b) for a, b in zip(map(ord, a), map(ord, b))])\n",
        "num_ids": 35
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ''.join(['1' if a_bit!= b_bit else '0' for a_bit, b_bit in zip(a, b)])\n",
        "num_ids": 40
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join([str(int(a[i])^int(b[i])) for i in range(len(a))])\n",
        "num_ids": 34
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ''.join([str(x1 ^ x2) for (x1, x2) in zip(a, b)])\n",
        "num_ids": 32
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Define a helper function and call it recursively\n    def helper(strings, current_string):\n        if len(strings) == 0:\n            return current_string\n        if len(current_string) > len(strings[0]):\n            return helper(strings[1:], current_string)\n        else:\n            return helper(strings[1:], current_string + strings[0])\n",
        "num_ids": 95
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n    longest = strings[0]\n    for s in strings:\n        if len(s) > len(longest):\n            longest = s\n    return longest\n",
        "num_ids": 54
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if strings == []:\n        return None\n    else:\n        longest = strings[0]\n        for i in range(1, len(strings)):\n            if len(strings[i]) > len(longest):\n                longest = strings[i]\n        return longest\n",
        "num_ids": 67
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # if strings is empty:\n    if len(strings) == 0:\n        return None\n    \n    # find the longest string in the list\n    longest = strings[0]\n    for i in range(1, len(strings)):\n        # if this string is longer than the longest\n        # update the longest string\n        if len(strings[i]) > len(longest):\n            longest = strings[i]\n    return longest\n",
        "num_ids": 104
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Check empty\n    if not strings:\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # base case\n    if len(strings) == 0:\n        return None\n    # recursive case\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        # otherwise, return the longest string in the list\n        return max(strings, key=len)\n",
        "num_ids": 70
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(strings) == 0:\n        return None\n    return_value = None\n    for i in range(len(strings)):\n        if return_value is None or len(strings[i]) > len(return_value):\n            return_value = strings[i]\n    return return_value\n",
        "num_ids": 72
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = strings[0]\n    for string in strings:\n        if len(string) > len(result):\n            result = string\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for s in strings:\n        if len(s) > len(longest_string):\n            longest_string = s\n    return longest_string\n",
        "num_ids": 62
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return strings[0] if strings else None\n",
        "num_ids": 12
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n",
        "num_ids": 45
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a < b:\n        return greatest_common_divisor(b, a)\n    elif a >= b:\n        return greatest_common_divisor(a - b, b)\n",
        "num_ids": 72
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    \n    return a + b\n",
        "num_ids": 49
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n",
        "num_ids": 45
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    while b:\n        a, b = b, a % b\n",
        "num_ids": 17
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    while a!= b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return a\n    \ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    30\n    \"\"\"\n    return (a * b) // greatest_common_divisor(a, b)\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n",
        "num_ids": 143
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Base case, if either a or b is 0, just return other\n    if a == 0 or b == 0:\n        return max(a, b)\n    # If either a or b is 1, just return it\n    if a == 1 or b == 1:\n        return max(a, b)\n    # Recurse with the smaller number\n    return greatest_common_divisor(b, a % b)\n",
        "num_ids": 98
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 35
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    prefixes = []\n    for i in range(len(string)+1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "num_ids": 37
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    prefixes = []\n",
        "num_ids": 7
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for length in range(len(string) + 1):\n        for index in range(length):\n            result.append(string[index: length])\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # list of prefixes\n    prefixes = []\n",
        "num_ids": 14
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert isinstance(string, str), 'Input must be a string'\n    assert len(string) > 0, 'Input must be a non-empty string'\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not string:\n        return []\n    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 32
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if string:\n        return [string[0]] + all_prefixes(string[1:])\n    else:\n        return []\n",
        "num_ids": 33
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(string) == 1:\n        return [string]\n",
        "num_ids": 17
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return''.join([f'{i}' for i in range(n+1)])\n",
        "num_ids": 23
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \" \".join(f\"{i}\" for i in range(n + 1))",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return''.join(f'{i}' for i in range(n + 1))\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 0:\n        return \"Invalid input\"\n    else:\n        s = \"\"\n        for i in range(n+1):\n            s = s + str(i) + \" \"\n        return s\n",
        "num_ids": 52
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \" \".join(map(str, range(n + 1)))\n",
        "num_ids": 18
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0:\n        return '0'\n    else:\n        return f'{0} {string_sequence(n - 1)}'\n",
        "num_ids": 36
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # str.join(sequence)\n    # return the concatenation of the string sequence\n    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 41
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return''.join(str(i) for i in range(n))\n",
        "num_ids": 18
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s =''.join(map(str, range(n + 1)))\n    return s\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \" \".join(str(i) for i in range(n+1))\n",
        "num_ids": 21
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for char in string:\n        if char.lower() not in string:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert string,'string can\\'t be an empty string'\n    \n    distinct_characters = set()\n    for char in string:\n        if char not in distinct_characters:\n            distinct_characters.add(char.lower())\n",
        "num_ids": 59
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    characters_list = list(string)\n    characters_set = set(characters_list)\n    distinct_characters = len(characters_set)\n    return distinct_characters\n",
        "num_ids": 48
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    d = {}\n    for c in string:\n        d[c] = d.get(c, 0) + 1\n    return len(d)\n",
        "num_ids": 37
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    distinct_characters = set()\n    for character in string:\n        distinct_characters.add(character.lower())\n    return len(distinct_characters)\n",
        "num_ids": 43
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    music_list = []\n    for i in music_string:\n        if i == '.' or i == '|' or i == 'o':\n            music_list.append(4)\n        if i == '|' or i == 'o':\n            music_list.append(2)\n        if i == '.' or i == '|':\n            music_list.append(1)\n    return music_list\n",
        "num_ids": 99
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [int(beat) for beat in music_string.split()]\n",
        "num_ids": 19
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    notes = music_string.split()\n    return [4 if 'o' in note else 2 if 'o|' in note else 1 if ''.join('.' if ''.join('|' if char == '|' else '.' for char in note) == '|' else 'o' for char in note) == 'o|' else 1 if ''.join('.' if char == '|' else 'o' for char in note) == '|' else 2 for note in notes]\n",
        "num_ids": 112
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    parsed_music = []\n    index = 0\n    while index < len(music_string):\n        if music_string[index] == '|':\n            parsed_music.append(4)\n            index += 1\n            continue\n        elif music_string[index] == '|':\n            parsed_music.append(2)\n            index += 1\n            continue\n        elif music_string[index] == '|':\n            parsed_music.append(1)\n            index += 1\n            continue\n        elif music_string[index] == '.':\n            parsed_music.append(1)\n            index += 1\n            continue\n        elif music_string[index] == 'o':\n            parsed_music.append(4)\n            index += 1\n            continue\n        elif music_string[index] == '.':\n            parsed_music.append(2)\n            index += 1\n            continue\n        elif music_string[index] == '|':\n            parsed_music.append(2)\n            index += 1\n            continue\n        elif music_string[index] == 'o':\n            parsed_music.append(4)\n            index += 1\n            continue\n        else:\n            raise ValueError(f'Error parsing music string: {music_string[index:]}')\n    return parsed_music\n",
        "num_ids": 329
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = list()\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == 'o|':\n            result.append(2)\n        elif music_string[i] == '.':\n            result.append(1)\n    return result\n",
        "num_ids": 91
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    music_notes = list(music_string)\n",
        "num_ids": 13
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = []\n    count = 0\n    for c in music_string:\n        if c == 'o':\n            count += 4\n        elif c == 'o|':\n            count += 2\n        elif c == '.':\n            count += 1\n        else:\n            pass\n        result.append(count)\n    return result\n",
        "num_ids": 81
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == 'o|':\n            result.append(2)\n        elif char == '|':\n            result.append(2)\n        else:\n            result.append(1)\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    i = 0\n    notes = []\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            notes.append(1)\n            i += 2\n        elif music_string[i] == '|':\n            notes.append(0.5)\n            i += 2\n        elif music_string[i] == 'o|':\n            notes.append(0.25)\n            i += 2\n        elif music_string[i] == '.':\n            notes.append(0.125)\n            i += 1\n        else:\n            i += 1\n    return notes\n",
        "num_ids": 149
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = list(map(lambda x: 4 if x == 'o' else 2 if x == 'o|' else 1 if x == '.' else 0, music_string))\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert substring!= \"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len([x for x in range(len(string)) if string[x] == substring[0] and string[x:x+len(substring)] == substring])\n",
        "num_ids": 43
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len([count for count in range(len(string)) if string[count:].find(substring) == count])\n",
        "num_ids": 30
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum([substring in string for substring in string.split(string[::-1])])\n",
        "num_ids": 25
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring == string[i:i+len(substring)]:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    length = len(string)\n    for i in range(length):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    numbers = list(numbers.split())\n    numbers.sort()\n    return''.join(numbers)\n",
        "num_ids": 29
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = ''\n    for char in numbers:\n        if char not in '0123456789':\n            raise ValueError('One or more input values are not valid')\n",
        "num_ids": 41
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(numbers.split(' '))\n",
        "num_ids": 13
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if numbers == '':\n        return numbers\n",
        "num_ids": 12
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return''.join(sorted(numbers.split(' ')))\n",
        "num_ids": 17
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(numbers, key=int)\n    # return sorted(numbers, key=lambda n: n in 'zero one two three four five six seven eight nine'.split())\n",
        "num_ids": 43
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    numbers = numbers.split(' ')\n    numbers = list(map(int, numbers))\n    numbers.sort(key = lambda x: x)\n    return''.join(map(str, numbers))\n",
        "num_ids": 51
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    list_of_numbers = numbers.split(' ')\n    list_of_numbers = sorted(list_of_numbers)\n    return''.join(list_of_numbers)\n",
        "num_ids": 47
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # convert the string to a list of numbers\n    nums = list(map(int, numbers.split()))\n    # sort the list and return the string\n    return \" \".join(sorted(map(str, nums)))\n",
        "num_ids": 55
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    a, b = (numbers[0], numbers[1])\n    smallest_dist = abs(b - a)\n    smallest_dist_i = 0\n    for i in range(2, len(numbers)):\n        dist = abs(b - a)\n        if dist < smallest_dist:\n            smallest_dist = dist\n            smallest_dist_i = i\n    return a, numbers[smallest_dist_i]\n",
        "num_ids": 106
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"find_closest_elements requires length >= 2\")\n    # sort in ascending order\n    numbers.sort()\n    # find two elements with closest values\n    smaller = numbers[0]\n    larger = numbers[-1]\n    larger_index = numbers.index(larger)\n    smaller_index = numbers.index(smaller)\n    smaller = numbers[smaller_index + 1]\n    if abs(larger - smaller) < abs(larger - numbers[0]):\n        larger = smaller\n        smaller = numbers[0]\n    if abs(larger - smaller) < abs(larger - numbers[-1]):\n        larger = smaller\n        smaller = numbers[-1]\n    return smaller, larger\n",
        "num_ids": 195
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    length = len(numbers)\n    if length <= 2:\n        raise ValueError(f\"The length of numbers must be greater than 2, found {length}\")\n    numbers_and_distances = {}\n    for i in range(length):\n        numbers_and_distances[i] = abs(numbers[i] - numbers[i - 1])\n    min_distance_index = min(numbers_and_distances, key=numbers_and_distances.get)\n    return numbers[min_distance_index - 1], numbers[min_distance_index + 1]\n",
        "num_ids": 140
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(numbers) < 2:\n        raise ValueError('There must be at least 2 numbers')\n    if len(numbers) == 2:\n        if abs(numbers[0] - numbers[1]) < abs(numbers[0] - numbers[2]):\n            return numbers[0], numbers[1]\n        return numbers[1], numbers[0]\n",
        "num_ids": 88
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    smaller_number = numbers[0]\n    larger_number = numbers[0]\n    smaller_distance = numbers[1] - numbers[0]\n    larger_distance = numbers[1] - numbers[0]\n    for number in numbers:\n        if number < smaller_number:\n            smaller_number = number\n        if number > larger_number:\n            larger_number = number\n        if abs(number - numbers[0]) < smaller_distance:\n            smaller_distance = abs(number - numbers[0])\n        if abs(number - numbers[0]) < larger_distance:\n            larger_distance = abs(number - numbers[0])\n    if smaller_distance == larger_distance:\n        return (smaller_number, larger_number)\n    if smaller_distance == 0:\n        return (numbers[0], smaller_number)\n    return (smaller_number, larger_number)\n",
        "num_ids": 217
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    closest_number = None\n    closest_number_distance = float(\"inf\")\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < closest_number_distance:\n                closest_number_distance = distance\n                closest_number = (numbers[i], numbers[j])\n",
        "num_ids": 106
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    diff = numbers[1] - numbers[0]\n    closest_index = 0\n    closest = numbers[0]\n    for index, num in enumerate(numbers):\n        if abs(num - closest) < abs(num - closest):\n            closest = num\n            closest_index = index\n    return (closest, numbers[closest_index])\n",
        "num_ids": 94
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = (float('inf'), float('inf'))\n    result_id = -1\n    for i in range(len(numbers)):\n        if result[0] > numbers[i]:\n            result = (numbers[i], numbers[result_id])\n            result_id = i\n        if result[0] == numbers[i] and numbers[i] < result[1]:\n            result = (numbers[i], numbers[result_id])\n            result_id = i\n    return result\n",
        "num_ids": 120
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = len(numbers)\n    if n < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    # We need to find 2 elements that are the closest to each other\n    # If we don't, we'll find the two elements that are furthest apart\n    # The only way to get that is to find the two closest items and see which one is farther away\n    # We can do that by sorting the list and then finding the two closest items\n    numbers.sort()\n    # The first element is the closest\n    closest = numbers[0]\n    # The second element is the second closest\n    second_closest = numbers[1]\n    # We're only looking for two elements\n    return (closest, second_closest)\n",
        "num_ids": 179
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    min_dist = float(\"inf\")\n    dist = float(\"inf\")\n    for i, value in enumerate(numbers):\n        dist_new = abs(value - numbers[i + 1])\n        if dist_new < dist:\n            dist = dist_new\n            min_dist = min(dist, min_dist)\n    return numbers[0], min_dist\n",
        "num_ids": 88
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    scaled_numbers = list(map(lambda x: x / sum(numbers), numbers))\n    return scaled_numbers\n",
        "num_ids": 32
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [(n - min(numbers)) / (max(numbers) - min(numbers)) for n in numbers]\n",
        "num_ids": 30
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    min_number = min(numbers)\n    max_number = max(numbers)\n",
        "num_ids": 23
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Min, Max\n    min_number = numbers[0]\n    max_number = numbers[0]\n",
        "num_ids": 27
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return numbers\n",
        "num_ids": 5
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [number / max(numbers) for number in numbers]\n",
        "num_ids": 17
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    rescaled = []\n    smallest = min(numbers)\n    largest = max(numbers)\n    delta = largest - smallest\n    for num in numbers:\n        rescaled.append((num - smallest) / delta)\n    return rescaled\n",
        "num_ids": 62
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]\n",
        "num_ids": 48
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    max_n = max(numbers)\n    min_n = min(numbers)\n    return [(n - min_n) / (max_n - min_n) for n in numbers]\n",
        "num_ids": 48
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(numbers)):\n        numbers[i] = 1 - numbers[i]\n    return numbers\n",
        "num_ids": 32
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [int(i) for i in values if type(i) is int]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(filter(lambda i: isinstance(i, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    new_values = []\n    for item in values:\n        if type(item) == int:\n            new_values.append(item)\n    return new_values\n",
        "num_ids": 41
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [i for i in values if isinstance(i, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if type(values)!= list:\n        return []\n    return list(filter(lambda x: type(x) == int, values))\n    \n",
        "num_ids": 36
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = []\n    for v in values:\n        if isinstance(v, int):\n            result.append(v)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    filtered_integers = []\n    for item in values:\n        try:\n            int(item)\n        except ValueError:\n            pass\n        else:\n            filtered_integers.append(item)\n    return filtered_integers\n",
        "num_ids": 59
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n",
        "num_ids": 21
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            return divisor\n        else:\n            divisor += 1\n",
        "num_ids": 45
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    i = 1\n    while n % i!= 0:\n        i += 1\n",
        "num_ids": 21
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # This is very good in finding the next largest divisor, because it\u2019s guaranteed that the input number\n    # cannot be divided by any other number smaller than it.\n    i = 1\n    while n % i!= 0:\n        i += 1\n    return i\n",
        "num_ids": 65
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    largest = n\n    while largest > 0:\n        if n % largest == 0:\n            return largest\n        largest -= 1\n",
        "num_ids": 31
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    divisor = 1\n    while divisor < n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n",
        "num_ids": 41
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return largest_divisor_helper(n, 1)\n",
        "num_ids": 17
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    i = n\n    while True:\n        if i % n == 0:\n            return i\n        i -= 1\n",
        "num_ids": 29
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    largest_divisor_number = 1\n    while True:\n        if n % largest_divisor_number == 0:\n            return largest_divisor_number\n        largest_divisor_number += 1\n",
        "num_ids": 53
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            return divisor\n        else:\n            divisor += 1\n    return n\n",
        "num_ids": 49
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    i = n\n    largest = i\n    while i > 0:\n        if i % largest == 0:\n            i = i // largest\n            largest = i\n        else:\n            i = i - 1\n    return largest\n",
        "num_ids": 54
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    \n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n!= 1:\n        factors.append(n)\n    \n    return factors\n    \ndef get_factors(n):\n    \"\"\" Return the prime factors of n.\n    >>> get_factors(12)\n    [2, 3]\n    >>> get_factors(25)\n    [5]\n    >>> get_factors(25)\n    [5]\n    >>> get_factors(70)\n    [2, 5, 7]\n    >>> get_factors(13)\n    [13]\n    >>> get_factors(66)\n    [2, 3, 6]\n    >>> get_factors(66)\n    [2, 3, 6]\n    \"\"\"\n    \n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n        else:\n            i += 1\n    if n!= 1:\n        factors.append(n)\n    \n    return factors\n    \ndef is_prime(n):\n    \"\"\" Return True if n is a prime number\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    True\n    >>> is_prime(10)\n    True\n    >>> is_prime(11)\n    False\n    >>> is_prime(12)\n    True\n    >>> is_prime(13)\n    False\n    >>> is_prime(22)\n    False\n    >>> is_prime(23)\n    False\n    >>> is_prime(24)\n    False\n    >>> is_prime(25)\n    True\n    >>> is_prime(26)\n    False\n    >>> is_prime(27)\n    True\n    >>> is_prime(28)\n    False\n    >>> is_prime(29)\n    True\n    >>> is_prime(30)\n    True\n    >>> is_prime(31)\n    False\n    >>> is_prime(32)\n    True\n    >>> is_prime(33)\n    True\n    >>> is_prime(34)\n    False\n    >>> is_prime(35)\n    True\n    >>> is_prime(36)\n    False\n    >>> is_prime(37)\n    True\n    >>> is_prime(38)\n    False\n    >>> is_prime(39)\n    True\n    >>> is_prime(40)\n    True\n    >>> is_prime(41)\n    False\n    >>> is_prime(42)\n    False\n    >>> is_prime(43)\n    True\n    >>> is_prime(44)\n    False\n    >>> is_prime(45)\n    False\n    >>> is_prime(46)\n    True\n    >>> is_prime(47)\n    True\n    >>> is_prime(48)\n    False\n    >>> is_prime(49)\n    True\n    >>> is_prime(50)\n    True\n    >>> is_prime(51)\n    False\n    >>> is_prime(52)\n    True\n    >>> is_prime(53)\n    False\n    >>> is_prime(54)\n    True\n    >>> is_prime(55)\n    False\n    >>> is_prime(56)\n    True\n    >>> is_prime(57)\n    True\n    >>> is_prime(58)\n    False\n    >>> is_prime(59)\n    True\n    >>> is_prime(60)\n    True\n    >>> is_prime(61)\n    False\n    >>> is_prime(62)\n    True\n    >>> is_prime(63)\n    False\n    >>> is_prime(64)\n    True\n    >>> is_prime(65)\n    Fals",
        "num_ids": 1028
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                n /= i\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 80
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    factor_list = []\n    for i in range(1, n + 1):\n        # print(i)\n        if n % i == 0:\n            # print(i)\n            # print(n//i)\n            factor_list.append(i)\n            factor_list.append(n//i)\n    # print(factor_list)\n    return factor_list\n",
        "num_ids": 90
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # #my attempt\n    # if n == 1:\n    #     return []\n    # else:\n    #     list1 = []\n    #     factor = 2\n    #     while factor * factor <= n:\n    #         if n % factor == 0:\n    #             list1.append(factor)\n    #             n = n // factor\n    #         else:\n    #             factor += 1\n    #     list1.append(n)\n    #     return list1\n",
        "num_ids": 114
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # determine the length of the prime factorization\n    n_factors = int(math.log(n, 2)) + 1\n    factors = [1] * n_factors\n",
        "num_ids": 44
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            if i not in factors:\n                factors.append(i)\n            n = n // i\n            while n % i == 0:\n                n = n // i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 95
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    factors = []\n    if n == 1:\n        factors.append(1)\n        return factors\n",
        "num_ids": 27
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(sqrt(n)), 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n!= 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 94
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    factor_counts = [0] * (n + 1)\n    for i in range(2, n + 1):\n        if factor_counts[i]!= 0:\n            continue\n        \n        if n % i == 0:\n            factor_counts[i] += 1\n            n //= i\n            while n % i == 0:\n                factor_counts[i] += 1\n                n //= i\n    \n    return factor_counts\n",
        "num_ids": 110
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n < 2:\n        return []\n    \n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    \n    p = 3\n    while p * p <= n:\n        while n % p == 0:\n            factors.append(p)\n            n = n // p\n        p = p + 2\n    \n    if n!= 1:\n        factors.append(n)\n    \n    return factors\n",
        "num_ids": 118
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Iterate through the input list\n    seen = set()\n    return_list = []\n    for n in numbers:\n        if n not in seen:\n            return_list.append(n)\n            seen.add(n)\n    return return_list\n",
        "num_ids": 62
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # remove duplicates\n    seen = set()\n    seen_add = seen.add\n    numbers_seen = sorted(seen.union(set(numbers)))\n    print(seen_seen)\n    # return list without duplicates\n    return [num for num in numbers_seen if not (num in seen or seen_add(num))]\n",
        "num_ids": 81
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(set(numbers))\n",
        "num_ids": 11
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    n = len(numbers)\n    for i in range(n):\n        j = i + 1\n        while j < n and numbers[i] == numbers[j]:\n            del numbers[i]\n            n -= 1\n            j += 1\n    return numbers\n",
        "num_ids": 65
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if numbers[i] == numbers[j] and i!= j:\n                numbers.pop(j)\n                break\n    return numbers\n",
        "num_ids": 61
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Set comprehension\n    return list(set(numbers))\n",
        "num_ids": 16
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # if not numbers:\n    #     return numbers\n",
        "num_ids": 14
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    numbers.sort()\n    i = 1\n    while i < len(numbers):\n        if numbers[i - 1] == numbers[i]:\n            del numbers[i]\n        else:\n            i += 1\n    return numbers\n",
        "num_ids": 57
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    dups = []\n    for num in numbers:\n        if num not in dups:\n            dups.append(num)\n    return dups\n",
        "num_ids": 37
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    seen_numbers = set()\n    unique_numbers = []\n",
        "num_ids": 18
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return string.swapcase()\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True",
        "num_ids": 40
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = \"\"\n    for letter in string:\n        if letter.isupper():\n            result += letter.lower()\n        else:\n            result += letter.upper()\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return ''.join(\n        [c.upper() if c.islower() else c.lower() for c in string]\n    )\n",
        "num_ids": 34
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return ''.join(ch.upper() if ch.islower() else ch.lower() for ch in string)\n",
        "num_ids": 28
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    upper_case_chars = list(string.lower())\n    upper_case_chars.reverse()\n    return \"\".join(upper_case_chars)\n",
        "num_ids": 41
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # if the list is empty, return empty string\n    if len(strings) == 0:\n        return ''\n    # if the list is not empty\n    elif len(strings)!= 0:\n        # join each string in the list\n        return ''.join(strings)\n",
        "num_ids": 65
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n",
        "num_ids": 20
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(strings) == 0:\n        return ''\n    return \"\".join(strings)\n",
        "num_ids": 24
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = ''\n    for s in strings:\n        result = result + s\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n",
        "num_ids": 20
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n",
        "num_ids": 20
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # your code here\n    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 27
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    filtered_list = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_list.append(string)\n    return filtered_list\n",
        "num_ids": 44
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda a: a.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    filtered = list(filter(lambda s: s.startswith(prefix), strings))\n    return filtered\n",
        "num_ids": 27
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [x for x in l if x >= 0]\n    \ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, -123, 1, -10])\n    [-5, -3, -2, -1, 9, 123, -1]\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -5]\n    \"\"\"\n    return [x for x in l if x < 0]\n",
        "num_ids": 141
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [item for item in l if item >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: x >= 0, l))\n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    new_l = []\n    for num in l:\n        if num > 0:\n            new_l.append(num)\n    return new_l\n",
        "num_ids": 38
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [i for i in l if i >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    if n == 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    import math\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = math.floor(math.sqrt(n))\n    for i in range(3, max_divisor+1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 95
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 1 or n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for x in range(3, int(n**0.5) + 1, 2):\n            if n % x == 0:\n                return False\n        return True\n",
        "num_ids": 81
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5 + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 1 or n == 0:\n        return False\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n):\n            if n % i == 0:\n                return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    xs = list(reversed(xs))\n    if xs[0] == 0:\n        return 1\n    elif xs[0] == 1:\n        return xs[1] - 1\n    else:\n        for i in range(len(xs)):\n            if xs[i] == 1:\n                return xs[i+1] - 1\n        raise Exception(\"No zero points\")\n",
        "num_ids": 98
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # check if xs have even number of coefficients\n    if len(xs) % 2!= 0:\n        raise ValueError(f\"xs should contain even number of coefficients.\")\n    # check if xs are all non zero\n    if max(xs) == 0:\n        raise ValueError(f\"xs should not contain all zeros.\")\n    # xs = [a, b, c] or [a, b, c, d]\n    x_n = len(xs) // 2\n    for i in range(x_n):\n        # find x for which poly(x) = 0\n        if math.fabs(xs[i]) == 0:\n            return xs[i + 1] / xs[i]\n",
        "num_ids": 169
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            return i\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(len(xs) - 1, -1, -1):\n        if xs[i]!= 0:\n            break\n    for i in range(len(xs)):\n        if xs[i] == 0:\n            return i\n",
        "num_ids": 63
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Make xs an even list of numbers\n    if not isinstance(xs, list):\n        raise TypeError(\"xs must be list\")\n    if not len(xs) % 2 == 0:\n        raise ValueError(\"xs must be an even list\")\n    if not all([isinstance(i, float) for i in xs]):\n        raise TypeError(\"xs must contain only floats\")\n",
        "num_ids": 92
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError(\"xs must be list of even number of coefficients\")\n    # init xs with a constant 0\n    xs = xs + [0]\n    # init result as -1\n    result = -1\n    # iterate to find the zero\n    for i in range(len(xs) - 1):\n        # compute new result as ((1 - coeff) * x) + x = (coeff) * x + x\n        result = poly(xs[:i + 1], -xs[i])\n        # if result is zero return result\n        if result == 0:\n            return xs[i]\n    raise ValueError(\"No zero point found\")\n",
        "num_ids": 167
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    xs_length = len(xs)\n    assert xs_length % 2 == 0\n    zero = xs_length // 2\n    if xs[zero]!= 0:\n        return False\n    for i in range(zero - 1, -1, -1):\n        if xs[i] * xs[zero + 1] < 0:\n            return xs[i]\n",
        "num_ids": 92
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert len(xs) % 2 == 0\n",
        "num_ids": 12
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # linear regression\n    n = len(xs)\n    if n % 2 == 1:\n        return None\n    xs = sorted(xs, reverse=True)\n    # upper half\n    u = xs[:int(n/2)]\n    # lower half\n    l = xs[int(n/2):]\n    # calculate (x - 1) * (x - 2) * (x - 3) for each x\n    s = sum([coeff * math.pow(x - 1, i) for i, coeff in enumerate(u)])\n    for i in range(int(n/2)):\n        u[i] -= 1\n        s -= u[i] * math.pow(x - 1, i)\n    x1 = math.pow(s, 1/3)\n    s = sum([coeff * math.pow(x - 1, i) for i, coeff in enumerate(l)])\n    for i in range(int(n/2)):\n        l[i] -= 1\n        s += l[i] * math.pow(x - 1, i)\n    x2 = math.pow(s, 1/3)\n    return x1, x2\n",
        "num_ids": 289
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # ********** Code here **********\n    # to do\n    # 1) check the size of xs\n    # 2) check if xs are of even length\n    # 3) find x0 such that (xs[0]) * (xs[1]) * (xs[2]) * (xs[3]) = 0\n    # 4) return the value of x0\n    # for all odd lenght of xs\n    # 5) return None if xs aren't of even lenght\n    # 6) return None if there are no solutions\n    # 7) return None if xs don't have even lenght\n    # 8) check if xs have no solution\n    # 9) return None if xs aren't of even lenght\n    # 10) return None if there are no solutions\n    # 11) return None if xs don't have even lenght\n    # 12) if xs have no solution, return None\n    if not len(xs) == len(set(xs)) or not len(xs) % 2 == 0:\n        return None\n    else:\n        coeffs = []\n        for i in range(1, len(xs), 2):\n            if xs[i] == 0:\n                return xs[i-1]\n            else:\n                coeffs.append(xs[i-1])\n        return None if not coeffs else find_zero_rec(xs, coeffs)\n",
        "num_ids": 334
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    nums = []\n    nums2 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            nums2.append(l[i])\n        else:\n            nums.append(l[i])\n    for i in range(len(nums2)):\n        nums.append(nums2[i])\n    return nums\n",
        "num_ids": 94
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l_mod = l[:]\n    for i in range(len(l)):\n        if i % 3 == 0:\n            continue\n        l_mod.append(l[i])\n    for i in range(len(l_mod)):\n        if i % 3 == 0:\n            continue\n        l_mod.sort(key=lambda x: x)\n    return l_mod\n",
        "num_ids": 93
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # code goes here\n    l_new = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_new.append(l[i])\n        else:\n            l_new.append(l[i])\n            l_new.sort()\n    return l_new\n",
        "num_ids": 77
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l_copy = l.copy()\n    l_copy.sort()\n    l_copy.reverse()\n    l_copy_div_3 = []\n    l_copy_not_div_3 = []\n    for i in range(len(l_copy)):\n        if (l_copy[i] % 3)!= 0:\n            l_copy_div_3.append(l_copy[i])\n        else:\n            l_copy_not_div_3.append(l_copy[i])\n    l_copy_div_3.extend(l_copy_not_div_3)\n    l_copy_div_3.sort()\n    l_copy_div_3.reverse()\n    return l_copy_div_3 + l_copy\n",
        "num_ids": 184
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(l, key=lambda x: x if x % 3 else -1)\n",
        "num_ids": 22
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #print(l)\n    l_new = []\n    for i in range(0, len(l), 3):\n        l_new.append(l[i])\n    l_new.sort()\n    #print(l_new)\n    for i in range(0, len(l_new), 3):\n        l[i] = l_new[i]\n    return l\n",
        "num_ids": 93
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = len(l)\n    for i in range(0, n):\n        if i % 3 == 0:\n            continue\n        elif i % 3 == 1:\n            if l[i] < l[i + 1]:\n                l[i], l[i + 1] = l[i + 1], l[i]\n        else:\n            if l[i] > l[i + 1]:\n                l[i], l[i + 1] = l[i + 1], l[i]\n    return l\n",
        "num_ids": 124
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = []\n    t = []\n    for i in range(0, len(l)):\n        if i%3!= 0:\n            s.append(l[i])\n        else:\n            t.append(l[i])\n    return(sorted(s, key=lambda x: x)) + t\n",
        "num_ids": 77
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(l) <= 3:\n        return l\n    \n    # initialize second and third lists\n    second = []\n    third = []\n    \n    # initialize the indices of the second and third lists\n    second_index = 0\n    third_index = 1\n    \n    # for every element in the first list\n    for i in range(len(l)):\n        \n        # if the element is not divisible by three, it should be added to the second list\n        if not l[i] % 3:\n            second.append(l[i])\n        \n        # otherwise, it should be added to the third list\n        else:\n            third.append(l[i])\n    \n    # sort the third list in ascending order\n    third.sort()\n    \n    # combine the two lists\n    return second + third\n",
        "num_ids": 193
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    l_copy = l[:]\n    for i in range(len(l)):\n        if l_copy[i] % 3!= 0:\n            while l_copy[i] % 3!= 0:\n                l_copy[i], l_copy[i - 1] = l_copy[i - 1], l_copy[i]\n                i -= 1\n    return l_copy\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids": 120
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(set(l), key=l.index)\n",
        "num_ids": 16
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l = sorted(set(l))\n    return l\n",
        "num_ids": 15
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(set(l), key = l.index)\n",
        "num_ids": 16
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(dict.fromkeys(l))\n",
        "num_ids": 13
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(set(l), key=l.index)\n",
        "num_ids": 16
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        max = l[0]\n        for i in l:\n            if max < i:\n                max = i\n        return max\n",
        "num_ids": 50
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not l:\n        return None\n    max = l[0]\n    for element in l:\n        if element > max:\n            max = element\n    return max\n",
        "num_ids": 42
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n = 0\n    for i in l:\n        if i > n:\n            n = i\n    return n",
        "num_ids": 28
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    max_number = l[0]\n    for i in l:\n        if i > max_number:\n            max_number = i\n    return max_number\n",
        "num_ids": 40
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    max = l[0]\n    for item in l:\n        if item > max:\n            max = item\n    return max\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    max = l[0]\n    for i in range(len(l)):\n        if max < l[i]:\n            max = l[i]\n    return max\n",
        "num_ids": 42
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return l[0]\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    max_so_far = l[0]\n    for x in l:\n        if x > max_so_far:\n            max_so_far = x\n    return max_so_far\n",
        "num_ids": 48
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max_value = 0\n    for i in range(len(l)):\n        if l[i] > max_value:\n            max_value = l[i]\n    return max_value\n",
        "num_ids": 48
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    counter = 0\n    for i in range(n):\n        if i % 11 == 7:\n            counter += 1\n        elif i % 13 == 7:\n            counter += 1\n    return counter\n",
        "num_ids": 48
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = 0\n    for i in range(n):\n        if (i + 1) % 3 == 0 and (i + 1) % 5 == 0:\n            result += 1\n        elif (i + 1) % 11 == 0:\n            result += 1\n        elif (i + 1) % 13 == 0:\n            result += 1\n    return result\n",
        "num_ids": 85
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(n+1):\n        if i % 15 == 7:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if i % 7 == 0:\n            if i % 11 == 0:\n                count += 1\n            else:\n                count += 2\n        elif i % 13 == 0:\n            count += 3\n        else:\n            count += 1\n    return count\n",
        "num_ids": 79
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return fizz_buzz_2(n)\n",
        "num_ids": 14
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 7 == 0 or i % 13 == 0:\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0:\n            count += 1\n        elif i % 13 == 0:\n            count += 1\n        else:\n            continue\n    return count",
        "num_ids": 58
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum(digit == 7 for digit in range(1, n+1) if digit % 11 == 7 or digit % 13 == 7)\n",
        "num_ids": 33
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum(x % 3 == 0 or x % 5 == 0 for x in range(n))",
        "num_ids": 23
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #l = list(l)\n    #l_even = []\n    #l_odd = []\n    #for num in l:\n    #    if num%2 == 0:\n    #        l_even.append(num)\n    #    else:\n    #        l_odd.append(num)\n    #l_even = sorted(l_even)\n    #l_odd = sorted(l_odd)\n    #l = l_even + l_odd\n    #return l\n",
        "num_ids": 118
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l1 = []\n    l2 = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    l1.sort()\n    l2.sort()\n    return l1 + l2\n",
        "num_ids": 85
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # create a new list l'\n    l_even = []\n    # create a counter i\n    i = 0\n    # loop over the list l\n    while i < len(l):\n        # if i is even, then l[i] should be in l_even\n        if i % 2 == 0:\n            l_even.append(l[i])\n        # else, if l[i] is not even, then l[i] should be in l_odd\n        else:\n            l_even.append(l[i])\n        i += 1\n    return l_even\n",
        "num_ids": 138
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(l, key=lambda x: x % 2 == 0)\n",
        "num_ids": 19
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return l[::2]\n    \ndef sum_all(l: list):\n    \"\"\"This function takes a list l and returns its sum.\n    >>> sum_all([1, 2, 3, 4])\n    10\n    >>> sum_all([-1, -2, -3, -4])\n    -1\n    >>> sum_all([])\n    0\n    \"\"\"\n    if l == []:\n        return 0\n    else:\n        return sum(l) + sum_all(l[1:])\n",
        "num_ids": 122
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # your code here\n    even = []\n    odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    even.sort()\n    odd.sort()\n    return even + odd\n",
        "num_ids": 80
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    #instructions to complete the function\n    #1. replace the return with an expression that returns a list that contains the elements of l sorted in\n    #ascending order.\n    #2. For each element in l, see if it is even. If it is, then add its index to the list's value at that index.\n    #If it is not, then don't add it.\n    #3. Return l.\n    odd_indicies = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            odd_indicies.append(i)\n    for index in odd_indicies:\n        i = index\n        if i % 2 == 0:\n            l[i] = l[index]\n        l[index] = float('inf')\n    even_indicies = []\n    for i in range(len(l)):\n        if i % 2!= 0:\n            even_indicies.append(i)\n    for index in even_indicies:\n        i = index\n        if i % 2!= 0:\n            l[i] = l[index]\n        l[index] = float('inf')\n    return l\n",
        "num_ids": 281
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    l_even = []\n    l_odd = []\n    \n    for i in l:\n        if i % 2 == 0:\n            l_even.append(i)\n        else:\n            l_odd.append(i)\n    \n    l_even.sort()\n    l_odd.sort()\n",
        "num_ids": 75
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l_s = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_s.append(l[i])\n    for i in range(len(l)):\n        if i % 2 == 1:\n            l_s.append(l[i])\n    return l_s\n",
        "num_ids": 80
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    l' = list(l)\n    i = 0\n    while i < len(l):\n        if i % 2 == 0:\n            j = i + 1\n            while j < len(l):\n                if l[i] > l[j]:\n                    l[i], l[j] = l[j], l[i]\n                j += 1\n        i += 1\n    return l\n",
        "num_ids": 94
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "num_ids": 107
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return encode_cyclic(s)",
        "num_ids": 10
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not is_cyclic(s):\n        raise ValueError(\"input string is not cyclic!\")\n    groups = [[0, 1, 2]]\n    i = 0\n    while i < len(s):\n        groups.append(s[i:i+3])\n        i += 3\n    groups = groups[1:]\n    new_groups = []\n    for group in groups:\n        if len(group) == 3:\n            if group[0] == group[2]:\n                new_groups.append(group[1])\n            else:\n                new_groups.append(group[0])\n                new_groups.append(group[1])\n                new_groups.append(group[2])\n        else:\n            new_groups.append(group)\n    return \"\".join(new_groups)\n",
        "num_ids": 191
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # extract groups of 3 characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle groups\n    groups = groups[::-1]\n    # concatenate all groups\n    return \"\".join(groups)\n",
        "num_ids": 82
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # turn string to list.\n    lst = list(s)\n    # sort chars in groups by group length (cyclic groups are always 3).\n    groups = sorted(lst, key=len, reverse=True)\n    # create a pointer to traverse in groups.\n    pointer = 0\n    # make a new string.\n    new_str = []\n    for _ in range(len(lst)):\n        # get group index with max length of 3.\n        group_idx = len(groups) - 1\n        group_idx_size = len(groups[group_idx])\n        while group_idx_size < 3:\n            # check if group idx is bigger than current pointer\n            if group_idx >= pointer:\n                # delete element in group\n                del groups[group_idx]\n                # skip element in group\n                group_idx -= 1\n                # re-sort group by length\n                groups = sorted(groups, key=len, reverse=True)\n                # increment pointer\n                pointer += 1\n            # re-sort group by length\n            groups = sorted(groups, key=len, reverse=True)\n            # get the next bigger length\n            group_idx_size = len(groups[group_idx])\n        # add element to new string.\n        new_str.append(groups[group_idx][0])\n        # delete element in group\n        del groups[group_idx]\n    return \"\".join(new_str)\n",
        "num_ids": 347
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return encode_cyclic(s[::-1])[::-1]\n",
        "num_ids": 20
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1:] if len(group) == 3 else group) for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 109
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return n\n    elif n == 1:\n        return n\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "num_ids": 50
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    else:\n        fib = 6\n        i = 3\n        while fib < n:\n            fib = fib + i\n            i += 2\n        return fib\n",
        "num_ids": 75
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        if fibonacci(n-1) % 2 == 0:\n            return fibonacci(n-1) + fibonacci(n-2)\n        else:\n            return fibonacci(n-1) + fibonacci(n-2) + 2\n",
        "num_ids": 90
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert n >= 0\n    a, b = 0, 1\n    while a <= n:\n        a, b = b, a+b\n        if a**.5!= int(a**.5):\n            continue\n        if a <= 0:\n            continue\n        if a <= 2:\n            if a <= 1:\n                return a\n            else:\n                return a + 1\n        if a % 2 == 0:\n            continue\n        if not a % 3 == 0:\n            continue\n        if not a % 5 == 0:\n            continue\n        else:\n            return a\n            \ndef prime_factorize(n: int):\n    \"\"\"\n    Prime factorize returns the prime factorization of n (factorization of n).\n    >>> prime_factorize(100)\n    {2, 2, 5, 5}\n    >>> prime_factorize(12)\n    {2, 2, 3, 3}\n    >>> prime_factorize(20)\n    {2, 2, 5, 5}\n    >>> prime_factorize(50)\n    {2, 5}\n    \"\"\"\n    primes = set()\n    while n % 2 == 0:\n        primes.add(2)\n        n = n // 2\n    while n % 3 == 0:\n        primes.add(3)\n        n = n // 3\n    while n % 5 == 0:\n        primes.add(5)\n        n = n // 5\n    return primes\n    \n",
        "num_ids": 343
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    fib_number = fib_calc(n)\n    is_prime = True\n",
        "num_ids": 22
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return fibonacci(n)\n",
        "num_ids": 10
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a, b = 2, 3\n        for i in range(2, n):\n            a, b = b, a + b\n        return b\n",
        "num_ids": 63
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        k = 5\n        while True:\n            k += 2\n            if is_prime(k):\n                return k\n",
        "num_ids": 56
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    fib = 1\n    fib_prev = 1\n    fib_current = 1\n    while fib_current <= n:\n        fib_prev, fib_current = fib_current, fib + fib_prev\n    for prime in primes_list(fib_prev):\n        if fib_current % prime == 0:\n            return fib_prev\n",
        "num_ids": 84
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 2\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n",
        "num_ids": 38
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sum_to_zero = False\n    for i in range(len(l)-2):\n        for j in range(i+1,len(l)-1):\n            if l[i]+l[j]+l[-1] == 0:\n                sum_to_zero = True\n                break\n    return sum_to_zero\n",
        "num_ids": 79
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if (l[i]+l[j]+l[k]) == 0 and i!= j!= k!= i:\n                    return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # YOUR CODE HERE\n    triples_sum = set()\n",
        "num_ids": 16
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    my_set = set()\n    for elem in l:\n        my_set.add(elem)\n    for elem in l:\n        if (-elem) in my_set:\n            if elem in my_set and elem!= 0:\n                return True\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    my_sum = 0\n    my_list = []\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                my_sum = l[i] + l[j] + l[k]\n                if my_sum == 0:\n                    my_list.append(i)\n                    my_list.append(j)\n                    my_list.append(k)\n    if len(my_list) >= 3:\n        return True\n    return False\n",
        "num_ids": 130
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l = set(l)\n    for i in l:\n        if sum(l)-i in l:\n            return True\n    return False",
        "num_ids": 34
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    l = list(set(l))\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 63
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(0, len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            if l[i] + l[j] == 0:\n                for k in range(j + 1, len(l)):\n                    if l[i] + l[j] + l[k] == 0:\n                        return True\n    return False\n",
        "num_ids": 94
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    counter = 0\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if (l[i] + l[j] + l[k]) == 0:\n                    counter += 1\n    return counter >= 3\n",
        "num_ids": 84
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    num_collisions = 0\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if (i==j or abs(car_pos_1[i][0] - car_pos_1[j][0]) < 2*car_size_1[i] and abs(car_pos_1[i][1] - car_pos_1[j][1]) < 2*car_size_1[i]):\n                num_collisions += 1\n            if (i==j or abs(car_pos_2[i][0] - car_pos_2[j][0]) < 2*car_size_2[i] and abs(car_pos_2[i][1] - car_pos_2[j][1]) < 2*car_size_2[i]):\n                num_collisions += 1\n    return num_collisions\n",
        "num_ids": 212
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    collision = 0\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                continue\n            if position_on_road(car_positions[i], car_speeds[i]) < position_on_road(car_positions[j], car_speeds[j]) and car_speeds[i] < car_speeds[j]:\n                car_collision(i, j, collision)\n    return collision\n",
        "num_ids": 114
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # The direction the cars will move in\n    x_move = -1\n    y_move = 0\n",
        "num_ids": 26
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    d = {0, 1, 2, 3, 4}  # collisions that have already occurred\n    c = {0, 0, 1, 1}  # collisions that have not yet occurred\n    while len(d)!= 1:\n        # Loop until one more collision occurs\n        while len(d) > 2 and (c[0] == 0 or c[1] == 0):\n            # If a collision has already occurred,\n            # loop until the second one has occurred\n            d.update(set(d) - set(d.intersection(c)))\n        # If c[0] or c[1] has not yet occurred,\n        # then at least one collision has not occurred yet\n        d.update(set(d) - set(d.intersection(c)))\n        # update the collision dictionary\n        c = {c[0] + 1, c[1] + 1}\n    return len(d)\n",
        "num_ids": 211
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #  init. a list of cars\n    cars = [Car() for i in range(n)]\n    # set the speed\n    for car in cars:\n        car.set_speed(1)\n    #  simulate the cars\n    for i in range(n):\n        for j in range(i, n):\n            cars[i].move_forward()\n            cars[j].move_forward()\n    #  check for collisions\n    for i in range(n):\n        for j in range(i, n):\n            if cars[i].is_colliding(cars[j]):\n                print(f\"Car {i} and Car {j} collide\")\n                return True\n    return False\n",
        "num_ids": 165
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert n > 1, \"n must be > 1\"\n    collisions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_collision(i, j):\n                collisions += 1\n    return collisions\n",
        "num_ids": 65
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert n > 1\n",
        "num_ids": 7
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code here:\n    \n    return 0\n",
        "num_ids": 14
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i == 0 and j == n - 1):\n                continue\n            if (dist_between(car_positions[i], car_positions[j]) <= collision_dist):\n                count += 1\n    return count\n",
        "num_ids": 81
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 0\n    else:\n        return car_race_collision(n-1) + 2*(car_race_collision(n-2))\n",
        "num_ids": 45
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    l = l[:]\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 32
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not l:\n        return []\n    return [x + 1 for x in l]\n",
        "num_ids": 23
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l.append(0)\n    for i in range(1, len(l)):\n        l[i] = l[i-1] + 1\n",
        "num_ids": 38
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n = len(l)\n    i = 0\n    while i < n:\n        if l[i] % 2 == 1:\n            l[i] += 1\n        else:\n            l[i] = 0\n        i += 1\n    return l\n",
        "num_ids": 62
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [i + 1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(map(lambda x: x + 1, l))\n",
        "num_ids": 17
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    new_l = []\n    for item in l:\n        new_l.append(item + 1)\n    return new_l\n",
        "num_ids": 33
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(map(lambda x: x + 1, l))\n",
        "num_ids": 17
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    new_list = []\n    for index, element in enumerate(l):\n        if index == 0:\n            new_list.append(element + 1)\n        else:\n            new_list.append(element + 1)\n    return new_list\n",
        "num_ids": 61
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    #this is a good question, with no helper functions, and just one loop\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sum_to_zero = False\n    for i in range(0, len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                sum_to_zero = True\n    return sum_to_zero\n",
        "num_ids": 73
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # set() removes duplicates from a list\n    # remove = [list(set(l))]\n    # if remove:\n    #     remove = sorted(remove)\n    #     remove = set(remove)\n    #     return remove\n    # else:\n    #     return False\n",
        "num_ids": 68
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # The two pointer approach is straightforward, we will only consider\n    # pairs that add up to 0. If we have already seen the pair, we\n    # cannot add it anymore.\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 93
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    seen = set()\n    for item in l:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    pairs_count = 0\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j] == 0:\n                pairs_count += 1\n    return pairs_count >= 2\n",
        "num_ids": 70
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert(len(l) > 0), \"Pairs sum to zero requires a non-empty list\"\n",
        "num_ids": 25
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] + l[j] == 0:\n                if l.count(l[i]) > 1 and l.count(l[j]) > 1:\n                    return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(0, len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = set()\n    for i in l:\n        if -i in s:\n            return True\n        else:\n            s.add(i)\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # check if base is less than 10\n    if x > base:\n        raise ValueError(\"Base can't be more than 10.\")\n    # convert base 10 to base to desired one\n    x = str(x)\n    remainder = 0\n    # for loop to calculate each digit\n    for i in range(len(x)):\n        remainder = remainder + int(x[i]) * base ** (len(x) - i - 1)\n    return str(remainder)\n",
        "num_ids": 115
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def change(x, base):\n        s = ''\n        while x >= base:\n            x, mod = divmod(x, base)\n            s = s + str(mod)\n        return s + str(x)\n",
        "num_ids": 54
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert 0 < x < base\n    base_str = ''\n    while x!= 0:\n        base_str = str(x % base) + base_str\n        x = x // base\n    return base_str\n",
        "num_ids": 53
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return str(x)\n    # TODO: change_base(8, 3)\n",
        "num_ids": 22
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return str(x).zfill(base)\n",
        "num_ids": 13
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if x < 10:\n        return str(x)\n    return change_base(x//base, base) + str(x%base)\n",
        "num_ids": 35
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if base <= 0 or not isinstance(x, int):\n        return \"Error: base must be a positive integer.\"\n    if x >= 0 and base >= 10:\n        return convert_to_base(str(x), base)\n    else:\n        return \"Error: base must be a positive integer.\"\n    #return str(int(x, base))\n",
        "num_ids": 84
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    res = []\n    while x!= 0:\n        res.append(str(x % base))\n        x //= base\n    return ''.join(reversed(res))\n",
        "num_ids": 45
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    str_base = []\n    while x > 0:\n        x, rem = divmod(x, base)\n        str_base.append(str(rem))\n    return ''.join(reversed(str_base))\n",
        "num_ids": 55
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if x < base:\n        return str(x)\n    elif x > 9:\n        return change_base(x//base, base) + str(x % base)\n    else:\n        return '0' + str(x)\n",
        "num_ids": 58
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    area = 0.5 * (a * h)\n    return area\n",
        "num_ids": 18
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    area = a * h / 2\n    return area\n",
        "num_ids": 14
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if (a == h or h == 0):\n        return \"invalid inputs\"\n    else:\n        return (a*h)/2\n",
        "num_ids": 34
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return.5 * a * h\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (1/2)*a*h\n",
        "num_ids": 12
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (a*h)/2\n    \n",
        "num_ids": 12
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    a = length_of_side(a)\n    h = length_of_side(h)\n    area = 0.5 * a * h\n    return area\n",
        "num_ids": 40
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a * h * 0.5\n",
        "num_ids": 11
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0 or n == 1:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 50
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 86
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 2:\n        return n\n",
        "num_ids": 12
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0 or n == 1:\n        return 0\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "num_ids": 50
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 50
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0: return 0\n    if n == 1 or n == 2: return 1\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 57
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    fib4_1 = 0\n    fib4_2 = 1\n    if n == 0:\n        return fib4_1\n    elif n == 1:\n        return fib4_2\n    elif n == 2:\n        return fib4_2\n    elif n == 3:\n        return fib4_1\n    else:\n        for i in range(4, n):\n            fib4_3 = fib4_2 + fib4_1\n            fib4_1 = fib4_2\n            fib4_2 = fib4_3\n    return fib4_3\n",
        "num_ids": 141
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 86
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 68
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n",
        "num_ids": 62
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l = sorted(l)\n    middle = len(l) // 2\n    if len(l) % 2:\n        return l[middle]\n    else:\n        return (l[middle - 1] + l[middle]) / 2\n",
        "num_ids": 57
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return _median(l)\n",
        "num_ids": 10
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n = len(l)\n    assert n > 0, \"Empty list\"\n    assert n % 2 == 0, \"n is not even\"\n    return l[n//2]\n",
        "num_ids": 44
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    l = l[:]\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]",
        "num_ids": 68
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(l)\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return sorted(l)[n // 2]\n    else:\n        return sorted(l)[n // 2 - 1] + sorted(l)[n // 2] / 2\n",
        "num_ids": 68
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(l) == 0:\n        return 0\n    sorted_l = sorted(l)\n    median = len(sorted_l) // 2\n    return sorted_l[median]\n",
        "num_ids": 50
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
        "num_ids": 64
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert l!= []\n    assert len(l) % 2 == 0\n    return sorted(l)[len(l) // 2]\n    \n",
        "num_ids": 35
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert len(l) > 0, \"empty list\"\n    if len(l) % 2 == 1:\n        return median_odd(l)\n    else:\n        return (median_odd(l) + median_even(l)) / 2\n",
        "num_ids": 60
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return text == reverse(text)\n",
        "num_ids": 10
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    return text == reverse_string(text)\n",
        "num_ids": 14
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(text) < 1:\n        return True\n    if len(text) == 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n",
        "num_ids": 62
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #to make sure that every word in string is a single character\n    #therefore, if the length of the string is odd,\n    #then its not a palindrome\n    if len(text) % 2 == 0:\n        return is_palindrome_rec(text, 0, len(text)-1)\n    else:\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not text:\n        return True\n    if len(text) == 1:\n        return True\n    if text == text[::-1]:\n        return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if text == \"\":\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n",
        "num_ids": 42
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #https://stackoverflow.com/a/9458224\n    return ((p - 1) * pow(2, n - 1, p) + 1) % p\n",
        "num_ids": 42
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n < 0 or p < 0:\n        raise ValueError(\"n and p must be >= 0\")\n    while n >= p:\n        n -= p\n    return n\n",
        "num_ids": 42
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 0:\n        n = -n\n        p = -p\n",
        "num_ids": 20
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    m = pow(2, n) % p\n    return m\n",
        "num_ids": 17
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    m = 1\n    while n!= 0:\n        m = m * p % n\n        n = n // 2\n    return m\n",
        "num_ids": 34
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # TODO: implement modp\n    return None\n",
        "num_ids": 14
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return (modp(n, p) * modp(n, p)) % p\n",
        "num_ids": 37
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return encode_shift(s).lower()\n",
        "num_ids": 12
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "num_ids": 35
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    vowels = 'aeiou'\n    new = ''\n    for char in text:\n        if char not in vowels:\n            new += char\n    return new\n",
        "num_ids": 42
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return text.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '')\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    string = text.strip('\\n')\n    new_string = \"\"\n    for i in string:\n        if not i in 'aeiouAEIOU':\n            new_string += i\n    return new_string\n",
        "num_ids": 53
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return ''.join(ch for ch in text if ch.lower() not in 'aeiou')\n",
        "num_ids": 25
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    return ''.join(char for char in text if not char in 'aeiouAEIOU')",
        "num_ids": 26
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    new_text = ''\n    for char in text:\n        if char.lower() not in 'aeiou':\n            new_text += char\n    return new_text\n",
        "num_ids": 42
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for vowel in ['a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U']:\n        if vowel in text:\n            text = text.replace(vowel, '')\n    return text",
        "num_ids": 61
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join([x for x in text if x not in \"aeiou\"])\n",
        "num_ids": 23
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return ''.join(char for char in text if char.lower() not in 'aeiou')\n",
        "num_ids": 25
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vowels = \"aeiouAEIOU\"\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n",
        "num_ids": 41
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for num in l:\n        if num > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return all(item < t for item in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for e in l:\n        if e > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return all(l < t for l in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if l == []:\n        return True\n    else:\n        return l[0] < t and below_threshold(l[1:], t)\n",
        "num_ids": 38
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return all(l_num < t for l_num in l)\n",
        "num_ids": 18
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(l)):\n        if l[i] < t:\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(s0) == len(s1) and all(s0[i] == s1[i] for i in range(len(s0)))\n",
        "num_ids": 39
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return all(s0[i] == s1[i] for i in range(min(len(s0), len(s1))))\n",
        "num_ids": 34
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(s0)!= len(s1):\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    else:\n        for i in range(len(s0)):\n            if s0[i]!= s1[i]:\n                return False\n        return True\n",
        "num_ids": 59
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return all(s0[i] == s1[i] for i in range(len(s0)))\n",
        "num_ids": 27
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    return all(c1 == c2 for c1, c2 in zip(s0, s1))\n",
        "num_ids": 44
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s0 = list(s0)\n    s1 = list(s1)\n    for i in range(len(s0)):\n        if s0[i] == s1[i]:\n            s0.pop(i)\n            s1.pop(i)\n        else:\n            return False\n    return True\n",
        "num_ids": 78
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n    \ndef move_chars(s0: str, s1: str):\n    \"\"\"\n    If the two words have the same characters, move the characters to the \n    end of s0.\n    >>> move_chars('eabcdzzzz', 'dddddddabc')\n    'eabdzzzzdddddabc'\n    >>> move_chars('abcd', 'dddddddabc')\n    'abcdddddddabc'\n    >>> move_chars('dddddddabc', 'abcd')\n    'ddddddddabcabcd'\n    >>> move_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    'eabcdzzzzddddddabc'\n    >>> move_chars('abcd', 'dddddddabc')\n    'abcdddddddabc'\n    >>> move_chars('abcd', 'dddzzzzzzzddddabc')\n    'abcddddzzzzzzzzddddabc'\n    >>> move_chars('abcd', 'dddzzzzzzzddddabc')\n    'abcddddzzzzzzzzddddabc'\n    \"\"\"\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            break\n    s0 = s0[i:] + s0[:i]\n    return s0\n",
        "num_ids": 368
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for c0, c1 in zip(s0, s1):\n        if c0!= c1:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert n > 0, \"n must be greater than 0\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 59
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert n >= 0, f\"n < 0. n={n}\"\n    if n == 0 or n == 1:\n        return n\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 49
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n > 0\n    a, b = 1, 1\n    for i in range(n-1):\n        a, b = b, a+b\n    return a\n",
        "num_ids": 42
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 28
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n < 3:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    brackets = list(brackets)\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\">\")\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 80
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return brackets == \"\".join(brackets)\n",
        "num_ids": 13
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    open_brackets = brackets.count(\"<\")\n    close_brackets = brackets.count(\">\")\n    # check number of open brackets\n    if open_brackets!= close_brackets:\n        return False\n    # check the order\n    for i in range(len(brackets)):\n        if brackets[i] == \">\":\n            return True\n    return False\n",
        "num_ids": 91
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    pass # replace this line with your code\n",
        "num_ids": 11
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    i = 0\n    while i < len(brackets):\n        if brackets[i] == \"<\":\n            j = i + 1\n            while j < len(brackets) and brackets[j]!= \">\":\n                j += 1\n            if j == len(brackets):\n                return False\n            else:\n                i = j\n        i += 1\n    return True\n",
        "num_ids": 90
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n_opening_brackets = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            n_opening_brackets += 1\n        if bracket == \">\":\n            n_opening_brackets -= 1\n        if n_opening_brackets < 0:\n            return False\n    return n_opening_brackets == 0\n",
        "num_ids": 80
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    open_bracket = 0\n    for i in brackets:\n        if i == \"<\":\n            open_bracket += 1\n        else:\n            if open_bracket == 0:\n                return False\n            open_bracket -= 1\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    index = 0\n    while index < len(brackets) and brackets[index]!= \">\":\n        index += 1\n    if index == len(brackets):\n        return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    stack = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            stack.append(brackets[i])\n        if brackets[i] == \">\":\n            if len(stack) == 0:\n                return False\n            if stack.pop()!= \"<\":\n                return False\n    return len(stack) == 0\n",
        "num_ids": 89
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(bracket)\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if l:\n        return l[-1] < l[-2]\n    return True\n",
        "num_ids": 24
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(l) == 1:\n        return True\n",
        "num_ids": 15
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    lst = list(l)\n    lst.sort()\n    if lst == l:\n        return True\n    else:\n        return False",
        "num_ids": 36
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(l) <= 1:\n        return True\n    i = 0\n    if l[i] >= l[i + 1]:\n        return False\n    while i < len(l) - 1:\n        if l[i] <= l[i + 1]:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 77
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # TODO\n",
        "num_ids": 6
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(l) < 2:\n        return True\n    return l[1] < l[0] or l[-1] < l[-2]\n",
        "num_ids": 39
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return all(x <= y for x, y in zip(l, l[1:]))\n",
        "num_ids": 23
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def monotonic(l):\n        \"\"\"Return True if list elements are monotonically increasing or decreasing.\n        >>> monotonic([1, 2, 4, 20])\n        True\n        >>> monotonic([1, 20, 4, 10])\n        False\n        >>> monotonic([4, 1, 0, -10])\n        True\n        \"\"\"\n        previous = l[0]\n        for n in l:\n            if n > previous:\n                return False\n            previous = n\n        return True\n    return monotonic(l)\n",
        "num_ids": 130
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(l) < 3:\n        return True\n",
        "num_ids": 15
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # These arrays give the index of the next element of every\n    # decreasing or increasing sequence.\n    seq = [[], []]\n    \n    for i in range(0, len(l) - 1):\n        if l[i] > l[i + 1]:\n            seq[0].append(i)\n        elif l[i] < l[i + 1]:\n            seq[1].append(i)\n    # check if the seqs are increasing or decreasing\n    for i in range(0, len(seq[0])):\n        if seq[0][i] > seq[1][i]:\n            return False\n    return True\n",
        "num_ids": 150
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    res = []\n    \n    for e1 in l1:\n        if e1 in l2:\n            if e1 not in res:\n                res.append(e1)\n    return res\n",
        "num_ids": 50
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    common = []\n    for num in l1:\n        if num in l2 and num not in common:\n            common.append(num)\n    common.sort()\n    return common\n",
        "num_ids": 45
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # unique = set(l1).intersection(l2)\n    # return sorted(unique)\n    # return sorted(set(l1).intersection(l2))\n",
        "num_ids": 42
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    for i in l1:\n        if i in l2 and i not in result:\n            result.append(i)\n    for i in l2:\n        if i in l1 and i not in result:\n            result.append(i)\n",
        "num_ids": 64
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(set(l1).intersection(set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    common_list = []\n    if len(l1) < len(l2):\n        while len(l1)!= 0:\n            common_list.append(l1.pop(0))\n            l2.remove(l2[0])\n    else:\n        while len(l2)!= 0:\n            common_list.append(l2.pop(0))\n            l1.remove(l1[0])\n    return common_list\n",
        "num_ids": 108
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    prime_factor_list = []\n    while n % 2 == 0:\n        prime_factor_list.append(2)\n        n = n / 2\n",
        "num_ids": 38
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # factors = []\n    # if n == 1:\n    #     return 1\n    # for i in range(2, n):\n    #     if n % i == 0:\n    #         factors.append(i)\n    # if factors:\n    #     return max(factors)\n    # else:\n    #     return n\n    factor = 2\n    while n % factor!= 0:\n        factor += 1\n    return factor\n",
        "num_ids": 106
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n % 2 == 0:\n        while n % 2 == 0:\n            n = n // 2\n        return 2\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            n = n // i\n    return n\n",
        "num_ids": 75
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    factor = 2\n    while True:\n        if n % factor == 0:\n            return factor\n        factor += 1\n",
        "num_ids": 29
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return factorization(n)\n",
        "num_ids": 9
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n",
        "num_ids": 10
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    i = 2\n    while n % i!= 0:\n        i += 1\n    return i\n",
        "num_ids": 25
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # write your code here\n    largest_prime_factor_so_far = 1\n    #\n    for i in range(2, n):\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n            if i > largest_prime_factor_so_far:\n                largest_prime_factor_so_far = i\n    #\n    if n > 1:\n        largest_prime_factor_so_far = n\n    #\n    return largest_prime_factor_so_far\n",
        "num_ids": 125
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(2,n+1):\n        if n%i == 0:\n            return i\n",
        "num_ids": 27
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n            largest_prime_factor(n)\n        else:\n            i += 1\n    if n > 1:\n        largest_prime_factor(n)\n    else:\n        return n\n",
        "num_ids": 74
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(range(1,n+1))\n",
        "num_ids": 14
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n <= 0:\n        return 0\n    return n + sum_to_n(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n < 1:\n        return 0\n    else:\n        return n + sum_to_n(n - 1)\n",
        "num_ids": 31
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = 0\n    for i in range(1,n+1):\n        s += i\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    total = 0\n    for i in range(n+1):\n        total += i\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n    \n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids": 56
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    open_brackets = list(brackets)\n    stack = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            stack.append(brackets[i])\n        else:\n            if not stack:\n                return False\n            if stack[-1] == \"(\":\n                stack.pop()\n    return len(stack) == 0\n    \n",
        "num_ids": 94
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    brackets = brackets.replace(' ','')\n    brackets_list = brackets.split('(')\n    for i in range(len(brackets_list)):\n        if brackets_list[i] == '':\n            continue\n        if brackets_list[i][0] == ')':\n            return False\n        if brackets_list[i][-1] == '(':\n            return False\n    return True\n",
        "num_ids": 98
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            count += 1\n        elif brackets[i] == ')':\n            count -= 1\n        if count < 0:\n            return False\n    if count!= 0:\n        return False\n    return True\n",
        "num_ids": 78
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert brackets, \"brackets must not be empty\"\n",
        "num_ids": 14
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    bracket_pairs = {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    bracket_stack = []\n    for bracket in brackets:\n        if bracket in bracket_pairs:\n            bracket_stack.append(bracket)\n        else:\n            if bracket_stack:\n                bracket_top = bracket_stack.pop()\n                if bracket_top!= bracket_pairs[bracket]:\n                    return False\n    return not bracket_stack\n",
        "num_ids": 112
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    nesting_level = 0\n    for c in brackets:\n        if c == \"(\":\n            nesting_level += 1\n        elif c == \")\":\n            nesting_level -= 1\n        if nesting_level < 0:\n            return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    brackets = brackets[1:-1]\n    pairs = {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    for s in brackets:\n        if s in pairs:\n            if not correct_bracketing(brackets.replace(s, pairs[s])):\n                return False\n        else:\n            return False\n    return True\n",
        "num_ids": 84
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    bracket_map = {\")\" : \"(\", \"}\" : \"{\", \"]\" : \"[\"}\n    balanced = True\n    stack = []\n    for char in brackets:\n        if char in bracket_map:\n            stack.append(char)\n        elif char in bracket_map.values():\n            if len(stack) == 0:\n                balanced = False\n                break\n            elif bracket_map[stack[-1]] == char:\n                stack.pop()\n            else:\n                balanced = False\n                break\n    return balanced\n",
        "num_ids": 126
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            count += 1\n        if brackets[i] == \")\":\n            count -= 1\n    return count == 0\n",
        "num_ids": 56
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    brackets = brackets.replace(\" \",\"\")\n    brackets = brackets.replace(\")\",\")\")\n    brackets = brackets.replace(\"(\",\"(\")\n    return \"()\" in brackets\n",
        "num_ids": 47
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [n * xs[i] for i, n in enumerate(xs)]\n",
        "num_ids": 22
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [xs[1]] + [xs[0] * x + xs[1] for x in range(1, len(xs))]\n",
        "num_ids": 35
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = []\n    for i in range(len(xs) - 1):\n        res.append(i * xs[i] + xs[i + 1])\n    return res\n",
        "num_ids": 45
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(xs) <= 1:\n        return [0]\n    return [xs[i] + xs[i+1] * (len(xs)-1) for i in range(len(xs)-1)]\n",
        "num_ids": 52
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(1, len(xs)):\n        xs[i] = xs[i] * xs[i - 1]\n    return xs\n",
        "num_ids": 40
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # precalculate 2nd derivative\n    xs2 = [0, 0, 0]\n    xs2[0] = 2 * xs[1]\n    xs2[1] = 3 * xs[2]\n    xs2[2] = 2 * xs[0]\n    \n    deriv = []\n    for i in range(len(xs) - 1):\n        deriv.append(xs2[i] + xs[i])\n    \n    return deriv\n",
        "num_ids": 114
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # we start from the second element because derivatives start from index 1\n    # in every iterative loop we are increasing the index by 1\n    new_xs = []\n    for index in range(1, len(xs)):\n        new_xs.append(xs[index] + xs[index - 1] * index)\n    return new_xs\n",
        "num_ids": 81
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # using recursion \n    # for i in range(len(xs)):\n    #     if i == 0:\n    #         continue\n    #     else:\n    #         xs.append(xs[i]*xs[i-1])\n    # return xs[len(xs)-1]\n    # Using lambdas\n    return list(map(lambda x: x*(i+1),xs))\n",
        "num_ids": 99
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    xs_len = len(xs)\n    if xs_len == 0:\n        return []\n    if xs_len == 1:\n        return [1]\n    if xs_len == 2:\n        return [1, 2]\n    if xs_len == 3:\n        return [1, 2, 3]\n    if xs_len == 4:\n        return [1, 2, 4, 6]\n    return [1] * (xs_len - 1)\n",
        "num_ids": 115
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    ans = []\n    for x in xs:\n        ans.append(x*xs.index(x))\n    return ans\n",
        "num_ids": 32
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # if n == 0:\n    #     return 0\n    # if n == 1:\n    #     return 1\n    # else:\n    #     return fibfib(n-1) + fibfib(n-2)\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c\n",
        "num_ids": 127
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 0: return 0\n    elif n == 1: return 0\n    elif n == 2: return 1\n    else: return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 61
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 63
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2)\n",
        "num_ids": 40
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n >= 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    fibprev = 0\n    fibcurr = 1\n    for i in range(2, n):\n        fibcurr += fibprev\n        fibprev = fibcurr - fibprev\n    return fibcurr\n",
        "num_ids": 76
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 57
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    f = 0\n    s = 1\n    if n <= 1:\n        return n\n    for _ in range(n-1):\n        f, s = s, f + s\n    return f\n",
        "num_ids": 48
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0 or n == 1:\n        return n\n    fib_prev = 0\n    fib_prev_2 = 1\n    for i in range(2, n+1):\n        fib_i = fib_prev + fib_prev_2\n        fib_prev_2 = fib_prev\n        fib_prev = fib_i\n    return fib_i\n",
        "num_ids": 91
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n < 3:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 45
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # YOUR CODE HERE\n    vowels = 'aeiou'\n    return len([x for x in s if x in vowels])\n",
        "num_ids": 34
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    total = 0\n    for i in s:\n        if i in \"aeiouy\":\n            total += 1\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for c in s:\n        if c in ['a','e','i','o','u','y']:\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    vowels_list = ['a', 'e', 'i', 'o', 'u']\n    result = 0\n    for i in s:\n        if i in vowels_list:\n            result += 1\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return s.count(\"a\") + s.count(\"e\") + s.count(\"i\") + s.count(\"o\") + s.count(\"u\")\n",
        "num_ids": 38
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    vowels = 0\n    for i in s:\n        if i in 'aeiouy':\n            vowels += 1\n    return vowels\n",
        "num_ids": 38
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    vowels = 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y':\n            vowels += 1\n    return vowels\n",
        "num_ids": 65
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for ch in s:\n        if ch in \"aeiou\":\n            count += 1\n    return count\n    \nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED.\\n\")",
        "num_ids": 79
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    vowels = \"aeiouy\"\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vowels = \"aeiou\"\n    count = 0\n    for i in vowels:\n        for j in range(len(s)):\n            if j == len(s)-1:\n                if s[j] == i:\n                    count += 1\n            else:\n                if s[j] == i and s[j+1] == i:\n                    count += 1\n    return count\n",
        "num_ids": 95
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = str(x)\n    return s[-shift:] + s[:-shift]\n",
        "num_ids": 23
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert shift >= 0\n    assert isinstance(shift, int)\n    if shift == 0:\n        return x\n    else:\n        return x[shift:] + x[:shift]\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    x_str = str(x)\n    if len(x_str) < shift:\n        return x_str\n    else:\n        result = \"\"\n        for i in range(len(x_str)):\n            if i == len(x_str) - shift:\n                result = result + x_str[i]\n            else:\n                result = result + x_str[i]\n    return result\n",
        "num_ids": 98
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if shift > len(x):\n        x = x[-len(x) - shift:] + x[:-len(x) - shift]\n    else:\n        x = x[-shift:] + x[:-shift]\n    return x\n",
        "num_ids": 58
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert shift >= 0, \"shift must be a non-negative integer\"\n    res = \"\"\n    for i in range(shift):\n        res = str(x % 10) + res\n        x = x // 10\n    return res\n",
        "num_ids": 55
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert shift >= 0, \"shift must be >= 0\"\n    assert isinstance(x, int), \"x must be an integer\"\n    assert x >= 0, \"x must be nonnegative\"\n    x = str(x)\n    shift = shift % len(x)\n    return x[shift:] + x[:shift]\n",
        "num_ids": 77
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if shift > len(str(x)):\n        return str(x)[len(str(x))-shift: ] + str(x)[0:len(str(x))-shift]\n    else:\n        return str(x)[shift:] + str(x)[0:shift]\n",
        "num_ids": 68
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if shift > len(str(x)):\n        return reversed(str(x))\n    elif shift == 0:\n        return str(x)\n    else:\n        return str(x)[-shift:] + str(x)[:shift]\n",
        "num_ids": 59
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[-shift:] + x_str[:-shift]\n    return x_str[shift:] + x_str[:shift]\n",
        "num_ids": 57
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = \"\"\n    for i in range(1, len(x) + 1):\n        if i + shift <= len(x):\n            res += x[i + shift - 1]\n        else:\n            res += x[i + shift - len(x)]\n    return res\n",
        "num_ids": 67
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum([ord(ch) for ch in s])\n",
        "num_ids": 15
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(int(char) for char in s if char.isalpha())\n",
        "num_ids": 20
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in s:\n        if i >= '0' and i <= '9':\n            sum += ord(i)\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not s:\n        return 0\n    else:\n        return sum(ord(x) for x in s if x.isupper())\n",
        "num_ids": 34
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not s:\n        return 0\n    count = 0\n    for c in s:\n        if 48 <= ord(c) <= 57:\n            count += ord(c)\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = 0\n",
        "num_ids": 6
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum([ord(i) for i in s if ord(i) in range(65,91)])\n",
        "num_ids": 27
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum([int(i) for i in s])\n",
        "num_ids": 15
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = 0\n    for c in s:\n        result = result + ord(c)\n    return result",
        "num_ids": 26
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in s:\n        count += ord(i)\n    return count",
        "num_ids": 24
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = s.strip().replace(\" \",\"\")\n    a = n\n    b = int(s)\n    c = b - a\n    if(c >0):\n        return(c)\n    else:\n        return(0)\n",
        "num_ids": 58
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    apples = 0\n    oranges = 0\n    mangoes = 0\n    num = int(n)\n    for i in range(len(s)):\n        if s[i] == \"0\":\n            oranges += int(s[i])\n        if s[i] == \"1\":\n            apples += int(s[i])\n        if s[i] == \"2\":\n            mangoes += int(s[i])\n    return num - apples - oranges - mangoes\n",
        "num_ids": 118
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(s)-int(s)-1\n    \n",
        "num_ids": 15
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (n - s.count(\"mango\") ) * (n - s.count(\"apple\"))\n",
        "num_ids": 25
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if (s.isdigit() == False):\n        return -1\n    if (s.isdigit() == True):\n        if (s == \"\" or s == \"0\"):\n            return 0\n        elif (int(s) > 0):\n            n = int(n)\n            apples = int(s)\n            while apples > 0:\n                mango_num = n % 10\n                n = int(n / 10)\n                apples = apples - mango_num\n            return apples\n        else:\n            return -1\n",
        "num_ids": 129
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if s == \"0 apples and 1 oranges\":\n        return 0\n    else:\n        if len(s)%2!= 0:\n            return -1\n        else:\n            num_apples = int(s.split(\" \")[0])\n            num_oranges = int(s.split(\" \")[1])\n            if num_apples+num_oranges > n:\n                return -1\n            else:\n                mango_count = n - num_apples - num_oranges\n                return mango_coun",
        "num_ids": 125
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    total_apples = s.split()[0]\n    total_oranges = s.split()[1]\n    total_mango_fruits = 0\n    for i in range(int(total_apples),int(total_oranges)+1,1):\n        total_mango_fruits += i\n    return total_mango_fruits\n",
        "num_ids": 86
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code here\n    total_oranges = int(s[-1])\n    total_apples = int(s[0])\n    \n    total_mango_oranges = int(total_oranges / 5)\n    total_mango_apples = int(total_apples / 6)\n    \n    total_mango_fruits = total_mango_oranges + total_mango_apples\n    \n    return total_mango_fruits\n    \n    ",
        "num_ids": 116
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    d={}\n    l=[]\n    if not s:\n        return 0\n    else:\n        s=s.split()\n        if int(s[0])==0:\n            return 0\n        else:\n            for i in range(int(s[0])):\n                l.append(\"apple\")\n            for i in range(int(s[1])):\n                l.append(\"orange\")\n            for i in range(len(l)):\n                d[l[i]]=d.get(l[i],0)+1\n            return d[\"mango\"]\n",
        "num_ids": 137
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = 0\n    for i in range(len(s)):\n        if s[i]!='' and int(s[i:i+2]) < n:\n            res += int(s[i:i+2])\n        elif s[i] =='':\n            res += int(s[i+1:i+3])\n    return res\n    \n",
        "num_ids": 89
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Approach 1:\n    # Time: O(N)\n    # Space: O(1)\n    '''\n    even_nodes = sorted(filter(lambda x: x % 2 == 0, arr))\n    \n    if len(even_nodes) == 0:\n        return []\n    return [even_nodes[0], even_nodes.index(even_nodes[0])]\n",
        "num_ids": 96
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Complete the below function\n    if len(arr) == 0:\n        return []\n",
        "num_ids": 22
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Edge case\n    if len(arr) == 0:\n        return []\n",
        "num_ids": 20
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # edge case:\n    if not arr or arr == []:\n        return []\n",
        "num_ids": 21
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not arr: return []\n    if len(arr) == 1: return [arr[0], 0]\n    arr = sorted(arr, key=lambda x: x if x % 2 == 0 else -x)\n    \n    if not arr: return []\n    return [arr[0], arr.index(arr[0])]\n",
        "num_ids": 78
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    # this can be improved if there are multiple smallest evens\n    evens = []\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            evens.append((val, i))\n",
        "num_ids": 55
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not arr:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    arr = sorted(arr, key=lambda x: x % 2)\n    return arr[0]\n",
        "num_ids": 25
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    freqs = {}\n    for n in lst:\n        if n in freqs:\n            freqs[n] += 1\n        else:\n            freqs[n] = 1\n    for k,v in freqs.items():\n        if k > 0 and v >= k:\n            return k\n    return -1\n",
        "num_ids": 77
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    freq = {}\n    max_val = -1\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n",
        "num_ids": 53
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if lst == []:\n        return -1\n    \n    lst.sort()\n    lst.reverse()\n    \n    for i in range(len(lst)):\n        if lst[i] > 0:\n            return lst[i]\n    return -1\n",
        "num_ids": 69
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code goes here\n    max = -1\n    count = -1\n    for i in lst:\n        if(i > max):\n            max = i\n            count = lst.count(i)\n    if(count > 0):\n        return max\n    else:\n        return -1\n",
        "num_ids": 73
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = {}\n    # sort list and return last item\n    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] in count.keys():\n            count[lst[i]] += 1\n        else:\n            count[lst[i]] = 1\n    # return max value from dictionary\n    for k, v in count.items():\n        if v >= k:\n            return k\n    return -1\n",
        "num_ids": 109
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #init\n    max_val = 0\n    max_freq = 0\n    for i in lst:\n        if i > max_val:\n            max_val = i\n        if max_freq <= lst.count(i):\n            max_freq = lst.count(i)\n",
        "num_ids": 73
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    d = {}\n    for num in lst:\n        if num not in d:\n            d[num] = 1\n        else:\n            d[num] += 1\n    \n    max_freq = 0\n    max_freq_val = 0\n    for k,v in d.items():\n        if v > max_freq:\n            max_freq = v\n            max_freq_val = k\n    return max_freq_val if max_freq >= 1 else -1\n",
        "num_ids": 120
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    res = 0\n    freq = 0\n    for i in range(len(lst)):\n        if lst[i] > res:\n            res = lst[i]\n            freq = 1\n        elif lst[i] == res:\n            freq += 1\n    if freq >= res:\n        return res\n    return -1\n",
        "num_ids": 86
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    maxi = 0\n    freq = 0\n    for item in lst:\n        if item > 0:\n            if item > maxi:\n                maxi = item\n            freq += 1\n            if freq >= item:\n                return maxi\n    return -1\n",
        "num_ids": 66
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    lst.sort()\n    for i in range(len(lst)-1):\n        if lst[i+1] < 0:\n            return lst[i]\n    return -1",
        "num_ids": 47
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = []\n    for i in range(0, len(lst)):\n        s.append(min(lst[:i] + lst[i + 1:]))\n    return s\n",
        "num_ids": 48
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n",
        "num_ids": 28
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    i = 0\n    lst_length = len(lst)\n    if lst_length == 0:\n        return []\n    for i in range(lst_length):\n        if i == 0:\n            pass\n        elif lst[i] > lst[i-1]:\n            continue\n        else:\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n            i = 0\n    return lst\n",
        "num_ids": 115
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not lst:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        min_ind = 0\n        max_ind = len(lst)-1\n        min_value = lst[min_ind]\n        max_value = lst[max_ind]\n        while min_ind!= max_ind:\n            while lst[min_ind] < min_value:\n                min_ind += 1\n            while lst[max_ind] > max_value:\n                max_ind -= 1\n            lst[min_ind], lst[max_ind] = lst[max_ind], lst[min_ind]\n        return lst\n",
        "num_ids": 174
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Special case\n    if not lst:\n        return lst\n",
        "num_ids": 18
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) < 2:\n        return lst\n    return [lst[0]] + sorted(lst[1:], reverse=True) + [lst[-1]]\n",
        "num_ids": 47
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(lst, reverse=True)\n",
        "num_ids": 13
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not lst:\n        return lst\n",
        "num_ids": 13
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(lst) < 1:\n        return []\n    \n    start = lst[0]\n    i = 1\n    while i < len(lst):\n        if lst[i] < start:\n            lst[i], lst[i - 1] = lst[i - 1], lst[i]\n        i += 1\n",
        "num_ids": 85
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a+b < c or a+c < b or b+c < a:\n        return -1\n    return round((a*b*c)/2, 2)\n",
        "num_ids": 42
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    return round((s*(s-a)*(s-b)*(s-c)), 2)\n",
        "num_ids": 64
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round((a*b*c)/2,2)\n    else:\n        return -1\n    ",
        "num_ids": 47
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return (a * b * 0.5)\n",
        "num_ids": 43
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Simplify math\n    a, b, c = a**2, b**2, c**2\n    p = (a + b + c) / 2\n    s = math.sqrt(p * (p - a) * (p - b) * (p - c))\n    return round(s, 2)\n",
        "num_ids": 76
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a+b > c:\n        return 0.5 * a * b\n    else:\n        return -1\n",
        "num_ids": 29
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    side_a, side_b, side_c = sorted((a, b, c))\n    if side_a + side_b <= side_c:\n        return -1\n    if side_a + side_c <= side_b:\n        return -1\n    if side_b + side_c <= side_a:\n        return -1\n    return round((side_a * side_b * 0.5), 2)\n",
        "num_ids": 102
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a+b <= c or a+c <= b or b+c <= a:\n        return -1\n    s = (a + b + c)/2\n    return round(math.sqrt(s*(s - a)*(s - b)*(s - c)),2)\n",
        "num_ids": 68
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round(((a + b + c) / 2), 2)\n    else:\n        return -1\n",
        "num_ids": 48
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if (a + b > c) and (b + c > a) and (a + c > b):\n        area = (a + b + c) / 2\n        return round(area, 2)\n    else:\n        return -1\n",
        "num_ids": 58
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(q)==1 and w==0:\n        return True\n    if len(q)==1 and q[0]==0:\n        return False\n    if len(q)==1 and q[0]!=0:\n        return True\n    if q==[]:\n        return False\n    a=len(q)\n    m=max(q)\n    if a!=len(q):\n        return False\n    if m>w:\n        return False\n    if m<w:\n        return True\n    b=0\n    for i in range(len(q)):\n        if i==0:\n            if len(q)%2!=0:\n                return False\n            elif q[i]>q[i+1]:\n                return False\n            elif q[i]<q[i+1]:\n                return True\n            else:\n                return False\n        else:\n            if q[i]>q[i+1]:\n                return False\n            elif q[i]<q[i+1]:\n                return True\n            else:\n                continue\n    return True\n",
        "num_ids": 264
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(q) == 1:\n        return True\n    if is_palindromic(q) and q[0] + sum_elements(q) <= w:\n        return True\n    return False",
        "num_ids": 50
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return True if (len(q) == 0 or q == []) or sum(q) <= w and is_palindrome(q) else False\n",
        "num_ids": 36
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    w = w-sum(q)\n",
        "num_ids": 11
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if(is_balanced(q) and sum(q)<=w):\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in q:\n        if i<=0:\n            return False\n        if i==1:\n            return True\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return w-sum(q) <= 0 and is_palindromic_list(q)\n",
        "num_ids": 24
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    q = [1,2,3,4,5,6,7,8]\n    # q = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    # q = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    q.sort()\n    # q = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    q.reverse()\n    # print(q)\n    if q == list(q):\n        for i in range(len(q)):\n            print(q[i], q[i]*2)\n            if q[i]*2 <= w:\n                return True\n    else:\n        return False\n",
        "num_ids": 299
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return False if not is_palindromic(q) or (sum(q) > w) else True\n",
        "num_ids": 27
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if is_palindrome(q):\n        return sum(q) <= w\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(arr) == 1: return 0\n    if len(arr) == 2: return 1\n    \n    # find the longest substring\n    longest_palindrome = ''\n    for i in range(len(arr)):\n        # print(\"i: \" + str(i))\n        for j in range(len(arr)):\n            # print(\"j: \" + str(j))\n            sub_string = arr[i:j+1]\n            if sub_string == sub_string[::-1]:\n                if len(sub_string) > len(longest_palindrome):\n                    longest_palindrome = sub_string\n    \n    # find the smallest change (i.e., how many elements are needed to change to make the array palindromic)\n    left_pointer = 0\n    right_pointer = len(longest_palindrome) - 1\n    \n    # start the changes with the first element\n    changes = 1\n    while left_pointer < right_pointer:\n        # print(\"left_pointer: \" + str(left_pointer) + \", right_pointer: \" + str(right_pointer))\n        # print(\"changes: \" + str(changes))\n        if longest_palindrome[left_pointer] == longest_palindrome[right_pointer]:\n            # print(\"same\")\n            left_pointer += 1\n            right_pointer -= 1\n            changes += 1\n        else:\n            break\n    \n    return changes\n",
        "num_ids": 344
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n = len(arr)\n",
        "num_ids": 9
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    # TODO: Write your code here\n    \n    return len(arr) - max([len(set(arr[i:j])) for i in range(len(arr)) for j in range(i, len(arr))])\n",
        "num_ids": 57
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(arr) == 1:\n        return 0\n    arr = list(arr)\n    arr.sort()\n    changes = 1\n    for i in range(len(arr)):\n        if arr[i]!= arr[-i-1]:\n            changes += 1\n    return changes\n",
        "num_ids": 71
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # convert to list so we can sort\n    arr = list(arr)\n    arr.sort()\n    # this is the set of characters in our final string\n    # we don't need to worry about duplicates in this set, as we're only adding one of each element to our string\n    letters_in_string = set(arr)\n    # initially, the least possible change is the difference in lengths\n    # which is len(letters) - len(string)\n    min_change = len(letters_in_string) - len(arr)\n    # we can't have more than one string which is equal to its reverse\n    # thus, we can remove the smallest item from the set\n    letters_in_string.remove(arr[0])\n    # and then we can see if our new string is equal to its reverse\n    new_string = letters_in_string.pop()\n    # if it is, then we can get rid of the smallest element\n    while new_string in letters_in_string:\n        letters_in_string.remove(new_string)\n        new_string = letters_in_string.pop()\n    # if there's still a set, then there must be more than 1\n    if letters_in_string:\n        min_change += 1\n    return min_change\n",
        "num_ids": 297
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(arr)\n    check = set(arr)\n    for i in range(n):\n        if arr[i]!= i+1:\n            for j in range(n):\n                if arr[j] == i+1:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n            if arr[i] == i+1:\n                return -1\n        else:\n            arr[i] = i+1\n            break\n    return len(arr) - 1\n",
        "num_ids": 125
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Use a dict to store the largest palindrome smaller than a digit\n    # For example, we can store the largest palindrome of 2 as a2, and so on.\n    # We can also add the largest palindrome of 3 as 3.3, and so on.\n    # Finally, when we find a palindrome smaller than the number, we can return it\n    # We can also return 0 if no palindrome is smaller than the number\n    max_palindrome = {}\n",
        "num_ids": 113
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    palindrome = True\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[i-1]:\n            palindrome = False\n            break\n    if palindrome:\n        return 0\n    else:\n        return 1 + smallest_change(arr[:-1])\n",
        "num_ids": 76
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # O(n^2) time | O(1) space\n    # we have a list of n numbers, so in total there are n^2 possible comparisons\n    # keep track of the max number seen so far\n    # then iterate over the array, keeping track of the max\n    # at each iteration, update the max if it's smaller than the new max\n    # if a larger number is found, return the index of the max\n    # this is really O(n) time, O(n) space\n",
        "num_ids": 118
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    arr = sorted(arr)\n    diff_count = 0\n    for i in range(len(arr)):\n        if i < len(arr)-1 and arr[i] == arr[i+1]:\n            diff_count += 1\n        else:\n            break\n    return diff_count\n",
        "num_ids": 70
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1)!= 0 and len(lst2) == 0:\n        return lst1\n    elif len(lst1) == 0 and len(lst2)!= 0:\n        return lst2\n    else:\n        lst3 = []\n        lst4 = []\n        for i in range(len(lst1)):\n            if len(lst1[i]) < len(lst2[i]):\n                lst3.append(lst1[i])\n                lst4.append(lst2[i])\n            else:\n                lst3.append(lst2[i])\n                lst4.append(lst1[i])\n        return lst3 + lst4\n",
        "num_ids": 205
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst2\n",
        "num_ids": 33
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return lst1 if len(lst1) > len(lst2) else lst2\n    # O(len(lst1) + len(lst2))\n    \nprint(total_match([], []))\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))\n",
        "num_ids": 131
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "num_ids": 25
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res=[]\n    for i in lst1:\n        if len(i)>len(lst2):\n            break\n        if len(i)==len(lst2):\n            res.append(i)\n    return res\n",
        "num_ids": 58
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # first way\n",
        "num_ids": 6
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return lst1 if len(lst1)<len(lst2) else lst2\n",
        "num_ids": 25
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst2\n    else:\n        return lst1\n",
        "num_ids": 56
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lst = []\n    for i in range(len(lst1)):\n        if len(lst1[i]) < len(lst2[i]):\n            lst.append(lst1[i])\n    return lst\n",
        "num_ids": 60
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "num_ids": 25
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    prime = 1\n    c = 3\n    while prime < a:\n        if a % prime == 0:\n            return False\n        else:\n            prime += 1\n    return True\n    # you can write your code inside the while loop\n",
        "num_ids": 56
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    primes = [2,3,5,7,11,13,17]\n    if a == 0:\n        return False\n    for p in primes:\n        while a % p == 0:\n            a = a/p\n            if p == 13:\n                return True\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n = 0\n    a = int(a)\n    if a < 100:\n        return False\n    else:\n        while a > 0:\n            n += 1\n            if n % 2 == 0:\n                continue\n            elif is_prime(n) == True:\n                if a % n == 0:\n                    return True\n                else:\n                    continue\n            else:\n                continue\n    return False\n",
        "num_ids": 97
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    for i in range(2,100):\n        if a%i == 0:\n            if i*3 in range(2,100) and i*5 in range(2,100):\n                return True\n            else:\n                return False\n            \n                \n",
        "num_ids": 63
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a < 100:\n        for i in range(2, 5):\n            if a % i == 0:\n                return False\n        else:\n            return True\n",
        "num_ids": 40
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    p = 3\n    q = 5\n    while True:\n        r = a / p\n        if (r == a / p):\n            return True\n        if r!= a / p:\n            p += 2\n            q += 2\n            if q > 100:\n                return False\n",
        "num_ids": 68
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    p1 = 2\n    p2 = 3\n    p3 = 5\n    while p1 < 100:\n        if (a % p1 == 0) and (a % p2 == 0) and (a % p3 == 0):\n            return True\n        p1 += 1\n        p2 += 1\n        p3 += 1\n    return False\n",
        "num_ids": 82
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    primes = get_primes()\n",
        "num_ids": 11
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(1, 99):\n        if a % i == 0:\n            return False\n        elif a % (i + 2) == 0:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    primes = []\n    for i in range(1,100):\n        if is_prime(i):\n            primes.append(i)\n    for i in range(len(primes)):\n        for j in range(len(primes)):\n            if i!= j:\n                if primes[i] * primes[j] == a:\n                    return True\n    return False\n",
        "num_ids": 95
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n < 0:\n        return False\n    return x ** int(1 / n) == x\n",
        "num_ids": 25
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #return n**int == x\n    return (n**int) == x\n    pass\n",
        "num_ids": 23
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if x == 1:\n        return True\n    if x == n:\n        return False\n    elif x % n == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return n**int(x)==x\n    \n",
        "num_ids": 14
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (x**int(n))==x\n",
        "num_ids": 13
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return True if n**x == x else False\n",
        "num_ids": 13
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return n**int(x)==x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x**int(n) == x",
        "num_ids": 11
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x**(1/n)==int(x**(1/n))\n",
        "num_ids": 21
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n < 1:\n        raise ValueError\n    return x**(1/n) == n\n",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return a * a * a == a\n    \ndef is_palindrome(a):\n    '''\n    Write a function that takes a nonnegative integer a and returns True\n    if a is a palindrome, and False otherwise.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_palindrome(121) ==> True\n    is_palindrome(212) ==> False\n    is_palindrome(10) ==> True\n    is_palindrome(11) ==> False\n    is_palindrome(1) ==> True\n    is_palindrome(0) ==> True\n    is_palindrome(12) ==> False\n    is_palindrome(-1) ==> False\n    '''\n    return str(a) == str(a)[::-1]\n    \ndef is_leap_year(a):\n    '''\n    Write a function that takes a nonnegative integer and returns True\n    if a is a leap year, and False otherwise.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_leap_year(0) ==> False\n    is_leap_year(1) ==> False\n    is_leap_year(4) ==> True\n    is_leap_year(100) ==> False\n    is_leap_year(1234) ==> True\n    is_leap_year(400) ==> False\n    is_leap_year(2000) ==> True\n    is_leap_year(3000) ==> False\n    '''\n    return (a % 4 == 0 and a % 100!= 0) or (a % 400 == 0)\n    \ndef is_prime(a):\n    '''\n    Write a function that takes a nonnegative integer a and returns True\n    if a is a prime number, and False otherwise.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_prime(1) ==> False\n    is_prime(2) ==> True\n    is_prime(4) ==> False\n    is_prime(11) ==> True\n    is_prime(26) ==> True\n    is_prime(29) ==> False\n    is_prime(31) ==> False\n    is_prime(100) ==> False\n    '''\n    if a == 0:\n        return False\n    elif a == 1:\n        return False\n    else:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    \ndef is_perfect_square(a):\n    '''\n    Write a function that takes an integer a and returns True\n    if a is a perfect square, and False otherwise.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_perfect_square(1) ==> False\n    is_perfect_square(9) ==> True\n    is_perfect_square(100) ==> False\n    is_perfect_square(121) ==> True\n    '''\n    if a == 0:\n        return False\n    else:\n        if a == 1:\n            return True\n        else:\n            if a % (a//2) == 0:\n                return True\n            else:\n                return False\n",
        "num_ids": 776
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return abs(a**3 - a) < 10**-9\n",
        "num_ids": 17
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return (a**3 == a)\n",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a**3 == a:\n        return True\n    else:\n        return False\n        \ndef ispentagonal(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a pentagonal number.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispentagonal(1) ==> True\n    ispentagonal(2) ==> False\n    ispentagonal(0) ==> False\n    ispentagonal(5) ==> True\n    ispentagonal(11) ==> False\n    '''\n    if (a**2+a+1)**2 == a*(a+1):\n        return True\n    else:\n        return False\n        \ndef isnotpentagonal(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is not a pentagonal number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isnotpentagonal(1) ==> True\n    isnotpentagonal(2) ==> False\n    isnotpentagonal(0) ==> True\n    isnotpentagonal(5) ==> False\n    isnotpentagonal(11) ==> True\n    '''\n    if (a**2-a+1)**2 == a*(a+1):\n        return True\n    else:\n        return False\n        \ndef isnothexagonal(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is not hexagonal.\n    Note: you may assume the input is always valid.\n    Examples:\n    isnothexagonal(1) ==> True\n    isnothexagonal(2) ==> False\n    isnothexagonal(0) ==> False\n    isnothexagonal(5) ==> True\n    isnothexagonal(11) ==> False\n    '''\n    if a**2!= a*(a+1):\n        return True\n    else:\n        return False\n        \ndef isqrtratio(a,b):\n    '''\n    Write a function that takes 2 integer numbers a and b \n    and returns True if a/b is an integer rational number, \n    false otherwise.\n    Note: you may assume the input numbers are valid.\n    Examples:\n    isqrtratio(1,1) ==> True\n    isqrtratio(1,2) ==> False\n    isqrtratio(2,2) ==> True\n    isqrtratio(1,3) ==> False\n    isqrtratio(3,1) ==> False\n    '''\n    if a/b == a//b:\n        return True\n    else:\n        return False\n        \ndef issqrtratio(a,b):\n    '''\n    Write a function that takes 2 integer numbers a and b \n    and returns True if a/b is an integer rational number, \n    false otherwise.\n    Note: you may assume the input numbers are valid.\n    Examples:\n    issqrtratio(1,1) ==> True\n    issqrtratio(1,2) ==> True\n    issqrtratio(2,2) ==> True\n    issqrtratio(1,3) ==> False\n    issqrtratio(3,1) ==> False\n    '''\n    if a/b == a//b:\n        return True\n    else:\n        return False\n        \ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a prime number.\n    Note: you may assume the input numbers are valid.\n    Examples:\n    isprime(1) ==> True\n    isprime(2) ==> False\n    isprime(3) ==> False\n    isprime(4) ==> False\n    isprime(5) ==> True\n    isprime(6) ==> False\n    '''\n    if a <= 1:\n        return False\n    elif a <= 3:\n        return True\n    else:\n        for i in range(2, a-1):\n            if a%i == 0:\n                return False\n        return True\n        \ndef iscomposite(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if thi",
        "num_ids": 1026
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return a**3 == a**2\n",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return a**3==1\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(1, a+1):\n        if a ** 3 == a**3:\n            print(\"True\")\n            break\n        else:\n            print(\"False\")\n            break\n",
        "num_ids": 47
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert(a>0)\n    b = a**(1/3)\n    if b-int(b)==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return a**3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a ** (1/3) == int(a ** (1/3))\n",
        "num_ids": 21
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    d = {\n        2:0,\n        3:0,\n        5:0,\n        7:0,\n        11:0,\n        13:0\n    }\n    for i in num:\n        if i not in d:\n            continue\n        if i.upper() in \"AB\":\n            d[2] += 1\n        elif i.upper() in \"CD\":\n            d[3] += 1\n        elif i.upper() in \"EF\":\n            d[5] += 1\n        elif i.upper() in \"GH\":\n            d[7] += 1\n        elif i.upper() in \"IJ\":\n            d[11] += 1\n        elif i.upper() in \"KL\":\n            d[13] += 1\n    return sum([d[2],d[3],d[5],d[7],d[11],d[13]])\n",
        "num_ids": 212
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    d = {\"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0,\n        \"8\": 0, \"9\": 0, \"A\": 0, \"B\": 0, \"C\": 0, \"D\": 0, \"E\": 0, \"F\": 0}\n    num = num.upper()\n    if num == \"\":\n        return 0\n    for i in range(len(num)):\n        if num[i] in d:\n            d[num[i]] += 1\n    return d[\"2\"] + d[\"3\"] + d[\"5\"] + d[\"7\"] + d[\"8\"] + d[\"9\"] + d[\"A\"] + d[\"B\"] + d[\"C\"] + d[\"D\"] + d[\"E\"] + d[\"F\"]\n",
        "num_ids": 200
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    digit_count = 0\n    for i in num:\n        if i.isdigit() and int(i) % 2 == 0:\n            digit_count += 1\n    return digit_count\n",
        "num_ids": 49
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(set(num.upper())) - 2",
        "num_ids": 14
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # return len(re.findall(r'\\d', num))\n    return sum([int(i) in [2, 3, 5, 7] for i in num])\n",
        "num_ids": 43
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    num = num.upper()\n    count = 0\n    for char in num:\n        if int(char) > 0 and int(char) < 10:\n            count += 1\n        elif int(char) > 10 and int(char) < 27:\n            count += 1\n        elif int(char) > 26 and int(char) < 67:\n            count += 1\n        elif int(char) > 66 and int(char) < 91:\n            count += 1\n        elif int(char) > 80 and int(char) < 103:\n            count += 1\n        elif int(char) > 96 and int(char) < 107:\n            count += 1\n    return count\n",
        "num_ids": 162
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not num:\n        return 0\n",
        "num_ids": 11
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    hex_str = num.upper()\n    prim_str = \"\"\n    for i in range(len(hex_str)):\n        if hex_str[i] == \"B\":\n            prim_str = prim_str + \"11\"\n        elif hex_str[i] == \"D\":\n            prim_str = prim_str + \"13\"\n        elif hex_str[i] == \"0\":\n            prim_str = prim_str + \"10\"\n        elif hex_str[i] == \"9\":\n            prim_str = prim_str + \"9\"\n        elif hex_str[i] == \"A\":\n            prim_str = prim_str + \"17\"\n        elif hex_str[i] == \"C\":\n            prim_str = prim_str + \"C\"\n        elif hex_str[i] == \"E\":\n            prim_str = prim_str + \"1\"\n        elif hex_str[i] == \"F\":\n            prim_str = prim_str + \"0\"\n        else:\n            prim_str = prim_str + str(hex_str[i])\n    num_1 = prim_str.count(\"1\")\n    num_2 = prim_str.count(\"2\")\n    num_3 = prim_str.count(\"3\")\n    num_4 = prim_str.count(\"4\")\n    num_5 = prim_str.count(\"5\")\n    num_6 = prim_str.count(\"6\")\n    num_7 = prim_str.count(\"7\")\n    num_8 = prim_str.count(\"8\")\n    num_9 = prim_str.count(\"9\")\n    num_10 = prim_str.count(\"10\")\n    num_11 = prim_str.count(\"11\")\n    num_12 = prim_str.count(\"12\")\n    num_13 = prim_str.count(\"13\")\n    num_14 = prim_str.count(\"14\")\n    num_15 = prim_str.count(\"15\")\n    num_16 = prim_str.count(\"16\")\n    num_17 = prim_str.count(\"17\")\n    num_18 = prim_str.count(\"18\")\n    num_19 = prim_str.count(\"19\")\n    num_20 = prim_str.count(\"20\")\n    num_21 = prim_str.count(\"21\")\n    num_22 = prim_str.count(\"22\")\n    num_23 = prim_str.count(\"23\")\n    num_24 = prim_str.count(\"24\")\n    num_25 = prim_str.count(\"25\")\n    num_26 = prim_str.count(\"26\")\n    num_27 = prim_str.count(\"27\")\n    num_28 = prim_str.count(\"28\")\n    num_29 = prim_str.count(\"29\")\n    num_30 = prim_str.count(\"30\")\n    num_31 = prim_str.count(\"31\")\n    num_32 = prim_str.count(\"32\")\n    num_33 = prim_str.count(\"33\")\n    num_34 = prim_str.count(\"34\")\n    num_35 = prim_str.count(\"35\")\n    num_36 = prim_str.count(\"36\")\n    num_37 = prim_str.count(\"37\")\n    num_38 = prim_str.count(\"38\")\n    num_39 = prim_str.count(\"39\")\n    num_40 = prim_str.count(\"40\")\n    num_41 = prim_str.count(\"41\")\n    num_42 = prim_str.count(\"42\")\n    num_43 = prim_str.count(\"43\")\n    num_44 = prim_str.count(\"44\")\n    num_45 = prim_str.count(\"45\")\n    num_46 = prim_str.count(\"46\")\n    num_47 = prim_str.count(\"47\")\n    num_48 = prim_str.count(\"48\")\n    num_49 = prim_str.count(\"49\")\n    num_50 = prim_str.count(\"50\")\n    num_51 = prim_str.count(\"51\")\n    num_52 = prim_str.count(\"52\")\n    num_53 = prim_str.count(\"53\")\n    num_54 = prim_str.count(\"54\")",
        "num_ids": 1024
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    num = num.upper()\n    a = 0\n    for x in num:\n        if x == \"B\":\n            a += 1\n        elif x == \"D\":\n            a += 2\n        elif x == \"E\":\n            a += 3\n        elif x == \"F\":\n            a += 4\n        elif x == \"A\":\n            a += 5\n        elif x == \"C\":\n            a += 6\n        elif x == \"D\":\n            a += 7\n        elif x == \"E\":\n            a += 8\n        elif x == \"F\":\n            a += 9\n        else:\n            a += 10\n    return a\n",
        "num_ids": 159
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #h = int(num,16)\n    #a = int(num,16)\n    h = int(num,16)\n    if num == '':\n        return 0\n    if is_prime(h):\n        return 1\n    else:\n        return 2\n",
        "num_ids": 65
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"db\" + \"\".join([str(int(i)) for i in decimal_to_binary_helper(decimal)]) + \"db\"\n",
        "num_ids": 38
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"db\" + \"\".join([str(int(x)) for x in decimal_to_binary(decimal)])\n",
        "num_ids": 31
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"db\" + \"\".join(map(lambda x: \"0\" if x == 0 else \"1\", reversed(bin(decimal)[2:]))) + \"db\"\n",
        "num_ids": 42
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if isinstance(decimal, int):\n        return f\"{'db' * (int(decimal) > 1)}{'0' * int(decimal)}db\"\n    else:\n        raise Exception(\"Input should be an integer\")\n",
        "num_ids": 58
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if isinstance(decimal, int):\n        binary = bin(decimal)[2:]\n        return \"db\" + binary + \"db\"\n",
        "num_ids": 35
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"db\" + \"\".join(map(lambda x: str(int(x)), list(bin(decimal)[2:])))\n",
        "num_ids": 33
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    print('The function must return a string')\n    pass\n",
        "num_ids": 15
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #1. Create a new string variable to store the string\n    binary = ''\n    #2. Check if the input parameter is negative or not. If the parameter is negative, raise an error\n    if decimal < 0:\n        raise ValueError(\"Decimal must be positive\")\n",
        "num_ids": 63
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"db\" + \"\".join(bin(i)[2:].zfill(8) for i in decimal)\n",
        "num_ids": 29
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return 'db' + '0' * (decimal - 2) + '1'\n",
        "num_ids": 22
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = s.lower()\n    if len(s) <= 2:\n        return True\n    seen = set()\n    for i in range(len(s)-2):\n        if s[i] in seen:\n            return False\n        else:\n            seen.add(s[i])\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(0, len(s)-2):\n        if s[i] == s[i+1]:\n            if s[i+1] == s[i+2]:\n                return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Your code here\n    if len(s) < 3:\n        return False\n    c = s[0]\n    count = 1\n    for i in range(1, len(s)):\n        if c == s[i]:\n            count += 1\n        else:\n            count = 1\n            c = s[i]\n    return count >= 3\n",
        "num_ids": 85
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    while len(s) >= 3:\n        if not s[0].isdigit() or not s[1].isdigit() or not s[2].isdigit():\n            return False\n        if s[0] == s[1] == s[2]:\n            return False\n        s = s[1:]\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return any(all(a!= b and a!= c and b!= c, s) for a, b, c in zip(s, s[1:], s[2:]))",
        "num_ids": 45
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    dict = {}\n    for letter in s:\n        if letter not in dict:\n            dict[letter] = 1\n        else:\n            dict[letter] += 1\n    for letter in dict:\n        if dict[letter]!= 1:\n            return False\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # state, keep track of the letter\n    # letter, let's keep track of the state\n    # \"abcd\" => \"a\" => \"c\" => \"d\" => \"b\" => \"c\"\n    # \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\"\n    # \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a\" => \"a",
        "num_ids": 1024
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    curr = s[0]\n    while len(s) > 1:\n        if s[1]!= curr:\n            return False\n        curr = s[0]\n        s = s[1:]\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count_e = 0\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            count_e += 1\n            if count_e == 2:\n                return True\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    letter_grades = []\n    for grade in grades:\n        if grade < 3.0:\n            letter_grades.append('F')\n        elif grade < 3.3:\n            letter_grades.append('D')\n        elif grade < 3.7:\n            letter_grades.append('C')\n        elif grade < 3.9:\n            letter_grades.append('B')\n        elif grade < 4.0:\n            letter_grades.append('A')\n    return letter_grades\n",
        "num_ids": 120
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    gpa_list = []\n    for x in range(len(grades)):\n        if grades[x] >= 3.3:\n            gpa_list.append(\"A\")\n        elif grades[x] >= 3.0:\n            gpa_list.append(\"B\")\n        elif grades[x] >= 2.7:\n            gpa_list.append(\"C\")\n        elif grades[x] >= 2.0:\n            gpa_list.append(\"D\")\n        elif grades[x] >= 1.7:\n            gpa_list.append(\"E\")\n    return gpa_list\n",
        "num_ids": 147
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    grades.sort(reverse=True)\n    gpa = []\n    for i in range(0, len(grades)):\n        gpa.append((grades[i]/4.0)*100)\n    return gpa\n",
        "num_ids": 54
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    letter_grades = []\n    for grade in grades:\n        if grade >= 3.7:\n            letter_grades.append('A+')\n        elif grade >= 3.3:\n            letter_grades.append('A')\n        elif grade >= 3.0:\n            letter_grades.append('A-')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n    \n",
        "num_ids": 263
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code goes here\n    grade_equation = ['A+', 'B', 'C-', 'C', 'A-']\n    return grade_equation\n",
        "num_ids": 40
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    grades_list = []\n    for grade in grades:\n        if grade >= 3.3:\n            grades_list.append('A+')\n        elif grade >= 3.0:\n            grades_list.append('A')\n        elif grade >= 2.7:\n            grades_list.append('B+')\n        elif grade >= 2.3:\n            grades_list.append('B')\n        elif grade >= 2.0:\n            grades_list.append('B-')\n        elif grade >= 1.7:\n            grades_list.append('C+')\n        elif grade >= 1.3:\n            grades_list.append('C')\n        elif grade >= 0.7:\n            grades_list.append('C-')\n        elif grade >= 0.3:\n            grades_list.append('D+')\n        elif grade >= 0.0:\n            grades_list.append('D')\n        elif grade <= 0.3:\n            grades_list.append('D-')\n        else:\n            grades_list.append('E')\n    return grades_list\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
        "num_ids": 288
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # pylint: disable=line-too-long\n    letter_grade = []\n    for grade in grades:\n        if grade < 4.0:\n            letter_grade.append('E')\n        elif grade >= 4.0 and grade <= 3.7:\n            letter_grade.append('A+')\n        elif grade >= 3.8 and grade <= 3.3:\n            letter_grade.append('A')\n        elif grade >= 3.4 and grade <= 3.0:\n            letter_grade.append('A-')\n        elif grade >= 2.7 and grade <= 2.3:\n            letter_grade.append('B+')\n        elif grade >= 2.4 and grade <= 2.0:\n            letter_grade.append('B')\n        elif grade >= 1.7 and grade <= 1.3:\n            letter_grade.append('B-')\n        elif grade >= 0.7 and grade <= 0.0:\n            letter_grade.append('C+')\n        elif grade >= 0.3 and grade <= 0.0:\n            letter_grade.append('C')\n        elif grade >= 0.0 and grade <= 0.3:\n            letter_grade.append('C-')\n        elif grade >= -0.3 and grade <= -0.0:\n            letter_grade.append('D+')\n        elif grade >= -0.3 and grade <= -0.0:\n            letter_grade.append('D')\n        elif grade >= -1.0 and grade <= -0.3:\n            letter_grade.append('D-')\n",
        "num_ids": 374
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = []\n    for item in grades:\n        if item >= 4.0:\n            result.append('A+')\n        elif item >= 3.7:\n            result.append('A')\n        elif item >= 3.3:\n            result.append('A-')\n        elif item >= 3.0:\n            result.append('B+')\n        elif item >= 2.7:\n            result.append('B')\n        elif item >= 2.3:\n            result.append('B-')\n        elif item >= 2.0:\n            result.append('C+')\n        elif item >= 1.7:\n            result.append('C')\n        elif item >= 1.3:\n            result.append('C-')\n        elif item >= 1.0:\n            result.append('D+')\n        elif item >= 0.7:\n            result.append('D')\n        elif item >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n",
        "num_ids": 248
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # A prime number is that it is only divisible by 1 and itself. So we\n    # need to check to see if the total number of characters in the string is\n    # divisible by itself.\n    \n    # We can use the modulus operator to do this. The modulo operator takes\n    # two inputs, the first one is the string we want to check and the second\n    # is the divisor. The divisor is basically the number that we are checking\n    # for. So the formula is string % divisor.\n    \n    # If the division between the length of the string and the divisor\n    # is 1 then the string is prime.\n    \n    # Now we can also do the same thing but we need to check to see if the\n    # divisor is less than the length of the string. If that is the case then\n    # the string is prime.\n    \n    # We need to make sure that we are not checking a string that we know will\n    # not be a prime.\n    \n    if len(string) <= 1:\n        return False\n    \n    # Now check to see if the divisor is less than the length of the string\n    # we are checking. If it is less than the length of the string we know\n    # the string is not prime.\n    if string[0] == string[-1]:\n        return False\n    \n    # Now we need to check if the divisor is less than the length of the\n    # string. If it is less than the length of the string we know the string\n    # is not prime.\n    if string[0]!= string[-1]:\n        return False\n    \n    # Now we have to check to see if the divisor is not at the end of the\n    # string. If it is not at the end of the string we know the string is not\n    # prime.\n    if len(string) > 2:\n        for i in range(2, len(string)):\n            if string[0]!= string[-1]:\n                return False\n    return True",
        "num_ids": 479
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(string) == 2:\n        return True\n    elif len(string) > 2:\n        for i in range(2, len(string)):\n            if len(string) % i == 0:\n                return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(2, int(len(string)/2)):\n        if string[:i] == string[i:2*i]:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    string = str(string)\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return True\n    else:\n        for i in range(2, len(string)):\n            if (len(string) % i == 0) and (string.find('0') == -1):\n                return False\n        return True\n",
        "num_ids": 88
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # if len(string) == 0:\n    #     return False\n    # elif len(string) == 1:\n    #     return False\n    # else:\n    #     for i in range(2, int(len(string) **.5)+1):\n    #         if len(string) % i == 0:\n    #             return False\n    #     else:\n    #         return True\n    \n    if len(string) == 0:\n        return False\n    elif len(string) == 1:\n        return False\n    else:\n        for i in range(2, int(len(string) **.5)+1):\n            if len(string) % i == 0:\n                return False\n        else:\n            return True\n",
        "num_ids": 176
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    i = 0\n    for letter in string:\n        i += 1\n        if i % 2 == 0:\n            i = 0\n            continue\n        elif i % 2 == 1:\n            return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(string) == 2:\n        return True\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #return len(string) in range(2, 9)\n    prime_numbers = ['2', '3', '5', '7']\n    for i in range(2, 5):\n        if int(string[i]) in prime_numbers:\n            return True\n    return False\n",
        "num_ids": 69
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # your code here\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    try:\n        if len(string) == 1:\n            return False\n        else:\n            if int(string) < 2:\n                return False\n            for i in range(2, int(string)):\n                if int(string) % i == 0:\n                    return False\n            return True\n    except ValueError:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    else:\n        cnt = 0\n        for i in range(1, n):\n            if i == 2 and n == 3:\n                print(i)\n            if n == 2 and i == 1:\n                print(i)\n            cnt += int(str(i)[0]) + int(str(i)[-1])\n        return cnt\n    \n    \ndef count_digits(n):\n    \"\"\"\n    Given a positive integer n, return the count of the digits in n.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 + count_digits(n//10)\n    \n    \ndef count_divisible_by_3(n):\n    \"\"\"\n    Given a positive integer n, return the count of the positive integers that \n    are divisible by 3 and are less than or equal to n.\n    \"\"\"\n    if n < 3:\n        return 0\n    else:\n        return count_divisible_by_3(n//3) + 1\n    \n    \ndef count_divisible_by_3(n):\n    \"\"\"\n    Given a positive integer n, return the count of the positive integers that\n    are divisible by 3 and are less than or equal to n.\n    \"\"\"\n    if n < 3:\n        return 0\n    else:\n        return count_divisible_by_3(n//3) + 1 + count_divisible_by_3(n//3)\n    \n    \ndef count_divisible_by_3(n):\n    \"\"\"\n    Given a positive integer n, return the count of the positive integers that\n    are divisible by 3 and are less than or equal to n.\n    \"\"\"\n    if n < 3:\n        return 0\n    else:\n        return count_divisible_by_3(n//3) + 1 + count_divisible_by_3(n//3)\n    \n    \ndef count_divisible_by_3(n):\n    \"\"\"\n    Given a positive integer n, return the count of the positive integers that\n    are divisible by 3 and are less than or equal to n.\n    \"\"\"\n    if n < 3:\n        return 0\n    else:\n        return count_divisible_by_3(n//3) + 1 + count_divisible_by_3(n//3)\n    \n    \ndef count_divisible_by_3(n):\n    \"\"\"\n    Given a positive integer n, return the count of the positive integers that\n    are divisible by 3 and are less than or equal to n.\n    \"\"\"\n    if n < 3:\n        return 0\n    else:\n        return count_divisible_by_3(n//3) + 1 + count_divisible_by_3(n//3)\n    \n    \ndef count_divisible_by_3(n):\n    \"\"\"\n    Given a positive integer n, return the count of the positive integers that\n    are divisible by 3 and are less than or equal to n.\n    \"\"\"\n    if n < 3:\n        return 0\n    else:\n        return count_divisible_by_3(n//3) + 1 + count_divisible_by_3(n//3)\n    \n    \ndef count_divisible_by_3(n):\n    \"\"\"\n    Given a positive integer n, return the count of the positive integers that\n    are divisible by 3 and are less than or equal to n.\n    \"\"\"\n    if n < 3:\n        return 0\n    else:\n        return count_divisible_by_3(n//3) + 1 + count_divisible_by_3(n//3)\n    \n    \ndef count_divisible_by_3(n):\n    \"\"\"\n    Given a positive integer n, return the count of the positive integers that\n    are divisible by 3 and are less than or equal to n.\n    \"\"\"\n    if n < 3:\n        return 0\n    else:\n        return count_divisible_by_3(n//3) + 1 + count_divisible_by_3(n//3)\n    \n    \ndef count_divisible_by_3(n):\n    \"\"\"\n    Given a positive integer n, return the count of the positive integers that\n    are divisible by 3 and are less than or equal to n.\n    \"\"\"\n    if n < 3:",
        "num_ids": 1024
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def count_seq(n, seq):\n        if n == 1:\n            return seq.count(1)\n        else:\n            return count_seq(n-1, str(seq)) + count_seq(n-1, seq + str(n))\n",
        "num_ids": 62
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 1:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # we can see that the answer can be reduced to the count of the\n    # numbers with 1 at the beginning and 1 at the end,\n    # plus the number of ones at the start and end\n",
        "num_ids": 46
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count_1 = 0\n    count_2 = 0\n",
        "num_ids": 15
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # the number of times 1 appears in n-1 digits\n    # the number of times 1 appears in the next n digits\n    # the total number of 1s that appear in the next n digits\n    # for each n, add the number of 1s that appear after that n-digit number\n    # return the sum of these numbers\n    return n-1 + n - 2 + (n-2)\n",
        "num_ids": 91
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1, n):\n        if check_one(i):\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(1, 10**(n-1)):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(1, n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    binary_string = format(N, \"b\")\n    return sum([int(i) for i in binary_string])\n",
        "num_ids": 32
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Return the value of the sum of the digits in N in binary\n    return str(N)",
        "num_ids": 23
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if N == 0:\n        return '0'\n    if N == 1:\n        return '1'\n    \n    total = 0\n    binary = bin(N)[2:]\n    \n    for i in binary:\n        total += int(i)\n    \n    return str(total)\n    ",
        "num_ids": 73
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return str(bin(N)).replace('0b','').zfill(8)\n",
        "num_ids": 22
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    return\n",
        "num_ids": 6
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join(f\"{int(d):b}\" for d in str(bin(N))[2:])\n",
        "num_ids": 30
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Calculate the sum of the digits\n    # in a number \n    sum = 0\n    while (N > 0):\n        sum += N % 10\n        N = N//10\n    \n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \n",
        "num_ids": 5
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    # Your code here\n    return ''.join(str(bin(N).replace('0b',''))[::-1])\n",
        "num_ids": 34
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return 0\n    count = 0\n    for i in range(len(lst)):\n        if i%2 == 0:\n            if lst[i]%2 == 0:\n                count += lst[i]\n        else:\n            if lst[i]%2!= 0:\n                count += lst[i]\n    return count\n",
        "num_ids": 96
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            l += lst[i]\n    return l\n",
        "num_ids": 41
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if lst is None or len(lst) == 0:\n        return\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1024
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return lst.pop(0) if lst else 0\n",
        "num_ids": 16
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    i = 0\n    while i < len(lst):\n        if i % 2 == 0:\n            i += 1\n            continue\n        lst.insert(i,lst.pop(i+1))\n        i += 2\n    return lst\n",
        "num_ids": 61
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code goes here\n    return None\n",
        "num_ids": 12
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    even_index = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            if even_index % 2 == 1:\n                lst[even_index] += lst[i]\n            else:\n                even_index += 1\n                lst[even_index] += lst[i]\n        count += 1\n    return count\n",
        "num_ids": 100
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code here\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n",
        "num_ids": 34
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if lst == []:\n        return []\n    odd = []\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            odd.append(lst[i])\n    return odd\n",
        "num_ids": 55
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(0, len(lst)):\n        if lst[i] % 2!= 0 and i % 2 == 1:\n            return lst[i]\n    return None\n",
        "num_ids": 48
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    new_string = \"\"\n    words = s.split()\n    for i in range(len(words)):\n        new_string += chr(97 + (ord(words[i]) - 97))\n    return new_string\n",
        "num_ids": 55
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return''.join(s.split()[::-1])\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    new_word = \"\"\n    for letter in s.split():\n        new_word += chr(ord(letter) - 32)\n    return new_word\n",
        "num_ids": 39
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    words = []\n    new_s = []\n    for i in s.split(' '):\n        words.append(i)\n    for i in sorted(words):\n        new_s.append(i)\n    return''.join(new_s)\n",
        "num_ids": 63
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return''.join(sorted(s.split()))\n",
        "num_ids": 15
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ''.join(sorted(s.split()))\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    words = s.split(' ')\n    words_reversed = []\n    for i in words:\n        word = list(i)\n        word = word[::-1]\n        word = ''.join(word)\n        words_reversed.append(word)\n    words_reversed.sort(key = lambda x: x)\n    return''.join(words_reversed)\n",
        "num_ids": 96
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return''.join(sorted(s.split(), key=lambda x: ord(x)))\n",
        "num_ids": 23
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \" \".join(sorted(s.split()))\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    # You can use zip() function to get the characters, letters of the sentence.\n    # Then sort it alphabetically and join them together with space\n    # or use sorted() function.\n    \n    return \" \".join(sorted(s.split()))\n",
        "num_ids": 62
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    x_idx = 0\n    res = []\n    for row in lst:\n        for i in range(len(row)):\n            if x == row[i]:\n                res.append((x_idx, i))\n        x_idx += 1\n    res.sort(key=lambda x: (x[0], x[1]))\n    res.sort(key=lambda x: (x[0], -x[1]))\n    return res\n",
        "num_ids": 111
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    row = -1\n    res = []\n    for i in range(len(lst)):\n        if lst[i]!= []:\n            if lst[i][0] == x:\n                if row < i:\n                    row = i\n                    res = [(i, j) for j in range(len(lst[i]))]\n                else:\n                    res = [(i, j) for j in range(len(lst[i]) - 1, -1, -1)]\n            else:\n                res = [(i, j) for j in range(len(lst[i]))]\n    return res\n",
        "num_ids": 150
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    row_lst = []\n    if len(lst) == 0:\n        return []\n    row_lst = [(0, i) for i in range(len(lst[0]))]\n    for i in range(len(lst)):\n        for j in range(len(lst[0])):\n            if lst[i][j] == x:\n                row_lst[i] = (i, j)\n    row_lst.sort()\n    row_lst.sort(key = lambda x: x[1], reverse = True)\n    return row_lst\n",
        "num_ids": 144
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not lst:\n        return []\n    if not lst[0]:\n        return []\n    if x < lst[0][0]:\n        return []\n    if x >= lst[-1][0]:\n        return []\n    coords = []\n    for i in range(len(lst)):\n        if lst[i][0] == x:\n            coords += [(i, j) for j in range(len(lst[i])-1, -1, -1)]\n    coords = sorted(coords, key=lambda x: (x[0], x[1]))\n    return sorted(coords, key=lambda x: (x[1], x[0]))\n",
        "num_ids": 169
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if not lst:\n        return []\n",
        "num_ids": 14
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    row = []\n    if lst:\n        for r, i in enumerate(lst):\n            if x in i:\n                row.append((r, i.index(x)))\n        row.sort()\n        row.sort(key=lambda row: row[1], reverse=True)\n    return row\n",
        "num_ids": 75
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(sorted(\n        [(i, j) for i, row in enumerate(lst) for j, col in enumerate(row) if col == x], \n        key=lambda x: (x[0], -x[1])))\n",
        "num_ids": 62
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # TODO: Write your code here\n    if lst == [] or x not in range(len(lst)):\n        return []\n",
        "num_ids": 34
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(get_coords(lst, x), key=lambda x: (x[0], -x[1]))\n",
        "num_ids": 32
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if lst == []:\n        return []\n    if lst == [[]]:\n        return []\n    if lst == [[1]]:\n        return [(0, 0)]\n    if lst == [[1, 2, 3, 4, 5, 6]]:\n        return [(0, 0), (1, 5), (1, 1), (2, 4), (2, 2)]\n    return [(x, y) for x, row in enumerate(lst) for y in range(len(row))]\n",
        "num_ids": 121
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # raise NotImplementedError(\"You need to complete this function!\")\n    a = array.copy()\n    a.sort()\n    if sum(a[0],a[-1])%2 == 1:\n        return a[::-1]\n    else:\n        return a\n",
        "num_ids": 69
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # write your code here\n    return sorted(array)\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(array, reverse=sum(array[0], array[-1]) % 2)\n",
        "num_ids": 24
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    array.sort()\n    if sum(array[0], array[-1]) % 2 == 0:\n        array.reverse()\n    return array\n",
        "num_ids": 36
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not array:\n        return array\n",
        "num_ids": 11
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not array: return array\n    i, j = 0, len(array) - 1\n    while i <= j:\n        if array[i] + array[j] == 0:\n            i += 1\n            j -= 1\n        elif array[i] + array[j] < 0:\n            array[i], array[j] = array[j], array[i]\n            i += 1\n            j -= 1\n        else:\n            j -= 1\n    return array\n",
        "num_ids": 113
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(array) < 2: return array\n    for i in range(len(array)):\n        if i == 0:\n            if sum(array[i], array[i+1]) % 2 == 1:\n                if array[i] > array[i+1]:\n                    array[i], array[i+1] = array[i+1], array[i]\n        if i == len(array) - 1:\n            if sum(array[i], array[i-1]) % 2 == 1:\n                if array[i] < array[i-1]:\n                    array[i], array[i-1] = array[i-1], array[i]\n        if i > 0:\n            if sum(array[i], array[i-1]) % 2 == 0:\n                if array[i] < array[i-1]:\n                    array[i], array[i-1] = array[i-1], array[i]\n    return array\n",
        "num_ids": 226
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(array)\n",
        "num_ids": 8
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    array.sort()\n    if array[0] + array[-1] == 0:\n        if sum(array) % 2 == 1:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n    elif array[0] + array[-1] == 1:\n        if sum(array) % 2 == 1:\n            return array\n        else:\n            return sorted(array, reverse=False)\n",
        "num_ids": 105
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    shift = 2\n    out = \"\"\n    for letter in s:\n        index = alphabet.index(letter)\n        if letter in alphabet:\n            if index + shift >= 26:\n                out += alphabet[index - 26]\n            else:\n                out += alphabet[index + shift]\n        else:\n            out += letter\n    return out\n",
        "num_ids": 102
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # create a new dictionary\n    d = {}\n    # create a new list of keys from the alphabet\n    keys = list(string.ascii_lowercase)\n    # create a new list of the value of the keys\n    values = list(string.ascii_lowercase)\n    # loop through each key value pair in the dictionary\n    for k, v in zip(keys, values):\n        # set the value of the key in the dictionary\n        d[k] = v\n    # loop through each letter in the string\n    for letter in s:\n        # if the letter is in the dictionary then encrypt\n        if letter in d.keys():\n            # get the key\n            key = d[letter]\n            # shift by 2\n            key = key[-2:] + key[:-2]\n            # put the new letter into the string\n            s = s.replace(letter, key)\n    return s\n",
        "num_ids": 212
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            result += chr((ord(char) + 2 - 97) % 26 + 97)\n        else:\n            result += char\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_alphabet = alphabet[-2:] + alphabet[:-2]\n    return s.translate(str.maketrans(alphabet, new_alphabet))\n",
        "num_ids": 63
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    s = s.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    cipher = ''\n    for i in range(len(s)):\n        if s[i] in alphabet:\n            ind = alphabet.find(s[i])\n            if ind < 26:\n                ind = ind + 2\n            else:\n                ind = ind - 26\n            cipher = cipher + alphabet[ind]\n        else:\n            cipher = cipher + s[i]\n    return cipher\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument \n    and returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    s = s.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    cipher = ''\n    for i in range(len(s)):\n        if s[i] in alphabet:\n            ind = alphabet.find(s[i])\n            if ind < 26:\n                ind = ind - 2\n            else:\n                ind = ind - 26\n            cipher = cipher + alphabet[ind]\n        else:\n            cipher = cipher + s[i]\n    return cipher\ndef main():\n    print('Welcome to the Caesar Cipher!')\n    mode = input('Press \"e\" to encrypt or \"d\" to decrypt: ')\n    s = input('Enter the message: ')\n    if mode == 'e':\n        print(encrypt(s))\n    elif mode == 'd':\n        print(decrypt(s))\n    else:\n        print('Invalid mode. Please try again.')\n    return\n",
        "num_ids": 476
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert is_string(s),'s must be a string'\n    for c in s:\n        assert is_letter(c), 'c must be a letter'\n    return ''.join([letter * 2 for letter in s])\n",
        "num_ids": 55
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rot_alphabet = alphabet[2:] + alphabet[0:2]\n    def encode(s):\n        return ''.join(rot_alphabet[ord(i)-97] for i in s)\n    return encode(s)\n",
        "num_ids": 77
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return ''.join(list(map(lambda x: alphabet[(alphabet.index(x) + 2) % len(alphabet)], s)))\n",
        "num_ids": 37
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    string = ''\n    for l in s:\n        if l =='':\n            string += l\n        else:\n            string += chr(((ord(l) - 65) + 2) % 26 + 65)\n    return string\n",
        "num_ids": 56
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    lower = list(string.ascii_lowercase)\n    upper = list(string.ascii_uppercase)\n    lower = lower[2:] + lower[:2]\n    upper = upper[2:] + upper[:2]\n    return(lower + upper)\n",
        "num_ids": 68
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not lst:\n        return None\n    if len(lst) == 1:\n        return None\n    smallest = lst[0]\n    for i in range(1,len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest\n",
        "num_ids": 77
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst) == 1:\n        return None\n    l = lst[1:]\n    if l == []:\n        return None\n    l.sort()\n    return l[0]\n",
        "num_ids": 49
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return None\n    \n    start_index = 0\n    end_index = len(lst) - 1\n    \n    while start_index < end_index:\n        if lst[start_index] <= lst[end_index]:\n            start_index += 1\n        else:\n            end_index -= 1\n            \n    return lst[start_index]\n",
        "num_ids": 99
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    if not lst:\n        return None\n    \n    first = 0\n    last = len(lst) - 1\n    while first <= last:\n        mid = first + (last - first) // 2\n        if lst[mid] > lst[last]:\n            first = mid + 1\n        else:\n            last = mid - 1\n    \n    return lst[first] if first < len(lst) - 1 else None\n",
        "num_ids": 106
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    lst.sort()\n    if lst:\n        return lst[1]\n",
        "num_ids": 22
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[1]\n    else:\n        tmp = lst[1]\n        for i in range(2, len(lst)):\n            if lst[i] < tmp:\n                tmp = lst[i]\n        return tmp\n",
        "num_ids": 106
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not lst:\n        return None\n    \n    min_index = 0\n    min_value = lst[0]\n    for index, val in enumerate(lst):\n        if val < min_value:\n            min_value = val\n            min_index = index\n    \n    if min_index == len(lst) - 1:\n        return None\n    else:\n        return lst[min_index + 1]\n",
        "num_ids": 105
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[1]\n",
        "num_ids": 48
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return None\n    smallest = min(lst)\n    return lst[lst.index(smallest) + 1] if smallest!= min(lst) else None\n",
        "num_ids": 54
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not lst:\n        return None\n    if len(lst) <= 2:\n        return min(lst)\n    return min(lst[1:])",
        "num_ids": 41
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    bored = 0\n    for word in S.split():\n        if word[0] == \"I\":\n            bored += 1\n    return bored\n",
        "num_ids": 37
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return S.count('I')\n",
        "num_ids": 10
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # we'll check for the first character in the string\n    # if it's an I, we'll return True\n    return S.startswith('I')\n",
        "num_ids": 38
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(len(S)):\n        if S[i] == 'I':\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    counter = 0\n    for sentence in S.split('.'):\n        if sentence.lower().startswith('i'):\n            counter += 1\n    return counter\n",
        "num_ids": 40
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return S.count('I')\n",
        "num_ids": 10
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return S.count('I')\n",
        "num_ids": 10
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return S.count('I')\n",
        "num_ids": 10
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # how many times does the word 'I' appear\n    return S.count(\"I.\")\n    \n",
        "num_ids": 27
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    S = S.split('.')\n    counter = 0\n    for sentence in S:\n        if sentence[0] == 'I':\n            counter += 1\n    return counter\n    # TODO: Fix this!\n",
        "num_ids": 52
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return (x == (y + z) and (x ** y == x ** z) and (type(x) == type(y) == type(z)))\n",
        "num_ids": 38
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return True if (x+y==z or x+z==y or y+z==x) and x,y,z>=0 and int(x) and int(y) and int(z) else False\n",
        "num_ids": 51
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return x == y + z and type(x) == int and type(y) == int and type(z) == int\n",
        "num_ids": 30
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if type(x)!= int or type(y)!= int or type(z)!= int:\n        return False\n    if x == y + z and x + y == z and x + z == y:\n        return True\n    else:\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int and x!= y!= z:\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if x == y + z or x == z + y or x == y + z or y == x + z or y == z + x or y == z:\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x == y + z and all([type(i) == int for i in (x,y,z)])\ndef any_float(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are floats.\n    Returns false in any other cases.\n    \n    Examples\n    any_float(5, 2, 7) \u279e True\n    \n    any_float(3, 2, 2) \u279e False\n",
        "num_ids": 128
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #  Make a check if all the numbers are integer\n    return (x==y+z) and (type(x)==int) and (type(y)==int) and (type(z)==int)\n",
        "num_ids": 51
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return True if (x == sum(y,z) and all(isinstance(i, int) for i in (x, y, z))) else False\n",
        "num_ids": 37
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    vowels = \"aeiou\"\n    st = \"\"\n    for i in message:\n        if i in vowels:\n            st += vowels[2]\n        else:\n            st += i\n    return st\n",
        "num_ids": 54
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    letter_to_index = {c: i for i, c in enumerate(string.ascii_lowercase)}\n    index_to_letter = {i: c for i, c in enumerate(string.ascii_lowercase)}\n    transformed_message = \"\"\n    for letter in message:\n        if letter.isalpha():\n            transformed_letter = letter_to_index[letter.lower()]\n            second_transformed_letter = letter_to_index[letter.lower()] + 2\n            if letter.isupper():\n                third_transformed_letter = letter_to_index[letter.lower()] + 3\n            else:\n                third_transformed_letter = letter_to_index[letter.lower()] - 2\n            \n            transformed_message += index_to_letter[second_transformed_letter]\n            if letter.isupper():\n                transformed_message += index_to_letter[third_transformed_letter]\n            else:\n                transformed_message += index_to_letter[third_transformed_letter].upper()\n        else:\n            transformed_message += letter\n    return transformed_message\n",
        "num_ids": 272
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return ''.join([vowels[i] if v == message[i] else message[i] for i, v in enumerate(message)])\n",
        "num_ids": 37
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    output = []\n    vowels = \"AEIOU\"\n    \n    for letter in message:\n        if letter in vowels:\n            output.append(2 * vowels[(vowels.index(letter) + 1) % 4])\n        else:\n            output.append(letter)\n    \n    return \"\".join(output)\n    \n",
        "num_ids": 85
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = ''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for letter in message:\n        if letter in alphabet:\n            result += alphabet[alphabet.index(letter)+2]\n            result += alphabet[alphabet.index(letter)-1]\n        else:\n            result += letter\n    return result\n",
        "num_ids": 84
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    encoded = ''\n    for letter in message:\n        if letter in 'aeiouAEIOU':\n            if letter == 'a':\n                letter = 'A'\n            if letter == 'e':\n                letter = 'E'\n            if letter == 'i':\n                letter = 'I'\n            if letter == 'o':\n                letter = 'O'\n            if letter == 'u':\n                letter = 'U'\n        encoded += letter\n    return encoded\n",
        "num_ids": 112
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    new_message = \"\"\n    # Write your function here\n    for letter in message:\n        if letter.upper() in \"AEIOU\":\n            index = ord(letter) - ord('A')\n            new_index = ord(letter) + (2 - index)\n            new_letter = chr(new_index)\n            new_message += new_letter\n        else:\n            new_message += letter\n    return new_message\n",
        "num_ids": 103
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    if not isinstance(message, str):\n        raise ValueError('The message must be a string.')\n    \n    # split the message into the list\n    letter_list = list(message.upper())\n    \n    # check if the message is empty\n    if len(letter_list) == 0:\n        raise ValueError('The message must not be empty.')\n    \n    # add a new string list\n    new_letter_list = []\n    \n    # loop through the letters\n    for i in range(len(letter_list)):\n        \n        # if the letter is not a letter\n        if not is_letter(letter_list[i]):\n            \n            # add it to the new list\n            new_letter_list.append(letter_list[i])\n        \n        # if the letter is a letter\n        else:\n            # if the letter is not in the dictionary\n            if letter_list[i] not in encoding_dict:\n                \n                # add the letter\n                new_letter_list.append(letter_list[i])\n            \n            # if the letter is in the dictionary\n            else:\n                \n                # replace the letter by the letter that is 2 places ahead of that letter\n                letter = letter_list[i]\n                key = encoding_dict[letter]\n                letter = encoding_dict[letter]\n                letter = encoding_dict[letter]\n                letter = encoding_dict[letter]\n                \n                # add the letter to the new list\n                new_letter_list.append(letter)\n    \n    # join the list into a string\n    message = ''.join(new_letter_list)\n    \n    return message\n    \n    \n    \n    \n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message and decodes it. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('THKS KS C MGSSCGG')\n    'test'\n    \"\"\"\n    \n    if not isinstance(message, str):\n        raise ValueError('The message must be a string.')\n    \n    # split the message into the list\n    letter_list = list(message.upper())\n    \n    # check if the message is empty\n    if len(letter_list) == 0:\n        raise ValueError('The message must not be empty.')\n    \n    # add a new string list\n    new_letter_list = []\n    \n    # loop through the letters\n    for i in range(len(letter_list)):\n        \n        # if the letter is not a letter\n        if not is_letter(letter_list[i]):\n            \n            # add it to the new list\n            new_letter_list.append(letter_list[i])\n        \n        # if the letter is a letter\n        else:\n            # if the letter is not in the dictionary\n            if letter_list[i] not in decoding_dict:\n                \n                # add it to the new list\n                new_letter_list.append(letter_list[i])\n            \n            # if the letter is in the dictionary\n            else:\n                \n                # replace the letter by the letter that is 2 places ahead of that letter\n                letter = letter_list[i]\n                key = decoding_dict[letter]\n                letter = decoding_dict[letter]\n                letter = decoding_dict[letter]\n                \n                # add the letter to the new list\n                new_letter_list.append(letter)\n    \n    # join the list into a string\n    message = ''.join(new_letter_list)\n    \n    return message\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1024
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return message.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ''.join([['a','e','i','o','u'] if letter=='a' or letter=='e' or letter=='i' or letter=='o' or letter=='u' else letter for letter in message])\n",
        "num_ids": 56
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    numbers = []\n    for i in lst:\n        num = i\n        nums = []\n        for j in str(num):\n            nums.append(int(j))\n        if any(map(lambda x: x % 2, nums)) == False:\n            numbers.append(num)\n    return sum(max(numbers, key=lambda x: x%10))\n",
        "num_ids": 94
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    lst_copy = lst[:]\n    prime_list = []\n    for i in lst_copy:\n        for j in prime_list:\n            if i%j!= 0:\n                prime_list.append(i)\n                break\n    prime_list.sort(reverse=True)\n    for i in lst_copy:\n        if i%prime_list[0] == 0:\n            return i\n",
        "num_ids": 101
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    lst.sort()\n    i = 0\n    while True:\n        if is_prime(lst[i]):\n            break\n        i += 1\n    j = len(lst) - 1\n    while True:\n        if is_prime(lst[j]):\n            break\n        j -= 1\n    return sum(map(int, str(lst[i]) + str(lst[j])))\n",
        "num_ids": 101
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst = sorted(lst, reverse=True)\n    a = 1\n    for i in lst:\n        a *= i\n    return a\n",
        "num_ids": 38
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # first solution\n    # prime_list = []\n    # for num in lst:\n    #     flag = 0\n    #     for num2 in range(2, int(num**(1/2))+1):\n    #         if num % num2 == 0:\n    #             flag = 1\n    #             break\n    #     if flag == 0:\n    #         prime_list.append(num)\n",
        "num_ids": 99
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    primes = []\n    for i in range(2,len(lst)):\n        if all(lst[j] % i!= 0 for j in range(i,len(lst))):\n            primes.append(i)\n",
        "num_ids": 59
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = 0\n    largest = 0\n    for i in lst:\n        while i > 0:\n            digit = i % 10\n            if largest < digit:\n                largest = digit\n            i = i // 10\n        result += largest\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    primes = []\n    for i in range(2, 1000000):\n        primes.append(True) if i > 2 and all(i % j for j in range(2, i)) else primes.append(False)\n    my_list = lst\n    my_list_index = 0\n    max_digit = -1\n    result = 0\n    while my_list_index < len(my_list):\n        my_list_index += 1\n        if primes[my_list[my_list_index]]:\n            max_digit = my_list[my_list_index]\n            result += my_list[my_list_index]\n        else:\n            result += my_list[my_list_index]\n    return result\n",
        "num_ids": 178
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    import time\n    start = time.time()\n    def prime(n):\n        if n < 2: return False\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n        return True\n    def prime_digits(lst):\n        for i in range(len(lst)):\n            if prime(lst[i]):\n                return True\n        return False\n    sum = 0\n    for i in range(len(lst)):\n        if prime(lst[i]):\n            sum += int(str(lst[i])[0])\n            sum += int(str(lst[i])[1])\n    print(sum)\n    print(time.time() - start)\n",
        "num_ids": 178
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    ans = 0\n    max_prime = 0\n    for i in lst:\n        if prime_check(i):\n            if max_prime == 0 or max_prime < i:\n                max_prime = i\n    \n    for i in lst:\n        if prime_check(i):\n            ans += int(str(i)[len(str(i)) - len(str(max_prime)):])\n    return ans\n",
        "num_ids": 102
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return all(isinstance(x, str) for x in dict.values()) \\\n        and all(isinstance(x, str) for x in dict.keys())\n",
        "num_ids": 40
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not dict:\n        return False\n    else:\n        for key in dict:\n            if not isinstance(key, str):\n                return False\n        for key in dict:\n            if key.isupper():\n                if key.lower()!= key:\n                    return False\n            elif key.islower():\n                if key.upper()!= key:\n                    return False\n            else:\n                return False\n        return True\n",
        "num_ids": 103
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(dict) == 0:\n        return False\n    lower_keys = set()\n    upper_keys = set()\n    for key in dict.keys():\n        if type(key) == str:\n            if key.islower():\n                lower_keys.add(key)\n            else:\n                upper_keys.add(key)\n        else:\n            print(\"Check your dict key type\")\n            return False\n    if len(upper_keys) == 0 and len(lower_keys) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 133
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if dict == {}:\n        return False\n    for i in dict.keys():\n        if not isinstance(i, str):\n            return False\n    for i in dict.keys():\n        if i.isupper():\n            return False\n    for i in dict.keys():\n        if i.islower():\n            return False\n    return True\n",
        "num_ids": 82
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if dict == {}:\n        return False\n    else:\n        for key in dict.keys():\n            if type(key)!= str:\n                return False\n            elif key.islower() == False:\n                return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(dict)!= 0:\n        for k, v in dict.items():\n            if type(k)!= str or type(v)!= str:\n                return False\n            else:\n                if k.isupper() and v.islower():\n                    pass\n                elif k.islower() and v.isupper():\n                    pass\n                else:\n                    return False\n            return True\n    else:\n        return False\n",
        "num_ids": 102
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(dict)==0:\n        return False\n    for k,v in dict.items():\n        if not isinstance(k,str) and not isinstance(v,str):\n            return False\n        if isinstance(k,str):\n            k = k.lower()\n        if isinstance(v,str):\n            v = v.lower()\n        if k!=k.lower() and k!=k.upper():\n            return False\n        if v!=v.lower() and v!=v.upper():\n            return False\n    return True\n    ",
        "num_ids": 135
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(dict) == 0:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return all(type(element)==str and element.islower() for element in dict.values()) or all(type(element)==str and element.isupper() for element in dict.values())\n",
        "num_ids": 47
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    primes = []\n",
        "num_ids": 7
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n    prime_list = []\n    number_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    i = 1\n    while number_list[i-1] <= n:\n        i += 1\n    i = 1\n    while i <= n:\n        prime = True\n        for j in range(2,i):\n            if i % j == 0:\n                prime = False\n                break\n        if prime == True:\n            prime_list.append(i)\n        i += 1\n    return prime_list\n",
        "num_ids": 176
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    numbers = []\n    for number in range(2,n+1):\n        # check if number is prime\n        if prime(number):\n            numbers.append(number)\n    return numbers\n",
        "num_ids": 48
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    my_list = []\n    if n >= 2:\n        my_list.append(2)\n    if n >= 3:\n        my_list.append(3)\n    for i in range(4,n+1):\n        if is_prime(i):\n            my_list.append(i)\n    return my_list\n",
        "num_ids": 80
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    primes = []\n    for i in range(2, n+1):\n        for p in primes:\n            if i % p == 0:\n                break\n        else:\n            primes.append(i)\n    return primes\n",
        "num_ids": 58
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    counts = []\n    if n <= 0:\n        return counts\n    for i in range(2, n):\n        prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                prime = False\n                break\n        if prime == True:\n            counts.append(i)\n    return counts\n",
        "num_ids": 82
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n <= 1:\n        return []\n    primes = find_primes(n)\n    if primes:\n        return primes\n    else:\n        return count_up_to(n - 1)\n",
        "num_ids": 52
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return []\n    if n < 2:\n        return []\n    \n    primes = []\n    for i in range(2,n):\n        for prime in primes:\n            if prime > i and i % prime == 0:\n                break\n        else:\n            primes.append(i)\n",
        "num_ids": 79
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    prime_count = 1\n    primes = [2,3]\n    while prime_count <= n:\n        for p in primes:\n            if prime_count % p == 0:\n                break\n            if prime_count % p!= 0:\n                primes.append(p)\n                prime_count += 1\n                break\n    return primes[:n]",
        "num_ids": 88
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n < 1:\n        return []\n    primes = [2]\n    limit = n // 2\n    # mark numbers that are not prime as not prime (and thus not divisible by any prime)\n    marked = [False] * n\n    while limit > 0:\n        # increment the marked array\n        for i in range(len(primes)):\n            marked[primes[i] - 2] = True\n        # find the next prime number\n        for i in range(len(primes)):\n            if marked[i] is False:\n                primes.append(primes[i] + 2)\n                limit -= 1\n                if limit == 0:\n                    return primes\n    return primes\n",
        "num_ids": 167
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # your code here\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return 10 * (a % 10) * (b % 10)\n",
        "num_ids": 17
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return (int(str(a)[0]) * int(str(b)[0])) + (int(str(a)[1]) * int(str(b)[1]))\n",
        "num_ids": 43
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a_string = str(a)\n    b_string = str(b)\n    a_unit = []\n    for i in a_string:\n        a_unit.append(i)\n    b_unit = []\n    for i in b_string:\n        b_unit.append(i)\n    product = 1\n    for i in range(len(a_unit)):\n        product *= int(a_unit[i])\n    for i in range(len(b_unit)):\n        product *= int(b_unit[i])\n    return product\n",
        "num_ids": 136
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    a = str(a)\n    b = str(b)\n    c = a[::-1]\n    d = b[::-1]\n    e = len(c)\n    f = len(d)\n    while (e < f):\n        c = c + '0'\n        e = e + 1\n    while (f < e):\n        d = d + '0'\n        f = f + 1\n    c = int(c)\n    d = int(d)\n    return c * d\n",
        "num_ids": 123
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    str_a = str(a)\n    str_b = str(b)\n    len_a = len(str_a)\n    len_b = len(str_b)\n    mult = 0\n    for i in range(len_a):\n        mult += int(str_a[i]) * int(str_b[i])\n    return mult\n",
        "num_ids": 101
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = 0\n    while a > 0:\n        digit = a % 10\n        result += digit * b\n        a = a // 10\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return a * b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a > 1000000 or b > 1000000:\n        raise ValueError(\"Invalid Input.\")\n    return (a * b) % 10000\n",
        "num_ids": 33
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a*b\n",
        "num_ids": 7
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    upper = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            upper += 1\n    return upper\n",
        "num_ids": 43
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code here\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n        elif i % 2 == 0:\n            continue\n        else:\n            return count\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    vowels = set('AEIOU')\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    count = 0\n    \n    # Your code here\n    return count\n",
        "num_ids": 20
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U':\n            count += 1\n        \n    return count\n    \n    \n    ",
        "num_ids": 83
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s_even = []\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in VOWELS:\n            s_even.append(s[i])\n    for i in range(0, len(s_even), 2):\n        count += 1\n    return count\n",
        "num_ids": 78
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] == 'A':\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in 'AEIOU':\n            count += 1\n        elif s[i] =='':\n            continue\n        elif i % 2 == 0:\n            continue\n        else:\n            break\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum(c.isupper() for i, c in enumerate(s) if i % 2 == 0)\n",
        "num_ids": 28
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # create a float variable to store the number\n    number = float(value)\n",
        "num_ids": 20
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # just to make it look a little bit nicer\n    # replace this with a more readable solution\n    value = str(value)\n    integer_1 = int(value)\n    integer_2 = integer_1 + 1\n    integer_3 = integer_1 - 1\n    if integer_2 < 10:\n        integer_2 = str(integer_2)\n    elif integer_3 < 10:\n        integer_3 = str(integer_3)\n    else:\n        integer_2 = str(integer_2)\n        integer_3 = str(integer_3)\n    if int(integer_1) == int(integer_2) and int(integer_1)!= 0:\n        return int(integer_1)\n    elif int(integer_1) == int(integer_3) and int(integer_1)!= 0:\n        return int(integer_1)\n    else:\n        return int(integer_2)\n",
        "num_ids": 218
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # error handling\n    try:\n        float(value)\n        # convert value to int\n        value = int(value)\n        if value > 0:\n            # if value is positive\n            if abs(value) < abs(int(value)):\n                # if abs(value) is smaller than abs(int(value))\n                # convert value to int and return value\n                return int(value)\n            else:\n                # else return int(value)\n                return int(value)\n        else:\n            # if value is negative\n            if abs(value) > abs(int(value)):\n                # if abs(value) is bigger than abs(int(value))\n                # convert value to int and return value\n                return int(value)\n            else:\n                # else return int(value)\n                return int(value)\n    except ValueError:\n        # if value is not a number\n        return None\n",
        "num_ids": 213
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return int(round(float(value)))\n",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return int(round(value)) if int(value) == value else int(round(value+0.5)",
        "num_ids": 27
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    try:\n        x = float(value)\n    except ValueError:\n        return \"Not a number.\"\n    x = x*1.0\n",
        "num_ids": 36
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return int(round(value))\n",
        "num_ids": 10
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # you need to be very precise because of rounding\n",
        "num_ids": 13
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if type(value) == str:\n        value = float(value)\n    if int(value) == value:\n        return int(value)\n    elif int(value) - value < 0:\n        return int(value - 1)\n    else:\n        return int(value + 1)\n",
        "num_ids": 71
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return int(value)\n",
        "num_ids": 8
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return_list = []\n    if n <= 1:\n        return_list.append(n)\n    if n == 1:\n        return_list.append(1)\n    if n % 2 == 0:\n        return_list.append(n)\n    if n % 2!= 0:\n        return_list.append(n+1)\n    return return_list\n",
        "num_ids": 89
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [n] + make_a_pile(n - 1) if n % 2 else make_a_pile(n - 2)\n",
        "num_ids": 35
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n % 2 == 0:\n        return list(range(1, n+1))\n    else:\n        return list(range(1, n+1, 2))\n",
        "num_ids": 42
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        result = make_a_pile(n-1)\n        result.append(result[-1] + 1)\n        return result\n",
        "num_ids": 51
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [n] + make_a_pile_helper(n, len(make_a_pile(n)))\n",
        "num_ids": 31
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return make_a_pile(n-2) + make_a_pile(n-1)\n        else:\n            return make_a_pile(n-2) + make_a_pile(n-1) + [1]\n",
        "num_ids": 87
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return [n]\n    if n == 2:\n        return [1, 1]\n    if n == 3:\n        return [2, 1, 1]\n    if n % 2!= 0:\n        return make_a_pile(n-1) + make_a_pile(n-1) + make_a_pile(n-1)\n    return make_a_pile(n-1) + make_a_pile(n-1)\n",
        "num_ids": 120
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n % 2 == 1:\n        return list(range(n, 1, -2))\n    else:\n        return list(range(n, 1, -2)) + list(range(1, n + 1, 2))\n",
        "num_ids": 55
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(range(1, n+1, 2)) if n % 2 == 1 else list(range(2, n+1, 2))\n",
        "num_ids": 35
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n % 2 == 0:\n        return make_a_pile(n + 1) + make_a_pile(n + 2)\n    else:\n        return make_a_pile(n + 1) + make_a_pile(n + 2) + [n]\n",
        "num_ids": 70
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = s.split(\",\")\n    return s\n",
        "num_ids": 15
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    words = s.split(', ')\n    return words\n",
        "num_ids": 16
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    words = s.split(', ')\n    return words\n",
        "num_ids": 16
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    return s.split(', ')\n",
        "num_ids": 13
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return re.split(r',| ', s)\n",
        "num_ids": 14
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    words = s.split(', ')\n    return words\n",
        "num_ids": 16
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    words_list = s.split(', ')\n    return words_list\n",
        "num_ids": 20
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if x > y:\n        return -1\n    if x <= 0 or y <= 0:\n        return -1\n    return choose_num(x + 1, y) + 1 if (x % 2 == 0) else -1\n    \n    # STRETCH: implement this function with a recursive call\n",
        "num_ids": 71
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return max(x, y) - min(x, y)\n",
        "num_ids": 17
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if x > y:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if x > y:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    x = int(x)\n    y = int(y)\n    res = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            res = i\n    return res\n",
        "num_ids": 54
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # YOUR CODE GOES HERE\n    if x < y:\n        return -1\n    if x % 2 == 0 and y % 2 == 0:\n        return x if x < y else y\n    elif x % 2 == 0 and y % 2!= 0:\n        return x\n    else:\n        return y\n        \n",
        "num_ids": 77
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if x % 2!= 0:\n        return -1\n    for num in range(x, y + 1, 2):\n        if num > 0 and num % 2 == 0:\n            return num\n",
        "num_ids": 48
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (x+y)//2 if (x+y)%2==0 else -1\n",
        "num_ids": 24
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    num = x\n    while num <= y:\n        if num % 2 == 0:\n            return num\n        num += 1\n    return -1\n",
        "num_ids": 36
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(x, y+1):\n        if (i%2 == 0):\n            return i\n",
        "num_ids": 28
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n    else:\n        return '0b{}'.format(int(bin(n+m)[2:]).zfill(16))\n",
        "num_ids": 44
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Add your code here\n    if n > m:\n        return -1\n    else:\n        result = int((n+m)/2)\n        rounded_result = str(result).split('.')[0]\n        binary_result = str(rounded_result).zfill(4)\n        return binary_result\n",
        "num_ids": 75
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n    return str(bin(int(sum([i for i in range(n, m+1)])/len([i for i in range(n, m+1)]))).replace('0b', ''))\n",
        "num_ids": 61
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    avg = (n + m) // 2\n    if n > m:\n        avg = -1\n    return str(bin(avg))\n",
        "num_ids": 37
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n > m:\n        return -1\n    return int(bin(round(((n + m) / 2))), 2)\n",
        "num_ids": 33
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n > m:\n        return -1\n    rounded = (n+m)/2\n    rounded = (round(rounded))\n    rounded = int(rounded)\n    rounded = \"{0:#b}\".format(rounded)\n    return rounded\n",
        "num_ids": 58
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if n > m:\n        return -1\n    \n    return \"{0:b}\".format(int(n + (m - n)/2)).zfill(m)",
        "num_ids": 43
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n > m:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert isinstance(n, int) and isinstance(m, int), 'n and m must be integers'\n    assert n <= m, 'n must be less or equal than m'\n    if n > m:\n        return -1\n    elif n == m:\n        return int(n)\n    else:\n        return int(n + 1 + round((m - n) / 2))\n",
        "num_ids": 93
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n > m:\n        return -1\n    return \"{0b}\".format(int(n + (m-n) / 2))\n",
        "num_ids": 35
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(set(x))\n",
        "num_ids": 10
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(set([x for x in x if len(str(x)) % 2 == 0]))\n",
        "num_ids": 26
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # replace this to solve the problem\n    list_of_digits = []\n    for i in x:\n        if len(set(str(i))) == 1:\n            list_of_digits.append(i)\n    list_of_digits.sort()\n    return list_of_digits\n",
        "num_ids": 74
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [x for x in x if x % 2 == 1]\n",
        "num_ids": 17
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code here\n    \n    n = 10\n    d = 0\n    while n <= 10**9:\n        x = map(int, str(n))\n        d = 0\n        for i in x:\n            if i % 2 == 1:\n                d += 1\n                if d > 1:\n                    break\n        if d == 0:\n            return sorted(set(x))\n        n += 1\n    return []\n",
        "num_ids": 101
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # use list comprehension\n    return list(set([int(i) for i in x if i % 10!= 0]))\n    # or list comprehension 2\n    # return sorted([int(i) for i in x if i % 10!= 0])\n",
        "num_ids": 60
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    digits = []\n    for i in x:\n        if not any(i % j == 0 for j in range(2, 9)):\n            digits.append(i)\n    return sorted(digits)\n",
        "num_ids": 52
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # make a copy of x\n    # go through each element\n    # if it has even digits, add it to a list\n    # else, add it to a new list\n    # sort the new list\n    # return the sorted list\n    x = list(x)\n    x_copy = x.copy()\n    for i in range(len(x)):\n        if is_even(x[i]):\n            x_copy.remove(x[i])\n    return x_copy\n",
        "num_ids": 115
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted([i for i in x if i % 2 == 1])\n",
        "num_ids": 18
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    arr.sort()\n    arr.reverse()\n    return ''.join([digit_by_index(i) for i in arr])\n",
        "num_ids": 33
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert arr!= [], \"Empty array\"\n    if len(arr) == 0:\n        return []\n    arr = sorted(arr)\n    arr.reverse()\n    for i in range(len(arr)):\n        if arr[i] <= 9 and arr[i] >= 1:\n            arr[i] = numbers.get_number_by_name(str(arr[i]))\n    return arr\n",
        "num_ids": 98
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # +++your code here+++\n    return\n",
        "num_ids": 12
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(arr, key=lambda x: x if x >= 1 and x <= 9 else None)\n",
        "num_ids": 25
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if arr == []:\n        return []\n",
        "num_ids": 14
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ['{}'.format(number) for number in arr]\n",
        "num_ids": 17
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    # Your code here\n",
        "num_ids": 9
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    arr_reverse = arr.copy()\n    arr_reverse.reverse()\n",
        "num_ids": 19
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return []\n    if arr == None:\n        return None\n    arr.sort()\n    length = len(arr)\n    arr_new = []\n    for i in range(length):\n        if arr[i] in range(10):\n            arr_new.append(arr[i])\n        else:\n            return arr_new\n    \n    arr_new.reverse()\n    arr_new = ['One'] + arr_new + ['Nine']\n    return arr_new\n",
        "num_ids": 123
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return []\n    nums = []\n    for i in range(len(arr)):\n        if (arr[i] >= 1) and (arr[i] <= 9):\n            nums.append(str(arr[i]))\n    nums.sort()\n    nums.reverse()\n    return_list = []\n    for i in range(len(nums)):\n        if len(return_list) < 1:\n            return_list.append(nums[i])\n        else:\n            return_list.append(return_list[-1] + nums[i])\n    return return_list\n",
        "num_ids": 157
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(1,n):\n        result.append(int(math.factorial(i)))\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    list_factorial = []\n    for i in range(1, n+1):\n        if i%2==0:\n            list_factorial.append(i)\n        else:\n            list_factorial.append(i*(i+1))\n    return list_factorial\n",
        "num_ids": 69
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    fact = 1\n    fact_list = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            fact = fact * i\n        else:\n            fact = fact + i\n        fact_list.append(fact)\n    return fact_list\n",
        "num_ids": 69
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(range(1, n + 1)) if n % 2 == 0 else (map(lambda x: x + 1, range(1, n)))\n",
        "num_ids": 37
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n <= 1:\n        return []\n    else:\n        if n % 2 == 0:\n            return [1] + f(n - 1)\n        else:\n            return [1] + sum(f(i) for i in range(1, n + 1))\n    \n",
        "num_ids": 68
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    lst = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            lst.append(i)\n        else:\n            lst.append(int(i*i))\n    return lst\n",
        "num_ids": 60
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i * (i + 1))\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i * (i - 1))\n    return result",
        "num_ids": 56
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(i)\n        else:\n            res += list(range(1, i + 1))\n    return res\n",
        "num_ids": 58
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return (even_num(n) - 1, odd_num(n) - 1)\n",
        "num_ids": 23
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    even_count = even_count = 0\n    odd_count = odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count\n",
        "num_ids": 84
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "num_ids": 66
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    even = 0\n    odd = 0\n",
        "num_ids": 11
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if is_palindrome(i+1):\n                even += 1\n            else:\n                odd += 1\n",
        "num_ids": 62
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def palindrome_at_k(n, k):\n        def count_even_odd_palindrome(n):\n            \"\"\"\n            Counts even and odd integer palindromes within range(1, n)\n            \"\"\"\n            count_even = 0\n            count_odd = 0\n            for i in range(1, n + 1):\n                if str(i) == str(i)[::-1]:\n                    if i % 2 == 0:\n                        count_even += 1\n                    else:\n                        count_odd += 1\n            return count_even, count_odd\n",
        "num_ids": 136
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count_even_palindrome = 0\n    count_odd_palindrome = 0\n",
        "num_ids": 23
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert 1 <= n <= 10**3\n",
        "num_ids": 11
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Solution\n    # Binary search on each power of 2, if we find an odd palindrome, return\n    # the lower one of that power + 1 (2 ^ power), and add to odd counter\n    # similarly, if we find an even palindrome, return the higher one of that\n    # power + 1 (2 ^ power), and add to even counter\n    # return odd + even\n    # time: O(log(n))\n    # space: O(1)\n    low, high = 1, n\n    odd = 0\n    even = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if is_palindrome(mid):\n            if mid % 2 == 0:\n                even = even + 1\n            else:\n                odd = odd + 1\n            low = mid + 1\n        else:\n            high = mid - 1\n    return (even, odd)\n",
        "num_ids": 211
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    numbers_str = str(n)\n    # print(numbers_str)\n    even = 0\n    odd = 0\n    for i in range(len(numbers_str)):\n        if numbers_str[i] == numbers_str[-(i+1)]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "num_ids": 98
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for num in arr:\n        if num < 0 and num >= -10:\n            num = -num\n        if num > 0:\n            count += 1\n    return count\n    \n    \ndef gcd(x, y):\n    \"\"\"\n    Write a function gcd which returns the greatest common divisor of integers.\n    If a number is negative, its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> gcd(123, 456) == 6\n    >>> gcd(123, -456) == 6\n    >>> gcd(-123, 456) == 6\n    >>> gcd(456, -123) == 6\n    \"\"\"\n    if x > y:\n        return gcd(y, x)\n    elif y > x:\n        return gcd(x, y)\n    else:\n        return x\n",
        "num_ids": 214
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not arr:\n        return 0\n    num_count = 0\n    for num in arr:\n        # get sum of num's digits\n        curr_sum = 0\n        while num > 0:\n            curr_sum += num % 10\n            num = num // 10\n        if curr_sum > 0:\n            num_count += 1\n    return num_count\n",
        "num_ids": 89
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Counts the number of numbers which has a sum of digits > 0\n    count = 0\n    for i in range(len(arr)):\n        if sum_of_digits(arr[i]) > 0:\n            count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    return sum(num > 0 for num in arr)\n",
        "num_ids": 16
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for num in arr:\n        if num > 0:\n            num = str(num)\n            for i in num:\n                if int(i) > 0:\n                    count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len([n for n in arr if sum(int(x) for x in str(n)) >= 0])\n",
        "num_ids": 28
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code here\n    \n    i = 0\n    nums = 0\n    while i < len(arr):\n        if (arr[i] < 0):\n            arr[i] = abs(arr[i])\n            j = 0\n            while j < len(str(arr[i])):\n                if (arr[i] - j) % 10 == 0:\n                    nums += 1\n                j += 1\n        else:\n            j = 0\n            while j < len(str(arr[i])):\n                if (arr[i] - j) % 10 == 0:\n                    nums += 1\n                j += 1\n        i += 1\n    return nums\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n",
        "num_ids": 186
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    return sum([len(list(group)) for _, group in groupby(sorted(arr)) if sum(group) > 0])\n",
        "num_ids": 35
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for num in arr:\n        # print(num)\n        if (sum(int(i) for i in str(abs(num)))) > 0:\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(arr)==0:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            break\n        if i==len(arr)-2:\n            arr[i+1], arr[0] = arr[0], arr[i+1]\n            break\n    return arr==sorted(arr)",
        "num_ids": 114
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not arr:\n        return True\n    if len(arr) < 2:\n        return True\n    for _ in range(len(arr)-1):\n        if arr[0] < arr[1]:\n            return False\n        arr = arr[1:] + arr[:1]\n    return True\n    \nif __name__ == \"__main__\":\n    arr = [3, 5, 1, 2]\n    print(move_one_ball(arr))\n    arr = [1, 2, 3, 4]\n    print(move_one_ball(arr)",
        "num_ids": 134
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True if arr[0] == min(arr) else False\n    else:\n        for i in range(len(arr)):\n            if i == 0:\n                if arr[0] > arr[1]:\n                    arr = arr[1:] + arr[:1]\n                    if move_one_ball(arr):\n                        return True\n            elif i == len(arr) - 1:\n                if arr[-1] > arr[-2]:\n                    arr = arr[:-1] + arr[-1:]\n                    if move_one_ball(arr):\n                        return True\n            else:\n                if arr[i] > arr[i + 1]:\n                    arr = arr[i+1:] + arr[:i+1]\n                    if move_one_ball(arr):\n                        return True\n    return False",
        "num_ids": 217
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True if arr[0] == 0 else False\n    if len(arr) == 2:\n        return True if arr[0] == 0 and arr[1] > arr[0] else False\n    if len(arr) == 3:\n        return True if arr[0] == 0 and arr[1] == 0 and arr[2] > arr[0] else False\n    if len(arr) == 4:\n        return True if arr[0] == 0 and arr[1] == 0 and arr[2] == 0 and arr[3] > arr[0] else False\n    # We can use simple approach to solve this problem. We just need to check if\n    # it is possible to make all the elements non-decreasing by performing N-1\n    # right shift operations. If it is possible then return True else return False.\n    # Time Complexity: O(N*N)\n    # Space Complexity: O(1)\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 281
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    \n    curr_max = arr[0]\n    \n    for i in range(1,len(arr)):\n        if curr_max > arr[i]:\n            return False\n        else:\n            curr_max = max(curr_max, arr[i])\n        \n    return True\n",
        "num_ids": 90
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    \n    for i in range(1, len(arr)):\n        if arr[i] >= arr[i-1]:\n            continue\n        else:\n            return False\n",
        "num_ids": 71
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return True\n",
        "num_ids": 15
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # iterate through the array to see if first element is smaller than the rest of the elements.\n    # if yes, we can always perform right shift operation and move element to the end.\n    # if not, we cannot perform any right shift operation and return false.\n    for i in range(1, len(arr)):\n        if arr[i-1] < arr[i]:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 103
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    # else\n    temp = arr[0]\n    arr = arr[1:] + [temp]\n    arr = sorted(arr)\n    if arr == arr[1:]:\n        return True\n    return False\n",
        "num_ids": 80
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Edge case\n    if len(arr) == 0:\n        return True\n",
        "num_ids": 20
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0 and lst2[i] % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 76
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"YES\"\n",
        "num_ids": 7
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for el in lst2:\n        if el % 2!= 0:\n            return \"NO\"\n    for el in lst1:\n        if el % 2!= 0:\n            return \"YES\"\n    return \"NO\"\n",
        "num_ids": 57
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    odd_count = 0\n    for i in range(0, len(lst1)):\n        if lst1[i] % 2!= 0:\n            odd_count += 1\n            if odd_count > 1:\n                return \"NO\"\n    for i in range(0, len(lst2)):\n        if lst2[i] % 2!= 0:\n            odd_count += 1\n            if odd_count > 1:\n                return \"NO\"\n    return \"YES\"",
        "num_ids": 119
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if all(lst2.count(num) % 2 == 1 for num in lst1):\n        return \"YES\"\n    return \"NO\"\n",
        "num_ids": 37
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    even_count = 0\n    for i in lst1:\n        if i % 2 == 0:\n            even_count += 1\n    if even_count > len(lst1)//2:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 65
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for e in lst1:\n        if e % 2!= 0:\n            return \"NO\"\n    for e in lst2:\n        if e % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 57
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    hist = {}\n    for ch in test:\n        if ch in hist:\n            hist[ch] += 1\n        else:\n            hist[ch] = 1\n    return hist\n",
        "num_ids": 44
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    histogram = {}\n    for char in test:\n        histogram.setdefault(char, 0)\n        histogram[char] = histogram[char] + 1\n    return histogram\n",
        "num_ids": 46
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    hist = {}\n    for i in test:\n        if i in hist.keys():\n            hist[i] += 1\n        else:\n            hist[i] = 1\n    return hist\n",
        "num_ids": 46
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return dict(Counter(test))",
        "num_ids": 9
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    d = {}\n    for c in test:\n        d[c] = d.get(c, 0) + 1\n    return d\n    \ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n",
        "num_ids": 194
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    histogram = {}\n    for l in test:\n        histogram[l] = histogram.get(l, 0) + 1\n    \n    # dict_keys(['a', 'b', 'c'])\n    # dict_values(Counter([1, 2, 1]))\n    # dict_items(Counter({'a': 2, 'b': 2}))\n    \n    # if there is nothing to return, return empty dictionary\n    if histogram == {}:\n        return {}\n    \n    # if there is only one letter, return the only dictionary\n    if len(histogram) == 1:\n        return dict(histogram)\n    \n    # initialize a dictionary with the most frequent letter as the key and the count as the value\n    most_frequent_letter = max(histogram.items(), key=lambda kv: kv[1])\n    letter_count = most_frequent_letter[1]\n    \n    # if the letter has already been used in a dictionary, increment its count\n    for key in histogram:\n        if histogram[key] == letter_count:\n            histogram[key] += 1\n    \n    # for the remaining letters, replace the dictionary with the dictionary of the most frequent letters\n    # and the count as the value\n    for key in histogram:\n        if histogram[key] == letter_count:\n            histogram[key] = most_frequent_letter[0]\n    \n    # return the dictionary of the most frequent letters\n    return histogram\n    \nif __name__ == \"__main__\":\n    print(histogram('a b c'))\n    print(histogram('a b b a'))\n    print(histogram('a b c a b'))\n    print(histogram('b b b b a'))\n    print(histogram(''))\n    \n",
        "num_ids": 426
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if test == '':\n        return {}\n    \n    test = test.lower()\n    \n    d = {}\n    for i in range(len(test)):\n        if test[i] in d:\n            d[test[i]] += 1\n        else:\n            d[test[i]] = 1\n    \n    return {i:d[i] for i in d}\n    \ndef histogram_numpy(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram_numpy('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram_numpy('a b b a') == {'a': 2, 'b': 2}\n    histogram_numpy('a b c a b') == {'a': 2, 'b': 2}\n    histogram_numpy('b b b b a') == {'b': 4}\n    histogram_numpy('') == {}\n    \"\"\"\n    if test == '':\n        return {}\n    \n    test = test.lower()\n    \n    d = np.zeros(26, dtype=int)\n    for i in range(len(test)):\n        d[ord(test[i])-ord('a')] += 1\n    \n    return {chr(i+ord('a')):d[i] for i in range(26) if d[i]!= 0}\n    \ndef histogram_sorted(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram_sorted('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram_sorted('a b b a') == {'a': 2, 'b': 2}\n    histogram_sorted('a b c a b') == {'a': 2, 'b': 2}\n    histogram_sorted('b b b b a') == {'b': 4}\n    histogram_sorted('') == {}\n    \"\"\"\n    if test == '':\n        return {}\n    \n    d = {}\n    for i in range(len(test)):\n        if test[i] in d:\n            d[test[i]] += 1\n        else:\n            d[test[i]] = 1\n    \n    return {i:d[i] for i in sorted(d, key=d.get, reverse=True)}\n    \ndef histogram_sorted_numpy(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram_sorted_numpy('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram_sorted_numpy('a b b a') == {'a': 2, 'b': 2}\n    histogram_sorted_numpy('a b c a b') == {'a': 2, 'b': 2}\n    histogram_sorted_numpy('b b b b a') == {'b': 4}\n    histogram_sorted_numpy('') == {}\n    \"\"\"\n    if test == '':\n        return {}\n    \n    d = np.zeros(26, dtype=int)\n    for i in range(len(test)):\n        d[ord(test[i])-ord('a')] += 1\n    \n    return {chr(i+ord('a')):d[i] for i in range(26) if d[i]!= 0}\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1026
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    if not test: return {}\n    \n    test = test.split()\n    test = list(dict.fromkeys(test)) # Remove duplicate characters\n    hist = {}\n    for i in test:\n        if i not in hist: hist[i] = 1\n        else: hist[i] += 1\n    \n    return hist\n",
        "num_ids": 80
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    test = test.lower()\n    test = test.replace(' ', '')\n    letter_count = {}\n    for letter in test:\n        if letter in letter_count.keys():\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n",
        "num_ids": 69
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    hist = {}\n    test = test.lower().replace(\" \", \"\")\n    for i in test:\n        hist[i] = hist.get(i, 0) + 1\n    return hist\n",
        "num_ids": 47
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s=s.lower()\n    c=c.lower()\n    s=s.split()\n    if len(s)<len(c):\n        return ('',False)\n    l=[]\n    r=[]\n    for i in range(len(s)):\n        if s[i] in c:\n            l.append(s[i])\n    if len(l)==0:\n        return (s,True)\n    for i in range(len(l)):\n        r.append(l[i])\n    r=list(reversed(r))\n    if r==l:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "num_ids": 165
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    c_len = len(c)\n    s = s[::-1]\n    c = c[::-1]\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            s = s[:i] + s[i+1:]\n            if s == s[::-1]:\n                return (s,True)\n    return (s,False)",
        "num_ids": 97
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    index = 0\n    while index < len(s):\n        if s[index] in c:\n            del s[index]\n        else:\n            index += 1\n    if s == s[::-1]:\n        return (s,\"\")\n    else:\n        return (s[::-1],False)\n",
        "num_ids": 75
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #s = \"abcdef\"\n    #c = \"ab\"\n    #s = \"abcdedcba\"\n    #c = \"ab\"\n    if len(s)!= len(c):\n        return (\"\",False)\n    \n    s_length = len(s)\n    result = \"\"\n    for i in range(s_length):\n        if s[i] == c[i]:\n            result = result + s[i]\n        else:\n            break\n    if len(result) == s_length:\n        result = result + c[i]\n        return (result,True)\n    else:\n        return (result,False)\n",
        "num_ids": 155
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if s == \"\": return (c,False)\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            s.pop(i)\n            break\n    return ''.join(s),s==s[::-1]\n",
        "num_ids": 74
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return\ndef main():\n    s = \"abcdef\"\n    c = \"b\"\n    print(reverse_delete(s,c))\n    \n    \n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 55
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    s_l=[]\n    s_r=[]\n    if len(s)==1:\n        return s,False\n    for i in s:\n        s_l.append(i)\n    s=s_l\n    for i in c:\n        s_r.append(i)\n    c=s_r\n    print(s)\n    print(c)\n    s_r=list(c[::-1])\n    for i in s_r:\n        if i not in s:\n            return ('',False)\n    if len(s)>=1:\n        for i in range(len(s)):\n            if s[i]!=c[i]:\n                return ('',False)\n        return (''.join(s),True)\n    else:\n        return ('',False)\n",
        "num_ids": 196
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Initialize result and check\n    result = \"\"\n    check = False\n",
        "num_ids": 19
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"bcd\",False\n",
        "num_ids": 9
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = None\n    flag = False\n    if len(s) == 0 and len(c) == 0:\n        result = ('',True)\n    elif len(s) == 0:\n        result = (c,False)\n    elif len(c) == 0:\n        result = (s,False)\n    else:\n        if s == c:\n            flag = True\n        elif s < c:\n            s_list = list(s)\n            for i in range(len(c)):\n                s_list.pop(s.index(c[i]))\n                if s == \"\".join(s_list):\n                    flag = True\n                    break\n        else:\n            s_list = list(c)\n            for i in range(len(s)):\n                s_list.pop(c.index(s[i]))\n                if s == \"\".join(s_list):\n                    flag = True\n                    break\n        result = (''.join(s_list),flag)\n    return result\n    \nif __name__ == '__main__':\n    s = \"abcde\"\n    c = \"ae\"\n    print(reverse_delete(s,c))\n",
        "num_ids": 282
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return ['the number of odd elements {}n the str{} of the {}nput.'.format(n,\n    len(lst[n]), len(lst)) for n,_ in enumerate(lst) if len(lst[n])%2!= 0]\n",
        "num_ids": 66
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # +++your code here+++\n    lst_lst = []\n    for i in lst:\n        i = int(i)\n        num_of_odds = 0\n        for j in str(i):\n            if int(j)%2!= 0:\n                num_of_odds += 1\n        lst_lst.append(f\"the number of odd elements {num_of_odds}n the str{num_of_odds}ng {i} of the {num_of_odds}nput.\")\n    return lst_lst\n",
        "num_ids": 137
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # code here\n    count = 0\n    for i in lst:\n        for j in i:\n            if j % 2!= 0:\n                count += 1\n    return [\"the number of odd elements {}n the str{}n of the {}nput.\".format(count, i, i) for i in lst]\n",
        "num_ids": 78
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #for i in lst:\n    #    print(i)\n    #return \n",
        "num_ids": 23
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # if lst == []:\n    #     return []\n    # else:\n    #     lst_odd_count = []\n    #     for num in lst:\n    #         lst_odd_count.append(\"the number of odd elements {}n the str{} of the {}nput.\".format(str(len(num)-1),str(len(num)),str(len(num))))\n    #     return lst_odd_count\n    if lst == []:\n        return []\n    else:\n        return [\"the number of odd elements {}n the str{} of the {}nput.\".format(str(len(lst[i]) - 1), str(len(lst[i])), str(len(lst[i])))] + odd_count(lst[1:])\n",
        "num_ids": 191
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert isinstance(lst, list) and len(lst) > 0\n    assert all(isinstance(e, str) and e.isdigit() for e in lst)\n    assert all(len(e) == 9 for e in lst)\n",
        "num_ids": 62
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ['the number of odd elements {}n the str{}n of the {}nput.'.format(\n        len(lst) - i - 1, i, i)\n        for i in range(len(lst))\n        if len(lst) - i - 1 < 0\n        for i in range(1, len(lst) - i)\n        if lst[i]!= lst[i - 1]]\n",
        "num_ids": 102
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # create empty list\n    odd_count = []\n",
        "num_ids": 14
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [\"the number of odd elements \" + str(len(lst) - i) + \" of the \" + str(lst[i]) + \" of the \" + str(len(lst)) + \"nput.\" for i in range(len(lst))]\n",
        "num_ids": 64
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return\n    \n    # your code here\n",
        "num_ids": 12
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    min_sum = float(\"inf\")\n    current_sum = 0\n",
        "num_ids": 18
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def minSubArraySum(nums):\n        start = 0\n        sum = 0\n        min_sum = float('inf')\n        for i in range(len(nums)):\n            sum += nums[i]\n            while sum >= min_sum:\n                min_sum = min(min_sum, sum)\n                start += 1\n                sum -= nums[start]\n            print(min_sum, sum, start)\n        return min_sum\n    return minSubArraySum(nums)\n",
        "num_ids": 120
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    total = 0\n    min_s = 0\n    for i in nums:\n        total += i\n        min_s = min(min_s, total - i)\n",
        "num_ids": 42
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # The algorithm works for any array and can be easily extended to any non-negative integer array\n    # since the partial sum of a non-empty sub-array is guaranteed to be at least as large as the\n    # partial sum of the whole array.\n    #\n    # The algorithm is brute force and iterative.\n    #\n    # Algorithm:\n    #\n    # Set the starting point. If the sum of the whole array is smaller than 0,\n    # it is possible to never reach the end of the array, thus return 0.\n    #\n    # Set the end point.\n    #\n    # Start looping from the beginning of the array\n    #\n    # Calculate the partial sum and compare it with the minSum.\n    # If the partial sum is smaller than minSum, update minSum.\n    #\n    # Repeat the same process until the end of the array is reached.\n    #\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    minSum = 0\n    if len(nums) == 0:\n        return 0\n",
        "num_ids": 250
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    window_sum = nums[0]\n    min_sum = nums[0]\n    for num in nums[1:]:\n        window_sum = min(num, window_sum + num)\n        min_sum = min(min_sum, window_sum)\n    return min_sum\n",
        "num_ids": 72
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # if len(nums) == 0:\n    #     return\n    #\n    # min_sum = nums[0]\n    # curr_sum = 0\n    # for i in range(len(nums)):\n    #     curr_sum += nums[i]\n    #     if curr_sum < min_sum:\n    #         min_sum = curr_sum\n    #     if curr_sum < 0:\n    #         curr_sum = 0\n    #     else:\n    #         continue\n    # return min_sum\n",
        "num_ids": 136
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    global minSum\n    minSum = float(\"inf\")\n    for i in range(len(nums)):\n        if minSum > 0:\n            minSum = minSum + nums[i]\n        else:\n            minSum = minSum + nums[i]\n            if minSum < 0:\n                minSum = 0\n        if minSum < 0:\n            minSum = 0\n    return minSum\n",
        "num_ids": 99
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    minSum = float('inf')\n    currentSum = 0\n    for num in nums:\n        currentSum += num\n        if currentSum < minSum:\n            minSum = currentSum\n        if currentSum < 0:\n            currentSum = 0\n    return minSum\n",
        "num_ids": 65
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Time: O(n)\n    # Space: O(n)\n    start = 0\n    min_sum = float('inf')\n    curr_sum = 0\n    while start < len(nums):\n        curr_sum += nums[start]\n        while curr_sum >= min_sum:\n            min_sum = min(min_sum, curr_sum)\n            start += 1\n    return min_sum\n",
        "num_ids": 104
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(nums) == 0:\n        return 0\n    minSum = nums[0]\n    currSum = 0\n    for num in nums:\n        currSum += num\n        minSum = min(minSum, currSum)\n    return minSum\n",
        "num_ids": 67
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    def _is_fillable(bucket):\n        return bucket[0] + bucket[1] <= capacity\n    \n    def _extract_water(grid, row, col):\n        water = min(grid[row][col], capacity)\n        grid[row][col] -= water\n        return water\n    \n    def _is_well_empty(grid, row, col):\n        return grid[row][col] == 0\n    \n    def _is_filled_well(row, col):\n        return grid[row][col] > 0\n",
        "num_ids": 128
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    m, n = len(grid), len(grid[0])\n    empty_well = 0\n    fill_well = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                empty_well += 1\n                grid[i][j] = 0\n",
        "num_ids": 78
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    counter = 0\n    row_len = len(grid)\n    col_len = len(grid[0])\n",
        "num_ids": 28
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # @param A : list of strings\n    # @param B : integer\n    # @return an integer\n    #f\n    def sum_f(A):\n        n = len(A)\n        sum_ = 0\n        for i in range(n):\n            sum_ += A[i]\n        return sum_\n    \n    def get_max_flow(capacity, arr, n, m):\n        # if arr is empty then return 0\n        if n == 0 or m == 0:\n            return 0\n    \n        # if capacity is 0 then no flow possible\n        if capacity == 0:\n            return 0\n    \n        # choose the minimum of the following two values:\n        # 1) the minimum of the value or the capacity needed to fill in the current cell and its up/down neighbor\n        # 2) the minimum of the value or the capacity needed to fill in the current cell and its left/right neighbor\n        value_min = min(arr[n-1][m], capacity)\n        value_min = min(value_min, arr[n-1][m-1])\n        value_min = min(value_min, arr[n-1][m+1])\n        value_min = min(value_min, arr[n][m-1])\n        value_min = min(value_min, arr[n][m+1])\n        \n        # push this value to the queue to be checked\n        q.append([n-1, m-1, value_min])\n        q.append([n-1, m, value_min])\n        q.append([n-1, m+1, value_min])\n        q.append([n, m-1, value_min])\n        q.append([n, m+1, value_min])\n    \n        # do for all the cells in the queue\n        while q:\n            \n            # pop a cell from the queue\n            n_i, m_i, capacity = q.popleft()\n            \n            # if capacity of cell is less than 0 then continue\n            if capacity < 0:\n                continue\n    \n            # check if cell is empty\n            if arr[n_i][m_i] == 0:\n                continue\n    \n            # get the min value\n            value_min = min(value_min, capacity)\n    \n            # for all the neighbors of the cell\n            for i in range(4):\n                ni = n_i + di[i]\n                mi = m_i + di[i]\n                if 0 <= ni < n and 0 <= mi < m:\n                    # add the flow to the current cell and push the current cell to the queue\n                    q.append([ni, mi, arr[ni][mi]-value_min])\n                    # push the current cell to the queue\n                    q.append([ni, mi, arr[ni][mi] + value_min])\n    \n        return value_min\n    \n    def get_max_flow(capacity, arr, n, m):\n        # if arr is empty then return 0\n        if n == 0 or m == 0:\n            return 0\n    \n        # if capacity is 0 then no flow possible\n        if capacity == 0:\n            return 0\n    \n        # choose the minimum of the following two values:\n        # 1) the minimum of the value or the capacity needed to fill in the current cell and its up/down neighbor\n        # 2) the minimum of the value or the capacity needed to fill in the current cell and its left/right neighbor\n        value_min = min(arr[n-1][m], capacity)\n        value_min = min(value_min, arr[n-1][m-1])\n        value_min = min(value_min, arr[n-1][m+1])\n        value_min = min(value_min, arr[n][m-1])\n        value_min = min(value_min, arr[n][m+1])\n        \n        # push this value to the queue to be checked\n        q.append([n-1, m-1, value_min])\n        q.append([n-1, m, value_min])\n        q.append([n-1, m+1, value_min])\n        q.append([n, m-1, value_min])\n        q.append([n, m+1, value_min])\n    \n        # do for all the cells in the queue\n        while q:\n            ",
        "num_ids": 1024
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = len(grid)\n    k = len(grid[0])\n    max_len = math.ceil(math.sqrt(k))\n    dp = [[0] * (capacity+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, capacity+1):\n            if grid[i-1][0] < j:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-grid[i-1][0]]+grid[i-1][1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][capacity]\n",
        "num_ids": 176
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    r,c = len(grid), len(grid[0])\n    if r*c == 0: return 0\n    costs = [[math.inf for _ in range(c)] for _ in range(r)]\n    for i in range(r):\n        for j in range(c):\n            if grid[i][j] == 1:\n                costs[i][j] = 0\n    for t in range(1, c):\n        for i in range(r):\n            for j in range(c):\n                if grid[i][j] == 0:\n                    continue\n                # can be filled with the water we have in the current well\n                costs[i][j] = min(costs[i][j], costs[i][t-1] + costs[t-1][j])\n    return sum(map(sum, costs))\n",
        "num_ids": 198
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    row = len(grid)\n    col = len(grid[0])\n",
        "num_ids": 19
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def f(row, col):\n        if row == 0: return 0\n        res = -math.inf\n        for idx, w in enumerate(row):\n            if w == 1:\n                if col + bucket_capacity <= capacity:\n                    res = max(res, 1 + f(row-1, col+1))\n        return res\n",
        "num_ids": 82
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = len(grid)\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    def check_satisfied(row, col, cap):\n        if not grid[row][col]:\n            return False\n        for i in range(row, -1, -1):\n            if grid[i][col]:\n                if cap < grid[i][col]:\n                    return False\n                else:\n                    cap -= grid[i][col]\n        for i in range(col, -1, -1):\n            if grid[row][i]:\n                if cap < grid[row][i]:\n                    return False\n                else:\n                    cap -= grid[row][i]\n        return True\n",
        "num_ids": 169
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    from collections import deque\n    n_rows = len(grid)\n    n_cols = len(grid[0])\n",
        "num_ids": 31
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # return sorted(arr, key=lambda x: bin(x)[2:].count('1'))\n    # return sorted(arr, key=lambda x: bin(x).count('1'))\n    return sorted(arr, key=lambda x: (x, bin(x).count('1')), reverse=True)\n",
        "num_ids": 76
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # your code here\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 30
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(arr, key=binary_to_decimal)\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    b = lambda x: bin(x)\n    bin_dict = {}\n    for i in range(0, len(arr)):\n        bin_dict[b(arr[i])] = bin_dict.get(b(arr[i]), 0) + 1\n",
        "num_ids": 63
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    ans = sorted(arr, key = lambda x : bin(x).count(\"1\"))\n    return ans\n",
        "num_ids": 26
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda x: (x, binary(x)))\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(arr, key=lambda x: (x * 2 + 1, x))\n",
        "num_ids": 22
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:]).count('1'), reverse=True)\n",
        "num_ids": 29
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # return sorted(list(filter(lambda x: x.count(\"c\") == n, s.split())))\n    # return sorted(list(set([x.lower() for x in s.split() if x.count(\"c\") == n])))\n    return sorted(list(filter(lambda x: x.count(\"c\") == n, s.split())))\n",
        "num_ids": 86
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not s:\n        return []\n    return [s[i] for i in range(len(s)) if s.count(s[i]) == n]\n",
        "num_ids": 40
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # split text into words\n    word_list = s.split(\" \")\n",
        "num_ids": 20
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n    return words_with_n_consonants(s, n)\n",
        "num_ids": 24
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(s) == 0:\n        return []\n    words = []\n    vowels = 'aeiou'\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if s[i+1:].find(s[i]) == -1:\n                words.append(s[i:])\n    return words\n",
        "num_ids": 89
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    if len(s) == 0:\n        return []\n    else:\n        result = []\n        count_consonants = 0\n        for i in s:\n            if i.isalpha():\n                if i.islower():\n                    count_consonants += 1\n        for i in s:\n            if i.isalpha():\n                if i.islower():\n                    if count_consonants >= n:\n                        result.append(i)\n        return result\n",
        "num_ids": 113
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # if the string is empty\n    if not s:\n        return []\n    # convert the string to list\n    s_list = s.split()\n    # loop over every word in the list\n    for word in s_list:\n        # check if the word is in the list and if the word is longer than the\n        # n that was passed\n        if word in s_list and len(word) >= n:\n            # if it is, return the word\n            return [word]\n    # if the word is not in the list, return empty list\n    return []\n",
        "num_ids": 133
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    import re\n    \n    return_list = []\n    \n    for i in re.findall(r'\\S+', s):\n        if len(i) == n:\n            return_list.append(i)\n    \n    return return_list\n",
        "num_ids": 62
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(0, len(s)):\n        if n == len(s) - i:\n            result.append(s[i:])\n        elif s[i] in 'aeiou':\n            n -= 1\n        elif s[i] =='':\n            n += 1\n        else:\n            n = len(s) - i\n        if n == 0:\n            result.append(s[i:])\n            break\n    return result\n",
        "num_ids": 117
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    if s == \"\":\n        return []\n",
        "num_ids": 14
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    for i in range(len(word)):\n        if word[i] in \"aeiou\":\n            if i == 0:\n                return word[i]\n            if word[i-1] == \".\":\n                return word[i]\n            if i == (len(word)-1):\n                return word[i]\n            if word[i+1] == \".\":\n                return word[i]\n            return word[i]\n    return \"\"\n",
        "num_ids": 112
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def is_vowel(letter):\n        return letter.upper() in 'AEIOU'\n",
        "num_ids": 25
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    for i in range(len(word)-2, -1, -1):\n        if word[i] in \"aeiou\":\n            return word[i]\n    return \"\"\n",
        "num_ids": 46
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    vowels = 'aeiouAEIOU'\n    if len(word) < 3:\n        return \"\"\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] not in vowels:\n            if word[i] == word[i - 1]:\n                continue\n            return word[i]\n    return \"\"\n",
        "num_ids": 88
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    word = word.lower()\n    for i in range(len(word)-2,-1,-1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n",
        "num_ids": 69
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(word) - 1):\n        if word[i] in VOWELS and word[i + 1] in CONSONANTS:\n            return word[i + 1]\n    return \"\"\n",
        "num_ids": 52
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    left = 0\n    right = len(word) - 1\n    if word[0] == word[1]:\n        return \"\"\n    while right > left:\n        if word[right] == 'a' or word[right] == 'e' or word[right] == 'i' or word[right] == 'o' or word[right] == 'u':\n            return word[right]\n        if word[left] == 'a' or word[left] == 'e' or word[left] == 'i' or word[left] == 'o' or word[left] == 'u':\n            return word[left]\n        left += 1\n        right -= 1\n",
        "num_ids": 163
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vowels = \"aeiouAEIOU\"\n    \n    if word == \"\": return \"\"\n    \n    if word[-1] in vowels: \n        return word[-1]\n        \n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n        \n    return \"\"\n",
        "num_ids": 94
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Solution: Create a stack and check if the current stack is balanced\n    # Time: O(n) where n is the length of the list\n    # Space: O(n) since we are using a stack with length of n\n    stack = []\n    for s in lst:\n        if s == '(':\n            stack.append(s)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n",
        "num_ids": 103
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if lst[0] == lst[1]:\n        return 'Yes'\n    for i in range(2, len(lst)):\n        if lst[i] == '(' and lst[i-1] == ')':\n            return 'Yes'\n        elif lst[i] == ')' and lst[i-1] == '(':\n            return 'No'\n    return 'No'",
        "num_ids": 99
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # edge cases\n    if len(lst) < 2 or lst[0]!= '(' or lst[-1]!= ')':\n        return \"Invalid input\"\n",
        "num_ids": 45
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #I can't think of an easy way to make a string balanced.\n    #if lst[0] == lst[-1] and lst[0] == ')':\n    #    return 'Yes'\n    #else:\n    #    return 'No'\n",
        "num_ids": 65
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(lst) % 2!= 0:\n        return 'No'\n    stack = []\n    for i in lst:\n        if i == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return 'No'\n            stack.pop()\n    return 'Yes'\n",
        "num_ids": 81
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    stack = []\n",
        "num_ids": 6
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if lst[0] == lst[-1]: return 'Yes'\n    if lst[0]!= lst[-1]: return 'No'\n    return 'No'\n",
        "num_ids": 46
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    open_paren = '('\n    close_paren = ')'\n    stack = []\n    for i in lst:\n        if i == open_paren:\n            stack.append(i)\n        elif i == close_paren:\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    if stack:\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 95
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def match(lst):\n        if len(lst) == 1:\n            return 'Yes'\n        if len(lst) % 2 == 1:\n            return 'No'\n        stack = []\n        for char in lst:\n            if char == '(':\n                stack.append(char)\n            if char == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    return 'No'\n        if not stack:\n            return 'Yes'\n        return 'No'\n    return match(lst)\n",
        "num_ids": 128
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(arr)[-k:]\n",
        "num_ids": 11
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    arr = sorted(arr, reverse=True)\n    return arr[:k]\n",
        "num_ids": 21
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not arr:\n        return None\n    \n    left = 0\n    right = len(arr) - 1\n    res = []\n    while left <= right:\n        # max heap\n        # for i in range(k):\n        #     if (len(res) < k):\n        #         max = heapq.heappop(arr)\n        #         heapq.heappush(res, -max)\n        #     else:\n        #         max = -heapq.heappop(res)\n        #         heapq.heappush(res, max)\n        # max = -arr[0]\n        # arr.remove(-max)\n        # res.append(-max)\n",
        "num_ids": 167
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Brute Force:\n    # Time: O(nlogk)\n    # Space: O(n)\n    # sort = []\n    # for i in range(len(arr)):\n    #     for j in range(len(arr)):\n    #         if j >= i:\n    #             continue\n    #         else:\n    #             if arr[i] > arr[j]:\n    #                 sort.append(arr[i])\n    #             else:\n    #                 sort.append(arr[j])\n    # return sort\n",
        "num_ids": 130
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if k == 0:\n        return []\n    else:\n        arr = arr[:]\n        arr.sort(reverse=True)\n        return arr[:k]\n",
        "num_ids": 41
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # sort the array and return the list of first k numbers in the sorted array\n    return sorted(arr)[:k]\n",
        "num_ids": 29
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Make a list of [index, value]\n    arr = sorted(enumerate(arr), key=lambda x: x[1])\n",
        "num_ids": 34
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def check_sorted(arr):\n        sorted_arr = sorted(arr)\n        if sorted_arr == arr:\n            return True\n        else:\n            return False\n    \n    res = []\n    for i in range(k):\n        if check_sorted(arr) == True:\n            res.append(max(arr))\n            arr.remove(max(arr))\n        else:\n            res.append(arr[0])\n            arr.remove(arr[0])\n    return res\n",
        "num_ids": 120
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    ### ==========\n    \n    if len(arr) == 0:\n        return arr\n",
        "num_ids": 23
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return max_k_elements(arr, k, 0, len(arr) - 1)\n",
        "num_ids": 24
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2)])\n",
        "num_ids": 26
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            total += lst[i]\n    return total\n    \n",
        "num_ids": 45
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if lst == []:\n        return 0\n    else:\n        # iterator\n        i = 0\n        sum = 0\n        while i < len(lst):\n            if i % 2 == 0:\n                sum += lst[i]\n                i += 1\n            else:\n                i += 1\n        return sum\n",
        "num_ids": 77
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    sum = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 0:\n            sum += x\n    return su",
        "num_ids": 36
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    answer = 0\n    for i in range(1, len(lst), 2):\n        answer = answer + lst[i]\n    return answer\n",
        "num_ids": 37
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    odd = 0\n    for i in lst:\n        if i%2!= 0:\n            odd += i\n    return odd",
        "num_ids": 32
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    out = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            out += lst[i]\n    return out",
        "num_ids": 40
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(x for x in lst if x % 2 == 0)\n",
        "num_ids": 19
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    \n    odd = []\n    \n    for i in range(0,len(lst)):\n        if (i%2!= 0):\n            odd.append(lst[i])\n            \n    for i in range(0,len(odd)):\n        if (i%2 == 0):\n            odd[i] = lst[i]\n    \n    return sum(odd)\n",
        "num_ids": 96
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    odd_sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1:\n            odd_sum += lst[i]\n",
        "num_ids": 45
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(arr) < k: return 0\n    if len(arr) == k: return sum(arr)\n    ans = 0\n    # NOTE: Use only 0-based indices, since k may be > len(arr)\n    left = 0\n    while left < len(arr):\n        # Add the largest value from first k\n        cur = 0\n        for i in range(left, left + k):\n            if i < len(arr):\n                cur += arr[i]\n        ans += cur\n        # Add the largest value from first k\n        cur = 0\n        for i in range(left + 1, left + k + 1):\n            if i < len(arr):\n                cur += arr[i]\n        ans += cur\n        # Update left\n        left += k\n    return ans\n",
        "num_ids": 186
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert len(arr) > 0\n    assert k <= len(arr)\n",
        "num_ids": 19
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not k:\n        return 0\n",
        "num_ids": 11
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(sorted(arr)[:k])\n",
        "num_ids": 14
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(arr)\n    k_min = k\n    k_max = n\n    ans = 0\n    while k_min <= k_max:\n        s = sum([i for i in arr if i < 10**k_min]) + sum([i for i in arr if i >= 10**(k_min-1) and i <= 10**k_max])\n        if s > ans:\n            ans = s\n        k_min -= 1\n        k_max -= 1\n",
        "num_ids": 114
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # run time: O(n * k)\n    # space: O(1)\n",
        "num_ids": 22
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # # Method 1\n    # n = len(arr)\n    # if k > n:\n    #     return 0\n    # return sum(min(i, 2) for i in arr[:k])\n",
        "num_ids": 50
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if k > len(arr):\n        return 0\n    elements = set()\n    for i in range(len(arr)):\n        if len(str(arr[i])) <= k:\n            elements.add(arr[i])\n    return sum(elements)\n",
        "num_ids": 67
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if k > len(arr):\n        return 0\n    \n    arr.sort()\n    i = 0\n    j = k\n    ans = 0\n    while i <= j:\n        if arr[i] > 10:\n            ans += arr[i] // 10 + arr[i] % 10\n            i += 2\n        else:\n            ans += arr[i]\n            i += 1\n        j = i + k\n        \n    return ans\n",
        "num_ids": 106
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return [1]\n    if n % 2!= 0:\n        return [n]\n    result = []\n    while n!= 1:\n        if n % 2!= 0:\n            result.append(n)\n        n = n / 2 if n % 2!= 0 else n * 3 + 1\n    return result\n",
        "num_ids": 85
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    ret = []\n    odd_nums = set()\n    num = 1\n    while num!= 1:\n        if num % 2 == 1:\n            odd_nums.add(num)\n        num = num//2 if num % 2 == 0 else num*3+1\n    for num in odd_nums:\n        ret.append(num)\n    return sorted(ret)\n",
        "num_ids": 92
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        res.append(n)\n    return sorted(res)\n",
        "num_ids": 58
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # get the list of collatz numbers from 1 to n\n    collatz = [n]\n    while True:\n        if n % 2 == 0: # n is even, so the next term is half of n\n            n = n // 2\n            collatz.append(n)\n        else: # n is odd, so the next term is 3n + 1\n            n = 3*n + 1\n            collatz.append(n)\n",
        "num_ids": 104
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    odd_list = []\n    for i in range(n):\n        if i % 2 == 1:\n            odd_list.append(i)\n        elif i > 1:\n            if i % 2 == 0:\n                odd_list.append(i/2)\n            else:\n                odd_list.append(3*i+1)\n    odd_list.sort()\n    return odd_list\n",
        "num_ids": 97
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    odd_numbers = []\n    num = 1\n    while num!= 1:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n        num = num * 3 + 1\n    return sorted(odd_numbers)\n",
        "num_ids": 61
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if n == 1:\n        return []\n    \n    result = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        \n        result.append(n)\n    \n    return result\n",
        "num_ids": 76
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    odd_collatz_seq = []\n    current_num = 1\n    while current_num <= n:\n        odd_collatz_seq.append(current_num)\n        if current_num % 2 == 0:\n            current_num = current_num / 2\n        else:\n            current_num = 3 * current_num + 1\n",
        "num_ids": 81
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    res = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n * 3 + 1\n        res.append(n)\n    res.append(1)\n    return sorted(res)\n",
        "num_ids": 65
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = []\n",
        "num_ids": 6
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return (date is not None) and (len(date)!= 0) and (len(date) == 10) and (date[2] in '0123456789') and (int(date[0:2]) in range(1,13)) and (int(date[3:5]) in range(1,32))\n",
        "num_ids": 76
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    days = ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31']\n    months = ['01','03','05','07','08','10','12']\n    \n    if not date:\n        return False\n    \n    date_form = date.split('-')\n    try:\n        date_m = int(date_form[0])\n        date_d = int(date_form[1])\n        date_y = int(date_form[2])\n        if date_m < 1 or date_m > 12 or date_d < 1 or date_d > 31 or (date_m == 4 and date_d > 30) or (date_m == 6 and date_d > 30) or (date_m == 9 and date_d > 30) or (date_m == 11 and date_d > 30):\n            return False\n        if date_m == 2:\n            if date_y > 20:\n                return False\n        else:\n            if date_y < 1800 or date_y > 2020:\n                return False\n    except:\n        return False\n    \n    return True\n",
        "num_ids": 304
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(date) < 1 or len(date) > 10:\n        return False\n    month_dict = {'01': 31, '03': 31, '04': 30, '05': 31, '06': 30, '07': 31,\n    '08': 31, '09': 30, '10': 31, '11': 30, '12': 31}\n    day, month, year = date.split('-')\n    # print(day, month, year)\n    if int(month) not in range(1, 13) or int(day) not in range(1, 32) or int(year) not in range(1850, 2021):\n        return False\n    if int(month) in range(1, 13) and month in month_dict.keys():\n        if int(day) < month_dict[month]:\n            return False\n    elif int(month) in range(3, 13) and month in month_dict.keys():\n        if int(day) < month_dict[month] + 1:\n            return False\n    elif int(month) in range(1, 13) and month == 2 and int(year) % 4!= 0:\n        if int(day) < 29:\n            return False\n    elif int(month) in range(3, 13) and month == 2 and int(year) % 4 == 0:\n        if int(day) < 29:\n            return False\n    return True\n",
        "num_ids": 334
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    try:\n        month = {1:31,3:31,5:31,7:31,8:31,10:31,12:31}\n        day = {1:31,3:31,5:31,7:31,8:31,10:31,12:30}\n        month_range = {1:31,3:31,5:31,7:31,8:31,10:31,12:30}\n        if len(date) > 0:\n            month_list = ['january','february','march','april','may','june','july','august','september','october','november','december']\n            month = month_list.index(date.split('-')[0])+1\n            month_range = month_list.index(date.split('-')[0])+1\n            if month_range in range(1,13):\n                date = date.split('-')\n                date = date[1]+'-'+date[2]+'-'+date[0]\n                if len(date) == 8:\n                    date_splitted = date.split('-')\n                    day = int(date_splitted[1])\n                    month = int(date_splitted[0])\n                    year = int(date_splitted[2])\n                    if year > 0:\n                        if month in range(1,13):\n                            if day in range(1,day_in_month(month,year)):\n                                return True\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    except Exception as e:\n        return False\n",
        "num_ids": 404
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    try:\n        date = datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True if 1 <= date.day <= 31 and 1 <= date.month <= 12 else False\n    except ValueError:\n        return False\n    \n",
        "num_ids": 65
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    days = {1: 31, 3: 31, 5: 31, 7: 31, 8: 31, 10: 31, 12: 31}\n    months = {1: 31, 3: 31, 5: 31, 7: 31, 8: 31, 10: 31, 12: 31}\n    months2 = {4: 30, 6: 30, 9: 30, 11: 30}\n    months3 = {2: 29}\n    months4 = {2: 28}\n",
        "num_ids": 109
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if date == '':\n        return False\n    else:\n        date = date.split('-')\n        month, day, year = int(date[0]), int(date[1]), int(date[2])\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            if month == 2:\n                if day < 1 or day > 29:\n                    return False\n            if month in (4, 6, 9, 11):\n                if day < 1 or day > 30:\n                    return False\n            if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n                if day < 1 or day > 31:\n                    return False\n        if year < 1 or year > 2100:\n            return False\n        return True\n",
        "num_ids": 194
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    import re\n    try:\n        regex = re.compile('^([1-9]|1[0-2])-(0?[1-9]|1[0-2])-(20[0-9]{2})$')\n        if regex.match(date):\n            month = int(date.split('-')[0])\n            day = int(date.split('-')[1])\n            year = int(date.split('-')[2])\n            if month > 12 or month < 1:\n                return False\n            if day > 31 or day < 1:\n                return False\n            if month == 2 and day > 28:\n                return False\n            if year > 2200 and year < 2201:\n                return True\n            if year > 2020 and year < 2201:\n                return True\n            if year >= 2201:\n                if day > 31:\n                    return False\n                if day > 30:\n                    return False\n            else:\n                if day > 30:\n                    return False\n            if year >= 2200:\n                if day > 29:\n                    return False\n            else:\n                if day > 28:\n                    return False\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 286
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if (date == \"\" or not(date)):\n        return False\n    else:\n        month_index = 0\n        for month in range(1,13):\n            if (month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12):\n                if (int(date[0]) > 31):\n                    return False\n            elif (month == 4 or month == 6 or month == 9 or month == 11):\n                if (int(date[0]) > 30):\n                    return False\n            elif (month == 2):\n                if (int(date[0]) > 29):\n                    return False\n            if (month_index == 0):\n                month_index = 1\n            else:\n                month_index = 0\n",
        "num_ids": 181
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    month_list = [\"1\",\"3\",\"5\",\"7\",\"8\",\"10\",\"12\"]\n    days_list = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"]\n    year_list = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\"]\n",
        "num_ids": 216
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    #return txt.split()\n    return txt.split(\",\")",
        "num_ids": 19
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    word = txt.split()\n    result = []\n    for i in word:\n        result.append(i.split())\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return txt.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    words = txt.split()\n    return words\n",
        "num_ids": 14
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return txt.split()\n    \n    \n",
        "num_ids": 13
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # return words.split()\n    return txt.split()\n",
        "num_ids": 17
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(lst) == lst",
        "num_ids": 11
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    lst.sort()\n    if lst[0] == lst[1] and lst[1] == lst[2] and lst[2] == lst[3] and lst[3] == lst[4] and lst[4] == lst[5]:\n        return True\n    else:\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Write your code here.\n    return all(a <= b for a, b in zip(lst, lst[1:]))\n",
        "num_ids": 33
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    sorted_ = True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            sorted_ = False\n    return sorted_\n",
        "num_ids": 50
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return all(i <= j for i, j in zip(lst[:-1], lst[1:]))\n",
        "num_ids": 28
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert lst, 'List cannot be empty'\n",
        "num_ids": 13
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return is_sorted_r(lst)\n",
        "num_ids": 14
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i+1]<lst[i]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sorted = False\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst)):\n        if i == len(lst) - 1:\n            return sorted\n        if lst[i] == lst[i + 1]:\n            return False\n        if i == 0:\n            if lst[i] >= lst[i + 1]:\n                return False\n            else:\n                sorted = True\n        elif lst[i] < lst[i + 1]:\n            sorted = False\n    return sorted\n",
        "num_ids": 136
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = {}\n    for i in range(len(lst)):\n        if lst[i] in count.keys():\n            count[lst[i]] += 1\n        else:\n            count[lst[i]] = 1\n    for k, v in count.items():\n        if v > 1:\n            return False\n    return True\n",
        "num_ids": 84
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 < start2 and end2 < end1:\n        return \"YES\"\n    elif start1 <= end2 and end1 <= end2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 74
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"YES\" if len(intersection_of_two_intervals(interval1, interval2)) == 1 else \"NO\"\n",
        "num_ids": 33
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    # first solution: brute force\n    interval1 = sorted(interval1)\n    interval2 = sorted(interval2)\n    \n    # if the two intervals don't intersect, return \"NO\"\n    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    \n    # if they intersect and the first interval starts before the second, return \"NO\"\n    if interval1[0] > interval2[0]:\n        return \"NO\"\n    \n    # if they intersect, check if the first interval is a prime number\n    if is_prime(interval1[1] - interval1[0] + 1):\n        return \"YES\"\n    \n    # if not, check if the second interval is a prime number\n    if is_prime(interval2[1] - interval2[0] + 1):\n        return \"YES\"\n    \n    # otherwise, return \"NO\"\n    return \"NO\"\n",
        "num_ids": 233
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # length of intersection\n    # 1. find the length of common area\n    # 2. if length of common area is a prime number, return \"YES\"\n    # 3. if length of common area is not a prime number, return \"NO\"\n    # 4. if length of common area is not a prime number and not in (1,2), return \"NO\"\n    #  NOTE: 1. not in (1,2) is important, it means the interval is not a singleton\n",
        "num_ids": 111
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert interval1[0] <= interval1[1]\n    assert interval2[0] <= interval2[1]\n    assert interval1[0] <= interval2[0]\n    assert interval2[0] <= interval2[1]\n",
        "num_ids": 57
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # If there is an intersection, the length of the intersection\n    # must be prime number.\n    if end_interval < start_interval:\n        return \"NO\"\n    # If the two intervals don't intersect, return \"NO\".\n    if end_interval > start_interval:\n        return \"NO\"\n    # If the length of the intersection is a prime number,\n    # return \"YES\", otherwise, return \"NO\".\n    if gcd(start_interval[0], end_interval[1])!= 1:\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 139
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Find if there are common integer in two intervals.\n    # If so, then return 'YES'\n    start, end = interval1\n    start2, end2 = interval2\n    if start >= end2 or end <= start2:\n        return 'NO'\n    return prime_check(abs(end - start))\n",
        "num_ids": 75
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]):\n        return \"YES\"\n    return \"NO\"\n",
        "num_ids": 50
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def find_intersection_length(interval1, interval2):\n        if interval1[0] < interval2[0] or interval2[0] < interval1[0]:\n            return 0\n        if interval1[1] > interval2[1] or interval2[1] > interval1[1]:\n            return 0\n        if interval1[1] < interval2[0]:\n            return interval1[0]\n        if interval1[0] > interval2[1]:\n            return interval1[1]\n        return interval1[0] - interval2[0]\n    intersection_length = find_intersection_length(interval1, interval2)\n    if (intersection_length%2!= 0):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 187
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    signs = 0\n    if arr == []:\n        return None\n    for i in arr:\n        if i > 0:\n            signs += i\n        elif i < 0:\n            signs -= i\n    return signs * prod(arr)",
        "num_ids": 60
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not arr:\n        return None\n    magnitudes = [abs(n) for n in arr]\n    product = 1\n    for m in magnitudes:\n        if m > 0:\n            product *= m\n    return product\n",
        "num_ids": 57
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not arr:\n        return None\n    return sum([abs(i) * (1 if i > 0 else -1 if i < 0 else 0) for i in arr])\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # your code here\n    if not arr:\n        return None\n    if len(arr) == 1:\n        return abs(arr[0]) * arr[0]\n",
        "num_ids": 41
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(1 * (int(x) > 0) * (int(x) < 0) for x in arr)\n",
        "num_ids": 30
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    m = prod_sign(arr)\n    if m!= None:\n        return sum(arr) * m\n",
        "num_ids": 28
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if arr == []:\n        return None\n    sum = 0\n    prod = 1\n    for i in arr:\n        if i == 1:\n            sum += abs(i)\n        elif i == -1:\n            sum += abs(i)\n        else:\n            prod *= abs(i)\n    return sum * prod\n",
        "num_ids": 82
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not arr: return None\n    if len(arr) == 1:\n        return arr[0]\n    res = 0\n    neg = 0\n    pos = 0\n    zero = 0\n    for i in arr:\n        if i > 0:\n            pos += i\n        elif i < 0:\n            neg += i\n        elif i == 0:\n            zero += 1\n    if pos > neg:\n        res = pos\n    elif neg > pos:\n        res = neg\n    else:\n        res = 0\n    if zero > 0:\n        res -= zero * prod_signs([-1, -1])\n    return res\n",
        "num_ids": 153
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sum_signs = 0\n    for i in arr:\n        if i > 0:\n            sum_signs += i\n        if i < 0:\n            sum_signs += -1 * i\n    return sum_signs",
        "num_ids": 55
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = 0\n    # Your code here\n    for i in arr:\n        if i == 0:\n            res = 0\n        elif i > 0:\n            res += i\n        elif i < 0:\n            res -= i\n    return res\n",
        "num_ids": 61
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # preprocessing: sort the grid by the values and store the unique values in a set\n    grid = sorted(list(set(row) for row in grid))\n    \n    # base case: if k = 0, return all the values in the grid\n    if k == 0: return grid\n    \n    # if k is not 0, try to find the most significant bit (in the case of a binary tree,\n    # the most significant bit will be the left most bit)\n    for i in range(len(grid) - 1, -1, -1):\n        if grid[i] & (1 << (k - 1)):\n            break\n    \n    # if we can't find the kth bit, return the result of minPath on the grid with the most significant\n    # bit removed\n    else:\n        return minPath(grid[i + 1:], k - i - 1)\n",
        "num_ids": 206
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n = len(grid)\n    def get_path(grid, n, k):\n        visited = set()\n        q = Queue()\n        q.put((0, 0, []))\n        while not q.empty():\n            p = q.get()\n            if p not in visited:\n                if p[0] == n*n - k:\n                    return p[2]\n                visited.add(p)\n                if 0 <= p[0] - 1 < n:\n                    if grid[p[0] - 1][p[1]] not in p[2]:\n                        q.put((p[0] - 1, p[1], p[2] + [grid[p[0] - 1][p[1]]]))\n                if p[0] + 1 < n:\n                    if grid[p[0] + 1][p[1]] not in p[2]:\n                        q.put((p[0] + 1, p[1], p[2] + [grid[p[0] + 1][p[1]]]))\n                if 0 <= p[1] - 1 < n:\n                    if grid[p[0]][p[1] - 1] not in p[2]:\n                        q.put((p[0], p[1] - 1, p[2] + [grid[p[0]][p[1] - 1]]))\n                if p[1] + 1 < n:\n                    if grid[p[0]][p[1] + 1] not in p[2]:\n                        q.put((p[0], p[1] + 1, p[2] + [grid[p[0]][p[1] + 1]]))\n        return []\n    return get_path(grid, n, k)\n",
        "num_ids": 413
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Build a graph of the grid\n    n, m = len(grid), len(grid[0])\n    visited = set()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]!= 0:\n                visited.add(grid[i][j])\n",
        "num_ids": 77
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def dfs(grid, row, col, path, res):\n        if row >= len(grid) or col >= len(grid) or row < 0 or col < 0:\n            return\n        if row == len(grid) - 1 and col == len(grid) - 1:\n            res.append(path + grid[row][col])\n            return\n        if row == len(grid) - 1:\n            dfs(grid, row, col + 1, path + grid[row][col], res)\n            return\n        if col == len(grid) - 1:\n            dfs(grid, row + 1, col, path + grid[row][col], res)\n            return\n        \n        path_1 = path + grid[row][col]\n        path_2 = path + grid[row + 1][col]\n        path_3 = path + grid[row][col + 1]\n        path_4 = path + grid[row + 1][col + 1]\n        res.append(min(path_1, path_2, path_3, path_4))\n        dfs(grid, row + 1, col, path_1, res)\n        dfs(grid, row + 1, col + 1, path_2, res)\n        dfs(grid, row, col + 1, path_3, res)\n        dfs(grid, row + 1, col + 1, path_4, res)\n",
        "num_ids": 329
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # binary search\n    # O(N * N)\n    # def minPathHelper(grid, k):\n    #     N = len(grid)\n    #     curr = 0\n    #     start = grid[0][0]\n",
        "num_ids": 57
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(grid)\n    if k > n * n:\n        return None\n",
        "num_ids": 22
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n",
        "num_ids": 20
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Base case\n    if k == 0 or not grid: return []\n",
        "num_ids": 18
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Number of rows in grid\n    N = len(grid)\n    # Number of columns in grid\n    M = len(grid[0])\n",
        "num_ids": 35
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n",
        "num_ids": 19
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert n > 0\n    res = []\n    if n == 1:\n        return res\n    if n == 2:\n        return res + [3]\n    if n == 3:\n        return res + [3, 2]\n    res.append(1)\n    if n > 3:\n        res.append(1 + n / 2)\n        if n % 2 == 0:\n            res.append(2 + res[n - 2])\n        else:\n            res.append(3 + res[n - 3])\n    return res\n",
        "num_ids": 127
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    if n <= 0:\n        return list()\n    \n    ans = list()\n    ans.append(3)\n    \n    if n == 1:\n        return ans\n    \n    if n == 2:\n        return ans + [1]\n    \n    if n == 3:\n        return ans + [1, 3]\n",
        "num_ids": 80
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n - 3)\n",
        "num_ids": 52
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    trib = [1, 1]\n    for i in range(1, n):\n        trib.append(trib[i - 1] + trib[i - 2] + trib[i])\n    return trib\n",
        "num_ids": 52
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    s = [3, 1, 3]\n    if n == 0:\n        return s\n    elif n == 1:\n        return s\n    elif n == 2:\n        return s + [1]\n    else:\n        return s + [sum(s[-2:]) + sum(s[-3:])] + [sum(s[-2:])]\n",
        "num_ids": 90
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    res = []\n    if n <= 1:\n        return res\n    else:\n        res.append(1)\n        res.append(1)\n        for i in range(2,n+1):\n            res.append(res[i-2] + res[i-1])\n        return res\n",
        "num_ids": 73
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [1, 1, 2, 3, 4, 7, 13, 24, 44, 81]\n",
        "num_ids": 25
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return []\n    result = []\n    result.append(1)\n    result.append(3)\n    if n == 1:\n        return result\n    result.append(2)\n    if n == 2:\n        return result\n    result.append(5)\n    if n == 3:\n        return result\n    for i in range(3, n + 1):\n        result.append(result[-1] + result[-2] + result[-3])\n    return result\n",
        "num_ids": 122
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [1, 3, 2, 8]\n",
        "num_ids": 13
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    a,b = 0,1\n    seq = [1,1]\n    while len(seq) < n + 1:\n        seq.append(sum(seq[-2:]))\n        a,b = seq[-2],seq[-1]\n    return seq[:n+1]\n",
        "num_ids": 71
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = str(n)\n    result = 1\n    for i in range(len(n)):\n        if int(n[i])%2 == 1:\n            result *= int(n[i])\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    \n    s = \"\"\n    while n > 0:\n        if n % 10 == 0:\n            return 0\n        s += str(n % 10)\n        n //= 10\n    return eval(s)\n",
        "num_ids": 62
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    while n:\n        if n % 10 % 2:\n            return n % 10\n        n //= 10\n    return 0\n",
        "num_ids": 31
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 10:\n        return n\n    result = 1\n    for i in range(1, len(str(n))):\n        if n % 10!= 0:\n            result *= n % 10\n        n //= 10\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return int(n/10)\n",
        "num_ids": 10
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum([int(i) for i in str(n) if int(i) % 2!= 0])\n",
        "num_ids": 28
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 1:\n        return 0\n    # sum the digits\n    total = 0\n    while n > 0:\n        # get the digit\n        n, digit = divmod(n, 10)\n        # if odd, increment the total\n        if digit % 2 == 1:\n            total += digit\n    return total\n",
        "num_ids": 76
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(int(i) for i in str(n) if int(i) % 2)\n",
        "num_ids": 25
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return n % 10 * (n // 10 % 10) * (n // 100 % 10) * (n // 1000) * (n // 10000) * (n // 100000) * (n // 1000000) * (n // 10000000) * (n // 100000000) * (n // 1000000000) * (n // 10000000000) * (n // 1000000000000) * (n // 1000000000000000) * (n // 10000000000000000) * (n // 100000000000000000) * (n // 10000000000000000000) * (n // 10000000000000000000) * (n // 10000000000000000000)\n    \n",
        "num_ids": 138
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    digits = 0\n    while n > 0:\n        # print(n)\n        if n % 10 % 2!= 0:\n            # print(\"Returning\", digits)\n            digits += 1\n        n //= 10\n    return digits\n",
        "num_ids": 59
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # 1. Start with an empty string\n    # 2. Loop through string until we find an open bracket.\n    # 3. Then loop through and check if next char is a close bracket. If so, check for nested brackets. If not, then keep going\n    # 4. If we ever find a close bracket and we didn't find any nested brackets before, then return True\n",
        "num_ids": 83
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    temp = string\n    temp2 = []\n    s = []\n    l = []\n    l1 = []\n    while(temp!= \"}\"):\n        temp = temp[1:]\n        temp = temp.strip()\n        l.append(temp)\n    \n    for i in l:\n        if i == '[' or i == '(':\n            s.append(i)\n        if i == ']':\n            if len(s) > 0:\n                s.pop()\n            else:\n                return False\n        if i == ')':\n            if len(s) > 0:\n                s.pop()\n            else:\n                return False\n    if len(s) > 0:\n        return False\n    else:\n        for i in l:\n            if i == '[':\n                temp2.append(i)\n            if i == ']':\n                temp2.append(i)\n                l1.append(temp2)\n                temp2 = []\n    print(l1)\n    if l1 == []:\n        return False\n    else:\n        for i in range(len(l1)):\n            for j in range(len(l1[i])):\n                if l1[i][j] == ']' and j == 0:\n                    return False\n                if l1[i][j] == '[' and j == len(l1[i])-1:\n                    return False\n        return True\n",
        "num_ids": 336
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    flag = 0\n    if len(string) < 3:\n        return False\n    elif string[0]!= '[':\n        return False\n    for i in range(len(string)):\n        if string[i] == '[':\n            flag += 1\n        elif string[i] == ']':\n            flag -= 1\n        elif string[i] == ']':\n            return False\n        if flag < 0:\n            return False\n    return True\n",
        "num_ids": 111
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return True if string.count('[') == string.count(']') and string.count('[') > 0 else Fals",
        "num_ids": 30
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not string:\n        return False\n    if string[0] == ']':\n        return False\n    if string[0] == '[' and string[1] == '[':\n        return is_nested(string[2:-1])\n    else:\n        return is_nested(string[1:-1])\n",
        "num_ids": 76
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def helper(string,i):\n        if i==len(string):\n            return True\n        if string[i]=='[' and string[i+1]=='[':\n            return helper(string,i+2)\n        if string[i]=='[' and string[i+1]==']':\n            return helper(string,i+2)\n        if string[i]==']' and string[i+1]==']':\n            return helper(string,i+2)\n        if string[i]==']' and string[i+1]=='[':\n            return helper(string,i+2)\n        if string[i]==']' and string[i+1]==']' and string[i+2]=='[':\n            return True\n        return False\n    \n    if helper(string,0):\n        return True\n    return False\n",
        "num_ids": 207
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(string) == 0 or string == None:\n        return False\n    \n    stack = []\n    for bracket in string:\n        if bracket == '[' or bracket == '{' or bracket == '(':\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top == '[' and bracket == ']' or top == '{' and bracket == '}' or top == '(' and bracket == ')' :\n                    continue\n                else:\n                    return False\n    return len(stack) == 0\n",
        "num_ids": 145
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # your code here\n    return not (False in [set(string[i]) <= set(string[i + 1]) for i in range(len(string) - 1)])\n",
        "num_ids": 43
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    if len(string) < 3:\n        return False\n",
        "num_ids": 17
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #string = string.replace(\" \",\"\")\n    #count = 0\n    #for i in range(0, len(string)):\n        #if string[i] == ']':\n            #count -= 1\n        #else:\n            #count += 1\n        #if count == -1:\n            #return True\n    return ']' in string\n    \n    \n    \n",
        "num_ids": 90
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum([pow(i,2) for i in lst])\n",
        "num_ids": 19
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s=0\n    for i in lst:\n        if isinstance(i,int):\n            s+=i**2\n        else:\n            s+=(i/100)**2\n    return s\n",
        "num_ids": 50
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = sum([x**2 for x in lst])\n    return math.ceil(res)\n",
        "num_ids": 26
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        sum += round(lst[i] ** 2, 1)\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum([i ** 2 for i in lst])\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum([int(math.ceil(x * x)) for x in lst])\n    \nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\n",
        "num_ids": 109
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    #raise NotImplementedError(\"Not Implemented\")\n    lst2 = []\n    for i in range(0,len(lst)):\n        lst2.append(lst[i]**2)\n    return sum(lst2)\n",
        "num_ids": 63
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    final_list = []\n    for item in lst:\n        final_list.append(item * item)\n    return sum(final_list)\n",
        "num_ids": 37
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum(x * x for x in lst)\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    lst_sqr = []\n    for i in lst:\n        lst_sqr.append(i**2)\n    return sum(lst_sqr)\n",
        "num_ids": 43
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return txt[-1].isalpha() and not txt.split()[-1]\n",
        "num_ids": 24
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return not(txt[-1].isalpha() and not txt.split(' ')[-1])\n",
        "num_ids": 26
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return txt[-1].isalpha() and txt[-1]!=''\n",
        "num_ids": 23
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    is_letter = False\n",
        "num_ids": 8
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return not(txt[-1].isalpha() and txt.split()[-1])\n",
        "num_ids": 24
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return not any(char.isalpha() for char in txt) and not any(char.isspace() for char in txt)\n",
        "num_ids": 33
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (txt[-1].isalpha() and txt.count(' ') == 0)\n",
        "num_ids": 24
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return True if txt[-1].isalpha() and not txt[-1].isnumeric() and txt[-1].isalpha() and len(txt) > 1 else False\n",
        "num_ids": 46
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # return the index of the first element that is not greater than or\n    # equal to the element immediately preceding it\n    # try to find a way to solve this problem using only a hash table or a\n    # binary search tree\n",
        "num_ids": 52
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    index = -1\n    arr.sort()\n    for i in range(len(arr) - 1):\n        if arr[i] <= arr[i + 1]:\n            index = i + 1\n    return index\n",
        "num_ids": 52
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Start the search from the last element of the array\n    # and search for the greatest element which is\n    # greater than or equal to the element at the front.\n    # Return the index of the element if it exists.\n    # If it does not exist, return -1\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            continue\n        else:\n            return i-1\n    return -1\n",
        "num_ids": 108
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    _max = -1\n    for i, x in enumerate(arr):\n        if x > _max:\n            _max = x\n            _index = i\n    return _index\n",
        "num_ids": 45
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    arr = sorted(arr)\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i - 1] < arr[i]:\n            max_index = i\n        else:\n            break\n    return max_index\n",
        "num_ids": 65
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # arr = sorted(arr, key=lambda x:x)\n    last = -1\n    for i, x in enumerate(arr):\n        if x >= last:\n            last = x\n        else:\n            return i\n    return -1\n",
        "num_ids": 60
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    last_element = len(arr)-1\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return -1\n        if arr[i] > last_element:\n            return last_element\n        last_element = i\n",
        "num_ids": 69
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    arr = sorted(arr)\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] >= arr[i + 1]:\n            return i\n        i += 1\n    return -1\n",
        "num_ids": 54
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not arr:\n        return -1\n    i = 1\n    while i < len(arr):\n        if arr[i-1] > arr[i]:\n            break\n        i += 1\n    return i - 1 if i > 0 else -1\n",
        "num_ids": 61
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def can_arrange_helper(arr, k):\n        for i in range(1, len(arr)):\n            if arr[i] >= arr[i - 1] and k == i:\n                return k\n        return -1\n    \n    return can_arrange_helper(arr, -1)\n",
        "num_ids": 76
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    a = None\n    b = None\n    for num in lst:\n        if num < 0:\n            if a == None or num > a:\n                a = num\n        elif num > 0:\n            if b == None or num < b:\n                b = num\n    return (a, b)\n",
        "num_ids": 74
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not lst:\n        return (None, None)\n    elif not any(i > 0 for i in lst):\n        return (None, None)\n    elif not any(i < 0 for i in lst):\n        return (None, None)\n    else:\n        negative = [i for i in lst if i < 0]\n        negative.sort()\n        positive = [i for i in lst if i > 0]\n        positive.sort()\n        return (negative[-1], positive[0])\n",
        "num_ids": 125
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # if lst == []:\n    #     return (None, None)\n    # elif lst == [0]:\n    #     return (None, None)\n    # elif lst == [-1]:\n    #     return (-1, 1)\n    # elif lst == []:\n    #     return (None, None)\n    # else:\n    if lst == []:\n        return (None, None)\n    else:\n        max_num = max(lst)\n        min_num = min(lst)\n        if max_num > 0:\n            return (max_num, min_num)\n        elif max_num < 0:\n            return (min_num, max_num)\n        else:\n            return (None, None)\n",
        "num_ids": 184
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    nums = []\n    for num in lst:\n        if num < 0:\n            nums.append(num)\n        elif num > 0:\n            nums.append(num)\n    if not nums:\n        return (None, None)\n    elif len(nums) == 1:\n        return (nums[0], nums[0])\n    elif nums[0] >= nums[1]:\n        return (nums[0], nums[1])\n    else:\n        return (nums[0], nums[1])",
        "num_ids": 135
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Find the largest negative integer\n    neg_int = 0\n    for item in lst:\n        if item < 0:\n            neg_int = item\n            break\n",
        "num_ids": 41
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n    if not lst:\n        return (None, None)\n    max_num = None\n    min_num = None\n    for i in lst:\n        if max_num == None or i > max_num:\n            max_num = i\n    for i in lst:\n        if min_num == None or i < min_num:\n            min_num = i\n    return (min_num, max_num)\n",
        "num_ids": 108
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if lst == []:\n        return (None, None)\n    if min(lst) < 0:\n        a = max(lst)\n        b = min(lst)\n    else:\n        a = min(lst)\n        b = max(lst)\n    return (a, b)\n",
        "num_ids": 76
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not lst:\n        return (None, None)\n    negative_num = max(lst)\n    positive_num = min(lst)\n",
        "num_ids": 38
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    positive = 0\n    negative = 0\n    # edge cases:\n    if len(lst) == 0:\n        return (None, None)\n    elif lst == []:\n        return (None, None)\n    # go through the list and calculate the negative and positive integers\n    for item in lst:\n        if item > 0:\n            positive += 1\n        elif item < 0:\n            negative += 1\n    # then return the highest and lowest value\n    if positive > negative:\n        return (negative, positive)\n    else:\n        return (positive, negative)\n",
        "num_ids": 137
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    smallest, largest = None, None\n    for n in lst:\n        if n < 0:\n            if smallest is None or n < smallest:\n                smallest = n\n        else:\n            if largest is None or n > largest:\n                largest = n\n    return (smallest, largest)\n",
        "num_ids": 72
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 82
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if a == b:\n        return None\n    if type(a) == type(b):\n        return a if a > b else b\n    if type(a) == type(1):\n        if type(b) == type(1):\n            return int(a) if a > b else b\n        return float(a) if a > b else b\n    if type(a) == type(1.2):\n        if type(b) == type(1.2):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.3):\n        if type(b) == type(1.3):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.5):\n        if type(b) == type(1.5):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.6):\n        if type(b) == type(1.6):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.7):\n        if type(b) == type(1.7):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.8):\n        if type(b) == type(1.8):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.9):\n        if type(b) == type(1.9):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.1):\n        if type(b) == type(1.1):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.2):\n        if type(b) == type(1.2):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.3):\n        if type(b) == type(1.3):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.5):\n        if type(b) == type(1.5):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.6):\n        if type(b) == type(1.6):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.7):\n        if type(b) == type(1.7):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.8):\n        if type(b) == type(1.8):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.9):\n        if type(b) == type(1.9):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.1):\n        if type(b) == type(1.1):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.2):\n        if type(b) == type(1.2):\n            return float(a) if a > b else b\n        return int(a) if a > b else b\n    if type(a) == type(1.3):\n        if type(b) == type",
        "num_ids": 1024
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    if isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\", \"\")\n        b = b.replace(\",\", \"\")\n        if a < b:\n            return a\n        if a > b:\n            return b\n    if isinstance(a, int) and isinstance(b, float):\n        return a\n    if isinstance(a, float) and isinstance(b, int):\n        return b\n    return None\n",
        "num_ids": 167
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a == b:\n        return None\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 31
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 20
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if type(a) == type(b):\n        return None if a < b else b\n    elif type(a) == type(b):\n        return a if a < b else b\n    elif type(a) == type(b):\n        return a if a > b else b\n    else:\n        return str(a) if a > b else str(b)\n",
        "num_ids": 89
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return a if a > b else b\n    # return str(a) if type(a) == str else compare_two(a, b)\n",
        "num_ids": 35
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if type(a)!= type(b):\n        return None\n    elif a < b:\n        return b\n    else:\n        return a\n",
        "num_ids": 37
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a > b:\n        return a\n    if a == b:\n        return None\n    if isinstance(a, int) or isinstance(a, float):\n        return a if a > b else b\n    if isinstance(a, str) or isinstance(a, str):\n        return a if a > b else b\n",
        "num_ids": 79
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return n % 2 == 0 and n % 4 == 0\n",
        "num_ids": 15
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n % 2!= 0:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return n % 2 == 0 and n >= 4\n",
        "num_ids": 13
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n = int(n)\n    if n <= 0:\n        return False\n    for i in range(1, n):\n        if i%2 == 0 and i!= 2:\n            return False\n        if i%2 == 1 and i!= 3:\n            return False\n    if n%2 == 0:\n        return False\n    return True\n",
        "num_ids": 84
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return n%2 == 0 and n%2 == 1 and n%2 == 0 and n%2 == 0\n",
        "num_ids": 27
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not isinstance(n, int) or n < 0:\n        return False\n    if n < 4:\n        return False\n    for i in range(4,n+1):\n        if i % 2!= 0:\n            continue\n        if n - i < 2:\n            return False\n        elif n - i > i and n - i % 2 == 0:\n            return False\n    return True",
        "num_ids": 96
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return n % 2 == 0 and n % 4 == 0\n",
        "num_ids": 15
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n % 2!= 0:\n        return False\n    return is_equal_to_sum_even(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sum_even_numbers = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_even_numbers += i\n    return sum_even_numbers == n\n",
        "num_ids": 50
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(3, n // 2):\n        if n - i < 0:\n            break\n        if is_prime(i) and is_prime(n - i):\n            return True\n    return False",
        "num_ids": 51
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return factorial(n)",
        "num_ids": 8
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    fact = 1\n    for i in range(n):\n        fact *= (n - i)\n        fact *= (i + 1)\n        \n    return fact\n    \nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert special_factorial(4) == 24, \"First example\"\n    assert special_factorial(6) == 720, \"Second example\"\n    assert special_factorial(8) == 40320, \"Third example\"\n    assert special_factorial(11) == 26227020, \"Fourth example\"\n    assert special_factorial(0) == 1, \"Fifth example\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\"",
        "num_ids": 185
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    ...\n",
        "num_ids": 4
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    brazilian_factorial = 1\n",
        "num_ids": 13
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    \n    factorial = 1\n    for i in range(n, 1, -1):\n        factorial = factorial * i\n    return factorial\n",
        "num_ids": 61
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    return n * special_factorial(n - 1)\n",
        "num_ids": 26
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    factorial = 1\n    for i in range(n):\n        factorial *= n\n    return factorial\n",
        "num_ids": 28
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    factorial = 1\n    if n == 1:\n        return factorial\n    else:\n        factorial *= n\n        return factorial\n",
        "num_ids": 35
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if \" \" not in text: return text\n    # Remove all spaces\n    text = text.replace(\" \",\"\")\n",
        "num_ids": 29
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code here\n    return text.replace(' ', '_')\n",
        "num_ids": 18
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return re.sub(r' +', '-', text.strip().replace(' ', '_'))\n",
        "num_ids": 26
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    text = text.replace(\" \", \"_\")\n    i = 1\n    while i < len(text)-1:\n        if text[i] == \" \" and text[i+1] == \" \":\n            text = text[:i+1] + \"_\" + text[i+1:]\n        else:\n            i += 1\n    return text\n",
        "num_ids": 83
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # TODO: Fix this\n    return text\n",
        "num_ids": 13
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    words = text.split()\n    return '_'.join(words)\n",
        "num_ids": 19
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return re.sub(' +', '_', text)\n",
        "num_ids": 15
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n",
        "num_ids": 17
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if text == \"\":\n        return \"\"\n    return text.replace(\" \", \"_\")\n",
        "num_ids": 22
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # first, split string into list\n    temp = text.split()\n    # create a new list\n    new_text = []\n    # loop through each element\n    for word in temp:\n        # split each word into a list\n        temp2 = word.split()\n        # loop through each word\n        for word2 in temp2:\n            # replace spaces with underscores\n            word2 = word2.replace(' ', '_')\n            # append each word to new_text\n            new_text.append(word2)\n        # join the new list into a string with spaces between words\n        word =''.join(new_text)\n        # append new word to new_text\n        new_text.append(word)\n        # reset new_text\n        new_text = []\n    return ''.join(new_text)\n",
        "num_ids": 192
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if '.' in file_name and len(file_name) <= 3:\n        sub_str = file_name[0]\n        if sub_str.isalpha():\n            if sub_str.lower() in \"abcdefghijklmnopqrstuvwxyz\":\n                if file_name[1:].isalpha() and file_name[1:].lower() in \"abcdefghijklmnopqrstuvwxyz\":\n                    if file_name[2:].lower() in 'txt exe dll'.split():\n                        return \"Yes\"\n                    else:\n                        return \"No\"\n                else:\n                    return \"No\"\n            else:\n                return \"No\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n",
        "num_ids": 186
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #TODO: Your code here!\n    pass\n",
        "num_ids": 15
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    a = False\n    b = False\n    c = False\n    if len(file_name) < 3:\n        a = False\n    else:\n        a = True\n    if file_name[0].isalpha() == False:\n        b = False\n    else:\n        b = True\n    if file_name.count('.')!= 1:\n        c = False\n    else:\n        c = True\n    if a and b and c:\n        return 'Yes'\n    else:\n        return 'No'\n    \n",
        "num_ids": 126
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(file_name) > 3:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    if not file_name[0].isalpha() or not file_name[0].isupper():\n        return 'No'\n    if file_name[file_name.index('.') + 1].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 110
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if not isinstance(file_name, str):\n        raise TypeError(\"File name must be a string.\")\n",
        "num_ids": 29
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(file_name)!= 0:\n        count_1 = file_name.count(\".\")\n        if count_1 == 1:\n            count_2 = file_name.split(\".\")\n            count_3 = 0\n            for i in range(len(count_2)):\n                if count_2[i][0].isalpha() or count_2[i][0] == \".\":\n                    count_3 += 1\n            if count_2[0][0].isalpha():\n                if count_3 == 1:\n                    if count_2[1] in [\"txt\", \"exe\", \"dll\"]:\n                        return \"Yes\"\n                    else:\n                        return \"No\"\n                else:\n                    return \"No\"\n            else:\n                return \"No\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n",
        "num_ids": 202
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    # Check if the file's name is valid\n    if (len(file_name) > 3 or not file_name.isalpha() or file_name.startswith('.') or file_name[-3:]!= 'txt'):\n        return 'No'\n    \n    # Check if the file's name has exactly one '.'\n    elif (file_name.find('.') == -1):\n        return 'No'\n    \n    # Check if the file's name has the proper format\n    elif (not file_name[:-3].isalnum() or file_name[-3:]!= 'txt'):\n        return 'No'\n    \n    # Check if the file's name is proper\n    elif (file_name.find('.')!= 0):\n        if (file_name[:-3].isalpha()):\n            return 'Yes'\n    \n    # Check if the file's name starts with a latin alphapet letter\n    else:\n        if (file_name[0].isalpha()):\n            return 'Yes'\n        \n    return 'No'\n",
        "num_ids": 259
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    file_name = file_name.lower()\n    if len(file_name) > 3:\n        if len(file_name) == 4 and file_name[0] == '.':\n            if file_name[1].isalpha() and file_name[2] == '.':\n                if file_name[3] == '.':\n                    for ext in ['txt', 'exe', 'dll']:\n                        if file_name[4:] == ext:\n                            return 'Yes'\n                    return 'No'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "num_ids": 162
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    file_name = file_name.lower()\n    file_name = file_name.split('.')\n    if len(file_name)!= 3:\n        return \"No\"\n    if file_name[0] == '':\n        return \"No\"\n    if len(file_name[0]) > 3:\n        return \"No\"\n    if file_name[0][0] not in 'abcdefghijklmnopqrstuvwxyz':\n        return \"No\"\n    if len(file_name[1]) > 3:\n        return \"No\"\n    if file_name[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    if len(file_name[2]) > 3:\n        return \"No\"\n    if file_name[2] not in 'txt', 'exe', 'dll':\n        return \"No\"\n    return \"Yes\"\n",
        "num_ids": 217
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # string = \"\".join(file_name.split(\".\"))\n    if file_name[0].isalpha() and file_name.count(\".\") == 1 and file_name[0].lower() in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n        if file_name[1:].lower() in ['txt','exe','dll']:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'",
        "num_ids": 150
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = 0\n    for i in range(len(lst)):\n        if i%3==0:\n            s += lst[i]*lst[i]\n        elif i%4==0:\n            s += lst[i]*lst[i]*lst[i]\n    return s\n",
        "num_ids": 78
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    output = 0\n    for i in lst:\n        if i%3==0:\n            output+=i**2\n        elif i%4==0:\n            output+=i**3\n    return output\n    \n    \n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    new_list = []\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            new_list.append(lst[i]**2)\n        elif i % 4 == 0 and i % 3!= 0:\n            new_list.append(lst[i]**3)\n    return sum(new_list)\n",
        "num_ids": 95
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            count += i * i\n        elif i % 3!= 0 and i % 4 == 0:\n            count += i * i * i\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            sum += i ** 3\n    return sum\n",
        "num_ids": 58
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sum_squares = 0\n    \n    if lst == []:\n        return 0\n        \n    if any(isinstance(x, bool) for x in lst):\n        return 0\n",
        "num_ids": 47
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(len(lst)):\n        if i%3==0:\n            lst[i]=lst[i]**2\n        elif i%4!=0:\n            lst[i]=lst[i]\n    return sum(lst)\n    \n",
        "num_ids": 70
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if i%3 == 0 and i%4 == 0:\n            total += lst[i]**2\n        elif i%3 == 0:\n            total += lst[i]**2\n        elif i%4 == 0:\n            total += lst[i]**3\n    return total\n",
        "num_ids": 91
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    result = 0\n    for x in range(len(lst)):\n        if x % 3 == 0 or x % 4 == 0:\n            result += lst[x]**2\n        else:\n            result += lst[x]**3\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    output = 0\n    for item in lst:\n        if item%3 == 0:\n            output += item**2\n        if item%4!= 0:\n            output += item\n    return output\n",
        "num_ids": 49
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert 1 <= len(sentence) <= 100\n    assert all(i.isalpha() for i in sentence)\n",
        "num_ids": 28
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join(sorted(set(sentence.split()), key=len)[::-1])\n",
        "num_ids": 27
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # TODO: Write your code here\n    return\n",
        "num_ids": 14
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    words = sentence.split()\n    # output = []\n    # for word in words:\n    #     if isPrime(len(word)):\n    #         output.append(word)\n    return \" \".join(sorted(words, key=lambda word: len(word)))\n",
        "num_ids": 67
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # your code here\n    return None\n",
        "num_ids": 11
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not sentence:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Write your code here\n",
        "num_ids": 8
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    words = sentence.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    res = \"\"\n    p = prime_numbers_from_2_to_10_from_start()\n    for c in sentence.split():\n        if len(c) in p:\n            res += c + \" \"\n    return res.strip()\n",
        "num_ids": 61
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    words = sentence.split()\n",
        "num_ids": 9
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x == int(x) / int(n)\n",
        "num_ids": 15
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    # Convert string to float\n    x = float(x)\n    n = float(n)\n    # x = x/n\n    # Get the n as the gcd of x and n\n    gcd = math.gcd(x, n)\n    \n    return gcd == 1\n",
        "num_ids": 71
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if (float(x.replace(\"/\", \".\")) == float(n.replace(\"/\", \".\"))):\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    denom = int(n)\n    num = int(x)\n",
        "num_ids": 18
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code here\n    x=x.split(\"/\")\n    n=n.split(\"/\")\n    if x[0]==n[0]:\n        return False\n    elif int(x[0])*int(n[0])==int(x[1])*int(n[1]):\n        return True\n    return False\n",
        "num_ids": 83
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    x_n = str(x) + \"/\" + str(n)\n    try:\n        float(x_n)\n        return False\n    except:\n        return True\n",
        "num_ids": 43
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    x, n = x.split(\"/\")\n    if n == \"1\":\n        return True\n    elif n == \"0\":\n        return False\n    else:\n        return simplify(x, n)\n",
        "num_ids": 51
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = str(n)\n    x = str(x)\n    if len(n) == 0:\n        return False\n    if len(x) == 0:\n        return False\n    try:\n        n = int(n)\n        x = int(x)\n        return not n % x == 0\n    except:\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    num, denom = str2num(x), str2num(n)\n    return (num * denom)//int(num / denom) == int(num / denom)\n",
        "num_ids": 45
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    try:\n        int(x[0])\n        int(x[2])\n        int(n[0])\n        int(n[2])\n",
        "num_ids": 37
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(nums, key=sum)\n",
        "num_ids": 13
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = 0\n    for n in nums:\n        s += n\n    nums.sort(key = lambda x: s*x)\n    return nums\n",
        "num_ids": 40
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = []\n    sorted_nums = sorted(nums)\n    for num in sorted_nums:\n        sum = 0\n        while num:\n            sum += num % 10\n            num //= 10\n        result.append(num)\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # sort the array with the index\n    nums.sort(key=lambda x: x[0] * 10 + x[1])\n    return nums\n",
        "num_ids": 38
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    nums = sorted(nums)\n    \n    i, j = 0, len(nums) - 1\n    \n    while i < j:\n        while i < j and nums[i] == 0:\n            i += 1\n        while i < j and nums[j] == 0:\n            j -= 1\n        if nums[i] + nums[j] < 0:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n        elif nums[i] + nums[j] > 0:\n            nums[i], nums[j] = nums[j], nums[i]\n            j -= 1\n    return nums\n",
        "num_ids": 173
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), x))\n",
        "num_ids": 30
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not nums:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    nums = sorted(nums, key=lambda num: (sum([int(digit) for digit in str(num)]), num))\n    return nums\n",
        "num_ids": 38
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(nums) < 2: return nums\n",
        "num_ids": 15
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def calculate_sum(n):\n        return sum([int(i) for i in str(n)])\n    def order_items(items):\n        return sorted(items, key=lambda item: (calculate_sum(item), item))\n",
        "num_ids": 59
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum(1 for x in nums if x > 10 and x % 2 == 1)\n",
        "num_ids": 23
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for num in nums:\n        if (num > 10 and num % 2!= 0 and num // 10 % 2!= 0):\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # O(n^2) time | O(1) space\n    return sum(1 for num in nums if num > 10 and num % 2 and num % 10 % 2)",
        "num_ids": 42
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    even_odd = {}\n    for i in nums:\n        odd_even = \"odd\" if i % 2 else \"even\"\n        if odd_even in even_odd:\n            even_odd[odd_even] += 1\n        else:\n            even_odd[odd_even] = 1\n    return sum([1 for k, v in even_odd.items() if k == \"odd\" and v > 1])\n",
        "num_ids": 100
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    numList = []\n    for num in nums:\n        numList.append(num)\n    return len([n for n in numList if n > 10 and n % 2!= 0])\n",
        "num_ids": 47
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    nums = sorted(nums)\n    length = len(nums)\n    count = 0\n    for i in range(length):\n        if (nums[i] > 10) and (nums[i][0] % 2!= 0) and (nums[i][-1] % 2!= 0):\n            count += 1\n    return count\n",
        "num_ids": 86
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(len(nums)):\n        if (nums[i] > 10 and nums[i] % 2!= 0):\n            return i\n    return 0\n",
        "num_ids": 45
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    odd_nums = []\n    for num in nums:\n        if (num > 10 and num < 100 and num % 2!= 0) and (num % 10 % 2 == 1):\n            odd_nums.append(num)\n    return len(odd_nums)\n",
        "num_ids": 67
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    count = 0\n    for i in range(len(nums)):\n        if ((nums[i] > 10) and (nums[i] % 2!= 0)):\n            count += 1\n    \n    return count\n",
        "num_ids": 58
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    count = 0\n",
        "num_ids": 8
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    a = [0] * n\n    a[0] = 1\n    for i in range(1, n):\n        a[i] = 1 + (i-1)*(i-1)\n    return sum(a) % 3\n",
        "num_ids": 57
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # ==========\n    # Runtime / memory\n    # ==========\n    # O(n) / O(n)\n",
        "num_ids": 31
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def helper(n):\n        # helper(n) : the number of triples (a[i], a[j], a[k])\n        # where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n        # The number of such triples is n * (n - 1) * n / 6\n        result = 0\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if a[i] + a[j] + a[k] % 3 == 0:\n                        result += 1\n        return result\n    a = [i for i in range(1, n + 1)]\n    return helper(n)\n",
        "num_ids": 183
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a = [1]\n    for i in range(1, n):\n        a.append(i * i - i + 1)\n    return a.count(a[i] + a[j] + a[k]",
        "num_ids": 53
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            k = n - i - j\n            if i * i - i + 1 == j * j - j + 1 == k * k - k + 1:\n                result += 1\n    return result\n",
        "num_ids": 75
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def check(a, l, r):\n        ans = 0\n        for i in range(l, r):\n            for j in range(l, r):\n                k = i + j + l\n                if k == a[i] + a[j] + a[l]:\n                    ans += 1\n        return ans\n    \n    return check(list(range(1, n+1)), 0, n)\n",
        "num_ids": 97
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i + 1) * (j + 1) - i > 0 and (i + 1) * (j + 1) - i % 3 == 0:\n                res += 1\n    return res\n",
        "num_ids": 74
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets:\n        planets.remove(planet1)\n    if planet2 in planets:\n        planets.remove(planet2)\n    min = planets[0]\n    for i in range(1, len(planets)):\n        if calcDistance(planet1, planet2) < calcDistance(planets[i], min):\n            min = planets[i]\n    return (min)\n",
        "num_ids": 134
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    planet_dict = {\n        \"Mercury\": \"Venus\",\n        \"Venus\": \"Earth\",\n        \"Earth\": \"Mars\",\n        \"Mars\": \"Jupiter\",\n        \"Jupiter\": \"Saturn\",\n        \"Saturn\": \"Uranus\",\n        \"Uranus\": \"Neptune\"\n    }\n",
        "num_ids": 80
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    planet1 = planets[planet1]\n    planet2 = planets[planet2]\n    bf = planet1[\"orbit\"].union(planet2[\"orbit\"])\n    bf = bf.difference(set(planets.keys()))\n    bf = sorted(bf)\n    return bf\n",
        "num_ids": 70
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    planets = planet_dict()\n    \n    def get_orbital_distance(planet1, planet2):\n        \"\"\"Computes the orbital distance between planet1 and planet2\"\"\"\n        # planet1 = planets[planet1]\n        # planet2 = planets[planet2]\n        # Earth = planets[\"Earth\"]\n        # Mercury = planets[\"Mercury\"]\n        # Venus = planets[\"Venus\"]\n        # Mars = planets[\"Mars\"]\n        # Jupiter = planets[\"Jupiter\"]\n        # Saturn = planets[\"Saturn\"]\n        # Uranus = planets[\"Uranus\"]\n        # Neptune = planets[\"Neptune\"]\n        \n        distance = (planet1.distance(planet2) + planet2.distance(planet1)) / 2\n        return distance\n    \n    #         if planet1 == \"Earth\":\n    #             distance = (planet1.distance(planet2) + planet2.distance(planet1)) / 2\n    #         else:\n    #             planet_distance = get_orbital_distance(planet1, planet2)\n    #             distance = (planet1.distance(planet2) + planet2.distance(planet1)) / 2 - planet_distance\n    #     return distance\n    \n    distance = get_orbital_distance(planets[planet1], planets[planet2])\n    \n    return sorted(planets, key=lambda planet: planets[planet].distance(Sun))\n",
        "num_ids": 327
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    planets = {\n        \"Mercury\": 0,\n        \"Venus\": 0,\n        \"Earth\": 0,\n        \"Mars\": 0,\n        \"Jupiter\": 0,\n        \"Saturn\": 0,\n        \"Uranus\": 0,\n        \"Neptune\": 0\n    }\n    for planet in planets.keys():\n        if planet == planet1:\n            planets[planet] = planets[planet1] + 1\n        elif planet == planet2:\n            planets[planet] = planets[planet2] + 1\n        else:\n            planets[planet] = planets[planet1] + planets[planet2]\n    return planets",
        "num_ids": 155
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    planet1 = planets.index(planet1)\n    planet2 = planets.index(planet2)\n    result = []\n    if planet1 > planet2:\n        planet1, planet2 = planet2, planet1\n    for i in range(planet1 - 1, planet2):\n        result.append(planets[i])\n    return tuple(result)\n",
        "num_ids": 122
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if planet1 not in planets:\n        return()\n    if planet2 not in planets:\n        return()\n    \n    planet1_location = planets[planet1]\n    planet2_location = planets[planet2]\n    \n    dif = planet1_location[0] - planet2_location[0]\n    if dif > 0:\n        return ((planet1, planet2))\n    elif dif < 0:\n        return ((planet2, planet1))\n    elif dif == 0:\n        return((planet1, planet2))\n",
        "num_ids": 131
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # First find the planets \n    planet1 = \"Mercury\" if planet1 not in planets else planet1\n    planet2 = \"Venus\" if planet2 not in planets else planet2\n    # Sort by proximity to Sun\n    planet1_pos = planets.index(planet1)\n    planet2_pos = planets.index(planet2)\n    if planet1_pos < planet2_pos:\n        return (planets[planet2_pos + 1:planet1_pos],)\n    elif planet1_pos > planet2_pos:\n        return (planets[planet1_pos + 1:planet2_pos],)\n    else:\n        return (planets[planet1_pos + 1:planet2_pos],)\n",
        "num_ids": 172
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    planet_list = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planet_list or planet2 not in planet_list:\n        return ()\n",
        "num_ids": 62
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets:\n        return tuple()\n    if planet2 not in planets:\n        return tuple()\n    if planet1 == planet2:\n        return tuple()\n    return tuple(sorted(planets, key = lambda i: i.lower()))\n    \n",
        "num_ids": 103
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    out = []\n    for i in lst:\n        if len(i) > 0 and not i.isdigit():\n            out.append(i)\n    l = len(lst)\n    for i in range(len(out)):\n        if i == 0:\n            out[i] = out[i]\n        elif out[i] == out[i - 1]:\n            out[i] = out[i - 1]\n        else:\n            out[i] = out[i - 1] + out[i]\n    out.sort()\n    return out\n",
        "num_ids": 138
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # using sorted() to sort\n    lst = sorted(lst)\n    # delete the word that has odd length\n    for i in range(len(lst)):\n        if len(lst[i]) % 2!= 0:\n            del lst[i]\n    return lst\n",
        "num_ids": 71
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    pass\n",
        "num_ids": 6
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst.sort(key=len)\n    return list(map(lambda x: x[0], lst))\n",
        "num_ids": 29
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Sort the list of strings in ascending order by length of the string\n    sorted_lst = sorted(lst, key=lambda x: len(x))\n    # Check whether a word has odd length or not\n    odd_lst = [s for s in sorted_lst if len(s) % 2!= 0]\n    # Remove words that have odd length\n    return sorted_lst[:len(odd_lst)]\n",
        "num_ids": 103
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    lst = delete_odd(lst)\n    return sorted(lst)\n",
        "num_ids": 21
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = []\n    for word in lst:\n        if len(word) % 2!= 0:\n            result.append(word)\n    return sorted(result)\n",
        "num_ids": 42
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    list_of_words = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            list_of_words.append(word)\n    return sorted(list_of_words, key=len)\n",
        "num_ids": 57
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #new_lst = list(lst)\n    #new_lst.sort(key=len)\n    #return new_lst\n    sorted_lst = []\n    for word in lst:\n        if len(word)%2 == 0:\n            continue\n        else:\n            sorted_lst.append(word)\n    for i in sorted(sorted_lst, key=len):\n        print(i)\n    return sorted_lst\n",
        "num_ids": 114
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(lst, key=lambda x: (len(x), x))\n",
        "num_ids": 21
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not is_prime(n):\n        return y\n    else:\n        return x\n",
        "num_ids": 23
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    if n % x == 0:\n        return x\n    if n % y == 0:\n        return y\n    if n!= x or n!= y:\n        return n\n",
        "num_ids": 46
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n % 2 == 0:\n        return x\n    return y\n",
        "num_ids": 18
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n % x == 0 and n % y == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 28
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n % x == 0:\n        return x\n    elif n % y == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 36
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert(x >= 1)\n    assert(y >= 1)\n    if is_prime(n):\n        return x\n    else:\n        return y\n    \ndef prime_exponents(n):\n    \"\"\"Returns a list of pairs of primes, p_1, p_2,..., p_n, \n    such that p_1^2... p_n^2 = n. \n    \n    Examples:\n    prime_exponents(12) == [(2, 6), (3, 4), (5, 2)]\n    \n    \"\"\"\n    assert(n >= 2)\n    primes = list()\n    for i in range(2, n+1):\n        if i == 1:\n            continue\n        prime = True\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                prime = False\n                break\n        if prime == True:\n            primes.append(i)\n    \n    return list(zip(primes, range(len(primes))))\n",
        "num_ids": 246
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n        \nprint(x_or_y(7, 34, 12)",
        "num_ids": 38
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n in primes:\n        return x\n    return y\n",
        "num_ids": 17
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x if n % 2 == 0 else y\n",
        "num_ids": 13
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n in n_for_xor_y:\n        return n_for_xor_y[n]\n    if n%2==0:\n        return x\n    else:\n        return y\n",
        "num_ids": 50
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sum = 0\n    \n    #Find odd and even numbers\n    odd = 0\n    even = 0\n    \n    for i in range(len(lst)):\n        if(lst[i] % 2!= 0):\n            odd += lst[i] ** 2\n        else:\n            even += lst[i] ** 2\n    return(odd + even)\n    \ndef half_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    half_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    half_the_difference([-1, -2, 0]) == 0\n    half_the_difference([9, -2]) == 81\n    half_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum = 0\n    \n    #Find odd and even numbers\n    odd = 0\n    even = 0\n    \n    for i in range(len(lst)):\n        if(lst[i] % 2!= 0):\n            odd += lst[i] ** 2\n        else:\n            even += lst[i] ** 2\n    return(odd - even)\n",
        "num_ids": 327
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(i**2 for i in lst if not i % 2 and i >= 0)\n",
        "num_ids": 24
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    total = 0\n    for num in lst:\n        if num > 0:\n            total += num**2\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    nums = []\n    for num in lst:\n        if type(num) == int:\n            nums.append(num)\n    total = 0\n    for i in nums:\n        if i % 2 == 1:\n            total += i**2\n    return total\n",
        "num_ids": 67
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1:\n            count += lst[i] ** 2\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    odd_list = [num for num in lst if num % 2]\n    if len(odd_list) == 0:\n        return 0\n    else:\n        return sum(num*num for num in odd_list)\n",
        "num_ids": 54
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if lst == []:\n        return 0\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 1:\n            odd_sum += num\n        else:\n            even_sum += num\n    return odd_sum + even_sum\n",
        "num_ids": 72
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # Your code here\n    sum_ = 0\n    for i in range(len(lst)):\n        if type(lst[i]) == int and lst[i] % 2 == 1:\n            sum_ += lst[i]**2\n    return sum_",
        "num_ids": 67
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    total = 0\n    for n in lst:\n        if n % 2:\n            total += n ** 2\n    return total\n",
        "num_ids": 32
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #if the input list is empty, return 0\n    if not lst:\n        return 0\n    #loop over each element in the list\n    for i in range(len(lst)):\n        #if the element is not a positive integer, skip it\n        if not isinstance(lst[i], int) or lst[i] < 0:\n            continue\n        #add the current element squared to the sum\n        sum += lst[i] ** 2\n    #return the sum\n    return sum\n",
        "num_ids": 119
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert len(game) == len(guess)\n    #print(game,guess)\n    result = []\n    for i in range(len(game)):\n        #print(i)\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result\n",
        "num_ids": 94
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    guesses = []\n    result = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            guesses.append(0)\n        else:\n            guesses.append(abs(game[i] - guess[i]))\n    for i in range(len(guesses)):\n        result.append(guesses[i] - guesses[i - 1])\n    return result\n",
        "num_ids": 104
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    out = []\n    for i in range(len(guess)):\n        if guess[i]!= game[i]:\n            out.append(abs(guess[i]-game[i]))\n        else:\n            out.append(0)\n    return out\n",
        "num_ids": 66
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n = len(game)\n    m = len(guess)\n    if n!= m:\n        print(\"Size mismatch\")\n        return\n    \n    #to prevent guessing same numbers twice\n    new_guess = []\n    for i in range(0,m):\n        if guess[i]!= game[i]:\n            new_guess.append(i)\n            \n    #to avoid the last guess from being missing\n    if len(new_guess) == 0:\n        new_guess.append(m)\n        \n    \n    #checking if match\n    match = []\n    for i in range(0,len(new_guess)):\n        if guess[new_guess[i]] == game[new_guess[i]]:\n            match.append(0)\n        else:\n            match.append(abs(guess[new_guess[i]] - game[new_guess[i]]))\n    \n    return match\n    \nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))",
        "num_ids": 292
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    return abs((game - guess))\n",
        "num_ids": 12
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    return (np.abs(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(guess,game),game),guess),guess),guess))).tolist()\n",
        "num_ids": 62
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    res = []\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            res.append(0)\n        else:\n            diff = abs(guess[i]-game[i])\n            res.append(diff)\n    return res\n",
        "num_ids": 69
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return scores-guess\n",
        "num_ids": 8
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    res = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            res.append(0)\n        else:\n            res.append(abs(guess[i] - game[i]))\n    return res\n    \n    \n    \n",
        "num_ids": 72
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    c = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            c.append(0)\n        else:\n            c.append(abs(game[i] - guess[i]))\n    return c\n",
        "num_ids": 64
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    extensions = sorted(extensions)\n    max_extension = extensions[0]\n    i = 0\n    while i < len(extensions):\n        extension = extensions[i]\n        if extension.isupper():\n            if extension.upper() > max_extension.upper():\n                max_extension = extension\n        if extension.islower():\n            if extension.lower() > max_extension.lower():\n                max_extension = extension\n        i += 1\n    return class_name + \".\" + max_extension\n",
        "num_ids": 127
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    str_ = class_name\n    for i in range(len(extensions)):\n        str_ = str_ + '.' + extensions[i]\n    return str_",
        "num_ids": 41
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    highest_strength = float(\"-inf\")\n    strongest_name = \"\"\n    for extension in extensions:\n        extension_strength = -1 * sum([1 if letter.isupper() else 0 for letter in extension]) - sum([1 if letter.islower() else 0 for letter in extension])\n        if extension_strength > highest_strength:\n            highest_strength = extension_strength\n            strongest_name = extension\n    return class_name + \".\" + strongest_name",
        "num_ids": 110
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return class_name+\".\"+max(extensions, key=lambda x: x.count('.')-x.count('_'))\n",
        "num_ids": 34
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return f\"{class_name}.{max(set(extensions), key=extensions.count)}\"",
        "num_ids": 26
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    for e in extensions:\n        if e.startswith(\".\"):\n            e = e[1:]\n        if e.lower() in class_name:\n            return \".\" + e\n        \n",
        "num_ids": 50
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(extensions)==0:\n        return class_name\n    strongest_extension_name=''\n    extension_strength=0\n    for i in extensions:\n        if i.islower():\n            cap=0\n            sm=0\n            for j in i:\n                if j.isupper():\n                    cap+=1\n                if j.islower():\n                    sm+=1\n            if cap==0 and sm==0:\n                if strongest_extension_name=='':\n                    strongest_extension_name=i\n                elif extension_strength<extension_strength+(-1*cap-sm):\n                    strongest_extension_name=i\n                    extension_strength=extension_strength+(-1*cap-sm)\n    return class_name+'.'+strongest_extension_name\n",
        "num_ids": 196
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Fix\n    if class_name.isupper():\n        return class_name + '.' + class_name + '.StrongestExtensionName'\n    else:\n        return class_name + '.StrongestExtensionName'",
        "num_ids": 53
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    extension_list = list(extensions)\n    class_list = []\n    for extension in extension_list:\n        class_list.append(extension.split('.')[0])\n    class_list = set(class_list)\n    if len(class_list) == 0:\n        return None\n    strongest_extension = None\n    strongest_strength = -1\n    for class_ in class_list:\n        number_of_uppercase = 0\n        number_of_lowercase = 0\n        for letter in class_:\n            if letter.isupper():\n                number_of_uppercase += 1\n            elif letter.islower():\n                number_of_lowercase += 1\n        strength = number_of_uppercase - number_of_lowercase\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = class_\n    return strongest_extension + '.' + class_name\n",
        "num_ids": 228
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    class_extensions = []\n    for extension in extensions:\n        extension = extension.split('.')\n        class_extensions.append(extension[-1])\n    class_extensions = set(class_extensions)\n    sorted_extensions = sorted(class_extensions, key=lambda x: x.upper() - x.lower())\n    print(sorted_extensions)\n    for extension in sorted_extensions:\n        if class_name.lower().endswith(extension.lower()):\n            return class_name + '.' + extension\n    return class_name + '.SErviNGSliCes'\n",
        "num_ids": 152
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    a_len = len(a)\n    b_len = len(b)\n    b_rot = b[-1:] + b[:-1]\n    #print(b)\n    #print(b_rot)\n",
        "num_ids": 54
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    a_len = len(a)\n    b_len = len(b)\n    if a_len == 0 or b_len == 0:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l1 = len(a)\n    l2 = len(b)\n    i=0\n    while i<l2:\n        if b in a:\n            return True\n        if b == a[i:] + a[:i]:\n            return True\n        i+=1\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    for i in range(1,len(b)+1):\n        if a.find(b[:i]) == -1:\n            continue\n        if a.find(b[:i])!= 0:\n            continue\n        if a.find(b[i:])!= 0:\n            continue\n        return True\n    return False\n",
        "num_ids": 83
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return(b in a or b in a[1:]+a[0])\n",
        "num_ids": 20
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(len(a)+1):\n        if a[:i] in b:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return any(a in b or b in a for i in range(1,len(a)))",
        "num_ids": 23
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def check_pattern(w1, w2):\n        if w1 in w2 and w2 in w1:\n            return True\n        elif w1 in w2:\n            return True\n        elif w2 in w1:\n            return True\n        else:\n            return False\n    if len(a) >= len(b):\n        for i in range(len(a)):\n            if check_pattern(a[i:], b):\n                return True\n        return False\n    else:\n        for i in range(len(b)):\n            if check_pattern(a, b[i:]):\n                return True\n        return False\n",
        "num_ids": 153
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #First convert both strings into their lower case\n    a = a.lower()\n    b = b.lower()\n",
        "num_ids": 28
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # your code here\n    return (sum(x % 2 == 0 for x in str(num)), sum(x % 2 == 1 for x in str(num)))\n",
        "num_ids": 39
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count_of_even = 0\n    count_of_odd = 0\n    num_split = str(num).split()\n    for number in num_split:\n        if int(number) % 2 == 0:\n            count_of_even += 1\n        else:\n            count_of_odd += 1\n    return count_of_even, count_of_odd\n",
        "num_ids": 88
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return tuple(int(d) for d in str(num) if int(d) % 2 == 0)\n",
        "num_ids": 27
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (0, 0)\n",
        "num_ids": 9
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (\n        (num % 10) == 0,\n        (num % 10)!= 0,\n    )\n",
        "num_ids": 28
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    even = num / 2 if num % 2 == 0 else num // 2\n    odd = (num + 1) / 2 if num % 2 == 0 else (num + 1) // 2\n    return even, odd\n",
        "num_ids": 49
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    even = 0\n    odd = 0\n    num = abs(num)\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n",
        "num_ids": 64
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    num_str = str(num)\n    even, odd = 0, 0\n    for i in num_str:\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n",
        "num_ids": 61
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if num < 0:\n        return (0, 0)\n    return (num % 10, num // 10)\n",
        "num_ids": 28
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (num % 2 == 0, num % 2!= 0)\n",
        "num_ids": 18
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    num_dict = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX', 10: 'X',\n                11: 'XI', 12: 'XII', 13: 'XIII', 14: 'XIV', 15: 'XV', 16: 'XVI', 17: 'XVII', 18: 'XVIII',\n                19: 'XIX', 20: 'XX', 30: 'XXX', 40: 'XL', 50: 'L', 60: 'LX', 70: 'LXX', 80: 'LXXX',\n                90: 'XC', 100: 'C', 200: 'CC', 300: 'CCC', 400: 'CD', 500: 'D', 600: 'DC', 700: 'DCC',\n                800: 'DCCC', 900: 'CM', 1000: 'M'}\n    roman = ''\n    while number > 0:\n        for k in num_dict.keys():\n            if k >= number:\n                number = number - k\n                roman = num_dict[k] + roman\n                break\n    return roman\n",
        "num_ids": 277
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert is_integer(number) and 1 <= number <= 1000, \\\n    \"You must pass an integer from 1 to 1000\"\n    if not number: return \"null\"\n    # Put the int number in an array in the right order\n    roman_array = [\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\", \"xii\"]\n    number_roman = \"\"\n    while number > 0:\n        # Find the index of the largest number smaller than the current one\n        # and multiply it by the current number to find the number\n        # between the current and the next one\n        for i in range(len(roman_array)):\n            if number >= roman_array[i]:\n                number_roman += roman_array[i] * (number // roman_array[i])\n                number %= roman_array[i]\n                break\n    return number_roman.lower()\n",
        "num_ids": 227
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if type(number)!= int:\n        raise TypeError(\"Argument should be a positive integer\")\n    if number < 1 or number > 1000:\n        raise ValueError(\"Argument should be a positive integer less than 1000\")\n",
        "num_ids": 53
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # http://www.tutorialspoint.com/roman-numerals-python/\n    # Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n    # 'I': 1\n    # 'V': 5\n    # 'X': 10\n    # 'L': 50\n    # 'C': 100\n    # 'D': 500\n    # 'M': 1000\n    # For example, two is written as II in Roman numeral,\n    # just two one's added together. Twelve is written as, XII, which is simply X + II.\n    # The number twenty seven is written as XXVII, which is XX + V + II.\n",
        "num_ids": 160
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if number <= 0 or number >= 1000:\n        raise ValueError('Argument must be between 1 and 1000')\n    \n    num_dict = {1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix', 10: 'x',\n                11: 'xi', 12: 'xii', 13: 'xiii', 14: 'xiv', 15: 'xv', 16: 'xvi', 17: 'xvii', 18: 'xviii', 19: 'xix'}\n",
        "num_ids": 146
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert(1 <= number <= 1000)\n",
        "num_ids": 11
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    roman_nums = {1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix', 10: 'x', 11: 'xi', 12: 'xii', 13: 'xiii', 14: 'xiv', 15: 'xv', 16: 'xvi', 17: 'xvii', 18: 'xviii', 19: 'xix', 20: 'xx', 30: 'xxi', 40: 'xxii', 50: 'xxiii', 60: 'xxiv', 70: 'xxv', 80: 'xxvi', 90: 'xxvii', 100: 'xxviii', 200: 'xxix', 300: 'xxx', 400: 'xxxx', 1000:'m'}\n    if number < 1 or number > 1000:\n        raise ValueError('{} is not between 1 and 1000'.format(number))\n    result = ''\n    while number > 0:\n        for (k, v) in sorted(roman_nums.items()):\n            if number - k >= 0:\n                result += v\n                number -= k\n                break\n    return result\n",
        "num_ids": 279
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    d = {1000:'m', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',\n          90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    \n    def digit_to_roman(number):\n        if number >= 1 and number <= 3:\n            return d[number]\n        elif number > 3 and number <= 6:\n            return d[3] + d[number - 3]\n        elif number >= 7 and number <= 9:\n            return d[6] + d[number - 6]\n        else:\n            raise ValueError('Number not found')\n    \n    roman_num = ''\n    while number > 0:\n        roman_num += digit_to_roman(number % 10)\n        number //= 10\n    return roman_num\n",
        "num_ids": 216
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if number == 0:\n        return ''\n    else:\n        mapping = {1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix', 10: 'x',\n                  11: 'xi',\n                  12: 'xii', 13: 'xiii', 14: 'xiv', 15: 'xv', 16: 'xvi', 17: 'xvii', 18: 'xviii', 19: 'xix'}\n        while number > 0:\n            for key in mapping:\n                if key <= number:\n                    number = number - key\n                    return mapping[key]\n",
        "num_ids": 169
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if number == 0:\n        return 'null'\n    if number < 1 or number > 1000:\n        raise ValueError('number must be between 1 and 1000 inclusive')\n",
        "num_ids": 40
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return (a**2 + b**2 == c**2 or a**2 == b**2 + c**2 or c**2 == a**2 + b**2)\n",
        "num_ids": 41
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return(abs(a*c-b*sqrt(abs(a**2-c**2))) < 1e-9)\n",
        "num_ids": 32
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # sides_lengths = [a, b, c]\n    sides_lengths = [a, b, c]\n    \n    if sides_lengths.count(min(sides_lengths)) == 3:\n        if a**2 + b**2 == c**2:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "num_ids": 88
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (a * a) == (b * b) + (c * c)\n",
        "num_ids": 21
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if (a**2 + b**2) == c**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a ** 2 + b ** 2 == c ** 2:\n        return True\n    else:\n        return False\n    \ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the\n    triangle.\n    Example:\n    triangle_area(3, 4, 5) == 6.0\n    '''\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n",
        "num_ids": 139
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # sort the sides\n    sorted_sides = sorted((a,b,c))\n    # check if the sides are equal\n    if sorted_sides[0] == sorted_sides[1] == sorted_sides[2]:\n        return True\n    # check if the sides are different\n    else:\n        return False\n    \nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(right_angle_triangle(a, b, c)",
        "num_ids": 132
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return a**2+b**2==c**2\n",
        "num_ids": 15
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a*a + b*b == c*c or a*a + c*c == b*b or b*b + c*c == a*a:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #if a+b>c or b+c>a or c+a>b:\n    if a**2+b**2==c**2 or b**2+c**2==a**2 or a**2+c**2==b**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 74
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not words:\n        return None\n    max_count = words[0].count(\" \")\n    max_char = words[0]\n",
        "num_ids": 35
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    max_length = 0\n    max_length_word = \"\"\n    for word in words:\n        word_length = len(set(word))\n        if word_length > max_length:\n            max_length = word_length\n            max_length_word = word\n    return max_length_word\n",
        "num_ids": 73
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    max = 0\n    max_word = \"\"\n    for word in words:\n        chars = 0\n        for char in word:\n            chars += 1\n            if chars > max:\n                max = chars\n                max_word = word\n        if max == chars:\n            max_word = word\n    return max_word\n",
        "num_ids": 78
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    max_len_chars = []\n    max_len = len(words)\n    for i in words:\n        len_chars = 0\n        for j in i:\n            if j in max_len_chars:\n                len_chars += 1\n        max_len_chars.append(i)\n        if len_chars > max_len:\n            max_len = len_chars\n            max_len_chars = []\n    return max_len_chars[0]\n",
        "num_ids": 120
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\" if len(words) == 0 else max(words, key=len)\n",
        "num_ids": 21
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    max_str = ''\n    for word in words:\n        if len(word) > len(max_str):\n            max_str = word\n    return max_str\n",
        "num_ids": 42
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    max_val = 0\n    for ele in words:\n        ele_len = len(set(ele))\n        if ele_len > max_val:\n            max_val = ele_len\n            max_ele = ele\n",
        "num_ids": 54
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return max(words, key=lambda x: len(set(x.lower())))\n",
        "num_ids": 22
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    max_count = 0\n    for word in words:\n        if len(word) == max_count:\n            max_count += 1\n        elif len(word) > max_count:\n            max_count = len(word)\n",
        "num_ids": 59
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max = 0\n    max_word = ''\n    for word in words:\n        word = set(word)\n        if len(word) == max:\n            max_word = word\n            max += 1\n        elif len(word) > max:\n            max = len(word)\n            max_word = word\n    return sorted(max_word)\n",
        "num_ids": 85
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    total = (number-need)\n    \n    if remaining - need >= 0:\n        return [total, remaining - need]\n    else:\n        return[0, remaining]\n    \n    \n",
        "num_ids": 49
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    if remaining < need:\n        return [number, 0]\n",
        "num_ids": 18
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [(number + number % need) // need, (number + number % need) % need]\n    \nif __name__ == '__main__':\n    \n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert eat(5, 6, 10) == [11, 4]\n    assert eat(4, 8, 9) == [12, 1]\n    assert eat(1, 10, 10) == [11, 0]\n    assert eat(2, 11, 5) == [7, 0]\n",
        "num_ids": 128
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if need > remaining:\n        return [remaining, need-remaining]\n    if need == 0:\n        return [number, 0]\n    if number == 0:\n        return [need, 0]\n    if number <= 0:\n        return [remaining, need-remaining]\n    return eat(number-1, need, remaining-need)\n",
        "num_ids": 84
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if need <= remaining:\n        if number == 1:\n            return [need, 0]\n        else:\n            return [number, remaining-need]\n    else:\n        return [need, 0]\n",
        "num_ids": 49
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert 0 <= number <= 1000, \"Invalid value for 'number': {}\".format(number)\n    assert 0 <= need <= 1000, \"Invalid value for 'need': {}\".format(need)\n    assert 0 <= remaining <= 1000, \"Invalid value for'remaining': {}\".format(remaining)\n    \n    total = number - need\n    remaining = remaining - need\n    \n    if remaining <= 0:\n        total = total + remaining\n        remaining = 0\n        return total, remaining\n    else:\n        total = total + remaining\n        return total, remaining\n",
        "num_ids": 131
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #return total_eaten + remaining // need\n    return number // need + 1 if number >= need else number // need\n",
        "num_ids": 29
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    total_eaten = 0\n    left_carrots = remaining\n",
        "num_ids": 17
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    total = need - number\n    if total < 0:\n        return[need, remaining]\n    elif total > remaining:\n        return[need, remaining]\n    else:\n        return[total, remaining - total]\n",
        "num_ids": 53
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = 0\n    # Algebra operations\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        else:\n            result /= operand[i]\n    return result\n",
        "num_ids": 105
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = 0\n    for i in range(len(operator)-1):\n        if operator[i] == '+':\n            result += operand[i]\n        if operator[i] == '-':\n            result -= operand[i]\n        if operator[i] == '*':\n            result *= operand[i]\n        if operator[i] == '/':\n            result //= operand[i]\n        if operator[i] == '^':\n            result = result ** operand[i]\n    return result\n",
        "num_ids": 126
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # TODO: complete the function\n    \n    if(len(operator) == 1):\n        if(operator[0] == '+'):\n            return operand[0] + operand[1]\n        elif(operator[0] == '-'):\n            return operand[0] - operand[1]\n        elif(operator[0] == '*'):\n            return operand[0] * operand[1]\n        elif(operator[0] == '/'):\n            return operand[0] // operand[1]\n        elif(operator[0] == '^'):\n            return operand[0] ** operand[1]\n    elif(len(operator) == 2):\n        if(operator[0] == '+'):\n            return operand[0] + operand[1] + do_algebra(operator[1], operand[2:])\n        elif(operator[0] == '-'):\n            return operand[0] - operand[1] - do_algebra(operator[1], operand[2:])\n        elif(operator[0] == '*'):\n            return operand[0] * operand[1] * do_algebra(operator[1], operand[2:])\n        elif(operator[0] == '/'):\n            return operand[0] // operand[1] * do_algebra(operator[1], operand[2:])\n        elif(operator[0] == '^'):\n            return operand[0] ** operand[1] * do_algebra(operator[1], operand[2:])\n        \n        \n    return 0\n",
        "num_ids": 397
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    algebra_stack = []\n    while True:\n        if len(operand) == 0:\n            break\n        for i in range(len(operator)):\n            if operator[i] == \"+\":\n                algebra_stack.append(operand.pop(0))\n            elif operator[i] == \"-\":\n                algebra_stack.append(operand.pop(0))\n            elif operator[i] == \"*\":\n                algebra_stack.append(operand.pop(0)*algebra_stack.pop(0))\n            elif operator[i] == \"/\":\n                algebra_stack.append(operand.pop(0)//algebra_stack.pop(0))\n            elif operator[i] == \"^\":\n                algebra_stack.append(algebra_stack.pop(0)**algebra_stack.pop(0))\n        if len(algebra_stack) == 0:\n            break\n    return algebra_stack.pop(0)\n",
        "num_ids": 234
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = None\n    if len(operator) == len(operand) - 1:\n        for i in range(0, len(operator)):\n            if i == 0:\n                result = do_basic_algebra(operator[i], operand[i])\n            else:\n                result = do_basic_algebra(result, operand[i])\n    return result\n    \n",
        "num_ids": 91
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = None\n",
        "num_ids": 6
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(operator) == 0 or len(operand) == 0:\n        return None\n",
        "num_ids": 23
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    return 0\n",
        "num_ids": 7
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = 0\n    i = 0\n    while i < len(operator):\n        if operator[i] == '+':\n            result = result + operand[i]\n        elif operator[i] == '-':\n            result = result - operand[i]\n        elif operator[i] == '*':\n            result = result * operand[i]\n        elif operator[i] == '/':\n            result = result // operand[i]\n        elif operator[i] == '**':\n            result = result ** operand[i]\n        i = i + 1\n    return result\n",
        "num_ids": 144
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not s:\n        return ''\n    s = list(s)\n    i,j = 0,len(s)\n    while i<j:\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        if s[j-1].isalpha():\n            if s[j-1].isupper():\n                s[j-1] = s[j-1].lower()\n            else:\n                s[j-1] = s[j-1].upper()\n        i,j = i+1,j-1\n    return ''.join(s)\n",
        "num_ids": 172
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = s.strip()\n    if s == '':\n        return s\n    letters = string.ascii_lowercase\n    result = []\n    for i in range(len(s)):\n        if s[i].lower() in letters:\n            result.append(s[i].lower())\n        elif s[i].upper() in letters:\n            result.append(s[i].upper())\n        else:\n            result.append(s[i])\n    return ''.join(result)\n",
        "num_ids": 121
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # your code here\n    l = list(s)\n    for i in range(len(l)):\n        if l[i].isalpha():\n            if l[i].isupper():\n                l[i] = l[i].lower()\n            else:\n                l[i] = l[i].upper()\n    return \"\".join(l)\n",
        "num_ids": 86
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = s.lower()\n    if s == \"\":\n        return result\n    for i in range(len(s)):\n        if isalpha(s[i]):\n            result = result[:i] + s[i].upper() + result[i+1:]\n        else:\n            result = result[:i] + s[i] + result[i+1:]\n    return result\n    \ndef test_solve():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    print('You are a success')\n",
        "num_ids": 161
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\".join([char.upper() if char.islower() else char.lower() for char in s])\n",
        "num_ids": 28
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n    return \"\".join(s)\n",
        "num_ids": 80
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join(list(map(lambda x:x.upper() if x.islower() else x.lower(),s)))\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join([x.upper() if x.islower() else x.lower() if x.isupper() else x for x in s])\n    \n",
        "num_ids": 38
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    l = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                l[i] = s[i].upper()\n            elif s[i].isupper():\n                l[i] = s[i].lower()\n    return ''.join(l)\n",
        "num_ids": 89
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(s) == 0:\n        return ''\n    else:\n        return ''.join([i.upper() if i.isalpha() else i.lower() for i in s])\n",
        "num_ids": 46
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    else:\n        return None\n",
        "num_ids": 33
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return hashlib.md5(text.encode('utf-8')).hexdigest() if text else None\n",
        "num_ids": 28
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if text == '':\n        return None\n    h = hashlib.md5()\n    h.update(text.encode())\n    return h.hexdigest()\n",
        "num_ids": 42
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if text == '':\n        return None\n",
        "num_ids": 12
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if text == '':\n        return None\n",
        "num_ids": 12
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # this is the hash object that we will use\n    md5hash = hashlib.md5()\n    # convert the text to byte object\n    data = text.encode('utf8')\n    # update the hash object with the bytes\n    md5hash.update(data)\n    # return the md5 hash string\n    return md5hash.hexdigest()\n",
        "num_ids": 86
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    else:\n        return None\n",
        "num_ids": 33
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not text:\n        return None\n    h = hashlib.md5(text.encode('utf-8'))\n    return h.hexdigest()\n",
        "num_ids": 40
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    try:\n        if not text:\n            return None\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    except:\n        raise Exception(\"The passed 'text' is not a string.\")\n",
        "num_ids": 57
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    text = text.encode('utf-8')\n    return str(hashlib.md5(text).hexdigest()) if text else None\n",
        "num_ids": 35
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    integers = []\n",
        "num_ids": 7
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return range(a, b + 1, 2)\n",
        "num_ids": 14
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return range(a, b+1)[::2]\n",
        "num_ids": 15
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #\n    # Your code here\n    #\n    return []\n",
        "num_ids": 17
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return list(range(a, b+1, 2))\n",
        "num_ids": 16
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a > b:\n        return []\n    return list(range(a, b + 1, 2))\n",
        "num_ids": 27
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(range(a, b, 2))",
        "num_ids": 13
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return range(a, b, 2)\n",
        "num_ids": 12
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    integers = []\n    if a == b:\n        return [a]\n",
        "num_ids": 20
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if b < a:\n        a, b = b, a\n    return list(range(a, b, 2))\n",
        "num_ids": 30
    }
]