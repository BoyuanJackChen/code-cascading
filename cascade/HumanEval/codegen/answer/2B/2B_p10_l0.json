[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(numbers) < 2:\n        return False\n    numbers.sort()\n    if numbers[0] <= threshold:\n        return False\n    if numbers[-1] >= threshold:\n        return False\n    for i in range(1, len(numbers) - 1):\n        if abs(numbers[i] - numbers[i - 1]) <= threshold:\n            return True\n    return False\n    "
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    i = 1\n    while i < len(numbers):\n        if abs(numbers[i] - numbers[i - 1]) < threshold:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(numbers) >= 3 and len([n for n in numbers if abs(n - numbers[0]) <= threshold]) > 0\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for index in range(1, len(numbers)):\n        if numbers[index] <= threshold + numbers[index - 1]:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(numbers) < 2:\n        return False\n    prev = numbers[0]\n    for i in numbers:\n        if abs(i - prev) > threshold:\n            return True\n        prev = i\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # If list of numbers is empty\n    if len(numbers) == 0:\n        return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    close_elements = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] - numbers[j] < threshold:\n                close_elements.append(numbers[j])\n    return close_elements\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Implement the function here\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # use sort to sort the numbers in place, and then return the first two elements\n    # which are equal to each other, this will give us the element pairs\n    numbers.sort()\n    return numbers[0] <= threshold and numbers[1] >= threshold\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    paren_list = []\n    prev_paren = None\n    curr_paren = None\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    paren_string = ''.join(paren_string.split())\n    open_parens = []\n    new_string = []\n    for c in paren_string:\n        if c == '(':\n            open_parens.append(c)\n        elif c == ')':\n            if len(open_parens) == 0:\n                new_string.append(')')\n            else:\n                open_parens.pop()\n    return new_string\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    parenthesis_list = []\n    parenthesis_stack = []\n    # iterate through each character in the string\n    for c in paren_string:\n        # if the character is an open parenthesis, push onto the stack\n        if c == '(':\n            parenthesis_stack.append(c)\n        # if the character is a closing parenthesis, check if there are matching open parenthesis\n        # if so, pop from stack and add to result\n        if c == ')':\n            if len(parenthesis_stack) > 0:\n                parenthesis_stack.pop()\n            else:\n                parenthesis_list.append(')')\n                break\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    paren_list = list(paren_string.split())\n    paren_list = [x for x in paren_list if x!= '']\n    out_list = []\n    cur_str = \"\"\n    for el in paren_list:\n        if el == ')':\n            cur_str = cur_str + '('\n        elif el == '(':\n            cur_str = cur_str + ')'\n        elif el == ')':\n            cur_str = cur_str + '('\n        else:\n            cur_str = cur_str + el\n        if el == ')':\n            out_list.append(cur_str)\n            cur_str = \"\"\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    paren_groups = paren_string.split(' ')\n    for i in range(len(paren_groups)):\n        paren_groups[i] = paren_groups[i].replace(')', '').replace('(', '')\n    return paren_groups\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    group_list = paren_string.split()\n    paren_stack = []\n    res = []\n    for g in group_list:\n        if g.isalpha() or g == \"(\":\n            paren_stack.append(g)\n        elif g == \")\":\n            if paren_stack:\n                paren_stack.pop()\n            else:\n                paren_stack.append(g)\n        elif g == \")\" and paren_stack:\n            paren_stack.pop()\n        else:\n            raise ValueError(f\"Invalid input: {paren_string}\")\n    if paren_stack:\n        res.append(paren_string[0:1])\n        for item in paren_stack:\n            res.append(item)\n        res.append(paren_string[1:])\n    return res\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    open_braces = ['(', '[', '{']\n    close_braces = [')', ']', '}']\n    open_i = close_i = 0\n    parens_list = []\n    paren_string = paren_string.replace(' ', '')\n    for i in range(len(paren_string)):\n        # If the next character is a left bracket, check whether or not\n        # the next character is a right bracket. If it is, break out of the\n        # for loop. If it isn't, add the character to the current string.\n        if paren_string[i] in open_braces:\n            open_i = open_braces.index(paren_string[i])\n            for j in range(i + 1, len(paren_string)):\n                if paren_string[j] in close_braces:\n                    close_i = close_braces.index(paren_string[j])\n                    parens_list.append(paren_string[open_i:close_i + 1])\n                    break\n                else:\n                    parens_list.append(paren_string[open_i])\n            open_i = 0\n            close_i = 0\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    paren_string = paren_string.split()\n    result = []\n    for i in paren_string:\n        if i == '(':\n            result.append('(')\n        elif i == ')':\n            try:\n                result.pop()\n            except IndexError:\n                result.append(')')\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    paren_string = paren_string.replace(' ','')\n    # create a stack and push open brackets to it\n    stack = []\n    for i in paren_string:\n        if i == '(' or i == '{':\n            stack.append(i)\n        elif i == ')' or i == '}':\n            # if the stack is empty, there is a match\n            # if the stack is not empty, there is a mismatch\n            if len(stack) == 0:\n                return ['(']\n            else:\n                if i == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif i == '}' and stack[-1] == '{':\n                    stack.pop()\n    # if there is no stack or the stack is empty, then there is a match\n    # if there is a stack and there is a mismatch, then there is a mismatch\n    if len(stack) == 0:\n        return ['(']\n    else:\n        return ['(']\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    paren_string = paren_string.replace(\" \", \"\")\n    curr_group = []\n    stack = []\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # TODO: implement\n    return float(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    integer_part = int(number)\n    fractional_part = number - integer_part\n    return fractional_part\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return number - math.floor(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a = abs(number)\n    if a == 0:\n        return 0\n    else:\n        i = 0\n        while a > 1:\n            i += 1\n            a = a / 10\n        return i\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if number < 1:\n        return 0\n    int_part = int(number)\n    decimals = number - int_part\n    return int_part + decimals\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    integer, remainder = divmod(number, 1)\n    return integer\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return number - math.floor(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not isinstance(number, float):\n        raise TypeError(\"Number must be a float\")\n    \n    if number < 0:\n        raise ValueError(\"Number cannot be negative\")\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    integer, decimal = divmod(number, 1)\n    return decimal\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return 0 in operations\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n    if balance < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if operations[0] > 0:\n        return False\n    for i in range(len(operations) - 1):\n        if operations[i] > 0:\n            return False\n        elif operations[i + 1] < 0:\n            return True\n        elif operations[i + 1] < 0:\n            return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for index in range(len(operations)-1):\n        if operations[index+1] < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(operations)):\n        if operations[i] > 0:\n            operations[i] = operations[i]\n        else:\n            operations[i] = 0\n    if operations[i] == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    balance = 0\n    for i in operations:\n        if i < 0:\n            if balance < 0:\n                return True\n            balance = 0\n        else:\n            balance += i\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    balance = 0\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n    if balance < 0:\n        return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    operations.reverse()\n    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance -= operation\n        else:\n            balance += operation\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    bal = 0\n    for op in operations:\n        if op == 0:\n            bal = 0\n        else:\n            bal += op\n    return bal < 0\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sum_absolute_error = 0\n    mean = sum(numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Calculate the mean of the list\n    average = sum(numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(e - mean) for e in numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum([abs(x - mean(numbers)) for x in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    x_mean = sum(numbers) / len(numbers)\n    return sum([abs(x - x_mean) for x in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    total = 0\n    total_abs = 0\n    for i in range(len(numbers)):\n        total += numbers[i]\n        total_abs += abs(numbers[i] - mean(numbers))\n    return total_abs / total\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Calculate the mean of the list of numbers.\n    mean = sum(numbers) / len(numbers)\n    # For each element in the list of numbers,\n    # calculate the difference from the mean, then add the squared\n    # difference to the sum of squared differences.\n    sum_of_squared_differences = sum([(x - mean) ** 2 for x in numbers])\n    # Return the square root of the result of the\n    # sum of squared differences divided by the length of the list.\n    return sqrt(sum_of_squared_differences / len(numbers))\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = len(numbers)\n    mean = sum(numbers) / n\n    return sum(abs(x - mean) for x in numbers) / n\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum([abs(n - mean(numbers)) for n in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    mean = sum(numbers) / len(numbers)\n    deviations = [(x - mean) for x in numbers]\n    return sum([abs(x) for x in deviations]) / len(numbers)\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    result = []\n    for number in numbers:\n        if count % 2 == 0:\n            result.append(number)\n        count += 1\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    else:\n        result = []\n        for i in range(len(numbers)):\n            if i == len(numbers) - 1:\n                result.append(numbers[i])\n                result.append(delimeter)\n            else:\n                result.append(numbers[i])\n                result.append(delimeter)\n                result.append(numbers[i + 1])\n        return result\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [n for i, n in enumerate(numbers) if i == 0 or i % 2 == 0] + \\\n        [n * delimeter for n in numbers] + \\\n        [n for i, n in enumerate(numbers) if i == len(numbers) - 1 or i % 2 == 1]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers + [delimeter]\n    else:\n        return numbers[:2] + [delimeter] + intersperse(numbers[2:], delimeter)\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return numbers + [delimeter] * (len(numbers) - 1)\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    if len(numbers) == 0:\n        return result\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            result.append(numbers[i])\n        else:\n            result.append(delimeter)\n            result.append(numbers[i])\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    output = []\n    for i in range(1, len(numbers), 2):\n        output.extend((numbers[i - 1], delimeter, numbers[i]))\n    return output\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    numbers = list(numbers)\n    if delimeter < 2:\n        return numbers\n    if not numbers:\n        return numbers\n    result = []\n    i = 1\n    while i < len(numbers):\n        result.append(numbers[i - 1])\n        result.append(delimeter)\n        result.append(numbers[i])\n        i += 1\n    result.append(numbers[-1])\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i!= len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    new_list = numbers[:]\n    \n    for i, number in enumerate(numbers):\n        if i < len(numbers) - 1:\n            new_list[i] = delimeter\n        new_list[i+1] = number\n    return new_list\n    \n    \ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Join a list of strings with a ',' and return the result\n    >>> concatenate(['some', 'words', 'to', 'join'])\n    'some,words,to,join'\n    \"\"\"\n    \n    return ','.join(strings)\n    \n    \ndef reverse(numbers: List[int]) -> List[int]:\n    \"\"\" Reverse the order of a list of numbers\n    >>> reverse([])\n    []\n    >>> reverse([1, 2, 3])\n    [3, 2, 1]\n    >>> reverse([3, 2, 1])\n    [1, 2, 3]\n    >>> reverse([1, 2, 3, 4])\n    [4, 3, 2, 1]\n    >>> reverse([1, 2, 3, 4, 5])\n    [5, 4, 3, 2, 1]\n    >>> reverse([1, 2, 3, 4, 5, 6])\n    [6, 5, 4, 3, 2, 1]\n    \"\"\"\n    \n    if not numbers:\n        return []\n    \n    reverse_list = numbers[:]\n    reverse_list.reverse()\n    return reverse_list\n    \n    \ndef min_max(numbers: List[int]) -> tuple:\n    \"\"\" Return the minimum and maximum values of a list of numbers\n    >>> min_max([])\n    (-inf, inf)\n    >>> min_max([1, 2, 3])\n    (-3, 3)\n    >>> min_max([1, 2, 3, 5])\n    (-5, 5)\n    >>> min_max([1, 2, 3, 4, 5])\n    (-5, 5)\n    \"\"\"\n    \n    if not numbers:\n        return (-float('inf'), float('inf'))\n    \n    min_value = max_value = numbers[0]\n    for number in numbers[1:]:\n        if number < min_value:\n            min_value = number\n        elif number > max_value:\n            max_value = number\n    return (min_value, max_value)\n    \n    \ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Return a copy of a list with all duplicate values removed\n    >>> remove_duplicates([])\n    []\n    >>> remove_duplicates([1, 2, 3])\n    [1, 2, 3]\n    >>> remove_duplicates([1, 2, 2, 3])\n    [1, 2, 3]\n    >>> remove_duplicates([1, 2, 3, 4, 4, 4, 4])\n    [1, 2, 3, 4]\n    >>> remove_duplicates([1, 2, 3, 4, 4, 4, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    \n    if not numbers:\n        return []\n    \n    unique_list = []\n    unique_list.append(numbers[0])\n    for number in numbers[1:]:\n        if number not in unique_list:\n            unique_list.append(number)\n    return unique_list\n    \n    \ndef is_unique(numbers: List[int]) -> bool:\n    \"\"\" Return True if a list is unique (no duplicates), False otherwise\n    >>> is_unique([])\n    True\n    >>> is_unique([1, 2, 3])\n    True\n    >>> is_unique([1, 2, 2, 3])\n    False\n    >>> is_unique([1, 2, 3, 4])\n    True\n    >>> is_unique([1, 2, 3, 4, 5])\n    False\n    >>> is_unique([1, 2, 3, 4, 5, 5])\n    True\n    >>> is_unique([1, 2, 3, 4, 4, 4, 4])\n    False\n    >>> is_unique([1, 2, 3, 4, 4, 4, 4, 4, 5])\n    True\n    >>> is_unique([1, 2, 3, 4, 4, 4, 4, "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Get the string into a list\n    parsed_string = paren_string.split(' ')\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    open_counts = 0\n    closed_counts = 0\n    level = 0\n    max_depth = 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if paren_string == '':\n        return [0]\n    paren_string = paren_string.replace(' ', '')\n    deepest_level_parens_in_string = 0\n    current_level = 0\n    for paren in paren_string:\n        if paren == '(':\n            current_level += 1\n        elif paren == ')':\n            current_level -= 1\n            if current_level < 0:\n                deepest_level_parens_in_string = max(current_level, deepest_level_parens_in_string)\n    return [deepest_level_parens_in_string] + parse_nested_parens(paren_string.replace(' ', ''))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    paren_string_list = list(paren_string.strip().split(' '))\n    res = []\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    stack = []\n    parens = paren_string.split()\n    for paren in parens:\n        if paren == '(':\n            stack.append(1)\n        elif paren == ')':\n            while stack and stack[-1]!= '(':\n                stack.pop()\n            stack.pop()\n    return stack\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if paren_string == '':\n        return 0\n    left_paren = paren_string.find('(')\n    right_paren = paren_string.find(')')\n    level = 1\n    i = 0\n    while i <= right_paren:\n        if paren_string[i] == '(':\n            level += 1\n        elif paren_string[i] == ')':\n            level -= 1\n        i += 1\n    return level\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    paren_string = paren_string.replace(\"(\", \"( (\")\n    paren_string = paren_string.replace(\")\", \" ) ) )\")\n    return [len(paren_string) - paren_string.count(\"( \") for paren_string in paren_string.split()]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # split the string in groups\n    paren_groups = paren_string.split()\n    paren_stack = []\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Create a stack\n    stack = []\n    # Create a list to store the returned list\n    result_list = []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda s: substring in s, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    filtered_list = []\n    for word in strings:\n        if substring in word:\n            filtered_list.append(word)\n    return filtered_list\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    filtered_list = []\n    for s in strings:\n        if substring in s:\n            filtered_list.append(s)\n    return filtered_list\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(filter(lambda s: substring in s, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = []\n    for s in strings:\n        if substring in s:\n            res.append(s)\n    return res\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # TODO: implement this function\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return (s, p)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not numbers:\n        return (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    sum = 0\n    prod = 1\n    for i in numbers:\n        sum += i\n        prod *= i\n    \n    return (sum, prod)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    s, p = 0, 1\n    for i in numbers:\n        s += i\n        p *= i\n    return s, p\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not numbers:\n        return (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), reduce(lambda x, y: x * y, numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), numbers[0] * numbers[1] * numbers[2] * numbers[3])\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result: List[int] = []\n    result.append(numbers[0])\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # convert the list to a reversed sequence\n    rev_numbers = numbers[::-1]\n    # max_value = None\n    # max_idx = None\n    max_value, max_idx = -999999999, None\n    # for idx, num in enumerate(rev_numbers):\n    #     if max_value < num:\n    #         max_value = num\n    #         max_idx = idx\n    # return rev_numbers[max_idx:] + rev_numbers[:max_idx]\n    for idx, num in enumerate(rev_numbers):\n        if max_value < num:\n            max_value = num\n            max_idx = idx\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i: i+len(numbers)]))\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_list.append(numbers[0])\n        else:\n            max_list.append(max(max_list[i - 1], numbers[i]))\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    if len(numbers) == 1:\n        return numbers\n    for i in range(len(numbers) - 1):\n        result.append(max(numbers[i: i + 2]))\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return rolling_max_helper(numbers, len(numbers))\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    output = []\n    for i in range(len(numbers)):\n        tmp = numbers[i]\n        for j in range(i, len(numbers)):\n            if tmp < numbers[j]:\n                tmp = numbers[j]\n        output.append(tmp)\n    return output\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return _rolling_max(numbers, 0)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    res = numbers[:]\n    for i in range(1, len(res)):\n        res[i] = max(numbers[i] + numbers[i - 1], res[i])\n    return res\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = []\n    max_ = float(\"-inf\")\n    for number in numbers:\n        if number > max_:\n            max_ = number\n        result.append(max_)\n    return result\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not string:\n        return ''\n    res = None\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            if res is None or len(res) > len(string[:i]):\n                res = string[:i]\n    return string + res[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert is_palindrome(string), f\"String {string} is not a palindrome\"\n    suffix = find_shortest_palindrome(string)\n    prefix = string[0:len(suffix)]\n    return prefix + suffix[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    else:\n        for index, char in enumerate(string):\n            suffix = string[index:]\n            if is_palindrome(suffix):\n                prefix = string[:index]\n                return prefix + suffix[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for size in range(1, len(string)):\n        suffix = string[-size:]\n        prefix = string[:-size]\n        if is_palindrome(suffix):\n            return prefix + suffix[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert len(string) > 0, \"String must be non-empty\"\n    assert is_palindrome(string), f\"Given string {string} must be a palindrome\"\n    if len(string) <= 1:\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def find_palindrome(string: str) -> str:\n        \"\"\" Find the longest prefix that is a palindrome.\n        >>> find_palindrome('c')\n        'c'\n        >>> find_palindrome('abcb')\n        'abcb'\n        >>> find_palindrome('abccba')\n        'abccba'\n        \"\"\"\n        longest_palindrome = ''\n        for index, letter in enumerate(string):\n            # If letter is already a palindrome, add to longest palindrome\n            if is_palindrome(longest_palindrome + letter):\n                longest_palindrome = longest_palindrome + letter\n            # If letter is not a palindrome, check prefixes\n            else:\n                for index2 in range(index):\n                    if is_palindrome(string[index2:index+1] + longest_palindrome):\n                        longest_palindrome = string[index2:index+1] + longest_palindrome\n        return longest_palindrome\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(len(string), 0, -1):\n        candidate = string[:i]\n        if is_palindrome(candidate):\n            return string + candidate[::-1]\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not is_palindrome(string):\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def is_palindrome(string: str) -> bool:\n        \"\"\" Test if given string is a palindrome \"\"\"\n        return string == string[::-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert a.isdigit() and b.isdigit(), 'Your input is not a string'\n    assert len(a) == len(b), 'Your inputs are not of same length'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(a)!= len(b):\n        raise Exception(\"Length of strings is not equal\")\n    res = \"\"\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return ''.join([chr(int(a) ^ int(b))])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ''.join(str(x^y) for x, y in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert (len(a) == len(b)), 'Inputs should be of equal length'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert len(a) == len(b)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # In this case we are doing it with binary numbers\n    c = str(a)\n    d = str(b)\n    count = 0\n    result = \"\"\n    \n    while count < len(c):\n        if c[count] == d[count]:\n            result += \"0\"\n        else:\n            result += \"1\"\n        count += 1\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # make a dictionary of length to count of each char\n    char_counts = {}\n    # make the list of length to char counts\n    for char in strings:\n        if char not in char_counts:\n            char_counts[char] = 1\n        else:\n            char_counts[char] += 1\n    # find the longest string in the dictionary\n    longest_string = None\n    longest_count = 0\n    for char in char_counts:\n        if char_counts[char] > longest_count:\n            longest_string = char\n            longest_count = char_counts[char]\n    return longest_string\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    max_length = 0\n    result = None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return None\n    \n    maxlen = 0\n    maxstr = None\n    for word in strings:\n        if len(word) > maxlen:\n            maxstr = word\n            maxlen = len(word)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # for each string, keep the string length, and the index\n    # return the longest one\n    lengths = []\n    for i in range(len(strings)):\n        lengths.append(len(strings[i]))\n    lengths.sort(reverse=True)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if strings == []:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    if len(strings) == 2:\n        if len(strings[0]) > len(strings[1]):\n            return strings[0]\n        else:\n            return strings[1]\n    if len(strings[0]) == len(strings[1]):\n        return strings[0]\n    else:\n        return strings[1]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if strings == []:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    while a > 0 and b > 0:\n        if a >= b:\n            a = a % b\n        else:\n            b = b % a\n    return max(a, b)\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # if a and b are not factors of each other, then the gcd is one of those factors\n    if a == 0 or b == 0:\n        return 0\n    # if a is divisible by b, then gcd is the divisor of a and b\n    if a % b == 0:\n        return b\n    # if b is divisible by a, then gcd is the divisor of a and b\n    if b % a == 0:\n        return a\n    # otherwise, the gcd is the greatest common factor of a and b\n    return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    while a!= 0 and b!= 0:\n        if a >= b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a < b:\n        a, b = b, a\n    return a if b == 0 else greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a > b:\n        a, b = b, a\n    while a!= 0:\n        a, b = b % a, a\n    return b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    while a!= b:\n        a, b = max(a, b), min(a, b)\n        if a % b == 0:\n            a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    divisor = 1\n    while (a % divisor!= 0) and (b % divisor!= 0):\n        divisor += 1\n    return divisor\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    \n    return greatest_common_divisor(a - b, b)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    prefix = string[:1]\n    res = []\n    res.append(prefix)\n    for i in range(1, len(string)):\n        prefix += string[i]\n        res.append(prefix)\n    return res\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    prefix_list = []\n    if len(string) == 0:\n        return prefix_list\n    else:\n        prefix = string[0]\n        prefix_list.append(prefix)\n        for letter in string[1:]:\n            prefix_list.append(prefix)\n            prefix = prefix + letter\n    return prefix_list\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i + 1]\n        prefixes.append(prefix)\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[0:i+1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            result.append(string[i:j + 1])\n    return result\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    prefix = []\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i + 1])\n    return result\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    all_prefixes_list = []\n    all_prefixes_list.append(string[0])\n    for i in range(1, len(string)):\n        all_prefixes_list.append(string[0:i])\n    return all_prefixes_list\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \" \".join(f\"{i}\" for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return '0'\n    else:\n        return '0'+ string_sequence(n-1) +''\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return''.join([f'{x}' for x in range(n+1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = ''\n    for i in range(n + 1):\n        s = s + str(i) +''\n    return s[:-1]\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \" \".join(f\"{i}\" for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = str(n)\n    return f'{n}'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \" \".join(map(str, range(n+1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 0:\n        return '0'\n    if n == 1:\n        return '0' + '1'\n    if n == 2:\n        return '0 1'\n    return '0'+ str(n) +'' + str(n+1) +'' + str(n+2) +'' + str(n+3) +'' + str(n+4)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in string:\n        if i.islower() or i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    letters = 0\n    for letter in string:\n        if letter.isalpha():\n            letters += 1\n    return letters\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # for char in string:\n    #     if string.count(char) > 1:\n    #         return False\n    # return True\n    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # create a dictionary to hold the count of each character and add the first character\n    # into the dictionary\n    char_counts = {}\n    for char in string:\n        if char not in char_counts:\n            char_counts[char.lower()] = 0\n        char_counts[char.lower()] += 1\n    # return the count of distinct characters\n    return len(char_counts)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    counts = set()\n    for i in range(len(string)):\n        counts.add(string[i].upper())\n    return len(counts)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    distinct_characters = 0\n    for character in string:\n        if character.lower() not in string:\n            distinct_characters += 1\n    return distinct_characters\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    characters = []\n    for char in string:\n        if char.lower() in characters:\n            characters.remove(char.lower())\n        else:\n            characters.append(char.lower())\n    return len(characters)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    output = []\n    for char in music_string:\n        if char == '|':\n            output.append(2)\n        elif char == '.':\n            output.append(1)\n        elif char == 'o':\n            output.append(4)\n    return output\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    music = music_string.split()\n    music = [x for x in music if x!= '.']\n    if not music:\n        return []\n    return music_helper(music)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    # raise NotImplementedError()\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    music_notes = []\n    for char in music_string:\n        if char in 'o|.':\n            music_notes.append(0)\n            if char == 'o|':\n                music_notes.append(2)\n            if char == '.':\n                music_notes.append(1)\n        elif char in '|':\n            music_notes.append(1)\n    return music_notes\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code goes here (remove this comment when you are done)\n    return_list = []\n    for string in music_string:\n        if string == 'o':\n            return_list.append(4)\n        elif string == 'o|':\n            return_list.append(2)\n        elif string == '.':\n            return_list.append(1)\n        else:\n            return_list.append(1)\n    return return_list\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    i = 0\n    parsed = []\n    while i < len(music_string):\n        if music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            parsed.append(int(music_string[i+1]))\n            i += 2\n            continue\n        elif music_string[i] == '|':\n            "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert isinstance(music_string, str), 'This is a string!'\n    assert all(c in ['o', 'o|', '.', '|', '|.'] for c in music_string), 'Invalid ASCII music string!'\n    if music_string[0] == 'o':\n        return [1] + [4] * (len(music_string) - 2)\n    elif music_string[0] == 'o|':\n        return [2] + [2] * (len(music_string) - 2)\n    elif music_string[0] == '.':\n        return [1] + [2] * (len(music_string) - 2)\n    elif music_string[0] == '|':\n        return [1] + [1] * (len(music_string) - 2)\n    else:\n        return [1] + [2] * (len(music_string) - 2)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [int(i) for i in music_string]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = []\n    i = 0\n    while i < len(music_string):\n        c = music_string[i]\n        if c == 'o':\n            res.append(4)\n        elif c == 'o|':\n            res.append(2)\n        elif c == '|':\n            res.append(1)\n        else:\n            i += 1\n        i += 1\n    return res\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i: i + len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    if len(string) <= len(substring):\n        for i in range(len(string)):\n            if string[i:].find(substring) >= 0:\n                count += 1\n    else:\n        return 0\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    counter = 0\n    for i in range(len(string)-len(substring)+1):\n        if substring == string[i:i+len(substring)]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if substring == string[i:i+len(substring)]:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # what if the substring is longer than the string?\n    # what if the substring is a substring of the string?\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len([i for i,x in enumerate(string) if x == substring])\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(string)-len(substring)+1):\n        if substring == string[i:i+len(substring)]:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert substring\n    assert string\n    assert isinstance(string, str)\n    assert isinstance(substring, str)\n    assert string and substring\n    \n    return len(re.findall(substring, string))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    numbers_list = []\n    numbers_list = numbers.split()\n    new_list = []\n    for i in numbers_list:\n        new_list.append(i)\n    new_list = sorted(new_list, reverse=True)\n    new_string =''.join(new_list)\n    return new_string\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \" \".join(sorted(numbers.split()))\n    # return \" \".join(sorted(numbers.split(\" \")))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    numbers_list = numbers.split()\n    for i in range(len(numbers_list)):\n        if numbers_list[i] not in 'zero one two three four five six seven eight nine'.split():\n            return \"Invalid input\"\n    numbers_list.sort()\n    return''.join(numbers_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return''.join(sorted(numbers.split(), key=int))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    numbers = numbers.replace(' ', '')\n    numbers = numbers.split(' ')\n    numbers = [int(i) for i in numbers]\n    numbers.sort()\n    return''.join([str(i) for i in numbers])\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Create a list of numbers and a list of their positions\n    num_list = []\n    for i, char in enumerate(numbers):\n        if char in '123456789':\n            num_list.append(int(char))\n    \n    # Create a new list, a sorted version of num_list, with the smallest numbers first\n    sorted_num_list = []\n    while num_list:\n        min_num = min(num_list)\n        for num in num_list:\n            if num == min_num:\n                sorted_num_list.append(num)\n                num_list.remove(num)\n    \n    return''.join([str(number) for number in sorted_num_list])\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = \"\"\n    numbers = numbers.split(' ')\n    numbers = list(map(lambda x: x.strip(), numbers))\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            result += f\"{numbers[i]} \"\n        else:\n            result += f\"{numbers[i]} \"\n    return result.strip()\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if numbers == '':\n        return numbers\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    numbers_list = numbers.split()\n    sorted_list = sorted(numbers_list)\n    for i in range(0, len(sorted_list)):\n        sorted_list[i] = str(sorted_list[i])\n    return''.join(sorted_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return''.join(sorted(numbers.split()))\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # You need to sort the numbers before performing binary search\n    # To do so, use the sorted() function\n    numbers.sort()\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    numbers = sorted(numbers)\n    return (numbers[0], numbers[-1])\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n = len(numbers)\n    if n == 0:\n        raise ValueError(\"List is empty\")\n    if n == 1:\n        return numbers[0], numbers[0]\n    d = {}\n    for i in range(n):\n        d[i] = abs(numbers[i] - numbers[0])\n    min_key = min(d.keys(), key=lambda k: d[k])\n    return numbers[min_key], numbers[max(min_key + 1, n - 1)]\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(numbers) < 2:\n        raise Exception(\"List must be at least length 2\")\n    else:\n        new_list = sorted(numbers)\n        return (new_list[0], new_list[-1])\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    numbers.sort()\n    return numbers[0], numbers[-1]\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    numbers.sort()\n    # Closest Number\n    smallest = numbers[0]\n    # Closest Number\n    largest = numbers[len(numbers) - 1]\n    return smallest, largest\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # TODO\n    return (min(numbers), max(numbers))\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert len(numbers) >= 2, \"List must contain at least two elements\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert numbers, \"Supplied list is empty\"\n    assert len(numbers) >= 2, \"Supplied list is not at least length two\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    numbers.sort()\n    smaller = numbers[0]\n    larger = numbers[-1]\n    smaller_index = numbers.index(smaller)\n    larger_index = numbers.index(larger)\n    if smaller_index + 1 == larger_index:\n        return smaller, larger\n    if smaller_index - 1 == larger_index:\n        return smaller, larger\n    if smaller_index == larger_index - 1:\n        return smaller, larger\n    if smaller_index == larger_index + 1:\n        return smaller, larger\n    return smaller, larger\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # get min and max of the array\n    min_num = min(numbers)\n    max_num = max(numbers)\n    # find slope of the line between min and max\n    slope = (max_num - min_num) / (len(numbers) - 1)\n    # find intercept of the line\n    intercept = - min_num / slope\n    # apply linear transformation to the numbers\n    for i in range(0, len(numbers)):\n        numbers[i] = (numbers[i] - intercept) / slope\n    return numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Divide by the largest number\n    return [(n / max(numbers)) for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n    range_ = max_num - min_num\n    if range_ == 0:\n        raise Exception(\"All numbers are the same, cannot rescale!\")\n    return [(num - min_num) / range_ for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [(n - min(numbers)) / (max(numbers) - min(numbers)) for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    new_list = []\n    new_list.append(0.0)\n    new_list.append(0.25)\n    new_list.append(0.5)\n    new_list.append(0.75)\n    new_list.append(1.0)\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    else:\n        min_val = min(numbers)\n        max_val = max(numbers)\n        scaled_numbers = []\n        for number in numbers:\n            scaled_number = number - min_val\n            scaled_number = scaled_number / (max_val - min_val)\n            scaled_numbers.append(scaled_number)\n        return scaled_numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [(number - min(numbers)) / (max(numbers) - min(numbers)) for number in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(map(lambda x: 0.25*x + 0.5, numbers))\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    min_elem = min(numbers)\n    max_elem = max(numbers)\n    rescaled_list = []\n    for num in numbers:\n        rescaled_list.append((num-min_elem)/(max_elem-min_elem))\n    return rescaled_list\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # get the min/max\n    min_ = min(numbers)\n    max_ = max(numbers)\n    # rescale the numbers\n    rescaled_numbers = []\n    for number in numbers:\n        rescaled_numbers.append((number - min_) / (max_ - min_))\n    return rescaled_numbers\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [x for x in values if isinstance(x, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [x for x in values if isinstance(x, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # filter out non-integers\n    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [int(x) for x in values if isinstance(x, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [int(v) for v in values if isinstance(v, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [x for x in values if isinstance(x, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda i: isinstance(i, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # return list(filter(lambda x: type(x) == int, values))\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(string)\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    i = 1\n    while n % i!= 0:\n        i += 1\n    return i\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert n > 0, f'n = {n} must be > 0'\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    largest_divisor = 1\n    while n%largest_divisor!= 0:\n        largest_divisor += 1\n    return largest_divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    i = n - 1\n    while i >= 0:\n        if n % i == 0:\n            return i\n        i -= 1\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    largest = 0\n    while n % 2 == 0:\n        largest = 2\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest = i\n            n = n / i\n    if n!= 1:\n        largest = n\n    return largest\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    largest_divisor_lo, largest_divisor_hi = 1, n\n    while largest_divisor_lo <= largest_divisor_hi:\n        largest_divisor = (largest_divisor_lo + largest_divisor_hi) // 2\n        if largest_divisor * largest_divisor == n:\n            return largest_divisor\n        elif largest_divisor * largest_divisor > n:\n            largest_divisor_hi = largest_divisor - 1\n        else:\n            largest_divisor_lo = largest_divisor + 1\n    return largest_divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    divisors = []\n    i = 2\n    while (n % i) == 0:\n        divisors.append(i)\n        n = n // i\n    if n > 2:\n        divisors.append(n)\n    return max(divisors)\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    divisor = 1\n    while divisor <= n:\n        if n%divisor == 0:\n            return divisor\n        else:\n            divisor += 1\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        return 3\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    i = 2\n    while n % i!= 0:\n        i += 1\n    return i\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # 1st solution\n    # factors = []\n    #\n    # while n % 2 == 0:\n    #     factors.append(2)\n    #     n //= 2\n    #\n    # for i in range(3, int(n**0.5) + 1, 2):\n    #     while n % i == 0:\n    #         factors.append(i)\n    #         n //= i\n    #\n    # if n > 2:\n    #     factors.append(n)\n    #\n    # return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    while n % 2 == 0:\n        result.append(2)\n        n //= 2\n    \n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            result.append(i)\n            n //= i\n    if n > 2:\n        result.append(n)\n    return result\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    primes = []\n    while n!= 1:\n        prime = False\n        for i in primes:\n            if n % i == 0:\n                n //= i\n                prime = True\n                break\n        if not prime:\n            primes.append(n)\n    return primes\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Base case\n    if n <= 1:\n        return []\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    prime_factors = []\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    factorized = []\n    while n % 2 == 0:\n        n = n // 2\n        factorized.append(2)\n    for i in range(3, int(n ** 0.5 + 1), 2):\n        while n % i == 0:\n            n = n // i\n            factorized.append(i)\n    if n > 2:\n        factorized.append(n)\n    return factorized\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5 + 1), 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1:\n        return []\n    prime_factors = []\n    while True:\n        if n % 2 == 0:\n            prime_factors.append(2)\n            n = n // 2\n        else:\n            for i in range(3, int(n ** (1 / 2)) + 1, 2):\n                if n % i == 0:\n                    prime_factors.append(i)\n                    n = n // i\n                    break\n            else:\n                prime_factors.append(n)\n                break\n    return prime_factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # solution 1\n    # for i in range(len(numbers)):\n    #     if numbers.count(numbers[i]) > 1:\n    #         numbers.remove(numbers[i])\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    output = []\n    for n in numbers:\n        if n not in output:\n            output.append(n)\n    return output\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for n in numbers:\n        if n not in result:\n            result.append(n)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = []\n    for n in numbers:\n        if n not in res:\n            res.append(n)\n    return res\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    new_numbers = []\n    for number in numbers:\n        if number not in new_numbers:\n            new_numbers.append(number)\n    return new_numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(set(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for i in numbers:\n        if i not in result:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(set(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(set(numbers))\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    new_str = ''\n    for char in string:\n        if char.isupper():\n            new_str += char.lower()\n        elif char.islower():\n            new_str += char.upper()\n        else:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ''.join(c.upper() if c.islower() else c.lower() for c in string)\n    \n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ''.join(case for char in string for case in ['u','l'][char.islower()])\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return ''.join([letter.upper() if letter.islower() else letter.lower() for letter in string])\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # if not strings:\n    #     return ''\n    # else:\n    #     return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = \"\"\n    for item in strings:\n        result += item\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return ''\n    else:\n        return strings[0] + concatenate(strings[1:])\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    string = ''\n    for i in range(len(strings)):\n        string += strings[i]\n    return string\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    concatenated_string = ''\n    for word in strings:\n        concatenated_string += word\n    return concatenated_string\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return filter(lambda a: a.startswith(prefix), strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(filter(lambda string: string.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return_list = []\n    for item in l:\n        if item > 0:\n            return_list.append(item)\n    return return_list\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return_list = []\n    for number in l:\n        if number > 0:\n            return_list.append(number)\n    return return_list\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    for item in l:\n        if item >= 0:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [x for x in l if x >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [x for x in l if x >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return l[0::2]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n < 2:\n        return False\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 1:\n        return False\n    if n < 3 or n % 2 == 0:\n        return True\n    if n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return False\n    for d in range(2, n):\n        if n % d == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1 or n == 2 or n == 3:\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    else:\n        k = 3\n        while k**2 <= n:\n            if n % k == 0:\n                return False\n            k += 2\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #print(n)\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for d in range(2,n-1):\n        if n % d == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1 or n == 0:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    xs = list(xs)\n    # make xs non zero\n    xs[0] = -xs[0]\n    for i in range(1, len(xs) - 1):\n        xs[i] = -xs[i]\n    return -(xs[-1] / xs[-2])\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Check if xs has even number of coefficients and the largest coefficient is non-zero\n    if len(xs) % 2 == 1 or xs[0] == 0:\n        raise ValueError('xs list must have even number of coefficients and x0 must be non-zero!')\n    \n    # Calculate x0 in every possible condition\n    for i in range(2, len(xs) // 2):\n        if xs[i]!= 0:\n            x0 = -xs[i] / xs[i - 1]\n            return x0\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert len(xs) % 2 == 0, f\"xs must be even numbers and sum of coefficients must be non zero\"\n    xs = xs[::-1]\n    coeff_zeros = [(i, coeff) for i, coeff in enumerate(xs) if coeff == 0]\n    coeff_zeros.reverse()\n    i_min, coeff = coeff_zeros[0]\n    for i, coeff in coeff_zeros:\n        if i - i_min == 1:\n            return coeff / xs[i_min]\n        else:\n            i_min = i\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert len(xs) % 2 == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def f(x):\n        return poly(xs, x)\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    xs.sort(reverse=True)\n    n = len(xs)\n    i = 0\n    while i < n and xs[i]!= 0:\n        i += 1\n    return i - 1\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert xs, \"xs is empty list\"\n    assert xs, \"xs has only zero coefficients\"\n    assert len(xs) % 2 == 0, \"xs is not having even number of coefficients\"\n    x = 0.0\n    for i in range(len(xs) // 2):\n        x += xs[2 * i] * x ** i\n    return x\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    xs = xs[::-1]\n    for i in range(0, len(xs)):\n        if xs[i] == 0:\n            return -1 if i == 0 else -1 - (i + 1) * xs[i] / (i + 2)\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    xs = xs[::-1]\n    while xs:\n        if xs[-1] == 0:\n            xs.pop()\n        else:\n            return -(xs[-1] / xs[-2])\n    return -1\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            return i\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        if i % 3 == 0:\n            continue\n        else:\n            l.append(l[i])\n    for i in range(len(l)):\n        l[i] = l[i]*3\n    l.sort()\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l.pop(i)\n    for i in range(len(l)):\n        l[i] = l[i]//3\n    return l\n    \n    \ndef sort_first(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_first([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_first([5, 6, 3, 4, 8, 9, 2])\n    [2, 3, 4, 5, 6, 8, 9]\n    \"\"\"\n    for i in range(len(l)):\n        if i % 3 == 0:\n            continue\n        else:\n            l.append(l[i])\n    l.sort()\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l.pop(i)\n    for i in range(len(l)):\n        l[i] = l[i]*3\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # if l is empty\n    if l == []:\n        return l\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sorted_list = []\n    for num in range(len(l)):\n        if num % 3 == 0:\n            sorted_list.append(l[num])\n    return sorted_list\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n    l_sorted = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_sorted.append(l[i])\n    for i in range(len(l_sorted)):\n        l_sorted[i] = l[i]\n    l_sorted.sort()\n    return l_sorted\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted([i for i in l if i % 3!= 0]) + sorted([i for i in l if i % 3 == 0])"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(l) == 0:\n        return []\n    if len(l) == 1:\n        return [l]\n    l = l[:]\n    for i in range(0, len(l), 3):\n        if i + 1 <= len(l) - 1:\n            l[i + 1:i + 3] = sorted(l[i + 1:i + 3])\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l = l[:]\n    for i in range(len(l)):\n        if i % 3 == 0:\n            continue\n        l[i], l[i+1] = l[i+1], l[i]\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    l_sorted = []\n    for i in range(0, len(l)):\n        if (i % 3)!= 0:\n            l_sorted.append(l[i])\n    l_sorted.sort()\n    for i in range(0, len(l_sorted)):\n        if (i % 3)!= 0:\n            l_sorted[i] = l[i]\n    return l_sorted\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l_copy = l.copy()\n    length = len(l_copy)\n    new_list = []\n    \n    while len(l_copy) > 0:\n        if length%3!= 0:\n            for x in l:\n                if x%3 == 0:\n                    new_list.append(x)\n                    l_copy.remove(x)\n        else:\n            new_list.append(l_copy[0])\n            l_copy.remove(l_copy[0])\n            if len(l_copy) == 0:\n                break\n            new_list.append(l_copy[0])\n            l_copy.remove(l_copy[0])\n        length = len(l_copy)\n        \n    return new_list\n    \n    \ndef test_sort_third():\n    assert sort_third([1, 2, 3]) == [1, 2, 3]\n    assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 3, 4, 5, 6, 8, 9]\n    \n    \ndef main():\n    l = input(\"Enter the list of numbers: \")\n    l = l.split()\n    l = list(map(int, l))\n    sort_third(l)\n    \n    \nif __name__ == \"__main__\":\n    test_sort_third()\n    main()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Create a list new, and an index counter, which will be incremented each time the loop runs\n    new = []\n    counter = 0\n    \n    # Loop through all values of l, and when a value of l is not divisible by 3, add it to new\n    for i in l:\n        if i % 3!= 0:\n            new.append(i)\n    \n    # Loop through new, and when the value in the index i of new is divisible by 3, add the value to new\n    for j in new:\n        if j % 3!= 0:\n            new.append(j)\n    \n    # The new list contains all values that are not divisible by 3, and all values divisible by 3.\n    # The new list is sorted in the same order as l.\n    return new"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(set(l))"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(list(set(l)))"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(sorted(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    maximum = l[0]\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    maximum = l[0]\n    for i in l:\n        if i > maximum:\n            maximum = i\n    return maximum\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return l[0]\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l_max = l[0]\n    for i in range(1, len(l)):\n        if l[i] > l_max:\n            l_max = l[i]\n    return l_max\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    max_value = l[0]\n    for i in l:\n        if max_value < i:\n            max_value = i\n    return max_value\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert len(l) > 0, \"list cannot be empty\"\n    max_i = 0\n    for i in range(len(l)):\n        if l[i] > l[max_i]:\n            max_i = i\n    return l[max_i]\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    max_val = l[0]\n    for val in l:\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return max(l)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 7 or i % 13 == 7:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    divisible = set()\n    for i in range(1, n+1):\n        if i % 11 == 0:\n            divisible.add('Fizz')\n        if i % 13 == 0:\n            divisible.add('Buzz')\n        if i % 7 == 0:\n            divisible.add('7')\n    return len(divisible)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    counter = 0\n    for i in range(1, n):\n        if i%7==0:\n            if i%11==0 or i%13==0:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for x in range(1, n+1):\n        if (x % 7 == 0 or x % 13 == 0):\n            count += 1\n    print(count)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(n):\n        if (i + 1) % 3 == 0:\n            if i % 13 == 0:\n                count += 1\n        elif (i + 1) % 5 == 0:\n            if i % 7 == 0:\n                count += 1\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    cnt = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            cnt += 1\n            print(i)\n        elif i % 5 == 0:\n            cnt += 1\n        elif i % 3 == 0:\n            cnt += 1\n        else:\n            print(i)\n    return cnt"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n        elif i % 11!= 0 and i % 13!= 0:\n            count += 2\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert n > 0\n    counter = 0\n    for i in range(1, n):\n        if (i % 7 == 0) or (i % 13 == 0):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    cnt = 0\n    for i in range(1, n+1):\n        if i % 11 == 7 or i % 13 == 7:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = 0\n    for i in range(1, n):\n        if i % 3 == 0 or i % 5 == 0:\n            if i % 7 == 0:\n                res += 1\n    return res\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = len(l)\n    even = l[0:n//2]\n    odd = l[n//2:]\n    return sorted(odd) + sorted(even)\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    new_list = []\n    for i in range(0, len(l)):\n        if i % 2 == 0:\n            new_list.append(l[i])\n    return sorted(new_list)\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Creates a new list\n    l2 = []\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l_even = l[::2]\n    l_odd = l[1::2]\n    l_even = sorted(l_even)\n    l_odd = sorted(l_odd)\n    l_new = l_even + l_odd\n    return l_new\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    i = 0\n    while i < len(l):\n        if l[i] % 2 == 0:\n            for j in range(i, len(l)):\n                if l[j] % 2!= 0:\n                    temp = l[i]\n                    l[i] = l[j]\n                    l[j] = temp\n            i += 1\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return l[::2]\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # your code here\n    even = []\n    odd = []\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return l[::2]\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod("
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(l) < 2:\n        return l\n    else:\n        mid = len(l)//2\n        l1 = l[:mid]\n        l2 = l[mid:]\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not isinstance(l, list):\n        raise TypeError('l must be a list')\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # break string into groups of 3 and cycle them to get original string.\n    return \"\".join([s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)])\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    groups = s.split('\\n')\n    groups = [group.split('\\t') for group in groups]\n    groups = [group[1:] + group[0] for group in groups]\n    return ''.join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # enumerate every letter in the string.\n    for i, letter in enumerate(s):\n        # if the index of the letter is multiple of 3, we switch letters.\n        if i % 3 == 0:\n            s = s[:i] + s[i + 1] + s[i] + s[i + 2]\n    return s\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"\".join([s[i] + s[i + 1] + s[i + 2] for i in range(0, len(s), 3)])"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Split string by groups of 3 elements.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle groups. If group has less than 3 elements, don't cycle.\n    groups = [group if len(group) == 3 else group[1:] + group[0] for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return decode_huffman(s)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # if length is not divisible by 3\n    if len(s) % 3:\n        s = s + \"X\" * (3 - len(s) % 3)\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups back together.\n    return \"\".join(groups)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 1:\n        return 2\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        nth_fib = fib(n)\n        for x in range(2, nth_fib):\n            if is_prime(x):\n                return x\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return 2\n    a = 2\n    b = 3\n    for _ in range(n - 2):\n        c = a + b\n        a, b = b, c\n        if c % 2 == 0:\n            return c\n    return c\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def is_prime(n):\n        return n > 1 and all(n % i for i in range(2, n))\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    a = 1\n    b = 2\n    count = 0\n    while count < n - 1:\n        a, b = b, a + b\n        count += 1\n    if a + b == n:\n        return a + b\n    return a + b\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 2:\n        raise ValueError(\"Please, input positive integer.\")\n    x = 0\n    y = 1\n    for i in range(1, n):\n        x, y = y, (x + y)\n        if (x + y) % 2 == 0:\n            x, y = y, (x + y)\n    return x"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def is_prime(n: int) -> bool:\n        for x in range(2, int(sqrt(n)) + 1):\n            if n % x == 0:\n                return False\n        return True\n    \n    if n < 2:\n        raise ValueError(\"n must be greater than 0\")\n    \n    if is_prime(n):\n        return n\n    else:\n        return fib_fib(n-1) + fib_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = set()\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    s.add(l[i])\n                    s.add(l[j])\n                    s.add(l[k])\n    return len(s) == 3\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(l) < 3:\n        return False\n    \n    hash_table = set(l)\n    for i in l:\n        for j in l:\n            for k in l:\n                if i + j + k == 0 and i!= j and j!= k and i!= k:\n                    if i in hash_table and j in hash_table and k in hash_table:\n                        return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    seen_sum = set()\n    for i in l:\n        if (i == 0) and (i in seen_sum):\n            return True\n        else:\n            seen_sum.add(i)\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # find the length of the input list\n    l_len = len(l)\n    # check if the length is less than 2\n    if l_len < 2:\n        return False\n    # create a new list to keep track of the sum of the elements\n    new_l = []\n    # get the first element from the input list\n    # the for loop will loop from 2 to the last element\n    for i in range(l_len):\n        # add the element to the new list\n        # in case the list is longer than one element\n        # then the for loop will loop from 1 to the last element\n        if i == 0 or i == l_len-1:\n            new_l.append(l[i])\n        else:\n            new_l.append(l[i] + l[i-1] + l[i+1])\n    # check if there are three distinct elements\n    # in the new list that sum to zero\n    for i in range(l_len):\n        for j in range(i+1, l_len):\n            # get the third element\n            s = new_l[i] + new_l[j]\n            # if the sum of the three elements is zero\n            if s == 0:\n                # return True\n                return True\n    # if the input list is empty\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # write your code here\n    dictionary = {}\n    for i in range(0, len(l)):\n        if l[i] in dictionary:\n            dictionary[l[i]] += 1\n        else:\n            dictionary[l[i]] = 1\n    for i in range(0, len(l)):\n        if l[i] in dictionary:\n            if dictionary[l[i]] >= 2:\n                del dictionary[l[i]]\n            else:\n                return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # traverse the list\n    # if sum of two elements in the list is equal to 0\n    # return True\n    # else return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        for j in range(i, len(l)):\n            for k in range(j, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    set_l = set(l)\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0 and l[i] + l[j]!= l[j] + l[i]:\n                return True\n    return False\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Your code here\n    assert n >= 1, \"Error: n must be >= 1\"\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    i = 1\n    while i <= n:\n        j = 1\n        while j <= n:\n            count += j >= n - i + 1\n            j += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n    # REPLACE THE FOLLOWING LINE WITH YOUR EXECUTION\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return car_race_collision_recursive(n, [])\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Part 1\n    # total_collisions = 0\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         if cars[i].collide(cars[j]):\n    #             total_collisions += 1\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    if n == 0:\n        return count\n    \n    i = 0\n    while i < n:\n        car1 = i\n        car2 = n - 1 - i\n        if cars_in_front_of_car1(car1, n) and cars_in_front_of_car2(car2, n):\n            if cars_are_distant_enough_to_collide(car1, car2, n):\n                count += 1\n        i += 1\n    \n    return count\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    collisions = 0\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return l[1:] + [l[0] + 1]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(map(lambda x: x + 1, l))\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        l2.append(l[i] + 1)\n    return l2\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    new_list = []\n    for item in l:\n        new_list.append(item + 1)\n    return new_list\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(map(lambda x: x + 1, l))\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [x+1 for x in l]\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # TODO: write your code here\n    pairs_found = False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                pairs_found = True\n    if pairs_found:\n        print(f\"Yes, there are two pairs that sum to zero: {l[i]} and {l[j]}\")\n    else:\n        print(f\"No, there are no two pairs that sum to zero.\")\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for num in l:\n        target = 0 - num\n        if target in l:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(l)):\n        for j in range(i, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return True if sum(l) == 0 else False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(l) < 2:\n        return False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    x = {}\n    for i in l:\n        if i in x:\n            return True\n        else:\n            x[i] = True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if (l[i] + l[j]) == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # O(n)\n    for i in range(len(l)-1):\n        if (l[i] + l[i+1]) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(l) < 2:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if x < base:\n        return str(x)\n    return change_base(x//base, base)*(x%base)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return str(x)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return str(x)\n    \n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if x < base:\n        return change_base(x*base, base)\n    else:\n        return change_base(x//base, base) + str(x%base)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert x >= 0\n    assert base >= 2\n    if x == 0:\n        return str(0)\n    return change_base(x//base, base) + str(x%base)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if x < 10 and base < 10:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    string = ''\n    while x:\n        string += str(x % base)\n        x //= base\n    return string[::-1]\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if base < 10:\n        return change_base(x, base*10)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    out = ''\n    while x > 0:\n        out += str(x % base)\n        x //= base\n    return out\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return 0.5*a*h\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    area = a * h / 2\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    area = (a * h) / 2\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # calculate area\n    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #area = (a * h)/2\n    area = 0.5 * (a * h)\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    area = a*h/2\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return a * h/2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # area = (h * (h + a)) / 2\n    # return area\n    return 0.5 * h * a\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (a * h)/2\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    fib4_cache = {\n        0: 0,\n        1: 0,\n        2: 2,\n        3: 0,\n        4: 2\n    }\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    return fib4(n-1) + fib4(n-2)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a, b, c = 0, 0, 1\n    for _ in range(n):\n        a, b, c = b, c, a + b\n    return c\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n < 3:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 1:\n        raise ValueError(\"Input must be greater than zero.\")\n    if n == 1 or n == 2:\n        return n\n    else:\n        return fib4(n - 1) + fib4(n - 2)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 0\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not l:\n        raise ValueError(\"Empty list\")\n    l_len = len(l)\n    if l_len % 2 == 1:\n        return sorted(l)[l_len//2]\n    return sum(sorted(l)[l_len//2-1:l_len//2+1])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(l)[len(l) // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n == 0:\n        raise Exception('Cannot compute median of empty list')\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    sorted_l = sorted(l)\n    length = len(sorted_l)\n    middle = length // 2\n    if length % 2 == 1:\n        return sorted_l[middle]\n    else:\n        return (sorted_l[middle] + sorted_l[middle - 1]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(l) % 2 == 0:\n        return sorted(l)[len(l) // 2]\n    return sorted(sorted(l)[len(l) // 2])[0]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return float(l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert(len(l) >= 2)\n    l.sort()\n    mid = len(l) // 2\n    if len(l) % 2:\n        return l[mid]\n    else:\n        return (l[mid] + l[mid - 1]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sorted_l = sorted(l)\n    if len(sorted_l) % 2 == 0:\n        return (sorted_l[len(sorted_l)//2] + sorted_l[len(sorted_l)//2 - 1]) / 2\n    else:\n        return sorted_l[len(sorted_l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = len(l)\n    if n == 0:\n        return None\n    if n % 2 == 1:\n        return sorted(l)[n // 2]\n    else:\n        return (sorted(l)[n // 2 - 1] + sorted(l)[n // 2]) / 2\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if text == text[::-1]:\n        return True\n    return False\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    text = text.lower()\n    text = ''.join(char for char in text if char.isalnum())\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    left_idx, right_idx = 0, len(text) - 1\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not text:\n        return True\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return text == reverse_string(text)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert (p > 1)\n    if n == 0:\n        return 1\n    else:\n        return (n % p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return modp(n // p, p) * (n % p)\n    \n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert p > 0\n    return (n % p) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = 1\n    while p > 0:\n        if p & 1:\n            result = (result * n) % p\n        p >>= 1\n        n = (n * n) % p\n    return result\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return (modp(n % 2, p) * modp(n, p)) % p\n    \ndef newmodp(n, p):\n    \"\"\"Return the set of integers n, p, k such that n = k * 2^p\n    (be aware of numerics).\n    >>> newmodp(3, 5)\n    [3, 9, 27]\n    >>> newmodp(1101, 101)\n    [1101, 1026, 1018, 1032, 1048, 1064, 1081, 1104, 1101, 1151]\n    >>> newmodp(0, 101)\n    [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (p - 1) % n\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # if n < 0:\n    #     n = n + p\n    #     return modp(n, p)\n    return (n % p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (p - 1) % n\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + 26) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + 26) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    vowels = \"aeiouAEIOU\"\n    remove = \"\"\n    for letter in text:\n        if letter not in vowels:\n            remove += letter\n    return remove\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in text:\n        if not i in 'aeiouAEIOU':\n            text = text.replace(i,\"\")\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return text.translate(str.maketrans('', '', 'aeiou'))"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # text = text.lower()\n    # return text.replace('a','b')\n    return \"\".join([c for c in text if c not in 'aeiou'])\n    # return ''.join(c for c in text if c not in 'aeiou')\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for vowel in 'aeiouAEIOU':\n        text = text.replace(vowel, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    vowels = 'aeiouAEIOU'\n    word = ''\n    for char in text:\n        if char not in vowels:\n            word += char\n    return word\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    vowels = \"aeiouAEIOU\"\n    for i in vowels:\n        if i in text:\n            text = text.replace(i, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for i in text:\n        if i not in vowels:\n            result += i\n    return result\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vowels = 'aeiouAEIOU'\n    for char in text:\n        if char in vowels:\n            text = text.replace(char,\"\")\n    return text\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for x in l:\n        if x >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for x in l:\n        if x < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for num in l:\n        if num > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for e in l:\n        if e > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for val in l:\n        if val >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in l:\n        if i <= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for num in l:\n        if num < t:\n            return False\n    return True\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x + y\n    \ndef add_with_func(x, y):\n    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(set(s0) - set(s1)) == 0\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(min(len(s0), len(s1))):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(set(s0.lower()) & set(s1.lower())) == len(s0.lower())\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(set(s0) & set(s1)) == len(s0)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return all(c in s0 for c in s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return all(a == b for a, b in zip(s0, s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return s0 == s1\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert n >= 0, 'n must be >= 0'\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert n >= 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n < 1:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 3:\n        return 1\n    fib_1 = 1\n    fib_2 = 1\n    for i in range(n-2):\n        fib_1, fib_2 = fib_2, fib_1 + fib_2\n    return fib_1\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n < 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n < 1:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    while \">>>\" in brackets:\n        brackets = brackets.replace(\">>>\", \"<>\")\n    return brackets == \"<>\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    while brackets:\n        first = brackets[0]\n        if first in \"<>\":\n            brackets = brackets[1:]\n        else:\n            return False\n        if brackets.startswith(first):\n            brackets = brackets[1:]\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    bracket_stack = []\n    for c in brackets:\n        if c == \"<\":\n            bracket_stack.append(c)\n        elif c == \">\":\n            if bracket_stack == []:\n                return False\n            else:\n                bracket_stack.pop()\n    return not bracket_stack\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    openers = \"([{\"\n    closers = \")]}\"\n    opposites = {\"]\":\"[\", \"}\":\"{\"}\n    #print(openers, closers)\n    for index, bracket in enumerate(brackets):\n        if bracket not in closers:\n            continue\n        if bracket not in openers:\n            return False\n        if bracket in opposites:\n            opposite = opposites[bracket]\n            if bracket!= opposites[bracket]:\n                opposite_index = brackets.index(opposite)\n                if brackets[opposite_index]!= bracket:\n                    return False\n        else:\n            if brackets.index(bracket)!= index:\n                return False\n    return True\n    "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    brackets = brackets.split()\n    closed = []\n    for i in range(len(brackets)):\n        if brackets[i][0] == \"<\":\n            closed.append(brackets[i][1:])\n    while len(closed) > 0 and len(brackets) > 0:\n        if brackets[0] == closed[0]:\n            closed.remove(closed[0])\n            brackets.remove(brackets[0])\n        else:\n            return False\n    return len(closed) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(\">\")\n        elif c == \">\":\n            if stack and stack[-1] == \"<\":\n                stack.pop()\n            else:\n                return False\n    return not stack\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    assert brackets, \"Brackets are empty\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            count += 1\n        elif brackets[i] == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Base case\n    if len(brackets) < 2:\n        return False\n    \n    # If first character is \"<\" then we know that the bracketing is incorrect\n    if brackets[0]!= \"<\":\n        return False\n    \n    # If first character is \">\" then we know that the bracketing is incorrect\n    if brackets[-1]!= \">\":\n        return False\n    \n    # If we know that the brackets are correct, then we can recurse\n    # Remove first and last characters and then check if it is correct\n    return correct_bracketing(brackets[1:-1])\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    stack = []\n    brackets = [x for x in brackets]\n    while brackets:\n        left = brackets.pop()\n        if left == \"(\":\n            stack.append(left)\n        else:\n            if stack:\n                brackets.append(stack.pop())\n                if left!= \")\":\n                    return False\n            else:\n                return False\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not l:\n        return True\n    \n    if l[0] <= l[1]:\n        return monotonic(l[1:])\n    \n    return False\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return all(x <= y or y <= x for x, y in zip(l, l[1:]))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    if len(l) < 2:\n        return True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    i = 0\n    while i < len(l) - 1:\n        if l[i] < l[i + 1]:\n            i += 1\n        elif l[i] > l[i + 1]:\n            return False\n        else:\n            i += 1\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if l == sorted(l, reverse=True):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    for i in range(len(l) - 1):\n        if l[i] >= l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(l) <= 1:\n        return True\n    else:\n        return l[1] <= l[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return all(l[i - 1] <= l[i] for i in range(1, len(l))) or all(l[i - 1] >= l[i] for i in range(1, len(l)))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return all(a <= b for a, b in zip(l, l[1:])) or all(a >= b for a, b in zip(l, l[1:]))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    common = []\n    l1, l2 = set(l1), set(l2)\n    for i in l1:\n        if i in l2:\n            common.append(i)\n    common.sort()\n    return common\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return list(set(l1).intersection(set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    result = []\n    for e in l1:\n        if e in l2 and e not in result:\n            result.append(e)\n    return result\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    for i in l1:\n        for j in l2:\n            if i == j:\n                return l2\n    \n    return []\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(set(l1).intersection(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l1_set = set(l1)\n    l2_set = set(l2)\n    common_elements = l1_set & l2_set\n    return sorted(common_elements)\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    common_elements = []\n    for x in l1:\n        if x in l2 and x not in common_elements:\n            common_elements.append(x)\n    return common_elements\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 2:\n        return 2\n    for i in range(n):\n        if i == 2 or i == 3:\n            continue\n        if is_prime(n):\n            return i\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    while n > 1:\n        i = n\n        while i % 2 == 0:\n            i = i / 2\n        while i % 3 == 0:\n            i = i / 3\n        if i == 1:\n            return n\n        n = n - 1\n    return n\n    "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if n % 2 == 0:\n        n = n / 2\n        \n    prime = 3\n    while n % prime == 0:\n        n = n / prime\n        prime += 2\n        \n    return prime\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Find the greatest divisor of n not including 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    # If the loop doesn't break, the n is prime\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    factor = 2\n    while factor < n:\n        if n % factor == 0:\n            return factor\n        else:\n            factor += 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    factor = n - 1\n    while factor > 1:\n        if n % factor == 0:\n            return factor\n        factor -= 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    i = 2\n    while n % i!= 0:\n        i += 1\n    return i\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    largest_prime_factor_found = 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # n must be greater than 1\n    assert n > 1, \"input is not a positive number\"\n    \n    # Find the largest prime factor (p) less than n\n    largest_prime_factor_i = 2\n    while largest_prime_factor_i < n:\n        if n % largest_prime_factor_i == 0:\n            largest_prime_factor_i += 1\n        else:\n            largest_prime_factor_i += 2\n    return largest_prime_factor_i\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    factor = 2\n    while factor < n:\n        if n % factor == 0:\n            return factor\n        factor += 1\n    return factor\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    total = 0\n    \n    for i in range(1,n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 0:\n        return 'invalid'\n    else:\n        total = 0\n        while n >= 1:\n            total += n\n            n -= 1\n        return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total = 0\n    for i in range(1,n + 1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(range(1, n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return n * (n + 1) // 2\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum(range(1, n+1))\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert brackets and (brackets[0] == \"(\" and brackets[-1] == \")\"), \"brackets must start with a '(', and end with a ')'.\"\n    assert len(brackets)%2 == 0, \"brackets must be an even number.\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    open_brackets = 0\n    for b in brackets:\n        if b == \"(\":\n            open_brackets += 1\n        elif b == \")\":\n            open_brackets -= 1\n        if open_brackets < 0:\n            return False\n    return open_brackets == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    open_brackets = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            open_brackets += 1\n        else:\n            open_brackets -= 1\n        if open_brackets == 0:\n            return True\n    return False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n_brackets = 0\n    for s in brackets:\n        if s == '(':\n            n_brackets += 1\n        elif s == ')':\n            n_brackets -= 1\n        if n_brackets < 0:\n            return False\n    return n_brackets == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    openings, closings = brackets.count(\"(\"), brackets.count(\")\")\n    # check whether the number of openings minus number of closings is equal to zero\n    return openings == closings\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    brackets = brackets.replace(\" \", \"\")\n    brackets = list(brackets)\n    \n    if len(brackets) % 2 == 0:\n        return False\n    \n    brackets.sort()\n    \n    if brackets[0]!= \"(\":\n        return False\n    \n    for i in range(1, len(brackets), 2):\n        if brackets[i]!= \")\":\n            return False\n        \n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    stack = []\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\")\")\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(')')\n        elif char == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    matching = list()\n    for open_bracket in brackets:\n        if open_bracket in \"([{\":\n            matching.append(open_bracket)\n    return all(matching)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    derivatives = []\n    for i in range(len(xs)):\n        if i == 0:\n            derivatives.append(xs[i])\n        elif i == len(xs) - 1:\n            derivatives.append(xs[i])\n        else:\n            derivatives.append(xs[i] * (i + 1))\n    return derivatives\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [i*(i+1) for i in range(1, len(xs))]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    coefficients = []\n    for i in range(len(xs) - 1):\n        coefficients.append(xs[i] * i)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(xs) == 0:\n        return []\n    elif len(xs) == 1:\n        return [0]\n    else:\n        d = []\n        for i in range(1, len(xs)):\n            d.append(xs[i] * i)\n        d.append(1)\n        return d\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [x * (x + 1) for x in xs]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    res = []\n    for i in range(len(xs)):\n        if i == 0:\n            res.append(1)\n        else:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    xs_length = len(xs)\n    # create a empty list\n    dxs = [0 for _ in range(xs_length)]\n    for i in range(1, xs_length):\n        dxs[i] = xs[i] * i\n    return dxs\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    xs.reverse()\n    return [xs[i] + xs[i+1] * i for i in range(len(xs) - 1)]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    res = []\n    for i in range(1, len(xs)):\n        res.append(xs[i] + i * xs[i - 1])\n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = []\n    for i in range(len(xs) - 1):\n        result.append(xs[i] + xs[i+1] * i)\n    return result\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n <= 0:\n        raise ValueError('Negative numbers not supported.')\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    f = {0: 0, 1: 1, 2: 1}\n    return f[n]\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return n\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u')\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(s.lower().count(x) for x in 'aeiouy')\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    vowels = 0\n    for i in range(len(s)):\n        if s[i] in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n            vowels += 1\n    if s[-1] in [\"e\", \"i\", \"o\", \"u\"]:\n        vowels += 1\n    return vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s = s.lower()\n    vowels = 'aeiou'\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n    # or\n    # return len([letter for letter in s if letter in \"aeiou\"])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for x in s:\n        if x in \"aeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    vowels = 0\n    vowels_list = ['a', 'e', 'i', 'o', 'u']\n    for char in s:\n        if char in vowels_list:\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in \"aeiouy\":\n            count += 1\n    return count\n    \nprint(FIX)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vowels = \"aeiouy\"\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    x = str(x)\n    if shift > len(x):\n        return \"\".join(reversed(x))\n    return x[shift:] + x[:shift]"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    digits = map(int, str(x))\n    if shift > len(digits):\n        return ''.join(map(str, digits[-shift:] + digits[:-shift]))\n    else:\n        return ''.join(map(str, digits[shift:] + digits[:shift]))\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = 0\n    while shift > 0:\n        res = (res * 10 + x % 10) % 10\n        x //= 10\n        shift -= 1\n    return str(res)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    res = ''\n    while shift > 0:\n        res = str(x % 10) + res\n        x = int(x / 10)\n        shift = shift - 1\n    return res if shift == 0 else res[::-1]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # If shift > len(x), reverse the number\n    if shift > len(x):\n        x = x[-shift:] + x[:-shift]\n    else:\n        x = x[shift:] + x[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    shifted_digits = \"\"\n    for i in range(len(x)):\n        shifted_digits = x[-shift+i] + shifted_digits\n    return shifted_digits\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return int_to_str(shift_right(int_to_str(x), shift))\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # x = x if len(str(x)) <= shift else x % 10**(shift % len(str(x)))\n    x = x % (10**shift)\n    return (str(x) if len(str(x)) <= shift else str(x)[::-1])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # your code here\n    return x[shift:] + x[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if shift > len(str(x)):\n        x = int(str(x)[-1] + str(x)[:-1])\n    if shift < 0:\n        x = int(str(x)[len(str(x)) - abs(shift):] + str(x)[:-abs(shift)])\n    return str(x)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = s.upper()\n    return sum([ord(i) for i in s if i.isupper()])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([ord(x) for x in s if x.isalpha()])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum([ord(i) for i in s.upper() if ord(i) >= 65 and ord(i) <= 90])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum([ord(i) for i in s.upper()])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(int(i) for i in s if i.isdigit())\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sum = 0\n    for i in s:\n        sum += ord(i)\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum([ord(i) for i in s if i.isnumeric()])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum([ord(i) for i in s if ord(i)>=ord('0') and ord(i)<=ord('9')])\n    \n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    return sum(ord(i) for i in s if i.isupper())\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum(ord(s[i]) for i in range(0, len(s)))\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = s.split(' ')\n    s_num = []\n    for i in s:\n        if i!= 'and':\n            s_num.append(int(i))\n    return s_num[0] + s_num[1] + s_num[2]\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    fruit = 0\n    orange = 0\n    apple = 0\n    for i in range(len(s)):\n        if int(s[i]) >= apple:\n            apple = int(s[i])\n        elif int(s[i]) >= orange:\n            orange = int(s[i])\n    if apple > orange:\n        if apple > n - orange:\n            fruit = apple - (n - orange)\n    else:\n        if orange > n - apple:\n            fruit = orange - (n - apple)\n    return fruit\n    \nfruit_distribution(\"5 apples and 6 oranges\", 19)\nfruit_distribution(\"0 apples and 1 oranges\",3)\nfruit_distribution(\"2 apples and 3 oranges\", 100)\nfruit_distribution(\"100 apples and 1 oranges\",120)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    x = len(s)\n    y = int(s.split()[0])\n    z = int(s.split()[1])\n    if z <= y and x >= z:\n        return y-z\n    elif z < y and x >= y:\n        return y-y\n    else:\n        return 0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    apples = 0\n    oranges = 0\n    for letter in s:\n        if letter == \"apples\":\n            apples += int(letter)\n        else:\n            oranges += int(letter)\n    return oranges - apples - (apples + oranges)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(s) - len(s.split(\" \"))\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    total_apples = 0\n    total_oranges = 0\n    for i in s:\n        if i.isdigit():\n            if int(i) > 0:\n                total_apples += int(i)\n            else:\n                total_oranges += int(i)\n    total_oranges += int(s[::-1].strip())\n    return total_oranges - total_apples\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    m = s.split(\" \")\n    a = int(m[0])\n    b = int(m[1])\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a >= b:\n        return a - b\n    return b - a\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code goes here\n    #your code goes here\n    return s[0] - s[1] - s[2]\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    apples, oranges = s.split()\n    apples = int(apples)\n    oranges = int(oranges)\n    dist_apples = oranges - apples\n    dist_oranges = apples - oranges\n    if dist_apples < 0 or dist_oranges < 0:\n        return -1\n    return dist_apples if dist_apples >= dist_oranges else dist_oranges"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    app_count = 0\n    or_count = 0\n    mang_count = 0\n    for i in s:\n        if i.isalpha():\n            if i == \"a\":\n                app_count += 1\n            if i == \"o\":\n                or_count += 1\n            if i == \"m\":\n                mang_count += 1\n    print(\"mang count : \", mang_count)\n    if or_count > app_count and or_count > mang_count:\n        return or_count - app_count\n    elif app_count > or_count and app_count > mang_count:\n        return app_count - or_count\n    else:\n        return mang_count - or_count\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not arr: return []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    arr.sort()\n    plucked = []\n    if arr:\n        plucked = arr[:len(arr)//2]\n        if len(plucked) > 0:\n            if plucked[0] % 2 == 0:\n                return [plucked[0], arr.index(plucked[0])]\n            else:\n                return []\n        else:\n            return []\n    else:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Edge case\n    if len(arr) == 0:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n    return\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    arr_copy = arr[:]\n    arr_copy.sort()\n    smalest_value, smallest_index = arr_copy[0], 0\n    for i in range(1, len(arr_copy)):\n        if arr_copy[i] % 2 == 0:\n            smalest_value, smallest_index = min(arr_copy[i], smalest_value), i\n        else:\n            smalest_value, smallest_index = arr_copy[i], i\n    return [smalest_value, smallest_index]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    arr = sorted([(x, i) for i, x in enumerate(arr)])\n    return arr[0][1:] if len(arr) > 0 else []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    arr = sorted(arr)\n    return arr[0] if arr else []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    arr = sorted(arr, key=lambda node: node % 2 == 0)\n    return arr[0:1] if arr else arr\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Edge cases\n    if not arr:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    even_values = []\n    for idx, num in enumerate(arr):\n        if num % 2 == 0:\n            even_values.append(num)\n    return even_values or [-1]\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # your code here\n    if not lst: return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if lst:\n        return max(lst) if max(lst) > 0 else -1\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    freqs = {}\n    for i in lst:\n        if i in freqs.keys():\n            freqs[i] += 1\n        else:\n            freqs[i] = 1\n    for key, val in freqs.items():\n        if val > key:\n            return key\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(len(lst)):\n        if lst[i] > 0 and i >= lst[i]:\n            return lst[i]\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # checking if the list is empty\n    if len(lst) == 0:\n        return -1\n    \n    # setting the maximum frequency and its corresponding value\n    max_frequency = max(lst, key=lst.count)\n    maximum_value = max(lst)\n    \n    # checking if the frequency of the maximum value is higher than 1\n    if max_frequency > 1:\n        # if yes then returns the maximum_value if not then returns -1\n        return maximum_value if max_frequency >= maximum_value else -1\n    \n    # if the frequency of the maximum value is 1 then returns the max_frequency\n    return max_frequency\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    for i in range(len(lst)):\n        if lst[i] > 0 and lst.count(lst[i]) >= lst[i]:\n            return lst[i]\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    # Get the list of numbers from the original list\n    number_list = lst\n    \n    # Start with zero to check if any number is greater than zero\n    greater_than_zero = 0\n    \n    # Find the total numbers in the list\n    for i in number_list:\n        if i > 0:\n            greater_than_zero += 1\n            \n    # If there is at least one number greater than zero, \n    # we can return it since it's greater than zero\n    if greater_than_zero > 0:\n        return max(number_list)\n    \n    # If there are no numbers greater than zero, return -1\n    else:\n        return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for num in lst:\n        if num > 0 and num > lst.count(num):\n            return num\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return -1\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] >= i:\n            return i\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in lst:\n        if i >= 1:\n            return max(lst)\n    return -1"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # The algorithm takes O(n) time.\n    # For n elements, we have to traverse n nodes in the tree.\n    # In worst case, we will have to traverse the tree.\n    # This is an O(n) operation.\n    if not lst:\n        return []\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    min_val = min(lst)\n    max_val = max(lst)\n    return sorted(lst, key=lambda x: -(min_val - x) - (max_val - x))\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return lst[::-1]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(lst, reverse=True)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not lst:\n        return lst\n    smallest = min(lst)\n    return [smallest] + strange_sort_list(list(set(lst) - set([smallest])))\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not lst:\n        return lst\n    \n    start = min(lst)\n    return list(sorted(lst, key=lambda x: start+x))\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(lst)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return []\n    else:\n        if len(lst) == 1:\n            return lst\n        else:\n            my_min = min(lst)\n            my_max = max(lst)\n            lst2 = lst.copy()\n            lst2.remove(my_min)\n            lst2.remove(my_max)\n            lst3 = sorted(lst2)\n            lst4 = []\n            for item in lst:\n                if item >= my_min and item <= my_max:\n                    lst4.append(item)\n            lst4 = lst4 + lst2\n            lst5 = []\n            lst6 = []\n            for item in lst4:\n                if item > my_min:\n                    lst5.append(item)\n                elif item < my_max:\n                    lst6.append(item)\n            return lst5 + lst3 + lst6\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert len(lst) > 0\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    index = lst.index(min_val)\n    lst[index] = max_val\n    lst[index+1] = min_val\n    return lst\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = (a + b + c) / 2\n    if a > b and a > c and b > c:\n        return round(s * (s - a) * (s - b) * (s - c), 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round((a + b + c) / 2, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round(a * b * 0.5, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if is_valid_triangle(a, b, c):\n        return round(((a + b + c) / 2), 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a+b < c or a+c < b or b+c < a:\n        return -1\n    return 0.5*(a+b+c"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a > b + c or b > a + c or c > a + b:\n        return -1\n    else:\n        return round((a * b * c)/2, 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if (a+b > c) and (a+c > b) and (b+c > a):\n        return round(((a+b+c)/2), 2)\n    else:\n        return -1\n    \ntriangle_area(3, 4, 5)\ntriangle_area(1, 2, 10)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a+b < c:\n        return -1\n    elif a+c < b:\n        return -1\n    elif b+c < a:\n        return -1\n    else:\n        s1 = (a+b+c)/2\n        return round(s1, 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a < 0 or b < 0 or c < 0:\n        return -1\n    \n    # Check if a+b > c\n    if a + b > c:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # calculate the area\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    area = round(area, 2)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(q) == 1:\n        return True\n    elif len(q) > 1:\n        if check_palindrome(q):\n            for i in range(len(q)):\n                if q[i] > w:\n                    return False\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return q and sum(q)<=w\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(q) == 1:\n        return True\n    elif q == w:\n        return False\n    elif is_palindrome(q):\n        return True\n    elif q[0] + will_it_fly(q[1:], w - q[0]) == w:\n        return True\n    elif q[0] + will_it_fly(q[1:], w + q[0]) == w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if q == q[::-1]:\n        return sum(q) <= w\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    q.sort()\n    q.reverse()\n    total = 0\n    if (len(q) == 0):\n        return True\n    for num in q:\n        total = total + num\n    if (total <= w):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return is_palindrome(q) and q[0] + q[-1] <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if(is_palindrome(q) and (sum(q) <= w)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if(is_palindrome(q) and (sum(q)<=w)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def is_palindromic_list(obj):\n        s = 0\n        for num in obj:\n            s += num\n        return s == sum(obj) and len(obj)%2==0\n    def max_possible_weight(obj):\n        return max([sum(obj) + i for i in range(1,len(obj)+1)])\n    return is_palindromic_list(q) and sum(q) <= w and max_possible_weight(q) >= w\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return find_change(arr)\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # The problem is quite tricky to solve. The idea is that in order to create a\n    # palindromic array, we have to add a duplicate to each of the array elements\n    # that are not present at the beginning. So, we can use two pointers to solve this.\n    # One pointer starts from the second element and moves towards the end of the array\n    # while the other pointer starts from the beginning and moves towards the end of\n    # the array. At any time, the two pointers can both point to the same element.\n    # If these pointers are equal, then we can't add any more elements to make the array\n    # palindromic. If the two pointers are not equal, then we can add an element to make\n    # the array palindromic. If the pointers are not equal and if the elements at\n    # their current positions are same, then we can't add any more elements to make the\n    # array palindromic. If the pointers are not equal and if the elements are not\n    # same, then we can add two different elements to make the array palindromic.\n    #\n    # We can stop if the two pointers reach the end of the array.\n    # The total number of palindromic elements in the array is the minimum number of\n    # changes that we need to make to get the palindromic array.\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = 0\n    # Naive approach:\n    # while arr:\n    #     result += abs(arr.pop() - arr.pop(0))\n    # return result\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(arr) == 1:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # The starting point of the palindromic sequence\n    start = 0\n    # The ending point of the palindromic sequence\n    end = len(arr)-1\n    while start < end:\n        # If the difference between the end and the start index\n        # is even then we are going to make changes on elements\n        # between the two ends. This will make changes on elements\n        # less than start and elements greater than end.\n        if arr[end] - arr[start] == 0:\n            start += 1\n            end -= 1\n        # If the difference between the end and the start index\n        # is odd then we are going to make changes on elements\n        # greater than start and lesser than end.\n        elif arr[end] - arr[start] > 0:\n            start += 1\n        # If the difference between the end and the start index\n        # is greater than 0 then we are going to make changes on elements\n        # less than end and greater than start.\n        else:\n            end -= 1\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Make a copy of the array for easy comparison\n    arr_copy = arr[:]\n    \n    # Sort the array\n    arr_copy.sort()\n    \n    # Make a dictionary of each number from the array\n    num_to_index = {}\n    for index, num in enumerate(arr_copy):\n        num_to_index[num] = index\n    \n    # Go through the array and count how many numbers need to be changed\n    changes = 0\n    for index in range(len(arr_copy)):\n        if arr_copy[index]!= arr_copy[len(arr_copy) - index - 1]:\n            changes += 1\n    \n    return changes\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i]!= arr[count]:\n            count += 1\n            arr[i], arr[count] = arr[count], arr[i]\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Count the number of 1s\n    n = 0\n    for i in arr:\n        if i == 1:\n            n += 1\n    # If the array is not of length 1, return 0\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        # If there are two 1s, return 0\n        if arr[0] == 1 and arr[1] == 1:\n            return 0\n        # If there is a single 1, and the rest are 0, return 0\n        if arr[0] == 1 and arr[1]!= 1:\n            return 0\n        # If there are two 0s, return 0\n        if arr[0]!= 1 and arr[1] == 0:\n            return 0\n        # If there is a single 1, and the rest are 0, return 0\n        if arr[0]!= 1 and arr[1]!= 1:\n            return 0\n    # If the length of the array is 3, return the number of 1s\n    if len(arr) == 3:\n        # If the 1s are present, return 0\n        if arr[0] == 1:\n            return 0\n        # If the 1s are not present, return 1\n        if arr[1] == 1 and arr[2] == 1:\n            return 1\n        # If the 2s are not present, return 1\n        if arr[2] == 1 and arr[1] == 1:\n            return 1\n    # If the length of the array is 4, return the number of 1s\n    if len(arr) == 4:\n        # If the 2s are not present, return 1\n        if arr[2] == 1 and arr[3] == 1:\n            return 1\n        # If the 1s are not present, return 1\n        if arr[0] == 1 and arr[1] == 1:\n            return 1\n        # If the 2s are not present, return 1\n        if arr[1] == 1 and arr[2] == 1:\n            return 1\n    # If the length of the array is 5, return the number of 1s\n    if len(arr) == 5:\n        # If the 3s are not present, return 1\n        if arr[3] == 1 and arr[4] == 1:\n            return 1\n        # If the 2s are not present, return 1\n        if arr[2] == 1 and arr[1] == 1:\n            return 1\n        # If the 1s are not present, return 1\n        if arr[1] == 1 and arr[0] == 1:\n            return 1\n    # If the length of the array is 6, return the number of 1s\n    if len(arr) == 6:\n        # If the 4s are not present, return 1\n        if arr[4] == 1 and arr[5] == 1:\n            return 1\n        # If the 3s are not present, return 1\n        if arr[3] == 1 and arr[2] == 1:\n            return 1\n        # If the 2s are not present, return 1\n        if arr[1] == 1 and arr[0] == 1:\n            return 1\n        # If the 1s are not present, return 1\n        if arr[0] == 1 and arr[1] == 1:\n            return 1\n    # If the length of the array is 7, return the number of 1s\n    if len(arr) == 7:\n        # If the 6s are not present, return 1\n        if arr[6] == 1 and arr[5] == 1:\n            return 1\n        # If the 5s are not present, return 1\n        if arr[4] == 1 and arr[3] == 1:\n            return 1\n        # If the 4s are not present, return 1\n        if arr[3] == 1 and arr[2] == 1:\n            return 1\n        # If the 2s are not present, return 1\n        if arr[1] == 1 and arr[0] == 1:\n            return 1\n        # If the 1s are not present, return 1\n        if arr[0] == 1 and arr[1] == 1:\n            return 1\n    # If the length of the array is 8, return the number of 1s\n    if len(arr) == 8:\n        # If the 7s are not present, return 1\n        if arr[7] == 1 and arr[6] == 1:\n            return 1\n        # I"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(arr) == 1:\n        return 0\n    if arr == arr[::-1]:\n        return 0\n    min_chng = len(arr)\n    for i in range(len(arr)):\n        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]\n        if arr == arr[::-1]:\n            min_chng = min(min_chng, len(arr)-i-1)\n            arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]\n    return min_chng\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    lst_a, lst_b = lst1, lst2\n    return sorted(set(lst_a))\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    lst = []\n    for i in range(len(lst1)):\n        if len(lst1[i]) > len(lst2[i]):\n            lst.append(lst1[i])\n        elif len(lst1[i]) == len(lst2[i]):\n            lst.append(lst1[i])\n    return lst\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(lst1) == 0 or len(lst2) == 0:\n        return []\n    if len(lst1) < len(lst2):\n        return lst1\n    return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst1 if len(lst1) > len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    common = []\n    for x in lst1:\n        if x in lst2:\n            common.append(x)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if lst1 == []: return lst2\n    if lst2 == []: return lst1\n    lst1_chars, lst2_chars = len(lst1), len(lst2)\n    return lst1 if lst1_chars < lst2_chars else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return(list(set(lst1) & set(lst2)))\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    else:\n        return lst2\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # Primos e multiplos de 3\n    primos = {2,3,5,7,11,13,17,19,23,29}\n    \n    # Aplicando logica l\u00f3gica\n    if (a%3!= 0 or a%7!= 0 or a%11!= 0 or a%13!= 0 or a%17!= 0 or a%19!= 0 or a%23!= 0):\n        return False\n    \n    # Aplicando teste de primalidade\n    for i in primos:\n        if (i == a):\n            return True\n    \n    # Caso contr\u00e1rio\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(2,101):\n        if a % i == 0:\n            if i % 3 == 0 and i % 5 == 0:\n                return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(2, 100):\n        if (a % i == 0) and (i % 3 == 0):\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    import math\n    return a%3==0 and (a%5==0 or math.gcd(a,5)==1)\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    primes = []\n    primes.append(2)\n    primes.append(3)\n    primes.append(5)\n    primes.append(7)\n    primes.append(11)\n    primes.append(13)\n    primes.append(17)\n    primes.append(19)\n    primes.append(23)\n    primes.append(29)\n    primes.append(31)\n    primes.append(37)\n    primes.append(41)\n    primes.append(43)\n    primes.append(47)\n    primes.append(53)\n    primes.append(59)\n    primes.append(61)\n    primes.append(67)\n    primes.append(71)\n    primes.append(73)\n    primes.append(79)\n    primes.append(83)\n    primes.append(89)\n    primes.append(97)\n    for i in range(1,100):\n        if (i%3 == 0) and (i%5 == 0):\n            for prime in primes:\n                if (i%prime!= 0):\n                    continue\n                else:\n                    return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    for i in range(2,100):\n        if (i*3) % 2 == 0 or (i*5) % 2 == 0 or (i*7) % 2 == 0:\n            continue\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    \n    for x in primes:\n        if a % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    primes = []\n    for i in range(1, 101):\n        if is_prime(i) and i!= 1:\n            primes.append(i)\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Solution 1\n    \n    for i in range(3, 101, 3):\n        if a % i == 0:\n            return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    x = True\n    for i in range(3,10):\n        if a % i == 0:\n            x = False\n            break\n    return x\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x ** 1 == n\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x**(1/int(n)) == x\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return x == int(x**(1/int(n)))\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if x == 0:\n        return False\n    else:\n        while x!= 1:\n            if x % n == 0:\n                x = x // n\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #check if int\n    if type(n)!= int:\n        return False\n    #check if int**n\n    if x == n**int(x):\n        return True\n    return False\n    "
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    x = int(x)\n    n = int(n)\n    if n**x == x:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n==0:\n        return False\n    elif n==1:\n        return True\n    elif n==2:\n        return x==n\n    elif n==3:\n        return x==n**2\n    else:\n        while n>1:\n            if x<(n**2):\n                return False\n            elif x==(n**2):\n                return True\n            else:\n                n=n-1\n                x=x-n\n        return True\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x**n == x\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # your code here\n    \n    return a**3 == a\n    \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #first, check the input is an integer\n    if type(a) == int:\n        #check if the input is a cube\n        if a**(1/3) == a:\n            return True\n        else:\n            return False\n    else:\n        return \"Error: 'a' must be an integer.\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert a >= 0, \"Invalid input. a is negative number\"\n    return a**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return a**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    x = a**3\n    if x == a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = int(a**(1/3))\n    if a%n == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # return (a**3) == (a**3) \n    return (a**3) == (a**3)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (a**3) % (a) == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #a= a\n    #if a == 1:\n    #    return True\n    if(a**(1/3))**3 == a:\n        return True\n    else:\n        return False\n    \n    \ndef istriangle(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a triangle.\n    Note: you may assume the input is always valid.\n    Examples:\n    isTriangle(1) ==> False\n    isTriangle(3) ==> True\n    isTriangle(10) ==> True\n    isTriangle(4) ==> False\n    isTriangle(0) ==> False\n    isTriangle(180) ==> False\n    '''\n    if(a*(a+1)/2) == a:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a**3 == 1\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # return 0 if the number is empty\n    if num == '':\n        return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n = 0\n    for c in num:\n        if c == '0' or c == '1' or c == '2' or c == '3' or c == '4' or c == '5' or c == '6' or c == '7' or c == '8' or c == '9' or c == 'B' or c == 'D' or c == 'F':\n            n += 1\n    return n\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def is_prime(x):\n        if x == 2 or x == 3: return True\n        if x % 2 == 0 or x % 3 == 0: return False\n        for i in range(5, int(x ** 0.5) + 1, 6):\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n        return True\n    if len(num) == 0: return 0\n    ans = 0\n    for i in range(len(num)):\n        if num[i] == \"B\" or num[i] == \"D\":\n            ans += 1\n    return ans\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if num == \"\":\n        return 0\n    count = 0\n    for i in num:\n        if is_prime(int(i)):\n            count += 1\n    return count\n    \ndef is_prime(n):\n    \"\"\"You have been tasked to write a function that receives a natural number \n    and returns a boolean value indicating whether it is prime.\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For n = 2 the output should be True.\n    For n = 3 the output should be False.\n    For n = 7 the output should be True.\n    For n = 19 the output should be False.\n    For n = 29 the output should be True.\n    \"\"\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n <= 3:\n        return True\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef find_squares(n):\n    \"\"\"You have been tasked to write a function that receives a natural \n    number n and returns a list of numbers from 0 to n-1, \n    where the number i in the list is equal to i*i.\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For n = 4 the output should be [0, 1, 4, 9]\n    For n = 10 the output should be [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n    For n = 11 the output should be [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    \"\"\"\n    i = 0\n    while i < n:\n        i = i*i\n    return list(range(i))\n    \ndef first_3_primes():\n    \"\"\"You have been tasked to write a function that receives a natural \n    number n and returns a list of numbers from 0 to n-1, \n    where the number i in the list is equal to i*i*i.\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For n = 4 the output should be [0, 1, 4]\n    For n = 10 the output should be [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n    For n = 11 the output should be [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    \"\"\"\n    i = 0\n    while i < 3:\n        i = i*i*i\n    return list(range(i))\n    \ndef test():\n    \"\"\"\n    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    hex_str = \"0123456789ABCDEF\"\n    dec = int(num, 16)\n    prime_nums = []\n    dec = int(num, 16)\n    for i in range(len(hex_str)):\n        if dec % i!= 0:\n            prime_nums.append(i)\n    count = 0\n    for i in prime_nums:\n        if (i - 2) % 4 == 0:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(str(num))\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = 0\n    for i in num:\n        if i.upper() == 'A' or i.upper() == 'B' or i.upper() == 'C' or i.upper() == 'D' or i.upper() == 'E' or i.upper() == 'F':\n            if i == 'A' or i == 'B' or i == 'C' or i == 'D' or i == 'E' or i == 'F':\n                result += 1\n    return result\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    num_list = list(num)\n    for i in range(len(num_list)):\n        if num_list[i].isdigit():\n            num_list[i] = int(num_list[i])\n            if num_list[i] > 1 and num_list[i] < 27:\n                num_list[i] = 0\n    num_list.sort(reverse=True)\n    list_len = len(num_list)\n    prime_list = [2,3,5,7,11,13,17]\n    count = 0\n    for i in range(list_len):\n        if num_list[i] in prime_list:\n            count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    counter = 0\n    for i in range(len(num)):\n        if (num[i].isnumeric()):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum(digits.count(True) for digits in str(num).upper().replace(\" \", \"\").split(\",\"))\n    \nprint(hex_key(input()))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # your code here\n    return (\"db\"+format(decimal,\"b\"))[1:len(\"db\"+format(decimal,\"b\"))-1]\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (\"db\" + \"1\" * (decimal - 1) + \"db\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    decimal = str(decimal)\n    new = ''\n    for char in decimal:\n        if char!= '0' and char!= '1':\n            raise TypeError('Decimal must contain only 0 and 1')\n        new += '1' if char == '0' else '0'\n    new = 'db' + new + 'db'\n    return new"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    binary = \"\"\n    for i in range(10):\n        if decimal >= 2**(i):\n            binary += \"1\"\n            decimal -= 2**(i)\n        else:\n            binary += \"0\"\n    binary += \"db\"\n    binary += \"db\"\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if decimal == 0:\n        return \"db\"\n    s = \"\"\n    while decimal!= 0:\n        rem = decimal % 2\n        s = s + str(rem)\n        decimal = decimal // 2\n    return \"db\" + s + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"{0:b}\".format(decimal)"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    binary = bin(decimal)\n    binary = binary[2:]\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # I had to write some code, to make sure it works\n    return \"db\" + ''.join(['1' if i > 0 else '0' for i in decimal_to_binary_iterative(decimal)]) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        if decimal % 2 == 0:\n            binary = \"0\" + binary\n        else:\n            binary = \"1\" + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    binary = bin(decimal)\n    # print(binary)\n    return 'db'+binary[2:]+'db'\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(s) < 3:\n        return False\n    if s == s[::-1]:\n        return True\n    for i in range(1, len(s)):\n        if s[i] == s[i-1] and s[i]!= s[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    if len(s) < 3:\n        return False\n    \n    counter = {}\n    \n    for x in s:\n        if x in counter:\n            counter[x] += 1\n        else:\n            counter[x] = 1\n    \n    for x in counter:\n        if counter[x] == 1:\n            return False\n    \n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(s) >= 3 and len(set(s[i:i+3] for i in range(0, len(s)-2))) == 1\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    pass"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    seen = set()\n    n = len(s)\n    i = 0\n    while i < n:\n        letter = s[i]\n        if letter in seen:\n            return False\n        else:\n            seen.add(letter)\n        if i < n-2:\n            letter2 = s[i+1]\n            if letter == letter2:\n                return False\n        i += 1\n    return True\n    "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not s:\n        return False\n    \n    visited = set()\n    current = s[0]\n    \n    while len(visited)!= len(s):\n        if current not in visited:\n            visited.add(current)\n            current = s[s.index(current)+1]\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # first let's initialize the variables\n    # let's count up\n    # let's check if the character frequency is the same\n    # if it is, keep counting it up\n    # else, return false\n    char_frequency = {}\n    happy = False\n    \n    # let's get the length of the string\n    # let's iterate over the string\n    # if it's less than 3 characters, return false\n    # for each character in the string\n    # let's add it to the char_frequency dictionary\n    # if it's already in there, increment it\n    # else, add it to the dictionary and set it's value to 1\n    # now that we have the dictionary, let's check if it has at least 3 characters\n    # if it has 3, then return false\n    # if it does not, let's see if the frequency of every consecutive char is unique\n    # if it is unique, then return true\n    # else, return false\n    \n    if len(s) < 3:\n        return False\n    else:\n        for char in s:\n            if char in char_frequency:\n                char_frequency[char] += 1\n            else:\n                char_frequency[char] = 1\n        \n        if len(char_frequency.keys()) < 3:\n            return False\n        else:\n            # the frequencies of the characters are the same\n            for k in char_frequency.keys():\n                if char_frequency[k] == 3:\n                    return False\n            \n            # these are all the same chars so we can return true\n            return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    l = len(s)\n    if l < 3:\n        return False\n    s = set(s)\n    for i in range(l - 2):\n        if s[i + 1]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    h = set()\n    for i in range(0,len(s)-2):\n        if s[i] in h:\n            return False\n        if s[i] == s[i+1]:\n            h.add(s[i])\n    if len(h) < 3:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your code here\n    if not s:\n        return False\n    seen = set()\n    i = 0\n    while i < len(s):\n        if s[i] in seen:\n            return False\n        seen.add(s[i])\n        i += 1\n    return len(seen) >= 3\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # write your solution here\n    letter_grade = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    res = []\n    for i in grades:\n        index = letter_grade.index(max(letter_grade, key=lambda x: float(x) if x!= 'E' else 0))\n        res.append(letter_grade[index])\n        letter_grade = letter_grade[index:]\n    return res"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    grades = list(grades)\n    grades_dict = {\n        1.0: ['A', 'A-', 'B+', 'B', 'B-'],\n        1.7: ['A+', 'A', 'A-', 'B', 'B-'],\n        2.0: ['B+', 'B', 'B-', 'C', 'C-'],\n        2.3: ['B+', 'B', 'B-', 'C', 'C-'],\n        2.7: ['B+', 'B', 'B-', 'C', 'C-'],\n        3.0: ['B+', 'B', 'B-', 'C', 'C-'],\n        3.3: ['B+', 'B', 'B-', 'C', 'C-'],\n        3.7: ['B+', 'B', 'B-', 'C', 'C-'],\n        4.0: ['A+', 'A', 'A-', 'B', 'B-'],\n        4.3: ['A+', 'A', 'A-', 'B', 'B-'],\n        4.7: ['A+', 'A', 'A-', 'B', 'B-'],\n        5.0: ['A+', 'A', 'A-', 'B', 'B-']\n    }\n    for i in range(len(grades)):\n        grades[i] = float(grades[i])\n    grades_list = []\n    for i in range(len(grades)):\n        if grades[i] == 1.0:\n            grades_list.append(grades_dict[1.0][0])\n        elif grades[i] == 1.7:\n            grades_list.append(grades_dict[1.7][0])\n        elif grades[i] == 2.0:\n            grades_list.append(grades_dict[2.0][0])\n        elif grades[i] == 2.3:\n            grades_list.append(grades_dict[2.3][0])\n        elif grades[i] == 2.7:\n            grades_list.append(grades_dict[2.7][0])\n        elif grades[i] == 3.0:\n            grades_list.append(grades_dict[3.0][0])\n        elif grades[i] == 3.3:\n            grades_list.append(grades_dict[3.3][0])\n        elif grades[i] == 3.7:\n            grades_list.append(grades_dict[3.7][0])\n        elif grades[i] == 4.0:\n            grades_list.append(grades_dict[4.0][0])\n        elif grades[i] == 4.3:\n            grades_list.append(grades_dict[4.3][0])\n        elif grades[i] == 4.7:\n            grades_list.append(grades_dict[4.7][0])\n        elif grades[i] == 5.0:\n            grades_list.append(grades_dict[5.0][0])\n    return grades_list\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    grades = grades\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = []\n    for i in grades:\n        if i >= 3.7:\n            res.append('A+')\n        elif i >= 3.3:\n            res.append('A')\n        elif i >= 3.0:\n            res.append('A-')\n        elif i >= 2.7:\n            res.append('B+')\n        elif i >= 2.3:\n            res.append('B')\n        elif i >= 2.0:\n            res.append('B-')\n        elif i >= 1.7:\n            res.append('C+')\n        elif i >= 1.3:\n            res.append('C')\n        elif i >= 1.0:\n            res.append('C-')\n        elif i >= 0.7:\n            res.append('D+')\n        elif i >= 0.3:\n            res.append('D')\n        elif i >= 0.0:\n            res.append('D-')\n        else:\n            res.append('E')\n    return res\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    letter_grade = ['F', 'D', 'D', 'D', 'C', 'C', 'C', 'B', 'B', 'B', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']\n    for i in range(len(grades)):\n        if grades[i] >= 4.0:\n            grades[i] = letter_grade[i]\n    return grades\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    letter_grades = []\n    for grade in grades:\n        if grade >= 3.7:\n            letter_grades.append('A+')\n        elif grade >= 3.3:\n            letter_grades.append('A')\n        elif grade >= 3.0:\n            letter_grades.append('A-')\n        elif grade >= 2.7:\n            letter_grades.append('B+')\n        elif grade >= 2.3:\n            letter_grades.append('B')\n        elif grade >= 2.0:\n            letter_grades.append('B-')\n        elif grade >= 1.7:\n            letter_grades.append('C+')\n        elif grade >= 1.3:\n            letter_grades.append('C')\n        elif grade >= 1.0:\n            letter_grades.append('C-')\n        elif grade >= 0.7:\n            letter_grades.append('D+')\n        elif grade >= 0.3:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades\n    \ndef main():\n    grades = [4.0, 3, 1.7, 2, 3.5]\n    print(numerical_letter_grade(grades))\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    letter_grades = ['F', 'D-', 'D', 'D+', 'C-', 'C', 'C+', 'B-', 'B', 'B+']\n    grades = list(grades)\n    grades_list = []\n    for i in range(len(grades)):\n        grades_list.append(letter_grades[int(grades[i] / 4)])\n    return grades_list\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in grades:\n        if i > 4.0:\n            if i > 3.7:\n                if i > 3.3:\n                    if i > 3.0:\n                        if i > 2.7:\n                            if i > 2.3:\n                                if i > 2.0:\n                                    if i > 1.7:\n                                        if i > 1.3:\n                                            if i > 1.0:\n                                                if i > 0.7:\n                                                    if i > 0.3:\n                                                        if i > 0.0:\n                                                            if i > -0.3:\n                                                                if i > -0.7:\n                                                                    if i > -1.3:\n                                                                        if i > -1.7:\n                                                                            if i > -2.0:\n                                                                                if i > -2.3:\n                                                                                    if i > -2.7:\n                                                                                        if i > -3.0:\n                                                                                            if i > -3.3:\n                                                                                                if i > -3.7:\n                                                                                                            if i > -4.0:\n                                                                                                                if i > -4.3:\n                                                                                                                    if i > -4.7:\n                                                                                                                        if i > -5.0:\n                                                                                                                            if i > -5.3:\n                                                                                                                                if i > -5.7:\n                                                                                                                                if i > -6.0:\n                                                                                                                                    if i > -6.3:\n                                                                                                                                    if i > -6.7:\n                                                                                                                                    if i > -7.0:\n                                                                                                                                    if i > -7.3:\n                                                                                                                                    if i > -7.7:\n                                                                                                                                    if i > -8.0:\n                                                                                                                                        if i > -8.3:\n                                                                                                                                        if i > -8.7:\n                                                                                                                                        if i > -9.0:\n                                                                                                                                        if i > -9.3:\n                                                                                                                                        if i > -9.7:\n                                                                                                                                        if i > -10.0:\n                                                                                                                                        if i > -10.3:\n                                                                                                                                        if i > -10.7:\n                                                                                                                                        if i > -11.0:\n                                                                                                                                        if i > -11.3:\n                                                                                                                                        if i > -11.7:\n                                                                                                                                        if i > -12.0:\n                                                                                                                                        if i > -12.3:\n                                                                                                                                        if i > -12.7:\n                                                                                                                                        if i > -13.0:\n                                                                                                                                        if i > -13.3:\n                                                                                                                                        if i > -13.7:\n                                                                                                                                        if i > -14.0:\n                                                                                                                                        if i > -14.3:\n                                                                                                                                        if i > -14.7:\n                                                                                                                                        if i > -15.0:\n                                                                                                                                        if i > -15.3:\n                                                                                                                                        if i > -15.7:\n                                                                                                                                        if i > -16.0:\n                                                                                                                                        if i > -16.3:\n                                                                                                                                        if i > -16.7:\n                                                                                                                                        if i > -17.0:\n                                                                                                                                        if i > -17.3:\n                                                                                                                                        if i > -17.7:\n                                                                    "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your Code Below:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        i = 2\n        while i < n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return len(string) in prime_length.prime_length_dict\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(string) in {2, 3, 5, 7}\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return is_prime(len(string))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(string) == 2 and string.isdigit() and int(string) in range(3, 1001)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(string) in primes\n    \ndef palindrome(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    is a palindrome or False otherwise.\n    Examples\n    palindrome('tacocat') == True\n    palindrome('rat') == False\n    palindrome('hannah') == True\n    palindrome('robert') == False\n    \"\"\"\n    return string == string[::-1]\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(string) == len(set(string))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    string_length = len(string)\n    for x in range(2,string_length):\n        if string_length % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(string) == 1:\n        if string == '\\n':\n            return False\n        else:\n            return True\n    elif len(string) == 2:\n        if string == '\\n\\n':\n            return False\n        else:\n            return True\n    elif len(string) == 3:\n        if string == '\\n\\n\\n':\n            return False\n        else:\n            return True\n    else:\n        if len(string) % 2 == 0:\n            return False\n        else:\n            if prime_checker(len(string)) == True:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = len(string)\n    return n > 1 and all(n % i for i in range(2, int(sqrt(n)) + 1))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(2, 10):\n        count += int(str(n)[0])*10**i\n        count += int(str(n)[-1])*10**i\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return 0\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n_digits = int(math.log(n, 10)) + 1\n    return sum(c for c in range(1, n + 1) if str(c)[:n_digits] == str(c)[-n_digits:])\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    res = 0\n    for i in range(2, n + 1):\n        res += ends_with_one(i)\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Initialize the count\n    count = 0\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if (i % 10 == 1) or (i % 10 == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n1 = n - 1\n    n2 = n - 2\n    n3 = n - 3\n    n4 = n - 4\n    n5 = n - 5\n    n6 = n - 6\n    n7 = n - 7\n    n8 = n - 8\n    n9 = n - 9\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Number of 1-digit numbers = 2^n\n    return len(set(range(1, 10**n)))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def f(n):\n        count = 0\n        for i in range(1, n):\n            s = str(i)\n            if s[0] == \"1\" or s[-1] == \"1\":\n                count += 1\n        return count\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"\".join(list(map(str, bin(N)[2:])))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return ''.join(format(N, 'b').replace('0',''))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = 0\n    while N:\n        res += N % 2\n        N //= 2\n    return str(res)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return N\n    \nif __name__ == \"__main__\":\n    N = int(input())\n    print(solve(N)"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # Get all digit of N\n    N = str(N)\n    \n    # Initialise the total sum of digits\n    total_sum = 0\n    \n    # Iterate through the list of digit\n    for num in N:\n        total_sum += int(num)\n    \n    # Return total sum\n    return total_sum\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    # Convert N to binary\n    binary_N = bin(N)[2:]\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    s = 0\n    \n    while N > 0:\n        \n        digit = N % 2\n        \n        s += digit\n        \n        N = N//2\n        \n    return s\n    \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    \n    # Since N is always positive, the base is 2 and the sequence is the 1's and 0's of N\n    binary = \"{0:b}\".format(N)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # base case\n    if N < 2:\n        return str(N)\n    else:\n        return solve(N // 2) + str(N % 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    lst = lst[:]\n    lst = lst[::2]\n    return sum(lst)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(1, len(lst), 2):\n        lst[i] = 0\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(lst) < 2:\n        raise ValueError\n    # this is an even number of elements\n    # let's find the number of even elements\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # 1. check if the list is empty or not.\n    if not lst:\n        return \n    # 2. set the counter to 0.\n    count = 0\n    # 3. loop through the list to add the even elements.\n    for i in range(len(lst)):\n        # 4. check if the element is even.\n        if lst[i]%2 == 0:\n            # 5. increment the counter if the element is even.\n            count += 1\n    # 6. return the total count.\n    return count\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # your code here\n    new_lst = lst\n    while lst:\n        index = 0\n        while lst[index] % 2 == 0:\n            index += 1\n        if index == len(lst):\n            break\n        new_lst.append(lst[index])\n        del lst[index]\n    return new_lst\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    even_elements = []\n    if lst == []:\n        return even_elements\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even_elements.append(lst[i])\n    return even_elements\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(1,len(lst),2):\n        lst[i] = lst[i]*2\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    even = 0\n    for i in range(len(lst)-1):\n        if lst[i]%2 == 0:\n            even += lst[i]\n    lst.append(even)\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            result += lst[i]\n    return result\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    total = 0\n    for index, element in enumerate(lst):\n        if index % 2 == 0:\n            total += element\n    return total\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \" \".join(sorted(s.split(\" \")))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return ''.join(sorted(s.split()))"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    output = []\n    for word in s.split(\" \"):\n        if word == \"\":\n            output.append(word)\n        else:\n            output.append(word[::-1])\n    return \" \".join(output)"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    res = \"\"\n    for i in s.split():\n        res += ''.join(sorted(i)) +''\n    return res.strip()\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \" \".join(sorted(s.split(), key=lambda x: ord(x)))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return''.join(sorted(s.split(), key=lambda x: ord(x)))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return''.join([w for w in s.split()][::-1])\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return''.join(sorted(s.split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s = s.replace(' ','')\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if ord(s[i]) > ord(s[j]):\n                s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = s.split()\n    s = sorted(s, key=lambda k: ord(k))\n    new_s = \"\"\n    for i in s:\n        new_s += i\n    return new_s\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n    row_data = sorted(lst, key=lambda x: x[x.index(x[0])])\n    col_data = sorted(row_data, key=lambda x: x[x.index(x[1])], reverse=True)\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if col_data[i][1] == j:\n                result.append((i, j))\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    x_indices = []\n    if len(lst) == 0:\n        return []\n    else:\n        for i in range(len(lst)):\n            if lst[i][x] == x:\n                x_indices.append((i, lst[i].index(x)))\n        x_indices.sort(key=lambda x: (x[0], -x[1]))\n        return x_indices\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    rows = []\n    for row in lst:\n        if x in row:\n            rows.append((lst.index(row), row.index(x)))\n    rows.sort(key=lambda x: (x[0], -x[1]))\n    return rows\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    x_coordinates = []\n    for row_index, row in enumerate(lst):\n        if x in row:\n            x_coordinates.append((row_index, row.index(x)))\n    x_coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return sorted(x_coordinates, key=lambda x: (x[0], -x[1]))\n    \ndef get_coordinates(lst, x):\n    \"\"\"\n    Given lst, find coordinates of x.\n    Return tuple of tuples (row, column),\n    where row and column are indexes of the matrix.\n    \"\"\"\n    for i, row in enumerate(lst):\n        if x in row:\n            return i, row.index(x)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # TODO: implement\n    sorted_lst = sorted(lst, key=lambda x: (x[0], -x[1]))\n    return sorted_lst\n    \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not lst: return []\n    ret = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                ret.append((i, j))\n    return sorted(ret, key=lambda x: (x[0], -x[1]))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    res = []\n    for row in lst:\n        if x in row:\n            res.append((row.index(x), row.index(x, row.index(x)+1)))\n    return sorted(res, key = lambda x: (x[0], x[1]))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Get all tuples\n    tups = []\n    for i in range(len(lst)):\n        tups.append((i, x))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert type(lst) == list and type(x) == int, 'Arguments have to be lists and integers.'\n    assert len(lst) > 0, 'List cannot be empty.'\n    assert len(lst[0]) > 0, 'List can only contain lists.'\n    assert x >= 0, 'Index cannot be negative.'\n    \n    if x >= len(lst):\n        return []\n    \n    return sorted(get_row_helper(lst, x), key=lambda tup: (tup[0], tup[1]))\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    length = len(array)\n    sums = sum_array(array)\n    if sums % 2!= 0:\n        # sum odd\n        for i in range(length):\n            for j in range(i + 1, length):\n                if array[i] > array[j]:\n                    array[i], array[j] = array[j], array[i]\n    else:\n        # sum even\n        for i in range(length):\n            for j in range(i + 1, length):\n                if array[i] < array[j]:\n                    array[i], array[j] = array[j], array[i]\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sorted_array = []\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    array_size = len(array)\n    if array_size == 0:\n        return []\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total = sum(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def check_sum(nums):\n        s = sum(nums)\n        return s % 2 == 0 and s / 2 or s % 2!= 0 and s / 2\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not array:\n        return array\n    if not len(array) > 0:\n        return array\n    if not len(array) == len(set(array)):\n        return array\n    else:\n        min_value = min(array)\n        max_value = max(array)\n        if sum(array) % 2 == 0:\n            if max_value > min_value:\n                for i in range(len(array) - 1):\n                    if array[i] > array[i + 1]:\n                        array[i], array[i + 1] = array[i + 1], array[i]\n            elif max_value < min_value:\n                for i in range(len(array) - 1):\n                    if array[i] < array[i + 1]:\n                        array[i], array[i + 1] = array[i + 1], array[i]\n        else:\n            if max_value > min_value:\n                for i in range(len(array) - 1):\n                    if array[i] < array[i + 1]:\n                        array[i], array[i + 1] = array[i + 1], array[i]\n            elif max_value < min_value:\n                for i in range(len(array) - 1):\n                    if array[i] > array[i + 1]:\n                        array[i], array[i + 1] = array[i + 1], array[i]\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = len(array)\n    sorted_array = array.copy()\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    sorted_list = []\n    for i in array:\n        if i % 2 == 0:\n            sorted_list.append(i)\n        elif i % 2 == 1:\n            sorted_list.append(i * -1)\n    return sorted_list\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # i = 0\n    # j = len(array) - 1\n    # while i < j:\n    #     # print(i, j, \"first\", array[i], \"last\", array[j])\n    #     if array[i] + array[j] == 0:\n    #         i += 1\n    #         j -= 1\n    #     elif array[i] + array[j] > 0:\n    #         j -= 1\n    #     elif array[i] + array[j] < 0:\n    #         i += 1\n    #     else:\n    #         print(\"Something went wrong\")\n    #         break\n    # if i == j:\n    #     return array\n    # else:\n    #     temp = array[i]\n    #     array[i] = array[j]\n    #     array[j] = temp\n    #     return array\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Solution 1:\n    if len(array) == 0:\n        return array\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    import string\n    #s = str(s)\n    #lower = string.ascii_lowercase\n    #upper = string.ascii_uppercase\n    #alphas = lower + upper\n    #print(alphas)\n    s = str(s)\n    s = s.upper()\n    s = list(s)\n    #print(s)\n    #alphabet = lower + upper\n    alphabet = string.ascii_uppercase\n    for i in range(len(s)):\n        if s[i] == \" \":\n            s[i] = \" \"\n    for i in range(len(alphabet)):\n        if alphabet[i] == \" \":\n            alphabet = alphabet[i:] + alphabet[:i]\n    #print(alphabet)\n    #print(s)\n    l = len(alphabet)\n    for i in range(len(s)):\n        if s[i]!= \" \":\n            alphabet_pos = alphabet.index(s[i])\n            s[i] = alphabet[alphabet_pos + 2]\n    encrypted = \"\".join(s)\n    return encrypted\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m',\n    'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    x = 0\n    while x < len(s):\n        if s[x] in alphabet:\n            alphabet.pop(alphabet.index(s[x]))\n            alphabet.insert(alphabet.index(s[x])+2, s[x])\n        x += 1\n    return ''.join(alphabet)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_s = ''\n    for i in range(len(s)):\n        if s[i] in alphabet:\n            new_s += alphabet[(alphabet.index(s[i]) + 2) % 26]\n        else:\n            new_s += s[i]\n    return new_s"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    \n    #creates a list of every letter in the alphabet\n    list_alphabet = []\n    for l in alphabet:\n        list_alphabet.append(l)\n    \n    #creates a list of the alphabet in the reverse order\n    rev_alphabet = list_alphabet[::-1]\n    \n    #creates a list of the first letter in each index of the alphabet in the rev_alphabet list\n    list_alphabet_rev = []\n    for i in range(len(alphabet)):\n        list_alphabet_rev.append(alphabet[i])\n    \n    #create a list of every letter in the original alphabet\n    list_original = []\n    for l in s:\n        list_original.append(l)\n    \n    #creates a list of the letters in the alphabet in reverse order\n    list_original_rev = []\n    for l in s:\n        list_original_rev.append(l)\n    \n    #create a list of each letter's new index in the original alphabet\n    list_original_rev_ind = []\n    for i in range(len(list_original)):\n        list_original_rev_ind.append(i)\n    \n    #replace the letters in the list with the letters in the list_original_rev_ind\n    for i in range(len(list_alphabet_rev)):\n        list_alphabet_rev[i] = list_original_rev_ind[list_alphabet_rev[i]]\n    \n    #replace the list_original_rev_ind with the new list of the letters in the original alphabet\n    for i in range(len(list_original_rev)):\n        list_original_rev[i] = list_original[list_original_rev[i]]\n    \n    #combine the lists in the correct order\n    encrypt = []\n    for i in range(len(list_alphabet)):\n        encrypt.append(list_alphabet_rev[i])\n    for i in range(len(list_original_rev)):\n        encrypt.append(list_original_rev[i])\n    for i in range(len(list_alphabet)):\n        encrypt.append(list_original[i])\n    \n    #create a string to return\n    s = \"\"\n    for i in range(len(encrypt)):\n        s = s + encrypt[i]\n    \n    return s\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = list(s)\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    alpha = alpha[2:] + alpha[:2]\n    s = list(s)\n    s = s[2:] + s[:2]\n    s = \"\".join(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s = s[:i] + alpha[alpha.index(s[i])+2] + s[i+1:]\n    return s\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s = s.lower()\n    letter_list = list(s)\n    # list of characters in the string\n    new_list = letter_list\n    # list of characters in the string without spaces\n    # not needed since all characters are changed above\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = list(s)\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alpha_len = len(alphabet)\n    # get plaintext index for each letter\n    for i, let in enumerate(s):\n        # check if letter is not alphabet\n        if let not in alphabet:\n            s[i] = let\n            continue\n        # if letter is in alphabet then get plaintext index of letter\n        else:\n            plaintext_index = alphabet.find(let)\n            # apply modulo 2 to plaintext index\n            plaintext_index = (plaintext_index + 2) % alpha_len\n            # apply plaintext index to letter\n            s[i] = alphabet[plaintext_index]\n    # convert to string and return it\n    return ''.join(s)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s = s.lower()\n    \n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_alphabet = alphabet[-2:] + alphabet[:-2]\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return s[::2]+s[1::2]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if lst:\n        min = lst[0]\n        if min == lst[1]:\n            min = lst[2]\n        if min == lst[3]:\n            min = lst[4]\n        if min == lst[5]:\n            return None\n        return min\n    return None\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return None\n    \n    new_lst = sorted(lst)\n    if len(new_lst) == 1:\n        return None\n    if new_lst[1] < new_lst[0]:\n        return new_lst[1]\n    return None\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not lst:\n        return None\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not lst:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    idx = lst.index(min(lst))\n    if idx < len(lst) - 1:\n        return lst[idx + 1]\n    else:\n        return None\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not lst:\n        return None\n    if len(lst) < 2:\n        return None\n    \n    l = sorted(lst)\n    return l[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not lst:\n        return None\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) == 1:\n        return None\n    if len(lst) == 0:\n        return None\n    lst = sorted(lst)\n    return lst[1"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    \n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not lst:\n        return None\n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not lst:\n        return None\n    if len(lst) == 1:\n        return None\n    \n    if lst[0] < lst[1]:\n        return lst[0]\n    \n    if lst[0] == lst[1]:\n        lst.pop(0)\n        return next_smallest(lst)\n    \n    return next_smallest(lst[1:])\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = 0\n    for word in S.split('.'):\n        if word[0] == 'I':\n            n += 1\n    return n\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(S)):\n        if S[i] == 'I':\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for x in S:\n        if x == \"I\":\n            count += 1\n        else:\n            pass\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for word in S.split('.'):\n        if word.lower().startswith('i'):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(S) - S.count(\"I\")\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    bored = 0\n    boredoms = [\"I\"]\n    for word in S.split(\".\"):\n        for sentence in boredoms:\n            if word.startswith(sentence):\n                bored += 1\n    return bored\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    bored = 0\n    for i in range(len(S)):\n        if S[i:i+2] == 'I':\n            if S[i+1:i+3] == '!':\n                bored += 1\n            elif S[i+1:i+4] == '?':\n                bored += 1\n            elif S[i+1:i+5] == '.':\n                bored += 1\n    return bored\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # your code here\n    # List comprehension\n    boredoms = [word for word in S.split() if word.startswith('I')]\n    return len(boredoms)\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    S = S.split(\".\")\n    for i in range(len(S)):\n        if S[i][0] == \"I\":\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # TODO: Write your code here\n    return len(S)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    if type(x) is not int:\n        x = int(x)\n    if type(y) is not int:\n        y = int(y)\n    if type(z) is not int:\n        z = int(z)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x == y + z and (x, y, z).count(int) == 3\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return(type(x) == int and type(y) == int and type(z) == int and x + y == z)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return True if x == (y + z) or y == (x + z) or z == (x + y) else False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int) :\n        if x == y + z and x == z + y and x == z - y:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (x + y) == (z + z) and x == int(x) and y == int(y) and z == int(z)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    return (x==y+z) and (all(isinstance(x,int) for x in (x,y,z)))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (x == (y + z) and all(isinstance(i, int) for i in (x, y, z)))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z and x < y and y < z:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x == (y + z) and (isinstance(x,int) and isinstance(y,int) and isinstance(z,int))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join([\"\" if letter in vowels else letter.swapcase() for letter in message])\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return message.swapcase()\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    encoded = ''\n    for letter in message:\n        if letter in VOWELS:\n            if encoded[-2] in VOWELS:\n                encoded += encoded[-2]\n            else:\n                encoded += encoded[-1]\n        else:\n            encoded += letter\n    return encoded\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    vowels = 'aeiou'\n    message = message.lower()\n    message_list = list(message)\n    for idx, char in enumerate(message_list):\n        if char in vowels:\n            if idx + 2 < len(message):\n                message_list[idx] = message_list[idx + 2]\n                message_list[idx + 2] = message_list[idx]\n    return ''.join(message_list)\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('THKS KS C MGSSCGG')\n    'test'\n    \"\"\"\n    vowels = 'aeiou'\n    message = message.lower()\n    message_list = list(message)\n    for idx, char in enumerate(message_list):\n        if char in vowels:\n            if idx + 2 < len(message):\n                message_list[idx] = message_list[idx + 2]\n                message_list[idx + 2] = message_list[idx]\n    return ''.join(message_list)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043b\u044e\u0447 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c\n    # \u043a\u0430\u043a \u0438\u0437 \u0432\u043b\u043e\u0432 \u043c\u043e\u043d\u043e\u0433\u0438\u0434\u0440\u0430\u0442\n    vowels = 'aeiou'\n    \n    # \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u044e\u0447\u0435\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044f\n    keys = list(vowels) + keys\n    # \u0414\u0435\u043b\u0430\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0443\n    for key in keys:\n        message = message.replace(key, chr(ord(key) - 2))\n    return message\n    \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # The part that replaces the vowels with the letter after\n    # them in the alphabet\n    vowels = 'AEIOU'\n    # The code\n    for letter in message:\n        if letter.lower() in vowels:\n            message = message.replace(letter, message[letter.upper() + 2])\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    encoded_message = \"\"\n    vowels = \"AEIOU\"\n    \n    for ch in message:\n        if ch in vowels:\n            encoded_message += ch + ch.upper()\n        else:\n            encoded_message += ch.upper()\n    return encoded_message\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    return message.swapcase()\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    letter_map = {}\n    \n    for i,v in enumerate(vowels):\n        letter_map[v] = vowels[(i+2)%len(vowels)]\n        \n    encoded = ''\n    for letter in message:\n        encoded += letter_map.get(letter.upper(),letter.upper())\n    \n    return encoded\n    \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    c = ''\n    for i in range(len(message)):\n        if message[i] in 'aeiou':\n            c += message[i].swapcase()\n        else:\n            c += message[i]\n    return c\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    res = 0\n    for i in range(len(lst)):\n        if isprime(lst[i]):\n            res += lst[i]\n    return res\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    res = 0\n    for i in lst:\n        while i > 0:\n            res += int(i%10)\n            i = int(i/10)\n    return res\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    def is_prime(n):\n        \"\"\"\n        Check if integer is prime\n        \"\"\"\n        if n == 1:\n            return False\n        for i in range(2,int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def digits_sum(lst):\n        \"\"\"\n        Get the sum of the digits of an integer\n        \"\"\"\n        return sum([int(i) for i in str(lst)])\n    \n    if lst == []:\n        return 0\n    \n    if not is_prime(lst[0]):\n        return digits_sum(lst[0])\n    \n    if len(lst) == 1:\n        return 0\n    \n    if lst[-1] > 9:\n        return digits_sum(lst[-1])\n    \n    if lst[-1] < 9:\n        return digits_sum(lst[-1]) + digits_sum(lst[:-1])\n    \n    if lst[-1] == 9:\n        return digits_sum(lst[-1]) + digits_sum(lst[:-1]) + digits_sum(lst[-2])\n    \ndef is_prime(n):\n    \"\"\"\n    Check if integer is prime\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef digits_sum(n):\n    \"\"\"\n    Get the sum of the digits of an integer\n    \"\"\"\n    return sum([int(i) for i in str(n)])\n    \ndef is_prime(n):\n    \"\"\"\n    Check if integer is prime\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef digits_sum(n):\n    \"\"\"\n    Get the sum of the digits of an integer\n    \"\"\"\n    return sum([int(i) for i in str(n)])\n    \ndef is_prime(n):\n    \"\"\"\n    Check if integer is prime\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef digits_sum(n):\n    \"\"\"\n    Get the sum of the digits of an integer\n    \"\"\"\n    return sum([int(i) for i in str(n)])\n    \ndef is_prime(n):\n    \"\"\"\n    Check if integer is prime\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef digits_sum(n):\n    \"\"\"\n    Get the sum of the digits of an integer\n    \"\"\"\n    return sum([int(i) for i in str(n)])\n    \ndef is_prime(n):\n    \"\"\"\n    Check if integer is prime\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef digits_sum(n):\n    \"\"\"\n    Get the sum of the digits of an integer\n    \"\"\"\n    return sum([int(i) for i in str(n)])\n    \ndef is_prime(n):\n    \"\"\"\n    Check if integer is prime\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef digits_sum(n):\n    \"\"\"\n    Get the sum of the digits of an integer\n    \"\"\"\n    return sum([int(i) for i in str(n)])\n    \ndef is_prime(n):\n    \"\"\"\n    Check if integer is prime\n    \"\"\"\n    if n == 1:\n        return False\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    res = 0\n    for e in lst:\n        if e > 2:\n            for i in range(2,e):\n                if e % i == 0:\n                    break\n            else:\n                res += e\n    return res\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    primes = []\n    for i in range(len(lst)):\n        flag = 0\n        for j in range(i+1,len(lst)):\n            if lst[i]%lst[j]==0:\n                flag = 1\n                break\n        if flag==0:\n            primes.append(lst[i])\n    primes = list(set(primes))\n    primes = sorted(primes)\n    # print(primes)\n    summ = 0\n    for i in range(len(primes)):\n        summ += primes[i]%10\n    # print(summ)\n    return summ\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    lst = sorted(lst, reverse=True)\n    p = 0\n    s = 0\n    while p < len(lst):\n        if isprime(lst[p]):\n            s += lst[p]\n        p += 1\n    return s\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return 0\n    p = lst[0]\n    for i in range(1,len(lst)):\n        if prime_checker(p) and prime_checker(lst[i]):\n            p = max(p,lst[i])\n    return sum([int(x) for x in str(p)])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    prime_lst = []\n    for i in range(len(lst)):\n        if prime_num(lst[i]):\n            prime_lst.append(lst[i])\n    print(prime_lst)\n    return sum(int(x) for x in str(max(prime_lst)))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    prime = []\n    sum = 0\n    for i in lst:\n        if is_prime(i):\n            prime.append(i)\n    if len(prime) == 0:\n        return 0\n    else:\n        for i in prime:\n            while i > 0:\n                i = i % 10\n                sum += i\n        return sum\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    lst = sorted(lst)\n    lst2 = []\n    for i in lst:\n        if i % 2!= 0:\n            lst2.append(i)\n    for i in range(len(lst2)):\n        lst2[i] = int(str(lst2[i])[::-1])\n    return sum(lst2)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(dict) == 0 or len(dict.keys()) == len(dict.values())\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(dict) > 0:\n        for key in dict:\n            if not isinstance(key, str):\n                return False\n        for key in dict:\n            if not key.islower():\n                return False\n        for key in dict:\n            if not key.isupper():\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return (isinstance(dict, dict) and dict!= {}) and (isinstance(dict, dict) and all(map(lambda key: isinstance(key, str) and isinstance(value, str) and key.isupper() or key.islower(), dict.keys())))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if dict == {}:\n        return False\n    for key in dict:\n        if not (isinstance(key,str) and key.islower() or key.isupper()):\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(dict) == 0:\n        return False\n    for k in dict.keys():\n        if type(k) is not str:\n            return False\n        if k.isupper() or k.islower():\n            continue\n        return False\n    return True\n    "
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if dict == {}:\n        return False\n    keys = dict.keys()\n    for key in keys:\n        if type(key) is not str:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(dict) == 0 or (all(isinstance(k, str) for k in dict.keys()) and all(isinstance(v, str) for v in dict.values()))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in dict:\n        if not isinstance(i, str):\n            return False\n    for j in dict:\n        if not isinstance(j, str):\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    if dict == {}:\n        return False\n    else:\n        for k,v in dict.items():\n            if type(k)!= str or type(v)!= str:\n                return False\n        return True\n        "
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if dict == {}:\n        return False\n    lower_case_dict = {x.lower():x for x in dict}\n    lower_case_keys = set(lower_case_dict.keys())\n    upper_case_keys = set(lower_case_dict.values())\n    if len(lower_case_keys) == len(upper_case_keys) and \\\n        len(lower_case_keys) == len(set(lower_case_dict.values())):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    primes = [2,3,5,7]\n    nums = []\n    i = 0\n    while i < n:\n        for p in primes:\n            if p >= i:\n                nums.append(i)\n                break\n        i += 1\n    return nums\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # if the n value is greater than the max possible, return an empty list\n    if n < 1:\n        return []\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = []\n    if n < 2:\n        return result\n    prime_nums = [2, 3, 5, 7]\n    for i in range(prime_nums[-1], n + 1):\n        if all(i % p!= 0 for p in prime_nums):\n            result.append(i)\n        if i == prime_nums[-1]:\n            break\n    return result\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [i for i in range(2, n+1) if is_prime(i)]\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def isPrime(num):\n        if num <= 1: return False\n        for i in range(2, num):\n            if num % i == 0: return False\n        return True\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    primes = []\n    for i in range(2, n + 1):\n        prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            primes.append(i)\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    prime_list = []\n    for num in range(2,n+1):\n        for i in range(2,int(sqrt(num))+1):\n            if num%i==0:\n                break\n        else:\n            prime_list.append(num)\n    return prime_list\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def count_up_to_with_base(n, base):\n        \"\"\"A helper function for the count_up_to function.\n        Returns an array of the first n primes, counting from base.\n        \"\"\"\n        # The index of the next prime to be added\n        next_prime = base\n        # The array to store primes\n        primes = [base]\n        while len(primes) < n:\n            # Checks for factors of the next prime\n            next_prime += 1\n            is_prime = True\n            for num in primes:\n                if num % next_prime == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(next_prime)\n        return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    array = []\n    for i in range(2,n):\n        for j in range(2,i):\n            if i%j == 0:\n                break\n        else:\n            array.append(i)\n    return array\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n < 2:\n        return []\n    else:\n        prime = 0\n        primes = []\n        for i in range(2, n):\n            primes.append(i)\n        while prime < n:\n            j = 2\n            while j < primes[prime] and prime < n:\n                if is_prime(primes[prime]):\n                    j += 1\n                    prime += 1\n                else:\n                    break\n            else:\n                primes.append(primes[prime])\n                prime += 1\n    return primes\n    # O(n) time | O(n) space\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    product = 1\n    for i in range(1, abs(a) + 1):\n        product *= i\n    for i in range(1, abs(b) + 1):\n        product //= i\n    return product"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if a < 0 or b < 0:\n        return 0\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # your code goes here\n    a = str(a)\n    b = str(b)\n    if len(a) == 1:\n        return int(a)*int(b)\n    if len(a) == 0:\n        return 1\n    if len(b) == 1:\n        return int(a)*int(b)\n    if len(b) == 0:\n        return 1\n    if len(a) > 1 and len(b) > 1:\n        return int(a)*int(b)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def unit_digits(num):\n        str_num = str(num)\n        unit_digits = ''\n        for char in str_num:\n            if char!= '0':\n                unit_digits += char\n        return unit_digits\n    return unit_digits(a)*unit_digits(b)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    a = str(a)\n    b = str(b)\n    if len(a) == 1 and len(b) == 1:\n        return int(a)*int(b)\n    else:\n        return int(a[0])*int(b[0])*int(a[1])*int(b[1])*int(a[2])*int(b[2])\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # make sure b > a\n    # convert a and b to string\n    # get length\n    a = str(a)\n    b = str(b)\n    # set a = a[::-1]\n    # print(a)\n    # set b = b[::-1]\n    # print(b)\n    a = a[::-1]\n    b = b[::-1]\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return a*b\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    product = int(a * b)\n    unit_digits = []\n    for i in range(len(str(a))):\n        unit_digits.append(int(str(a)[i]))\n    for i in range(len(str(b))):\n        unit_digits.append(int(str(b)[i]))\n    unit_digits = sorted(unit_digits)\n    multiplied = int(unit_digits[0] * unit_digits[1])\n    return product * multiplied\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #string manipulation\n    product = int(str(a) + str(b))\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return int(str(a) * str(b))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert isinstance(s, str)\n    counter = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            counter += 1\n    return counter\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(1,len(s),2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    # All characters in the string are uppercase\n    if s == ''.join([char for char in s if char.isupper()]):\n        return len(s)\n    \n    # Iterate through the string\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if s == '':\n        return 0\n    elif s[0].isupper():\n        return 1 + count_upper(s[1:])\n    else:\n        return count_upper(s[1:])\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if ord(s[i]) >= 65 and ord(s[i]) <= 90:\n            count += 1\n        elif ord(s[i]) >= 97 and ord(s[i]) <= 122:\n            count -= 1\n        else:\n            continue\n        if count == 0 and i % 2 == 0:\n            return count\n        else:\n            return 0\n    return 0\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n    \ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n    \ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n    \ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n    \n    \n    \n    \ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n    \ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n    \n    \n    \n    \n    \ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n    \ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n    \n    \ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n    \ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_uppe"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # iterate over string\n    # if character is upper, increment count\n    # return count\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n    \n    \ndef count_upper_with_zip(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    # zip and count\n    return sum(1 for i in zip(s, s[::2]) if i[0].isupper())\n    \n    \ndef count_upper_with_itertools(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    # return sum(1 for i in zip(s, s[::2]) if i[0].isupper())\n    return sum(1 for i in itertools.izip_longest(s, s[::2]) if i[0].isupper())\n    \n    \nif __name__ == '__main__':\n    # test strings\n    test_strings = ['aBCdEf', 'abcdefg', 'dBBE']\n    \n    print(\"count_upper('aBCdEf') returns 1\")\n    print(count_upper(test_strings[0]) == 1)\n    \n    print(\"count_upper('abcdefg') returns 0\")\n    print(count_upper(test_strings[1]) == 0)\n    \n    print(\"count_upper('dBBE') returns 0\")\n    print(count_upper(test_strings[2]) == 0)\n    \n    # run test\n    print(\"count_upper_with_zip('aBCdEf') returns 1\")\n    print(count_upper_with_zip(test_strings[0]) == 1)\n    \n    print(\"count_upper_with_zip('abcdefg') returns 0\")\n    print(count_upper_with_zip(test_strings[1]) == 0)\n    \n    print(\"count_upper_with_zip('dBBE') returns 0\")\n    print(count_upper_with_zip(test_strings[2]) == 0)\n    \n    # run test\n    print(\"count_upper_with_itertools('aBCdEf') returns 1\")\n    print(count_upper_with_itertools(test_strings[0]) == 1)\n    \n    print(\"count_upper_with_itertools('abcdefg') returns 0\")\n    print(count_upper_with_itertools(test_strings[1]) == 0)\n    \n    print(\"count_upper_with_itertools('dBBE') returns 0\")\n    print(count_upper_with_itertools(test_strings[2]) == 0)\n    \n    \n    \n    \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].upper() == s[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return float(value) * 1.0 / 2\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return int(round(float(value)))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Receive a string that represents a number\n    # Convert the string to an integer\n    # Check if the number is an integer\n    # If it is an integer, return it\n    # If it isn't an integer, try to convert it to integer\n    # If it is not an integer, return it\n    \n    # OR, use the below\n    # number = int(value)\n    # If number is an integer, return it\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return int(math.floor(value + 0.5)"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert isinstance(value, str), \"value must be a string\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Round to the closest integer (integer division)\n    value = int(value)\n    if value % 1 == 0:\n        # If there is no decimal part, it's already the closest integer\n        return value\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return int(round((value + 1) / 2.0)) if value!= int(value) else int(value)\n    #return int(value + (value *.5))\n    #return int(value) if int(value) == int(value +.5) else int(value) + 1\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    integer_value = int(value)\n    if integer_value % 1 == 0:\n        return integer_value\n    else:\n        integer_value = float(integer_value)\n        return int(integer_value) + 1\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return int(value) if value % 1 == 0 else int(value) + 1 if value > 0 else int(value) - "
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return [1] + make_a_pile(n-1) + [1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [n]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n % 2 == 1:\n        return [n]\n    elif n % 2 == 0:\n        return [n, n + 1]"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 1:\n        return []\n    \n    # assume n is odd\n    return [(n + 1) // 2] + make_a_pile(n - 1) if n % 2 == 1 else \\\n        [n // 2] + make_a_pile(n - 2)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # define n_0, n_1, n_2\n    n_0 = n\n    n_1 = (n+1)//2\n    n_2 = (n+1)//2 + 1\n    res = [n_0, n_1, n_2]\n    return res\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n%2!= 0:\n        return [n] + make_a_pile(n-1)\n    else:\n        return make_a_pile(n-1) + [n]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert n > 0\n    return [n, 2 * n, 2 * n + 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return make_a_pile(n // 2) + make_a_pile(n // 2)\n    else:\n        return make_a_pile(n // 2) + make_a_pile(n // 2 + 1)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # return make_a_pile_rec(n)\n    return make_a_pile_iter(n)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # TODO: Write your code here\n    return \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s_list = s.split(\", \")\n    return s_list\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    words = s.split(', ')\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # solution 1:\n    # import re\n    # words = re.split(r\"[,\\s]\", s)\n    \n    # solution 2:\n    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    words = s.split(', ')\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # break the string up by commas or spaces and put into a list\n    s = s.split(',')\n    # for each element in the list, remove spaces and make the string lower case\n    s = [x.strip().lower() for x in s]\n    # return the list\n    return s\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = s.split(\" \")\n    for i in range(len(s)):\n        s[i] = s[i].strip(\",\")\n    return s\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if x == y:\n        return -1\n    return max(x, y) if (x + y) % 2 == 0 else -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if x % 2!= 0 and y % 2!= 0:\n        return -1\n    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    else:\n        return min(x, y)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # your code here\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return max((x, y), key=lambda num: num if num % 2 == 0 else -1)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    num = 0\n    while x <= y:\n        if x % 2 == 0:\n            num = x\n        x += 1\n    return num\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    min_num = min(x, y)\n    max_num = max(x, y)\n    if max_num - min_num <= 1:\n        return min_num\n    return max(range(min_num, max_num, 2), key=lambda x: x % 2)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    num = 0\n    while num <= x and num <= y:\n        if num % 2 == 0:\n            return num\n        num += 1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if x < y:\n        return -1\n    if x%2 == 0:\n        return x\n    if y%2 == 0:\n        return y\n    if x > y:\n        return y\n    return x\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    biggest = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0 and i > biggest:\n            biggest = i\n    return biggest\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n    return \"0b{}\".format(bin(int((n+m)/2)).lstrip(\"0b\"))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n > m:\n        return -1\n    else:\n        binary_string = bin(n)\n        return binary_string[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n    return int((n+m)/2)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < m:\n        return -1\n    else:\n        total = 0\n        for i in range(n, m+1):\n            total += i\n        return format(int(total/n), 'b')\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n > m:\n        return -1\n    res = int((n + m)/2)\n    return bin(res)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if m < n:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    return f\"0b{int(total/m):010b}\""
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return int(bin(int(round((n+m)/2)))[2:], 2)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n > m:\n        return -1\n    return str(bin(int(round(float((n+m)/2))))[2:])\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return -1 if n > m else int(round(sum(range(n,m+1))/len(range(n,m+1))))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return str(bin(int(int((sum(range(n, m + 1))/2))))[2:])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(set(x))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    # convert x into set and then sort it\n    x_sorted = sorted(set(x))\n    \n    return x_sorted\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    lst = []\n    for i in x:\n        lst.append(i)\n    lst.sort()\n    lst1 = []\n    for i in lst:\n        if i%2 == 0:\n            pass\n        else:\n            lst1.append(i)\n    return lst1\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(list(filter(lambda x: not any(i % 2 == 0 for i in x), x)))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in x:\n        if i % 10!= 0:\n            return x\n    return x\n    \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    output = []\n    for item in x:\n        item = str(item)\n        if not '0' in item:\n            output.append(item)\n    return sorted(output)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(list(set([int(d) for d in x if not any([char.isdigit() for char in d])])))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    out_list = []\n    \n    for i in x:\n        s = str(i)\n        if len(s)%2 == 0:\n            out_list.append(i)\n        \n    return sorted(out_list)\n    "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    x = list(x)\n    y = []\n    for i in range(len(x)):\n        if x[i] % 2!= 0:\n            y.append(x[i])\n    return sorted(y)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in x:\n        if is_odd(i):\n            x.remove(i)\n    return sorted(x)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [\"One\" if x<=9 and x>=1 else \"Ten\" if x<=99 and x>=10 else \"Ten\" if x<=999 and x>=100 else \"One\" for x in sorted(arr)]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return\n    \ndef count_sort(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    return\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    # Sort the array.\n    arr.sort()\n    \n    # Reverse the array.\n    arr.reverse()\n    \n    # Convert the array elements to digit strings and assign them to array elements.\n    arr_digit = []\n    for i in range(len(arr)):\n        if arr[i] in range(1, 10):\n            arr_digit.append(digit_string[arr[i]])\n        else:\n            arr_digit.append(digit_string[arr[i]])\n    \n    # Sort the digit strings.\n    arr_digit.sort()\n    \n    # Reverse the sorted digit strings.\n    arr_digit.reverse()\n    \n    # Put the digit strings in their correct order.\n    arr = []\n    for i in range(len(arr_digit)):\n        arr.append(arr_digit[i])\n    \n    # Return the sorted array.\n    return arr\n    \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return []\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return []\n    else:\n        arr.sort()\n        arr = arr[::-1]\n        res = []\n        for i in range(len(arr)):\n            if 1 <= arr[i] <= 9:\n                res.append(name[arr[i]-1])\n        return res\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Solution\n    # sort by the length of the numbers\n    # reverse the numbers\n    # insert the numbers in the right places\n    # convert the numbers to their corresponding words\n    if len(arr) == 0:\n        return []\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not arr: return []\n    lst = sorted(arr)\n    lst = lst[1:-1]\n    lst = lst[::-1]\n    lst = map(lambda x: num_name[x], lst)\n    lst = lst[::-1]\n    return lst\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not arr:\n        return []\n    \n    # Reverse the array\n    arr.reverse()\n    \n    # Store each digit in a string\n    d = {1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\", 6:\"Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"}\n    result = []\n    \n    # Loop through each digit in the array\n    for num in arr:\n        # Convert the digit to a string, remove the decimal part, and then add to result\n        result.append(d[int(str(num)[:1] + '.' + str(num)[1:])])\n    \n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    return sorted(arr, reverse=True)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [name[0] if num in range(1, 10) else '' for num, name in sorted(enumerate(arr), key=lambda x: (x[1], x[0]))]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return_list = list(range(1,n+1))\n    for i in range(1,n):\n        if i % 2 == 0:\n            return_list[i-1] = fact(i)\n        else:\n            return_list[i-1] = sum(return_list[i:n])\n    return return_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    i = 1\n    while len(result) < n:\n        if i % 2 == 0:\n            result.append(i)\n        i += 1\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            l.append(i)\n        else:\n            l.append(sum(range(1, i + 1)))\n    return l\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        i = 1\n        f = []\n        while i < n:\n            if i % 2 == 0:\n                f.append(1)\n                i += 1\n            else:\n                f.append(i + 1)\n                i += 1\n        return f\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 0:\n        return []\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    res = []\n    for i in range(n):\n        if i % 2 == 0:\n            res.append(i)\n        else:\n            res.append(i + 1)\n    return res\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if type(n) is not int:\n        raise TypeError(\"n must be an integer\")\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    nums = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            nums.append(i)\n        else:\n            nums.append(i * sum(range(1, i + 1)))\n    return nums\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    factorial = 1\n    lst = []\n    for i in range(1, n+1):\n        factorial = factorial * i\n        if i % 2 == 0:\n            lst.append(factorial)\n        else:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    even_count = odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # base case, the range 1 < n <= 10^3\n    if n <= 1:\n        return 0\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    even_count, odd_count = 0, 0\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    evens = 0\n    odds = 0\n    for i in range(1, n + 1):\n        s = str(i)\n        l = len(s)\n        if s == s[::-1]:\n            if l % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n    return (evens, odds)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    even_counter = 0\n    odd_counter = 0\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    res = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(i) and is_palindrome(n - i):\n            res[0] += 1\n        if is_palindrome(i) and not is_palindrome(n - i):\n            res[1] += 1\n    return tuple(res)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # key: if n is even, return (n // 2, n // 2) and if n is odd, return (n // 2, n // 2 + 1)\n    def helper(n, even_odd):\n        count = 0\n        while n:\n            if n % 10 == 0:\n                count += even_odd[0]\n                break\n            elif n % 10 == 1:\n                count += even_odd[1]\n                break\n            else:\n                count += even_odd[0] + even_odd[1]\n                n //= 10\n        return count\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count_even, count_odd = 0, 0\n    \n    for i in range(1, n + 1):\n        num_str = str(i)\n        if check_palindrome(num_str, True):\n            count_even += 1\n        if check_palindrome(num_str, False):\n            count_odd += 1\n    return count_even, count_odd\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert arr, \"Can't count empty array\"\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert arr, \"empty array\"\n    assert isinstance(arr, list), \"argument should be a list\"\n    assert all(isinstance(i, int) for i in arr), \"elements should be integers\"\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # keys in `arr` must be ints\n    arr = list(map(int, arr))\n    count = 0\n    for num in arr:\n        # can we make the sum of num positive?\n        sum_of_num = sum_of_digits(num)\n        if sum_of_num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum(map(lambda x: x % 10 >= 0, arr))\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(1 for elem in arr if elem > 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len([n for n in arr if sum_digits(n) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = len(arr)\n    count = 0\n    for i in range(n):\n        if sum(arr[i]) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    nums = []\n    \n    for num in arr:\n        digits = [int(x) for x in str(num)]\n        if sum(digits) > 0:\n            nums.append(num)\n    return len(nums)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    # for i in range(len(arr)):\n    #     if sum(arr[i:]) > 0:\n    #         count += 1\n    # return count\n    for i in range(len(arr)):\n        tmp = 0\n        for j in range(len(arr)):\n            tmp += arr[i] % 10\n            arr[i] = arr[i] // 10\n        if tmp > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    digits_map = {}\n    for num in arr:\n        sum_of_digits = 0\n        for digit in str(num):\n            sum_of_digits += int(digit)\n        if sum_of_digits in digits_map:\n            digits_map[sum_of_digits] += 1\n        else:\n            digits_map[sum_of_digits] = 1\n    count = 0\n    for digit in digits_map.values():\n        if digit > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # edge case\n    if not arr:\n        return True\n    # recursive call\n    if is_decreasing(arr):\n        return True\n    else:\n        return move_one_ball(shift_all(arr))\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # code here\n    def helper(arr, n):\n        if n == 0:\n            return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(arr) == 0: return True\n    # if sorted\n    if is_sorted(arr): return True\n    else:\n        # find the smallest and largest element in array\n        # find first element in array that is less than its next element\n        # if the element in array is the same as its next element, then there is no rotation\n        # otherwise rotate and check if the result is sorted\n        i = 0\n        while i < len(arr) - 1:\n            if arr[i] > arr[i + 1]:\n                return False\n            i += 1\n        # if the rotation is not possible\n        return False\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return True\n    \n    arr = sorted(arr)\n    flag = 0\n    for i in range(1, len(arr)):\n        if arr[i] >= arr[i - 1]:\n            flag = 1\n            break\n        \n    if flag == 0:\n        return False\n    \n    for i in range(len(arr) - 1):\n        if arr[i] <= arr[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return True\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if arr == []:\n        return True\n    if len(arr)==1:\n        return True\n    if len(arr)>1:\n        for i in range(len(arr)):\n            if arr[i]>arr[i+1]:\n                return False\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            arr[i+1],arr[i] = arr[i],arr[i+1]\n            return move_one_ball(arr)\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    N = len(arr)\n    if N == 0:\n        return True\n    if N == 1:\n        return True\n    \n    if arr[N-1] <= arr[0]:\n        return False\n    \n    for i in range(0, N-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #base cases\n    if not arr:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    if arr ==[]:\n        return True\n    if len(arr) ==1:\n        return True\n    \n    for i in range(len(arr)-1):\n        if arr[i+1] < arr[i]:\n            return False\n    return True\n    \n    "
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # check if all elements in lst1 are even\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    # else, check if all elements in lst2 are even\n    if all(x % 2 == 0 for x in lst2):\n        return \"YES\"\n    # else, check if there are even elements in lst1\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    # else, check if there are even elements in lst2\n    if all(x % 2 == 0 for x in lst2):\n        return \"YES\"\n    # else, return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # WRITE YOUR CODE HERE\n    \ndef convert_to_two_strings(number):\n    \"\"\"\n    In this problem, you will implement a function that takes a number\n    and converts it into a string using the following conversion rules.\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # THE SOLUTION\n    even_list = []\n    for x in lst1:\n        if x % 2 == 0:\n            even_list.append(x)\n    if len(even_list) > len(lst1):\n        return 'NO'\n    elif len(even_list) == len(lst1):\n        return 'YES'\n    else:\n        for x in lst2:\n            if x % 2 == 0:\n                even_list.append(x)\n        if len(even_list) == len(lst1) + len(lst2):\n            return 'YES'\n        else:\n            return 'NO'\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # TODO: IMPLEMENT ME\n    \n    #for element in lst1:\n    #    if element%2!= 0:\n    #        return \"NO\"\n    #for element in lst2:\n    #    if element%2!= 0:\n    #        return \"NO\"\n    #for i in range(len(lst1)):\n    #    if lst1[i]%2!= 0:\n    #        return \"NO\"\n    #for i in range(len(lst2)):\n    #    if lst2[i]%2!= 0:\n    #        return \"NO\"\n    \n    for element in lst1:\n        if element%2!= 0:\n            return \"NO\"\n    for element in lst2:\n        if element%2!= 0:\n            return \"NO\"\n    \n    for i in range(len(lst1)):\n        if lst1[i]%2!= 0:\n            return \"NO\"\n    for i in range(len(lst2)):\n        if lst2[i]%2!= 0:\n            return \"NO\"\n    \n    return \"YES\"\n    \ndef test_exchange():\n    print(\"Testing exchange()...\", end=\"\")\n    assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n    assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n    assert(exchange([1, 2, 3, 4], [1, 2, 4, 3]) == \"NO\")\n    assert(exchange([1, 2, 3, 4], [1, 2, 3, 5]) == \"NO\")\n    assert(exchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == \"NO\")\n    assert(exchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) == \"YES\")\n    assert(exchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 7]) == \"NO\")\n    assert(exchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]) == \"YES\")\n    assert(exchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 8]) == \"NO\")\n    print(\"Passed!\")\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # TODO: Implement this function.\n    # HINT: #1: If the element in lst1 is odd and even in lst2,\n    # there is no need to exchange the element.\n    # HINT: #2: Do the same logic, but for the element in lst2,\n    # but assume lst1 has already been sorted.\n    return\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    #lst2 = list(filter(lambda a: a%2, lst2))\n    #lst1 = lst1 + lst2\n    #return all(a%2 == 0 for a in lst1)\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****\n    lst1_even = []\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            lst1_even.append(lst1[i])\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    even_numbers = 0\n    for number in lst1:\n        if number % 2 == 0:\n            even_numbers += 1\n    if even_numbers == len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    hist = {}\n    for let in test:\n        if let in hist:\n            hist[let] += 1\n        else:\n            hist[let] = 1\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    d = {}\n    for ch in test:\n        if ch in d:\n            d[ch] += 1\n        else:\n            d[ch] = 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not test:\n        return {}\n    \n    hist = {}\n    for char in test:\n        hist[char] = hist.get(char, 0) + 1\n    \n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    letters = collections.Counter(test)\n    return dict(letters.most_common(1))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    counts = {}\n    for char in test:\n        counts[char] = counts.get(char, 0) + 1\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return {letter: test.lower().count(letter) for letter in test.lower()}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # histogram_dict = {}\n    # for i in test:\n    #     if i in histogram_dict:\n    #         histogram_dict[i] += 1\n    #     else:\n    #         histogram_dict[i] = 1\n    #     histogram_dict = dict(sorted(histogram_dict.items(), key=lambda item: item[1], reverse=True))\n    # return histogram_dict\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = {}\n    for char in test:\n        if char not in result:\n            result[char] = 1\n        else:\n            result[char] += 1\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    dic = {}\n    for i in test:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] = dic[i] + 1\n    return dic\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    letters = test.lower()\n    letters = re.sub(r'\\s+',' ',letters)\n    letters = letters.split(' ')\n    letters = dict(Counter(letters))\n    for k, v in letters.items():\n        letters[k] = v\n    return letters\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s_string=''\n    for i in s:\n        if i!=c:\n            s_string=s_string+i\n    print(s_string)\n    if s_string==s_string[::-1]:\n        return(s_string,'True')\n    else:\n        return(s_string,'False')\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if s=='' or c=='':\n        return s,''\n    if len(c)==1:\n        return s,True\n    if s[0]==c[0]:\n        return reverse_delete(s[1:],c[1:])\n    else:\n        return reverse_delete(s[1:],c)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    s_list = []\n    for i in range(len(s)):\n        if s[i] not in c:\n            s_list.append(s[i])\n    \n    return (s[::-1],False) if s == s_list else (s[::-1],True)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    rev = s[::-1]\n    for i in range(len(s)):\n        if s[i] in c:\n            rev = rev[:i] + rev[i+1:]\n    if s == rev:\n        return (rev,True)\n    else:\n        return (s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    s=s.replace(c,\"\")\n    return (s,s==s[::-1])"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    result = ''\n    for c in s:\n        if c in c:\n            result = result + c\n    if result == s:\n        return (result,True)\n    else:\n        return (result,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    #     s = 'abcde'\n    #     c = 'ae'\n    #     s = 'abcdef'\n    #     c = 'b'\n    #     s = 'acdef'\n    #     c = 'b'\n    #     s = 'cdef'\n    #     c = 'b'\n    # s = 'acdef'\n    # c = 'b'\n    # s = 'abcdef'\n    # c = 'b'\n    # s = 'abcdef'\n    # c = 'b'\n    # s = 'abcdef'\n    # c = 'b'\n    # s = 'abcdef'\n    # c = 'b'\n    # s = 'abcdef'\n    # c = 'b'\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = \"\".join(sorted(s))\n    c = \"\".join(sorted(c))\n    if s == c:\n        return (s,True)\n    else:\n        return (s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(s)<len(c):\n        return ('','Failed')\n    if len(s)==len(c):\n        if s==c[::-1]:\n            return ('',True)\n        else:\n            return ('',False)\n    if len(s)>len(c):\n        return ('','Failed')\n    res=''\n    for i in range(len(c)):\n        if s[i] in c:\n            if res=='':\n                res=c[i]\n            else:\n                res=res+c[i]\n    if res=='':\n        return ('',False)\n    if res==s:\n        return (res,'True')\n    else:\n        return (res,'False')\n    "
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    x=[]\n    for i in range(len(s)):\n        if s[i] not in c:\n            x.append(s[i])\n    return ''.join(x),len(x)==len(s)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = len(lst)\n    output = []\n    for i in range(n):\n        string = lst[i]\n        string = string.replace(\"1\",\"\")\n        string = string.replace(\"2\",\"\")\n        string = string.replace(\"3\",\"\")\n        string = string.replace(\"4\",\"\")\n        string = string.replace(\"5\",\"\")\n        string = string.replace(\"6\",\"\")\n        string = string.replace(\"7\",\"\")\n        string = string.replace(\"8\",\"\")\n        string = string.replace(\"9\",\"\")\n        if len(string) == 0:\n            string = \"empty string\"\n        string = str(len(string)) + \" odd digits in the string \" + string\n        output.append(string)\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    lst = str(lst)\n    count = 0\n    for char in lst:\n        if char!= \" \":\n            if int(char) % 2 == 1:\n                count += 1\n        else:\n            count = 0\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    output = []\n    for i in range(len(lst)):\n        string = lst[i]\n        for j in range(len(string)):\n            if string[j] not in '0123456789' or j%2==0:\n                continue\n            else:\n                string = string.replace(string[j],str(j))\n        output.append(string)\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    odd = [i for i in range(len(lst)) if any(i % 2!= 0 for i in lst[i])]\n    return ['the number of odd elements'+ str(n) + 'n the str' + str(n) +'of the'+ str(n) + 'input.' for n in range(len(lst))]\n    # return ['the number of odd elements'+ str(n) + 'n the str' + str(n) +'of the'+ str(n) + 'input.' for n in range(len(lst)) if any(i % 2!= 0 for i in lst[n])]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    lst1 = []\n    for i in range(len(lst)):\n        lst1.append(odd_digits(lst[i]))\n    for i in lst1:\n        if i%2!=0:\n            count+=1\n    output = []\n    output.append(\"the number of odd elements \"+str(count)+\"n the str\"+str(count)+\"ng \"+str(count)+\" of the \"+str(count)+\"nput.\")\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n    odd_count_lst = []\n    for x in lst:\n        num = 0\n        for y in x:\n            if y == '1':\n                num += 1\n        odd_count_lst.append(\"the number of odd elements \" + str(num) + \"n the str\" + str(x) + \"ng \" + str(x) + \"of the \" + str(x) + \"put.\")\n    return odd_count_lst\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    lst_odd = []\n    for i in lst:\n        temp = \"\"\n        for j in i:\n            if j % 2!= 0:\n                temp += j\n        lst_odd.append(\"the number of odd elements {} of the string {} of the {}input.\".format(len(temp), temp, i))\n    return lst_odd\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    lst = lst\n    for i in range(len(lst)):\n        lst[i] = int(lst[i])\n    odd = 0\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            odd += 1\n    \n    output = []\n    if len(lst) == 1:\n        output.append(f'the number of odd elements {lst[0]} of the {lst[0]}.')\n    else:\n        output.append(f'the number of odd elements {odd}n the str{odd}ng {odd} of the {odd}nput.')\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # replace below with your code\n    output = []\n    for i in lst:\n        output.append(\"the number of odd elements \" + str(len(list(filter(lambda x: x % 2!= 0, i)))) + \" in the string \" + i)\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [\"the number of odd elements \" + str(len(i)) + \"n the str\" + str(len(i)) + \" of the \" + str(len(i)) + \"put.\" for i in lst]\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sum = 0\n    cur_sum = 0\n    min_sum = float('inf')\n    for num in nums:\n        cur_sum += num\n        sum = max(cur_sum, sum)\n        min_sum = min(min_sum, sum)\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    min_sum = float('inf')\n    left, right = 0, 0\n    cur_sum = 0\n    while left < len(nums) and right < len(nums):\n        cur_sum += nums[right]\n        while cur_sum > min_sum and left < len(nums):\n            cur_sum -= nums[left]\n            left += 1\n        min_sum = min(min_sum, cur_sum)\n        right += 1\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    min_sum = -math.inf\n    \n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            min_sum = min(min_sum, sum(nums[i:j+1]))\n            if min_sum == 0:\n                break\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    if not nums:\n        return 0\n    \n    minSum = float('inf')\n    currSum = 0\n    \n    for num in nums:\n        currSum += num\n        if currSum < minSum:\n            minSum = currSum\n        if currSum < 0:\n            currSum = 0\n    return minSum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not nums:\n        return 0\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(nums)\n    if n == 0:\n        return 0\n    # consider only the leftmost element\n    min_sum = nums[0]\n    for i in range(1, n):\n        # if the current element is greater than min_sum\n        # it means it can never be added to the sum\n        # if it is smaller than min_sum we can ignore it\n        if nums[i] > min_sum:\n            min_sum = nums[i]\n        else:\n            # else add the current element to the sum\n            min_sum += nums[i]\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # define the list 'output' to store the minimum sum\n    # initialize 'output'\n    output = float('inf')\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if nums == []:\n        return 0\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(nums) == 0:\n        return 0\n    \n    minSum = float(\"inf\")\n    curSum = 0\n    for num in nums:\n        curSum += num\n        if curSum < minSum:\n            minSum = curSum\n        if curSum < 0:\n            curSum = 0\n    return minSum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    min_sum = 0\n    subarray_sum = 0\n    for i in range(len(nums)):\n        subarray_sum += nums[i]\n        if subarray_sum >= min_sum:\n            min_sum = subarray_sum\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # Initialize the answer to zero\n    count = 0\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    wells = {}\n    for row in range(len(grid)):\n        for column in range(len(grid[row])):\n            wells[row, column] = grid[row][column]\n    \n    result = 0\n    while wells:\n        new_wells = {}\n        for key, value in wells.items():\n            if value == 1:\n                new_key = (key[0]-1, key[1])\n                new_value = min(value, grid[new_key[0]][new_key[1]])\n                grid[key] = grid[key] - new_value\n                if new_value == 0:\n                    new_wells[new_key] = new_value\n        wells = new_wells\n        if wells == {}:\n            break\n        else:\n            result += 1\n    return result\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    dp = [[0] * cols for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                dp[i][j] = capacity\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # 1) DFS, create a depth first search tree\n    # 2) Traverse the tree and collect the depth and total size\n    # 3) create a bucket for each 1 in the grid and place the bucket in the right spot\n    # 4) iterate through the tree, keep track of the deepest level\n    # 5) if there is a number left, there is no solution\n    \n    # 1) DFS\n    def dfs(grid, node, depth, total, max_size, bucket_capacity):\n        \"\"\"\n        I'm not sure if the depth should be set to zero, or to the right size,\n        but that's not how the question was presented.\n        \"\"\"\n        if node.right:\n            return dfs(grid, node.right, depth+1, total, max_size, bucket_capacity)\n        if node.left:\n            return dfs(grid, node.left, depth+1, total, max_size, bucket_capacity)\n        if node.left == node.right == None:\n            if depth == len(grid):\n                return total\n            # add 1 to the bucket_capacity\n            if bucket_capacity - total < 1:\n                return 0\n            else:\n                return total + bucket_capacity\n    \n    # 2) Traverse the tree and collect the depth and total size\n    def count(grid, bucket_capacity):\n        \"\"\"\n        I'm not sure if the depth should be set to zero, or to the right size,\n        but that's not how the question was presented.\n        \"\"\"\n        max_size = bucket_capacity\n        total = 0\n        max_level = 0\n        for row in grid:\n            for node in row:\n                if node == 1:\n                    total += 1\n                    if depth > max_level:\n                        max_level = depth\n        return (dfs(grid, grid[0][0], 0, total, max_size, bucket_capacity), max_level)\n    \n    # 3) create a bucket for each 1 in the grid and place the bucket in the right spot\n    def create_bucket(grid, row, col, bucket_capacity):\n        # check if the row is empty\n        if grid[row][col] == 0:\n            grid[row][col] = 1\n            return\n        # check if the left child is empty\n        if grid[row][col-1] == 0:\n            grid[row][col-1] = 1\n            return\n        # check if the right child is empty\n        if grid[row][col+1] == 0:\n            grid[row][col+1] = 1\n            return\n        # check if the up child is empty\n        if grid[row-1][col] == 0:\n            grid[row-1][col] = 1\n            return\n        # check if the down child is empty\n        if grid[row+1][col] == 0:\n            grid[row+1][col] = 1\n            return\n    \n    # 4) iterate through the tree, keep track of the deepest level\n    def iter_tree(grid, bucket_capacity, max_level):\n        max_size = bucket_capacity\n        if len(grid) > max_level:\n            return 0\n        total = 0\n        for row in range(len(grid)):\n            for col in range(len(grid[row])):\n                create_bucket(grid, row, col, bucket_capacity)\n                total += dfs(grid, grid[row][col], 0, total, max_size, bucket_capacity)\n                # reset the bucket\n                grid[row][col] = 0\n        return total\n    \n    # 5) if there is a number left, there is no solution\n    def solution(grid, bucket_capacity):\n        max_size = bucket_capacity\n        depth = 0\n        total = 0\n        for row in range(len(grid)):\n            for col in range(len(grid[row])):\n                create_bucket(grid, row, col, bucket_capacity)\n                if dfs(grid, grid[row][col], depth, total, max_size, bucket_capacity) == 0:\n                    return 0\n                # reset the bucket\n                grid[row][col] = 0\n        return total\n    \n    # return the result\n    return solution(grid, bucket_capacity)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def max_fill_helper(grid, i, j, c, res):\n        \n        if j < 0 or i < 0:\n            return res\n        if grid[i][j] == 0:\n            return max_fill_helper(grid, i, j-1, c, res)\n        elif grid[i][j] == 1:\n            cur_fill = c - grid[i][j]\n            if cur_fill <= 0:\n                return res\n            elif cur_fill <= c:\n                res = max(res, 1 + max_fill_helper(grid, i, j-1, cur_fill, res))\n            else:\n                res = max(res, 1 + max_fill_helper(grid, i-1, j-1, c-grid[i][j], res))\n        return res\n    \n    return max_fill_helper(grid, len(grid)-1, len(grid[0])-1, capacity, 0)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Counting the number of wells and the number of buckets\n    wells, bucket_count = len(grid), 0\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    # find out the minimum height to fill\n    if rows * cols == 0:\n        return 0\n    rows, cols = len(grid), len(grid[0])\n    capacity = capacity\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c]:\n                capacity -= 1\n                if capacity < 0:\n                    return 0\n    # calculate number of times to lower the buckets\n    return int(math.ceil(rows*cols/capacity))\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # TODO: Finish the code\n    R, C = len(grid), len(grid[0])\n    ans = 0\n    for row in range(R):\n        for col in range(C):\n            if grid[row][col] == 1:\n                min_level = min([grid[r][c] for r in range(R) for c in range(C) if grid[r][c] < 1])\n                if min_level == 0:\n                    continue\n                for r in range(R):\n                    for c in range(C):\n                        if grid[r][c] >= 1:\n                            grid[r][c] -= 1\n                ans += math.ceil(min_level / capacity)\n    return ans\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def is_overfilled(grid, row, col):\n        \"\"\"\n        Returns whether the cell is overfilled or not\n        \"\"\"\n        total = 0\n        for i in range(len(grid)):\n            total += grid[i][col]\n        return total > row\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    bucket_capacity = capacity\n    \n    row_buckets = [[0 for _ in range(cols)] for _ in range(rows)]\n    \n    for i in range(rows):\n        for j in range(cols):\n            row_buckets[i][j] = 1 if grid[i][j] else 0\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(arr, key=lambda x: (x, bin(x).count('1')))"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    return sorted(arr, key=lambda x: (bin(x)[2:], x))"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(arr, key=lambda x: x*2)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    binary = [bin(i).replace('0b', '') for i in arr]\n    return sorted(arr, key=lambda x: binary.index(x))"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    from functools import cmp_to_key\n    arr.sort(key = cmp_to_key(lambda a,b: b if a & 1 else a-1))\n    return arr\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sorted_list = sorted(arr, key = lambda x: x if x!=0 else 0 )\n    return sorted_list\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(arr, key=lambda x: (1-x, x))"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return_list = []\n    \n    if s == \"\":\n        return return_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    words = s.split()\n    return list(filter(lambda word: len([letter for letter in word if letter.isalpha() and letter.islower()]) == n, words))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    out = []\n    s = s.split()\n    if not s:\n        return out\n    else:\n        for word in s:\n            if len(word) == n and 'a' not in word:\n                out.append(word)\n    return out\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    words = []\n    for word in s.split(\" \"):\n        if len(word) == len(s) - len(s.replace(word, '')):\n            words.append(word)\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    return [\n        word for word in s.split() \n        if is_consonant(word, n) and len(word) == n\n    ]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [s for s in s.split() if len(s) - len(re.sub(\"[A-Za-z]\", \"\", s)) == n]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    words = s.split()\n    results = []\n    for i in words:\n        if len(i) >= n and i[:n] == i[-n:]:\n            results.append(i)\n    return results\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    words = []\n    for i in range(len(s)):\n        if s[i] not in \" \\n\":\n            if s[i].isalpha():\n                if s[i].isupper():\n                    if s[i + 1:i + 4] == \"space\":\n                        words.append(s[i:i + 4].lower())\n                else:\n                    if s[i + 1:i + 3] == \"i\":\n                        words.append(s[i:i + 3].lower())\n            else:\n                if s[i + 1:i + 2] == \"i\":\n                    words.append(s[i:i + 2].lower())\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Return an empty list if the input string is empty.\n    if not s:\n        return []\n    # Return an empty list if the input string contains only spaces.\n    if s.count(\" \") == len(s):\n        return []\n    # Using a list comprehension, return a list of the characters \n    # in the input string that are not whitespace.\n    return [char for char in s if char.isalpha() and char not in \" \"]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    vowels = \"aeiou\"\n    closest_vowel = \"\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            closest_vowel = word[i]\n            break\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels and word[i]!= closest_vowel:\n            closest_vowel = word[i]\n            break\n    return closest_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    # The first condition checks if the word has any vowel in the beginning or end.\n    if word.lower().find(\"a\") > -1 or word.lower().find(\"e\") > -1 or word.lower().find(\"i\") > -1 \\\n    or word.lower().find(\"o\") > -1 or word.lower().find(\"u\") > -1:\n        return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    closest = \"\"\n    for vowel in vowels:\n        for i in range(len(word)-2, -1, -1):\n            if word[i] == \" \":\n                continue\n            if word[i] == vowel:\n                closest = word[i]\n                break\n            if word[i] == \"a\":\n                closest = word[i+1]\n                break\n            if word[i] == \"e\":\n                closest = word[i+1]\n                break\n            if word[i] == \"i\":\n                closest = word[i+1]\n                break\n            if word[i] == \"o\":\n                closest = word[i+1]\n                break\n            if word[i] == \"u\":\n                closest = word[i+1]\n                break\n    return closest\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(len(word) - 1, -1, -1):\n        if word[i] in \"aeiouAEIOU\":\n            return word[i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(word) - 1, -1, -1):\n        if word[i] in VOWELS and word[i - 1] not in VOWELS and word[i + 1] not in VOWELS:\n            return word[i]\n    return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    vowels = \"aeiou\"\n    \n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # TODO: Write your code here\n    vowels = \"aeiou\"\n    vowel_index = -1\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            vowel_index = i\n            break\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    word = word.lower()\n    for i in range(len(word)-1):\n        if word[i] in 'aeiou' and word[i+1] in 'aeiou':\n            return word[i+1]\n    return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    vowels = 'aeiouAEIOU'\n    vowel_index = []\n    word_list = list(word)\n    vowel_index = []\n    vowel_index = vowel_index + [i for i in range(len(word_list)) if word_list[i] in vowels]\n    vowel_index = vowel_index + [i for i in range(len(word_list)-1,-1,-1) if word_list[i] in vowels]\n    if vowel_index:\n        return word_list[vowel_index[0]]\n    else:\n        return ''\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if lst == []:\n        return 'Yes'\n    elif lst[0] == ')':\n        return 'No'\n    else:\n        return match_parens(lst[1:])\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst)<=1:\n        return 'Yes' if len(lst)==1 else 'No'\n    temp = []\n    for i in range(len(lst)):\n        if lst[i]=='(' and i<len(lst)-1 and lst[i+1]==')':\n            lst[i] = '0'\n            temp.append(match_parens(lst[:i+1]))\n            temp.append(match_parens(lst[i+1:]))\n            return 'Yes' if 'Yes' in temp else 'No'\n        elif lst[i]=='(' and i<len(lst)-1 and lst[i+1]!=')':\n            temp.append(match_parens(lst[:i+1]))\n            return 'No'\n        elif lst[i]!='(' and i<len(lst)-1 and lst[i+1]==')':\n            temp.append(match_parens(lst[i+1:]))\n            return 'No'\n    \n    \n    \n    \ndef find_duplicate(lst):\n    '''\n    You are given a list of numbers, which contains at most 20 elements.\n    Your task is to return the list of duplicates.\n    If the list contains duplicates, return the list of duplicates in the original order.\n    If the list doesn't contain duplicates, return an empty list.\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return 'No'\n    else:\n        # if the first element in the list is not '(', return 'No'\n        if lst[0]!= '(':\n            return 'No'\n        \n        # if the last element in the list is not ')', return 'No'\n        if lst[-1]!= ')':\n            return 'No'\n        \n        # if the last element in the list is '(', we know that the first element\n        # must be ')' because we know that the first element must be '('.\n        # therefore, return 'Yes'\n        if lst[-1] == ')':\n            return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # create a list with all the parenthesis\n    parenthesis = []\n    for i in lst:\n        parenthesis.append(i)\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    stack = []\n    open_p = 0\n    for i in lst:\n        if i == '(':\n            stack.append(i)\n            open_p += 1\n        else:\n            if len(stack) == 0 or stack[-1]!= '(':\n                return 'No'\n            stack.pop()\n            open_p -= 1\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Check if the string contains balanced parentheses\n    # return a boolean\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    '''\n    # Code here\n    def parent_check(string):\n        c = 0\n        for elem in string:\n            if elem == '(':\n                c += 1\n            else:\n                c -= 1\n        return c == 0\n    return parent_check(string)\n    '''\n    return \"Yes\" if parent_check(lst) else \"No\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    if len(lst) < 2: return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return False\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    lst = sorted(lst, key=len)\n    for i in range(1, len(lst)):\n        if lst[i-1]!= lst[i]:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    arr.sort()\n    return arr[-k:]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # write your code here\n    if k > len(arr):\n        k = k % len(arr)\n    temp = arr[:k]\n    temp.sort()\n    return temp"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Approach 1:\n    \"\"\"\n    A brute force solution can be found here:\n    https://www.youtube.com/watch?v=OWRvqeYnY_I\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # sliding window solution\n    cur_min_idx = 0\n    cur_min = arr[cur_min_idx]\n    res = []\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # arr = sorted(arr)\n    # max_n = arr[k - 1]\n    # return arr[0: k]\n    # return arr[-k:]\n    # return sorted(arr[:k]) + sorted(arr[k:])\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    arr_sorted = sorted(arr)\n    k_sorted = arr_sorted[:k]\n    return k_sorted\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    # Solution 1 - Brute Force (Time Limit Exceeded)\n    \"\"\"\n    n = len(arr)\n    if n == 0 or n == 1:\n        return arr\n    \n    n = len(arr)\n    max_list = []\n    for i in range(n):\n        max_list.append(arr[i])\n    for i in range(1, n):\n        for j in range(n-i):\n            if arr[j] < arr[j+i]:\n                max_list[j] = arr[j]\n    return max_list[:k]\n    \"\"\"\n    \n    # Solution 2 - Linear Scan (Success)\n    \"\"\"\n    # n = len(arr)\n    # max_list = []\n    # for i in range(n):\n    #     max_list.append(arr[i])\n    # for i in range(n-1, 0, -1):\n    #     for j in range(n-i):\n    #         if arr[j] < arr[j+i]:\n    #             max_list[j] = arr[j]\n    # return max_list[:k]\n    \"\"\"\n    \n    # Solution 3 - Iterative\n    \"\"\"\n    n = len(arr)\n    max_list = []\n    for i in range(n):\n        max_list.append(arr[i])\n    for i in range(1, n):\n        for j in range(i, n):\n            if arr[j] > arr[i-1]:\n                max_list[i-1] = arr[j]\n    return max_list[:k]\n    \"\"\"\n    \n    # Solution 4 - Improved Iterative (Success)\n    \"\"\"\n    n = len(arr)\n    max_list = []\n    if n == 0 or n == 1:\n        return max_list\n    \n    for i in range(n):\n        max_list.append(arr[i])\n        \n    for i in range(1, n):\n        max_val = max_list[i-1]\n        for j in range(n-i):\n            if arr[j] > max_val:\n                max_val = arr[j]\n        max_list[i-1] = max_val\n    return max_list[:k]\n    \"\"\"\n    \n    # Solution 5 - Linear Scan (Success)\n    \"\"\"\n    n = len(arr)\n    max_list = []\n    for i in range(n):\n        max_list.append(arr[i])\n    \n    for i in range(n-1, 0, -1):\n        max_val = max_list[i]\n        for j in range(i-1, -1, -1):\n            if arr[j] > max_val:\n                max_val = arr[j]\n        max_list[i-1] = max_val\n    return max_list[:k]\n    \"\"\"\n    \n    # Solution 6 - Linear Scan (Success)\n    \"\"\"\n    n = len(arr)\n    max_list = []\n    for i in range(n):\n        max_list.append(arr[i])\n    \n    for i in range(n):\n        max_val = max_list[i]\n        for j in range(i, n):\n            if arr[j] > max_val:\n                max_val = arr[j]\n        max_list[i] = max_val\n    return max_list[:k]\n    \"\"\"\n    \n    # Solution 7 - Sort (Success)\n    \"\"\"\n    n = len(arr)\n    max_list = []\n    max_list.append(arr[0])\n    for i in range(1, n):\n        max_list.append(arr[i])\n        for j in range(n-1, i-1, -1):\n            if arr[j] > arr[i]:\n                max_list[i-1] = arr[j]\n                break\n    return max_list[:k]\n    \"\"\"\n    \n    # Solution 8 - Second Nested Loop (Success)\n    \"\"\"\n    n = len(arr)\n    max_list = []\n    for i in range(n):\n        max_list.append(arr[i])\n        for j in range(n-1, "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    i, j, res = 0, 0, []\n    while i <= len(arr) - k and j <= len(arr) - 1:\n        if arr[i] > arr[j]:\n            res.append(arr[j])\n            j += 1\n        else:\n            res.append(arr[i])\n            i += 1\n    if j == len(arr):\n        res.extend(arr[i:])\n    else:\n        res.extend(arr[j:])\n    return res\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Time: O(n log n + k log n)\n    # Space: O(n)\n    # N is the length of the input array\n    \n    # k is the length of the desired subarray\n    if not arr:\n        return []\n    \n    n = len(arr)\n    k = min(k, n)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Approach 1: Brute force approach (O(nk))\n    # Time Complexity: O(nk)\n    # Space Complexity: O(1)\n    arr.sort()\n    return arr[k - 1]\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum([i for i in lst if i%2!=0])\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i%2==1])\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i%2==0])"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    even_sum = sum(i for i in lst if i % 2 == 0)\n    return even_sum\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(lst)):\n        if i % 2!= 0:\n            count += lst[i]\n    return count"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    evenSum = 0\n    for i in lst:\n        if i%2 == 0:\n            evenSum+=i\n    return evenSum\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    odd_sum = 0\n    for i in range(1, len(lst), 2):\n        odd_sum += lst[i]\n    return odd_sum\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not lst or len(lst) == 0:\n        return 0\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum([x for x in lst if x%2 == 1 and x%2!= 0])\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1:\n            total += lst[i]\n    return total"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum(min(int(str(n)[0]+str(n)[1]), int(str(n)[0])) for n in arr[:k])\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    k = k - 1\n    # O(n)\n    first = k + 1\n    # O(k)\n    last = k\n    # O(n + k)\n    total = 0\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # # Brute force O(n^2)\n    # for i in range(len(arr) - k + 1):\n    #     temp = ''\n    #     for j in range(k):\n    #         temp += arr[i + j]\n    #     arr[i] = int(temp)\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Solution\n    # Since we can find a subset of the array which has at most k elements,\n    # we can divide the array into two halves and then calculate the sum of\n    # the elements with at most 2 digits, which is the same as the sum of the\n    # last k elements of the first half.\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert len(arr) > 0 and len(arr) <= 100\n    assert 1 <= k <= len(arr)\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def helper(arr, k, visited, count, target, res):\n        if count == target:\n            res.append(visited)\n            return\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if k > len(arr):\n        return 0\n    else:\n        for i in range(len(arr)):\n            arr[i] = str(arr[i])\n        return sum([int(arr[i]) for i in range(k)])\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    num_of_elements = k + 1\n    first_nums = arr[:num_of_elements]\n    print(first_nums)\n    return sum(first_nums)\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sorted_arr = sorted(arr, reverse=True)\n    result = 0\n    curr_k = 0\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def digits(n):\n        return len([i for i in str(n)])\n    i = 0\n    while i < k:\n        arr.append(0)\n        i += 1\n    arr.sort(key=digits)\n    i = 0\n    sum = 0\n    while i < len(arr)-1:\n        sum += arr[i]\n        i += 2\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 1:\n        return [1]\n    collatz_sequence = get_odd_collatz(n // 2)\n    if n % 2 == 0:\n        collatz_sequence.append(n)\n        return collatz_sequence\n    else:\n        collatz_sequence.append(3 * n + 1)\n        return collatz_sequence\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    odd_collatz = []\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [i for i in range(1, n+1) if i%2!=0]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    odd_nums = []\n    curr_num = 1\n    while curr_num!= 1:\n        if curr_num % 2 == 0:\n            curr_num = curr_num // 2\n        else:\n            curr_num = (curr_num * 3) + 1\n        odd_nums.append(curr_num)\n    odd_nums.sort()\n    return odd_nums\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    odd_collatz = []\n    while n > 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        n = n // 2 if n % 2 == 0 else n * 3 + 1\n    odd_collatz.append(1)\n    return sorted(odd_collatz)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    ret = []\n    while n!= 1:\n        if n % 2 == 1:\n            ret.append(n)\n        n = n // 2 if n % 2 == 0 else n * 3 + 1\n    return ret\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    odd_collatz_sequence = []\n    current_number = 1\n    \n    while current_number!= 1:\n        if current_number % 2!= 0:\n            odd_collatz_sequence.append(current_number)\n        current_number = collatz(current_number)\n    \n    odd_collatz_sequence.sort()\n    return odd_collatz_sequence\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        result.append(n)\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(odds)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    odd_seq = []\n    seq_num = 2\n    while seq_num < n:\n        if seq_num % 2 == 0:\n            seq_num = seq_num/2\n        else:\n            seq_num = seq_num*3+1\n        odd_seq.append(seq_num)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    months = (\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n    )\n    day, month, year = date.split(\"-\")\n    day = int(day)\n    month = int(month)\n    year = int(year)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return True if len(date) == 10 and all(i in str(range(1,13)) for i in date.split('-')) and all(i in str(range(1,31)) for i in date.split('-')) and all(i in str(range(1,29)) for i in date.split('-')) and (date.split('-')[1]!= '02') and (date.split('-')[2]!= '02') else False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    year, month, day = date.split('-')\n    if not len(month) == 2:\n        return False\n    if not len(day) == 2:\n        return False\n    if not len(year) == 4:\n        return False\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July',\n    'August', 'September', 'October', 'November', 'December']\n    if not month in months:\n        return False\n    if not len(month) == 2:\n        return False\n    try:\n        if not int(month) in range(1, 13):\n            return False\n        if not int(day) in range(1, 32):\n            return False\n        if not int(year) in range(1, 2100):\n            return False\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    months = {'1':31, '2':28, '3':31, '4':30, '5':31, '6':30, '7':31, '8':31, '9':30, '10':31, '11':30, '12':31}\n    days = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31']\n    date_split = date.split('-')\n    month = date_split[0]\n    day = date_split[1]\n    year = date_split[2]\n    if len(month) == 1 and month.isdigit():\n        month = '0' + month\n    if len(month) == 2:\n        month = months[month]\n    if len(month) == 1:\n        month = months[month]\n    if len(month) == 1 and month == '0':\n        month = months[month]\n    if len(day) == 1 and day.isdigit():\n        day = '0' + day\n    if len(day) == 2:\n        day = days[day]\n    if len(day) == 1:\n        day = days[day]\n    if month > 12 or month < 1:\n        return False\n    if day > 31 or day < 1:\n        return False\n    if len(year)!= 4:\n        return False\n    if int(year) <= 1989:\n        return False\n    if int(year) >= 2020:\n        return False\n    if month == '2' and int(day) > 29:\n        return False\n    if month == '4' and int(day) > 30:\n        return False\n    if month == '6' and int(day) > 30:\n        return False\n    if month == '9' and int(day) > 30:\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(date)!= 0:\n        year, month, day = date.split('-')\n        if int(day) < 1 or int(day) > 31:\n            return False\n        if int(month) < 1 or int(month) > 12:\n            return False\n        if int(month) in (1,3,5,7,8,10,12):\n            if int(day) < 1 or int(day) > 31:\n                return False\n        elif int(month) in (4,6,9,11):\n            if int(day) < 1 or int(day) > 30:\n                return False\n        else:\n            if int(day) < 1 or int(day) > 29:\n                return False\n        if len(month)!= 2:\n            return False\n        if len(year)!= 4:\n            return False\n        if int(month) in (1,3,5,7,8,10,12) and int(year) % 4!= 0:\n            return False\n        if int(month) in (4,6,9,11) and int(year) % 400 == 0:\n            return False\n        if int(month) == 2 and int(year) % 4!= 0:\n            return False\n        if len(month) == 2:\n            if int(month) < 1 or int(month) > 12:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    try:\n        (month, day, year) = date.split('-')\n        valid_month = ['01', '03', '05', '07', '08', '10', '12']\n        valid_month_d = ['01', '03', '05', '07', '08', '10', '12', '04', '06', '09', '11']\n        valid_day = range(1, 32)\n        valid_day_d = range(1, 32)\n        valid_month_d = range(1, 32)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # your code here\n    if not date:\n        return False\n    month_valid = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    day_valid = range(1, 31)\n    month_valid_1 = range(1, 13)\n    month_valid_2 = range(4, 13)\n    month_valid_3 = range(7, 13)\n    month_valid_4 = range(10, 13)\n    month_valid_5 = range(12, 13)\n    year_valid = range(1900, 2021)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    date = date.split('-')\n    if len(date)!= 3:\n        return False\n    if date[0].isdigit() and date[1].isdigit() and date[2].isdigit() and date[0].isalpha() and date[1].isalpha() and date[2].isalpha():\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n        if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            if day < 1 or day > 31:\n                return False\n        if month == 4 or month == 6 or month == 9 or month == 11:\n            if day < 1 or day > 30:\n                return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if len(date[0]) == 1 and len(date[1]) == 1 and len(date[2]) == 4 and len(date[0]) == 2 and len(date[1]) == 2 and len(date[2]) == 4:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if date == '':\n        return False\n    month_dict = {1: 31, 3: 31, 5: 31, 7: 31, 8: 31, 10: 31, 12: 31}\n    month_dict2 = {4: 30, 6: 30, 9: 30, 11: 30}\n    month_dict3 = {2: 29}\n    if not date.replace('-', '').replace(' ', '').isdigit():\n        return False\n    if int(date.replace('-', '').replace(' ', '')) < 0 or int(date.replace('-', '').replace(' ', '')) > 9999:\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in month_dict3 and day > 31:\n        return False\n    if month in month_dict and day > 31:\n        return False\n    if month in month_dict2 and day > 30:\n        return False\n    if month in month_dict and day > 28:\n        return False\n    if month in month_dict and day == 29:\n        if date.find('2') == 0:\n            return False\n    if date.find('2') == 0:\n        return False\n    if not year.isdigit():\n        return False\n    if not str(year).replace('-', '').isdigit():\n        return False\n    if int(year) < 0 or int(year) > 9999:\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #\n    try:\n        tmp = re.findall(r'\\d{1,2}', date)\n        month = int(tmp[0])\n        day = int(tmp[1])\n        year = int(tmp[2])\n        if month in range(1,13):\n            if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n                if day in range(1,31):\n                    if month == 4:\n                        if day < 1 or day > 29:\n                            return False\n                    elif month in range(1,7):\n                        if day in range(1,31):\n                            return False\n                    elif month == 2:\n                        if day < 1 or day > 28:\n                            return False\n                    elif month == 6:\n                        if day in range(1,30):\n                            return False\n                    elif month == 9 or month == 11:\n                        if day in range(1,30):\n                            return False\n                    else:\n                        if day in range(1,31):\n                            return False\n                else:\n                    return False\n            elif month == 2:\n                if day < 1 or day > 29:\n                    return False\n            else:\n                if day in range(1,31):\n                    return False\n        else:\n            return False\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return re.split(\"\\s+\",txt)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return re.split(r'[ ]|,',txt.lower())\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return ','.join(txt.split()).split(',')\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    text = txt.split()\n    text = [word.lower() for word in text]\n    \n    return text\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \" \".join(txt.split())\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [i for i in txt.split()]\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    txt = txt.split()\n    return txt"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code here\n    for i in range(len(lst)):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return not any(lst[i] > lst[i+1] for i in range(len(lst)-1))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(lst) == len(set(lst)) and all(x <= y for x, y in zip(lst, lst[1:]))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(0,len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # one line solution\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) < 2:\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    lst = [int(i) for i in lst]\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if j!= i and lst[j] == lst[i]:\n                return False\n    return True\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    interval_start = min(interval1[0], interval2[0])\n    interval_end = max(interval1[1], interval2[1])\n    interval_length = interval_end - interval_start\n    if interval_length < 2:\n        return \"NO\"\n    if isprime(interval_length):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Your code here\n    return\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    if interval1[0] > interval2[0] or interval1[1] < interval2[0]: return \"NO\"\n    else: return \"YES\" if math.gcd(interval1[1] - interval1[0], interval2[1] - interval2[0]) == 1 else \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return 'YES' if len(intersection_interval(interval1, interval2)) == 1 else 'NO'\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if (interval1[0] <= interval2[0] and interval1[1] >= interval2[1]) or (interval2[0] <= interval1[0] and interval2[1] >= interval1[1]):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if interval1[0] > interval2[1]:\n        interval1, interval2 = interval2, interval1\n    if interval1[1] < interval2[0]:\n        return \"NO\"\n    elif interval1[0] < interval2[0] or interval1[1] > interval2[1]:\n        return \"NO\"\n    return prime(interval1[1] - interval1[0] + 1)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(interval1)!= len(interval2):\n        return \"NO\"\n    for i in range(len(interval1)):\n        if (interval1[i][0] <= interval2[i][1] and interval2[i][0] <= interval1[i][1]):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if start >= end:\n        return \"NO\"\n    if start <= 0 and end <= 0:\n        return \"YES\"\n    if start > 0 and end > 0:\n        return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if interval1[0] > interval2[1]:\n        return \"NO\"\n    elif interval2[0] > interval1[1]:\n        return \"NO\"\n    elif interval1 == interval2:\n        return \"YES\"\n    else:\n        length = interval2[1] - interval1[0]\n        if length % 2 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return None\n    return sum([abs(x) * (1 if x > 0 else -1) for x in arr])\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not arr:\n        return None\n    return sum([abs(i) * sign for i, sign in enumerate(arr)])\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Your code here\n    return None\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    sign = 0\n    for i in arr:\n        if i > 0:\n            sign += 1\n        elif i < 0:\n            sign -= 1\n    return sign * prod(arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not arr:\n        return None\n    signs = 0\n    arr = [-x for x in arr]\n    for i in arr:\n        if i < 0:\n            signs += 1\n    return signs * sum(arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum(abs(i) * prod(sign for sign in signs(i)) for i in arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum(abs(i) * (1 if i > 0 else -1 if i < 0 else 0)\n              for i in arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return None if not arr else sum(abs(num) * (1 if num > 0 else -1 if num < 0 else 0) for num in arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not arr:\n        return None\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not arr:\n        return None\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Solution 1: Recursive DFS with memoization\n    # Time: O(m * n * 2^k)\n    # Space: O(m * n * 2^k)\n    # dp = {}\n    # def helper(i, j, k, lst):\n    #     if k == 0:\n    #         return lst\n    #     if (i, j, k) in dp:\n    #         return dp[(i, j, k)]\n    #     else:\n    #         for x, y in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n    #             if 0 <= i + x < m and 0 <= j + y < n and grid[i + x][j + y] <= k:\n    #                 if helper(i + x, j + y, k - grid[i][j], lst + [grid[i + x][j + y]]):\n    #                     dp[(i, j, k)] = True\n    #                     return True\n    #         dp[(i, j, k)] = False\n    #         return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not grid:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # get the cells coordinates\n    rows = len(grid)\n    cols = len(grid[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    seen = set()\n    output = []\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def helper(r, c, k, visited):\n        if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == 0 or visited[r][c]:\n            return\n        visited[r][c] = True\n        if k == 0:\n            return\n        helper(r + 1, c, k - 1, visited)\n        helper(r - 1, c, k - 1, visited)\n        helper(r, c + 1, k - 1, visited)\n        helper(r, c - 1, k - 1, visited)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not grid:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    ###############################################################\n    # Dijkstra's Algorithm\n    #\n    #   The algorithm is based on the following steps:\n    #       1. Initialize the starting point.\n    #       2. Initialize a dictionary (map) to record the distance of the current node\n    #           to the ending node.\n    #       3. Initialize an empty queue.\n    #       4. Update the distance of the current node to the ending node to 0.\n    #       5. Add the current node to the queue.\n    #       6. While the queue is not empty:\n    #           a. Pop the first node (the current node) from the queue\n    #           b. For each neighbor of the current node,\n    #              i. Update the distance of the neighbor to the ending node to\n    #              the current node's distance plus the current node's distance.\n    #              ii. If the distance of the neighbor to the ending node is less\n    #                 than the distance of the neighbor to the current node's distance,\n    #                 then update the distance of the neighbor to the ending node.\n    #           c. Add the neighbor's current node to the queue.\n    #\n    #   The queue is used to search the nodes (or vertices) with the minimum distance\n    #   from the ending node to the starting node.\n    #\n    #\n    ###############################################################\n    rows = len(grid)\n    cols = len(grid[0])\n    if rows < 2 or cols < 2:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    M, N = len(grid), len(grid[0])\n    if k <= 0 or M * N < k: return []\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    # get the number of rows and columns\n    n, m = len(grid), len(grid[0])\n    if k >= m:\n        return grid\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [1, 1, 2, 3, 4]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    res = []\n    res.append(1)\n    res.append(3)\n    if n == 0:\n        return res\n    for i in range(2, n+1):\n        res.append(res[-1] + res[-2] + res[-3])\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return [0]\n    else:\n        if n == 1:\n            return [3]\n        else:\n            return [tri(n - 1)[0] + tri(n - 2)[0] + tri(n - 3)[0]]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not isinstance(n, int) or n < 1:\n        return None\n    first = (1, 1, 1)\n    second = (2, 3, 2)\n    i = 3\n    while i <= n:\n        print(first)\n        first = tuple(map(lambda x, y: x + y, first, second))\n        second = tuple(map(lambda x, y: x + y, second, first))\n        i += 1\n    return first\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n < 3:\n        return [1, 1, 1, ]\n    a, b, c = 1, 1, 1\n    result = [1, 1, 1, ]\n    for i in range(3, n + 1):\n        c = a + b + c\n        a, b, c = b, c, c\n        result.append(c)\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = int(n)\n    if n <= 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    a = [1, 1]\n    b = [1, 1, 1]\n    for i in range(3, n+1):\n        a.append(a[i-1] + a[i-2] + a[i-3])\n    return a\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    res = []\n    def trib(n):\n        if n == 1 or n == 2:\n            return 1\n        if n == 3:\n            return 1, 1, 2\n        return trib(n - 1) + trib(n - 2) + trib(n - 3)\n    \n    for i in range(n + 1):\n        res.append(trib(i))\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [1,1]\n    res = []\n    a, b = 1, 1\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            a, b = b, a + b\n        else:\n            a, b = b, a + b + 1\n        res.append(b)\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = int(n)\n    if n == 0:\n        return []\n    tri_list = []\n    tri_list.append(1)\n    tri_list.append(1)\n    for i in range(1, n):\n        if i % 2 == 0:\n            tri_list.append(tri_list[i - 1] + tri_list[i - 2])\n        else:\n            tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i - 3])\n    return tri_list\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = int(n)\n    res = []\n    for i in range(n + 1):\n        if i == 0:\n            res.append(3)\n        elif i == 1:\n            res.append(1)\n        elif i == 2:\n            res.append(1)\n            res.append(2)\n        else:\n            res.append(res[i - 1] + res[i - 2] + res[i - 3])\n    return res\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # if n == 0:\n    #     return 1\n    # if n < 10:\n    #     return n\n    # x = n % 10\n    # if x % 2 == 0:\n    #     return digits(n // 10)\n    # return n * digits(n // 10)\n    \n    return n and (n % 10 * digits(n // 10)) or 1\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # YOUR CODE HERE\n    d = 1\n    while n > 0:\n        if n % 10 % 2!= 0:\n            d *= n % 10\n        n //= 10\n    return d\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    while n >= 1:\n        if n % 10 % 2 == 1:\n            return n % 10 * digits(n // 10)\n        n //= 10\n    return 0\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum(int(i) for i in str(n) if int(i) % 2)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n < 10:\n        return 0\n    elif n % 10 % 2 == 0:\n        return n % 10\n    else:\n        return 0\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return reduce(lambda x, y: x * y, map(lambda d: int(d), list(filter(lambda d: d % 2, str(n)))))\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # n = str(n)\n    # print(n)\n    count = 0\n    for i in n:\n        if int(i) % 2 == 1:\n            count += 1\n    # print(count)\n    return count\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return digits(n//10) * 10 + n % 10\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (n%10)*(n//10)%10\n    \n    \n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    def is_nested2(string):\n        list1 = []\n        list2 = []\n        for i in string:\n            if i == '[':\n                list1.append(i)\n            elif i == ']':\n                if len(list1) == 0:\n                    return False\n                else:\n                    list1.pop()\n        if len(list1) == 0:\n            return True\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def helper(string, brackets_list):\n        if string == '':\n            return True\n        if string[0] == ']':\n            return False\n        if string[0] == '[':\n            brackets_list.append(string[0])\n            return helper(string[1:], brackets_list)\n        if string[0] == '(':\n            brackets_list.append(string[0])\n            return helper(string[1:], brackets_list)\n    return helper(string, [])\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return True if string.count('[') == string.count(']') + string.count('{') else False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    def is_nested2(string):\n        stack = []\n        for char in string:\n            if char == '[':\n                stack.append(char)\n            elif char == ']':\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n        return len(stack) == 0\n    \n    return is_nested2(string)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(string) < 3:\n        return False\n    for i in range(2, len(string)):\n        if string[i] == ']':\n            if string[i-1] == '[':\n                if string[i-2] == ']':\n                    return True\n    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    bracket = '['\n    bracket_s = ']'\n    bracket_l = '['\n    if len(string) < 1:\n        return False\n    else:\n        if string[0] == bracket:\n            new_string = string[1:]\n            if len(new_string) >= 1:\n                if new_string[0] == bracket:\n                    return is_nested(new_string[1:])\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    \n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    #returns true if string contains one or more brackets\n    if '[' not in string:\n        return False\n    #converts string to list \n    mylist = list(string)\n    #creates stack to store bracket positions\n    mystack = []\n    #loops through string and stores bracket positions in stack\n    for i in range(len(mylist)):\n        if mylist[i] == '[':\n            mystack.append(i)\n        elif mylist[i] == ']':\n            #if the stack is empty, return false\n            if len(mystack) == 0:\n                return False\n            else:\n                mystack.pop()\n    #if stack is not empty, return false\n    return len(mystack) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #convert input to lower case\n    string = string.lower()\n    #remove any white spaces \n    string = string.replace(' ','')\n    #check if input is a bracket then return false\n    if string[0]!= '[' or string[-1]!= ']':\n        return False\n    #else check if it is nested \n    else:\n        if is_nested(string[1:-1]):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(string)<=1:\n        return False\n    count = 0\n    for char in string:\n        if char == \"[\":\n            count+=1\n        elif char == \"]\":\n            count-=1\n        if count<0:\n            return False\n    return count == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #your code here\n    return True if string.find('[]')!= -1 else False\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum(x*x for x in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return round(sum(i * i for i in lst))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    new_list = list()\n    for i in lst:\n        new_list.append(int(i))\n    result = 0\n    for i in new_list:\n        result += i*i\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if isinstance(lst,int):\n        return lst\n    lst_float = []\n    for item in lst:\n        lst_float.append(float(item))\n    return sum(map(lambda x: x*x, lst_float))"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    lst = map(abs, lst)\n    return sum(map(lambda x: x ** 2, lst))\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum([a*a for a in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum(n**2 for n in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # i = 0\n    # count = 0\n    # for i in lst:\n    #     if i > 0:\n    #         count += i * i\n    #         # print(count)\n    #     i += 1\n    # return count\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    return sum([i**2 for i in lst])\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return not txt[-1].isalpha() and txt[-1] not in'\\t\\n'\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code here\n    pass\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return txt[-1].isalpha() and not txt.isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return True if txt[-1].isalpha() and txt[-1] not in ',.!?-' else False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return txt[-1].isalpha() and not txt[-1].isnumeric() and len(txt) > 1\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return txt and txt[-1].isalpha() and not is_word(txt)\n    \n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if txt == \"\":\n        return False\n    else:\n        if (txt[-1].isalpha() and not txt[-1].isupper()) or txt[-1].isupper():\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return True if txt and (txt[-1].isalpha() and not is_word(txt)) else False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Code here\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return i-1\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    for index in range(len(arr)-1):\n        if arr[index] >= arr[index+1]:\n            return index\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def can_arrange(arr):\n        n = len(arr)\n        for i in range(n-1):\n            if arr[i] >= arr[i+1]:\n                return i\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Solution\n    # Get the max element\n    max_elem = max(arr)\n    # Get the index of max element\n    max_elem_index = arr.index(max_elem)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not arr:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Sort the array\n    arr = sorted(arr)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def can_arrange_helper(arr, i):\n        if i == 0:\n            if arr[i] < arr[i+1]:\n                return i\n        if i == len(arr) - 1:\n            if arr[i] > arr[i-1]:\n                return i\n        return can_arrange_helper(arr, i+1)\n    return can_arrange_helper(arr, 0)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Store the indices of all the elements in the array as a sorted list,\n    # so that we can use binary search.\n    indices = sorted(range(len(arr)), key=arr.__getitem__)\n    \n    for i in range(1, len(indices)):\n        if arr[i] < arr[i-1]:\n            return indices[i-1]\n    \n    # If we reach here, then no such element exists\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    arr.sort()\n    for i in range(1,len(arr)):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if arr is None:\n        return None\n    i = 1\n    while i < len(arr):\n        if arr[i] >= arr[i-1]:\n            i += 1\n        else:\n            return i-1\n    return i-1\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your Code Here\n    if len(lst) > 0:\n        neg = -1 * lst[0]\n        pos = lst[0]\n        for i in lst[1:]:\n            if i > neg:\n                pos = neg\n                neg = i\n            if i < pos:\n                pos = i\n        return (neg, pos)\n    else:\n        return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    neg_max, neg_min = -1, -1\n    pos_max, pos_min = None, None\n    for num in lst:\n        if num < 0:\n            if neg_min == -1:\n                neg_min = num\n            else:\n                neg_min = min(neg_min, num)\n        elif num > 0:\n            if pos_max == None or num > pos_max:\n                pos_max = num\n            else:\n                pos_max = max(pos_max, num)\n    return (neg_min, pos_max)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    a = None\n    b = None\n    for i in lst:\n        if a == None or a < i:\n            a = i\n        if b == None or b > i:\n            b = i\n    return (a, b)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n    a = None\n    b = None\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert(isinstance(lst, list))\n    neg = -999999\n    pos = 9999999\n    if lst == []:\n        return (None, None)\n    elif len(lst) == 1:\n        return (lst[0], lst[0])\n    else:\n        for i in lst:\n            if i > 0:\n                if i > pos:\n                    pos = i\n            elif i < 0:\n                if i < neg:\n                    neg = i\n        return (neg, pos)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    a = max(lst)\n    if a < 0:\n        return (None, a)\n    b = min(lst)\n    if b > 0:\n        return (b, a)\n    return (None, None)"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return None, None\n    else:\n        max_negative = max([x for x in lst if x < 0])\n        min_positive = min([x for x in lst if x > 0])\n        return max_negative, min_positive\n    \n    \n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # your code here\n    negatives = []\n    positives = []\n    for x in lst:\n        if x > 0:\n            positives.append(x)\n        elif x < 0:\n            negatives.append(x)\n    if len(negatives) == 0 and len(positives) == 0:\n        return (None, None)\n    elif len(negatives) == 0 and len(positives)!= 0:\n        return (None, positives[0])\n    elif len(negatives)!= 0 and len(positives) == 0:\n        return (negatives[0], None)\n    else:\n        max_neg = max(negatives)\n        min_pos = min(positives)\n        return (max_neg, min_pos)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lst = sorted(lst)\n    if len(lst) == 0:\n        return None, None\n    return (lst[-1], lst[0])\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    largest_neg = None\n    largest_pos = None\n    for number in lst:\n        if number < 0:\n            if largest_neg == None:\n                largest_neg = number\n            elif largest_neg < number:\n                largest_neg = number\n        elif number > 0:\n            if largest_pos == None:\n                largest_pos = number\n            elif largest_pos > number:\n                largest_pos = number\n    return (largest_neg, largest_pos)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #return None if type(a) is not int and type(b) is not int\n    if type(a) is str and type(b) is str:\n        if a > b:\n            return a\n        return b\n    if type(a) is int and type(b) is int:\n        if a > b:\n            return a\n        return b\n    if type(a) is float and type(b) is float:\n        if a > b:\n            return a\n        return b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if type(a) == type(b):\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if type(a) == type(b):\n        return None\n    if type(a) == int or type(a) == float:\n        if type(b) == int or type(b) == float:\n            if a > b:\n                return a\n            else:\n                return b\n        else:\n            return a\n    elif type(a) == str:\n        if type(b) == int or type(b) == float:\n            return a if a > str(b) else b\n        else:\n            return a\n    else:\n        return a\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # The key here is to create a different value from the original ones if they're different.\n    # So if we get these values, we can safely compare them.\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if isinstance(a, float) or isinstance(b, float):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str):\n        a = a.strip().split(',')\n        a = [float(i) for i in a]\n        if len(a) > 1:\n            b = b.strip().split(',')\n            b = [float(i) for i in b]\n            return a if a > b else b\n        else:\n            return a[0]\n    elif isinstance(a, int):\n        return a if a > b else b\n    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return a if a > b else b\n    # or\n    # a, b = 1, 2.5\n    # return a if a > b else b\n    # or\n    # a, b = 1, \"2,3\"\n    # return b if a > b else a\n    # or\n    # a, b = \"5,1\", \"6\"\n    # return a if a > b else b\n    # or\n    # a, b = \"1\", 1\n    # return a if a > b else b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a>b:\n        return a\n    elif a<b:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a > b:\n        return a\n    if a == b:\n        return None\n    return b\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n < 4:\n        return False\n    \n    for i in range(1, n):\n        if (n - i) % 2 == 0:\n            if (n - i) % 4 == 0:\n                return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    evens = [2,4,6,8]\n    total = 0\n    for i in evens:\n        total += i\n    return total == n\n    \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n % 2!= 0:\n        return False\n    else:\n        s = 0\n        for i in range(1, n):\n            if n % i == 0:\n                s += i\n        if s == n:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return is_equal_to_sum_odd(n) or n % 2 == 0 and is_equal_to_sum_odd(n + 1)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        return n == sum_even(n)\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return n % 4 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return n % 2 == 0 and (n // 2) % 2 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (n % 2 == 0 and n >= 2 and n <= 10 and (n - 2) % 2 == 0) or (n % 2 == 0 and n >= 2 and n <= 5 and (n - 2) % 2 == 1) or (n % 2 == 0 and n >= 2 and n <= 4 and (n - 2) % 2 == 0)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert is_integer(n) and n > 0, \"Input must be a positive integer\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if isinstance(n,int) and n > 0 and is_sum_of_four_even(n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    factorial = 1\n    for i in range(1, n):\n        factorial = factorial * i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    fact = 1\n    while(n > 0):\n        fact *= n\n        n -= 1\n    return fact\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    factorial = 1\n    while n > 0:\n        factorial = factorial * n\n        n = n - 1\n    return factorial"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    factorial = 1\n    for x in range(1, n):\n        factorial = factorial * x\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    factorial = 1\n    for i in range(1, n):\n        factorial = factorial * i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    factorial = 1\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code here\n    return\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = int(n)\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n > 1:\n        return n * special_factorial(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #Criei uma vari\u00e1vel para receber o valor da fun\u00e7\u00e3o\n    x = 1\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    text = text.replace(' ', '_')\n    text = ''.join(text.split())\n    return text\n    \ndef get_words(text):\n    \"\"\"\n    Given a string text, return a list of strings containing all the words in text \n    \n    get_words(\"A test\") == ['a', 'test']\n    get_words(\"My favorite color is blue\") == ['my', 'favorite', 'color', 'is', 'blue']\n    \"\"\"\n    text = text.split()\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return text.replace(' ', '_').replace('  ', '-').strip()\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return re.sub(\" +\", \"_\", text)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    return text.strip().replace(' ', '_')\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return re.sub(' ', '_', text)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return re.sub('\\s+','_',text)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # TODO: Write your code here\n    return ''.join(['_' if i==''else i for i in text])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # Your code here\n    # Replace spaces in a string \n    text = text.replace(' ', '_')\n    # Check if there are more than 2 spaces in the string\n    if(text.find('  ')>-1):\n        # Replace 2 spaces in the string with hyphen\n        text = text.replace('  ', '-')\n        return(text)\n    else:\n        return(text)\n        \nif __name__ == '__main__':\n    # Check the function for each test case below\n    test_input = ['Example', 'Example1','Example 2', 'Example3', 'Example   3']\n    print('Test case 1:')\n    print('Input =', test_input[0], ', Output =', fix_spaces(test_input[0]))\n    print('Test case 2:')\n    print('Input =', test_input[1], ', Output =', fix_spaces(test_input[1]))\n    print('Test case 3:')\n    print('Input =', test_input[2], ', Output =', fix_spaces(test_input[2]))\n    print('Test case 4:')\n    print('Input =', test_input[3], ', Output =', fix_spaces(test_input[3]))\n    print('Test case 5:')\n    print('Input =', test_input[4], ', Output =', fix_spaces(test_input[4]))\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    text = text.replace(' ', '_')\n    return text.strip('_')\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return '_'.join(text.split(' '))\n    \ndef split_punctuation(text):\n    \"\"\"\n    Given a string text, return the text and the \n    spaces that have been \n    included in it, \n    \n    split_punctuation(\"Example\") == \"Example\"\n    split_punctuation(\"Example 1\") == \"Example_1\"\n    split_punctuation(\" Example 2\") == \"Example_2\"\n    \"\"\"\n    return text.split(' ')\n    \ndef capitalize_spaces(text):\n    \"\"\"\n    Given a string text, capitalize all the spaces \n    in it,\n    \n    capitalize_spaces(\"Example\") == \"Example\"\n    capitalize_spaces(\"Example 1\") == \"Example_1\"\n    capitalize_spaces(\" Example 2\") == \"Example_2\"\n    \"\"\"\n    return text.title()\n    \ndef convert_to_snake_case(text):\n    \"\"\"\n    Given a string text, convert it to a snake case version of it,\n    that is all lowercase letters separated by underscores, \n    \n    convert_to_snake_case(\"Example\") == \"example\"\n    convert_to_snake_case(\"Example 1\") == \"example_1\"\n    convert_to_snake_case(\"Example 2\") == \"example_2\"\n    \"\"\"\n    return text.replace(' ', '_').lower()\n    \ndef count_words(text):\n    \"\"\"\n    Given a string text, return the count of the \n    number of words in it. \n    \n    count_words(\"Example\") == 3\n    count_words(\"Example 1\") == 2\n    count_words(\" Example 2\") == 2\n    \"\"\"\n    return len(text.split(' '))\n    \ndef capitalize_first_letter(text):\n    \"\"\"\n    Given a string text, capitalize the first letter of it. \n    \n    capitalize_first_letter(\"Example\") == \"Example\"\n    capitalize_first_letter(\"Example 1\") == \"Example_1\"\n    capitalize_first_letter(\"Example 2\") == \"Example_2\"\n    \"\"\"\n    return text[0].upper() + text[1:]\n    \ndef sum_values_in_list(numbers):\n    \"\"\"\n    Given a list of numbers, return the sum of the \n    values in it. \n    \n    sum_values_in_list([1,2,3]) == 6\n    sum_values_in_list([1,-2,3]) == 0\n    \"\"\"\n    return sum(numbers)\n    \ndef sum_odd_values(numbers):\n    \"\"\"\n    Given a list of numbers, return the sum of the \n    odd values in it. \n    \n    sum_odd_values([1,2,3]) == 0\n    sum_odd_values([2,4,6]) == 9\n    sum_odd_values([1,3,5,7,9]) == 10\n    \"\"\"\n    return sum([x for x in numbers if x%2!= 0])\n    \ndef sum_even_values(numbers):\n    \"\"\"\n    Given a list of numbers, return the sum of the \n    even values in it. \n    \n    sum_even_values([1,2,3]) == 2\n    sum_even_values([2,4,6]) == 10\n    sum_even_values([1,3,5,7,9]) == 18\n    \"\"\"\n    return sum([x for x in numbers if x%2 == 0])\n    \ndef remove_and_sort(text):\n    \"\"\"\n    Given a string text, remove all the characters from it and \n    then return it as a string in sorted order. \n    \n    remove_and_sort(\"Example\") == \"em\"\n    remove_and_sort(\"Example 1\") == \"em_1\"\n    remove_and_sort(\" Example 2\") == \"em_2\"\n    \"\"\"\n    return ''.join(sorted(list(set(text))))\n    \ndef remove_and_sort_2(text):\n    \"\"\"\n    Given a string text, return a string in sorted order, \n    with all the characters from text removed. \n    \n    remove_and_sort_2(\"Example\") == \"em\"\n    remove_and_sort_2(\"Example 1\") == \"e_1\""
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not re.search(\"\\d\", file_name):\n        return \"No\"\n    if not re.search(\"[a-z]\", file_name):\n        return \"No\"\n    if re.search(\"^[a-z].*[a-z].*[a-z]$\", file_name) is None:\n        return \"No\"\n    if file_name[-3:] == \"txt\":\n        return \"Yes\"\n    if file_name[-3:] == \"exe\":\n        return \"Yes\"\n    if file_name[-3:] == \"dll\":\n        return \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not re.match(r'\\w+\\.?[a-zA-Z]', file_name):\n        return 'No'\n    if re.match(r'\\w+\\.\\w{2,3}$', file_name) is None:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # validate if the file's name has more than three characters\n    if len(file_name) < 3:\n        return 'No'\n    # validate if the file's name has a dot\n    if file_name.count('.')!= 1:\n        return 'No'\n    # validate if the file's name's first letter is a latin alphapet letter\n    if not file_name[0].isalpha():\n        return 'No'\n    # validate if the file's name's last letter is a latin alphapet letter\n    if not file_name[-1].isalpha():\n        return 'No'\n    # validate if the file's name is one of the allowed types\n    if not file_name[-3:].lower() in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n    \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(file_name) < 3:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name[0].isalpha() == False:\n        return 'No'\n    if file_name.lower().endswith('.txt')!= True:\n        return 'No'\n    if file_name.lower().endswith('.exe')!= True:\n        return 'No'\n    if file_name.lower().endswith('.dll')!= True:\n        return 'No'\n    return 'Yes'\n    \ndef show_files(file_names):\n    \"\"\"Return a string of all files within the input directory\n    \"\"\"\n    for i in range(len(file_names)):\n        file_names[i] = file_names[i].replace('\\\\','/')\n    return '\\n'.join(file_names)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    file_name = file_name.strip()\n    if len(file_name) <= 2 or not file_name.isalnum():\n        return False\n    if not file_name.startswith(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')):\n        return False\n    if file_name.endswith('txt'):\n        return True\n    if file_name.endswith('exe'):\n        return True\n    if file_name.endswith('dll'):\n        return True\n    return False\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(file_name) > 3 and file_name.count('.') == 1 and file_name[0].isalpha() and file_name[1:3].isalpha() and file_name.split('.')[1] in ['txt', 'exe', 'dll']:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    file_name = file_name.lower()\n    if len(file_name) > 3 and file_name.find('.') > 0:\n        if file_name[0].isalpha() and file_name[file_name.find('.') + 1].isalpha():\n            if file_name[file_name.find('.') + 2:].lower() in ['txt', 'exe', 'dll']:\n                return 'Yes'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code goes here (remove pass)\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if(file_name.find('.') < 0):\n        return False\n    elif(len(file_name) > 3):\n        return False\n    elif(file_name.find('.') == 0):\n        return False\n    elif(file_name[0].isalpha()):\n        if(file_name.find('.')!= -1):\n            return False\n        else:\n            return True\n    elif(file_name.find('.') > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    lst = filter(lambda i: i%3 == 0 or i%4 == 0, lst)\n    return sum(lst)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    sum = 0\n    for i in range(0, len(lst)):\n        if i % 4 == 0:\n            sum += lst[i]*lst[i]\n        else:\n            sum += lst[i]\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if lst == []:\n        return 0\n    else:\n        total = 0\n        for i in range(len(lst)):\n            if i%3 == 0:\n                total += lst[i]**2\n            elif i%4 == 0:\n                total += lst[i]**3\n            else:\n                pass\n        return total\n    "
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if lst == []:\n        return 0\n    else:\n        output = 0\n        for i in range(len(lst)):\n            if i%3 == 0:\n                output += lst[i]*lst[i]\n            elif i%4 == 0:\n                output += lst[i]**3\n        return output\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if len(lst) == 0:\n        return 0\n    \n    new_list = []\n    for elem in lst:\n        if elem % 3 == 0:\n            new_list.append(elem*elem)\n        elif elem % 4 == 0:\n            new_list.append(elem*elem*elem)\n    \n    return sum(new_list)\n    \n    \ndef palindrome(string):\n    \"\"\"\n    This function shall check whether a given string is palindrome or not. \n    \n    Example:\n    Input = 'abba'\n    Output = True\n    \n    Input = 'abc'\n    Output = False\n    \n    Input = 'a'\n    Output = False\n    \n    Input = 'abcd'\n    Output = False\n    \"\"\"\n    \n    reversed_string = string[::-1]\n    \n    return reversed_string == string\n    \n    \ndef maximum_sum(lst):\n    \"\"\"\n    This function shall return the maximum sum of an array of integers. \n    \n    Example:\n    Input = [-5, 1, 2, -1]\n    Output = 3\n    \n    Input = [-5, 1, 2, -5, 1, -3]\n    Output = 6\n    \"\"\"\n    \n    # O(n)\n    \n    if len(lst) == 0:\n        return 0\n    \n    # O(n)\n    \n    max_sum = 0\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            current_sum = lst[i] + lst[j]\n            \n            if max_sum < current_sum:\n                max_sum = current_sum\n    \n    return max_sum\n    \n    \ndef find_sub_string(string, pattern):\n    \"\"\"\n    This function shall return the starting index of the first occurrence of the substring in the given string. \n    \n    Example:\n    Input = 'abababc', 'ab'\n    Output = 0\n    \n    Input = 'abababc', 'bc'\n    Output = 3\n    \n    Input = 'abababc', 'ab'\n    Output = 2\n    \n    Input = 'abababc', 'abc'\n    Output = -1\n    \"\"\"\n    \n    i = 0\n    j = 0\n    \n    while i < len(string) and j < len(pattern):\n        \n        if string[i] == pattern[j]:\n            j += 1\n            i += 1\n        else:\n            i += 1\n            j = 0\n            \n    if j == len(pattern):\n        return i-j\n    return -1\n    \n    \ndef test_find_sub_string():\n    \"\"\"\n    Example:\n    Input = 'abababc', 'ab'\n    Output = 0\n    \n    Input = 'abababc', 'bc'\n    Output = 3\n    \n    Input = 'abababc', 'ab'\n    Output = 2\n    \n    Input = 'abababc', 'abc'\n    Output = -1\n    \"\"\"\n    \n    assert find_sub_string('abababc', 'ab') == 0\n    assert find_sub_string('abababc', 'bc') == 3\n    assert find_sub_string('abababc', 'ab') == 2\n    assert find_sub_string('abababc', 'abc') == -1\n    assert find_sub_string('abc', 'abc') == 0\n    \n    \ndef find_odd_occurrences(lst):\n    \"\"\"\n    This function shall return an array of all odd-indexed occurrences of an integer in a given list. \n    \n    Example:\n    Input = [1,2,2,3,4,5,6,7,7,8,9]\n    Output = [2,3,7,7]\n    \n    Input = [1,2,3]\n    Output = []\n    \"\"\"\n    \n    if len(lst) == 0:\n        return []\n    \n    odd_numbers = []\n    \n    for i in range(len(lst)):\n        if i % 2!= 0:\n            odd_numbers.append(lst[i])\n    \n    return odd_numbers\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum(entry**2 if entry%3 == 0 else entry**3 for entry in lst)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3 == 0 or i%4 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    sum_squares = 0\n    for i in range(len(lst)):\n        if i%3 == 0 and i%4!= 0:\n            lst[i] = lst[i]**2\n        elif i%4 == 0 and i%3!= 0:\n            lst[i] = lst[i]**3\n        else:\n            lst[i] = lst[i]\n        \n        sum_squares += lst[i]\n    \n    return sum_squares\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # code here\n    if not lst:\n        return 0\n    lst_sum = 0\n    for entry in lst:\n        if not(entry%3 == 0) and not(entry%4 == 0):\n            lst_sum += entry ** 2\n        else:\n            lst_sum += entry ** 3\n    return lst_sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    total = 0\n    for item in lst:\n        if item%3 == 0:\n            total += item**2\n        elif item%4 == 0:\n            total += item**3\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Solution\n    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word)!= len(set(word)):\n            continue\n        else:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    words = sentence.split()\n    # TODO: Write your solution here\n    return words[0]\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not sentence:\n        return \"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    words = sentence.split(' ')\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    return''.join(sorted(word for word in sentence.split() if len(word) == 4))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #print(len(sorted(sorted(set(sentence.split()), key=len)), key=len))\n    \n    return sorted(sorted(set(sentence.split()), key=len), key=len)[0]\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    try:\n        numer, denom = x.split(\"/\")\n        numer = int(numer)\n        denom = int(denom)\n        if denom == 0:\n            return False\n        else:\n            return True\n    except Exception as e:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    try:\n        n = Fraction(n)\n        x = Fraction(x)\n        return n == x\n    except FractionException as e:\n        return False\n    \n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    x = x.replace('+', '')\n    x = x.replace('-', '')\n    x = x.replace('/', '')\n    x = x.replace('(', '')\n    x = x.replace(')', '')\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    x = int(x)\n    n = int(n)\n    if x * n == int(x * n):\n        return True\n    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if isinstance(x, str) and isinstance(n, str):\n        return True if int(x) / int(n) == int(n) and int(n)!= 0 else False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    if int(x[0]) == 0 and int(x[1]) == 0:\n        return False\n    if int(n[0]) == 0 and int(n[1]) == 0:\n        return False\n    if int(x[0]) == 0 or int(n[0]) == 0:\n        return False\n    if int(x[1]) % int(n[1])!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if \".\" in x:\n        x = float(x)\n    else:\n        x = int(x)\n    \n    if n == \"1\":\n        return True if x == 1 else False\n    elif n == \"0\":\n        return False\n    elif len(n) == 1:\n        return False\n    else:\n        n = float(n)\n        return True if x == int(x * n) and x == int(n / x) else False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    simplified = x * n\n    return str(int(simplified)) == simplified\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    try:\n        num, den = x.split('/')\n        n = int(num)\n        d = int(den)\n        return n == d\n    except:\n        return False"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    try:\n        number_x = float(x)\n        number_n = float(n)\n        if number_x == int(number_x) and number_n == int(number_n):\n            return True\n        elif number_x == 0 or number_n == 0:\n            return False\n        elif number_x!= int(number_x) or number_n!= int(number_n):\n            return False\n        else:\n            return simplify(str(number_x) + \"/\" + str(number_n), str(number_n))\n    except:\n        return False\n    "
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] + nums[j] == 0:\n                nums[i], nums[j] = nums[j], nums[i]\n            elif nums[i] + nums[j] > 0:\n                break\n            else:\n                continue\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if nums == []:\n        return []\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    nums.sort(key = lambda x: (sum(map(int, str(x))), x))\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # your code here\n    list_nums = []\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(nums, key = lambda x : x if len(str(x)) == 1 else 0)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    nums = list(nums)\n    def recur(nums, end):\n        if end >= len(nums): return\n        recur(nums, end + 1)\n        idx = end\n        while idx < len(nums) and nums[idx] == 0:\n            idx += 1\n        for i in range(idx, len(nums)):\n            if sum(nums[i:idx + 1]) > 0:\n                nums[i], nums[idx] = nums[idx], nums[i]\n        recur(nums, idx)\n    recur(nums, 0)\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(nums, key=sum_digits)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    nums.sort(key=sum)\n    return nums"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sorted_list = nums[:]\n    sorted_list.sort()\n    \n    def helper(x):\n        if x == 0:\n            return -1\n        x = str(x)\n        x = int(x[0]) + int(x[1])\n        return x\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sorted_nums = sorted(nums)\n    sorted_nums.sort(key=lambda x: sum([int(i) for i in str(x)]))\n    return sorted_nums\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum(1 for i in nums if 10 > i > 9 and i % 2 == 1)\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    oddList = []\n    count = 0\n    for i in nums:\n        if (i > 10) and (i < 100) and (i % 2!= 0) and (i % 10!= 1):\n            oddList.append(i)\n            count = count + 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    nums = list(nums)\n    count = 0\n    for i in range(len(nums)):\n        if (nums[i] > 10 and nums[i] % 2 == 1) or (nums[i] < 10 and nums[i] % 2 == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len([x for x in nums if (x > 10 and x%2 and x%10 not in [1,3,5,7,9])])\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # iterate through the list\n    for i in nums:\n        # if the first and last digits are odd\n        if (i > 10 and i % 10 % 2!= 0):\n            # return the index of the first element\n            return nums.index(i)\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Write your code here\n    count = 0\n    for i in nums:\n        if (i > 10 and (i % 2 == 1) and (i % 10 < 7)):\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for num in nums:\n        if (num > 10 and num % 2!= 0) or num > 100:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    odd_count = 0\n    greater_than_10 = 0\n    odd = False\n    for num in nums:\n        if len(num) == 2 and odd == False and odd == True and num[0] % 2!= 0 and num[1] % 2!= 0:\n            greater_than_10 += 1\n        if num > 10 and odd == True:\n            odd_count += 1\n        odd = False\n        if num % 2!= 0:\n            odd = True\n    return greater_than_10\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not nums: return 0\n    odd_num = []\n    for num in nums:\n        if isOdd(num) and num > 10: odd_num.append(num)\n    return len(odd_num)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Create the list of all multiples of 3 \n    # in the range 1..n\n    multiples = range(1, n+1)\n    # Loop over all the multiples, taking \n    # care of the multiples that are smaller \n    # than the last one\n    total_triples = 0\n    for i in range(n):\n        for j in range(i):\n            # If the current number is a multiple of 3, then add it to the total number of triples\n            if (multiples[i] % 3 == 0):\n                total_triples += 1\n            # If the current number is a multiple of 2, then add it to the total number of triples\n            elif (multiples[i] % 2 == 0):\n                total_triples += 1\n            # If the current number is a multiple of 1, then add it to the total number of triples\n            elif (multiples[i] % 1 == 0):\n                total_triples += 1\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # calculate the values\n    # how many combinations can be made\n    # in a subset of size 3\n    # of the positive integers from 0 to n\n    # as i<j<k\n    # for all i<j<k\n    # (i+j+k)%3 == 0\n    # (i*(i+1)//2)%3 == 0\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == k*(k+1)//2\n    # (i*(i+1)//2)%3 == j*(j+1)//2\n    "
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Your code here\n    a = []\n    for i in range(1, n+1):\n        a.append(i*i-i+1)\n    \n    res = 0\n    for i in range(1, n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i]+a[j]+a[k]) % 3 == 0:\n                    res += 1\n    return res\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def triple_sum(n):\n        arr = [1, 3, 7, 13, 21]\n        return triple_sum_helper(arr, n)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    def count_triples(n):\n        # n = 2, len = 4\n        #  1, 2, 3, 4\n        #  (1, 2), (2, 3), (3, 4)\n        #  count = 2 * (1 + 1 + 1) = 2 * 2\n        return sum([1 for i in range(1, n + 1) for j in range(1, n + 1) for k in range(1, n + 1) if i < j < k and (i + j + k) % 3 == 0])\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    a = list(range(1, n + 1))\n    m = n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] == m:\n                    count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    a = [1]\n    count = 0\n    while len(a) <= n:\n        if len(a) == 0 or a[-1] >= 3*len(a) - 1:\n            a.append(1)\n            count += 1\n        else:\n            x = len(a) - 1\n            while x > 0 and a[x] == a[x-1]:\n                x -= 1\n            a.append(x)\n            a[x] += 1\n            count += 1\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    return 0\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return "
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # Your code goes here\n    # Planets\n    planets = {\n    \"Mercury\": 0,\n    \"Venus\": 1,\n    \"Earth\": 2,\n    \"Mars\": 3,\n    \"Jupiter\": 4,\n    \"Saturn\": 5,\n    \"Uranus\": 6,\n    \"Neptune\": 7,\n    }\n    \n    # Orbit\n    orbits = {\n    \"Mercury\": 0,\n    \"Venus\": 1,\n    \"Earth\": 2,\n    \"Mars\": 3,\n    \"Jupiter\": 4,\n    \"Saturn\": 5,\n    \"Uranus\": 6,\n    \"Neptune\": 7,\n    }\n    \n    # Return empty tuple if any of planet1 and planet2 are not correct planet names\n    if (planet1 not in planets.keys()) or (planet2 not in planets.keys()) or \\\n    (planet1 not in orbits.keys()) or (planet2 not in orbits.keys()):\n        return ()\n    \n    # Find the orbit of planet1 and planet2\n    orbit1 = planets[planet1]\n    orbit2 = planets[planet2]\n    \n    # Find the total number of orbits\n    totalOrbit = orbit1 + orbit2\n    \n    # Calculate the distance between planet1 and planet2\n    distance = abs(orbit1-orbit2)\n    \n    # Return the planets with distance smaller than totalOrbit\n    return tuple(list(planets.keys())[list(orbits.values()).index(distance):list(orbits.values()).index(totalOrbit)])\n    "
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # input\n    planet_list = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    # processing\n    if planet1 == planet2:\n        return tuple()\n    else:\n        for i in range(len(planet_list)):\n            if planet_list[i] == planet1:\n                planet1_index = i\n                break\n        for i in range(len(planet_list)):\n            if planet_list[i] == planet2:\n                planet2_index = i\n                break\n        planet1_planet2_orbit_dist = get_orbit_dist(planet_list[planet1_index], planet_list[planet2_index])\n        return (planet_list[planet1_index], planet_list[planet2_index]) if planet1_planet2_orbit_dist <= get_orbit_dist(planet_list[planet1_index], planet_list[planet2_index]) else (planet_list[planet2_index], planet_list[planet1_index])\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    #rpl. Planet for each orbiting planet\n    pl1, pl2 = planet1, planet2\n    #get all planets in orbital path\n    orb = Orbit.orbiting_planets(pl1, pl2)\n    #sort the planets\n    orb = sorted(orb)\n    #create and return tuple\n    return orb\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    planet_list = planets_orbit()\n    planet1 = planet_list[planet1]\n    planet2 = planet_list[planet2]\n    return planet_list[planet1].orbiting(planet_list[planet2])\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (sorted([planet for planet in planets if planets.index(planet) >= planets.index(planet1) and planets.index(planet) <= planets.index(planet2)]))\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # YOUR CODE HERE\n    \n    \n    #planet1 = planet1.upper()\n    #planet2 = planet2.upper()\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    planet1 = planet1.title()\n    planet2 = planet2.title()\n    planet_list = []\n    if planet1 == 'Mercury':\n        planet_list.append('Venus')\n    if planet1 == 'Venus':\n        planet_list.append('Earth')\n    if planet1 == 'Earth':\n        planet_list.append('Mars')\n    if planet1 == 'Mars':\n        planet_list.append('Jupiter')\n    if planet1 == 'Jupiter':\n        planet_list.append('Saturn')\n    if planet1 == 'Saturn':\n        planet_list.append('Uranus')\n    if planet1 == 'Uranus':\n        planet_list.append('Neptune')\n    if planet1 == 'Neptune':\n        planet_list.append('Mercury')\n    \n    planet_list_2 = []\n    planet_list_2.append(planet2)\n    planet_list_2.append(planet1)\n    planet_list_2.sort()\n    \n    if planet_list_2 == planet_list:\n        return planet_list\n    else:\n        return planet_list\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    data = {\n        'Mercury': (2358, 'Uranus'),\n        'Venus': (2408, 'Earth'),\n        'Earth': (2310, 'Mercury', 'Venus'),\n        'Mars': (3359, 'Jupiter'),\n        'Jupiter': (0, 'Mars', 'Earth'),\n        'Saturn': (6027, 'Uranus'),\n        'Uranus': (2543, 'Saturn', 'Neptune'),\n        'Neptune': (10783, 'Saturn', 'Uranus'),\n    }\n    \n    try:\n        return tuple(sorted(data[planet1], key=lambda planet: distance(planet, planet2)))\n    except KeyError:\n        return tuple()\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    orbit1 = get_orbit(planet1)\n    orbit2 = get_orbit(planet2)\n    \n    if orbit1 == -1 or orbit2 == -1:\n        return tuple()\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    tuple_list = []\n    for key in planets_orbital.keys():\n        if planets_orbital[key] == planet1:\n            tuple_list.append(key)\n    for key in planets_orbital.keys():\n        if planets_orbital[key] == planet2:\n            tuple_list.append(key)\n    return tuple_list\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    new_list = []\n    for item in lst:\n        if len(item) > 1:\n            new_list.append(item)\n    new_list.sort()\n    return new_list\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    final_list = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) == len(lst[j]):\n                if lst[i] > lst[j]:\n                    temp = lst[i]\n                    lst[i] = lst[j]\n                    lst[j] = temp\n            else:\n                if len(lst[i]) > len(lst[j]):\n                    temp = lst[i]\n                    lst[i] = lst[j]\n                    lst[j] = temp\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    result = []\n    for i in lst:\n        result.append(i)\n        if len(i) > 2:\n            result.remove(i)\n    result.sort()\n    return result\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    new_lst = []\n    for word in lst:\n        if len(word) == len(lst[0]):\n            new_lst.append(word)\n        else:\n            if len(word) % 2 == 1:\n                new_lst.append(word)\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your Code Here\n    # print(sorted_list_sum([\"ab\",\"a\",\"aaa\",\"cd\"]))\n    list_dict = {}\n    for i in lst:\n        if len(i) not in list_dict:\n            list_dict[len(i)] = i\n        else:\n            list_dict[len(i)] = list_dict[len(i)] + \",\" + i\n    list_dict = sorted(list_dict.items())\n    res = []\n    for i in list_dict:\n        res.append(i[1])\n    return res\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    print(f\"Before: {lst}\")\n    for i in range(len(lst)):\n        if len(lst[i]) % 2!= 0:\n            del lst[i]\n    print(f\"After: {lst}\")\n    return sorted(lst, key=len)\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = []\n    for w in lst:\n        if len(w) == len(w[0]):\n            s.append(w)\n        else:\n            w.sort()\n            for i in w:\n                s.append(i)\n    s.sort()\n    return s\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    lst.sort(key=lambda x: len(x))\n    for i in range(len(lst)):\n        if len(lst[i]) % 2!= 0:\n            del lst[i]\n    lst.sort()\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sorted_list = []\n    for i in range(len(lst)):\n        if len(lst[i]) % 2 == 0:\n            continue\n        else:\n            sorted_list.append(lst[i])\n    sorted_list.sort()\n    return sorted_list\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == x:\n        return x\n    elif n == y:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x if n % x == 0 else y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 2:\n        return x\n    elif n == 3:\n        return y\n    elif n % 2 == 0 or n % 3 == 0:\n        return x\n    else:\n        return y\n    \ndef prime(n):\n    \"\"\"A simple program which checks if n is prime or not.\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 1:\n        return x\n    else:\n        return y\n    "
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        return y\n    return x\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x if n % x == 0 else y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n % x == 0 or n % y == 0:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n in primes:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x if n in prime_numbers else y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n % 2!= 0:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Checks that the list is not empty\n    if len(lst) == 0:\n        return 0\n    \n    # Return the sum of squared numbers\n    return sum([x**2 for x in lst if x%2!= 0])\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Create a list of the absolute value of the elements in the list\n    # Return the sum of the squares of the negative numbers in the list\n    if len(lst) == 0:\n        return 0\n    else:\n        lst_abs = list(abs(x) for x in lst)\n        return sum(x * x for x in lst_abs if x < 0)\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not lst:\n        return 0\n    sum_odd = 0\n    for num in lst:\n        if num%2 == 1:\n            sum_odd += num**2\n    return sum_odd\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not lst:\n        return 0\n    # *get_sum_of_squares([1, 3, 2, 0]) should return 1 + 9 + 0 + 0 = 10\n    # *get_sum_of_squares([-1, -2, 0]) should return 0\n    # *get_sum_of_squares([9, -2]) should return 81\n    # *get_sum_of_squares([0]) should return 0\n    sum_of_squares = sum([num ** 2 for num in lst if num % 2!= 0])\n    return sum_of_squares"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum = 0\n    for item in lst:\n        if item % 2!= 0:\n            sum += item**2\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum(x**2 for x in lst if (x > 0 and not isinstance(x, int)) )\n    \ndouble_the_difference([9, -2])\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return 0\n    odds = 0\n    for num in lst:\n        if num % 2!= 0:\n            odds += num**2\n    return odds\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum([x**2 for x in lst if x > 0 and int(x) % 2!= 0])\n    "
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    evens = 0\n    odds = 0\n    for i in lst:\n        if i > 0 and i % 2 == 0:\n            evens += i\n        elif i > 0 and i % 2 == 1:\n            odds += i\n    return evens + odds\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    numbers = []\n    for n in lst:\n        try:\n            numbers.append(int(n))\n        except ValueError:\n            continue\n    odd_numbers = sum([x for x in numbers if x%2!= 0])\n    return odd_numbers\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [0 if guess[i] == score else abs(guess[i] - score) for i,score in enumerate(game)]\n    \n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    #just a base case\n    if len(guess) == 0 or len(guess)!= len(game):\n        return [0]*len(guess)\n    \n    if len(guess) == 1 and guess[0]!= game[0]:\n        return[0]\n    #now we can make a guess\n    new_guess = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            new_guess.append(0)\n        else:\n            new_guess.append(abs(guess[i] - game[i]))\n    return new_guess\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # your code here\n    \n    diff = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(guess[i]-game[i]))\n    return diff\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return guess\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [ abs(guess[i]-game[i]) for i in range(len(guess)) ]\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # create the list of the differences\n    result = []\n    for i in range(len(guess)):\n        result.append(abs(guess[i] - game[i]))\n    \n    return result\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    temp = class_name.upper()\n    temp = temp.replace(\"_\", \"\")\n    list_temp = []\n    for i in extensions:\n        if i[0].upper() == temp:\n            list_temp.append(i)\n    list_temp.sort(key=lambda x: x.replace(\"_\", \"\").count('_'), reverse=True)\n    return list_temp[0]\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    return class_name + \".\" + max(extensions, key=lambda ext: getattr(__import__(ext), class_name))\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    class_name_upper = class_name.upper()\n    for extension in extensions:\n        extension_upper = extension.upper()\n        if len(extension_upper) > len(class_name_upper):\n            if '.' in class_name_upper:\n                return class_name_upper + extension_upper\n            else:\n                return class_name + '.' + extension_upper\n        if len(extension_upper) == len(class_name_upper) and extension_upper!= class_name_upper:\n            if '.' in class_name_upper:\n                return class_name_upper + extension_upper\n            else:\n                return class_name + '.' + extension_upper\n    return '%s.%s' % (class_name, extensions[0])\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Write your code here\n    extension_list = []\n    for extension in extensions:\n        extension_list.append(extension.title())\n    class_dict = dict.fromkeys(extension_list)\n    for extension in extension_list:\n        class_dict[extension] = 0\n    for extension in extensions:\n        class_dict[extension.title()] += 1\n    strongest_extension = ''\n    strength = 0\n    for key, value in class_dict.items():\n        if value > strength:\n            strength = value\n            strongest_extension = key\n    return class_name + '.' + strongest_extension\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    \n    \n    # Your code here\n    return class_name\n    \n    \n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    import re\n    \n    name = class_name.split(\".\")\n    class_name = class_name.replace('.', '')\n    \n    list_name = []\n    list_extension = []\n    \n    for extension in extensions:\n        name_extension = extension.split(\".\")\n        extension = extension.replace('.', '')\n        list_name.append(name_extension[0])\n        list_extension.append(extension)\n        \n    all_name = set(list_name)\n    all_extension = set(list_extension)\n    \n    all_name = list(all_name)\n    all_extension = list(all_extension)\n    \n    def comp(x, y):\n        \n        first = 0\n        second = 0\n        \n        # if both are upper case\n        if x.isupper() == True and y.isupper() == True:\n            first = 1\n        # if both are lower case\n        elif x.islower() == True and y.islower() == True:\n            first = 1\n        # if one is upper and other is lower\n        elif x.isupper() == True and y.islower() == True:\n            first = 1\n        # if one is lower and other is upper\n        elif x.islower() == True and y.isupper() == True:\n            first = 1\n        \n        # if both are lower\n        elif x.islower() == True and y.islower() == True:\n            first = 1\n        # if one is upper and other is lower\n        elif x.isupper() == True and y.islower() == False:\n            first = 1\n        # if one is lower and other is upper\n        elif x.islower() == True and y.isupper() == False:\n            first = 1\n        else:\n            first = 0\n            \n        second = y.upper() - x.upper()\n        \n        if second > 0:\n            second = 1\n        elif second < 0:\n            second = -1\n        else:\n            second = 0\n        \n        return first + second\n    \n    for extension in all_extension:\n        for name in all_name:\n            if comp(name, extension) == 1:\n                return class_name + \".\" + extension\n                \n                \ndef Retrieve_URL(url, word):\n    \"\"\"You will be given a URL and the word that you need to return. The word will\n    be part of the URL, and you need to return the URL with the word.\n    You will not be given any URL.\n    Example:\n    url = 'https://www.washingtonpost.com/news/the-washington-post/wp/2016/08/06/austin-seems-to-have-a-new-wave-of-news/'\n    word = 'news'\n    Retrieve_URL(url, word) == 'https://www.washingtonpost.com/news/the-washington-post/wp/2016/08/06/austin-seems-to-have-a-new-wave-of-news/'\n    \"\"\"\n    import re\n    \n    url = url.replace('\\n', '')\n    url = url.replace('\\r', '')\n    \n    url_word = re.search(word, url)\n    \n    return url[url_word.span()[0]:url_word.span()[1]]\n    \n    \ndef Retrieve_URL_2(url, word):\n    \"\"\"You will be given a URL and the word that you need to return. The word will\n    be part of the URL, and you need to return the URL with the word.\n    You will not be given any URL.\n    Example:\n    url = 'https://www.washingtonpost.com/news/the-washington-post/wp/2016/08/06/austin-seems-to-have-a-new-wave-of-news/'\n    word = 'news'\n    Retrieve_URL_2(url, word) == 'https://www.washingtonpost.com/news/the-washington-post/wp/2016/08/06/austin-seems-to-have-a-new-wave-of-news/'\n    \"\"\"\n    import re\n    \n    url "
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # for each extension in the extensions, check if it has the same length as the class name\n    if len(extensions)==0:\n        return class_name\n    else:\n        for extension in extensions:\n            if len(extension)==len(class_name):\n                if extension.find(class_name)<class_name.find(extension):\n                    return extension\n        return class_name\n    "
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # your code here\n    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    f = 0\n    key = ''\n    for i in range(len(extensions)):\n        if extensions[i].istitle():\n            if extensions[i].find('.') == -1:\n                if extensions[i].find('_') == -1:\n                    if extensions[i].isupper():\n                        f = f + 1\n                        key = extensions[i]\n    if f == 0:\n        return 'None'\n    for i in range(len(extensions)):\n        if extensions[i].istitle():\n            if extensions[i].find('.') == -1:\n                if extensions[i].find('_') == -1:\n                    if extensions[i].isupper():\n                        f = f + 1\n                        key = extensions[i]\n    if f == 0:\n        return 'None'\n    if extensions[0].istitle():\n        if extensions[0].find('.') == -1:\n            if extensions[0].find('_') == -1:\n                if extensions[0].isupper():\n                    f = f + 1\n                    key = extensions[0]\n    if f == 0:\n        return 'None'\n    if extensions[0].istitle():\n        if extensions[0].find('.') == -1:\n            if extensions[0].find('_') == -1:\n                if extensions[0].isupper():\n                    f = f + 1\n                    key = extensions[0]\n    if f == 0:\n        return 'None'\n    if extensions[0].istitle():\n        if extensions[0].find('.') == -1:\n            if extensions[0].find('_') == -1:\n                if extensions[0].isupper():\n                    f = f + 1\n                    key = extensions[0]\n    if f == 0:\n        return 'None'\n    if extensions[0].istitle():\n        if extensions[0].find('.') == -1:\n            if extensions[0].find('_') == -1:\n                if extensions[0].isupper():\n                    f = f + 1\n                    key = extensions[0]\n    if f == 0:\n        return 'None'\n    if extensions[0].istitle():\n        if extensions[0].find('.') == -1:\n            if extensions[0].find('_') == -1:\n                if extensions[0].isupper():\n                    f = f + 1\n                    key = extensions[0]\n    if f == 0:\n        return 'None'\n    if extensions[0].istitle():\n        if extensions[0].find('.') == -1:\n            if extensions[0].find('_') == -1:\n                if extensions[0].isupper():\n                    f = f + 1\n                    key = extensions[0]\n    if f == 0:\n        return 'None'\n    if extensions[0].istitle():\n        if extensions[0].find('.') == -1:\n            if extensions[0].find('_') == -1:\n                if extensions[0].isupper():\n                    f = f + 1\n                    key = extensions[0]\n    if f == 0:\n        return 'None'\n    if extensions[0].istitle():\n        if extensions[0].find('.') == -1:\n            if extensions[0].find('_') == -1:\n                if extensions[0].isupper():\n                    f = f + 1\n                    key = extensions[0]\n    if f == 0:\n        return 'None'\n    if extensions[0].istitle():\n        if extensions[0].find('.') == -1:\n            if extensions[0].find('_') == -1:\n                if extensions[0].isupper():\n                    f = f + 1\n                    key = extensions[0]\n    if f == 0:\n        return 'None'\n    if extensions[0].istitle():\n        if extensions[0].find('.') == -1:\n            if extensions[0].find('_') == -1:\n                if extensions[0].isupper():\n                    f = f + 1\n                    key = extensions[0]\n    if f == 0:\n        return 'None'\n    if extensions[0].istitle():\n        if extensions[0].find('.') == -1:\n            if extensions[0].find('_') == -1:\n                if extensions[0].isupper():\n                    "
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return class_name + \".StrongestExtensionName\"\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if b in a or a in b:\n        return True\n    else:\n        return False"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(a)-len(b)+1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    #return a in b or b in a\n    if len(a) == len(b):\n        return a in b or b in a\n    else:\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return b in a or b in a[:len(b)] + a[-len(b):]\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #l=len(a)\n    #if len(a)==len(b):\n    #    return True\n    #else:\n    #    return False\n    return a in b or a[::-1] in b\ndef dp_cycpattern(a, b, m, n):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    if m==1 or n==1:\n        return a==b\n    return a in b or a[::-1] in b\n    \ndef exe_cycpattern(a, b, m, n):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    if m==1 or n==1:\n        return a==b\n    return a in b or a[::-1] in b\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(b) < len(a):\n        a,b=b,a\n    b = b + a\n    a = a[::-1]\n    if a == b:\n        return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    rotations = []\n    for i in range(1,len(a)+1):\n        rotations.append(a[i-1:] + a[0:i-1])\n    return b in rotations\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = a.lower()\n    t = b.lower()\n    return (s in t) or (t in s)\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (b in a[::-1] or b in a + a[-1] + a[:-1])\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    b = \"\".join(sorted(list(b)))\n    a = \"\".join(sorted(list(a)))\n    if b in a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    even = 0\n    odd = 0\n    for n in str(num):\n        if int(n)%2==0:\n            even+=1\n        else:\n            odd+=1\n    return even, odd\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    even = 0\n    odd = 0\n    num_str = str(num)\n    for i in range(len(num_str)):\n        if i%2==0:\n            even +=1\n        else:\n            odd +=1\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return (len([num for num in str(num) if num % 2 == 0]), len([num for num in str(num) if num % 2!= 0]))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    return (num % 10 % 2, num // 10 % 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (num % 10, num // 10 % 10)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (len([i for i in str(num) if i % 2 == 0]), len([i for i in str(num) if i % 2!= 0]))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    num = str(num)\n    even = odd = 0\n    for n in num:\n        if int(n) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if num > 0:\n        even = 0\n        odd = 0\n        while num > 0:\n            if num % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            num = num // 10\n        return even, odd\n    elif num < 0:\n        even = 0\n        odd = 0\n        while num > 0:\n            if num % 2 == 0:\n                odd += 1\n            else:\n                even += 1\n            num = num // 10\n        return even, odd\n    else:\n        return 0, 0\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    evens = 0\n    odds = 0\n    while num > 0:\n        num = num // 10\n        if num % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # return 0, 0 if num < 0\n    if num < 0:\n        return 0, 0\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    roman_roman_map = {1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix', 10: 'x',\n                       11: 'xi', 12: 'xii', 13: 'xiii', 14: 'xiv', 15: 'xv', 16: 'xvi', 17: 'xvii', 18: 'xviii',\n                       19: 'xix'}\n    roman_num_map = {'x': 1, 'i': 1, 'ii': 2, 'iii': 3, 'iv': 4, 'v': 5, 'vi': 6, 'vii': 7, 'viii': 8, 'ix': 9,\n                     'xi': 10, 'xii': 11, 'xiii': 12, 'xiv': 13, 'xv': 14, 'xvi': 15, 'xvii': 16, 'xviii': 17,\n                     'xix': 18}\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # check if number is valid\n    if not isinstance(number, int) or number < 1:\n        raise ValueError(\"Invalid Input\")\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not isinstance(number, int):\n        raise ValueError(\"The input must be an int, but given {}.\".format(type(number)))\n    if number > 1000 or number < 1:\n        raise ValueError(\"The input must be an int between 1 and 1000, but given {}.\".format(number))\n    val = number\n    roman = \"\"\n    while val >= 1:\n        if val == 1:\n            roman = roman + \"I\"\n        elif val == 5:\n            roman = roman + \"V\"\n        elif val == 10:\n            roman = roman + \"X\"\n        elif val == 50:\n            roman = roman + \"L\"\n        elif val == 100:\n            roman = roman + \"C\"\n        elif val == 500:\n            roman = roman + \"D\"\n        elif val == 1000:\n            roman = roman + \"M\"\n        else:\n            roman = roman + \"I\"\n        val = val - 1\n    return roman\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    numbers = ['','m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    decimal = 1000\n    value = 0\n    while number >= decimal:\n        for i, number in enumerate(str(number)[::-1]):\n            value += int(number) * decimal\n        decimal /= 10\n        value -= int(number) * decimal\n    return numbers[value]\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if type(number)!= int:\n        raise TypeError('Inputs are not integers.')\n    if number < 1 or number > 1000:\n        raise ValueError('Inputs out of range (1 <= num <= 1000).')\n    if number == 0:\n        return 'i'\n    if number == 1:\n        return 'i'\n    if number < 4:\n        return str(number)\n    if number < 100:\n        return 'il' + int_to_mini_roman(number-50)\n    if number < 400:\n        return 'il' + int_to_mini_roman(number-100)\n    if number < 1000:\n        return 'il' + int_to_mini_roman(number-500)\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert 1 <= number <= 1000, 'Number should be between 1 and 1000'\n    numbers = {\n    1: 'i',\n    4: 'IV',\n    5: 'V',\n    9: 'IX',\n    10: 'X',\n    40: 'XL',\n    50: 'L',\n    90: 'XC',\n    100: 'C',\n    400: 'CD',\n    500: 'D',\n    900: 'CM',\n    1000: 'M'\n    }\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    a_list = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"]\n    roman_numerals = {\"x\": [\"\"], \"i\": [\"\"], \"ii\": [\"\"], \"iii\": [\"\"], \"iv\": [\"\"], \"v\": [\"\"], \"vi\": [\"\"], \"vii\": [\"\"], \"viii\": [\"\"], \"ix\": [\"\"], \"xii\": [\"\"], \"xiii\": [\"\"], \"xiv\": [\"\"], \"xv\": [\"\"], \"xvi\": [\"\"]}\n    roman_numerals_sorted = {\"x\": [\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"], \"i\": [\"x\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"], \"ii\": [\"x\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"], \"iii\": [\"x\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"], \"iv\": [\"x\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"], \"v\": [\"x\", \"ii\", \"iii\", \"iv\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"], \"vi\": [\"x\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"], \"vii\": [\"x\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"], \"viii\": [\"x\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"], \"ix\": [\"x\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"], \"x\": [\"x\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"xii\", \"xiii\", \"xiv\", \"xv\", \"xvi\", \"xvi\"], \"xii\": [\"x\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"], \"xiii\": [\"x\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"], \"xiv\": [\"x\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"], \"xv\": [\"x\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"], \"xvi\": [\"x\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"], \"xiiii\": [\"x\", \"iiii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\"], \"xiix\": [\"x\", \"ix\", \"xii\", \"xiii\", \"xiv\", \"xv\", \"xvi\", \"xiiii\", \"xiii\", \"xivi\", \"xivii\", \"xiviii\", \"xiviv\", \"xivv\", \"xivvi\", \"xivvii\", \"xivviii\", \"xivix\", \"xix\"], \"xiixi\": [\"x\", \"ix\", \"xii\", \"xiii\", \"xiv\", \"xv\", \"xvi\", \"xiiii\", \"xiii\", \"xivi\", \"xivii\", \"xiviii\", \"xiviv\", \"xivv\", \"xivvi\", \"xivvii\", \"xivviii\", \"xivix\", \"xix\"], \"xixi\": [\"x\", \"ix\", \"xii\", \"xiii\", \"xiv\", \"xv\", \"xvi\", \"xiiii\", \"xiii\", \"xivi\", \"xivii\", \"xiviii\", \"xiviv\", \"xivv\", \"xivvi\", \"xivvii\", \"xivviii\", \"xivix\", \"xix\"], \"xi"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if number == 0:\n        return '0'\n    roman_map = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    return roman_map[min(number, 1000)] + int_to_mini_roman(number - roman_map[min(number, 1000)])\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    roman_nums = {1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M'}\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if number == 0:\n        return \"\"\n    dict_num = {0: \"\", 1: \"i\", 2: \"ii\", 3: \"iii\", 4: \"iv\", 5: \"v\", 6: \"vi\", 7: \"vii\", 8: \"viii\", 9: \"ix\", 10: \"x\", 11: \"xi\", 12: \"xii\", 13: \"xiii\", 14: \"xiv\", 15: \"xv\", 16: \"xvi\", 17: \"xvii\", 18: \"xviii\", 19: \"xix\"}\n    s = \"\"\n    for i in range(len(dict_num.keys())):\n        if number >= dict_num.get(i):\n            s += dict_num.get(i)\n            number -= dict_num.get(i)\n    return s\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return abs(c * sqrt(3) / 2 - a / 2 - b / 2) < 1e-7\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Calculate the semi-perimeter of the triangle.\n    a_s = a / 2\n    b_s = b / 2\n    c_s = c / 2\n    \n    # Calculate the semi-perimeter of the triangle.\n    s = (a + b + c) / 2\n    \n    # Calculate the area of the triangle using Heron's formula.\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Check if the semi-perimeter of the triangle is equal to the area of the\n    # triangle.\n    return area == s / 2\n    "
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if math.pow(a, 2) + math.pow(b, 2) == math.pow(c, 2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #angle a\n    a_rad = math.atan(a/b)\n    a_deg = math.degrees(a_rad)\n    a_int = int(a_deg)\n    if a_deg == 90:\n        a_int = 90\n    if a_deg == -90:\n        a_int = -90\n    #angle b\n    b_rad = math.atan(c/a)\n    b_deg = math.degrees(b_rad)\n    b_int = int(b_deg)\n    if b_deg == 90:\n        b_int = 90\n    if b_deg == -90:\n        b_int = -90\n    #angle c\n    c_rad = math.atan(b/c)\n    c_deg = math.degrees(c_rad)\n    c_int = int(c_deg)\n    if c_deg == 90:\n        c_int = 90\n    if c_deg == -90:\n        c_int = -90\n    return a_int == b_int and b_int == c_int\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # triangle has equal sides\n    if a == b == c:\n        return False\n    # triangle has only one side\n    elif a == b or b == c or a == c:\n        return True\n    # triangle has two equal sides\n    elif a == b == c == a or a == b == c == b or a == c == b == c:\n        return True\n    # triangle has neither equal sides nor equal sides\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if (a**2 + b**2) == (c**2):\n        return True\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if abs(a**2 + b**2 - c**2) < 0.1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (a * a + b * b == c * c) or (a * a + c * c == b * b)\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    my_dict = {}\n    for i in words:\n        count = 0\n        for k in i:\n            if k in my_dict:\n                count += 1\n            else:\n                my_dict[k] = count\n    if len(my_dict) == 0:\n        return \"\"\n    for k, v in my_dict.items():\n        if v == max(my_dict.values()):\n            return k\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    max_count = 0\n    max_word = None\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    dict_words = {}\n    max_length = 0\n    max_word = ''\n    for word in words:\n        if word in dict_words.keys():\n            dict_words[word] += 1\n        else:\n            dict_words[word] = 1\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    max_char = 0\n    char_set = set()\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_char:\n            max_char = len(word)\n            max_word = word\n        for char in word:\n            if char not in char_set:\n                char_set.add(char)\n            else:\n                char_set.remove(char)\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    words = list(words)\n    max_unique = 0\n    max_unique_word = \"\"\n    \n    for word in words:\n        unique_word = set(word)\n        if max_unique < len(unique_word):\n            max_unique = len(unique_word)\n            max_unique_word = word\n        \n    return max_unique_word"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    max_num = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_num:\n            max_word = word\n            max_num = len(word)\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return max(words, key=lambda x: len(set(x)))\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    max_words = ''\n    for word in words:\n        unique_words = set(word)\n        if len(unique_words) > len(max_words):\n            max_words = word\n    return max_words\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = words[0]\n    max_count = len(words[0])\n    for word in words:\n        if len(word) > max_count:\n            result = word\n            max_count = len(word)\n    return result\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max_word = \"\"\n    if len(words) == 1:\n        return words[0]\n    elif len(words) > 1:\n        for word in words:\n            count = 0\n            for letter in word:\n                if letter not in max_word:\n                    count += 1\n                    max_word = word\n        return max_word\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    number += need - remaining\n    remaining = need - remaining\n    if number < 0:\n        number = 0\n        remaining = 0\n    return number, remaining\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    total = number\n    while need > remaining:\n        need = need - remaining\n        remaining = remaining + total\n        total = total - 1\n    return total, remaining\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # your code here\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if number == 0:\n        return (0, 0)\n    if remaining < need:\n        return (need - remaining, remaining)\n    else:\n        return (need, 0)\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return eat_recursive(number, need, remaining, 0, 0)\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if need > remaining:\n        return [0, 0]\n    if need <= number:\n        return [need, remaining-need]\n    if need > number:\n        return [need-number, remaining]\n    return [0, 0]\n    \ndef sum_evens(nums):\n    \"\"\"\n    Given a list of numbers, return a new list that contains only the elements from nums that are divisible by 2,\n    in the original order.\n    \n    Example:\n    * sum_evens([1,2,3,4,5]) -> [2,4,6]\n    * sum_evens([2,2,2,2]) -> [4]\n    * sum_evens([2,2,2,1,2]) -> [4,2]\n    * sum_evens([3,4,5]) -> []\n    \n    Variables:\n    @nums : list\n        the list of numbers to sum up.\n    \n    Constrain:\n    * 0 <= nums <= 1000\n    \n    Have fun :)\n    \"\"\"\n    if nums == []:\n        return []\n    if nums == [1]:\n        return [2]\n    if nums == [2]:\n        return [4]\n    return [x for x in nums if x % 2 == 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if number <= 0:\n        return []\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if number < need:\n        return [need - number, need - number]\n    elif number == need:\n        return [remaining, 0]\n    else:\n        return [need - number, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if number >= need:\n        # eat carrots, eat remaining\n        remaining = remaining - need\n        return [need, remaining]\n    # eat carrots, eat remaining\n    remaining = remaining - number\n    return [number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if number == 0:\n        return [need, remaining]\n    elif need <= remaining:\n        return [number - need, remaining - need]\n    elif need > remaining:\n        return [number, remaining]\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = 0\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #result = operator[0]\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        else:\n            result //= operand[i]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    # This nested loop executes the basic algebra operations.\n    for op, operand in zip(operator, operand):\n        # We get the result of the basic algebric operations.\n        res = basic_algebra(op, operand)\n    \n    # We get the result of the algebric operation based on the function call.\n    return getattr(res, 'calculate', lambda: \"Invalid operation.\")()\n    \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(operator)!= len(operand) - 1:\n        return \"ERROR: operator list length does not match operand list length minus one.\"\n    if not isinstance(operator, list):\n        return \"ERROR: operator is not a list.\"\n    if not isinstance(operand, list):\n        return \"ERROR: operand is not a list.\"\n    for index in range(len(operator)):\n        if operator[index] not in ('+', '-', '*', '//', '**'):\n            return \"ERROR: operator at index {} is not recognized.\".format(index)\n    result = []\n    for index in range(len(operand)):\n        if operator[index] == '+':\n            result.append(operand[index] + operand[index + 1])\n        elif operator[index] == '-':\n            result.append(operand[index] - operand[index + 1])\n        elif operator[index] == '*':\n            result.append(operand[index] * operand[index + 1])\n        elif operator[index] == '//':\n            result.append(operand[index] // operand[index + 1])\n        else:\n            result.append(operand[index] ** operand[index + 1])\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result = result + operand[i]\n        elif operator[i-1] == '-':\n            result = result - operand[i]\n        elif operator[i-1] == '*':\n            result = result * operand[i]\n        elif operator[i-1] == '//':\n            result = result // operand[i]\n        elif operator[i-1] == '**':\n            result = result ** operand[i]\n        else:\n            print('Invalid operator')\n            break\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #print(operator)\n    #print(operand)\n    res = 0\n    #print(type(operand))\n    #print(type(operator))\n    if operator == '+':\n        for i in range(len(operand)):\n            #print(type(operand[i]))\n            res += operand[i]\n        #print(res)\n    elif operator == '-':\n        for i in range(len(operand)):\n            #print(type(operand[i]))\n            res += operand[i]\n        #print(res)\n    elif operator == '*':\n        for i in range(len(operand)):\n            #print(type(operand[i]))\n            res += operand[i]\n        #print(res)\n    elif operator == '/':\n        for i in range(len(operand)):\n            #print(type(operand[i]))\n            res += operand[i]\n        #print(res)\n    elif operator == '**':\n        for i in range(len(operand)):\n            #print(type(operand[i]))\n            res += operand[i]\n        #print(res)\n    return res\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i - 1] == '+':\n            result += operand[i]\n        elif operator[i - 1] == '-':\n            result -= operand[i]\n        elif operator[i - 1] == '*':\n            result *= operand[i]\n        elif operator[i - 1] == '/':\n            if operand[i]!= 0:\n                result //= operand[i]\n        elif operator[i - 1] == '^':\n            result **= operand[i]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # <IMP>\n    # write your code here\n    #raise NotImplementedError('You must implement this function.')\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #print('=====algebra========')\n    #print(operator)\n    #print(operand)\n    len_operator = len(operator)\n    len_operand = len(operand)\n    #print(len_operator)\n    #print(len_operand)\n    #print(type(operand))\n    if len_operator == len_operand:\n        #print('the len operator is the len operand')\n        #print(len_operator)\n        #print(len_operand)\n        res = operand[0]\n        #print(res)\n        for i in range(1, len_operator):\n            #print('i')\n            #print(i)\n            if operator[i] == '+':\n                #print('i+1')\n                #print(i+1)\n                res += operand[i+1]\n            elif operator[i] == '-':\n                #print('i+1')\n                #print(i+1)\n                res -= operand[i+1]\n            elif operator[i] == '*':\n                #print('i+1')\n                #print(i+1)\n                res *= operand[i+1]\n            elif operator[i] == '/':\n                #print('i+1')\n                #print(i+1)\n                res //= operand[i+1]\n            elif operator[i] == '^':\n                #print('i+1')\n                #print(i+1)\n                res = res ** operand[i+1]\n            else:\n                return 0\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if operator[0] == '+':\n        return int(operator[1]) + int(operand[0]) + int(operand[1])\n    elif operator[0] == '-':\n        return int(operator[1]) - int(operand[0]) - int(operand[1])\n    elif operator[0] == '*':\n        return int(operator[1]) * int(operand[0]) * int(operand[1])\n    elif operator[0] == '/':\n        return int(operator[1]) // int(operand[0]) // int(operand[1])\n    else:\n        return int(operator[1]) ** int(operand[0]) ** int(operand[1])\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not s:\n        return s\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        elif s[i].isspace():\n            s[i] =''\n    return \"\".join(s)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = s.lower()\n    return \"\".join(map(lambda c:c.upper() if c.isalpha() else c.lower(),s))\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    \n    return \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s = s.replace(' ', '')\n    if s:\n        if s[0].isalpha():\n            s = s[::-1]\n    return s\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n            result += s[i]\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not s:\n        return s\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n    return \"\".join(s)\n    "
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    string = list(s)\n    for i in range(len(string)):\n        if string[i].isalpha():\n            if string[i].islower():\n                string[i] = string[i].upper()\n            else:\n                string[i] = string[i].lower()\n    return ''.join(string)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if s == \"\":\n        return s\n    else:\n        x = \"\"\n        if s[0].isalpha():\n            if s[0].isupper():\n                x += s[0].lower()\n            else:\n                x += s[0].upper()\n            x += solve(s[1:])\n        else:\n            x += solve(s[1:])\n            x += s[0]\n        return x\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if \"a\" in s:\n        s = s.lower() if s[0].isalpha() else s.upper()\n    return s[::-1] if s else s[::-1]\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if text:\n        return hashlib.md5(text.encode('utf8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    hash_object = hashlib.md5(text.encode('utf-8'))\n    result = hash_object.hexdigest()\n    if result == '':\n        return None\n    return result\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if text == '':\n        return None\n    m = hashlib.md5(text.encode('utf-8'))\n    return m.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # TODO: Improve this to be more efficient.\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(text) == 0:\n        return None\n    return md5(text.encode('utf-8')).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(text) > 0:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    return None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    return range(a, b+1)\n    \nprint(generate_integers(2, 8))\nprint(generate_integers(8, 2))\nprint(generate_integers(10, 14)"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # check for negatives\n    if a < 0 or b < 0:\n        raise ValueError(\"Expecting non-negative integers\")\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    numbers = []\n    for n in range(a, b + 1):\n        if n % 2 == 0:\n            numbers.append(n)\n    return numbers\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return list(range(a, b+1, 2))"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted([i for i in range(a, b + 1) if i % 2 == 0])\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return range(a, b+1)[::2]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(range(a, b + 1, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return range(a, b+1, 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    list1 = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            list1.append(i)\n    return list1\n"
    }
]