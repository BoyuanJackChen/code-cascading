[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2 and elem not in shared_elements:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for element in test_tup1:\n        if element in test_tup2:\n            return element"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # get the lists of elements from the input tuples\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # create an empty list to store the shared elements\n    shared_list = []\n    # iterate through the lists and compare each element\n    for i in list1:\n        if i in list2:\n            shared_list.append(i)\n    # return the shared elements as a tuple\n    return tuple(shared_list)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # get the lists from the tuple\n    list1 = test_tup1[0]\n    list2 = test_tup1[1]\n    # create an empty set to store the shared elements\n    shared_set = set()\n    # iterate over the first list and check if the element exists in the second list\n    for elem in list1:\n        if elem in list2:\n            shared_set.add(elem)\n    # create a list of the shared elements and return it\n    return sorted(list(shared_set))"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_list.append(i)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples and returns a list of common elements between them.\n    \"\"\"\n    shared_list = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_list.append(element)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a set containing the\n    shared elements from both tuples.\n    '''\n    shared_set = set(test_tup1) & set(test_tup2)\n    return shared_set"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create a set from the first list\n    set1 = set(test_tup1)\n    # Create a set from the second list\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n    # Convert the set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if n is less than or equal to 1\n    if n <= 1:\n        return True\n    \n    # Check if n is divisible by any number less than or equal to its square root\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Function to check if a number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Function to find all non-prime numbers between 2 and n\n    def find_non_primes(n):\n        non_primes = []\n        for i in range(2, n+1):\n            if is_prime(i):\n                non_primes.append(i)\n        return non_primes\n\n    # Main function to return non-prime numbers between 2 and n\n    def non_prime_numbers(n):\n        non_primes = find_non_primes(n)\n        return non_primes\n\n    # Calling the main function with the given input\n    result = non_prime_numbers(10)\n    print(result)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a non-prime number.\n    A non-prime number is a number that has only one divisors other than 1 and itself.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap from the first n elements of the list\n    max_heap = nums[:n]\n    heapq.heapify(max_heap)\n\n    # Iterate over the remaining elements of the list\n    for i in range(n, len(nums)):\n        # Remove the smallest element from the max heap\n        smallest = heapq.heappop(max_heap)\n\n        # If the new element is greater than the smallest, add it to the heap\n        if nums[i] > smallest:\n            heapq.heappush(max_heap, nums[i])\n\n    # Return the max heap as a list of integers\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    This function takes in a list of numbers and an integer n. It returns a list of the n largest integers in descending order.\n    \"\"\"\n    # create a min-heap of size n and fill it with the numbers from the list\n    max_heap = []\n    for num in nums[:n]:\n        hq.heappush(max_heap, -num)\n    \n    # remove the smallest numbers from the heap as we traverse the list and add them to the result list\n    result = []\n    while len(max_heap) > 0:\n        result.append(-hq.heappop(max_heap))\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a min heap\n    hq.heapify(nums)\n\n    # remove the smallest element until the desired number of largest elements is reached\n    for _ in range(n):\n        hq.heappop(nums)\n\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap from the input list\n    heap = hq.nsmallest(n, nums)\n    # extract the n largest elements from the heap\n    largest = [hq.heappop(heap) for _ in range(n)]\n    # return the largest elements in descending order\n    return sorted(largest, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max-heap with the first n numbers\n    max_heap = [nums[0]]\n    hq.heapify(max_heap)\n\n    # iterate through the remaining numbers\n    for num in nums[1:]:\n        # if the current number is greater than the root of the max-heap, replace the root\n        if num > max_heap[0]:\n            max_heap[0] = num\n            # if the heap size becomes greater than n, remove the last element from the heap\n            if len(max_heap) > n:\n                hq.heappop(max_heap)\n\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    return heapq.nlargest(n, nums)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of size n\n    min_heap = [0] * n\n    for i in range(n):\n        min_heap[i] = nums[i]\n\n    # remove the smallest element from the heap and add the next element to it\n    for i in range(n-1, -1, -1):\n        if min_heap[i] < nums[i+1]:\n            min_heap[i] = nums[i+1]\n        else:\n            hq.heappop(min_heap)\n            hq.heappush(min_heap, nums[i+1])\n\n    # return the n largest elements in descending order\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a min-heap of size n\n    heap = hq.nsmallest(n, nums)\n    \n    # Iterate through the list, adding each number to the heap and removing the smallest number if necessary\n    for num in nums[n:]:\n        if len(heap) < n:\n            # Add the new number to the heap\n            heapq.heappush(heap, num)\n        else:\n            # If the heap is full, check if the new number is larger than the smallest number in the heap\n            if num > heap[0]:\n                # If it is, replace the smallest number in the heap with the new number\n                heapq.heapreplace(heap, num)\n    \n    # Return the n largest numbers in descending order as a list\n    return list(heap)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return bin(x ^ (x - 1)).count('1') == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # initialize variables\n    power_of_two = 1\n    count = 0\n\n    # iterate through the bits of the number and check if they differ only at one position\n    while x!= 0:\n        if x & 1!= 0:\n            power_of_two <<= 1\n            count += 1\n        x >>= 1\n\n    # return True if the number has only one bit set to 1, else return False\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Truncate x to the nearest integer\n    x = int(x)\n    # Check if x is a power of 2\n    while x & 1 == 0:\n        x = x >> 1\n    # Check if x is 1\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x & (x - 1) == 0:\n        return False\n    else:\n        return is_Power_Of_Two(x & (x - 1))"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0:\n        return (x & (x - 1)) == 0\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0: # check if x has any one bit set to 1\n        x &= (x-1) # clear the one bit set to 1 in x\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    if x == 0:\n        return True\n    elif x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Check whether the number is a power of two or not\n    if x == 0 or (x & (x - 1)) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text) # find all words using regular expressions\n    long_words = [word for word in words if len(word) >= 4] # filter out words that are less than 4 characters long\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = text.split()\n\n    # Define a regular expression to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n\n    # Find all words that match the pattern\n    matches = re.findall(pattern, text)\n\n    # Return the matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the text into words using regular expression\n    words = re.findall(r'\\b\\w+\\b', text)\n    # filter out words with less than 4 characters\n    filtered_words = [word for word in words if len(word) >= 4]\n    # return the filtered list of words\n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    # Use the `findall` method to find all non-overlapping matches of the pattern in the text\n    matches = pattern.findall(text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to split the string into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text) # find all words in the text\n    char_long_words = []\n    for word in words:\n        if len(word) >= 4:\n            char_long_words.append(word)\n    return char_long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 2\n    return nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Loop through each element in the list\n    for num in nums:\n        # Square the element and append the result to a new list\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = 0\n    \n    # check if the first and last characters are the same\n    if str[0] == str[n-1]:\n        min_rotations = 1\n        # check if the string is in a cyclic rotation\n        if str[n//2:n] == str[:n//2]:\n            min_rotations += 1\n    \n    # check if the string has a rotation greater than 1\n    while min_rotations < n:\n        str_new = str[n:] + str[:n]\n        if str_new == str:\n            min_rotations += 1\n            str = str_new\n        else:\n            break\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 1:\n        return 0\n\n    left = 0\n    right = n - 1\n    count = 0\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if str[left] == str[mid]:\n            left = mid + 1\n        else:\n            right = mid\n\n    if str[left] == str[right]:\n        return count + 1\n    else:\n        return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    min_rotations = n\n    for i in range(1, n):\n        if str[i:n] == str[i:n][::-1]:\n            min_rotations = min(min_rotations, i)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n < 2:\n        return 0\n    \n    # initialize the hash table to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # sort the characters in the string alphabetically\n    sorted_chars = sorted(char_count.keys())\n    \n    # initialize the result to 0\n    result = 0\n    \n    # iterate through each pair of characters\n    for i in range(len(sorted_chars)-1):\n        # find the number of times the current character appears before the next character\n        count = 0\n        for j in range(i+1, len(sorted_chars)):\n            if sorted_chars[i] < sorted_chars[j]:\n                count += char_count[sorted_chars[i]]\n                break\n        \n        # check if the current count is greater than 1\n        if count > 1:\n            result += count // 2\n            \n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Convert the given string to lowercase to make it case-insensitive\n    str = str.lower()\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # Create a list of characters sorted in decreasing order of frequency\n    sorted_chars = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = 0\n    # Loop through the sorted list of characters\n    for i in range(len(sorted_chars)):\n        # If the frequency of the current character is equal to 1, it means that the frequency of the characters to the left and right of it are also equal to 1, which means that we can swap them and get a new string with the same frequency.\n        # Increment the minimum number of rotations required\n        if sorted_chars[i][1] == 1:\n            min_rotations += 1\n            # Check if the new string is equal to the original string, if yes, we can stop the loop\n            if sorted_chars[i-1][0] == sorted_chars[i+1][0]:\n                break\n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Convert the string to a set to remove duplicates\n    str = set(str)\n    # Iterate through all possible rotations of the string\n    for i in range(n):\n        for j in range(i+1, n):\n            # If the two substrings are the same, check if the whole string is the same\n            if str == str[j:]:\n                # If yes, return the minimum number of rotations required to get the same string\n                return n - i - j\n    # If no rotations are found, return 0\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    count = 0\n    \n    # Loop through all possible rotations and count the number of rotations that result in the same string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            temp = str[i:j]\n            if temp == str[j-1:i-1][::-1]:\n                count += 1\n    \n    # Return the minimum number of rotations required\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # create a list of the characters and their frequencies\n    freq_list = []\n    for char, count in freq.items():\n        freq_list.append((char, count))\n    \n    # sort the list of characters by frequency in descending order\n    freq_list.sort(key=lambda x: x[1], reverse=True)\n    \n    # initialize variables for the minimum number of rotations and the current rotation\n    min_rot = 0\n    cur_rot = 0\n    \n    # loop through the sorted list of characters\n    for char, count in freq_list:\n        if cur_rot == 0:\n            # check if the character is already in the first half of the string\n            if str[cur_rot] == char:\n                cur_rot += 1\n        else:\n            # check if the character is already in the second half of the string\n            if str[cur_rot] == char:\n                cur_rot -= 1\n        \n        if cur_rot == len(str)//2:\n            # check if we have found a rotation\n            if min_rot == 0 or cur_rot < min_rot:\n                min_rot = cur_rot\n    \n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i]!= str[(i + n) % n]:\n            return i + 1\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    rotations = 0\n\n    for i in range(n):\n        # Find the first occurrence of the character at index i\n        j = i\n        while j < n and str[j]!= str[i]:\n            j += 1\n\n        # If there is no such character, then the string is already rotated\n        if j == n:\n            return rotations\n\n        # Find the second occurrence of the character at index i\n        k = i + 1\n        while k < n and str[k]!= str[i]:\n            k += 1\n\n        # If the second occurrence is at the end of the string, then there is only one rotation\n        if k == n:\n            rotations += 1\n            return rotations\n\n        # If the second occurrence is in the middle of the string, then there can be more rotations\n        rotations += k - i\n\n    return rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Convert the string to a list\n    s = list(s)\n    # Find the index of the first occurrence of the character in the list\n    index = s.index(ch)\n    # Remove the first occurrence of the character from the list\n    s.pop(index)\n    # Find the index of the last occurrence of the character in the list\n    index = s.rindex(ch)\n    # Remove the last occurrence of the character from the list\n    s.pop(index)\n    # Convert the list back to a string and return it\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Split the string into list of characters\n    lst = list(s)\n    # Initialize two pointers to start and end of the string\n    start = 0\n    end = len(lst) - 1\n    # Loop through the list of characters\n    while start < end:\n        # If the current character matches the given character, increment the pointer to the left\n        if lst[start] == ch:\n            start += 1\n        # If the current character doesn't match the given character, increment the pointer to the right\n        else:\n            start += 1\n        # If the current character matches the given character, decrement the pointer to the right\n        if lst[end] == ch:\n            end -= 1\n        # If the current character doesn't match the given character, decrement the pointer to the left\n        else:\n            end -= 1\n    # Create a new string without the first and last occurrences of the given character\n    new_str = ''.join(lst[start:end+1])\n    return new_str"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index!= -1:\n        s = s[:first_index] + s[first_index+1:]\n    if last_index!= -1:\n        s = s[:last_index] + s[last_index+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Convert string to a list\n    l_str = list(s)\n    # Initialize index variables\n    i = 0\n    j = len(l_str) - 1\n    # Loop through the list\n    while i < j:\n        # If the current character is equal to the given character\n        if l_str[i] == ch:\n            # Remove the character from the string\n            del l_str[i]\n            # Decrement the index\n            i -= 1\n        else:\n            # Move to the next character in the string\n            i += 1\n        # If the current character is equal to the given character\n        if l_str[j] == ch:\n            # Remove the character from the string\n            del l_str[j]\n            # Increment the index\n            j += 1\n        else:\n            # Move to the previous character in the string\n            j -= 1\n    # Convert the list back to a string\n    return ''.join(l_str)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Removing first occurrence\n    if s.find(ch) == 0:\n        s = s[1:]\n\n    # Removing last occurrence\n    if s.rfind(ch) == len(s) - 1:\n        s = s[:len(s)-1]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 1:\n        return \"\"\n    elif s[0] == ch and s[-1] == ch:\n        return s[1:-1]\n    elif s[0] == ch:\n        return remove_Occ(s[1:],ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1],ch)\n    else:\n        return remove_Occ(s[1:-1],ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes two parameters: a string s and a character ch.\n    The function returns the string with the first and last occurrence of ch removed.\n    '''\n    s = s.replace(ch, '')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        index = s.index(ch)\n        return s[:index] + s[index+1:]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Check if the string contains the given character\n    if ch not in s:\n        print(\"The given character is not present in the string.\")\n        return\n\n    # Check if the string is empty\n    if len(s) == 0:\n        print(\"The string is empty.\")\n        return\n\n    # Initialize the index of the first occurrence of the character\n    start = s.find(ch)\n\n    # Initialize the index of the last occurrence of the character\n    end = s.rfind(ch)\n\n    # Check if the first occurrence is the first character in the string\n    if start == 0:\n        # Check if the last occurrence is the last character in the string\n        if end == len(s) - 1:\n            # If both conditions are true, then the string contains only one occurrence of the character\n            s = s[1:-1]\n        else:\n            # If only the first condition is true, then the first occurrence is the only one that can be removed\n            s = s[1:]\n    # Check if the last occurrence is the last character in the string\n    elif end == len(s) - 1:\n        # If only the last condition is true, then the last occurrence is the only one that can be removed\n        s = s[:-1]\n    else:\n        # If both conditions are false, then the first and last occurrences can be removed\n        s = s[1:-1]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch) == 0:\n        return s[1:]\n    elif s.find(ch) == len(s)-1:\n        return s[:len(s)-1]\n    else:\n        return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    n = len(M)\n    m = len(M[0])\n    \n    # Create a list to store the sorted matrix\n    sorted_M = [[0 for j in range(m)] for i in range(n)]\n    \n    # Sort the matrix according to the sum of its rows\n    for i in range(n):\n        # Calculate the sum of the row\n        row_sum = sum(M[i])\n        # Find the minimum index in the row that is greater than the row_sum\n        min_index = i\n        for j in range(i+1, n):\n            if M[j][0] > row_sum:\n                min_index = j\n        # Swap the rows\n        sorted_M[i] = sorted_M[min_index]\n        sorted_M[min_index] = M[i]\n        \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row\n    sums = [sum(row) for row in M]\n    # sort the rows based on the sums in ascending order\n    M.sort(key=lambda row: row[0] if row[0] == sums[0] else sums.index(row[0]))\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a list to store the indices of the rows\n    row_indices = list(range(len(M)))\n\n    # Sort the rows of the matrix in ascending order of the sum of their rows\n    for i in range(len(row_indices)):\n        min_index = i\n        for j in range(i+1, len(row_indices)):\n            if M[row_indices[j]][0] < M[row_indices[min_index]][0]:\n                min_index = j\n        row_indices[i], row_indices[min_index] = row_indices[min_index], row_indices[i]\n\n    # Sort the columns of the matrix in ascending order of the sum of their rows\n    for j in range(len(M[0])):\n        for i in range(len(row_indices)):\n            min_index = i\n            for k in range(i+1, len(row_indices)):\n                if M[row_indices[k]][j] < M[row_indices[min_index]][j]:\n                    min_index = k\n            row_indices[i], row_indices[min_index] = row_indices[min_index], row_indices[i]\n\n    # Return the sorted matrix\n    return [[M[row_indices[i]][j] for j in range(len(M[0]))] for i in range(len(row_indices))]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Initialize a counter variable\n    count = 0\n    \n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Initialize a variable to store the current row's sum\n        current_sum = 0\n        \n        # Loop through each element of the row\n        for j in range(len(M[i])):\n            # Add the element to the current sum\n            current_sum += M[i][j]\n        \n        # If the current row's sum is greater than the sum of all previous rows, increment the counter\n        if current_sum > count:\n            count = current_sum\n    \n    # Sort the matrix based on the counter variable\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            # Set the element to the original value\n            M[i][j] = M[i][j]\n            \n            # If the current element is greater than the counter variable, swap it with the element with the greatest sum\n            if M[i][j] > count:\n                # Initialize variables for the current element and the element with the greatest sum\n                current_element = M[i][j]\n                max_sum_element = current_element\n                \n                # Loop through each row of the matrix\n                for k in range(len(M)):\n                    # Loop through each element of the row\n                    for l in range(len(M[k])):\n                        # If the current element is greater than the maximum sum element, update the maximum sum element\n                        if M[k][l] > max_sum_element:\n                            max_sum_element = M[k][l]\n                \n                # Swap the current element and the maximum sum element\n                M[i][j], M[k][l] = max_sum_element, current_element\n    \n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][i] > M[j+1][i]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        # Find the maximum element in the current row\n        max_val = max(M[i])\n        # Find the index of the maximum element in the current row\n        max_idx = M[i].index(max_val)\n        # Swap the current row with the row with maximum element\n        M[i], M[max_idx] = M[max_idx], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Loop through each row of the matrix\n    for i in range(len(M)):\n\n        # Find the minimum value in the current row\n        min_val = M[i][0]\n\n        # Loop through each element in the current row and compare with the minimum value\n        for j in range(1, len(M[i])):\n            if M[i][j] < min_val:\n                min_val = M[i][j]\n\n        # If the minimum value is not in the current row, move it to the end\n        if min_val!= M[i][0]:\n            # Loop through each element in the current row and swap it with the minimum value\n            for j in range(1, len(M[i])):\n                if M[i][j] == min_val:\n                    M[i][j], M[i][0] = M[i][0], M[i][j]\n                    break\n\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the rows in ascending order\n    sorted_rows = sorted(M, key=lambda x: row_sums.index(sum(x)))\n\n    # Sort the columns of each row in ascending order\n    for row in sorted_rows:\n        row.sort()\n\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n\n    # Loop through each row of the matrix\n    for i in range(n):\n        # Initialize the row with the minimum element\n        min_row = [M[i][j] for j in range(n)]\n\n        # Find the minimum element in the row and swap it with the first element of the row\n        for j in range(1, n):\n            if M[i][j] < min_row[j]:\n                min_row[j], min_row[0] = min_row[0], min_row[j]\n\n        # Now swap the row with the minimum element with the first element of the matrix\n        M[i], M[0] = M[0], M[i]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    n = len(M)\n    # Create a list to store the indices of each row of the matrix\n    row_indices = [[] for _ in range(n)]\n    # Find the indices of each row in the matrix\n    for i in range(n):\n        for j in range(n):\n            row_indices[i].append(j)\n    # Sort each row in ascending order of its sum\n    for i in range(n):\n        row_indices[i].sort(key=lambda x: sum(M[i][x:]))\n    # Create a new matrix with the sorted rows\n    sorted_M = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in row_indices[i]:\n            sorted_M[i][j] = M[i][j]\n    return sorted_M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    volume = 0.5 * l * b * h  # formula to find volume of a triangular prism\n    \n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length of the three sides of a triangular prism and returns the volume of the prism.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * b * h) / 3"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h/3\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h #calculate the volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    volume = l * b * h / 6\n    \n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Volume(l,b,h) : \n    \n    '''\n    This function takes the length, breadth, and height of a triangular prism and \n    returns the volume of the prism.\n    '''\n\n    volume = l * b * h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h  # volume of a triangular prism\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h  # volume of the prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z])([A-Z]+)'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # create a regular expression pattern to match any sequence of lowercase letters\n    pattern = r'(?<=\\b)\\b\\w+\\b(?=\\b)'\n    # use the re.search() method to check if the pattern matches the input string\n    match = re.search(pattern, text)\n    # if the pattern matches, return true, otherwise return false\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern that matches sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z_]+'\n    \n    # Use the re.search() method to search for a match in the input string\n    match = re.search(pattern, text)\n    \n    # If a match is found, return True, otherwise return False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z][a-z]*_[a-z]*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=\\b[a-z])[a-z](?=[A-Z]|$)'\n    return bool(re.findall(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Define a regular expression pattern to match lowercase letters followed by an underscore\n    pattern = re.compile(r'[a-z][_a-z]*')\n    # Use the search() method to search for a match in the input text\n    match = pattern.search(text)\n    # If a match is found, return True, otherwise return False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])[A-Z](?=[a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    # Create a list of characters from the first string\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    \n    # Remove characters from the first string which are present in the second string\n    result = []\n    for char in char_list:\n        if char not in string:\n            result.append(char)\n    \n    # Convert the list of characters to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    str_list = list(string)\n    for i in range(len(str_list)):\n        if str_list[i] in string:\n            str_list[i] =''\n    return ''.join(str_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_count = [0] * NO_OF_CHARS\n    for char in string:\n        char_count[ord(char)] += 1\n    count = 0\n    for i in range(256):\n        if char_count[i] > 0:\n            count += 1\n    new_string = \"\"\n    for char in string:\n        if char_count[ord(char)] == 0:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    first_set = set(string)\n    second_set = set(string)\n\n    for i in range(NO_OF_CHARS):\n        if first_set.isdisjoint(second_set):\n            return string.translate(str.maketrans(\"\", \"\", string))\n\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the modified string\n    modified_string = []\n    # Initialize a set to store the characters present in the second string\n    second_string_set = set(string)\n    \n    # Iterate through each character in the first string\n    for char in string:\n        # If the character is not in the second string set, add it to the modified string\n        if char not in second_string_set:\n            modified_string.append(char)\n    \n    # Convert the modified string to a string and return it\n    return ''.join(modified_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(len(string)):\n        if string[i] in string.replace(string[i], ''):\n            string = string[:i] + string[i+1:]\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars = 256\n    freq_dict = {}\n    for char in string:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    for char in string:\n        if char in freq_dict:\n            freq_dict[char] -= 1\n            if freq_dict[char] == 0:\n                del freq_dict[char]\n    \n    for char in freq_dict:\n        if freq_dict[char]!= 0:\n            result = []\n            for char in string:\n                if char in freq_dict:\n                    result.append(char)\n            return ''.join(result)\n    \n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # create an empty list to store the characters to be removed\n    to_be_removed = []\n    # iterate over the characters of the second string\n    for char in string: \n        # if the character is not present in the first string, add it to the to_be_removed list\n        if char not in string: \n            to_be_removed.append(char)\n    # remove the characters from the first string\n    for char in to_be_removed: \n        string = string.replace(char, '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    chars_to_remove = set(string) & set(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[{]};:'\\\",.<>?\")\n    result = ''.join([char for char in string if char not in chars_to_remove])\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    This function takes two strings as input and returns a new string where all the characters from the first string are not present in the second string.\n    \"\"\"\n    set2 = set(string2)\n    result = \"\"\n    for char in string1:\n        if char not in set2:\n            result += char\n    return result"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store unique elements in the array\n    unique_dict = {}\n    for num in arraynums:\n        # check if the element is already present in the dictionary\n        if num in unique_dict:\n            return True\n        else:\n            # if the element is unique, add it to the dictionary\n            unique_dict[num] = True\n    # if no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Use a dictionary to store unique elements\n    unique_dict = {}\n    for num in arraynums:\n        # If the number already exists in the dictionary, return True\n        if num in unique_dict:\n            return True\n        # If the number doesn't exist, add it to the dictionary with a value of 1\n        else:\n            unique_dict[num] = 1\n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n\n    # Create a set to store unique elements in the array\n    unique_elements = set(arraynums)\n\n    # Check if there are any duplicate elements in the set\n    if len(unique_elements) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store the values and their indices in the original array\n    num_dict = {}\n    for i, num in enumerate(arraynums):\n        if num in num_dict:\n            return True\n        num_dict[num] = i\n\n    # if we've made it through the loop without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the elements and their indices\n    indices = {}\n    # Iterate over the array and check if each element has already been seen\n    for i, num in enumerate(arraynums):\n        if num in indices:\n            # If the element has already been seen before, return True\n            return True\n        else:\n            # If the element has not been seen before, add its index to the dictionary\n            indices[num] = i\n    # If the loop completes without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize an empty dictionary to store the indices of elements\n    indices = {}\n    # Iterate through the array of integers\n    for i in range(len(arraynums)):\n        # Check if the current element is already in the dictionary\n        if arraynums[i] in indices:\n            # If it is, return True since the array contains a duplicate element\n            return True\n        # If it's not, add it to the dictionary with its index as the value\n        indices[arraynums[i]] = i\n    # If the loop completes without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) < 2:\n        return False\n\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2 == 0 and x > 0 and x < 1000:\n        return \"The number is woodball.\"\n    else:\n        return \"The number is not a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x == 33:\n        return \"Woodball\"\n    else:\n        return \"Not Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    woodball = [1, 10, 100, 1000]\n    for num in woodball: \n        if num == x: \n            return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Check if the number is a multiple of 7\n    if x % 7 == 0: \n        return \"Yes, it is a Woodall Number\" \n    else: \n        return \"No, it is not a Woodall Number\"\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    if x >= 0 and x % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define the list of numbers that can be considered woodall numbers\n    woodall_nums = [12, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\n    # Check if x is in the list of woodall numbers\n    if x in woodall_nums:\n        # Return True if x is a woodall number\n        return True\n    else:\n        # Return False if x is not a woodall number\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 10:\n        return False\n    if x % 2 == 0:\n        return False\n    y = x**2\n    while y < 100:\n        y = y + x\n        if y % 10 == 0:\n            return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    elif x < 1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411,"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    if rev_num == 0:\n        return \"Number is one less than twice its reverse.\"\n    else:\n        return \"Number is not one less than twice its reverse.\"\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert number to string\n    str_num = str(num)\n    # reverse string and convert back to int\n    rev_num = int(str_num[::-1])\n    # check if rev_num is one less than twice num\n    if rev_num - num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # calculate the reverse of the number\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    # check if the reversed number is one less than twice the original number\n    return rev_num >= 2 * num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_int = int(rev_str)\n    # Check if the original number is one less than twice its reverse\n    if num - rev_int == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse * 2 - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        rem = temp % 10\n        rev_num = rev_num * 10 + rem\n        temp = temp // 10\n    if (num - 1) == rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse - 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num < 2 * int(str(num)[::-1])"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return num == rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num < (2 * int(str(num)[::-1]))"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the maximum number that can be formed from those digits.\n\n    Example:\n    Input: [1, 2, 3]\n    Output: 9\n\n    The maximum number that can be formed from the given list of digits [1, 2, 3] is 9.\n    '''\n    # Initialize a variable to keep track of the maximum number formed with the digits\n    max_num = 0\n\n    # Iterate through the list of digits and add up all the digits to form the maximum number\n    for num in arr:\n        for digit in str(num):\n            max_num += int(digit)\n\n    # Return the maximum number formed with the digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # sorting the digits in non-decreasing order\n    arr = sorted(set(arr), reverse=True)\n\n    # initializing variables for the largest number formed with the digits and the current number\n    max_num = 0\n    curr_num = 0\n\n    # iterating over the digits in the sorted list and adding each digit to the current number\n    for digit in arr:\n        curr_num = curr_num * 10 + digit\n        if curr_num > max_num:\n            max_num = curr_num\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        temp_num = 0\n        for j in range(i, len(arr)):\n            temp_num += arr[j]\n            if temp_num > max_num:\n                max_num = temp_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                max_num = max(max_num, arr[i] * arr[j] * arr[k])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            num = int(''.join(sorted(arr[i:j+1])))\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n\n    # loop through all possible combinations of digits\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            num = 0\n            for k in range(j):\n                num += arr[k]*(j-k-1)\n            if num > max_num:\n                max_num = num\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            max_num = max(max_num,int(''.join(map(str,arr[i:j+1]))))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sort the digits in non-decreasing order\n    arr.sort(reverse=True)\n    # multiply all the digits together\n    max_num = 1\n    for i in range(len(arr)) :\n        max_num *= arr[i]\n    # return the maximum number formed\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with the digits.\n    '''\n    \n    # Sort the list of digits in non-decreasing order\n    arr.sort(reverse=True)\n\n    # Initialize the maximum number\n    max_num = 0\n\n    # Traverse the sorted list of digits\n    for digit in arr:\n\n        # Calculate the current number\n        curr_num = digit * (10**max_num)\n\n        # Update the maximum number if the current number is greater than the current maximum number\n        if curr_num > max_num:\n            max_num += 1\n\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0: \n        return \"Both numbers have opposite signs\" \n    elif x < 0 and y < 0: \n        return \"Both numbers have opposite signs\" \n    else: \n        return \"Both numbers have the same sign\" "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function checks whether two given integers have opposite signs or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    elif x == 0 and y == 0:\n        return True\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Check if both numbers are positive\n    if x > 0 and y > 0: \n        return True\n    # Check if both numbers are negative\n    elif x < 0 and y < 0: \n        return True\n    # If numbers have different signs, they cannot have opposite signs\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    elif x<0 and y>0:\n        return False\n    elif x>0 and y<0:\n        return False\n    else:\n        return None"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>=0 and y>=0: \n        print(\"Both integers have opposite signs\")\n    elif x>=0 and y<0: \n        print(\"x has an opposite sign to y\")\n    elif x<0 and y<0: \n        print(\"Both integers have opposite signs\")\n    else: \n        print(\"y has an opposite sign to x\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    if x < 0 and y < 0: \n        return True \n    elif x > 0 and y > 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>=0 and y>=0: \n        return True \n    elif x<0 and y<0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def octagonal_number(n):\n        \"\"\"\n        Recursive function to calculate the nth octagonal number.\n        \"\"\"\n        if n == 1:\n            return 1\n        else:\n            return 3 * (n - 1) ** 2 - 2 * (n - 1)\n\n    def find_octagonal(n):\n        \"\"\"\n        Main function to find the nth octagonal number.\n        \"\"\"\n        if is_prime(n):\n            return octagonal_number(n)\n        else:\n            return None\n\n    return find_octagonal(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Finding the squares of all the integers from 1 to n\n    squares = [i ** 2 for i in range(1, n + 1)]\n    # Finding the sum of squares of all odd integers from 1 to n\n    sum_of_squares = sum(squares[i] for i in range(1, n + 1, 2))\n    # Adding 1 to the sum of squares\n    sum_of_squares += 1\n    # Returning the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n    while b <= n:\n        if n == a**3 + b**3:\n            return True\n        elif n < a**3 + b**3:\n            return False\n        else:\n            a += 1\n            b = 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    if n <= 0:\n        return False\n    elif n % 8 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_count = 0\n    for i in range(1, n+1):\n        if i*i*i == n:\n            return True\n        octagonal_count += 1\n    return False\n\nn = int(input(\"Enter the value of n: \"))\nif is_octagonal(n):\n    print(f\"{n} is an octagonal number.\")\nelse:\n    print(f\"{n} is not an octagonal number.\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        j = n - i + 1\n        if i**2 + j**2 == n**2:\n            return True\n    return False\n\nn = int(input(\"Enter a number: \"))\nif is_octagonal(n):\n    print(f\"{n} is an octagonal number.\")\nelse:\n    print(f\"{n} is not an octagonal number.\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the base number for the octagonal series\n    base = 10**3\n\n    # Calculate the nth octagonal number using the base number\n    nth_octagonal = (base ** n) - ((base ** (n - 2)) - base)\n\n    return nth_octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def octagonal_number(n):\n        result = 0\n        for i in range(1, n+1):\n            result += (n**2) // i\n        return result\n    \n    if is_prime(n):\n        return octagonal_number(n)\n    else:\n        return -1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_num = 0\n    for i in range(n):\n        octagonal_num += i * (i + 1) // 2\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n % 2 == 0: \n        return False\n    else:\n        return (12*n*n - 6*n + 10)**0.5 // 2\n        \n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substr = s[i:j+1]\n            sum_digits = sum(int(digit) for digit in substr)\n            if sum_digits == len(substr):\n                count[substr] += 1\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    def is_digit_sum(s):\n        '''\n        Helper function to check if the sum of digits is equal to the length of the string.\n        '''\n        sum_digits = 0\n        for digit in s:\n            sum_digits += int(digit)\n        if sum_digits == len(s):\n            return True\n        else:\n            return False\n    \n    def count_substrings(s):\n        '''\n        Recursive function to count all substrings with the given property.\n        '''\n        if is_digit_sum(s):\n            return 1\n        else:\n            count = 0\n            for i in range(len(s)):\n                for j in range(i+1, len(s)+1):\n                    count += count_substrings(s[i:j])\n            return count\n    \n    # Count all substrings with the given property\n    count = count_substrings(s)\n    print(\"Number of substrings with sum of digits equal to their length:\", count)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    substring_count = defaultdict(int)\n\n    # Loop through the string and check if the sum of digits is equal to the length of the substring\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum([int(d) for d in substring])\n            substring_count[digit_sum] += 1\n\n    # Return the total count of substrings with the sum of digits equal to their length\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings of length i\n    count_dict = defaultdict(int)\n\n    # Initialize the count to 0\n    count = 0\n\n    # Loop through the string\n    for i in range(len(s)):\n        # If the current character is a digit, check if it's a palindrome\n        if s[i].isdigit():\n            if s[i] == s[i][::-1]:\n                # If it's a palindrome, add 1 to the count and update the count_dict\n                count += 1\n                count_dict[len(s[i])] += 1\n\n    # Return the count of substrings\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Define a defaultdict to store the count of substrings with the sum of digits equal to their length\n    count = defaultdict(int)\n\n    # Iterate through the string\n    for i in range(len(s)):\n        # Get the current character\n        c = s[i]\n\n        # Define the left and right pointers of the substring\n        left = 0\n        right = i\n\n        # Iterate through the substring\n        while left < right:\n            # Convert the current substring to an integer and calculate the sum of its digits\n            substring = int(s[left:right+1])\n            sum_digits = sum(map(int, str(substring)))\n\n            # If the sum of digits is equal to the length of the substring, increment the count\n            if sum_digits == len(substring):\n                count[len(substring)] += 1\n\n            # Increment the left pointer\n            left += 1\n\n            # Decrement the right pointer\n            right -= 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            d[(s[i], s[j])] += 1\n    \n    count = 0\n    for key in d:\n        if sum(int(digit) for digit in key[0]) == len(key[0]):\n            count += d[key]\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # convert string to lowercase and remove spaces\n    s = s.lower().replace(\" \", \"\")\n    \n    # create a dictionary to store the count of substrings\n    substring_counts = defaultdict(int)\n    \n    # loop through all possible substrings\n    for i in range(len(s)):\n        for j in range(i, len(s) + 1):\n            # extract the substring\n            substring = s[i:j]\n            \n            # check if the substring has only digits and is a substring of the original string\n            if substring.isdigit() and substring in s:\n                # count the substring and its reverse\n                substring_counts[substring] += 1\n                substring_counts[substring[::-1]] += 1\n    \n    # return the sum of the counts of all substrings with length equal to the sum of their digits\n    return sum(substring_counts.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [defaultdict(int) for _ in range(n)]\n    count = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = 1\n            elif len(s[i:j+1]) == sum(int(digit) for digit in s[i:j+1]):\n                dp[i][j] = dp[i+1][j-1] + 1\n                count += dp[i][j]\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a defaultdict to store count of substrings\n    count = defaultdict(int)\n    # loop through each character in the string\n    for i in range(len(s)):\n        # loop through all possible substrings of length equal to the length of the current substring\n        for j in range(i, len(s)+1):\n            # calculate the sum of digits in the substring\n            substring = int(''.join(map(str, s[i:j])))\n            # check if the sum of digits is equal to the length of the substring\n            if substring == len(substring):\n                # increment the count of substrings in the defaultdict\n                count[substring] += 1\n    # return the count of substrings\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest variable to the first element of the list\n    smallest = xs[0]\n    # iterate over the rest of the list\n    for x in xs[1:]:\n        # if current element is smaller than smallest, update smallest variable\n        if x < smallest:\n            smallest = x\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    max_diff = float('-inf')  # initial value for maximum difference\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the tuple list in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize variables to store the maximum difference and the sum of the first and second values\n    max_diff = sorted_list[1][1] - sorted_list[0][0]\n    sum_diff = sorted_list[0][0] + sorted_list[0][1]\n\n    # Loop through the sorted list and update the maximum difference and sum of differences\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i][0] - sorted_list[i-1][1] > max_diff:\n            max_diff = sorted_list[i][0] - sorted_list[i-1][1]\n            sum_diff = sorted_list[i][0] + sorted_list[i][1]\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the given tuple list in ascending order\n    sorted_list = sorted(test_list)\n    # Initialize the maximum difference to be 0\n    max_diff = 0\n    # Iterate over the sorted list and compare adjacent pairs of values\n    for i in range(len(sorted_list)-1):\n        diff = sorted_list[i+1][0] - sorted_list[i][1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize the maximum difference and the current difference\n    max_diff = sorted_list[1][0] - sorted_list[0][1]\n    curr_diff = max_diff\n\n    # Loop through the sorted list and compare adjacent pairs\n    for i in range(1, len(sorted_list)):\n        # Calculate the difference between the current pair and the next pair\n        curr_diff = sorted_list[i][0] - sorted_list[i-1][1]\n\n        # Update the maximum difference if the current difference is greater\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the input list in ascending order\n    test_list.sort()\n    \n    # Initialize the maximum difference to be the difference between the first and last elements\n    max_diff = test_list[-1] - test_list[0]\n    \n    # Loop through the list from the second element to the last element\n    for i in range(1, len(test_list)-1):\n        # Calculate the difference between the current and next element in the list\n        diff = test_list[i+1] - test_list[i]\n        \n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if j > i:\n                diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0]) + abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and returns the maximum difference between available pairs in the list.\n    '''\n    \n    # Initializing variables\n    max_diff = 0\n    current_diff = 0\n    \n    # Iterating through the list\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            \n            # Finding the difference between the elements\n            current_diff = abs(test_list[i][0] - test_list[j][0])\n            \n            # Updating the maximum difference if necessary\n            if current_diff > max_diff:\n                max_diff = current_diff\n    \n    # Returning the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize two variables to store the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = test_list[1] - test_list[0]\n\n    # Iterate through the list and compare adjacent pairs of values\n    for i in range(len(test_list)-1):\n        # Calculate the current difference between adjacent pairs\n        curr_diff = test_list[i+1] - test_list[i]\n\n        # Update the maximum difference if the current difference is greater\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and returns the maximum difference between available pairs.\n    '''\n    # initialize variables\n    max_diff = 0\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # loop through each tuple in the list (except for the current tuple)\n        for j in range(i+1, len(test_list)):\n            # calculate the difference between the current and next tuples\n            diff = test_list[j][0] - test_list[i][0]\n            # update the maximum difference if the current difference is greater than the previous maximum\n            if diff > max_diff:\n                max_diff = diff\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n\n    # Return the sorted list of tuples\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sorting the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n\n    # Return the sorted list of tuples\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sorting the list of tuples based on the second value\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            recursive_list_sum(item)\n    else:\n        return data_list\n    "
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: If the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: Sum the first element of the list and call the function recursively with the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_and_sum(sub_list):\n        if not sub_list:\n            return 0\n        else:\n            return sub_list[0] + flatten_and_sum(sub_list[1:])\n    \n    return flatten_and_sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n    \n    # Recursive case: add the first element and call the function on the remaining elements\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element to the sum of the flattened list\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        '''\n        Recursive function to flatten a list of lists.\n        '''\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive integers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in it.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a given list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    prev_sum = 0\n\n    # Loop through the Bell numbers from 0 to n\n    for i in range(n+1):\n        # Calculate the sum of the Bell numbers to the i-th power\n        curr_sum = sum(i ** j for j in range(i+1))\n\n        # Check if the sum is greater than the previous sum\n        if curr_sum > prev_sum:\n            # Increment the count of ways to partition the set\n            count += 1\n\n        # Update the previous sum to the current sum\n        prev_sum = curr_sum\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the two variables for the two different partitions\n    ways1 = 0\n    ways2 = 0\n    # Initialize the variables for the sum of two partitions\n    sum1 = 0\n    sum2 = 0\n    # Iterate through all the possible values of n\n    for i in range(1, n+1):\n        # Calculate the sum of the two partitions\n        sum1 += i\n        sum2 += n-i\n        # If the sum is equal to n, increment the ways for the first partition\n        if sum1 == n:\n            ways1 += 1\n        # If the sum is equal to 2n-1, increment the ways for the second partition\n        if sum2 == 2*n-1:\n            ways2 += 1\n    # Return the sum of the two ways\n    return ways1+ways2"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition as 1\n    ways = 1\n    \n    # Check if the input is valid\n    if n < 1:\n        return 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if i is a Bell number\n        if i == 0 or i == 1:\n            continue\n        # If i is a Bell number, check if the number of ways to partition with i-1 is greater than 0\n        if ways > 0:\n            ways += ways * (n-i) // i\n    \n    # Return the number of ways to partition with each number in the set of Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n        n (int): The size of the set of Bell numbers.\n\n    Returns:\n        int: The number of ways to partition the set of Bell numbers.\n    \"\"\"\n\n    # Calculate the sum of the first n Bell numbers\n    bell_sum = sum(bell_numbers(n))\n\n    # Calculate the sum of the first n odd Bell numbers\n    odd_bell_sum = sum(odd_bell_numbers(n))\n\n    # Return the number of ways to partition the set\n    return bell_sum // odd_bell_sum\n\ndef bell_numbers(n):\n    \"\"\"\n    Generate a list of the first n Bell numbers.\n\n    Parameters:\n        n (int): The size of the list of Bell numbers to generate.\n\n    Returns:\n        list: A list of the first n Bell numbers.\n    \"\"\"\n\n    # Initialize the list with 0\n    bell_numbers_list = [0]\n\n    # Generate the list up to n using the Bell's formula\n    for i in range(1, n + 1):\n        bell_numbers_list.append(bell_numbers_list[-1] + bell_numbers_list[-2])\n\n    # Return the list of Bell numbers\n    return bell_numbers_list\n\ndef odd_bell_numbers(n):\n    \"\"\"\n    Generate a list of the first n odd Bell numbers.\n\n    Parameters:\n        n (int): The size of the list of odd Bell numbers to generate.\n\n    Returns:\n        list: A list of the first n odd Bell numbers.\n    \"\"\"\n\n    # Initialize the list with 0\n    odd_bell_numbers_list = [0]\n\n    # Generate the list up to n using the Bell's formula\n    for i in range(1, n + 1, 2):\n        odd_bell_numbers_list.append(odd_bell_numbers_list[-1] + odd_bell_numbers_list[-2])\n\n    # Return the list of odd Bell numbers\n    return odd_bell_numbers_list"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    def partition(n, k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return n\n        else:\n            return sum([partition(n - 1, k - 1), partition(n - 1, k)])\n\n    return partition(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def helper(n, k):\n        if k == 0:\n            return 1\n        if k == 1:\n            return n\n        elif k % 2 == 0:\n            return helper(n, k//2) + helper(n, k//2)\n        else:\n            return helper(n, (k-1)//2) + helper(n, (k-1)//2)\n\n    return helper(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Find the number of ways to partition a set of Bell numbers.\n\n    Returns:\n        A tuple containing the number of ways to partition the set of Bell numbers\n        and the partitioning itself.\n    \"\"\"\n    # Create a matrix to store the number of ways to partition the set of Bell numbers\n    # with the first n rows and the second n columns\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Fill the matrix diagonally with 1 for each row and column\n    for i in range(n + 1):\n        dp[i][i] = 1\n\n    # Fill the rest of the matrix using the formula for the Bell number\n    for i in range(2, n + 1):\n        for j in range(1, i + 1):\n            dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n\n    # Return the number of ways to partition the set of Bell numbers and the partitioning itself\n    return dp[n][n], dp"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # If the array has only one element, it is always monotonic\n    if len(A) == 1:\n        return True\n    # If the array has more than one element, check if the array is monotonic in the first element\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    # Check if the array is empty\n    if not A:\n        return False\n    \n    # Find the first and last elements of the array\n    first = A[0]\n    last = A[-1]\n    \n    # Check if the array is a monotonic increasing or decreasing array\n    if first < last:\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n    elif first > last:\n        for i in range(len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n    \n    # If the array is not a monotonic increasing or decreasing array,\n    # then it is either a monotonic increasing or decreasing array,\n    # or it has a zero crossing. In either case, we return True.\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    elif A[0] >= A[1] and A[1] >= A[2] and A[2] >= A[3]:\n        return is_Monotonic(A[1:])\n    elif A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3]:\n        return is_Monotonic(A[1:])\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function checks whether the given array is monotonic or not.\n\n    Args:\n        A: List of integers.\n\n    Returns:\n        True if the array is monotonic, False otherwise.\n    \"\"\"\n    if len(A) == 0:\n        return True\n\n    n = len(A)\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # check if the array is empty\n    if len(A) == 0: \n        return True\n    \n    # check if all elements are same\n    if A[0] == A[1]: \n        return True\n    \n    # check if the array is monotonic\n    is_monotonic = True\n    for i in range(1, len(A)): \n        if A[i] < A[i-1]: \n            is_monotonic = False\n            break\n        elif A[i] > A[i-1]: \n            is_monotonic = True\n    \n    return is_monotonic"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes two lists as input and returns True if the first list contains the second list as a sublist.\n    \"\"\"\n    # if the first list is empty, return False\n    if len(l) == 0:\n        return False\n    \n    # if the first list is not empty, check if the first element of the first list is a sublist of the second list\n    if l[0] in s:\n        # if the first element of the first list is a sublist of the second list, check if the rest of the first list is also a sublist of the second list\n        return is_sublist(l[1:], s)\n    else:\n        # if the first element of the first list is not a sublist of the second list, discard the first element and recursively check the rest of the first list\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the sublist is empty\n    if not s:\n        return True\n    # Check if the first element of the sublist is in the list\n    elif l[0] in s:\n        # Check if the rest of the sublist is in the list\n        for element in s:\n            if element not in l:\n                return False\n        # If the rest of the sublist is in the list, the sublist is a sublist of l\n        return True\n    else:\n        # If the first element of the sublist is not in the list, check the rest of the sublist\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function checks whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) > len(s):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n            \n    if j == len(s):\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = []\n    for tup in Input:\n        lengths.append(len(tup))\n    if all(x == lengths[0] for x in lengths):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    if len(set([len(x) for x in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    else:\n        for i in range(len(Input[0])):\n            if len(set([t[i] for t in Input]))!= 1:\n                return False\n        return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # initialize a variable to keep track of whether all tuples have the same length or not\n    result = True\n\n    # loop through each tuple in the input list\n    for tup in Input:\n        # if the length of the current tuple is not equal to the length of the first tuple in the input list, set the result variable to False\n        if len(tup)!= len(Input[0]):\n            result = False\n            break\n\n    # return the result variable as the output of the function\n    return result"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # initialize count variable to 0\n    count = 0\n    \n    # loop through each tuple in the input list\n    for i in range(len(Input)):\n        # check if the length of each tuple is equal to the length of the first tuple\n        if len(Input[i]) == len(Input[0]):\n            count += 1\n    \n    # check if all tuples have equal length\n    if count == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    elif len(Input) == len(Input[0]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    gap = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        \n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    \n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        \n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize parameters\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    # sort while swapping is true\n    while swapped:\n\n        # set swapped to false\n        swapped = False\n\n        # iterate over gap range\n        for i in range(0, gap):\n\n            # if current element is greater than next element\n            if nums[i] > nums[i+gap]:\n\n                # swap the elements\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n\n                # set swapped to true\n                swapped = True\n\n        # decrease gap size\n        gap = int(gap/1.3)\n\n        # if gap size is less than 1, set to 1\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if gap == 1:\n            break\n        gap = (gap + 1) // 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n - 1):\n            if nums[i] > nums[i + 1]:\n                swap(nums, i, i + 1)\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swapped = True\n    gap = len(nums)\n    n = len(nums)\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n        n -= gap\n        gap = n // 2\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n\n    # initialize the gap and swapping variables\n    gap = n\n    swapping = True\n\n    while swapping:\n        swapping = False\n        gap = int(gap / 1.3)\n\n        # iterate through the list and compare adjacent elements\n        for i in range(0, n - gap):\n            # if the adjacent elements are not in order, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapping = True\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is a multiple of 4\n    if n % 4 == 0:\n        # check if n is a perfect square\n        if n % int(n**0.5) ** 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = n // 2\n    y = n - x\n    return (x*x == n) and (y*y == n)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Finding the square of the number\n    square = n ** 0.5\n    # Finding the difference between the square of the number and the given number\n    diff = square - n\n    # Checking if the difference is a square\n    if diff ** 2 == square:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0: \n        return False\n    \n    x = int(n**0.5)\n    \n    for i in range(1, x + 1):\n        if n == i**2 + i:\n            return True\n        if n == i**2 - i:\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is even or not\n    if n % 2 == 0:\n        # If even, it cannot be represented as the difference of two squares\n        return False\n    else:\n        # Check if the number is divisible by 4\n        if n % 4 == 0:\n            # If divisible by 4, it can be represented as the difference of two squares\n            return True\n        else:\n            # If not divisible by 4, it cannot be represented as the difference of two squares\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            if i*i!= n:\n                factors.append(n//i)\n    sum_factors = sum(factors)\n    if sum_factors > n:\n        return \"The given number cannot be represented as the difference of two squares.\"\n    else:\n        return \"The given number can be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Function to check if a number is a square\n    def is_square(num):\n        return num == int(num**0.5) ** 2\n    \n    # Function to calculate the sum of squares\n    def sum_of_squares(num):\n        return (num**2) + (num**2)\n    \n    # Check if the given number can be represented as the difference of two squares\n    if is_square(n) and is_square(n - sum_of_squares(n)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # To check whether the number is positive or negative\n    if n < 0:\n        print(\"The number is negative.\")\n        return False\n    \n    # To check whether the number is 0 or not\n    if n == 0:\n        print(\"The number is 0.\")\n        return True\n    \n    # To check whether the number is divisible by 4 or not\n    if n % 4 == 0:\n        print(\"The number is divisible by 4.\")\n        return False\n    \n    # To find the square root of the number\n    sqrt_n = int(n ** 0.5)\n    \n    # To check whether the square root is divisible by 2 or not\n    if sqrt_n % 2 == 0:\n        print(\"The square root of the number is divisible by 2.\")\n        return False\n    \n    # To check whether the number is divisible by 2 or not\n    if n % 2 == 0:\n        print(\"The number is divisible by 2.\")\n        return False\n    \n    # To check whether the number is a power of 2 or not\n    if 2 ** 0.5 <= n <= 2 * 2 ** 0.5:\n        print(\"The number is a power of 2.\")\n        return True\n    \n    # To check whether the number is a perfect square or not\n    if int(n ** 0.5) ** 2 == n:\n        print(\"The number is a perfect square.\")\n        return True\n    \n    # To check whether the number is a perfect cube or not\n    if int(n ** (1/3)) ** 3 == n:\n        print(\"The number is a perfect cube.\")\n        return True\n    \n    # To check whether the number is a perfect 4th power or not\n    if int(n ** (1/4)) ** 4 == n:\n        print(\"The number is a perfect 4th power.\")\n        return True\n    \n    # To check whether the number is a perfect 8th power or not\n    if int(n ** (1/8)) ** 8 == n:\n        print(\"The number is a perfect 8th power.\")\n        return True\n    \n    # To check whether the number is a perfect 16th power or not\n    if int(n ** (1/16)) ** 16 == n:\n        print(\"The number is a perfect 16th power.\")\n        return True\n    \n    # To check whether the number is a perfect 32th power or not\n    if int(n ** (1/32)) ** 32 == n:\n        print(\"The number is a perfect 32th power.\")\n        return True\n    \n    # To check whether the number is a perfect 64th power or not\n    if int(n ** (1/64)) ** 64 == n:\n        print(\"The number is a perfect 64th power.\")\n        return True\n    \n    # To check whether the number is a perfect 128th power or not\n    if int(n ** (1/128)) ** 128 == n:\n        print(\"The number is a perfect 128th power.\")\n        return True\n    \n    # To check whether the number is a perfect 256th power or not\n    if int(n ** (1/256)) ** 256 == n:\n        print(\"The number is a perfect 256th power.\")\n        return True\n    \n    print(\"The number is not a square or a power of 2.\")\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is less than or equal to zero\n    if n <= 0:\n        return \"The given number must be greater than zero.\"\n\n    # Find the square root of the given number\n    square_root = n ** 0.5\n\n    # Calculate the difference between the square root and 1\n    difference = square_root - 1\n\n    # Check if the difference is a perfect square\n    for i in range(2, int(difference ** 0.5) + 1):\n        if difference % i == 0:\n            return \"The given number cannot be represented as the difference of two squares.\"\n\n    return \"The given number can be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    # check if the input is an integer\n    if not isinstance(n, int):\n        return \"Input should be an integer.\"\n\n    # check if the number is positive\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n\n    # initialize variables\n    i = 1\n    j = n\n\n    # check if the input can be represented as the difference of two squares\n    while i <= j:\n        if i * i + j * j == n:\n            return \"Yes, the input can be represented as the difference of two squares.\"\n        elif i * i + j * j < n:\n            i += 1\n        else:\n            j -= 1\n\n    return \"No, the input cannot be represented as the difference of two squares.\""
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n\n    # Create a dictionary to store the count of each color\n    color_count = {}\n    for color in colors:\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n\n    # Iterate through the patterns array\n    for pattern in patterns:\n        # Check if the pattern is the same as the current count of each color\n        if color_count == pattern:\n            return True\n\n    # If no pattern is found, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Create a dictionary to store the counts of each pattern\n    pattern_count = {}\n\n    # Loop through the colors and patterns and count the occurrences of each pattern\n    for color in colors:\n        for pattern in patterns:\n            if color in pattern:\n                pattern_count[pattern] = pattern_count.get(pattern, 0) + 1\n\n    # Loop through the patterns and check if all the occurrences are the same\n    for pattern in patterns:\n        if pattern_count.get(pattern, 0) > 1:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    sequence = []\n    for color in colors:\n        sequence.append(color)\n    sequence.sort()\n\n    for pattern in patterns:\n        if sequence == pattern:\n            return True\n\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Create a list of the colors and their positions in the pattern\n    color_pos = []\n    for i, color in enumerate(colors):\n        color_pos.append((color, i))\n    \n    # Sort the color_pos list based on the position of the color\n    color_pos.sort(key=lambda x: x[1])\n    \n    # Check if the colors in the pattern are the same as the colors in the sorted list\n    for i, pattern in enumerate(patterns):\n        if color_pos[i][0]!= pattern[0]:\n            return False\n    \n    # If we reach this point, it means the colors in the patterns array are in the same sequence as in the colors array\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    pattern_index = 0\n    current_pattern = patterns[pattern_index]\n    current_color = colors[0]\n    next_color = colors[1]\n\n    # Iterate over the colors array\n    for i in range(1, len(colors)):\n        # Check if the current color matches the next color in the pattern\n        if current_color == next_color:\n            # If they do, increment the color counter and continue to the next color\n            current_color = colors[i]\n            continue\n        # If they don't, check if the current pattern is valid\n        elif current_pattern == next_color:\n            # If it is, increment the color counter and continue to the next pattern\n            current_pattern = patterns[pattern_index + 1]\n            pattern_index += 1\n            current_color = colors[i]\n            next_color = colors[i + 1]\n            continue\n        # If the current pattern is not valid, return False\n        else:\n            return False\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_pattern = {}\n    for pattern in patterns:\n        for color in pattern:\n            color_pattern[color] = True if color not in color_pattern else False\n    \n    for color in colors:\n        if color in color_pattern and color_pattern[color]:\n            del color_pattern[color]\n        else:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n-1):\n        if patterns[i]!= patterns[i+1]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the number of colors is equal to the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Convert the patterns array into a set of sets, where each set contains one color\n    pattern_sets = []\n    for pattern in patterns:\n        pattern_sets.append(set(pattern))\n    \n    # Sort the colors and pattern sets\n    sorted_colors = sorted(colors)\n    sorted_pattern_sets = [set(sorted(pattern)) for pattern in pattern_sets]\n    \n    # Check if the sorted colors match the pattern sets\n    for i in range(len(sorted_colors)):\n        if sorted_colors[i]!= sorted_pattern_sets[i]:\n            return False\n    \n    # If we make it this far, it means the colors and patterns are the same\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check if the number of colors is equal to the length of the patterns array\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Check if all the colors in the colors array are present in the patterns array\n    for color in colors:\n        if color not in patterns:\n            return False\n    \n    # Check if the patterns array is a permutation of the colors array\n    if sorted(patterns)!= sorted(colors):\n        return False\n    \n    # If all the conditions are satisfied, return True\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                tuples_list.append(test_list[i] + test_list[j])\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty dictionary to store the count of divisible tuples\n    count = {}\n    \n    # iterate over each tuple in the test list\n    for t in test_list:\n        # iterate over each element in the tuple\n        for e in t:\n            # check if the element is divisible by k and add it to the dictionary\n            if e % K == 0:\n                if e in count:\n                    count[e] += 1\n                else:\n                    count[e] = 1\n    \n    # create an empty list to store the final result\n    result = []\n    \n    # iterate over each key in the dictionary and check if the count is equal to K for that key\n    for k in count:\n        if count[k] == K:\n            # create a tuple from the key and add it to the result list\n            result.append((k,))\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K and returns a new list of tuples that have all elements divisible by K.\n    '''\n    result = []\n    for tuple in test_list:\n        divisible = True\n        for element in tuple:\n            if element % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # initialize an empty list to store the tuples which meet the condition\n    result = []\n    # loop through each tuple in the test_list\n    for tup in test_list:\n        # initialize a counter to keep track of the number of elements divisible by K\n        count = 0\n        # loop through each element in the tuple\n        for elem in tup:\n            # if the element is divisible by K, increment the counter\n            if elem % K == 0:\n                count += 1\n        # if the counter is equal to the number of elements in the tuple, append the tuple to the result list\n        if count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for tuple in test_list:\n        flag = True\n        for element in tuple:\n            if element % K!= 0:\n                flag = False\n                break\n        if flag:\n            tuples_list.append(tuple)\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    # Create a new list to store the resultant tuples\n    result = []\n    # Loop through each tuple in the input list\n    for tup in test_list:\n        # If all the elements are divisible by k, add it to the result list\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible_count = sum(1 for x in tup if x % K == 0)\n        if divisible_count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # check whether the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    This function takes an integer as input and returns True if it is divisible by 11 and False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        print(n, 'is divisible by 11')\n    else:\n        print(n, 'is not divisible by 11')"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return 'The length of the word is even.'\n    else:\n        return 'The length of the word is odd.'"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    \"\"\"\n    This function checks whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"The length of the word '{word}' is even.\")\n        else:\n            print(f\"The length of the word '{word}' is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    if len(word)%2 == 1:\n        print(\"The length of the word is odd\")\n    else:\n        print(\"The length of the word is even\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    for w in word:\n        if len(w) % 2 == 0:\n            print(w, \"is even.\")\n        else:\n            print(w, \"is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd, False otherwise.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # split the sentence into words\n    words = s.split()\n\n    # loop through each word and check its length\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n\n    # if all words have even length, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split() # split the string into words\n    for word in words:\n        if len(word) % 2 == 1: # check if the length of the word is odd\n            return \"odd\"\n        else:\n            return \"even\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split() # Split the string into words\n    for word in words:\n        if len(word) % 2 == 0: # Check if the length of the word is even\n            print(f\"{word} has an even length.\")\n        else:\n            print(f\"{word} has an odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2!= 0:\n            print(word, 'is odd.')\n        else:\n            print(word, 'is even.')"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and returns True if the length of the word is odd, False otherwise.\n    \"\"\"\n    word = s.split()[0]\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1)*(n+2)*(n+3))//6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the first two terms\n    t1 = 1\n    t2 = 4\n\n    # Calculate the remaining terms\n    for i in range(3, n+1):\n        t1 = (4*t1**2 + 6*t2) // 7\n        t2 = (12*t2**2 - 3*t1) // 7\n\n    return t1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    num = 0\n    \n    # Iterate through each number from 0 to n\n    for i in range(n+1):\n        # Calculate the nth tetrahedral number\n        num += i*(3*i-1)/2\n    \n    # Return the nth tetrahedral number\n    return num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    k = 1\n    m = 1\n    result = 0\n\n    # Loop through values of k, m\n    while k <= n:\n        result += m\n        k += 1\n        m += 1\n\n    return result"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * (1 + 4 * n - 6 * n**2 + 3 * n**3)) / (1 - 3 * n**2 + 3 * n**3)\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The\", n, \"th tetrahedral number is\", tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n    else:\n        num = 0\n        for i in range(n):\n            num += (i * (3 * i - 1) // 2) ** 2\n        print(num)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Define the first two tetrahedral numbers\n    a = 4\n    b = 6\n    for i in range(2, n+1):\n        # Calculate the next tetrahedral number\n        c = a + b\n        # Update the values for the next iteration\n        a = b\n        b = c\n    \n    # Return the nth tetrahedral number\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * tetrahedral_number(n-1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n - 1) * (n - 2) * (n - 3) * (n - 4)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n\n    # Initialize variables\n    c = 1  # Count of the number of sides\n    t = 1  # Count of the number of pyramids\n\n    # Main loop to find the nth tetrahedral number\n    while n > 0:\n        if n % 2 == 0:  # Even number of sides\n            c += 1\n            n //= 2\n        else:  # Odd number of sides\n            c -= 1\n            n //= 3\n\n        # If n is less than or equal to 0, then we have found the nth tetrahedral number\n        if n <= 0:\n            break\n\n        # Check for pyramid\n        if c % 2 == 1:\n            t += 1\n\n        # Update count of sides\n        c += 1\n        t += 1\n\n    return t"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return 4/3 * pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r**3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r ** 3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3)*pi*(r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_val = 0\n    for char in strr:\n        char_val += ord(char)\n    return chr((char_val % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    char_code = ascii_sum % 26\n    char = chr(char_code + ord('a'))\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for i in range(len(strr)):\n        ascii_sum += ord(strr[i])\n    return chr((ascii_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Convert the given string to a list of characters\n    str_list = list(strr)\n    # Initialize an empty string to store the result\n    char_str = ''\n    # Iterate over the characters of the list\n    for i in range(len(str_list)):\n        # Convert the ASCII value of the current character to a decimal integer\n        char_val = ord(str_list[i])\n        # Add the ASCII value to the result modulo 26\n        char_val_mod = (char_val + i) % 26\n        # Convert the result back to a character and append it to the result string\n        char_str += chr(char_val_mod)\n    # Return the result string\n    return char_str"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    \n    return chr((total % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    result = sum % 26\n    return chr(result + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    return char % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for i in range(len(strr)):\n        char_sum += ord(strr[i])\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    # Initialize an empty string to store the character\n    char_str = ''\n\n    # Iterate over each character in the string\n    for char in strr:\n        # Convert the character to ASCII value\n        ascii_val = ord(char)\n\n        # Add the ASCII value modulo 26 to the character string\n        new_val = (ascii_val + 1) % 26\n        char_str += chr(new_val)\n\n    return char_str"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    count = 0\n    while count < n:\n        for i in range(len(sequence)):\n            sequence[i] = sequence[i] + sequence[i - 1]\n        count += 1\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 1\n    elif n == 5:\n        return 2\n    elif n == 6:\n        return 3\n    elif n == 7:\n        return 5\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 13\n    elif n == 10:\n        return 21\n    elif n == 11:\n        return 34\n    elif n == 12:\n        return 55\n    elif n == 13:\n        return 89\n    elif n == 14:\n        return 144\n    elif n == 15:\n        return 233\n    elif n == 16:\n        return 377\n    elif n == 17:\n        return 610\n    elif n == 18:\n        return 987\n    elif n == 19:\n        return 1597\n    elif n == 20:\n        return 2584\n    else:\n        return \"Invalid input. Please enter a number between 0 and 20.\""
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 1, 1\n    for i in range(2, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return b\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th number in the newman conway sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(3 * sequence[-1] - sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    conway = [1]\n    for i in range(1, n):\n        new_conway = [0] * (i + 1)\n        for j in range(1, i + 1):\n            new_conway[j] = conway[j] + conway[j - 1]\n        conway = new_conway\n    return conway[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the Newman Conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(4 * sequence[-1] - sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    a = 1\n    b = 1\n    for i in range(2, n+1):\n        a, b = b, a + b\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # initialize variables\n    a, b = 0, 1\n    # loop to find nth number in sequence\n    for i in range(n):\n        a, b = b, a + b\n    # return the nth number in the sequence\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    This function finds the nth number in the Newman Conway sequence.\n\n    Args:\n        n (int): The value of n for which the nth number in the sequence should be found.\n\n    Returns:\n        int: The nth number in the sequence.\n\n    Raises:\n        ValueError: If the input value of n is not an integer.\n    \"\"\"\n\n    if not isinstance(n, int):\n        raise ValueError(\"Input value of n should be an integer.\")\n\n    if n < 1:\n        raise ValueError(\"Input value of n should be a positive integer.\")\n\n    sequence = [0] * (n + 1)\n    sequence[1] = 1\n\n    for i in range(2, n + 1):\n        sequence[i] = 3 * sequence[i - 1] - sequence[i - 2]\n\n    return sequence[n]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula for surface area of a sphere\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of a sphere using the formula:\n    # surface area = 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area using the formula:\n    # A = 4*pi*r^2\n    A = 4*math.pi*r**2\n    return A"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula to find surface area of a sphere\n    surface_area = 4 * math.pi * (r**2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi * r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3  # Using the formula for the surface area of a sphere\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2) + centered_hexagonal_number(n-3)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize the sum and count of centered hexagonal numbers\n    sum = 0\n    count = 0\n    # loop until we have found n centered hexagonal numbers\n    while count < n:\n        # add the next centered hexagonal number to the sum\n        sum += (6 * count ** 2) + (8 * count - 4)\n        # increment the count of centered hexagonal numbers\n        count += 1\n    # return the sum of centered hexagonal numbers\n    return sum"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    sum = 0\n    k = 1\n    \n    # Calculate centered hexagonal number\n    while k <= n:\n        sum += k\n        \n        # Check for odd values of k\n        if k % 2 == 1:\n            sum -= 4\n        \n        k += 1\n    \n    return sum"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_helper(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 10\n        else:\n            return centered_hexagonal_helper(n-1) + centered_hexagonal_helper(n-2) + centered_hexagonal_helper(n-3)\n    \n    return centered_hexagonal_helper(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case: if n is zero or one, return n\n    if n == 0 or n == 1:\n        return n\n    # Recursive case: return centered_hexagonal_number(n-1) + 1 + centered_hexagonal_number(n-2)\n    return centered_hexagonal_number(n-1) + 1 + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function returns the n-th centered hexagonal number.\n    '''\n\n    # Initialize variables\n    a = 1\n    b = 3\n\n    # Iterate n-1 times to find the nth centered hexagonal number\n    for i in range(1, n):\n        # Compute the current centered hexagonal number\n        c = (a + b) // 2\n\n        # Update the variables for the next iteration\n        a = b\n        b = c\n\n    # Return the nth centered hexagonal number\n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hex(n):\n        if n < 0:\n            return \"Invalid Input: n must be a non-negative integer.\"\n        elif n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return centered_hex(n-1) + 1\n    \n    return centered_hex(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    prev_row = [1]\n    row = [1]\n    next_row = [1]\n    \n    # Loop until nth row is created\n    for i in range(1, n):\n        row = [row[i-1] + row[i-2]] + next_row\n        next_row = prev_row + row\n        prev_row = row\n        \n    # Return nth row\n    return next_row"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # Finding the sum of centered hexagonal numbers up to n\n    hexagonal_sum = 1\n    centered_hexagonal_sum = 0\n    \n    # Loop for calculating the centered hexagonal sum\n    for i in range(1, n+1):\n        centered_hexagonal_sum += (i * (2 * i - 1)) // 2\n    \n    # Adding the centered hexagonal sum to the hexagonal sum\n    hexagonal_sum += centered_hexagonal_sum\n    \n    return hexagonal_sum"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((n - 1) * (n - 2) * (2 * n - 1)) / 6"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and returns a new dictionary\n    that contains the merged values of all the key-value pairs from the three dictionaries.\n    \"\"\"\n    merged_dict = dict()\n    # Merge the first dictionary with the second dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    # Merge the third dictionary with the merged dictionary\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = [dict1[key], dict2[key], dict3[key]]\n        elif key in dict2:\n            merged_dict[key] = [dict1[key], dict2[key]]\n        elif key in dict3:\n            merged_dict[key] = [dict1[key], dict3[key]]\n        else:\n            merged_dict[key] = dict1[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function merges three dictionaries into a single dictionary.\n\n    Parameters:\n    -----------\n    dict1, dict2, dict3 : dict\n        The three dictionaries that need to be merged.\n\n    Returns:\n    --------\n    dict\n        A merged dictionary with the key-value pairs of the three input dictionaries.\n    \"\"\"\n\n    # Create an empty dictionary to store the merged key-value pairs.\n    merged_dict = {}\n\n    # Loop through the three input dictionaries.\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    dict1 (dict): First dictionary to be merged.\n    dict2 (dict): Second dictionary to be merged.\n    dict3 (dict): Third dictionary to be merged.\n\n    Returns:\n    dict: A single dictionary that contains all the keys and values from all three dictionaries.\n\n    Example:\n    >>> dict1 = {'a': 1, 'b': 2}\n    >>> dict2 = {'b': 3, 'c': 4}\n    >>> dict3 = {'d': 5}\n    >>> merged_dict = merge_dictionaries_three(dict1, dict2, dict3)\n    >>> print(merged_dict)\n    {'a': 1, 'b': 3, 'c': 4, 'd': 5}\n    \"\"\"\n\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes in three dictionaries as input and merges them into one dictionary.\n    The keys in the first dictionary take precedence over the keys in the second dictionary,\n    and the keys in the third dictionary take precedence over both the first and second dictionaries.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Merges three dictionaries into a single dictionary.\n    \n    Args:\n        dict1 (dict): The first dictionary to merge.\n        dict2 (dict): The second dictionary to merge.\n        dict3 (dict): The third dictionary to merge.\n        \n    Returns:\n        dict: The merged dictionaries.\n    '''\n\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1,dict2,dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Get the frequency of all elements in a list, returned as a dictionary.\n\n    Args:\n        lst (list): The list to get the frequency of.\n\n    Returns:\n        dict: A dictionary with the frequency of each element in the list.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Using a dictionary to store the frequency of each element in the list\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    # Loop through the list and update the frequency of each element in the dictionary\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    # Return the dictionary containing the frequency of each element in the list\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # loop through each element in the list\n    for element in list1:\n        # check if the element is already in the dictionary\n        if element in freq_dict:\n            # increment its frequency by 1\n            freq_dict[element] += 1\n        else:\n            # add the element to the dictionary with a frequency of 1\n            freq_dict[element] = 1\n    # return the dictionary containing the frequency of each element\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N < 0:\n        return closest_num(-N) - 1\n    else:\n        return min(closest_num(N-1), N)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while True:\n        if n == 0:\n            return 1\n        elif n % 2 == 0:\n            n -= 1\n        else:\n            n += 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    # Create a list of numbers from 0 to N\n    nums = [i for i in range(N+1)]\n    \n    # Find the difference between the current number and the closest smaller number\n    diff = float('inf')\n    \n    # Iterate over the numbers and find the closest smaller number\n    for i in range(N+1):\n        if nums[i] < N:\n            diff = abs(nums[i] - N)\n            break\n    \n    return N - diff"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_num = N\n    for i in range(N-1, 0, -1):\n        if i % 2!= 0:\n            if i % 5 == 0:\n                smaller_num = i\n                break\n            else:\n                smaller_num = i\n                break\n    return smaller_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # loop through all the numbers from 1 to n\n    for num in range(1, N+1):\n        # check if the number is smaller than the closest number found so far\n        if num < closest:\n            # update the closest number found\n            closest = num\n        # check if the difference between the current number and the closest number is less than the smallest difference found so far\n        elif abs(num - closest) < smallest_diff:\n            # update the smallest difference found\n            smallest_diff = abs(num - closest)\n\n    # return the closest number found\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    num_list = []\n    while True:\n        num = int(input(\"Enter a number to check: \"))\n        if num < n:\n            num_list.append(num)\n        else:\n            break\n    num_list.sort()\n    print(\"The closest smaller number is:\", num_list[1])\n    print(\"The difference between the closest smaller and n is:\", abs(num_list[1] - n))"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 1:\n        return N\n    min_diff = float('inf')\n    closest_num = None\n    for i in range(1, N):\n        diff = abs(i - N)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = i\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    small = n - 1\n    while True:\n        if n == small:\n            break\n        if n < small:\n            n = (n + small) // 2\n        else:\n            n = (n + small - 1) // 2\n        if n == small:\n            break\n    print(\"The closest smaller number to\", n, \"is\", small)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    count = 0\n    min_diff = float('inf')\n    smallest = N\n    while True:\n        count += 1\n        num = N - count\n        diff = abs(num - N)\n        if diff < min_diff:\n            min_diff = diff\n            smallest = num\n        if diff < 1:\n            break\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # find the difference between N and the smallest number\n    diff = abs(N - min(N))\n    # find the smallest number that is greater than N\n    min_greater = min(N + diff, N - diff)\n    return min_greater"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of strings as input and returns the length of the longest word in the list.\n    '''\n    # Initialize a variable to store the length of the longest word\n    longest_word_length = 0\n\n    # Iterate over the list of strings\n    for word in list1:\n        # Find the length of the current word\n        current_word_length = len(word)\n\n        # Update the variable if the current word is longer than the previous longest word\n        if current_word_length > longest_word_length:\n            longest_word_length = current_word_length\n\n    # Return the length of the longest word\n    return longest_word_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a given list of words.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the list of strings to a set to remove duplicates\n    str_set = set(str1)\n\n    # Loop through the list of strings and check if the substring is present in the string\n    for s in str_set:\n        if sub_str in s:\n            return True\n\n    # If no substring is found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    for string in str1:\n        if sub_str in string:\n            return True\n\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(lst, sub_str):\n    for s in lst:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # convert sub_str to list for better performance\n    sub_str = sub_str.split()\n\n    # iterate through the list of strings\n    for item in str1:\n        # split the item into a list for better performance\n        item = item.split()\n\n        # compare the sub_str list with the item list\n        if sorted(sub_str) == sorted(item):\n            return True\n\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        print(f\"{sub_str} is present in {str1}\")\n    else:\n        print(f\"{sub_str} is not present in {str1}\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # convert sub_str to a list of characters\n    sub_str_list = list(sub_str)\n\n    # iterate through the list of strings\n    for str in str1:\n        # check if the substring is present in the string\n        if sub_str in str:\n            # if it is, return True\n            return True\n\n    # if the substring is not present in any of the strings, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check if the number is an odd number\n    if n % 2 == 1:\n        # Check if the number is a perfect square\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0 or n == 1 or n == 2:\n        return \"It is a prime number.\"\n    else:\n        return \"It is an undulating number.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"Not an undulating number\"\n    else:\n        return \"An undulating number\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return \"Not an undulating number\"\n    else:\n        return \"An undulating number\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes a single integer argument n and returns True if the number is undulating, and False otherwise.\n    \"\"\"\n    if n % 2 == 0:  # if the number is even\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 5:\n        return False\n    if n == 5:\n        return True\n    if n % 5 == 0:\n        return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # If the number is odd, it's undulating\n    if n % 2 == 1:\n        return True\n    # If the number is even, it's not undulating\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return \"It's not undulating\"\n    elif n % 2 == 0:\n        return \"It's undulating\"\n    else:\n        return \"It's not undulating\""
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int): the base of the power\n    b (int): the exponent of the power\n\n    Returns:\n    int: the value of 'a' to the power 'b'\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = None\n    min_value = None\n    for index, value in enumerate(test_list):\n        if min_index is None or value[1] < min_value[1]:\n            min_index = index\n            min_value = value\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list in ascending order based on the second value of each tuple\n    test_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the smallest tuple\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    \"\"\"\n    index_min = 0\n    for i, tup in enumerate(test_list):\n        if tup[1] < test_list[index_min][1]:\n            index_min = i\n    return index_min"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < minimum[1]:\n            minimum = test_list[i]\n    return minimum[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n    return min_index"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 10000000 # Assuming that any list will be at least this long.\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize the minimum length to the maximum length\n    min_length = float('inf')\n\n    # Loop through each sublist in the list of lists\n    for sublist in lst:\n        # Find the length of the current sublist\n        length = len(sublist)\n\n        # If the length is smaller than the minimum, update the minimum\n        if length < min_length:\n            min_length = length\n\n    # Return the minimum length\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = len(lst[0])  \n    for sublist in lst:  \n        if len(sublist) < min_len:  \n            min_len = len(sublist)  \n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for sub_list in lst:  \n        if len(sub_list) < min_length:  \n            min_length = len(sub_list)  \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 100000\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = None\n    for lst in lst:\n        if min_length is None or len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')   # initialize variable to store minimum length\n    for i in range(len(lst)):   # loop through each sublist in the list\n        for j in range(len(lst[i])):   # loop through each element in the sublist\n            if lst[i][j] < min_length:   # if current element is less than current minimum, update minimum length\n                min_length = lst[i][j]   # update minimum length\n    return min_length   # return the minimum length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            count += 2\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + divisor(n-1)\n\nprint(divisor(12))"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n\n    # initialize variables\n    count = 0\n    divisor_list = []\n\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n\n        # check if i is a divisor of n\n        if n % i == 0:\n\n            # if i is a divisor, append it to the list and increment count\n            divisor_list.append(i)\n            count += 1\n\n    # return the count and list of divisors\n    return count, divisor_list"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create a dictionary to store the frequency of each element in the flattened list\n    freq_dict = {}\n    # Loop through each element in the flattened list\n    for elem in list1:\n        # If the element is not already in the dictionary, add it with a frequency of 1\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[elem] += 1\n    # Return the dictionary containing the frequency of each element in the flattened list\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary\n    freq_dict = {}\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in list1 for item in sublist]\n    # Loop through the flattened list and update the frequency count in the dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # Return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store frequency of each element\n    freq_dict = {}\n\n    # Iterate through the flattened list and update the frequency count in the dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Flatten the list of lists to a single list\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Iterate over each element in the flattened list\n    for item in flat_list:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if item in freq:\n            freq[item] += 1\n        # If the element is not in the dictionary, add it with frequency 1\n        else:\n            freq[item] = 1\n\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Create an empty dictionary to store frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the flattened list of lists\n    for element in list1:\n\n        # If the element is not already in the dictionary, add it with a frequency of 1\n        if element not in freq_dict:\n            freq_dict[element] = 1\n\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[element] += 1\n\n    # Return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # initialize an empty dictionary\n    freq_dict = {}\n    \n    # loop through each element in the list\n    for element in list1:\n        # check if the element is already in the dictionary\n        if element in freq_dict:\n            # if it is, increment its frequency count\n            freq_dict[element] += 1\n        else:\n            # if not, add it with a frequency count of 1\n            freq_dict[element] = 1\n    \n    # return the final dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Define an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through each element in the flattened list of lists\n    for sublist in list1:\n        # Loop through each element in the sublist and update the frequency count in the dictionary\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    \n    # Return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through each element in the list and update the frequency in the dictionary\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    # Return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return [num * len(numbers) for num in numbers]"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    # multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n\n    # divide the result by the length of the list\n    result /= len(numbers)\n\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product // len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return '0'\n    else: \n        binary = ''\n        while n > 0: \n            binary = str(n % 2) + binary \n            n //= 2 \n        return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # base case: if n is zero, return \"0\"\n    if n == 0:\n        return \"0\"\n\n    # recursive case: convert n/2 to binary recursively\n    binary = decimal_to_binary(n//2)\n\n    # append the last digit of binary to the beginning of the string\n    binary = binary[-1] + binary[:-1]\n\n    # append the last digit of n to the beginning of the string\n    binary = str(n) + binary\n\n    # add leading zeros to binary until it has at least 10 digits\n    while len(binary) < 10:\n        binary = \"0\" + binary\n\n    # return the final binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_num = \"\"\n    while n > 0:\n        binary_num = str(n % 2) + binary_num\n        n //= 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    # Convert the decimal number to binary\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    # Initialize variables\n    binary = \"\"\n    remainder = n\n    \n    # Iterate over each bit of the decimal number\n    while remainder > 0:\n        bit = remainder % 2\n        binary = str(bit) + binary\n        remainder //= 2\n    \n    # If there is a remainder, add a '1' to the binary string\n    if remainder == 1:\n        binary = \"1\" + binary\n    \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    # Initialize an empty list to store the binary digits\n    binary = []\n    # Convert the decimal number to its binary equivalent\n    while n > 0:\n        # Get the remainder of n divided by 2\n        remainder = n % 2\n        # Add the remainder to the beginning of the binary list\n        binary.insert(0, remainder)\n        # Divide n by 2 to remove the last digit\n        n = n // 2\n    # Convert the binary list to a string and return it\n    return \"\".join(map(str, binary))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    num_str = str(num)\n    return num_str == num_str[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n    \"\"\"\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num\n\n    # If the number is not a palindrome, find the next smallest palindrome\n    num_str = str(num)\n    max_num = int(num_str[-1])\n    for i in range(999999, 100000, -1):\n        num_str = str(i)\n        if len(num_str) == 2 and num_str[0] == '0':\n            break\n        if is_palindrome(int(num_str)):\n            return int(num_str)\n        if int(num_str[-1]) < max_num:\n            return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Initialize variables\n    palindrome = False\n    largest_palindrome = 0\n    \n    # Check if the number is already a palindrome\n    for i in range(10**num, -1, -1):\n        if str(i) == str(i)[::-1]:\n            palindrome = True\n            largest_palindrome = i\n            break\n    \n    # If the number is not a palindrome, find the next smallest palindrome\n    if not palindrome:\n        for i in range(1, 10**num):\n            if int(str(i*10)[::-1]) == i:\n                next_palindrome = i*10\n                largest_palindrome = next_palindrome\n                break\n    \n    # Return the next smallest palindrome\n    return largest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Get the largest palindrome smaller than or equal to the given number\n    largest_palindrome = 0\n    while num >= largest_palindrome:\n        palindrome = largest_palindrome * 10 + 1\n        if palindrome > num:\n            break\n        if is_palindrome(palindrome):\n            largest_palindrome = palindrome\n\n    # Find the next smallest palindrome\n    smallest_palindrome = largest_palindrome + 1\n    while not is_palindrome(smallest_palindrome):\n        smallest_palindrome += 1\n\n    return smallest_palindrome\n\n\ndef is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    if num < 0:\n        return False\n    num_str = str(num)\n    for i in range(len(num_str) // 2):\n        if num_str[i]!= num_str[-(i + 1)]:\n            return False\n    return True\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Find the smallest positive integer that is divisible by 10\n    smallest_multiple = 10**(num//10)\n    \n    # Find the smallest positive palindrome that is not less than the smallest multiple\n    next_smallest_palindrome = smallest_multiple + 1\n    \n    # Check if the next smallest palindrome is within the range of the specified integer\n    if next_smallest_palindrome > num:\n        return None\n    else:\n        return next_smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Use string manipulation to reverse the number and check if it is a palindrome\n    reversed_num = str(num)[::-1]\n    if int(reversed_num) == int(reversed_num[::-1]):\n        # If the reversed number is a palindrome, find the next smallest palindrome\n        for i in range(10**9, 10**9-1, -1):\n            reversed_i = str(i)[::-1]\n            if int(reversed_i) == int(reversed_i[::-1]) and int(reversed_i) < int(reversed_num):\n                return int(reversed_i)\n    # If no next smallest palindrome is found, return -1\n    return -1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to string\n    num_str = str(num)\n    # Reverse the string\n    rev_num_str = num_str[::-1]\n    # Check if the reversed string is palindrome or not\n    if rev_num_str == rev_num_str[::-1]:\n        # Find the next smallest palindrome\n        next_num = int(num_str + '9')\n        # Convert the next smallest palindrome to string and check if it is palindrome or not\n        next_num_str = str(next_num)\n        if next_num_str == next_num_str[::-1]:\n            return int(next_num)\n        else:\n            return next_smallest_palindrome(next_num)\n    else:\n        # Find the next smallest palindrome by adding '9' to the original integer\n        next_num = int(num_str + '9')\n        # Convert the next smallest palindrome to string and check if it is palindrome or not\n        next_num_str = str(next_num)\n        if next_num_str == next_num_str[::-1]:\n            return int(next_num)\n        else:\n            return next_smallest_palindrome(next_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # initialize variables\n    is_odd = True\n    half_max = 1\n    palindrome = num\n    while True:\n        # check if current palindrome is smaller than half of the maximum integer value\n        if half_max * half_max >= palindrome * 10:\n            is_odd = not is_odd\n        # convert integer to string and check if it's palindrome\n        palindrome_string = str(palindrome)\n        is_palindrome = True\n        for i in range(len(palindrome_string) // 2):\n            if palindrome_string[i]!= palindrome_string[-(i+1)]:\n                is_palindrome = False\n                break\n        # if the current palindrome is smaller than half of the maximum integer value and it's a palindrome, return it\n        if is_palindrome and (palindrome - half_max) >= num:\n            return palindrome\n        # update the half_max value\n        if is_odd:\n            half_max *= 10\n        else:\n            half_max *= 100"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the number is even or odd\n    if num % 2 == 0:\n        # set the maximum value for the palindrome to be half the original number\n        max_palindrome = (num // 2) * 10 + 9\n    else:\n        # set the maximum value for the palindrome to be half the original number + 1\n        max_palindrome = ((num // 2) + 1) * 10 + 9\n    \n    # loop through all possible palindromes\n    for i in range(max_palindrome):\n        # check if the palindrome is a palindrome\n        if str(i) == str(i)[::-1]:\n            # if it is, check if it is smaller than the current number\n            if i < num:\n                return i\n            \n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # check if num is a palindrome\n    if num == int(str(num)[::-1]):\n        # if it is, return num + 1\n        return num + 1\n    else:\n        # if it's not, find the next smallest palindrome\n        while True:\n            # add the number to itself\n            num += num\n            # check if it's a palindrome\n            if str(num) == str(num)[::-1]:\n                # if it is, return it\n                return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Returns True if the given number is palindrome, False otherwise.\n    \"\"\"\n    if str(num) == str(num)[::-1]:\n        return True\n    else:\n        return False\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of the given number, as an integer.\n    \"\"\"\n    if is_palindrome(num):\n        # If the number is already a palindrome, then return the next smallest palindrome.\n        next_num = int(str(num)[1:-1] + str(num)[-1])\n        return next_smallest_palindrome(next_num)\n    else:\n        # If the number is not a palindrome, then find the largest palindrome smaller than the number.\n        max_palindrome = 0\n        for i in range(10**(len(str(num))-1), 10**len(str(num))-10, -1):\n            if is_palindrome(i):\n                max_palindrome = i\n                break\n        return max_palindrome\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 2:\n        try:\n            num = int(sys.argv[1])\n            print(next_smallest_palindrome(num))\n        except ValueError:\n            print(\"Invalid input.\")\n    else:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Validate input\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Iterate until the left pointer reaches k-1\n    while left <= right:\n        # Find the middle element of the current range\n        mid = left + (right - left) // 2\n\n        # If kth element is found, return it\n        if mid == k - 1:\n            return arr[mid]\n\n        # If kth element is in the left half of the range\n        elif mid < k - 1:\n            # Update the right pointer\n            right = mid - 1\n\n        # If kth element is in the right half of the range\n        else:\n            # Update the left pointer\n            left = mid + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return \"Invalid input: k is greater than the length of the array\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array has at least k elements\n    if len(arr) < k:\n        return None\n    \n    # Initialize two pointers: left and right\n    left = 0\n    right = len(arr) - 1\n    \n    # Move the pointers towards each other until they meet in the middle\n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # If the value at the midpoint is greater than k, update the right pointer\n        if arr[mid] > k:\n            right = mid\n        # If the value at the midpoint is less than or equal to k, update the left pointer\n        else:\n            left = mid + 1\n    \n    # If the value at the midpoint is k, return the midpoint value\n    if arr[left] == k:\n        return k\n    # If the value at the midpoint is greater than k, return the value to its left\n    else:\n        return arr[left - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array and a positive integer k as input and returns the kth element in the array.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        raise ValueError(\"k is greater than the length of the array\")\n\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array of integers and an integer k and returns the kth smallest element in the array.\n    '''\n    # Create a min heap of size k, to keep track of the smallest k elements\n    min_heap = [float('inf')] * k\n    n = len(arr)\n    \n    # Build the min heap by iterating through the array and updating the heap\n    for i in range(n):\n        # If the current element is smaller than the root of the heap, swap it with the root\n        if arr[i] < min_heap[0]:\n            min_heap[0], arr[i] = arr[i], min_heap[0]\n        \n        # Update the heap by moving the root element downwards\n        for j in range(1, k):\n            if arr[i] < min_heap[j]:\n                min_heap[j], arr[i] = arr[i], min_heap[j]\n        \n        # If the heap size exceeds k, remove the smallest element from the end of the array\n        if len(min_heap) > k:\n            min_heap.pop()\n            \n    # Return the kth smallest element\n    return min_heap[0]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    i = 0\n    while i < n and k > 0:\n        k -= 1\n        i += 1\n    if i < n:\n        return arr[i-1]\n    else:\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    elif k == 1:\n        return arr[0]\n    else:\n        smaller = kth_element(arr[:len(arr)//2], k)\n        larger = kth_element(arr[len(arr)//2:], k-len(arr)//2)\n        return smaller if smaller < larger else larger"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i > 0 and word[i] == \"_\":\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Splitting the word into words using snake case\n    words = word.split('_')\n    \n    # Converting the first letter of each word to uppercase and rest of the letters to lowercase\n    camel_case = words[0].upper()\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n        \n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = \"\"\n    for i in range(len(word)):\n        if i == 0 and word[i].isupper():\n            camel_word += word[i].lower()\n        elif i > 0 and word[i].isupper():\n            camel_word += \"_\" + word[i].lower()\n        elif i == 0 and not word[i].isupper():\n            camel_word += word[i]\n        else:\n            camel_word += word[i].lower()\n    return camel_word.title()"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Splitting the word into words\n    words = word.split('_')\n\n    # Converting the first word to capital letter\n    first_word = words[0].capitalize()\n\n    # Converting all the other words to lowercase\n    words = [word.lower() for word in words[1:]]\n\n    # Joining the words into a camel case string\n    camel_case = first_word + ''.join(words)\n\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split the word into words\n    words = word.split('_')\n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # join the words with underscores\n    result = '_'.join(words)\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the first character to lowercase and append it to the camel case string\n    camel_case = word[0].lower() + word[1:]\n    # Convert all remaining characters to uppercase and append them to the camel case string\n    for i in range(2, len(word)):\n        camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the snake case string into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word and join them with underscore\n    camel_case_string = ''.join([word.capitalize() for word in words])\n    return camel_case_string"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    parts = word.split('_')\n    parts[0] = parts[0].lower()\n    return ''.join(parts)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the given word to snake case\n    snake_word = word.replace('_','')\n    # Split the snake case string into words\n    words = snake_word.split()\n    # Convert the first word to camel case\n    camel_word = words[0].capitalize()\n    # Join the camel case words into a camel case string\n    camel_case = ''.join(camel_word.capitalize() for camel_word in words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_letter = word[0].lower()\n    remaining_letters = word[1:]\n    camel_word = first_letter + remaining_letters.capitalize()\n    return camel_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = n * m # initialize the value of a\n    \n    for i in range(1, n): # iterate over the number of iterations \n        a += i * (m - i) # add the current value of a to the sum\n    \n    return a # return the final value of a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the Eulerian number a(1, 1) to 1\n    a = 1\n\n    # Check if the triangle is a valid right triangle\n    if n > m:\n        # If it is, iterate through all possible pairs of sides a, b, and c\n        for a in range(1, n+1):\n            for b in range(a, m+1):\n                c = m - b\n                if a + b > c and a + c > b and b + c > a:\n                    # Calculate the value of a(n, m)\n                    a_n_m = a*n**2 + b*n + c\n                    # Update the Eulerian number if it is larger\n                    if a_n_m > a:\n                        a = a_n_m\n    else:\n        # If the triangle is not a right triangle, check if it is a valid scalene triangle\n        for a in range(1, n+1):\n            for b in range(1, m+1):\n                c = n - a - b\n                if a + b > c and a + c > b and b + c > a:\n                    # Calculate the value of a(n, m)\n                    a_n_m = a*n**2 + b*n + c\n                    # Update the Eulerian number if it is larger\n                    if a_n_m > a:\n                        a = a_n_m\n\n    # Return the Eulerian number a(n, m)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # To calculate the Eulerian number, we need to know how to write a^n - b^m = 1. \n    # In this case, a = 1 and b = 0. Therefore, the Eulerian number can be found as:\n    # a^n - b^m = 1\n    # a^n - 1 = b^m\n    # a^(n-1) - 1 = b^m\n    # a^(n-1) = b^(m+1)\n\n    # First, we calculate a^(n-1). We can do this by using a loop to iterate over n-1 and multiplying a by itself.\n    a = 1\n    for i in range(n-1):\n        a = a * a\n\n    # Next, we calculate b^(m+1). We can do this by using a loop to iterate over m+1 and multiplying b by itself.\n    b = 0\n    for i in range(m+1):\n        b = b * b\n\n    # Finally, we calculate the Eulerian number as a^(n-1) - 1 = b^m\n    return a**(n-1) - 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1:\n        return (n + 1) * n // 2\n    else:\n        return (n + 1) * (m - 1) * eulerian_num(n, m - 1) // (m * (m - 1))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize the sum variable\n    sum = 0\n\n    # Loop through all possible values of n and m\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            # Calculate the sum of the squares of i and j\n            sum += i**2 + j**2\n\n    # Return the sum of squares of n and m\n    return sum"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    a = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            # Check if the path from (1,1) to (i,j) exists\n            if i == j:\n                continue\n            elif i > j:\n                a += 1\n\n    # Return the value of a(n, m)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(n+1):\n        a += (-1)**(i-1) * (2*i-1)**m\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize matrix of size (n+1) x (m+1)\n    matrix = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Fill the matrix with values\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                matrix[i][j] = 1\n            elif i == 1:\n                matrix[i][j] = matrix[i-1][j]\n            elif j == 1:\n                matrix[i][j] = matrix[i][j-1]\n            else:\n                matrix[i][j] = matrix[i-1][j] + matrix[i][j-1] - matrix[i-1][j-1]\n\n    # Return the value of a(n, m)\n    return matrix[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Check if n and m are integers and non-zero\n    if not isinstance(n, int) or not isinstance(m, int) or n <= 0 or m <= 0:\n        raise ValueError(\"n and m must be non-zero positive integers\")\n\n    # Check if n and m are coprime\n    for i in range(2, n):\n        if n % i == 0 and m % i == 0:\n            raise ValueError(\"n and m must be coprime\")\n\n    # Initialize the Eulerian number\n    a = 1\n\n    # Initialize the prime factorization of m\n    prime_factors = {}\n    for i in range(2, int(m**0.5) + 1):\n        if m % i == 0:\n            prime_factors[i] = prime_factors.get(i, 0) + 1\n            m //= i\n\n    # Iterate through the prime factors and compute the Eulerian number\n    for p, n in prime_factors.items():\n        a = (a * (p - 1) // n) % m\n\n    # Return the Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 0\n    elif m == 1:\n        return n\n    else:\n        return n * eulerian_num(n, m-1)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for sublist in input_list:\n        sublist.sort()\n\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop over each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the sort() method\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for num in lst:\n        if num:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Using the extend() method to append a list to a tuple\n    test_tup.extend(test_list)\n\n    # Printing the new tuple\n    print(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = tuple(test_list)\n    test_tup += test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    print(\"The updated tuple is:\", test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    print(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # create a new list to hold the concatenated elements\n    new_list = []\n    # loop through the tuples and add each element to the new list\n    for element in test_tup:\n        new_list.append(element)\n    # append the list of elements to the first tuple\n    test_tup[0] += new_list\n    # return the updated tuples\n    return test_list, test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into a single sorted list\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine all the lists into a single sorted list\n    combined_list = sorted(num1 + num2 + num3)\n\n    # Create a min heap of size 3\n    heap = []\n    for num in combined_list:\n        heapq.heappush(heap, num)\n\n    # Extract the minimum elements from the heap and combine them into a single sorted list\n    merged_list = []\n    while len(heap) > 0:\n        merged_list.append(heapq.heappop(heap))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three lists as arguments and merges them into a single sorted list.\n\n    :param num1: list of integers\n    :param num2: list of integers\n    :param num3: list of integers\n    :return: A single sorted list containing the elements of the input lists.\n    \"\"\"\n    # Create a min heap of length three\n    min_heap = []\n\n    # Add all the elements of num1 to the min heap\n    for num in num1:\n        heapq.heappush(min_heap, num)\n\n    # Add all the elements of num2 to the min heap\n    for num in num2:\n        heapq.heappush(min_heap, num)\n\n    # Add all the elements of num3 to the min heap\n    for num in num3:\n        heapq.heappush(min_heap, num)\n\n    # Merge the min heap into a single sorted list\n    sorted_list = []\n    while len(min_heap) > 0:\n        sorted_list.append(heapq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n\n    # Combine the three lists into one single list\n    combined_list = num1 + num2 + num3\n\n    # Use heapify to convert the list into a heap\n    heapq.heapify(combined_list)\n\n    # Extract the elements from the heap and add them to a new list\n    sorted_list = []\n    while combined_list:\n        sorted_list.append(heapq.heappop(combined_list))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a list of tuples containing the elements of each list\n    lists = [num1, num2, num3]\n    \n    # Initialize an empty heap for the merged list\n    merged = []\n    \n    # Iterate through the lists and add the elements to the heap\n    for lst in lists:\n        for item in lst:\n            heapq.heappush(merged, item)\n    \n    # Iterate through the heap and add the elements to the merged list\n    while merged:\n        merged.append(heapq.heappop(merged))\n    \n    # Return the merged list as a new list\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Concatenate the three lists\n    merged_list = num1 + num2 + num3\n    # Sort the merged list\n    sorted_list = heapq.nsmallest(len(merged_list), merged_list)\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Initialize an empty heap\n    heap = []\n    \n    # Convert the lists to heaps using heapq\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n    \n    # Merge the heaps into a single sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into a single list\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merges three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge the first two lists\n    merged_list = merge_lists(num1, num2)\n\n    # Merge the merged list with the third list\n    merged_and_sorted_list = merge_lists(merged_list, num3)\n\n    return merged_and_sorted_list\n\ndef merge_lists(list1, list2):\n    \"\"\"\n    Merges two sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    i, j = 0, 0\n\n    # Merge the two lists into a single list\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n\n    # Add any remaining elements from the first list\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n\n    # Add any remaining elements from the second list\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Combine all the lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Create a max heap with the combined list\n    max_heap = []\n    for num in merged_list:\n        heapq.heappush(max_heap, num)\n    \n    # Create a new empty list to store the sorted elements\n    sorted_list = []\n    \n    # Pop the maximum element from the max heap and append it to the sorted list\n    while max_heap:\n        sorted_list.append(heapq.heappop(max_heap))\n    \n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    # initialize count variable to zero\n    count = 0\n    # convert the binary string to a list of integers\n    s = list(map(int, bin(int(s, 2))[2:]))\n    # loop n number of times\n    for i in range(n):\n        # reverse the list\n        s.reverse()\n        # loop through the list and add odd integers to count\n        for j in range(len(s)):\n            if s[j] % 2!= 0:\n                count += 1\n    # return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n):\n    s = list(s)\n    for _ in range(n):\n        s.append(s.pop(0))\n    odd_count = 0\n    for num in s:\n        if num % 2!= 0:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the input string to binary\n    binary_s = bin(int(s))[2:]\n\n    # Initialize variables for odd count and odd equivalent count\n    count = 0\n    odd_equivalent_count = 0\n\n    # Loop through each rotation of the binary string\n    for i in range(n):\n        # Check if the next rotation will have an odd count\n        if binary_s[0] == '1':\n            count += 1\n        # Check if the next rotation will have an odd equivalent count\n        elif count > 0:\n            odd_equivalent_count += count\n\n        # Rotate the binary string to the right by one character\n        binary_s = binary_s[1:] + binary_s[0]\n\n    # Return the number of odd equivalent counts\n    return odd_equivalent_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[::-1] # rotating the string by 1 position to the left\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    This function takes a binary string (s) and an integer (n) as input and returns the number of odd numbers in the rotated binary string.\n    '''\n    if len(s) % 2 == 0:\n        # If the length of the binary string is even, it cannot be rotated to get an odd number.\n        return 0\n\n    # Find the length of the binary string.\n    length = len(s)\n\n    # Initialize a boolean flag to keep track of whether we have seen an odd number.\n    has_odd = False\n\n    # Loop through each rotation of the binary string.\n    for i in range(n):\n        # Initialize a variable to keep track of the current digit being processed.\n        digit = 0\n\n        # Loop through each digit of the binary string.\n        for j in range(length):\n            # Add the current digit to the current digit being processed.\n            digit = digit + int(s[j])\n\n            # If the digit is odd and we have not seen an odd number before, increment the count and set the flag.\n            if digit % 2 == 1 and not has_odd:\n                has_odd = True\n\n            # If the digit is odd and we have seen an odd number before, increment the count.\n            elif digit % 2 == 1:\n                has_odd = True\n\n            # If the digit is even and we have seen an odd number before, decrement the count.\n            elif digit % 2 == 0 and has_odd:\n                has_odd = False\n\n            # If the digit is zero, reset the count and the flag.\n            elif digit == 0:\n                has_odd = False\n                digit = 0\n\n    # Return the count of odd numbers.\n    return has_odd"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    odds = 0\n    for i in range(n):\n        s = ''.join([str(int(x) ^ 1) for x in s])\n    for i in range(len(s)):\n        if int(s[i]) & 1 == 1:\n            odds += 1\n    return odds"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    s = s + s # Rotating the binary string n times\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and a positive integer n as input.\n    The function rotates the binary string s n times and then counts the number of odd numbers in the resulting string.\n\n    Args:\n        s (str): the binary string to be rotated.\n        n (int): the number of times to rotate the string.\n\n    Returns:\n        int: the number of odd numbers in the resulting string.\n\n    Example:\n        odd_Equivalent(\"10110\", 2) => 1\n\n    \"\"\"\n\n    # Convert the binary string to a list of digits\n    s = list(map(int, list(s)))\n\n    # Rotate the list n times\n    for _ in range(n):\n        s.append(s.pop(0))\n\n    # Count the number of odd numbers in the rotated list\n    odd_count = sum(1 for i in s if i % 2!= 0)\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    # initialize variables\n    count = 0\n    s = list(s)\n    length = len(s)\n    \n    # perform the rotation n times\n    for i in range(n):\n        # rotate the string to the right\n        for j in range(length//2):\n            s[j], s[length-1-j] = s[length-1-j], s[j]\n            \n        # count the number of odd numbers\n        count += sum(1 for x in s if x % 2!= 0)\n        \n        # rotate the string to the left\n        for j in range(length//2):\n            s[j], s[length-1-j] = s[length-1-j], s[j]\n            \n    # return the number of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    binary_string = bin(int(s, 2))[2:]\n    count = 0\n    for i in range(n):\n        new_binary_string = binary_string[-len(binary_string):] + binary_string[:len(binary_string)]\n        count += new_binary_string.count('1')\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set()\n    for lst in nestedlist:\n        common_set.update(set(lst))\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Creating a set to store common elements in the nested list\n    common_set = set()\n\n    # Traversing through the nested list\n    for item in nestedlist:\n        # Checking if the item is a list\n        if isinstance(item, list):\n            # Recursively calling the function for the nested list\n            common_in_nested_lists(item)\n        else:\n            # Adding the item to the set if it's not already there\n            if item not in common_set:\n                common_set.add(item)\n\n    # Returning the common set as a list\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] not in common:\n                    common.append(nestedlist[i][j][k])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common_elements += list(set(nestedlist[i]) & set(nestedlist[j]))\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Helper function to check if two lists have any common elements\n    def common(list1, list2):\n        return set(list1) & set(list2)\n    \n    # Create an empty set to store common elements\n    common_elements = set()\n    \n    # Iterate over the lists in the nested list\n    for list1 in nestedlist:\n        # Check if the list is a sublist of the next list\n        for list2 in nestedlist[nestedlist.index(list1)+1:]:\n            # If they have any common elements, add them to the set of common elements\n            if common(list1, list2):\n                common_elements |= set(list1)\n    \n    # Convert the set of common elements to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for i in nestedlist:\n        if isinstance(i, list):\n            common += common_in_nested_lists(i)\n        else:\n            common.append(i)\n    return set(common)\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = set()\n    for item in nestedlist:\n        for subitem in item:\n            if subitem in common_elements:\n                common_elements.remove(subitem)\n            else:\n                common_elements.add(subitem)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty set to store the common elements\n    common = set()\n\n    # iterate over the nested lists\n    for sublist in nestedlist:\n        # iterate over the elements of the current sublist\n        for element in sublist:\n            # add the element to the common set if it's not already there\n            if element not in common:\n                common.add(element)\n\n    # return the common elements as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n\n    for sublist in nestedlist:\n        for element in sublist:\n            common_elements.add(element)\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                common.append(nestedlist[i])\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    # Check if the first character is a digit\n    if text[0].isdigit():\n        # Check if the rest of the string consists of only digits\n        for char in text[1:]:\n            if not char.isdigit():\n                return False\n        # If all characters are digits, it is an integer\n        return True\n    # If the first character is not a digit, it is not an integer\n    return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    This function checks if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n\n    # check if text starts with a digit\n    if text[0].isdigit():\n        # check if all the characters in text are digits\n        for char in text:\n            if not char.isdigit():\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    empty_list = []\n    for i in list1:\n        if not i:\n            empty_list.append(i)\n    if empty_list:\n        return \"All dictionaries are empty\"\n    else:\n        return \"There are dictionaries in the list that are not empty\""
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    \n    for item in list1:\n        if len(item)!= 0:\n            return False\n    \n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for i in list1:\n        if not i:\n            return False\n    \n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Check whether all dictionaries in the list are empty or not\n    for i in range(len(list1)):\n        if list1[i]!= {}:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Create a single integer from the tuple of integers\n    int_num = sum(nums)\n    return int_num"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, str):\n                try:\n                    float(element)\n                    sublist.remove(element)\n                except ValueError:\n                    pass\n            elif isinstance(element, list):\n                list_to_float(sublist)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                float(test_list[i][j])\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                float(test_list[i][j])\n            except ValueError:\n                try:\n                    float(str(test_list[i][j]))\n                except ValueError:\n                    if '.' in str(test_list[i][j]):\n                        test_list[i][j] = float(test_list[i][j])\n                    else:\n                        test_list[i][j] = float(test_list[i][j] + '.0')\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [int, float]:\n                test_list[i][j] = float(test_list[i][j])\n            elif isinstance(test_list[i][j], list):\n                list_to_float(test_list[i][j])"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n                row[row.index(item)] = float(item)\n            except ValueError:\n                pass"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string by the space character\n    split_string = string.split()\n    # Return the list of split strings\n    return split_string"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return None\n\n    for i in range(len(arr)):\n        if i!= arr.index(arr[i]):\n            return arr[i]\n\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return None\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    if len(arr)!= len(set(arr)):\n        return None\n\n    for i in range(len(arr)):\n        if arr[i] == i+1:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n\n    count = 0\n    for num in arr:\n        if num == arr[count]:\n            count += 1\n        else:\n            arr[count] = arr[count - 1]\n            count -= 1\n\n    return arr[count]\n"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element\n    freq = {}\n    \n    # Traverse the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n            \n    # Traverse the dictionary and find the element that appears only once\n    for num in freq:\n        if freq[num] == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to store the unique element\n    unique_element = None\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is not equal to the previous unique element, update the unique element and set the current element as the previous unique element\n        if arr[i]!= unique_element:\n            unique_element = arr[i]\n        \n        # If the unique element is found, return it\n        if unique_element!= None:\n            return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize variables to store the count and the element\n    count = 0\n    element = None\n    \n    # Iterate through the array\n    for num in arr:\n        # If the count is 0 and the current element is not equal to the previous element,\n        # set the count to 1 and the element to the current element\n        if count == 0 and num!= element:\n            count = 1\n            element = num\n        \n        # If the count is greater than 0 and the current element is equal to the previous element,\n        # increment the count\n        elif count > 0 and num == element:\n            count += 1\n            \n    # If count is 1, return the element\n    if count == 1:\n        return element\n    \n    # Otherwise, return None\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count = 1\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    count += 1\n                    if count == 2:\n                        return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        # If the number is already in the dictionary, increment its frequency\n        if num in freq:\n            freq[num] += 1\n        # If the number is not in the dictionary, add it with frequency 1\n        else:\n            freq[num] = 1\n    # Initialize an empty list to store the unique elements\n    unique_elems = []\n    # Iterate through the dictionary to find the unique elements and their frequencies\n    for elem, freq in freq.items():\n        # If the frequency of the element is 1, add it to the list of unique elements\n        if freq == 1:\n            unique_elems.append(elem)\n    # Return the unique element if it exists, else return None\n    return unique_elems[0] if unique_elems else None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Iterate through the array and keep track of elements that appear only once\n    element = arr[0]\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == element:\n            count += 1\n        else:\n            element = arr[i]\n            count = 1\n\n    # Return the element that appears only once\n    return element"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            abs_product = abs(list1[i][0]*list1[j][1])\n            if abs_product > max_product:\n                max_product = abs_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    max_product_tuple = (-1, -1)\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if j == i+1:\n                continue\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n                max_product_tuple = (list1[i], list1[j])\n    return max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize a list to store the maximum absolute product between pairs of tuples\n    max_abs_product = []\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Iterate through the list of tuples starting from the current index + 1\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product between the numbers in the current pair of tuples\n            abs_product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n\n            # If the absolute product is greater than the maximum absolute product found so far, update the maximum absolute product\n            if abs_product > max_abs_product[0]:\n                max_abs_product = [abs_product]\n            # If the absolute product is equal to the maximum absolute product found so far, append it to the list\n            elif abs_product == max_abs_product[0]:\n                max_abs_product.append(abs_product)\n\n    # Return the maximum absolute product between pairs of tuples\n    return max_abs_product[0]"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    max_pair = (0, 0)\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                max_pair = (list1[i][0], list1[j][1])\n\n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize max and min variables to hold the maximum and minimum absolute product\n    max_product = 0\n    min_product = 0\n\n    # loop through each tuple in the list\n    for tup in list1:\n        # calculate the absolute product of the first element and the second element in the tuple\n        product = abs(tup[0]) * abs(tup[1])\n        # check if the absolute product is greater than the current max_product value\n        if product > max_product:\n            # update the max_product value\n            max_product = product\n            # update the min_product value to hold the previous max_product value\n            min_product = abs(tup[0]) * abs(tup[1])\n        elif product < min_product:\n            # update the min_product value\n            min_product = product\n\n    # return the maximum absolute product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_amicable = 0\n    for i in range(1, limit):\n        # Check if i is amicable to any number in the range\n        for j in range(i, limit):\n            if i == j:\n                continue\n            if i % j == 0 and j % i == 0:\n                if i + j == limit:\n                    sum_amicable += i + j\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    \n    for num in range(1, limit):\n        # Check if the number is a prime\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        # If the number is prime, check if it is amicable\n        if is_prime:\n            for i in range(1, limit):\n                if i!= num and num % i == 0 and (num // i) % 10 == 0:\n                    amicable_sum += i\n                    break\n    \n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_amicable_number(n):\n    \"\"\"\n    A function to check if a number is amicable or not.\n    \"\"\"\n    s = sum([i for i in range(1, n) if n % i == 0])\n    return s == n\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    A function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = [i for i in range(1, limit+1) if is_amicable_number(i)]\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == sum(set([j for j in range(1, i)]) & set([k for k in range(1, i) if i % k == 0])):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\nprint(amicable_numbers_sum(10000))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function will return the sum of all the amicable numbers between 1 and limit.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit):\n        if num == sum_of_divisors(num) and num!= 1:\n            amicable_sum += num\n    return amicable_sum\n\ndef sum_of_divisors(n):\n    \"\"\"\n    This function will return the sum of all the divisors of n.\n    \"\"\"\n    div_sum = 1\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            if i!= n//i:\n                div_sum += i\n            div_sum += n//i\n    return div_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if num == sum_of_proper_divisors(num):\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    This function takes a limit as input and returns the sum of all amicable numbers from 1 to that limit.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            amicable_sum += num\n    return amicable_sum\n\ndef is_amicable(num):\n    '''\n    This function takes a number as input and returns True if it is an amicable number, and False otherwise.\n    '''\n    # Check if the number is even\n    if num % 2 == 0:\n        return False\n    \n    # Check if the sum of the squares of divisors of the number is equal to the number itself\n    sum_of_squares = sum([d*d for d in range(1, int(num**0.5)+1)])\n    if sum_of_squares == num**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit+1):\n        if i in amicable_numbers:\n            continue\n        elif is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable to any number from 1 to itself.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # initialize a dictionary to store the factors of each number\n    factors = {}\n    \n    # iterate through the range of numbers from 1 to the limit\n    for num in range(1, limit+1):\n        # check if the number is divisible by any number in the range of 1 to the square root of the number\n        if num in factors:\n            factors[num].append(num)\n        else:\n            factors[num] = [num]\n            for i in range(2, int(num**0.5)+1):\n                if num % i == 0:\n                    factors[num].append(i)\n                    factors[i].append(num)\n    \n    # initialize a variable to store the sum of amicable numbers\n    amicable_sum = 0\n    \n    # iterate through the range of numbers from 1 to the limit\n    for num in range(1, limit+1):\n        # check if the number is a multiple of 2\n        if num % 2 == 0:\n            continue\n        \n        # check if the number is in the dictionary of factors\n        if num in factors:\n            # check if the number is in the list of factors of a multiple of 2\n            if num in factors[2*num]:\n                # if the number is a multiple of 2, add it to the amicable sum\n                amicable_sum += num\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # initialize a list to store the sum of all amicable numbers\n    amicable_sum = []\n    # iterate through all numbers from 1 to the limit\n    for num in range(1, limit+1):\n        # check if the number is amicable\n        if is_amicable(num):\n            # add the sum of the number and itself to the list of amicable sums\n            amicable_sum.append(num + is_amicable(num))\n    # return the sum of all amicable numbers\n    return sum(amicable_sum)\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a number is amicable.\n    \"\"\"\n    # iterate through all numbers from 1 to the square root of the number\n    for i in range(1, num):\n        # check if the number is divisible by i or num/i\n        if num % i == 0 or num // i == i:\n            # if so, return False as the number is not amicable\n            return False\n    # if the number has not been checked for divisibility, return True as the number is amicable\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def angle_complex(a,b):\n    num = 0\n    den = 0"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = cmath.degrees(angle)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the angle in radians\n    angle = cmath.phase(a+b*1j)\n    \n    # Convert the angle to degrees\n    angle = angle*180/cmath.pi\n    \n    # Return the angle as a float\n    return round(angle, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return round(angle,2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Create a list of lists to store the number of 0s and 1s in each sub-string of the binary string\n    substrings = []\n    for i in range(len(string)):\n        substrings.append([])\n        for j in range(len(string)):\n            if string[i] == '0' and string[j] == '0':\n                substrings[i].append(0)\n            elif string[i] == '0' and string[j] == '1':\n                substrings[i].append(1)\n            elif string[i] == '1' and string[j] == '0':\n                substrings[i].append(1)\n            else:\n                substrings[i].append(0)\n\n    # Find the maximum difference between the number of 0s and 1s in any sub-string of the binary string\n    max_diff = 0\n    for i in range(len(substrings)):\n        for j in range(len(substrings)):\n            if i!= j:\n                diff = 0\n                for k in range(len(substrings[i])):\n                    if substrings[i][k]!= substrings[j][k]:\n                        diff += 1\n                if diff > max_diff:\n                    max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(1, len(string)):\n        diff = sum(string[i-1] == '0') - sum(string[i] == '0')\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            num_0 = 0\n            num_1 = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    num_0 += 1\n                else:\n                    num_1 += 1\n            if num_0 > num_1:\n                diff = max(diff, num_0 - num_1)\n    return diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables\n    max_diff = 0\n    diff = 0\n\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # If the character is a 0, increment the number of 0s and reset the number of 1s\n        if string[i] == '0':\n            diff += 1\n            diff = max(diff, 0)\n        # If the character is a 1, increment the number of 1s and reset the number of 0s\n        else:\n            diff += 1\n            diff = min(diff, 1)\n\n        # Update the maximum difference if the current difference is greater\n        max_diff = max(max_diff, diff)\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    count0 = 0\n    count1 = 0\n    max_diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        diff = abs(count0 - count1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    \n    # loop through all possible substrings\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # compare the number of 0s and 1s in the substring\n            num_0s = sum(1 for bit in string[i:j] if bit == '0')\n            num_1s = sum(1 for bit in string[i:j] if bit == '1')\n            diff = abs(num_0s - num_1s)\n            \n            # update the maximum difference if necessary\n            max_diff = max(max_diff, diff)\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zero_count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zero_count += 1\n        else:\n            if zero_count > max_diff:\n                max_diff = zero_count\n            zero_count = 0\n    if zero_count > max_diff:\n        max_diff = zero_count\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    # initialize count_0 and count_1 as 0\n    count_0 = count_1 = 0\n    \n    # loop through the binary string\n    for char in string:\n        # if the character is 0, increment count_0\n        if char == '0':\n            count_0 += 1\n        # else, increment count_1\n        else:\n            count_1 += 1\n            \n    # find the maximum difference between count_0 and count_1\n    max_diff = max(count_0 - count_1, count_1 - count_0)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n    max_diff = 0\n    \n    for i in range(n):\n        dp[i][i] = abs(string[i] - '0')\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            if string[i] == '0' and string[j] == '1':\n                max_diff = max(max_diff, dp[i][j])\n    \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # finding the common divisors of two numbers\n    divisors = []\n    for i in range(1, b + 1):\n        if b % i == 0 and a % i == 0:\n            divisors.append(i)\n\n    # finding the sum of common divisors\n    sum_divisors = sum(divisors)\n\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    divisor_sum = 0\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    for divisor in common_divisors:\n        divisor_sum += divisor\n    return divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    def gcd(a, b):\n        '''\n        Write a python function to find the greatest common divisor of two numbers.\n        '''\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        '''\n        Write a python function to find the lowest common multiple of two numbers.\n        '''\n        return (a * b) // gcd(a, b)\n    \n    def common_divisors(n):\n        '''\n        Write a python function to find all the common divisors of a number.\n        '''\n        divisors = []\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    def sum_divisors(a, b):\n        '''\n        Write a python function to find the sum of common divisors of two numbers.\n        '''\n        common = common_divisors(a)\n        for i in common:\n            if i in common_divisors(b):\n                common.remove(i)\n        return sum(common)\n    \n    sum_of_common_divisors = sum_divisors(a, b)\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is\", sum_of_common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a,b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Finding the common divisors of a and b using the Euclidean algorithm\n    def gcd(a, b): \n        while b!= 0: \n            a, b = b, a % b \n        return a \n\n    # finding the sum of common divisors of a and b using the formula sum = (a + b) / gcd(a,b)\n    def sum_common_divisors(a, b): \n        return (a + b) / gcd(a, b) \n\n    # calling the above two functions to find the sum of common divisors of a and b\n    sum_of_common_divisors = sum_common_divisors(a, b)\n\n    # printing the sum of common divisors of a and b\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is\", sum_of_common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Use a loop to iterate over all possible divisors between a and b\n    for i in range(a, b+1):\n        if a % i == 0 and b % i == 0:\n            print(i)\n    # Return the sum of the divisors\n    return sum(range(a, b+1))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor_set = set()\n\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisor_set.add(i)\n\n    return sum(divisor_set)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Finding common divisors\n    def common_divisor(a, b):\n        if b == 0:\n            return a\n        else:\n            return common_divisor(b, a % b)\n    \n    divisors_a = set(range(1, a+1))\n    divisors_b = set(range(1, b+1))\n    common_divisors = divisors_a.intersection(divisors_b)\n    \n    # Summing up common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the set of common divisors of a and b\n    common_divisors = set()\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n    \n    # Find the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n    \n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Euclidean algorithm to find the common divisors of a and b\n    d = a\n    for i in range(1, b + 1):\n        if b % i == 0:\n            d = i\n            a = b // i\n            break\n\n    # Use the sum function to add up the resulting list of divisors\n    return sum(range(1, d + 1))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of the common divisors of a and b.\n    \"\"\"\n\n    # Calculate the GCD of a and b\n    gcd = gcd(a, b)\n\n    # Initialize the sum variable to 0\n    common_divisor_sum = 0\n\n    # Loop through all possible divisors of gcd\n    for i in range(1, gcd+1):\n\n        # If i divides both a and b, add it to the sum\n        if (a % i == 0) and (b % i == 0):\n            common_divisor_sum += i\n\n    return common_divisor_sum"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        # If y is odd, add x to result\n        if y & 1 == 1:\n            result += x\n        \n        # Shift x to the right by 1\n        x <<= 1\n        \n        # y = y >> 1 to divide y by 2\n        y >>= 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    '''\n    This function takes in a number n and a list of words and returns a list of words that are longer than n characters.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    words = str.split()\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # check if the matrix is a magic square\n    row_sum = col_sum = 0\n    for i in range(len(my_matrix)):\n        row_sum += my_matrix[i][i]\n        col_sum += my_matrix[i][len(my_matrix)-i-1]\n    if row_sum == col_sum == len(my_matrix)*len(my_matrix)*10:\n        return True\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = 0\n    for i in range(n):\n        for j in range(n):\n            magic_sum += my_matrix[i][j]\n    if magic_sum == n*(n+1)*(2*n+1)/6:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    magic_sum = sum(row_sums) + sum(col_sums)\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= magic_sum - my_matrix[i][j]:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    # calculate the sum of the elements in the matrix\n    total_sum = sum(sum(row) for row in my_matrix)\n\n    # calculate the sum of the squares of the elements in the matrix\n    total_square_sum = sum(sum(x*x for x in row) for row in my_matrix)\n\n    # check if the total sum is equal to the total square sum\n    if total_sum == total_square_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes a matrix as input and checks if it is a magic square or not.\n    A magic square is a square matrix where the sum of its elements equals the sum of the diagonals.\n    \"\"\"\n\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n\n    # Calculate the sum of the elements in the matrix\n    matrix_sum = sum(sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix)))\n\n    # Check if the sum of the diagonal elements equals the sum of the matrix elements\n    if diagonal_sum == matrix_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if all the rows and columns have the same sum\n    row_sum = sum(row)\n    col_sum = sum(my_matrix[j] for j in range(len(my_matrix)))\n    if row_sum!= col_sum:\n        return False\n\n    # Check if the matrix is a magic square\n    magic_sum = sum(sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix)))\n    if magic_sum!= sum(row_sum for row in my_matrix):\n        return False\n\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2\n    square_sum = sum([sum(row) for row in my_matrix])\n    \n    if square_sum == magic_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the input matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the diagonal elements of the matrix\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n    \n    # Check if the sum of the diagonal elements of the matrix is equal to the sum of all the elements in the matrix\n    if diagonal_sum!= sum(sum(element) for row in my_matrix for element in row):\n        return False\n    \n    # Check if each row, column, and 2x2 sub-matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            sub_matrix = my_matrix[i:i+3, j:j+3]\n            sub_diagonal_sum = sum(sum(element) for row in sub_matrix for element in row)\n            if sub_diagonal_sum!= sum(sum(element) for element in sub_matrix[0]):\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has 3x3 size\n    if len(my_matrix)!= 3:\n        return \"The matrix must have 3x3 size.\"\n    \n    # Check if all the rows in the matrix are the same\n    for i in range(3):\n        if my_matrix[i][0]!= my_matrix[i][1]!= my_matrix[i][2]:\n            return \"The matrix must have all rows of the same values.\"\n    \n    # Check if all the columns in the matrix are the same\n    for j in range(3):\n        if my_matrix[0][j]!= my_matrix[1][j]!= my_matrix[2][j]:\n            return \"The matrix must have all columns of the same values.\"\n    \n    # Check if all the diagonals in the matrix are the same\n    for i in range(3):\n        if my_matrix[i][i]!= my_matrix[2][2-i]:\n            return \"The matrix must have all diagonals of the same values.\"\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if all rows have the same number of elements\n    if not all(len(row) == len(my_matrix) for row in my_matrix):\n        return False\n    \n    # Check if all columns have the same number of elements\n    for col in my_matrix:\n        if not all(len(set(col)) == 1 for col in my_matrix):\n            return False\n    \n    # Check if the diagonal elements are the same\n    if not all(my_matrix[i][i] == my_matrix[j][j] for i in range(len(my_matrix)) for j in range(len(my_matrix))):\n        return False\n    \n    # Check if the diagonal elements are the same\n    if not all(my_matrix[i][len(my_matrix)-i-1] == my_matrix[j][len(my_matrix)-j-1] for i in range(len(my_matrix)) for j in range(len(my_matrix))):\n        return False\n    \n    # Check if all elements in the matrix are the same\n    if not all(my_matrix[i][j] == my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix))):\n        return False\n    \n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_num = max(freq, key=freq.get)\n    max_count = freq[max_num]\n    return max_num, max_count"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = float('-inf')\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    \n    # iterate through the list and count the frequency of each item\n    for num in nums:\n        freq[num] += 1\n    \n    # initialize the maximum frequency and the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    \n    # iterate through the dictionary and find the item with maximum frequency\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    # return the item with maximum frequency\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # convert the list to a dictionary\n    count_dict = Counter(nums)\n\n    # find the item with the maximum frequency\n    max_item = max(count_dict, key=count_dict.get)\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_num = None\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = 0\n    max_item = None\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_item = None\n    max_freq = 0\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_num = max(count, key=count.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Returns the item with maximum frequency in a given list.\n    \"\"\"\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n\n    max_freq = max(counts.values())\n    max_item = None\n    for num, freq in counts.items():\n        if freq == max_freq:\n            max_item = num\n        elif freq > max_freq:\n            max_item = num\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    str1 = list(str1)\n    vowel_index = []\n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_index.append(i)\n    vowel_index.reverse()\n    for index in vowel_index:\n        str1.pop(index)\n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    result = []\n    for char in str1:\n        if char not in vowels:\n            result.append(char)\n    result = result[::-1]\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            if i == 0 or str1[i-1] not in vowels:\n                result += str1[i]\n\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    new_str = ''\n    for char in str1:\n        if char.lower() in vowels:\n            new_str += char\n    return new_str[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = s.lower()\n    vowels_list = list(vowels)\n    result = \"\"\n    for char in s:\n        if char in vowels_list:\n            index = vowels_list.index(char)\n            result = char + result + vowels_list[index - 1]\n        else:\n            result += char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"AEIOUaeiou\"\n    rev_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            rev_str += str1[i]\n    return rev_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str = char + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    result = []\n\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result.append(str1[i])\n    \n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    \n    for char in str1:\n        if char in vowels:\n            if len(reversed_str) == 0 or char.lower() not in reversed_str:\n                reversed_str = char + reversed_str\n        else:\n            reversed_str = char + reversed_str\n    \n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a list\n    tup2 = list(tup1)\n    # Convert the list to a string\n    string_value = str(tup2)\n    return string_value"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string\n    str1 = str(tup1)\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    string_list = []\n    for item in tup1:\n        string_list.append(str(item))\n    return ','.join(string_list)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize a variable to store the sum of negative numbers\n    negative_sum = 0\n    # Loop through each number in the list\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            negative_sum += num\n    # Return the final sum of negative numbers\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 2 * n - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    def helper(n):\n        if n == 0:\n            return 1\n        return n * 6 + 1\n\n    return helper(n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    def bin_to_hex(binary):\n        \"\"\"\n        Convert a binary number to hexadecimal.\n        \"\"\"\n        return format(int(binary, 2), 'x')\n    \n    def hex_to_bin(hexadecimal):\n        \"\"\"\n        Convert a hexadecimal number to binary.\n        \"\"\"\n        return format(int(hexadecimal, 16), 'b')\n    \n    def get_binary(n):\n        \"\"\"\n        Convert a decimal number to binary.\n        \"\"\"\n        binary = bin(n)[2:]\n        if len(binary) % 2 == 1:\n            binary = '0' + binary\n        return binary\n    \n    def get_hexadecimal(n):\n        \"\"\"\n        Convert a decimal number to hexadecimal.\n        \"\"\"\n        hexadecimal = hex(n)[2:]\n        if len(hexadecimal) % 2 == 1:\n            hexadecimal = '0' + hexadecimal\n        return hexadecimal\n    \n    def is_prime(n):\n        \"\"\"\n        Check if a number is prime.\n        \"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def is_hexagonal(n):\n        \"\"\"\n        Check if a number is a hexagonal number.\n        \"\"\"\n        if not is_prime(n):\n            return False\n        binary = get_binary(n)\n        hexadecimal = get_hexadecimal(n)\n        return (binary[-2:] == hexadecimal[:2]) and (is_prime(int(binary[:2], 2) + 1))\n    \n    def nth_hexagonal(n):\n        \"\"\"\n        Find the nth hexagonal number.\n        \"\"\"\n        hex_n = 1\n        while hex_n <= n:\n            if is_hexagonal(hex_n):\n                return hex_n\n            hex_n += 1\n        return None\n    \n    hex_n = nth_hexagonal(n)\n    if hex_n is not None:\n        return hex_n\n    else:\n        return None"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1  # start with 1 as 0 is not a valid hexagonal number\n    b = 6  # start with 6 as 1, 2, 3, 4, 5 are valid hexagonal numbers\n    \n    # check if n is within the valid range\n    if n < 1 or n > 1000000:\n        print(\"Invalid input. Please enter a number between 1 and 1000000.\")\n        return\n    \n    # use the formula to find the nth hexagonal number\n    nth_hexagonal = (n-1) * 6 + a + b\n    \n    # print the nth hexagonal number\n    print(\"The\", n, \"th hexagonal number is:\", nth_hexagonal)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return 1 + (n*(2*n-1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex = 1\n    for i in range(n):\n        hex *= 6\n        hex //= 2\n    return hex"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2*n-1) * (5*n-3)\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # The formula for nth hexagonal number is:\n    # hexagonal(n) = (n^2 + 2n + 1) * 1/2\n    # where n is the input parameter.\n    return int((n**2 + 2*n + 1) / 2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 1 + 6 * n\n"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))  # create an array to store the count of zeros\n    for num in nums:\n        if num == 0:\n            zero_count[zero_count.index(0)] += 1  # increment the count of zeros at the index of the current number\n    non_zero_count = array('i', [0]*len(nums))  # create an array to store the count of non-zeros\n    for num in nums:\n        if num!= 0:\n            non_zero_count[non_zero_count.index(0)] += 1  # increment the count of non-zeros at the index of the current number\n    ratio = []\n    for i in range(len(nums)):\n        if non_zero_count[i]!= 0:\n            ratio.append(round(zero_count[i]/non_zero_count[i], 2))\n        else:\n            ratio.append(0)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # convert the list of integers to an array of integers\n    arr = array('i', nums)\n    \n    # count the number of zeroes and non-zeroes\n    zeroes = sum(arr == 0)\n    non_zeroes = len(arr) - zeroes\n    \n    # calculate the ratio of zeroes to non-zeroes\n    if non_zeroes == 0:\n        ratio = 0\n    else:\n        ratio = zeroes/non_zeroes\n    \n    # return the ratio of zeroes to non-zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zero_count = 0\n    non_zero_count = 0\n\n    for i in arr:\n        if i == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if zero_count == 0:\n        return 0\n    else:\n        return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count/non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    arr = array('i', nums)\n\n    # Count the number of zeroes\n    zero_count = 0\n    for i in range(n):\n        if arr[i] == 0:\n            zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    if zero_count == 0:\n        ratio = 0\n    else:\n        ratio = zero_count / n\n\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i')\n    for num in nums:\n        if num == 0:\n            zero_count.append(1)\n        else:\n            zero_count.append(0)\n    non_zero_count = sum(zero_count)\n    zero_ratio = non_zero_count / len(nums)\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n    non_zeros = sum(zeros)\n    ratio = zeros[0]/non_zeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    ones = array('i')\n    \n    for num in nums:\n        if num == 0:\n            zeros.append(0)\n        else:\n            ones.append(1)\n    \n    non_zero_count = len(ones)\n    \n    if non_zero_count == 0:\n        return 0.0\n    \n    return zeros.count(0) / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def zero_count(nums):\n    # Use an array to store the counts of zeros and non-zeros\n    counts = array('i', [0] * len(nums))\n\n    # Loop through the array and update the counts\n    for num in nums:\n        if num == 0:\n            counts[0] += 1\n        else:\n            counts[1] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    non_zero_count = counts[1]\n    zero_count = counts[0]\n    ratio = 0.0\n    if non_zero_count > 0:\n        ratio = zero_count / non_zero_count\n\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0 for _ in range(len(nums))])\n\n    for num in nums:\n        if num == 0:\n            count[count.index(0)] += 1\n\n    non_zeros = count.count(1)\n    zeroes = sum(count) - non_zeros\n\n    if non_zeros == 0:\n        return None\n\n    return round(zeroes/non_zeros, 3)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    while n % 2 == 0:\n        n = n // 2\n    if n == 1:\n        return True\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if the number is even or odd\n    if n % 2 == 0:\n        # Check if the number can be expressed as the sum of two powers of 2\n        if n == 1 << 2:\n            return True\n        elif n == 1 << 3:\n            return True\n        elif n == 1 << 4:\n            return True\n        elif n == 1 << 5:\n            return True\n        elif n == 1 << 6:\n            return True\n        elif n == 1 << 7:\n            return True\n        elif n == 1 << 8:\n            return True\n        elif n == 1 << 9:\n            return True\n        elif n == 1 << 10:\n            return True\n        elif n == 1 << 11:\n            return True\n        elif n == 1 << 12:\n            return True\n        elif n == 1 << 13:\n            return True\n        elif n == 1 << 14:\n            return True\n        elif n == 1 << 15:\n            return True\n        elif n == 1 << 16:\n            return True\n        elif n == 1 << 17:\n            return True\n        elif n == 1 << 18:\n            return True\n        elif n == 1 << 19:\n            return True\n        elif n == 1 << 20:\n            return True\n        else:\n            return False\n    else:\n        # Check if the number can be expressed as the sum of three powers of 2\n        if n == 1 << 3:\n            return True\n        elif n == 1 << 6:\n            return True\n        elif n == 1 << 9:\n            return True\n        elif n == 1 << 12:\n            return True\n        elif n == 1 << 15:\n            return True\n        elif n == 1 << 18:\n            return True\n        elif n == 1 << 21:\n            return True\n        else:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the number can be represented as sum of non-zero powers of 2, and False otherwise.\n    \"\"\"\n    count = 0\n    power = 1\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n        power *= 2\n    if count == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the number is zero or one\n    if n == 0 or n == 1:\n        return True\n\n    # Check for odd numbers greater than 1\n    if n > 1 and n % 2 == 1:\n        return False\n\n    # Initialize the count of non-zero powers of 2\n    count = 0\n\n    # Iterate through the bits of the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # If the bit is 1, increment the count\n        if int(bin(n)[2:].split()[i]) == 1:\n            count += 1\n\n        # Check if the sum of powers of 2 is greater than the original number\n        if count > n:\n            return True\n\n    # If no power of 2 is found, the number cannot be represented as sum of powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    if count > 1:\n        return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n\n    # Check if n is a power of 2\n    if n & (n - 1) == 0:\n        return True\n\n    # Check if n can be represented as sum of powers of 2\n    i = 0\n    while n > 0:\n        if n & (1 << i):\n            n -= (1 << i)\n        else:\n            i += 1\n            if n == 0:\n                return True\n        if i > 31:\n            return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is greater than or equal to 0 and a power of 2\n    if n >= 0 and (n & (n-1)) == 0: \n        # Initialize the sum and the power of 2 as 1\n        sum = 0\n        power_of_2 = 1\n        # Loop till the power of 2 is greater than or equal to the given number\n        while power_of_2 >= n: \n            # Check if the power of 2 is a power of 2 itself\n            if power_of_2 == power_of_2 & -power_of_2: \n                # If it is, add it to the sum\n                sum += power_of_2\n            # Update the power of 2 and move on to the next iteration\n            power_of_2 <<= 1\n        # If the power of 2 is less than the given number, it can be represented as sum of non-zero powers of 2\n        if power_of_2 < n: \n            return True\n        # Otherwise, it cannot be represented as sum of non-zero powers of 2\n        else: \n            return False\n    # If the number is not a power of 2 or is less than 0, it cannot be represented as sum of non-zero powers of 2\n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            if n/i == 2**i or n/i == 2**i+1:\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    # loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number can be represented as sum of powers of 2\n        if (i & (i-1)) == 0:\n            sum += i\n    # check if the sum is equal to n\n    if sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_of_two = 2\n    sum = 0\n    while power_of_two <= n:\n        if n % power_of_two == 0:\n            sum += power_of_two\n            n -= power_of_two\n        power_of_two *= 2\n    if n == 0:\n        print(\"The number can be represented as sum of non-zero powers of 2\")\n    else:\n        print(\"The number cannot be represented as sum of non-zero powers of 2\")"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of the circle with radius\", r, \"is\", circumference, \"units.\")"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*math.pi*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r  # Formula for circumference of a circle"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # initialize an empty list to store the flattened numbers\n    flattened = []\n    # loop through each sublist in the list\n    for sublist in test_list:\n        # loop through each element in the sublist\n        for element in sublist:\n            # if the element is a number, append it to the flattened list\n            if isinstance(element, (int, float)):\n                flattened.append(element)\n    # return the flattened list of numbers\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if type(item) == list:\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened.append(item)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if type(item) == list:\n            result = result.union(extract_singly(item))\n        else:\n            result.add(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [item for sublist in test_list for item in sublist]\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Flatten the list of lists\n    flattened = [num for sublist in test_list for num in sublist]\n    # Remove duplicates and convert to set to eliminate duplicates\n    singly_set = set(flattened)\n    # Convert the set back to a list\n    singly_list = list(singly_set)\n    return singly_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n\n    Args:\n    nums (list): A list of elements to be sorted.\n\n    Returns:\n    list: A sorted list of elements.\n    '''\n\n    def sort_helper(nums):\n        n = len(nums)\n        for i in range(n):\n            min_index = i\n            for j in range(i+1, n):\n                if nums[j] < nums[min_index]:\n                    min_index = j\n            nums[i], nums[min_index] = nums[min_index], nums[i]\n        return nums\n\n    def pancake_sort_helper(nums):\n        n = len(nums)\n        for i in range(n, 1, -1):\n            nums = sort_helper(nums)\n            if i == n:\n                return nums\n\n    return pancake_sort_helper(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the pancake of size i\n        for j in range(i, 0, -1):\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # First, find the length of the list\n    n = len(nums)\n    \n    # Then, create a list of sorted indices\n    sorted_indices = [i for i in range(n)]\n    \n    # Sort the list in descending order\n    for i in range(n-1, 0, -1):\n        # Find the largest element and its index\n        largest_index = i\n        largest_value = nums[i]\n        for j in range(i):\n            if nums[j] > largest_value:\n                largest_index = j\n                largest_value = nums[j]\n        \n        # If the largest element is not the last element, swap it with the last element\n        if largest_index!= i:\n            nums[i], nums[largest_index] = nums[largest_index], nums[i]\n        \n        # Update the sorted indices list\n        for j in range(i):\n            if nums[i] < nums[j]:\n                sorted_indices[j], sorted_indices[i] = sorted_indices[i], sorted_indices[j]\n    \n    # Finally, return the sorted list\n    return sorted_indices"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # swap the maximum element with the last element of the unsorted part of the array\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # print(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Helper function to reverse a list of integers in ascending order\n    def reverse(nums):\n        i = 0\n        j = len(nums) - 1\n        while i < j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n    \n    # Reverse the list in ascending order\n    reverse(nums)\n    \n    # Check if the list is already sorted\n    if nums == range(len(nums)):\n        return nums\n    \n    # Initialize variables for the outer loop\n    n = len(nums)\n    i = 1\n    \n    # The outer loop runs n times\n    while i < n:\n        # Initialize variables for the inner loop\n        j = i\n        k = i\n        while j < n and k < n:\n            if nums[j] > nums[k]:\n                nums[j], nums[k] = nums[k], nums[j]\n            j += 1\n            k += 1\n        \n        # If the inner loop completes the first n elements, the list is already sorted\n        if nums == range(n):\n            return nums\n        \n        # The inner loop runs from i to n-1 to check if the list is sorted in reverse order\n        j = i\n        k = n - 1\n        while j < n and k >= i:\n            if nums[j] < nums[k]:\n                nums[j], nums[k] = nums[k], nums[j]\n            j += 1\n            k -= 1\n        \n        # If the inner loop completes the last n-i elements, reverse the list again and return it\n        if nums == range(n):\n            reverse(nums)\n            return nums\n        \n        # Increment the outer loop counter\n        i += 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the largest element in the first i elements\n        max_idx = i\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the current element with the largest element found\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the first i elements\n        for j in range(i):\n            nums[i-j-1], nums[j] = nums[j], nums[i-j-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the first element of the unsorted part of the array\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n        # Reverse the entire subarray starting from the second element\n        for k in range(i, max_idx):\n            nums[k], nums[max_idx-k] = nums[max_idx-k], nums[k]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    def helper(arr, start, end):\n        # Base case: if start and end are equal, we have sorted the array\n        if start == end:\n            return\n\n        # Find the maximum element in the subarray\n        max_index = start\n        for i in range(start, end):\n            if arr[i] > arr[max_index]:\n                max_index = i\n\n        # Swap the maximum element with the end of the subarray\n        arr[max_index], arr[end] = arr[end], arr[max_index]\n\n        # Recursively sort the subarray that ends at the maximum element\n        helper(arr, start, max_index-1)\n        helper(arr, max_index+1, end)\n\n    # Base case: if the array has one element, it is already sorted\n    if len(nums) == 1:\n        return nums\n\n    # Call the helper function to sort the array\n    helper(nums, 0, len(nums)-1)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] > right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    nums = merge_sort(nums)\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for i in Input:\n        if type(i) == list:\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for item in Input: \n        if isinstance(item, list): \n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    \"\"\"\n    # initialize the maximum difference to 0\n    max_diff = 0\n    \n    # iterate through the array and calculate the absolute difference between each pair of elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum absolute difference between any two elements in a given array.\n    \"\"\"\n    diff = 0\n    for i in range(1, len(arr)):\n        if abs(arr[i] - arr[i-1]) > diff:\n            diff = abs(arr[i] - arr[i-1])\n    return diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    if len(arr) < 2:\n        return \"Array should have at least two elements\"\n    \n    max_diff = float('-inf')\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n//a+1):\n        for y in range(n//b+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    if b == 0:\n        return None\n    x = (-n + b) // a\n    y = (-n - b) // a\n    if x == y:\n        return (x,)\n    elif x == -y:\n        return (-x,)\n    else:\n        return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if the given values are valid\n    if a == 0:\n        return None\n    elif b == 0:\n        return None\n    elif n % a == 0 or n % b == 0:\n        return None\n\n    # find the x and y values\n    x = int((-n) // b)\n    y = int((-n) // a)\n\n    # check if the solution is valid\n    if x ** 2 + y ** 2 == n:\n        return x, y\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if a or b are zero, as there can be no solutions\n    if a == 0 or b == 0:\n        return None\n\n    # Calculate the discriminant\n    d = b**2 - 4 * a * n\n\n    # Check if the discriminant is zero, as there is only one solution\n    if d == 0:\n        x = -b / (2 * a)\n        y = -b / (2 * a)\n        return (x, y)\n\n    # Check if the discriminant is positive, as there are two solutions\n    elif d > 0:\n        x1 = (-b + d ** 0.5) / (2 * a)\n        x2 = (-b - d ** 0.5) / (2 * a)\n        return (x1, x2)\n\n    # If the discriminant is negative, there are no solutions\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns a tuple (x, y) that satisfies ax + by = n, or None if no such solution exists.\n    \"\"\"\n    d = b ** 2 - 4 * a * n\n    if d < 0:\n        return None\n    elif d == 0:\n        return (-b) / (2 * a)\n    else:\n        x1 = (-b + d ** 0.5) / (2 * a)\n        x2 = (-b - d ** 0.5) / (2 * a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # initialize variables for x and y\n    x = None\n    y = None\n    # check if a is not zero\n    if a!= 0:\n        # set x to a and y to n/a\n        x = a\n        y = n // a\n        # check if y is also not zero\n        if y!= 0:\n            # check if (x - a) * (x - a) + (y - a) * (y - a) = n\n            if (x - a) ** 2 + (y - a) ** 2 == n:\n                return (x, y)\n            # check if (x + a) * (x + a) + (y + a) * (y + a) = n\n            elif (x + a) ** 2 + (y + a) ** 2 == n:\n                return (x, y)\n    # if a is zero, check if b is not zero\n    if b!= 0:\n        # set x to n/b and y to b\n        x = n // b\n        y = b\n        # check if (x - b) * (x - b) + (y - b) * (y - b) = n\n        if (x - b) ** 2 + (y - b) ** 2 == n:\n            return (x, y)\n        # check if (x + b) * (x + b) + (y + b) * (y + b) = n\n        elif (x + b) ** 2 + (y + b) ** 2 == n:\n            return (x, y)\n    # if neither a nor b is zero, no solution exists\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize x and y variables\n    x = y = None\n    \n    # check if a and b are both non-zero\n    if a == 0 or b == 0:\n        return None\n    \n    # check if n is divisible by both a and b\n    if n % a!= 0 or n % b!= 0:\n        return None\n    \n    # find the gcd of a and b\n    gcd = a * b // gcd(a, b)\n    \n    # check if n is divisible by gcd\n    if n % gcd!= 0:\n        return None\n    \n    # find the solution\n    x = n // gcd\n    y = n % b // gcd\n    \n    # return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # check if the given equation is solvable\n    if a == 0:\n        return None  # no solution exists if a = 0\n    \n    # find the solution x\n    x = (-b + n // a) // a\n    \n    # find the solution y\n    y = (-b - n // a) // a\n    \n    # check if there is a solution\n    if x == y:\n        return (x,)\n    else:\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if ax + by = n is true for all values of x and y\n    for x in range(b-n, b+n+1):\n        for y in range(a-n, a+n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b ** 2 - 4 * a * n\n\n    # Check if there is a solution\n    if discriminant < 0:\n        return None\n\n    # Calculate the two solutions\n    x1 = (-b + discriminant ** 0.5) / (2 * a)\n    x2 = (-b - discriminant ** 0.5) / (2 * a)\n\n    # Sort the solutions in ascending order\n    if x1 < x2:\n        x1, x2 = x2, x1\n\n    return (x1, x2)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # Iterate through the list2 and remove elements from list1 if present in list2\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the given list\n    for i in list1:\n        # Check if the element is present in the second list\n        if i in list2:\n            # If present, remove it from the list\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # creating a new list to store the unique elements from list1\n    unique_list = []\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n    \n    # creating a new list to store the elements to be removed from list1\n    to_remove_list = []\n    for item in list2:\n        to_remove_list.append(item)\n    \n    # removing the elements from unique_list based on the elements in to_remove_list\n    for item in unique_list:\n        if item in to_remove_list:\n            unique_list.remove(item)\n    \n    return unique_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    list1.remove(list2)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize sum to 0\n    sum = 0\n    # loop through i from 0 to n // 2\n    for i in range(n // 2):\n        # add (n - 2*i) to sum\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize sum to 0\n    total = 0\n    # Loop through the series\n    for i in range(n // 2):\n        # Calculate the sum\n        term = (n - 2 * i)\n        total += term\n    # Return the total sum\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    result = 0\n    for i in range(n//2):\n        result += (n - 2*i)\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total_sum = 0\n    for i in range(n//2):\n        total_sum += (n - 2*i)\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return sum_series(n // 2) + n - sum_series(n // 2)\n    else:\n        return sum_series(n // 2) - n + sum_series(n // 2)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Convert length to float and calculate its value in radians\n    a = s / (2 * l)\n    # Calculate the area of the polygon using Heron's formula\n    area = (s / 2) * (tan(pi / l) ** 2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the perimeter of the polygon using the formula: P = s * n\n    P = s * l\n\n    # calculate the area of each triangle by using Heron's formula: A = sqrt(s(s-a)(s-b)(s-c))\n    A = (P * (P - s) * (P - 2 * s) * (P - 3 * s)) ** 0.5\n\n    # calculate the area of the polygon using the formula: A = (1/2) * s * l * n\n    A = (A / 2) * s * l\n\n    return A\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += (s/l)*tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * s * (tan((pi/l)*2))"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    \n    for i in range(l):\n        area += (s ** 2) * (tan(i * 2 * pi / l) + 1)\n    \n    return area / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the semi-perimeter of the polygon\n    sp = (s * l) / 2\n    \n    # calculate the area using Heron's formula\n    area = (tan(pi/l))**2 * sp\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    angle = 360 / l\n    for i in range(l):\n        x = s * tan(i * angle * pi / 180)\n        y = x\n        area += x\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the semi-perimeter\n    sp = 0.5 * s * l\n\n    # Calculate the area using Heron's formula\n    area = 0.5 * s * tan(pi/l)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (tan(i * 2 * pi / l) ** 2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l * s) / 2\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    divisors.sort()\n    return divisors[len(divisors)//2] == sum(divisors)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    sum_divisors = sum(divisors)\n\n    return sum_divisors == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Calculate the sum of divisors of n using math.factorial()\n    div_sum = sum([math.factorial(i) for i in range(1, n+1)])\n    \n    # Calculate the sum of divisors of n using a for loop\n    # div_sum2 = 0\n    # for i in range(1, n+1):\n    #     if n % i == 0:\n    #         div_sum2 += i\n    \n    # return div_sum == div_sum2\n    \n    return div_sum\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    divisor_sum = 0\n\n    while i <= n:\n        if n % i == 0:\n            divisor_sum += i\n        i += 1\n\n    return divisor_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function determines if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors\n    def sum_divisors(num):\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n    \n    # Check if the sum of the divisors of n and m are equal\n    if sum_divisors(n) == sum_divisors(m):\n        print(f\"{n} and {m} have the same sum of divisors.\")\n    else:\n        print(f\"{n} and {m} do not have the same sum of divisors.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n    \n    div_sum = sum(div_list)\n    print(\"The sum of the divisors of\", n, \"are:\", div_sum)\n    \n    if div_sum == len(div_list):\n        print(\"The sum of the divisors is the same.\")\n    else:\n        print(\"The sum of the divisors is different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    div_sum = sum(divisors)\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            return False \n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of divisors of n\n    divisor_sum = sum(divisors(n))\n\n    # Check if the divisor sum is equal to n\n    if divisor_sum == n:\n        return True\n    else:\n        return False\n\ndef divisors(n):\n    '''\n    Return the set of divisors of n.\n    '''\n    divisors_set = set()\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors_set.add(i)\n            if i!= n // i:\n                divisors_set.add(n // i)\n    return divisors_set"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if n // i!= i:\n                div_sum += n // i\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        char = chr(i + 65)  # Convert the number to the corresponding English alphabet character\n        if char in str1.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to make the comparison case-insensitive\n    str1 = str1.lower()\n    # Initialize an empty dictionary to store the count of each character\n    char_count = {}\n    # Iterate through each character in the string\n    for char in str1:\n        # Convert the character to lowercase to make the comparison case-insensitive\n        char = char.lower()\n        # If the character is not already in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n    # Initialize an empty list to store the count of each position in the English alphabet\n    english_position_count = [0] * 26\n    # Iterate through each character in the string\n    for char in str1:\n        # Convert the character to its position in the English alphabet (case-insensitive)\n        char_pos = ord(char) - ord('a')\n        # If the character is a letter, increment the count of its position in the English alphabet by 1\n        if ord('a') <= char_pos <= ord('z'):\n            english_position_count[char_pos] += 1\n    # Iterate through each position in the English alphabet and add the count of each position to the dictionary\n    for i in range(26):\n        if english_position_count[i] > 0:\n            char_count[chr(ord('a') + i)] = english_position_count[i]\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Create a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n    # Loop through the string and count the number of characters at each position\n    for i in range(len(str1)):\n        if str1[i] in char_count:\n            char_count[str1[i]] += 1\n        else:\n            char_count[str1[i]] = 1\n    # Return the count of characters at each position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(26):\n        for char in str1:\n            if char.lower() == chr(ord('a') + i).lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha_dict = {'a': '1', 'b': '2', 'c': '3', 'd': '4', 'e': '5', 'f': '6', 'g': '7', 'h': '8', 'i': '9', 'j': '10', 'k': '11', 'l': '12','m': '13', 'n': '14', 'o': '15', 'p': '16', 'q': '17', 'r': '18','s': '19', 't': '20', 'u': '21', 'v': '22', 'w': '23', 'x': '24', 'y': '25', 'z': '26'}\n    count = 0\n    for char in str1:\n        if char.lower() in alpha_dict:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char.lower() == english_alphabet[english_alphabet.find(char.lower())]:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for i in range(26):\n        count += str1.lower().count(english_alphabet[i])\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to make case-insensitive matching easier\n    str1 = str1.lower()\n    \n    # Initialize the dictionary to count the number of occurrences of each character in the English alphabet\n    char_count = {}\n    for i in range(ord('a'), ord('z')+1):\n        char_count[chr(i)] = 0\n    \n    # Iterate over the characters in the input string\n    for char in str1:\n        # If the character is a letter and is in the English alphabet, increment its count in the dictionary\n        if char.isalpha() and ord(char.lower()) in range(ord('a'), ord('z')+1):\n            char_count[char.lower()] += 1\n            \n    # Return the dictionary as a list of tuples, where each tuple contains the character and its count\n    return [(char, count) for char, count in char_count.items()]"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for char in str1.lower():\n        if char in alphabet:\n            index = alphabet.index(char)\n            if char == alphabet[index-1] or char == alphabet[index+1]:\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase to make it case insensitive\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n    \n    # Iterate through the string\n    for i in range(26):\n        # Get the character at the current position in the alphabet\n        char = chr(ord('a') + i)\n        \n        # Check if the character is in the string and add 1 to the count if it is\n        if char in str1:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    \n    # Return the character count dictionary\n    return char_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the result as 2\n    result = 2\n    \n    # Loop until we find the smallest power of 2 greater than or equal to n\n    while result < n:\n        result *= 2\n        \n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    # check if n is already a power of 2\n    if n & (n - 1) == 0:\n        return n\n\n    # find the first power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 1\n    while p < n:\n        p <<= 1\n    return p"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if the number is already a power of 2\n    if n & (n-1) == 0:\n        return n\n    \n    # calculate the next power of 2\n    while n & (n-1)!= 0:\n        n += 1\n    \n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the exponent of 2 greater than or equal to n.\n    exp = 1\n    while 2 ** exp <= n:\n        exp += 1\n    \n    # Return 2 raised to the exponent.\n    return 2 ** exp"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # If n is already a power of 2, return n\n    if n > 0 and (n & (n-1)) == 0:\n        return n\n\n    # Find the smallest power of 2 that is greater than or equal to n\n    i = 1\n    while i < n:\n        i <<= 1\n    \n    return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize a variable to store the result\n    result = 1\n\n    # Loop through the bits of n in reverse order\n    for bit in bin(n)[::-1]:\n        # If the bit is 1, multiply the result by 2 and add 1\n        if bit == '1':\n            result *= 2\n            result += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return 2 ** int(n.bit_length() + 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the result to the input value\n    result = n\n\n    # Loop through all powers of 2 up to the square root of the input value\n    while result < n:\n        result <<= 1\n\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Convert n to binary and count the number of ones\n    count = 0\n    while n:\n        n &= (n-1)\n        count += 1\n\n    # Calculate the power of 2\n    power_of_2 = 1\n    for i in range(count):\n        power_of_2 <<= 1\n\n    # Calculate the result\n    return power_of_2"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list 'a' and a number 'x' as input and returns the number of occurrences of 'x' in 'a'.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two parameters - a list and a number. It returns the frequency of the number in the list.\n    '''\n\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x):\n    \"\"\"\n    This function takes a list of numbers and a number as input and returns the number of occurrences of the input number in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in a: \n        if i == x: \n            count += 1 \n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x):\n    '''\n    This function counts the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    sum_val = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_val += i\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return None\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    \n    # calculate the semi-perimeter of the pentagon\n    semi_perimeter = 5 * a\n    \n    # calculate the area of the pentagon using Heron's formula\n    area = (5 * a**2) / (4 * math.tan(math.pi / 5))\n    \n    # calculate the perimeter of the pentagon\n    perimeter = 5 * area\n    \n    # return the perimeter\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a * math.sin(math.pi/5)\n\nprint(perimeter_pentagon(3))"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    start = 0\n    end = 0\n\n    while end < len(s):\n        end = s.find('std', start)\n        if end == -1:\n            break\n        count += 1\n        start = end + 3\n\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    \n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    \n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(elem) for elem in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    types = []\n    for item in test_tuple:\n        types.append(type(item))\n    return types[0] == types[1] and types[0] == types[2] and types[0] == types[3]"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = []\n    for element in test_tuple:\n        types.append(type(element))\n    return len(set(types)) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= first_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for elem in test_tuple:\n        data_types.append(type(elem))\n    return all(x == data_types[0] for x in data_types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # Use list comprehension to get a list of all the data types in the tuple\n    data_types = [type(element) for element in test_tuple]\n\n    # Use set to remove duplicates and get a list of unique data types\n    unique_data_types = list(set(data_types))\n\n    # Check if all unique data types have same data type or not\n    if len(unique_data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # create a list to store the data types of each element in the tuple\n    data_types = []\n\n    # iterate over each element in the tuple\n    for element in test_tuple:\n        # get the data type of each element using the type() function\n        data_type = type(element)\n\n        # check if the data type is already in the list\n        if data_type in data_types:\n            # if it is, return False, since all elements must have the same data type\n            return False\n        else:\n            # if it's not, add it to the list\n            data_types.append(data_type)\n\n    # if we've made it this far, all elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if data_type!= type(test_tuple[i]):\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count == n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    # Count the occurrences of x in the array\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # Check if the count is more than n/2\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    \"\"\"\n    # Initialize count and candidate\n    count = 0\n    candidate = None\n\n    # Loop through the array\n    for i in range(n):\n        # If the current element is equal to the candidate, increment the count\n        if arr[i] == candidate:\n            count += 1\n        # If the count is greater than n/2, return True\n        elif count > n // 2:\n            return True\n        # Otherwise, set the candidate to the current element\n        else:\n            candidate = arr[i]\n\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n>0):\n        count += n & 1\n        n = n>>1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes a positive integer n as input and returns the count of set bits in the binary representation of n.\n\n    For example, if n = 13, the binary representation of n is 1101, and there are 3 set bits (2 and 3) in the binary representation.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: # loop until n becomes zero\n        count += n & 1 # bitwise AND with 1 to count number of set bits\n        n >>= 1 # right shift by 1 to move to the next bit\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        if n & 1: \n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    # split the string into a list of characters\n    char_list = list(str)\n    \n    # loop through the list and remove odd-indexed characters\n    for i in range(len(char_list)):\n        if i % 2 == 1:\n            char_list.pop(i)\n    \n    # join the list back into a string\n    return ''.join(char_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i, char in enumerate(str):\n        if i % 2!= 0:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Initialize an empty list to store the characters to be removed\n    remove_list = []\n    # Loop through each character in the string\n    for i, char in enumerate(str):\n        # If the index is odd, append the character to the remove_list\n        if i % 2!= 0:\n            remove_list.append(char)\n    # Return the new string with the characters removed\n    return \"\".join(remove_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    odd_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_str += str[i]\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n\n    Args:\n    str (str): The input string.\n\n    Returns:\n    str: The modified string without odd index values.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 1])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    # Define an empty list to store the odd characters\n    odd_list = []\n    # Loop through each character in the string\n    for char in str:\n        # Convert the character to an integer\n        int_char = int(char)\n        # Check if the index of the character is odd\n        if int_char % 2!= 0:\n            # If the character is odd, append it to the odd_list\n            odd_list.append(char)\n    # Convert the odd_list to a string and return it\n    return ''.join(odd_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    return \"\".join([str[i] for i in range(len(str)) if i % 2 == 1])"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c):\n    '''\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum number.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize a variable to store the count of set bits\n    count = 0\n    \n    # Iterate through each bit of the number between l and r\n    for i in range(l, r+1):\n        # Check if the current bit is set or not\n        if n & (1 << i):\n            # If it's set, increment the count\n            count += 1\n            \n    # Return True if all bits are set in the range, False otherwise\n    return count == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Checking if l is less than r\n    if l>=r:\n        return False\n    # Checking if all bits are set\n    for i in range(l,r+1):\n        if (n & (1<<i)) == 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Create a bitmask of all set bits\n    mask = 0\n    for i in range(n):\n        mask |= (1 << i)\n    \n    # Apply the mask to the given range\n    masked_n = n - ((n - 1) & (l | r))\n    \n    # Check if the number of set bits in the masked number is equal to the total number of bits in the mask\n    return masked_n == mask"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three integer parameters: n, l and r, where n is the number to check, l is the lower bound of the range and r is the upper bound of the range.\n    This function checks whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Converting n to binary and checking if it has any set bits\n    binary_number = bin(n)[2:]\n    if binary_number.count('1')!= len(binary_number):\n        return True\n    # Converting lower bound and upper bound to binary and checking if they have any set bits\n    lower_bound_binary = bin(l)[2:]\n    upper_bound_binary = bin(r)[2:]\n    if lower_bound_binary.count('1')!= len(lower_bound_binary) or upper_bound_binary.count('1')!= len(upper_bound_binary):\n        return False\n    # Checking if all bits of binary_number are set in the range\n    for i in range(len(binary_number)):\n        if binary_number[i] == '1' and int(binary_number[i:i+lower_bound_binary.count('1')]) > int(lower_bound_binary[i:i+lower_bound_binary.count('1')]):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three parameters: n (an integer), l (an integer), and r (an integer).\n    It checks whether all the bits are unset in the given range or not.\n\n    If all the bits are set in the given range, then the function will return True, otherwise it will return False.\n    \"\"\"\n    # Checking if the given range is valid or not.\n    if l < 0 or r >= 2**n:\n        return False\n\n    # Using binary representation of the given number to find the first set bit and last unset bit.\n    bin_repr = bin(n)[2:]\n    first_set_bit = bin_repr.find('1')\n    last_unset_bit = bin_repr.rfind('0')\n\n    # Checking if all the bits are set in the given range or not.\n    if r - l + 1 == last_unset_bit - first_set_bit + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the count of unset bits\n    count = 0\n    # Iterate over all the bits in the range\n    for i in range(l, r+1):\n        # Get the value of the ith bit\n        bit = (n >> i) & 1\n        # Increment the count if the bit is unset\n        if bit == 0:\n            count += 1\n    # Check if all the bits are unset\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to keep track of the number of unset bits\n    count = 0\n    # Loop through all the bits in the given range\n    for i in range(l, r+1):\n        # Check if the current bit is unset or not\n        if n & (1 << i) == 0:\n            # If the current bit is unset, increment the count\n            count += 1\n            # Check if all the bits in the given range have been counted\n            if count == r - l + 1:\n                # If all the bits have been counted, return True\n                return True\n    # If the loop completes without returning True, it means that at least one bit is unset\n    # in the given range\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Find the number of bits set in the range [l,r]\n    num_bits = r - l + 1\n\n    # Count the number of bits that are set\n    count = 0\n    for i in range(n):\n        if (n >> i) & 1:\n            count += 1\n\n    # Check if all bits are set in the range [l,r]\n    if count == num_bits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to count the unset bits\n    count = 0\n    # Iterate through all the bits in the given range\n    for i in range(l, r+1):\n        # Check if the current bit is set or not\n        if n & (1 << i):\n            # If the current bit is set, increment the count\n            count += 1\n    # If the count is equal to zero, then all the bits are set in the given range\n    return count == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r + 1):\n        if (n & (1 << i))!= 0:\n            return False\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    # Find the minimum and maximum values in the array\n    min_val = min(arr)\n    max_val = max(arr)\n\n    # Initialize three variables to keep track of the count of positive, zero, and negative values\n    pos_count = 0\n    zero_count = 0\n    neg_count = 0\n\n    # Iterate over the array and count the number of positive, zero, and negative values\n    for val in arr:\n        if val > 0:\n            pos_count += 1\n        elif val == 0:\n            zero_count += 1\n        else:\n            neg_count += 1\n\n    # Check if there are less than n negative values than positive values\n    if neg_count < pos_count:\n        return None\n\n    # Initialize two variables to keep track of the current position of the positive and negative values\n    pos_pos = 0\n    neg_pos = n\n\n    # Iterate over the array again and place the negative values before the positive ones\n    for val in arr:\n        if val > 0:\n            arr[pos_pos] = val\n            pos_pos += 1\n        elif val < 0:\n            arr[neg_pos] = val\n            neg_pos += 1\n\n    # If there are more than n negative values, place the zero values at the end of the array\n    for i in range(neg_pos, n):\n        arr[i] = 0\n\n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables to keep track of the positive and negative elements\n    pos = []\n    neg = []\n    \n    # Iterate through the array and categorize the elements into positive and negative arrays\n    for num in arr:\n        if num > 0:\n            pos.append(num)\n        else:\n            neg.append(num)\n    \n    # Sort the negative array in ascending order\n    neg.sort()\n    \n    # Combine the positive and negative arrays in order, preserving the relative order of negative and positive elements\n    result = pos + neg\n    \n    # Return the re-arranged array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    # To store negative and positive elements\n    neg_arr = []\n    pos_arr = []\n    \n    # Traverse the array and separate them into negative and positive arrays\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    \n    # Concatenate the negative and positive arrays\n    combined_arr = neg_arr + pos_arr\n    \n    # Traverse the combined array and swap elements\n    for i in range(len(combined_arr)):\n        for j in range(len(combined_arr)-1-i):\n            # Swap if the element at index j is greater than the element at index j+1\n            if combined_arr[j] > combined_arr[j+1]:\n                combined_arr[j], combined_arr[j+1] = combined_arr[j+1], combined_arr[j]\n    \n    return combined_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # Initialize two lists to hold the negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # Iterate through the array and separate negative and positive elements\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n    \n    # Reverse the order of the negative list to preserve the relative order\n    neg_list.reverse()\n    \n    # Merge the two lists and return the result\n    result = neg_list + pos_list\n    \n    # If the length of the result is less than n, pad with zeros\n    if len(result) < n:\n        result += [0] * (n - len(result))\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Create two empty lists to store the positive and negative elements of the array\n    pos_list = []\n    neg_list = []\n    # Iterate through the array and append the elements to the appropriate lists\n    for i in range(n):\n        if arr[i] >= 0:\n            pos_list.append(arr[i])\n        else:\n            neg_list.append(arr[i])\n    # Iterate through the arrays again and add the positive and negative elements back into the array in their original order\n    for i in range(n):\n        if arr[i] >= 0:\n            arr[i] = pos_list.pop(0)\n        else:\n            arr[i] = neg_list.pop(0)\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    neg_count = 0\n    pos_count = 0\n    neg_index = 0\n    pos_index = n\n\n    # Count the number of negative and positive elements in the array\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n\n    # Move negative elements to the beginning of the array\n    for i in range(n):\n        if arr[i] < 0:\n            neg_index = i\n            break\n\n    for i in range(n):\n        if i == neg_index:\n            continue\n        if arr[i] < 0:\n            if neg_index - i > 0:\n                for j in range(neg_index - i):\n                    arr[j], arr[j + i] = arr[j + i], arr[j]\n            else:\n                arr[neg_index - i:] = arr[:neg_index - i] + arr[neg_index - i:]\n            neg_index -= 1\n        else:\n            if pos_index - i > 0:\n                for j in range(pos_index - i):\n                    arr[j], arr[j + i] = arr[j + i], arr[j]\n            else:\n                arr[pos_index - i:] = arr[:pos_index - i] + arr[pos_index - i:]\n            pos_index -= 1\n\n    # Move positive elements to the end of the array\n    for i in range(n):\n        if arr[i] > 0:\n            pos_index = i\n            break\n\n    for i in range(n):\n        if i == pos_index:\n            continue\n        if arr[i] > 0:\n            if pos_index - i > 0:\n                for j in range(pos_index - i):\n                    arr[j], arr[j + i] = arr[j + i], arr[j]\n            else:\n                arr[pos_index - i:] = arr[:pos_index - i] + arr[pos_index - i:]\n            pos_index -= 1\n        else:\n            if neg_index - i > 0:\n                for j in range(neg_index - i):\n                    arr[j], arr[j + i] = arr[j + i], arr[j]\n            else:\n                arr[neg_index - i:] = arr[:neg_index - i] + arr[neg_index - i:]\n            neg_index -= 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a list to store the negative elements\n    negatives = []\n    # create a list to store the positive elements\n    positives = []\n    # loop through the array and separate the elements into negative and positive groups\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    # combine the negative and positive groups into a new array\n    result = negatives + positives\n    # return the new array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            negative_count += 1\n    positive_count = n\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            positive_count -= 1\n    i = 0\n    while i < n and negative_count > 0:\n        arr[i] = -arr[i]\n        i += 1\n        negative_count -= 1\n    while i < n and positive_count > 0:\n        arr[i] = -arr[i]\n        i += 1\n        positive_count -= 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two empty lists to hold negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # Iterate through the array and add elements to their respective lists\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n    \n    # Iterate through the array again and move elements from the neg_list to the beginning of the array and the pos_list to the end of the array\n    i = 0\n    while i < n:\n        arr[i] = neg_list[0]\n        neg_list.pop(0)\n        i += 1\n    \n    while i < len(arr):\n        arr[i] = pos_list[-1]\n        pos_list.pop(-1)\n        i += 1\n    \n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    count_negative = 0\n    count_positive = 0\n    temp = arr[0]\n\n    for i in range(1, n+1):\n        if arr[i] < 0:\n            count_negative += 1\n        else:\n            count_positive += 1\n\n    if count_negative == count_positive:\n        temp = arr[n]\n        arr[n] = arr[0]\n        arr[0] = temp\n\n    for i in range(n):\n        if arr[i] >= 0:\n            continue\n        if arr[i] < 0:\n            if count_negative == 0:\n                arr[i], arr[count_negative] = arr[count_negative], arr[i]\n                count_negative -= 1\n            else:\n                arr[i], arr[count_negative-1] = arr[count_negative-1], arr[i]\n                count_negative -= 1\n                count_negative -= 1\n        else:\n            if count_positive == 0:\n                arr[i], arr[count_positive] = arr[count_positive], arr[i]\n                count_positive -= 1\n            else:\n                arr[i], arr[count_positive-1] = arr[count_positive-1], arr[i]\n                count_positive -= 1\n                count_positive -= 1\n\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #replace blank spaces with the specified character\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i =='':\n            new_str += char\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert list to heap\n    heap = list1\n    heapq.heapify(heap)\n    # extract and return n largest numbers from heap\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # convert list to heap\n    heap = [x for x in list1]\n    heapq.heapify(heap)\n    \n    # pop the n largest elements and store in a new list\n    result = [heapq.heappop(heap) for _ in range(n)]\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = [] # initialize an empty heap\n    # loop through the list and add each item to the heap\n    for num in list1:\n        heapq.heappush(heap, num)\n        # if the size of the heap exceeds n, remove the smallest item\n        while len(heap) > n:\n            heapq.heappop(heap)\n    # return the list of n largest items in the heap\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert list to heap\n    heapq.heapify(list1)\n    # get the n largest items from heap\n    return [heapq.heappop(list1) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a max heap of size n and fill it with the first n elements of the list\n    max_heap = []\n    for i in range(n):\n        max_heap.append(heapq.heappushpop(max_heap, -list1[i]))\n    # Add the remaining elements of the list to the max heap in descending order\n    for i in range(n, len(list1)):\n        heapq.heappush(max_heap, -list1[i])\n    # Extract and return the n largest elements from the max heap\n    return [-x for x in max_heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap to store the n largest numbers\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -list1[i])\n    # fill the heap with the remaining numbers\n    for i in range(n, len(list1)):\n        if list1[i] > -heapq.heappop(max_heap):\n            heapq.heappush(max_heap, -list1[i])\n    # extract the n largest numbers from the heap and return them as a list\n    return [-x for x in max_heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * (r**2) * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of the cylinder\n    lateral_area = 2 * r * (h/2)**2\n    \n    # return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r**2*h) + (2*r*h**2) + (2*h**2*r) - (2*r**3*h) - (2*r*h**3) - (2*h**3*r)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = math.pi*(r**2 + h**2)*h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2 * r**2 * h) + (2 * r * h * pi) + (2 * r**2 * pi)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateral_surface_area_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface = 2 * (r ** 2) * (h / 3)\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14159*r**2 + 2*3.14159*r*h + 2*3.14159*h**2\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder: 2*\u03c0*r*h\n    return 2*math.pi*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Convert radius and height to SI units\n    r = r * 1e-6\n    h = h * 1e-6\n    \n    # Calculate lateral surface area using formula\n    lateral_area = 2 * r * (h / 2) + 2 * r * r * (3 * h / 4) + 2 * r * r * (3 * h / 4) + 2 * r * (h / 2)\n    \n    return lateral_area * 1e6 # Convert to square meters"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    # Calculate the lateral surface area of a cylinder\n    lateral_surface_area = 2 * math.pi * r * h\n\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize an empty list to store the modified bits\n    modified_bits = []\n\n    # loop through each bit in the number\n    for i in range(len(bin(n))-2, -1, -1):\n        # if the current bit is even\n        if i % 2 == 0:\n            # set the corresponding bit in the modified number to 1\n            modified_bits.append(1)\n        else:\n            # set the corresponding bit in the modified number to 0\n            modified_bits.append(0)\n\n    # convert the modified bits list to an integer and return it\n    return int(''.join(map(str, modified_bits)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    while n: \n        if n & 1 == 0: \n            even_bits |= n \n            n >>= 1 \n        else: \n            n >>= 1 \n    return even_bits "
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a mask with all 1s except for the least significant bit\n    mask = 0b1111111111111111111111111111111\n    # Shift the mask to the left by 1 and mask it with the input number\n    result = (n << 1) & mask\n    # Return the resulting number\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Get the binary representation of the input number\n    binary_rep = bin(n)[2:]\n    # Initialize an empty list to store the modified binary representation\n    modified_binary_rep = []\n    # Iterate through the binary representation of the input number\n    for bit in binary_rep:\n        # If the current bit is even, add 1 to its position in the modified binary representation\n        if int(bit) % 2 == 0:\n            modified_binary_rep.insert(int(bit), 1)\n        else:\n            modified_binary_rep.append(int(bit))\n    # Convert the modified binary representation back to an integer and return it\n    return int(''.join(str(x) for x in modified_binary_rep), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        if n % 2 == 0:\n            n = n | (n-1)\n        n = n >> 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each bit of the given number\n    for i in range(32):\n        # If the current bit is even, add 1 to the result list\n        if (n & (1 << i)):\n            result.append(1)\n        # If the current bit is odd, add 0 to the result list\n        else:\n            result.append(0)\n    \n    # Convert the result list to an integer and return it\n    return int(''.join(map(str, result)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Convert the number to a binary string\n    binary_str = bin(n)[2:]\n\n    # Initialize an empty string to store the updated binary string\n    updated_binary_str = \"\"\n\n    # Iterate through each character in the binary string\n    for bit in binary_str:\n        # If the character is an even bit, append \"1\" to the updated binary string\n        if int(bit) == 0:\n            updated_binary_str += bit\n        else:\n            updated_binary_str += \"1\"\n\n    # Convert the updated binary string back to an integer and return it\n    return int(updated_binary_str, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function sets all even bits of a given number.\n\n    :param n: an integer number.\n    :return: an integer number with even bits set to 1.\n    \"\"\"\n\n    # Initialize a variable to store the even bits set to 1\n    even_bits_set_to_1 = 0\n\n    # Iterate over each bit of the given number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1\n        if int(bit) % 2 == 0:\n            even_bits_set_to_1 = even_bits_set_to_1 | (1 << int(bit))\n\n    # Return the even_bits_set_to_1\n    return even_bits_set_to_1"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # loop through each bit of the binary representation of n\n    for i in range(8):\n        # check if the current bit is even\n        if n & (1 << i):\n            # set the corresponding bit to 1\n            n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the number with even bits set to 1\n    result = n\n\n    # Loop through each bit of the binary representation of n\n    for i in range(8):\n        # If the current bit is even, set it to 1\n        if n & 1 == 0:\n            result |= 1 << i\n\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Use Counter to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # Convert the Counter object to a dictionary and return it\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the counts of occurrences\n    counts = {}\n    # Loop through the list of tuples and count the occurrences of each tuple using the Counter function from the collections module\n    for item in test_list:\n        counts[item] = counts.get(item, 0) + 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts\n    counts = {}\n    # loop through the list of tuples\n    for tup in test_list:\n        # if the tuple is already in the dictionary, increment its count\n        if tup in counts:\n            counts[tup] += 1\n        # otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            counts[tup] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # create an empty dictionary\n    result = {}\n\n    # loop through each tuple in the list\n    for tup in test_list:\n        # add the tuple to the result dictionary if it doesn't already exist\n        if tup not in result:\n            result[tup] = 0\n\n        # increment the count for the tuple\n        result[tup] += 1\n\n    # return the result dictionary\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the count of each unique tuple\n    count_dict = {}\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary, and increment its count if it is\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    \n    # Use the Counter class to count the occurrences of each unique tuple\n    counter = Counter(unique_tuples)\n    \n    # Return the dictionary of counts\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return dict(count)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring.strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    # Initialize a variable to store the count of substrings\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through each possible starting position for a substring\n        for j in range(i, len(str)):\n            # Append the substring to the count variable\n            count += 1\n\n    # Return the count of substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)-1):\n        for j in range(i+1,len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n    \"\"\"\n    substrings = []\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = str[i:j]\n            if substring!= '':\n                substrings.append(substring)\n    return len(substrings)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(n):\n        count += (m//2) + 1\n        m = m - (m//2) * 2\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Initialize the list of possible sequences\n    possible_sequences = []\n\n    # Loop through each integer from 1 to m\n    for i in range(2, m+1):\n        # Check if the current integer is greater than or equal to twice the previous integer and less than or equal to m\n        if i >= 2*possible_sequences[-1] <= m:\n            # If the current integer is in the range, add a sequence of length n to the list of possible sequences\n            possible_sequences.append(i)\n\n    # Count the number of possible sequences of length n\n    count = len(possible_sequences)\n\n    # Return the count of possible sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(m, 2*m, 2):\n        if n == 1:\n            count += 1\n        else:\n            for j in range(i, m, 2):\n                if j < 2*i:\n                    break\n                elif j - i <= n:\n                    count += 1\n                else:\n                    break\n            if n > 1:\n                count -= j - i + 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    prev = -2\n    for i in range(n):\n        if i > 0:\n            if prev + 2 <= m:\n                count += 1\n        prev = i\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n==0:\n        return 1\n    if n>0:\n        count=0\n        for i in range(2,m+1):\n            if i>=2*n:\n                count+=get_total_number_of_sequences(i-1,n-1)\n        return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the count to 0\n    count = 0\n\n    # Initialize the list to store the elements of the sequence\n    sequence = []\n\n    # Iterate from the first element of the sequence to m\n    for i in range(2, m + 1):\n\n        # Check if the element is greater than or equal to twice the previous element\n        if i >= 2 * sequence[-1]:\n\n            # If it is, add it to the sequence and increment the count\n            sequence.append(i)\n            count += 1\n\n    # Initialize the sum of the sequence lengths to zero\n    sequence_sum = 0\n\n    # Iterate through the sequence and calculate the sum of the lengths\n    for i in range(len(sequence)):\n        sequence_sum += sequence[i]\n\n    # Calculate the number of possible sequences of length n\n    total_sequences = count * (m - sequence_sum) + sequence_sum * (sequence_sum + 1) // 2\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n):\n    # initialize the number of possible sequences to 0\n    num_sequences = 0\n\n    # loop through all possible values of the first element\n    for i in range(2,m+1):\n        # loop through all possible values of the second element\n        for j in range(1,n+1):\n            # check if the sum of the elements is greater than or equal to the second element\n            if i+j >= n:\n                # increment the number of possible sequences\n                num_sequences += 1\n\n    # return the total number of possible sequences\n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    if m < 2 * n:\n        return 0\n\n    total_sequences = 1\n    current_sequence = 1\n\n    for i in range(2, n + 1):\n        next_sequence = i + current_sequence\n        if next_sequence <= m:\n            total_sequences += next_sequence\n            current_sequence = next_sequence\n        else:\n            total_sequences -= current_sequence\n            current_sequence = next_sequence\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 3*n: \n        print(\"Number of sequences is greater than or equal to m.\")\n        return\n    if n <= 0: \n        print(\"Number of sequences is greater than 0.\")\n        return\n    if n == 1: \n        print(\"Number of sequences is 1.\")\n        return\n    if m <= 0: \n        print(\"Number of sequences is greater than 0.\")\n        return\n    if m == 1: \n        print(\"Number of sequences is 1.\")\n        return\n    count = 0\n    previous = 0\n    current = 1\n    for i in range(2,n+1): \n        if current <= 2*previous: \n            if current < m: \n                count += 1\n        previous = current\n        current = 2*current\n    print(\"Total number of sequences:\", count)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    This function takes in two positive integers m and n and returns the number of possible sequences of length n \n    that are generated by the given constraints. The constraints are that each element is a positive integer \n    greater than or equal to twice the previous element but less than or equal to m.\n\n    For example, if m = 5 and n = 3, the function should return 10 as there are 10 possible sequences of length 3 \n    where each element is between 1 and 5 (inclusive).\n\n    The function uses dynamic programming to solve this problem.\n\n    Time Complexity: O(m*n)\n    '''\n\n    # Initialize a matrix to store the number of possible sequences of length n that are generated by the given constraints\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Initialize the first row and first column of the matrix\n    for i in range(m + 1):\n        dp[i][0] = 1\n\n    for j in range(1, n + 1):\n        for i in range(2, m + 1):\n            # Check if the current element is greater than or equal to twice the previous element and less than or equal to m\n            if i >= 2 * j and i <= m:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n\n    # Return the total number of possible sequences of length n that are generated by the given constraints\n    return dp[m][n]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        print(\"Error: Lists must have the same length.\")\n        return\n    \n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[i]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Use slice notation to get the last element of the first list\n    last_elem = list1[-1]\n    \n    # Use list comprehension to concatenate the elements of the second list with the last element\n    new_list = [last_elem] + list2\n    \n    # Use the assignment operator to replace the last element of the first list with the new list\n    list1[-1:] = new_list"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # initialize index of the last element of list1\n    last_index = len(list1) - 1\n\n    # replace the last element of list1 with the elements of list2\n    list1[last_index] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    # Check if the lists have the same length\n    if len(list1)!= len(list2):\n        print(\"Error: Lists must have the same length.\")\n        return\n    \n    # Iterate over the list1 and replace the last element with the elements of list2\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[i % len(list2)]\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Remove the last element of the first list\n    list1.pop()\n\n    # Add the elements of the second list to the first list\n    list1.extend(list2)\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Calculate the length of the second list\n    length_second_list = len(list2)\n    # Check if the length of the first list is greater than the length of the second list\n    if len(list1) > length_second_list:\n        # Replace the last element of the first list with the elements of the second list\n        list1[-1] = list2\n    else:\n        print(\"The second list is longer than the first list.\")\n    # Return the modified first list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check if the lists have the same length\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must have the same length.\")\n    # replace the last element of the first list with the elements of the second list\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[i]"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total = 0\n    for char in str1:\n        total += 1\n    return total"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N\n    while x**2 < N:\n        x = x + 1\n    return math.sqrt(x)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        x = N + math.sqrt(N)\n        if math.isqrt(x) * math.isqrt(x) == x:\n            return x\n        N = x + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = math.sqrt(N)\n    while True:\n        x += 1\n        if int(x**2) > N:\n            break\n    return int(x**2)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        S = int(math.sqrt(N))\n        if S * S == N:\n            break\n        N = S + 1\n    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function finds the next perfect square greater than a given number.\n    '''\n    # Initialize variables\n    s = N\n    while True:\n        s = s + 1\n        if math.isqrt(s*s) == s:\n            return s"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # find the square root of N\n    sqrt_N = int(math.sqrt(N))\n    \n    # iterate from sqrt_N to 1\n    for i in range(sqrt_N, 0, -1):\n        # if the square of i is less than N, then N is the next perfect square\n        if i*i < N:\n            return i*i\n    \n    # N is the largest perfect square, so we add 1 and check if the square of the result is less than N\n    if (sqrt_N*sqrt_N) < N:\n        return sqrt_N*sqrt_N + 1\n    else:\n        return sqrt_N*sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # initialize variables\n    square = N\n    next_square = 0\n\n    # find the square root of the given number\n    sqrt_square = math.sqrt(square)\n\n    # check if the square root is an integer\n    if math.floor(sqrt_square) ** 2 == square:\n        # increment the square root by 1\n        sqrt_square += 1\n\n    # if the square root is an integer, find the next perfect square greater than the square root\n    while True:\n        next_square = math.floor(sqrt_square) ** 2\n        if next_square > N:\n            break\n        sqrt_square += 1\n\n    # return the next perfect square greater than the given number\n    return next_square\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_Perfect_Square(N): \n    # function to check whether a number is a perfect square or not \n    def is_perfect_square(num): \n        root = math.sqrt(num) \n        return root == int(root)\n\n    # check if the given number is a perfect square or not \n    if is_perfect_square(N): \n        # initialize the next perfect square as N \n        next_num = N\n\n        # while the next perfect square is smaller than or equal to N \n        while next_num <= N: \n            # check if the next perfect square is a perfect square or not \n            if is_perfect_square(next_num): \n                # return the next perfect square \n                return next_num\n\n            # if the next perfect square is not a perfect square, increment it by 1 \n            next_num += 1\n\n        # if the loop exits without finding a next perfect square greater than N, \n        # return -1 \n        return -1\n    else: \n        # if the given number is not a perfect square, return -1 \n        return -1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1: \n        return 1 \n    elif N % 2 == 0: \n        # If N is even, we need to find the next odd perfect square greater than N \n        for i in range(N, math.ceil(math.sqrt(N))+1, 2): \n            if math.isqrt(i) ** 2 == i: \n                return i\n        # If we reach this point, there is no next perfect square greater than N \n        return N \n    else: \n        # If N is odd, we need to find the next even perfect square greater than N \n        for i in range(N+1, math.ceil(math.sqrt(N))+1, 2): \n            if math.isqrt(i) ** 2 == i: \n                return i\n        # If we reach this point, there is no next perfect square greater than N \n        return N "
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function calculates the next perfect square greater than a given number N.\n    \"\"\"\n    i = N\n    while True:\n        i += 1\n        square = int(math.sqrt(i))\n        if i == 1:\n            return int(square * square)\n        elif i == 2 * square * square:\n            return int(math.sqrt(i))"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    '''\n\n    # Find the length of the array\n    n = len(arr)\n\n    # If the array is empty or has only one element, return 0\n    if n <= 1:\n        return 0\n\n    # Initialize variables to store the maximum sum of a subarray ending at each index\n    max_ending_increasing = arr[0]\n    max_ending_decreasing = arr[0]\n\n    # Iterate through the array from the second element to the last\n    for i in range(1, n-1):\n\n        # If the current element is greater than the next element, update max_ending_increasing\n        if arr[i] > arr[i+1]:\n            max_ending_increasing = max(max_ending_increasing + arr[i], arr[i])\n\n        # If the current element is less than the next element, update max_ending_decreasing\n        else:\n            max_ending_decreasing = max(max_ending_decreasing + arr[i], arr[i])\n\n    # Return the maximum sum of a bitonic subsequence\n    return max(max_ending_increasing, max_ending_decreasing)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize the maximum sum to the first element of the array\n    max_sum = arr[0]\n\n    # Initialize two pointers for the array\n    i, j = 0, 1\n\n    # Initialize a variable to store the sum of the bitonic subsequence\n    bitonic_sum = arr[0] + arr[1]\n\n    # Loop through the array until the pointers meet in the middle of the array\n    while j < n:\n\n        # If the current element is increasing, add it to the bitonic sum\n        if arr[j] > arr[i]:\n            bitonic_sum += arr[j]\n\n        # If the current element is decreasing, update the maximum sum and move the pointers\n        else:\n            max_sum = max(max_sum, bitonic_sum)\n            bitonic_sum = arr[j]\n            i, j = j, j + 1\n\n    # Update the maximum sum with the final bitonic subsequence sum\n    max_sum = max(max_sum, bitonic_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    # find the length of the array\n    n = len(arr)\n    \n    # if the array is empty, return 0\n    if n == 0:\n        return 0\n    \n    # initialize the maximum sum and the current sum\n    max_sum = arr[0]\n    curr_sum = arr[0]\n    \n    # loop through the array from 1 to n-1\n    for i in range(1, n):\n        \n        # if the current element is greater than the previous one, then add it to the current sum\n        if arr[i] > arr[i-1]:\n            curr_sum += arr[i]\n        # otherwise, if the current element is less than the previous one, then subtract it from the current sum\n        else:\n            curr_sum -= arr[i-1]\n        \n        # update the maximum sum if the current sum is greater\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2:\n        return None\n\n    max_sum = arr[0]\n    max_sum_start = 0\n    max_sum_end = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            if max_sum < arr[i]:\n                max_sum = arr[i]\n                max_sum_start = i-1\n                max_sum_end = i\n        else:\n            if max_sum < arr[i]:\n                max_sum = arr[i]\n                max_sum_start = i-1\n                max_sum_end = i\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # Initialize the maximum sum and the current sum of the subsequence\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array\n    for num in arr:\n\n        # If the number is increasing, add it to the current sum\n        if num > arr[0]:\n            current_sum += num\n\n        # If the number is decreasing, subtract it from the current sum\n        elif num < arr[0]:\n            current_sum -= num\n\n        # If the number is equal to the first element, the subsequence is decreasing\n        else:\n            current_sum = 0\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    dp = [[0] * 3 for _ in range(n)]\n\n    for i in range(1, n):\n        dp[i][0] = max(arr[i], dp[i - 1][0])\n        dp[i][1] = max(arr[i] + dp[i - 1][1], dp[i - 1][1])\n        dp[i][2] = max(arr[i] + dp[i - 1][2], dp[i - 1][2])\n\n    for i in range(1, n - 1):\n        dp[i][0] = max(arr[i], dp[i - 1][0])\n        dp[i][1] = max(arr[i] + dp[i - 1][1], dp[i - 1][1])\n        dp[i][2] = max(arr[i] + dp[i - 1][2], dp[i - 1][2])\n\n    max_sum = max(max_sum, dp[n - 2][0] + dp[n - 1][1] + dp[n - 1][2])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif arr[0] < arr[1]:\n        # check if the first element is increasing\n        if arr[0] < arr[2]:\n            # check if the second element is decreasing\n            if arr[1] > arr[2]:\n                # check if the third element is decreasing\n                if arr[2] > arr[1]:\n                    # the maximum sum of a bitonic subsequence is the sum of the first and third element\n                    return arr[0] + arr[2]\n                else:\n                    # the maximum sum of a bitonic subsequence is the sum of the first and second element\n                    return arr[0] + arr[1]\n            else:\n                # the maximum sum of a bitonic subsequence is the sum of the first and third element\n                return arr[0] + arr[2]\n        else:\n            # the maximum sum of a bitonic subsequence is the sum of the first and second element\n            return arr[0] + arr[1]\n    else:\n        # check if the first element is decreasing\n        if arr[0] > arr[1]:\n            # check if the second element is increasing\n            if arr[1] < arr[2]:\n                # check if the third element is increasing\n                if arr[2] > arr[1]:\n                    # the maximum sum of a bitonic subsequence is the sum of the second and third element\n                    return arr[1] + arr[2]\n                else:\n                    # the maximum sum of a bitonic subsequence is the sum of the first and second element\n                    return arr[0] + arr[1]\n            else:\n                # the maximum sum of a bitonic subsequence is the sum of the second and third element\n                return arr[1] + arr[2]\n        else:\n            # the maximum sum of a bitonic subsequence is the sum of the second and third element\n            return arr[1] + arr[2]\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Find the maximum sum of a bitonic subsequence for the given array.\n    \"\"\"\n    n = len(arr)\n\n    # Check if the array is bitonic. If it's not, reverse it.\n    if arr[0] < arr[1] < arr[2]:\n        if arr[1] > arr[2]:\n            arr = arr[::-1]\n    elif arr[0] > arr[1] > arr[2]:\n        if arr[1] < arr[2]:\n            arr = arr[::-1]\n\n    # Initialize variables for the subsequence and the maximum sum.\n    subseq = [arr[0]]\n    max_sum = arr[0]\n\n    # Iterate through the rest of the array and add the subsequence to the maximum sum.\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            subseq.append(arr[i])\n        else:\n            subseq.insert(0, arr[i])\n\n        # Update the maximum sum if the subsequence is longer than the current maximum sum.\n        if len(subseq) > len(max_sum):\n            max_sum = subseq\n\n    # Return the maximum sum.\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Check if the array is empty or contains only one element\n    if len(arr) <= 1:\n        return arr[0]\n    \n    # Initialize variables\n    increasing_sum = arr[0]\n    decreasing_sum = arr[0]\n    max_sum_so_far = arr[0]\n    \n    # Loop through the array\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            increasing_sum += arr[i]\n        else:\n            decreasing_sum += arr[i]\n        \n        max_sum_so_far = max(max_sum_so_far, increasing_sum, decreasing_sum)\n    \n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = dp[i-1] - arr[i-1]\n    return max(dp[i] for i in range(n))"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    elif number == 0:\n        return 0\n    else:\n        guess = number/2\n        while True:\n            old_guess = guess\n            guess = (guess + number/guess) / 2\n            if abs(guess - old_guess) < 1e-10:\n                return guess\n            elif guess * guess < number:\n                return None\n            elif guess * guess == number:\n                return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a given number using the babylonian method.\n    \"\"\"\n    x0 = number\n    for i in range(10):\n        x1 = 0.5 * (x0 + number / x0)\n        if abs(x1 - x0) < 1e-6:\n            return x1\n        x0 = x1\n    print(\"Maximum number of iterations reached.\")\n    return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    tolerance = 0.0001\n\n    while abs(guess * guess - number) > tolerance:\n        guess = (guess + number / guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Compute the initial guess for the square root using the babylonian method\n    guess = (number + 1) / 2\n    # Compute the number of iterations needed to converge\n    iterations = 0\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n        iterations += 1\n    # Compute the final square root and return it\n    result = guess\n    return result, iterations"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Use the babylonian method to compute the square root\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(guess - new_guess) < 0.00001:\n            return guess\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 1e-10  # Convergence threshold\n    guess = number / 2  # Initial guess\n    while True:\n        approx = (guess + number / guess) / 2  # New approximation\n        if abs(approx - guess) < epsilon:  # Convergence criterion\n            return approx\n        guess = approx"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n\n    Args:\n    number (float): the number to compute the square root of\n\n    Returns:\n    float: the square root of the input number\n    \"\"\"\n    guess = number / 2  # initial guess\n    while True:\n        next_guess = guess + (number / guess) / 2  # new guess\n        if abs(next_guess - guess) < 1e-9:  # convergence criteria\n            break\n        guess = next_guess  # update guess\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize variables\n    x = 1\n    n = 1\n\n    # compute the square root using the babylonian method\n    while abs(x**2 - number) > 0.0001:\n        x = (number / x) + x\n        n += 1\n\n    # return the square root and the number of iterations it took to converge\n    return x, n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number/x\n    while abs(x-y) > 0.00001:\n        x = y\n        y = number/x\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = 0\n    numerator = number\n    denominator = 1\n    \n    while abs(numerator/denominator) > 0.0001:\n        root = (numerator + denominator) / 2\n        numerator = number / root\n        denominator = root\n        \n    return root"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp = [0] * n\n    dp[0] = 1\n    dp[1] = 1 if s[0] == s[1] else 2\n    for i in range(2, n):\n        if s[i] == s[i-1]:\n            dp[i] = dp[i-1] + 2\n        else:\n            dp[i] = max(dp[i-1], dp[i-2])\n    return dp[n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str): \n    n = len(str) \n    # create a table to store lengths of longest palindromic subsequences \n    # of all odd-length prefixes \n    lps_table = [[0] * n for _ in range(n)] \n  \n    # fill the table in bottom-up manner \n    for i in range(1, n): \n        for j in range(i): \n            if str[i] == str[j]: \n                lps_table[i][j] = lps_table[j][i-1] + 2 \n            else: \n                lps_table[i][j] = max(lps_table[i][j-1], lps_table[j][i]) \n  \n    # return the length of the longest palindromic subsequence \n    return lps_table[n-1][0] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # create a 2D table to store the lengths of palindromes up to each character\n    dp = [[0 for j in range(len(str))] for i in range(len(str))]\n\n    # initialize the first row and column of the table\n    for i in range(len(str)):\n        dp[i][i] = 1\n\n    # fill in the table by comparing characters\n    for i in range(1, len(str)):\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i][j] = dp[j][i-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[j][i])\n\n    # find the length of the longest palindromic subsequence\n    max_length = dp[0][len(str)-1]\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    if not str:\n        return 0\n\n    n = len(str)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if str[j] == str[i]:\n                dp[i] = max(dp[i], dp[j] + 2)\n\n    return max(dp)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a 2D table to store lengths of longest palindromic subsequences for all substrings of s\n    lps_table = [[0]*n for _ in range(n)]\n    # Fill the table using dynamic programming approach\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                lps_table[i][j] = lps_table[i+1][j-1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i+1][j], lps_table[i][j-1])\n    return lps_table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    max_length = 1\n    start = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                length = 2 + lps(s[i:j])\n                if length > max_length:\n                    max_length = length\n                    start = i\n            else:\n                length = lps(s[i:j])\n                if length > max_length:\n                    max_length = length\n                    start = i\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D array to store the length of the longest palindromic subsequence for all prefixes of the string\n    lps_array = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and first column of the array to 1\n    for i in range(n):\n        lps_array[i][i] = 1\n\n    # Fill in the rest of the array using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n-i+1):\n            if str[j] == str[j+i]:\n                lps_array[j][j+i] = lps_array[j+1][j] + 2\n            else:\n                lps_array[j][j+i] = max(lps_array[j][j+i-1], lps_array[j+1][j+i-1])\n\n    # Find the length of the longest palindromic subsequence in the string using the last element of the last row of the array\n    return lps_array[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(s):\n    \"\"\"\n    This function finds the length of the longest palindromic subsequence in the given string s.\n    \"\"\"\n\n    # Creating a list of all possible substrings of the given string.\n    substrings = [\"\".join(sorted(sub)) for sub in zip(*[s[i:] for i in range(len(s)+1)])]\n\n    # Finding the length of the longest palindromic subsequence in each substring.\n    result = [1] * len(substrings)\n    for i in range(len(substrings)-1, -1, -1):\n        for j in range(i, len(substrings)-1, -1):\n            if substrings[i][j] == substrings[i][j-1]:\n                result[i] = result[i] + 2 * result[j]\n            else:\n                result[i] = max(result[i], result[j])\n\n    # Finding the length of the longest palindromic subsequence.\n    max_length = 0\n    for i in range(len(result)):\n        if result[i] > max_length:\n            max_length = result[i]\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef longest_palindrome(s):\n    n = len(s)\n    max_len = 1\n    start = 0\n\n    for i in range(n):\n        for j in range(i + 2, n + 1):\n            if is_palindrome(s[i:j]) and j - i > max_len:\n                max_len = j - i\n                start = i\n\n    return s[start:start + max_len]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Create a 2D array to store the lengths of subsequences of the string\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize first row and first column of the 2D array\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the rest of the 2D array using dynamic programming\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 1 / (n - 1) + harmonic_sum(n - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_of_nums = 0\n    for i in range(1, n+1):\n        sum_of_nums += 1/i\n    return sum_of_nums"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) * (n**2 - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    total = 1\n    for i in range(1, n):\n        total += 1 / (i + 1)\n    return total"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/(n-1)) + (1/(n-2)) +... + (1/1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1/(2*n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = (1/n) + (1/2*n) + (1/3*n**2) + (1/4*n**3) + (1/5*n**4) + (1/6*n**5) + (1/7*n**6) + (1/8*n**7) + (1/9*n**8)\n    return round(harmonic_sum, 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * (1/n + harmonic_sum(n-1))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Create a set for array_nums2\n    set_nums2 = set(array_nums2)\n\n    # Create an empty list to store the common elements\n    common_elements = []\n\n    # Iterate over array_nums1\n    for num in array_nums1:\n        # Check if num is present in set_nums2\n        if num in set_nums2:\n            # If it is, add it to common_elements\n            common_elements.append(num)\n            # Remove num from set_nums2 to avoid duplicates\n            set_nums2.remove(num)\n\n    # Return the common elements as a list\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # Create an empty set to store the common elements\n    common_set = set()\n    \n    # Loop through each element in array_nums1 and check if it exists in array_nums2\n    for num in array_nums1:\n        if num in array_nums2 and num not in common_set:\n            common_set.add(num)\n    \n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes in two arrays of integers, and returns the intersection of those arrays.\n    \"\"\"\n    # Create two dictionaries to store the frequency of each element in each array\n    freq1 = {}\n    freq2 = {}\n\n    # Iterate through each element in the first array and update the frequency dictionary\n    for num in array_nums1:\n        if num in freq1:\n            freq1[num] += 1\n        else:\n            freq1[num] = 1\n\n    # Iterate through each element in the second array and update the frequency dictionary\n    for num in array_nums2:\n        if num in freq2:\n            freq2[num] += 1\n        else:\n            freq2[num] = 1\n\n    # Create a new dictionary to store the intersection of the two arrays\n    intersection = {}\n\n    # Iterate through each element in the frequency dictionary for the first array\n    for num in freq1:\n        # If the element is also in the frequency dictionary for the second array, add it to the intersection dictionary\n        if num in freq2 and freq1[num] == freq2[num]:\n            if num in intersection:\n                intersection[num] += freq1[num]\n            else:\n                intersection[num] = freq1[num]\n\n    # Return the intersection dictionary\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    array_nums1.sort()\n    array_nums2.sort()\n    i = j = 0\n    intersection = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    # Create a set of unique values in array_nums1\n    unique_values = set(array_nums1)\n    \n    # Filter out the values that are not present in array_nums2\n    intersection = [num for num in array_nums1 if num in array_nums2 and num in unique_values]\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty set to store the intersection\n    intersection = set()\n\n    # Iterate over the first array\n    for num in array_nums1:\n        # If the number is in the second array, add it to the intersection set\n        if num in array_nums2:\n            intersection.add(num)\n\n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup: \n        if elem == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    # create a new list with the element inserted before each element in the original list\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    # create a new list to store the modified elements\n    new_list = []\n    # iterate through the original list\n    for i in range(len(list)):\n        # insert the element before the current element\n        new_list.insert(0, list[i])\n        # append the current element to the new list\n        new_list.append(list[i])\n    # return the new list\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, elem):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list. \n    It returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.insert(i, elem)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.insert(i, element)\n        result.insert(i, list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.insert(i, element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Loop through each element in the list\n    for i in range(1, len(list)):\n        # Insert the element before the current element\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        r, theta = cmath.polar(number)\n        print(f\"r: {r}, theta: {theta}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        modulus = cmath.sqrt(real ** 2 + imag ** 2)\n        phase = cmath.phase(number)\n        polar_coordinates = (modulus, phase)\n        result.append(polar_coordinates)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        angle = cmath.phase(number)\n        magnitude = abs(number)\n        # Print the polar coordinates\n        print('Magnitude:', magnitude)\n        print('Angle:', angle, 'radians')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    polar_list = []\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        if isinstance(num, cmath.complex):\n            # if the number is already in polar coordinates, return it\n            if num.imag == 0:\n                polar_list.append((num.real, 0))\n            else:\n                r = abs(num)\n                theta = cmath.phase(num)\n                polar_list.append((r, theta))\n        # if the number is already in polar coordinates, return it\n        else:\n            polar_list.append(num)\n    \n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        complex_number = complex(number)\n        magnitude = abs(complex_number)\n        angle = cmath.phase(complex_number)\n        print(f\"{number} = {magnitude} * exp({angle} * 1j)\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        r, theta = cmath.polar(num)\n        polar.append((r, theta))\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        print(f\"({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if type(num) == complex:\n            r = cmath.sqrt(num.real**2 + num.imag**2)\n            phi = cmath.phase(num)\n            print(f\"({num.real:.2f} + {num.imag:.2f}i) = ({r:.2f} + {phi:.2f}rad)\")\n        else:\n            print(f\"Invalid input: {num}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a Python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    complex_numbers = [complex(num1, num2) for num1, num2 in zip(numbers[::2], numbers[1::2])]\n    polar_coordinates = [(cmath.sqrt(num.real**2 + num.imag**2), num.arg) for num in complex_numbers]\n    return polar_coordinates"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    '''\n    This function takes a list as an argument and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if len(set(l[i:j+1])) == n:\n                result.append(tuple(sorted(l[i:j+1])))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Use itertools to generate all combinations of length n with replacement\n    combinations = list(combinations_with_replacement(l, n))\n\n    # Return a list with a tuple for each combination\n    return [tuple(combination) for combination in combinations]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for color in l[i:]:\n            color_combinations.append((l[i], color))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    result = []\n    for comb_set in comb:\n        result.append(tuple(comb_set))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = list(combinations_with_replacement(l, n))\n    return combs"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for combo in combinations_with_replacement(l[i:], n):\n            color_combinations.append(tuple(combo))\n    return color_combinations"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    i = 2\n    while i <= n:\n        if all(i%j!=0 for j in range(2,i)):\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    '''\n    Write a python function that takes in a non-negative number and returns True if the number is prime, False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number n and returns the number of prime numbers less than n.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number n and returns the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    # iterate through numbers from 2 to n-1\n    for i in range(2, n):\n        # check if i is prime\n        is_prime = True\n        # loop from 2 to n/i (integer division)\n        for j in range(2, int(n/i)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if i is prime, add 1 to count\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    num = 2\n    while num < n:\n        if num % 2 == 0:\n            num += 1\n        else:\n            count += 1\n            num += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    count = 0\n\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n            count += 1\n\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        max_tup1 = max(test_tup1)\n        max_tup2 = max(test_tup2)\n        if max_tup1 > max_tup2:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    if max1 >= max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        if test_tup1 > test_tup2:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_element1 = max(test_tup1)\n    max_element2 = max(test_tup2)\n    if max_element1 > max_element2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n    max_tup = (max_val1, max_val2)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value = max(test_tup1)\n    max_index = test_tup1.index(max_value)\n    max_tuple = (max_value, max_index)\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max_value:\n            max_value = test_tup2[i]\n            max_index = i\n            max_tuple = (max_value, max_index)\n    return max_tuple"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num\n\n\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    p = 2\n    while True:\n        if all(i!= p - 1 for i in range(2, p)) and all(i * p + i * (p - 1) * (p - 2) // 6 for i in range(2, int(p ** 0.5) + 1)):\n            if n == 1:\n                return p\n            elif n == 0:\n                return None\n            n -= 1\n        p += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a variable to keep track of the count of primes found so far\n    count = 0\n    \n    # Iterate over the integers from 2 to n (inclusive)\n    for i in range(2, n + 1):\n        # If i is a prime number, increment the count and check if it is equal to n\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            count += 1\n            if count == n:\n                return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define the set of newman\u2013shanks\u2013williams primes\n    newman_primes = set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997])\n\n    # Check if the given number is in the newman_primes set\n    if n in newman_primes:\n        return n\n    else:\n        # If the given number is not in the newman_primes set, check for the prime factorization of n\n        for prime in newman_primes:\n            if n % prime == 0:\n                return prime\n        # If the given number is not a newman\u2013shanks\u2013williams prime, return None\n        return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # initialize the count variable\n    count = 0\n\n    # loop through all numbers from 2 to n\n    for i in range(2, n+1):\n        # check if i is a newman-shanks-williams prime number\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        if count == n:\n            return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the current number and the next number to check\n    i = 2\n    while True:\n        # Check if the current number is a prime number\n        if is_prime(i):\n            # Check if the next number is a prime number\n            j = i + 1\n            while j <= n:\n                if is_prime(j):\n                    return i\n                j += 1\n        # Increment the current number and check again\n        i += 1\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    p = 2\n    while True:\n        if is_prime(p):\n            count = 0\n            for i in range(p, 2*p, p):\n                count += 1\n                if count == n:\n                    return p\n                if count > n:\n                    break\n            count = 0\n            for i in range(p, 2*p, 2*p):\n                count += 1\n                if count == n:\n                    return p\n                if count > n:\n                    break\n        p += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a counter variable\n    count = 0\n    \n    # Initialize a variable to store the number of digits in n\n    num_digits = len(str(n))\n    \n    # Loop through all possible values of i between 2 and sqrt(n)\n    for i in range(2, int(n**0.5) + 1):\n        # If n is divisible by i, check if it's a multiple of i+1 or i-1\n        if n % i == 0 and (n % (i + 1) == 0 or n % (i - 1) == 0):\n            # If it is, increment the count by 1\n            count += 1\n        \n        # If n is divisible by i+1 and n is not divisible by i-1, check if it's a multiple of i\n        elif n % (i + 1) == 0 and n % (i - 1)!= 0 and n % i == 0:\n            # If it is, increment the count by 1\n            count += 1\n        \n        # If n is divisible by i-1 and n is not divisible by i+1, check if it's a multiple of i\n        elif n % (i - 1) == 0 and n % (i + 1)!= 0 and n % i == 0:\n            # If it is, increment the count by 1\n            count += 1\n    \n    # If the count is equal to n, then n is a newman\u2013shanks\u2013williams prime number\n    if count == n:\n        return True\n    \n    # Otherwise, it's not a newman\u2013shanks\u2013williams prime number\n    else:\n        return False"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_list = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_list.append(i)\n    return prime_list[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_newman_prime(num):\n        '''\n        Helper function to check if a number is a newman prime number.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_num = 1\n    while True:\n        if is_newman_prime(prime_num):\n            if n == 1:\n                return prime_num\n            n -= 1\n        prime_num += 1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The length of the two tuples should be same.\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            return \"Error: The elements in the tuples should not be zero.\"\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            result_tup += (test_tup1[i],)\n        else:\n            result_tup += (test_tup1[i]/test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(x / y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the two tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return None\n\n    # Perform element-wise division and store the result in a new tuple\n    result_tup = tuple(test_tup1[i] / test_tup2[i] for i in range(len(test_tup1)))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have the same length.')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            raise ValueError('Both tuples should have non-zero values.')\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i]!= 0:\n            result_tup += (test_tup1[i] // test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = len(list1) // 2\n    return (list1[:half], list1[half:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    mid = len(list1) // 2\n    return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length1 = len(list1)\n    length2 = length1 - L\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the resulting lists as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # creating a new list to hold the first part of the list\n    part1 = []\n    # creating a new list to hold the second part of the list\n    part2 = []\n    # iterating through the list and adding items to the new list until its length is L\n    while len(part1) < L:\n        part1.append(list1.pop(0))\n    # iterating through the list and adding items to the new list until its length is equal to L\n    while len(part2) < L:\n        part2.append(list1.pop(0))\n    # returning the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    m = L\n    i = 0\n    j = L\n    \n    # Split the list into two parts of length m\n    part1 = list1[:m]\n    part2 = list1[m:]\n    \n    # If there are not enough elements in part2, pad it with the last element of part1\n    if len(part2) < m:\n        part2 = part2 + [part1[-1]]\n    \n    # Return the two parts of the list as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is greater than the length of the list\n    if L > len(list1):\n        print(\"Error: L is greater than the length of the list\")\n        return\n    \n    # Create a list with L elements from the list1\n    first_part = list1[:L]\n    \n    # Create a list with the remaining elements from the list1\n    second_part = list1[L:]\n    \n    # Return the tuple of the first and second parts of the list\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts by slicing\n    list1_split = list1[:L]\n    list2_split = list1[L:]\n    # Combine the two parts into a single list\n    combined_list = list1_split + list2_split\n    # Return the two parts as a tuple\n    return tuple(combined_list)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the number of elements in the first part of the list\n    num_elements = L\n\n    # Split the first part of the list into two parts where the length of the first part is L\n    part1 = list1[:num_elements]\n    part2 = list1[num_elements:]\n\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if L is an integer\n    if not isinstance(L, int):\n        raise ValueError('L should be an integer.')\n\n    # check if L is less than 1\n    if L < 1:\n        raise ValueError('L should be a positive integer.')\n\n    # calculate the length of the second part\n    second_length = len(list1) - L\n\n    # split the list into two parts and return them in a tuple\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # calculate dog's years based on human years\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # convert the age in hours to dog years\n    dog_years = h_age / 7\n\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 + h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in dog's years\n    dog_age = h_age / 7\n    \n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_years = h_age * 7\n    return dogs_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = (2021 - h_age) * 7\n    print(\"Dog's age in dog years:\", dog_years)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age / 7\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    Parameters:\n    h_age (int): The height of the dog in inches.\n\n    Returns:\n    int: The age of the dog in dog years.\n\n    Example:\n    >>> dog_age(6)\n    1\n    \"\"\"\n\n    # convert inches to centimeters\n    height_cm = h_age * 2.54\n\n    # convert centimeters to dog years\n    dog_years = height_cm / 70.7\n\n    # return the dog's age in dog years\n    return int(dog_years)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_dog_years = h_age * 7\n    return age_in_dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 0:\n        return [S]\n    else:\n        split_list = []\n        for i in range(0, len(S), step):\n            split_list.append(S[i:i+step])\n        return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Convert the list to a string and split into individual characters\n    S = ''.join(S)\n    # Split the string into individual characters using a step value\n    split_list = [S[i:i+step] for i in range(0, len(S), step)]\n    return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    # initialize the result list\n    result = []\n    \n    # iterate over the list\n    for i in range(0, len(S), step):\n        \n        # create a new list with the nth element\n        new_list = S[i:i+step]\n        \n        # add the new list to the result list\n        result.append(new_list)\n    \n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    h = 2\n    return 6 * l * h"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Find the volume of the cube\n    volume = l**3\n\n    # Find the lateral surface area of each face\n    lateral_surface_area = [volume/6, volume/6, volume/6, volume/6, volume/6, volume/6]\n\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * (l**2))"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculating the lateral surface area of the cube using Heron's formula\n    return (6 * l * l) ** 0.5"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    # Calculate the lateral surface area of the cube\n    surface_area = 6 * l**2\n\n    # Return the lateral surface area of the cube\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return square_Sum(n-1) + n*n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i*i  \n    return sum  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i*i  \n    return sum  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum += i**2\n        i += 1\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the first number of stars to be printed\n    star_num = 1\n    # loop n times to print then'th star number\n    for i in range(n):\n        # print the current number of stars\n        print('*' * star_num)\n        # increment the number of stars\n        star_num += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the variable to store the result\n    result = 0\n    \n    # Loop through each digit of the number\n    for digit in str(n):\n        # Add the corresponding value to the result\n        result += (int(digit) ** 2)\n        \n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    result = n * (n + 1)\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Function to calculate the nth star number\n    def calculate_star_num(n):\n        # Initialize the result to 1\n        result = 1\n\n        # Loop for n-1 times\n        for i in range(1, n):\n            # Add 1 to result for every subsequent iteration\n            result += 1\n\n        # Return the result\n        return result\n\n    # Call the function to calculate the nth star number\n    return calculate_star_num(n)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the star number variable with 0\n    star_num = 0\n    # Loop through each digit of n\n    while n > 0:\n        # If the remainder of n divided by 10 is 0, add a star to the number\n        if n % 10 == 0:\n            star_num += 1\n        # Divide n by 10 and discard the remainder\n        n //= 10\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer n and returns then'th star number.\n    \"\"\"\n    return n * (n - 1) * (2 * n - 1) // 6"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    start = 1\n    end = 12\n    \n    # find then'th star number using a loop\n    for i in range(n):\n        # calculate the number of spaces between the stars\n        spaces = 3 * end - 5\n        \n        # print the number of spaces\n        print(''* spaces)\n        \n        # print the stars\n        print('*' * end)\n        \n        # update the start and end values for the next iteration\n        start += 1\n        end -= 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        # Calculate the number of digits in the input number\n        num_digits = 0\n        while n > 0:\n            n //= 10\n            num_digits += 1\n        # Iterate through each digit of the number and multiply by the star number for that digit\n        star_num = 1\n        for i in range(num_digits):\n            star_num *= 10\n        return n * star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    elif n > 1:\n        return find_star_num(n - 1) + '*'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the counter variable\n    count = 1\n    \n    # Loop to print the required number of stars\n    while count <= n:\n        print(\"*\" * count)\n        count += 1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k)!= str:\n        return \"Error: Input must be a string.\"\n    elif len(k)!= 1:\n        return \"Error: Input must be a single character.\"\n    else:\n        return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Find the ascii value of the character k\n    ascii_value = ord(k)\n    # Return the ascii value\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            count += 1\n            if count % 2 == 0:\n                break\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if even_index == 0:\n                even_index = i\n    \n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_of_even_numbers = 0\n    index_of_even_numbers = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_of_even_numbers += arr[i]\n                index_of_even_numbers += 1\n            else:\n                index_of_even_numbers += 1\n    return sum_of_even_numbers, index_of_even_numbers"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    sum_even_index = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n            sum_even_index += i\n\n    return sum_even, sum_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0  \n    for i in range(0, len(arr), 2):  \n        if arr[i] % 2 == 0:  \n            even_sum += arr[i]  \n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_of_powers += i**5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Initialize the counter variable to 1\n    counter = 1\n    # Loop through the first n even natural numbers\n    while counter <= n:\n        # Check if the current natural number is even\n        if counter % 2 == 0:\n            # Add the current natural number raised to the fifth power to the sum\n            sum += counter ** 5\n        # Increment the counter variable\n        counter += 1\n    # Return the sum of the first n even natural numbers that are raised to the fifth power\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = []\n    for i in range(1, n+1, 2):\n        even_numbers.append(i ** 5)\n\n    even_numbers_sum = sum(even_numbers)\n    return even_numbers_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even = 0\n    for i in range(1, n+1, 2):\n        sum_even += i ** 5\n    return sum_even"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_even_powers = 0\n    \n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_of_even_powers += i**5\n            \n    return sum_of_even_powers"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[1] for item in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        rear = item[-1]\n        result.append(rear)\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Create an empty list to store the rear elements\n    rear_list = []\n    # Loop through each tuple in the list\n    for item in test_list:\n        # If the length of the tuple is odd, add the last element of the tuple to the rear list\n        if len(item) % 2 == 1:\n            rear_list.append(item[-1])\n        # If the length of the tuple is even, add both the first and last elements of the tuple to the rear list\n        else:\n            rear_list.append(item[0])\n    # Return the rear list\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuple lengths must match')\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same number of elements.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n        \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # loop through each element in test_tup1\n    for i in range(len(test_tup1)):\n        # if the index is also in test_tup2, subtract the elements\n        if i < len(test_tup2):\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for index in range(len(test_tup1)):\n        if test_tup1[index]!= test_tup2[index]:\n            test_tup1[index] -= test_tup2[index]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for index in range(len(test_tup1)):\n        result_tup += (test_tup1[index] - test_tup2[index],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths.\")\n        return\n    # Loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    '''\n    \n    # Initialize the sum of even index binomial coefficients to 0\n    even_sum = 0\n    \n    # Loop through the range of numbers from 1 to n-1\n    for i in range(1, n+1):\n        \n        # Calculate the even index binomial coefficient\n        even_coeff = math.factorial(n) // (math.factorial(i) * math.factorial(n-i))\n        \n        # Check if the even index binomial coefficient is even\n        if i % 2 == 0:\n            even_sum += even_coeff\n    \n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize variables to store the even index and sum of even index binomial coefficients\n    even_index = 0\n    even_sum = 0\n\n    # iterate through the even index binomial coefficients using a for loop\n    for i in range(1, n+1):\n        # calculate the binomial coefficient\n        coeff = math.factorial(n) // math.factorial(i) // math.factorial(n-i)\n\n        # if the current index is even, add the coefficient to the sum of even index binomial coefficients\n        if i % 2 == 0:\n            even_sum += coeff\n            even_index += 1\n\n    # return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_binomial_Coeff_Sum(n):\n    # calculate the sum of even index binomial coefficients\n    sum_even_binomial_coeffs = 0\n    for i in range(n+1):\n        for j in range(i+1, n+1):\n            if j % 2 == 0:\n                sum_even_binomial_coeffs += math.comb(n, i)\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize variables\n    sum_even = 0\n    count = 0\n    \n    # loop through all the possible values of i from 0 to n\n    for i in range(n+1):\n        \n        # find the binomial coefficient of i and n-i\n        coeff = math.comb(n, i)\n        \n        # if the index is even, add the coefficient to the sum\n        if i % 2 == 0:\n            sum_even += coeff\n        \n        # increment the count\n        count += 1\n    \n    # return the sum of even index binomial coefficients\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize variables\n    coeff_sum = 0\n    # loop through odd indices from 1 to n-1\n    for i in range(1, n, 2):\n        # loop through even indices from i+1 to n-1\n        for j in range(i+1, n, 2):\n            # compute the binomial coefficient\n            coeff = math.comb(n, i-1) * math.comb(n, j-1)\n            # check if the coefficient is even\n            if coeff % 2 == 0:\n                # add the even coefficient to the sum\n                coeff_sum += coeff\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += math.factorial(i//2)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and calculates the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even = 0\n    for i in range(1, n + 1):\n        for j in range(1, i + 1, 2):\n            sum_even += math.comb(i, j)\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through the even indices of the range(n+1)\n    for i in range(2, n+1, 2):\n        # Compute the binomial coefficient\n        coeff = math.factorial(n) // (math.factorial(i-1) * math.factorial(n-i+1))\n        \n        # Add the even index binomial coefficient to the sum\n        sum += coeff\n    \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize variables\n    sum_even = 0\n    i = 0\n\n    # loop through each index in the binomial series\n    while i < n:\n        # find the current binomial coefficient\n        binom = math.comb(n, i)\n\n        # check if the current coefficient is even\n        if i % 2 == 0:\n            sum_even += binom\n\n        # increment the index\n        i += 1\n\n    # return the sum of even coefficients\n    return sum_even"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14159 * r * r * h  # formula for the volume of a cylinder\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14159 * r**2 * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume of the cylinder\n    V = 3.14159*(r**2)*h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    area = 3.14159 * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (1/3) * 3.14159 * r ** 2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume\n    V = (3.14159/4) * (r ** 2) * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14 * (r ** 2) * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume of the cylinder\n    volume = (3/5) * (pi * r**2) * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and returns a new dictionary with only the entries where the value is greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Filter the dictionary to include only entries with values greater than or equal to n\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key:value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n                i += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count = 1\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= len(test_tup) - 1:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i]!= test_tup[i+1]:\n                break\n        else:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= len(test_tup)-1:\n            if test_tup[i]!= test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i, val in enumerate(test_tup):\n        if val == test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += i * (1 + i) // 2\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n\n    # Define a helper function to calculate the nth term in the decagonal sequence\n    def nth_term_decagonal(n):\n        return n * (n + 1)\n\n    # Calculate the nth term in the decagonal sequence\n    nth_decagonal_term = nth_term_decagonal(n)\n\n    # Return the nth term in the decagonal sequence\n    return nth_decagonal_term"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_sum = 0\n    for i in range(1, n+1):\n        dec_sum += (i * (3*i-1)) // 2\n    return dec_sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (2 * n * n + 1) ** 0.5"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables for row and column\n    row = 1\n    col = 1\n    # Initialize variable for decagonal number\n    decagonal = 1\n\n    # Calculate the number of rows and columns\n    num_rows = int((n * (n + 1)) / 2)\n    num_cols = n\n\n    # Loop through all rows and columns and calculate the decagonal number\n    for i in range(1, num_rows + 1):\n        if i <= num_cols:\n            col = i\n        else:\n            row += 1\n            col = i - num_cols\n\n        decagonal = (row * (row + 1)) // 2 + (col * (col + 1)) // 2 + decagonal\n\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define the base and step values\n    base = 1\n    step = 1\n    \n    # Calculate the nth decagonal number\n    decagonal = (base**2 + step**2)**0.5\n    \n    # Calculate the difference between the nth decagonal number and n\n    diff = abs(n - decagonal)\n    \n    # Return True if the difference is less than or equal to 1, and False otherwise\n    return diff <= 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Calculate the number of rows in the decagonal matrix\n    num_rows = int(n ** 0.5) + 1\n\n    # Initialize the first row of the matrix\n    row = [1]\n\n    # Loop through each row in the matrix\n    for i in range(1, num_rows):\n        # Shift the first element to the right\n        row.insert(0, row.pop())\n\n        # Shift the last element to the left\n        row.append(row.pop())\n\n    # Find the nth decagonal number\n    nth_decagonal = row[n - 1]\n\n    return nth_decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Check if n is even or not\n    if n % 2 == 0:\n        return False\n    \n    # Initialize sum variable\n    sum = 0\n    \n    # Calculate the sum of decagonal numbers from 1 to n\n    for i in range(1, n+1):\n        sum += i*i*i\n    \n    # Check if the sum is even or not\n    if sum % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        decagonal_numbers = [1]\n        for i in range(2, n+1):\n            decagonal_numbers.append(sum(decagonal_numbers[-2:]))\n        return decagonal_numbers[-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize the counter variable\n    count = 1\n    \n    # loop through the number of rows and columns\n    for i in range(1, n+1):\n        # loop through the number of columns\n        for j in range(1, i+1):\n            # increment the counter variable\n            count += 1\n            \n    return count"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binary_search(arr, item, low, high):\n    if low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == item:\n            return True, mid\n        elif arr[mid] < item:\n            return binary_search(arr, item, mid + 1, high)\n        else:\n            return binary_search(arr, item, low, mid - 1)\n    else:\n        return False, -1\n\n\ndef sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and checks if all the elements of the list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    return len(test_list) == len(test_set)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_set = set(test_list)\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Create a set to store unique elements of the list\n    unique_set = set(test_list)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        print(\"The list is unique.\")\n    else:\n        print(\"The list is not unique.\")"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(test_list)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n        else:\n            return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the input lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    # Subtract the elements of the lists element-wise and return the result\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must be of the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the lengths of the two lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"The lists are not equal in length.\")\n        return\n    \n    # Create an empty list to store the result\n    result = []\n    \n    # Loop through each element of the two lists\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes in two lists and returns a new list where the elements are the difference of the corresponding elements from the two input lists.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length.\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtracts two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Check if the number is positive\n    if n <= 0:\n        return False\n\n    # Initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    for digit in str(n):\n        # If the digit is not already in the dictionary, add it with a value of 1\n        if digit not in freq:\n            freq[digit] = 1\n        # If the digit is already in the dictionary, increment its value by 1\n        else:\n            freq[digit] += 1\n\n    # Check if the frequency of each digit in the integer is less than or equal to the digit itself\n    for digit in freq:\n        # If the frequency of the digit is greater than the digit itself, return False\n        if freq[digit] > digit:\n            return False\n\n    # If no digit has a frequency greater than the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # count the frequency of each digit in the integer\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    count = [0]*10 # initialize count array of size 10\n    \n    # iterate through each digit in the number\n    for i in str(n):\n        count[int(i)] += 1 # increment the count of the current digit\n    \n    # iterate through the count array and check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if count[i] > 0 and count[i] > i:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Initialize an empty dictionary to store the frequency of each digit\n    freq = {}\n    \n    # Iterate over each digit in the integer\n    for digit in str(n):\n        # If the digit is not already in the dictionary, add it with a frequency of 1\n        if digit not in freq:\n            freq[digit] = 1\n        # Otherwise, increment the frequency of the digit by 1\n        else:\n            freq[digit] += 1\n    \n    # Iterate over each digit in the dictionary\n    for digit in freq:\n        # If the frequency of the digit is greater than or equal to the digit itself, return False\n        if freq[digit] >= int(digit):\n            return False\n    \n    # If all digits pass the validation check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency = {}\n    for digit in str(n):\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n\n    for digit in str(n):\n        if frequency[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n        if freq[int(digit)] > n:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    string = str(n)\n    \n    # Create a dictionary to store the frequency of each digit\n    frequency = {}\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is already in the dictionary, increment its value\n        if char in frequency:\n            frequency[char] += 1\n        # If the character is not in the dictionary, add it with a value of 1\n        else:\n            frequency[char] = 1\n    \n    # Loop through each digit in the string\n    for digit in string:\n        # If the frequency of the digit is greater than the digit itself, return False\n        if frequency[digit] > digit:\n            return False\n    \n    # If all digits have a frequency of less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    # Define a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Iterate through each digit in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not in the dictionary, initialize its frequency to 1\n        else:\n            freq[digit] = 1\n\n    # Iterate through the frequency dictionary\n    for digit, count in freq.items():\n        # If the digit frequency is less than or equal to the digit itself, return False\n        if count <= int(digit):\n            return False\n\n    # If all digits have a frequency less than or equal to their value, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    \n    for i in range(10):\n        if freq[i] > i:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(list_item == element for list_item in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # loop through the list and check if all items are equal to the element\n    for item in list:\n        if item!= element:\n            return False\n    # if all items are equal to the element, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(lst, elem):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == elem for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n\n    Parameters:\n    lst (list): List of integers\n    element (int): Integer to check against\n\n    Returns:\n    bool: True if all items in the list are equal to the given element, False otherwise\n    \"\"\"\n    return all(lst[i] == element for i in range(len(lst)))"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n\n    if list[0]!= element:\n        return False\n\n    return check_element(list[1:], element)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab{2,3}a')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[^b]*b{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b(?:(?<=bb){2}b)?'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?:b{2,3})'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.+b{2,3}')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?=.*a)(?=.*b)(?=.*c)(?=.*d)(?=.*e)(?=.*f)(?=.*g)(?=.*h)(?=.*i)(?=.*j)(?=.*k)(?=.*l)(?=.*m)(?=.*n)(?=.*o)(?=.*p)(?=.*q)(?=.*r)(?=.*s)(?=.*t)(?=.*u)(?=.*v)(?=.*w)(?=.*x)(?=.*y)(?=.*z)(?=.*A)(?=.*B)(?=.*C)(?=.*D)(?=.*E)(?=.*F)(?=.*G)(?=.*H)(?=.*I)(?=.*J)(?=.*K)(?=.*L)(?=.*M)(?=.*N)(?=.*O)(?=.*P)(?=.*Q)(?=.*R)(?=.*S)(?=.*T)(?=.*U)(?=.*V)(?=.*W)(?=.*X)(?=.*Y)(?=.*Z)(?=.*0)(?=.*1)(?=.*2)(?=.*3)(?=.*4)(?=.*5)(?=.*6)(?=.*7)(?=.*8)(?=.*9)(?=.*\\s)(?=.*\\W)(?=.*\\d)(?=.*\\w)(?=.*[\\s\\W\\d\\w])(?=.*b.{2,3})\\s*(?=.*a)\\s*(?=.*[b-f])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Repeat the given array k times and store in a list\n    repeated_array = a * k\n    \n    # Initialize two variables to store the maximum sum and the starting index of the maximum sum\n    max_sum = max_start = float('-inf')\n    \n    # Traverse through the modified array\n    for i in range(len(repeated_array)):\n        # Update the maximum sum if the current sum is greater than the maximum sum so far\n        if repeated_array[i] + a[i] > max_sum:\n            max_sum = repeated_array[i] + a[i]\n            max_start = i\n            \n    # Return the maximum sum and the starting index of the maximum sum\n    return max_sum, max_start"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    sub_array_sum = 0\n    prev_index = -1\n    \n    # Loop through the given array\n    for i in range(n):\n        # Check if the current index is equal to k times the previous index\n        if i % k == 0:\n            sub_array_sum = a[prev_index]\n        # Add the current element to the sub-array sum\n        sub_array_sum += a[i]\n        # Update the maximum sub-array sum found so far\n        max_sum = max(max_sum, sub_array_sum)\n        # Update the previous index for the next iteration\n        prev_index = i\n        \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_array = [a] * k\n    for i in range(1, k):\n        mod_array.append(a + a)\n\n    max_sum = float('-inf')\n    for i in range(n - k + 1):\n        current_sum = 0\n        for j in range(k):\n            current_sum += a[i + j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize sum and max_sum variables\n    sum_ = 0\n    max_sum = float('-inf')\n\n    # loop through the array\n    for i in range(n):\n        # add the current element to the sum\n        sum_ += a[i]\n\n        # if the sum is greater than the current max_sum, update the max_sum\n        if sum_ > max_sum:\n            max_sum = sum_\n\n        # if the current element is the last element of the array and the sum is less than the current max_sum, update the max_sum\n        if i == n - 1 and sum_ < max_sum:\n            max_sum = sum_\n\n        # if the current sum exceeds the limit k times, remove the first element of the array and reset the sum\n        if sum_ >= k * a[i]:\n            sum_ -= a[i]\n            sum_ -= a[0]\n\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(n-k+1):\n        current_sum = sum(a[i:i+k])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the original array\n    original_sum = sum(a)\n    \n    # Initialize the sum of the modified array\n    modified_sum = 0\n    \n    # Initialize the maximum sum of the modified array\n    max_sum = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        # Add the i-th element to the modified sum\n        modified_sum += a[i]\n        \n        # Check if the modified sum is greater than the original sum\n        if modified_sum > original_sum:\n            # If it is, update the maximum sum and reset the modified sum\n            max_sum = modified_sum\n            modified_sum = 0\n        \n        # If the modified sum is equal to the original sum and we have processed k elements, break out of the loop\n        if i >= k - 1:\n            break\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize the maximum sum and the window sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Iterate through the array and repeat k times\n    for i in range(n):\n        curr_sum += a[i]\n        \n        # If the current sum becomes negative, subtract the minimum value\n        while curr_sum < 0:\n            curr_sum -= a[i]\n        \n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        # If the current window sum becomes negative, add the minimum value\n        if i >= k-1:\n            curr_sum -= a[i-k+1]\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize max_sum and the result array\n    max_sum = float('-inf')\n    result = []\n    \n    # Repeat the array k times\n    for i in range(k):\n        a = a * 2\n    \n    # Initialize the sum of the first element of the array\n    sum_1 = a[0]\n    \n    # Iterate over the rest of the array\n    for i in range(1, n):\n        # Calculate the sum of the next element of the array\n        sum_i = a[i] + sum_1\n        \n        # Update the sum of the first element of the array\n        sum_1 = sum_i\n        \n        # Update the max_sum and the result array\n        if sum_i > max_sum:\n            max_sum = sum_i\n            result = [a[0]]\n        elif sum_i == max_sum:\n            result.append(a[i])\n    \n    # Return the result array\n    return result"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create the modified array by repeating the given array k times\n    modified_array = [a[0]] * k\n    for i in range(1, n):\n        modified_array.append(a[i])\n\n    # Initialize variables to keep track of the current maximum sum and the maximum sum seen so far\n    max_sum = float('-inf')\n    max_sum_so_far = float('-inf')\n\n    # Loop through the modified array\n    for i in range(k, n):\n        # Calculate the sum of the current and previous elements\n        current_sum = modified_array[i] + modified_array[i - k]\n\n        # Update the maximum sum seen so far\n        max_sum_so_far = max(max_sum_so_far, current_sum)\n\n        # Update the maximum sum if the current sum is larger\n        max_sum = max(max_sum, max_sum_so_far)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    if n % k!= 0:\n        return -1\n\n    # Calculate the sum of the first k elements\n    first_k_sum = sum(a[:k])\n\n    # Initialize the maximum sum and the sum of the current subarray\n    max_sum = first_k_sum\n    current_sum = first_k_sum\n\n    # Iterate through the remaining elements\n    for i in range(k, n):\n        # Calculate the sum of the current subarray\n        current_sum = current_sum - a[i - k] + a[i]\n\n        # Update the maximum sum if the current subarray has a higher sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n\n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            sum += count**2\n\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    count = 0\n    num = 2\n    while count < n:\n        total += num**2\n        count += 1\n        num += 2\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_numbers = [i for i in range(2, n+1, 2)]  \n    sum_of_squares = 0\n    for num in even_numbers:  \n        sum_of_squares += num**2  \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize the sum to zero\n    sum_squares = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of i to the sum_squares\n        sum_squares += i**2\n    \n    # return the sum_squares\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #initialize the sum variable\n    sum = 0\n    #iterate from 0 to n\n    for i in range(n):\n        #add the square of the current even number to the sum\n        sum += i*i\n    #return the sum\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for item in list1:\n        if len(item) > len(max_length_list):\n            max_length_list = item\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        if len(max_lengths) == 0:\n            max_lengths.append(len(list1[i]))\n        else:\n            if len(list1[i]) > max_lengths[-1]:\n                max_lengths[-1] = len(list1[i])\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum lengths\n    max_lengths = []\n    \n    # Loop through each sublist in the main list\n    for sublist in list1:\n        # Initialize an empty list to store the lengths of the sublist\n        lengths = []\n        \n        # Loop through each element in the sublist\n        for elem in sublist:\n            # Append the length of the current element to the lengths list\n            lengths.append(len(str(elem)))\n        \n        # Find the maximum length in the lengths list and append it to the max_lengths list\n        max_lengths.append(max(lengths))\n    \n    # Return the max_lengths list\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        length = len(list1[i])\n        if length > max(max_length_list):\n            max_length_list = [length]\n        elif length == max(max_length_list):\n            max_length_list.append(length)\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sub_list in list1:\n        if len(sub_list) > len(max_list):\n            max_list = sub_list\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Initialize a 2D list to store the number of ways to paint the fence\n    fence = [[0] * k for _ in range(n+1)]\n\n    # Base case: All posts have the same color\n    for i in range(n+1):\n        fence[i][0] = 1\n        fence[0][i] = 1\n\n    # Fill the fence array using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1 and j <= n:\n                fence[i][j] = 1\n            elif i == n and j <= n:\n                fence[i][j] = 1\n            elif i == 1 and j == 1:\n                fence[i][j] = 1\n            elif j == 1:\n                fence[i][j] = fence[i-1][j] + fence[i][j-1]\n            else:\n                fence[i][j] = fence[i-1][j] + fence[i][j-1] + fence[i-1][j-1]\n\n    # Return the number of ways to paint the fence\n    return fence[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    # Create a 2D array to store the number of ways to paint the fence\n    ways = [[0] * (k+1) for i in range(n+1)]\n\n    # Initialize the first row and column to 1\n    ways[0][0] = 1\n\n    # Fill in the rest of the array\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # If the color is the same, there is only one way to paint the fence\n            if j == 1:\n                ways[i][j] = ways[i-1][j]\n            # If the color is different, there are two ways:\n            #   - If the previous color was the same, there is one way to paint the fence\n            #   - If the previous color was different, there are two ways:\n            #     - If the previous color and the current color are the same, there is one way to paint the fence\n            #     - If the previous color and the current color are different, there is one way to paint the fence\n            #     - If the previous color is 1, there is one way to paint the fence\n            #     - If the current color is 1, there is one way to paint the fence\n            ways[i][j] = ways[i-1][j] + ways[i-1][j-1] + ways[i-1][1] + ways[i][1]\n\n    # Return the final answer\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Create a 2D array to store the number of ways of painting the fence\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    # Initialize the number of ways for 0-0, 0-1, 0-2, 1-1, 2-1\n    ways[0][0] = 1\n    ways[0][1] = 1\n    ways[0][2] = 1\n    ways[1][1] = 1\n    ways[2][1] = 1\n    \n    # Fill the remaining cells in the array\n    for i in range(3, n + 1):\n        for j in range(k + 1):\n            ways[i][j] = ways[i - 1][j] + ways[i - 2][j] + ways[i - 2][j - 1]\n    \n    # Return the final number of ways\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n\n    # Check if the number of colors is less than or equal to 1\n    if k <= 1:\n        return 0\n\n    # Check if the number of posts is less than or equal to 2\n    if n <= 2:\n        return k\n\n    # If the number of posts is greater than 2, we need to check for adjacent pairs with the same color\n    for i in range(1, n-1):\n        # Check if the current post and the next post have the same color\n        if colors[i] == colors[i+1]:\n            # Check if the next post is also adjacent to the current post\n            if i+2 < n and colors[i+2] == colors[i+1]:\n                # Increment the count variable\n                count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a list to store all possible arrangements\n    arr = []\n    # Initialize a list to store the color used for each post\n    used = []\n    # Base case: if the fence has only one post, it cannot be painted with any color\n    if n == 1:\n        return 0\n    # Base case: if the fence has only k colors, then all arrangements are possible\n    if k == 1:\n        return n\n    # If the fence has more than 1 post and k colors, then we can proceed to generate all possible arrangements\n    for i in range(1, k+1):\n        # Initialize a list to store the remaining colors\n        remaining = list(range(1, i+1))\n        # Base case: if there is only 1 post left, we can only use it with the remaining colors\n        if n == 1:\n            arr.append(remaining[:])\n            continue\n        # Generate all possible arrangements using this remaining color\n        for j in range(1, n+1):\n            # Remove the last post from the remaining list\n            remaining.pop()\n            # Check if the last post can be painted with the current color\n            if remaining[-1] in used:\n                continue\n            # If the last post can be painted, then paint it with the current color\n            arr.append(remaining[:])\n            used.append(remaining[-1])\n        # Remove the last color from the used list\n        used.pop()\n    # Return the total number of arrangements found\n    return len(arr)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if k == 1:\n        # If there is only one color, then there is only one way to paint the fence.\n        return 1\n    \n    # If there are more than one color, then there can be two ways to paint the fence:\n    # 1. Paint the fence with the first post having the first color and the last post having the last color.\n    # 2. Paint the fence with the first post having the second color and the last post having the third color.\n    \n    # Let's calculate the number of ways to paint the fence with the first post having the first color and the last post having the last color.\n    first_color_ways = count_no_of_ways(n-1, k-1)\n    \n    # Let's calculate the number of ways to paint the fence with the first post having the second color and the last post having the third color.\n    second_color_ways = count_no_of_ways(n-1, k)\n    \n    # Return the sum of the two numbers.\n    return first_color_ways + second_color_ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    fence = [0] * k\n    fence[0] = 1\n    for i in range(1, k):\n        fence[i] = fence[i-1] + fence[i]\n        \n    ways = 0\n    for i in range(n):\n        for j in range(k):\n            if fence[j] == 1:\n                ways += fence[j] + fence[k-1-j] - fence[j-1]\n                \n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # create a boolean matrix to store the colors for each post\n    colors = [[False for j in range(n)] for i in range(k)]\n    # create a boolean matrix to store the colors for each post with at most 2 adjacent posts\n    colors2 = [[False for j in range(n)] for i in range(k)]\n    # set the initial colors for each post\n    for i in range(k):\n        colors[i][0] = True\n        colors[i][1] = True\n        colors2[i][0] = True\n        colors2[i][1] = True\n\n    # iterate through the remaining posts\n    for i in range(2, n):\n        # for each color, try to paint the current post with the color of the previous post\n        for j in range(k):\n            # check if the previous post was already painted with the same color\n            if colors[j][i-2]:\n                # try to paint the current post with the color of the previous post\n                if colors[j][i-1]:\n                    colors[j][i] = True\n                    colors2[j][i] = True\n            # check if the previous post was already painted with the same color with at most 2 adjacent posts\n            if colors2[j][i-2]:\n                # try to paint the current post with the color of the previous post\n                if colors2[j][i-1]:\n                    colors2[j][i] = True\n\n    # count the number of ways of painting the fence such that at most 2 adjacent posts have the same color\n    count = 0\n    for i in range(k):\n        count += colors[i][0] * colors[i][1] * colors2[i][0] * colors2[i][1]\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Create a boolean list to store the color status of each post\n    colors = [False] * n\n\n    # Initialize the number of ways to 1\n    ways = 1\n\n    # Iterate through the first n-2 posts\n    for i in range(n-2):\n\n        # Check if at most 2 adjacent posts have the same color\n        if colors[i] == colors[i+1] == colors[i+2]:\n            continue\n\n        # If not, then there are 2 ways to paint the fence with the current post\n        ways *= 2\n\n        # Update the color status of the post\n        colors[i] = True\n\n        # Update the number of ways to paint the fence after this iteration\n        ways //= 2\n\n    # Return the final number of ways\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # initialize an empty list to store the number of ways\n    ways = []\n    # loop through all possible fence configurations\n    for i in range(k+1):\n        # loop through all possible combinations of colors\n        for j in range(1, n+1):\n            # if the combination of colors is at most 2 adjacent posts, then add it to the list of ways\n            if j <= 2:\n                ways.append(count_no_of_ways(j, k-i))\n    # return the total number of ways\n    return sum(ways)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    This function takes two numbers n and m and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    if quotient * m < n:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = int(n / m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    # check if n is negative\n    if n < 0:\n        # if n is negative, multiply m by -1\n        m *= -1\n        n *= -1\n    # initialize the result variable to 0\n    result = 0\n    # loop through the digits of n\n    for digit in str(n):\n        # if the current digit is greater than or equal to m, add 1 to result\n        if int(digit) >= m:\n            result += 1\n        # add the result to the next digit\n        result *= 10\n    # divide result by m and return the integer part\n    return int(result / m)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = (w**2 + h**2)**0.5  # calculate the semi-perimeter\n    a = (w**2 + h**2 - c**2)**0.5  # calculate the length of one side\n    return a"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function takes the width and height of a right angled triangle as inputs and returns the third side.\n\n    Args:\n    w (int): width of the triangle\n    h (int): height of the triangle\n\n    Returns:\n    int: the third side of the triangle\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter\n    s = (w + h) / 2\n    \n    # calculate the side opposite the hypotenuse\n    side_opposite = math.sqrt(w**2 + h**2 - s**2)\n    \n    # calculate the third side\n    third_side = side_opposite * math.sin(math.pi/3)\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(w**2 + h**2) - s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # Calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n    # Calculate the base of the triangle\n    b = math.sqrt(area / math.tan(math.pi / 3))\n    # Calculate the third side of the triangle\n    third_side = 2 * b\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Finding the area of the triangle\n    area = 0.5 * w * h\n    # Finding the length of the other side of the triangle\n    other_side = math.sqrt((area - w * h) / 2)\n    # Returning the third side\n    return other_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # calculate the length of the semi-perimeter of the right angled triangle\n    s = (w ** 2 + h ** 2) ** 0.5\n\n    # calculate the area of the triangle\n    area = (w * h) / 2\n\n    # calculate the value of the third side of the right angled triangle\n    third_side = math.sqrt(s ** 2 - area)\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w ** 2 + h ** 2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_len = math.sqrt(w**2 + h**2)\n    third_side = 2 * side_len\n    print(\"The third side of the right angled triangle is:\", third_side)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2)\n    return side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    This function takes a heterogeneous list as input and returns the maximum value.\n    '''\n    # Initializing variables\n    max_val = float('-inf')\n    # Iterating over the list\n    for value in listval:\n        # Checking if the current value is greater than the current maximum\n        if value > max_val:\n            max_val = value\n    # Returning the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    \n    # iterate through the list\n    for item in listval:\n        \n        # if the current item is greater than the current max value, update the max value\n        if item > max_val:\n            max_val = item\n            \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    \n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"List cannot be empty\")\n\n    max_val = listval[0]\n    for item in listval:\n        if type(item) == type(max_val):\n            if item > max_val:\n                max_val = item\n        else:\n            if item > max_val:\n                max_val = item\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n\n    Args:\n        listval (list): A list of heterogeneous values.\n\n    Returns:\n        int: The maximum value in the list.\n\n    Raises:\n        TypeError: If the input value is not a list.\n    \"\"\"\n    if not isinstance(listval, list):\n        raise TypeError(\"Input value must be a list.\")\n\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        return max(listval, key=listval.count)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Initialize maximum value to None\n    max_val = None\n\n    # Iterate over the list\n    for val in listval:\n        # If the current value is greater than the maximum value, update the maximum value\n        if val > max_val:\n            max_val = val\n\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for value in listval:\n        if max_val is None or value > max_val:\n            max_val = value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    # Get the type of the first value in the list\n    first_type = type(listval[0])\n    \n    # Loop through the rest of the values in the list\n    for val in listval[1:]:\n        # Check if the type of the current value is different from the first type\n        if type(val)!= first_type:\n            # If it is, return None because the list contains a mix of different types\n            return None\n    \n    # If we reach this point, all the values in the list have the same type\n    return max(listval)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 1\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through all numbers from 1 to the number minus 1\n    for i in range(1, number):\n\n        # If the current number is divisible by the i variable, add it to the sum\n        if number % i == 0:\n            sum += i\n\n    # Return the sum of all divisors\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize a variable to store the sum of all divisors\n    div_sum = 0\n    \n    # Loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(number**0.5)+1):\n        # If the number is divisible by the current number, add it to the sum\n        if number % i == 0:\n            div_sum += i\n    \n    # Return the sum of all divisors of the number\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors_sum += i\n    return divisors_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n\n    # Get all the divisors of the given number\n    divisors = [x for x in range(1, number+1) if number % x == 0]\n\n    # Calculate the sum of all divisors\n    sum_div = sum(divisors)\n\n    return sum_div"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inversions = 0\n\n    # Divide the array into two halves\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    # Recursively count inversions in both halves\n    left_inv = get_Inv_Count(left)\n    right_inv = get_Inv_Count(right)\n\n    # Count inversions in this and the right half\n    inv_count = 0\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            if i == 0 or left[i-1] <= right[j]:\n                inv_count += (len(left) - i)\n                i += 1\n            else:\n                j += 1\n        else:\n            if j == 0 or left[i] <= right[j-1]:\n                inv_count += (len(right) - j)\n                j += 1\n            else:\n                i += 1\n\n    # Combine inversions from both halves\n    inversions = left_inv + right_inv + inv_count\n\n    return inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Base Case: If the array has only one element or is empty, there is no inversion.\n    if len(arr) <= 1: \n        return 0\n    \n    # Divide the array into two halves recursively.\n    mid = len(arr) // 2\n    left_inv_count = get_Inv_Count(arr[:mid])\n    right_inv_count = get_Inv_Count(arr[mid:])\n    \n    # Combine the inversions in the two halves and return the count.\n    return left_inv_count + right_inv_count + merge_inv_counts(arr, 0, mid, len(arr))\n\ndef merge_inv_counts(arr, left, mid, right):\n    '''\n    Helper function to merge inversions in two sorted arrays.\n    '''\n    # Initialize variables to store the merged array, left inversions, and right inversions.\n    merged = arr[:right]\n    left_inv_count = 0\n    right_inv_count = 0\n    \n    # Compare the elements of the two sorted arrays.\n    i = left\n    j = mid\n    k = 0\n    while i < mid and j < right:\n        if arr[i] < arr[j]:\n            merged[k] = arr[i]\n            i += 1\n            left_inv_count += mid - i\n        else:\n            merged[k] = arr[j]\n            j += 1\n            right_inv_count += j - mid\n            \n        k += 1\n    \n    # Add the remaining elements of the first array.\n    while i < mid:\n        merged[k] = arr[i]\n        i += 1\n        k += 1\n        \n    # Add the remaining elements of the second array.\n    while j < right:\n        merged[k] = arr[j]\n        j += 1\n        k += 1\n        \n    # Return the total number of inversions.\n    return left_inv_count + right_inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        # Find the minimum element in the remaining elements of the array\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n                \n        # Swap the minimum element with the current element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        \n        # Count the inversions\n        inv_count += (n - i - 1) * (min_idx - i)\n        \n        # Recursively count the inversions in the subarrays to the left and right of the current element\n        get_Inv_Count(arr[:i])\n        get_Inv_Count(arr[min_idx+1:])\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate over the array and find the inversions\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            count += i\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += n - j\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n-i-1\n\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    # Divide the array into two halves\n    left_half = arr[:n//2]\n    right_half = arr[n//2:]\n    \n    # Recursively count inversions in each half\n    inv_count += get_Inv_Count(left_half)\n    inv_count += get_Inv_Count(right_half)\n    \n    # Count inversions in the entire array\n    inv_count += sum(left_half[i] > right_half[i] for i in range(n//2))\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n-j-1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(arr, l, m, r):\n    \"\"\"\n    Merge two subarrays of arr[l..r] using merge sort.\n    \"\"\"\n    n1 = m - l + 1\n    n2 = r - m\n    \n    L = [0] * n1\n    R = [0] * n2\n    \n    for i in range(n1):\n        L[i] = arr[l + i]\n        \n    for j in range(n2):\n        R[j] = arr[m + 1 + j]\n        \n    i = 0  # Initial index of left subarray\n    j = 0  # Initial index of right subarray\n    k = l  # Initial index of merged subarray\n    \n    while i < n1 and j < n2:\n        if L[i] <= R[j]:\n            arr[k] = L[i]\n            i += 1\n        else:\n            arr[k] = R[j]\n            j += 1\n        k += 1\n        \n    while i < n1:\n        arr[k] = L[i]\n        i += 1\n        k += 1\n        \n    while j < n2:\n        arr[k] = R[j]\n        j += 1\n        k += 1\n\ndef merge_sort(arr, l, r):\n    \"\"\"\n    Sort the subarray arr[l..r] using merge sort.\n    \"\"\"\n    if l < r:\n        m = l + (r - l) // 2\n        merge_sort(arr, l, m)\n        merge_sort(arr, m + 1, r)\n        merge(arr, l, m, r)\n\ndef get_Inv_Count(arr):\n    \"\"\"\n    Count the number of inversions in the array using merge sort.\n    \"\"\"\n    n = len(arr)\n    merge_sort(arr, 0, n - 1)\n    return merge_count(arr, 0, n - 1)\n\ndef merge_count(arr, l, r):\n    \"\"\"\n    Count the number of inversions in the subarray arr[l..r] using merge sort.\n    \"\"\"\n    if l < r:\n        m = l + (r - l) // 2\n        inv_count_left = merge_count(arr, l, m)\n        inv_count_right = merge_count(arr, m + 1, r)\n        \n        inv_count_left_m = inv_count_left\n        inv_count_right_m = inv_count_right\n        \n        i = l\n        j = m + 1\n        k = l\n        \n        while i <= m and j <= r:\n            if arr[i] <= arr[j]:\n                i += 1\n            else:\n                inv_count_left_m += m - i + 1\n                inv_count_right_m += j - m\n                merge_count_aux(arr, i, j, k)\n                k += 1\n                j += 1\n                \n        while i <= m:\n            inv_count_left_m += m - i + 1\n            merge_count_aux(arr, i, j, k)\n            i += 1\n            k += 1\n        \n        while j <= r:\n            inv_count_right_m += j - m\n            merge_count_aux(arr, i, j, k)\n            j += 1\n            k += 1\n        \n        inv_count_left_m -= merge_count_aux(arr, l, m, k)\n        inv_count_right_m -= merge_count_aux(arr, m + 1, r, k)\n        \n        return inv_count_left + inv_count_left_m + inv_count_right_m + inv_count_right\n    \n    return 0\n\ndef merge_count_aux(arr, i, j, k):\n    \"\"\"\n    Count the number of inversions in the subarray arr[i..j] using merge sort.\n    \"\"\"\n    n1 = j - i + 1\n    n2 = k - i\n    \n    L = [0] * n1\n    R = [0] * n2\n    \n    for i in range(n1):\n        L[i] = arr[i + i]\n        \n    for j in range(n2):\n        R[j] = arr[j + n1]\n        \n    i = 0  # Initial index of left subarray\n    j = 0  # Initial index of right subarray\n    k = i + n1\n    \n    while i < n1 and j < n2:\n        if L[i] <= R[j]:\n            i += 1\n        else:\n            k -= 1\n            arr[k] = L[i]\n            i +="
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Divide the array into two halves\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    # Recursively count the inversions in each half\n    inv_count_left = get_Inv_Count(left)\n    inv_count_right = get_Inv_Count(right)\n    \n    # Count the inversions between the two halves\n    inv_count_mid = 0\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            i += 1\n        elif left[i] > right[j]:\n            j += 1\n        else: # left[i] == right[j]\n            inv_count_mid += len(left) - i - 1\n            i += 1\n            j += 1\n    \n    # Return the total inversion count\n    return inv_count_left + inv_count_right + inv_count_mid"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list += flatten_list(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for element in list1:\n        if isinstance(element, list):\n            new_list += flatten_list(element)\n        else:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    \n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n            \n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        for key, value in item:\n            max_dict[key] = max(max_dict[key], value)\n    max_aggr = max(max_dict.values())\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n\n    for t in stdata:\n        for s in t:\n            max_dict[s] += t[s]\n\n    return max(max_dict.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the count of each item\n    item_counts = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for item, count in stdata:\n        # Update the count of each item in the defaultdict\n        item_counts[item] += count\n\n    # Find the maximum count for each item\n    max_counts = {item: max(count for count in counts) for item, counts in item_counts.items()}\n\n    # Calculate the maximum aggregate by multiplying the maximum count by the count of each item\n    max_aggregate = sum(max_counts[item] * count for item, count in stdata)\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n\n    Parameters:\n    stdata: list of tuples (key, value)\n\n    Returns:\n    maximum_aggregate: int\n    '''\n    # Create a defaultdict to store the frequency of each key\n    freq = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for key, value in stdata:\n        # Increment the frequency count for the current key\n        freq[key] += value\n\n    # Calculate the maximum aggregate\n    maximum_aggregate = max(freq.values())\n\n    return maximum_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n\n    Input:\n    - stdata: a list of tuples, where each tuple contains a student ID, grade, and name\n\n    Output:\n    - max_agg: the maximum aggregate among all the students\n    '''\n\n    # create a dictionary to store student names as keys and their corresponding grades as values\n    student_grades = defaultdict(int)\n\n    # iterate through the list of tuples\n    for student_id, grade, name in stdata:\n        # add the grade to the dictionary for the student's name\n        student_grades[name] += grade\n\n    # initialize variables to keep track of the maximum aggregate and the student name\n    max_agg = 0\n    max_student = None\n\n    # iterate through the dictionary and find the maximum aggregate\n    for name, grade in student_grades.items():\n        if grade > max_agg:\n            max_agg = grade\n            max_student = name\n\n    # return the maximum aggregate and the student name\n    return max_agg, max_student"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the sum of products and frequency of each item\n    freq = defaultdict(int)\n    # Iterate over the list of tuples and update the freq dictionary\n    for item, freq in stdata:\n        freq[item] += 1\n        # Calculate the sum of products of the items and update the total sum\n        total_sum = sum(item[0] * freq[item] for item in stdata)\n\n    # Calculate the maximum aggregate by finding the maximum frequency and multiplying it by the maximum frequency\n    max_freq = max(freq.values())\n    max_agg = max_freq * max_freq\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the count of each item in the list of tuples\n    count_dict = defaultdict(int)\n    for item, qty in stdata:\n        count_dict[item] += qty\n\n    # Calculate the maximum aggregate by iterating over the dictionary and taking the maximum count\n    max_count = max(count_dict.values())\n\n    # Create a dictionary to store the total amount of each item in the list of tuples\n    total_dict = defaultdict(int)\n    for item, qty in stdata:\n        total_dict[item] += qty * count_dict[item]\n\n    # Find the maximum total amount by iterating over the dictionary and taking the maximum value\n    max_total = max(total_dict.values())\n\n    # Return the maximum aggregate\n    return max_count * max_total"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Creating a defaultdict to store the maximum aggregate for each customer\n    max_aggs = defaultdict(int)\n\n    # Looping through the list of tuples\n    for t in stdata:\n        # Extracting the customer and their aggregate from the tuple\n        customer, agg = t\n        # Updating the maximum aggregate for the customer\n        max_aggs[customer] = max(max_aggs[customer], agg)\n\n    # Looping through the max_aggs dictionary and finding the maximum aggregate\n    max_agg = max(max_aggs.values())\n\n    # Returning the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each customer\n    max_aggr_dict = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for item in stdata:\n        # Calculate the maximum aggregate for the customer\n        max_aggr = item[1] + max_aggr_dict[item[0]]\n        \n        # Update the maximum aggregate for the customer in the dictionary\n        max_aggr_dict[item[0]] = max_aggr\n    \n    # Find the maximum value in the dictionary\n    max_aggr = max(max_aggr_dict.values())\n    \n    # Return the maximum aggregate value\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Use defaultdict to store the maximum value of each department\n    max_val = defaultdict(int)\n\n    for tup in stdata:\n        # Calculate the maximum value for each department\n        max_val[tup[1]] = max(max_val[tup[1]], tup[2])\n\n    # Find the maximum aggregate from the maximum values of each department\n    max_agg = max(max_val.values())\n\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(n+1)):\n        first = sum(int(i/2**(n-j)) % 2 for j in range(n))\n        last = sum(int(i/2**(n-j)) % 2 for j in range(n))\n        if first == last:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, 2**n):\n        temp = bin(i)[2:].zfill(n)\n        if temp[::-1] == temp:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    count = 0\n    # find the sum of first n bits\n    first_sum = sum([int(digit) for digit in str(2 ** n - 1)])\n    # check all possible binary sequences of length 2n\n    for i in range(2 ** n, 2 ** (n * 2)):\n        # find the sum of last n bits\n        last_sum = sum([int(digit) for digit in str(i - 1)])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        num = bin(i)[2:].zfill(2*n)\n        if sum(int(digit) for digit in num[:n]) == sum(int(digit) for digit in num[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    # Calculate the number of bits in the input number\n    bits = 0\n    while n > 0:\n        n >>= 1\n        bits += 1\n    # Iterate over all possible binary sequences of length 2n\n    for i in range(2**bits):\n        # Check if the first n bits are equal to the last n bits\n        if i & ((1 << n) - 1) == ((1 << n) - 1) - ((1 << n) - 1) << (bits - n):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_sum = sum([int(digit) for digit in bin(i)[2:].zfill(n)])\n        last_sum = sum([int(digit) for digit in bin(i+2**n-1)[2:].zfill(n)])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    i = 0\n    while i < (1 << n):\n        j = i\n        while j < (1 << n):\n            if ((i >> 1) & (j >> 1)) == 0 and ((i >> 1) & ((j ^ (1 << n)) >> 1)) == 0:\n                count += 1\n            j += 1\n        i += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**2*n, 2**n):\n        if sum(int(bit) for bit in format(i, 'b')) == sum(int(bit) for bit in format(i+2**n-1, 'b')):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 1 << n + 1):\n        last_n = i >> 1\n        first_n = i - last_n\n        if first_n == last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n, 2 ** (2 * n)):\n        first_half = bin(i)[2:][-n:]\n        second_half = bin(i)[2:][-n*2:-n]\n        if int(first_half) == int(second_half):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    \n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n            max_depth = max(max_depth, dict_depth(value))\n            current_depth -= 1\n        else:\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            current_depth -= 1\n            \n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            current_depth = 0\n        else:\n            current_depth = 0\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n            new_depth = dict_depth(value)\n            current_depth -= 1\n            if new_depth > max_depth:\n                max_depth = new_depth\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    current_depth += 1\n                    new_depth = dict_depth(item)\n                    current_depth -= 1\n                    if new_depth > max_depth:\n                        max_depth = new_depth\n\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth = max(depth, dict_depth(d[key]))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += 1\n            if depth > 1:\n                break\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth += 1\n        max_depth = max(max_depth, current_depth)\n        current_depth = 0\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for _ in d.values():\n        depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    max_depth = 0\n    current_depth = 0\n    \n    for k, v in d.items():\n        if isinstance(v, dict):\n            current_depth += 1\n            depth = dict_depth(v)\n            if depth > max_depth:\n                max_depth = depth\n            current_depth -= 1\n            \n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Base case: if the dictionary is empty, return 0\n    if not d:\n        return 0\n    \n    # Recursive case: return 1 plus the maximum depth of any key or value\n    max_depth = 0\n    for key in d:\n        key_depth = dict_depth(d[key])\n        max_depth = max(max_depth, key_depth + 1)\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for k, v in d.items())\n    else:\n        return 0"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr.rotate(rotations)  # rotate the array by rotations\n    element = arr[index]  # find the element at the given index\n    for i in range(rotations):  # undo the rotations\n        arr.rotate(-1)\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find the element at a given index after rotations.\n\n    Args:\n    arr: list of elements\n    ranges: list of ranges for rotations\n    rotations: number of rotations\n    index: index of the element to be found\n\n    Returns:\n    The element at the given index after the specified number of rotations.\n    \"\"\"\n    for i in range(rotations):\n        arr = [arr[(index + ranges[i]) % len(arr)]] + arr[:-1]\n    return arr[0]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes the given array, ranges, rotations, and index as input and returns the element at the given index after rotations.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    element = None\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the element is present at the current index and the count is less than the rotations\n        if arr[i] == index and count < rotations:\n            # Increment the count\n            count += 1\n            # If the count is equal to rotations, then the element is at the index\n            if count == rotations:\n                element = arr[i]\n                break\n        else:\n            count = 0\n    # If element is not found after rotations, return None\n    if element is None:\n        return None\n    # Iterate through the ranges and find the element at the given index\n    for i in range(len(ranges)):\n        if ranges[i][0] <= element <= ranges[i][1]:\n            # If the element is present at the current index and the count is less than the rotations\n            if element == index and count < rotations:\n                # Increment the count\n                count += 1\n                # If the count is equal to rotations, then the element is at the index\n                if count == rotations:\n                    return element\n            else:\n                count = 0\n    # If element is not found in any range, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Calculate the sum of all rotations\n    total_rotations = sum(rotations)\n\n    # Calculate the actual index after rotations\n    actual_index = (index + total_rotations) % len(arr)\n\n    # If the actual index is less than 0, shift it to the end of the array\n    if actual_index < 0:\n        actual_index += len(arr)\n\n    # Find the element at the actual index\n    element = arr[actual_index]\n\n    # Find the indices of the elements that are rotations of the given element\n    rotations_of_element = []\n    for i in range(len(ranges)):\n        if element in ranges[i]:\n            rotations_of_element.append(i)\n\n    # Find the final index of the element after rotations\n    final_index = index + 1\n    for i in rotations_of_element:\n        final_index += rotations[i]\n\n    # Return the element at the final index\n    return arr[final_index % len(arr)]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after rotations.\n\n    :param arr: The list of integers.\n    :param ranges: The list of ranges for each rotation.\n    :param rotations: The number of rotations required.\n    :param index: The index to find the element for.\n    :return: The element at the given index after rotations.\n    \"\"\"\n\n    # Create a dictionary to store the rotated lists of numbers.\n    rotated_lists = {}\n\n    # Iterate through the rotations and store the rotated lists in the dictionary.\n    for i in range(rotations):\n        for j in range(len(ranges)):\n            if j == 0:\n                rotated_lists[(i + 1) % rotations] = arr[index + ranges[j]:index + ranges[j + 1]]\n            elif j == len(ranges) - 1:\n                rotated_lists[(i + 1) % rotations] = arr[index - ranges[j - 1]:index - ranges[j]]\n            else:\n                rotated_lists[(i + 1) % rotations] = arr[index - ranges[j - 1]:index - ranges[j]] + arr[index + ranges[j]:index + ranges[j + 1]]\n\n    # Iterate through the dictionary to find the element at the given index.\n    for key, value in rotated_lists.items():\n        for i in range(len(value)):\n            if i == index:\n                return value[i]\n\n    # If no element is found, return None.\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == ranges[index]:\n            return arr[(i+rotations)%n]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes three arguments - the array, the ranges, the rotations and the index. \n    It returns the element at the given index after rotations.\n\n    Args:\n        arr: list of integers, the array to search for the element at the given index.\n        ranges: list of tuples, each tuple represents the range of rotations for each element of the array.\n        rotations: integer, the number of rotations to be applied to each element of the array.\n        index: integer, the index of the element whose element we want to find after rotations.\n\n    Returns:\n        integer, the element at the given index after rotations.\n    \"\"\"\n    def find_element(arr, index, ranges, rotations):\n        \"\"\"\n        Helper function to find the element at the given index after rotations.\n\n        Args:\n            arr: list of integers, the array to search for the element at the given index.\n            index: integer, the index of the element whose element we want to find after rotations.\n            ranges: list of tuples, each tuple represents the range of rotations for each element of the array.\n            rotations: integer, the number of rotations to be applied to each element of the array.\n\n        Returns:\n            integer, the element at the given index after rotations.\n        \"\"\"\n        def rotate_array(arr, n):\n            \"\"\"\n            Helper function to rotate an array n times.\n\n            Args:\n                arr: list of integers, the array to be rotated.\n                n: integer, the number of times to rotate the array.\n\n            Returns:\n                list of integers, the rotated array.\n            \"\"\"\n            for _ in range(n):\n                arr.append(arr.pop(0))\n            return arr\n\n        def find_element_after_rotations(arr, index, ranges):\n            \"\"\"\n            Recursive function to find the element at the given index after rotations.\n\n            Args:\n                arr: list of integers, the array to search for the element at the given index.\n                index: integer, the index of the element whose element we want to find after rotations.\n                ranges: list of tuples, each tuple represents the range of rotations for each element of the array.\n\n            Returns:\n                integer, the element at the given index after rotations.\n            \"\"\"\n            if len(arr) == 1:\n                return arr[0]\n\n            if index == 0:\n                return rotate_array(arr, ranges[0][0])[0]\n\n            if index > 0:\n                for i in range(len(ranges)):\n                    if index < ranges[i][1]:\n                        return find_element_after_rotations(arr[i:], index, ranges[:i] + ranges[i+1:])\n                return rotate_array(arr, ranges[-1][0])[0]\n\n        return find_element_after_rotations(arr, index, ranges)\n\n    return find_element(arr, index, ranges, rotations)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes three arguments:\n    - arr: A list of integers, representing the array.\n    - ranges: A list of tuples, where each tuple represents the range of integers to consider.\n    - rotations: An integer, representing the number of rotations to perform.\n    - index: An integer, representing the index of the element to find.\n\n    The function returns the element at the given index after performing the given number of rotations.\n    \"\"\"\n\n    # Function to calculate the element at a given index after rotations\n    def rotate_array(arr, rotations):\n        # Calculate the number of rotations required\n        rotations = rotations % len(arr)\n\n        # Initialize the result array\n        result = arr[rotations:] + arr[:rotations]\n\n        # Return the rotated array\n        return result\n\n    # Initialize the rotated array\n    rotated_arr = rotate_array(arr, rotations)\n\n    # Initialize the result\n    result = None\n\n    # Loop through each range of integers\n    for range in ranges:\n        # Calculate the start and end indices for the range\n        start, end = range\n\n        # Check if the current range includes the index\n        if index >= start and index < end:\n            # Calculate the difference between the index and the start of the range\n            diff = index - start\n\n            # Calculate the element at the required index after the rotations\n            result = rotated_arr[diff]\n            break\n\n    # Return the element at the given index after rotations\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    Parameters:\n        arr (list): List of integers.\n        ranges (list): List of integers representing the ranges of the integers in the array.\n        rotations (int): Number of rotations required to find the element at the given index.\n        index (int): The index of the element to be found after rotations.\n\n    Returns:\n        int: The element at the given index after the number of rotations.\n    \"\"\"\n\n    # Find the smallest range\n    min_range = min(ranges)\n\n    # Calculate the new index after rotations\n    new_index = (index + rotations) % len(arr)\n\n    # Find the element at the new index\n    element_at_new_index = arr[new_index]\n\n    # Calculate the difference between the element at the new index and the element at the index\n    difference = element_at_new_index - arr[index]\n\n    # If the difference is less than the minimum range, rotate the array\n    while difference < min_range:\n        arr.append(arr.pop(0))\n        min_range = min(ranges)\n        new_index = (index + rotations) % len(arr)\n        element_at_new_index = arr[new_index]\n        difference = element_at_new_index - arr[index]\n\n    return element_at_new_index"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in the array, ranges of rotations and index to find the element after rotations.\n    '''\n    for i in range(rotations):\n        arr.rotate(-ranges[i])\n    element = arr[index]\n    for i in range(rotations):\n        arr.rotate(ranges[i])\n    return element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p.*')\n    matches = re.findall(pattern, words)\n    return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p\\w+$')\n    result = []\n    for word in words:\n        match = pattern.match(word)\n        if match:\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # define pattern to match words starting with letter 'p'\n    pattern = re.compile(r'p\\w+')\n    # loop through the words and return the ones starting with letter 'p'\n    for word in words:\n        if pattern.match(word):\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-z]*')\n    result = list(filter(pattern.match, words))\n    \n    if len(result) == 2:\n        return result[0], result[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Regular expression pattern to match words starting with letter 'p'\n    pattern = re.compile(r'^p\\w+')\n    # Loop through the list of words\n    for word in words:\n        # Check if the word starts with 'p'\n        if pattern.match(word):\n            # If it does, return the two words\n            return [word, pattern.sub('', word)]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p[^a-zA-Z]*'\n    result = re.findall(pattern, words)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+')\n    for word in words:\n        if pattern.match(word):\n            return word\n    return \"No matching words found.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'\\b\\w*[Pp]\\w*\\b',''.join(words))\n    return p_words[:2]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # create an array to store the sum of increasing subsequence\n    sums = [0] * n\n\n    # loop through all the elements from index to n-1\n    for i in range(index, n):\n        # if the element is greater than the kth element\n        if a[i] > a[k]:\n            # add the sum of the previous maximum sum plus the element\n            sums[i] = sums[i-1] + a[i]\n        else:\n            # add the element directly to the sum of the current maximum sum\n            sums[i] = a[i]\n\n    # initialize a variable to store the maximum sum\n    max_sum = sums[n-1]\n\n    # loop through all the elements from n-1 to index-1\n    for i in range(n-2, index-1, -1):\n        # if the sum of the current element and the previous maximum sum is greater than the previous maximum sum\n        if sums[i] + sums[i+1] > max_sum:\n            max_sum = sums[i] + sums[i+1]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a table to store the sum of increasing subsequences ending at each index\n    table = [0] * n\n\n    # Base case: if the first element is greater than k, there is no increasing subsequence that ends at index 0\n    if a[0] > k:\n        return 0\n\n    # Initialize the maximum sum with the first element\n    max_sum = a[0]\n\n    # Iterate over the indices from 1 to n-1\n    for i in range(1, n):\n        # If the i-th element is greater than k, we can't include it in any increasing subsequence\n        if a[i] > k:\n            # Update the maximum sum if the sum of the increasing subsequence ending at index i is greater than max_sum\n            table[i] = max(table[i-1], max_sum)\n            continue\n\n        # If the i-th element is not greater than k, we can include it in the increasing subsequence ending at index i-1\n        # The sum of the increasing subsequence ending at index i is the sum of the sum of the increasing subsequence ending at index 0 to index i-2 and the value of the i-th element\n        table[i] = a[i] + max(table[i-1], max_sum)\n\n        # Update the maximum sum if the sum of the increasing subsequence ending at index i is greater than max_sum\n        max_sum = max(table[i], max_sum)\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the array to store the sum of increasing subsequence\n    sum_is = [0] * (k + 1)\n    # Initialize the maximum sum of increasing subsequence\n    max_sum_is = 0\n    \n    # Loop through the given array\n    for i in range(index, n):\n        # Calculate the sum of the prefix up to the current index and kth element\n        cur_sum_is = sum_is[i - index] + a[i]\n        \n        # Update the maximum sum of increasing subsequence\n        max_sum_is = max(max_sum_is, cur_sum_is)\n        \n        # Update the sum of the increasing subsequence from prefix up to the current index and kth element\n        for j in range(i + 1, k + 1):\n            sum_is[j] = max(sum_is[j], sum_is[j - i] + a[i])\n            \n    return max_sum_is"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    if index == k:\n        return a[k]\n    if index > k:\n        return max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index, k-1)) + a[k]\n    else:\n        return max_sum_increasing_subseq(a, n, index-1, k) + a[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * (n+1)\n    max_sum = float('-inf')\n    start = 0\n    for i in range(1, n+1):\n        dp[i] = a[index]\n        for j in range(i, k+1):\n            dp[i] += a[j]\n            if dp[i] > dp[j]:\n                dp[i] = dp[j]\n                start = j\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize maximum sum of increasing subsequence and its prefix\n    max_sum = float('-inf')\n    prefix = []\n    \n    # Traverse the array from 0 to n-1\n    for i in range(n):\n        # Check if i is the kth element\n        if i == k - 1:\n            # Check if the sum of the prefix till i is greater than the maximum sum found so far\n            if sum(prefix) > max_sum:\n                max_sum = sum(prefix)\n                # Add k to the prefix\n                prefix.append(a[k])\n            else:\n                # If the sum of the prefix till i is less than or equal to the maximum sum found so far, then we can include k as a new element in the prefix\n                prefix.append(a[k])\n        # If i is not the kth element\n        else:\n            # Check if the sum of the prefix till i is greater than the maximum sum found so far\n            if sum(prefix) > max_sum:\n                # Update maximum sum and prefix\n                max_sum = sum(prefix)\n                # Remove the last element from the prefix\n                prefix.pop()\n                # Add a new element to the prefix\n                prefix.append(a[i])\n            else:\n                # If the sum of the prefix till i is less than or equal to the maximum sum found so far, then we can include a new element in the prefix\n                prefix.append(a[i])\n    \n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Given a list of integers a and its length n, and an integer index,\n    return the maximum sum of increasing subsequence from prefix until ith index\n    and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize max_sum to zero and curr_sum to zero\n    max_sum = 0\n    curr_sum = 0\n    \n    # Iterate over all possible starting indices\n    for i in range(1, n+1):\n        # Check if the current index is greater than or equal to the given index k\n        if i >= k:\n            # Update the current_sum by subtracting the value at the current index\n            curr_sum -= a[i-1]\n            \n            # Check if the current sum is greater than the maximum sum found so far\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    \n    # Return the maximum sum found\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n    elif k == index:\n        return a[k] + max_sum_increasing_subseq(a, n, index - 1, k)\n    else:\n        return max(a[i] + max_sum_increasing_subseq(a, n, index, k - 1) for i in range(index + 1))\n\n\nif __name__ == '__main__':\n    a = [int(x) for x in input(\"Enter the elements of array separated by space: \").split()]\n    n = len(a)\n    index = int(input(\"Enter the index of the element for which we need to find the maximum sum of increasing subsequence: \"))\n    k = int(input(\"Enter the index of the kth element: \"))\n    print(\"Maximum sum of increasing subsequence from\", index, \"index to\", k, \"index including\", k, \"element is:\",\n          max_sum_increasing_subseq(a, n, index, k))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n\n    if index == 0:\n        if a[index] <= k:\n            return a[index]\n        else:\n            return 0\n\n    if a[index] <= k:\n        return max(a[index], max_sum_increasing_subseq(a, n, index - 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    if k == index:\n        prefix_sum = 0\n        for i in range(index):\n            prefix_sum += a[i]\n        if index == 0:\n            return prefix_sum\n        else:\n            return max(prefix_sum, max_sum_increasing_subseq(a, n, index - 1, k))\n    else:\n        prefix_sum = 0\n        for i in range(index):\n            prefix_sum += a[i]\n        if index == 0:\n            return max(prefix_sum, max_sum_increasing_subseq(a, n, index - 1, k))\n        else:\n            return max(prefix_sum, max_sum_increasing_subseq(a, n, index - 1, k))\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes in a tuple and its dimensions (m and n) and returns the colon of the tuple.\n    \n    Parameters:\n        tuplex (tuple): A tuple.\n        m (int): Number of rows in the colon.\n        n (int): Number of columns in the colon.\n        \n    Returns:\n        list: A list of the elements in the colon.\n        \n    Example:\n        col = colon_tuplex((1, 2, 3, 4, 5), 2, 3)\n        print(col) # Output: [1, 2, 3, 4]\n    '''\n    \n    # Creating a copy of the tuple to prevent any changes to the original tuple\n    col = deepcopy(tuplex)\n    \n    # Iterating through the rows in the colon\n    for i in range(m):\n        # Iterating through the columns in the colon\n        for j in range(n):\n            # Setting the element at the current position to None\n            col[i*n+j] = None\n    \n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > len(tuplex) or n > len(tuplex[0]):\n        return None\n\n    col = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(deepcopy(tuplex[i][j]))\n        col.append(tuple(row))\n\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a deep copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # find the length of the longest tuple\n    max_length = max([len(x) for x in tuplex_copy])\n    # create a list to store the colon\n    colon = []\n    # loop through the rows of the colon\n    for i in range(n):\n        # create an empty list to store the current row\n        row = []\n        # loop through the columns of the colon\n        for j in range(m):\n            # check if the current position is within the bounds of the tuple\n            if j < max_length:\n                # append the j-th element of the longest tuple to the current row\n                row.append(tuplex_copy[j][i])\n            else:\n                # if the current position is outside the bounds, append None to the current row\n                row.append(None)\n        # add the current row to the colon\n        colon.append(row)\n    # return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Get the number of elements in the tuple\n    length = len(tuplex)\n    # Create an empty list to store the colon\n    colon = []\n    # Loop through the tuple and add the appropriate number of elements\n    for i in range(length):\n        if i == m:\n            colon.append('(')\n        if i == n:\n            colon.append(')')\n        else:\n            colon.append(tuplex[i])\n    # Return the colon as a tuple\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 0 and n == 0:\n        return ()\n    elif m == 1:\n        if n == 1:\n            return (tuplex[0],)\n        elif n == 2:\n            return (tuplex[0], tuplex[1])\n    elif m == 2:\n        if n == 1:\n            return (tuplex[0],)\n        elif n == 2:\n            return (tuplex[0], tuplex[1])\n        elif n == 3:\n            return (tuplex[0], tuplex[1], tuplex[2])\n    else:\n        row = deepcopy(tuplex)\n        for i in range(m-1):\n            row.append(row[i])\n        return colon_tuplex(row,m-1,n-1)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Create a copy of the tuple to avoid modifying the original one\n    colontuplex = deepcopy(tuplex)\n\n    # Loop through the columns and add elements to the colon\n    for i in range(m):\n        colontuplex[i] = tuplex[i][n-1]\n\n    return colontuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # check if the number of elements in the tuple is less than the number of columns\n    if len(tuplex) < n:\n        print(\"Error: Number of columns is greater than the number of elements in the tuple.\")\n        return None\n    # create a copy of the tuple to avoid modifying the original\n    new_tuplex = deepcopy(tuplex)\n    # create a list to store the colon\n    colon = []\n    # iterate over each element in the tuple\n    for i in range(m):\n        # if the current element is not None, add it to the colon list\n        if new_tuplex[i] is not None:\n            colon.append(new_tuplex[i])\n        # if we have reached the end of the tuple, exit the loop\n        elif i == m-1:\n            break\n    # return the colon list\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    temp_tuplex = deepcopy(tuplex)\n    # Loop through the tuple\n    for i in range(m):\n        # Slice the tuple with the same index as the current column and remove the slice from the copy\n        temp_tuplex = temp_tuplex[:i] + (temp_tuplex[i+1:i+n+1],) + temp_tuplex[i+n+1:]\n    return tuple(temp_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Args:\n        tuplex (tuple): A tuple of integers.\n        m (int): The number of rows to include in the colon.\n        n (int): The number of columns to include in the colon.\n\n    Returns:\n        tuple: A tuple of integers, representing a colon of the input tuple.\n    \"\"\"\n\n    # Create a copy of the input tuple\n    colon_tup = deepcopy(tuplex)\n\n    # Calculate the number of elements to include in the colon\n    num_elements = m * n\n\n    # Determine the number of elements to include at the beginning\n    num_at_beginning = m - (num_elements % m)\n\n    # Determine the number of elements to include at the end\n    num_at_end = num_elements - num_at_beginning - num_elements % m\n\n    # Determine the number of elements to include in the middle\n    num_in_middle = num_elements - num_at_beginning - num_at_end\n\n    # Add the number of elements to include at the beginning to the colon\n    colon_tup[:num_at_beginning] = [0] * num_at_beginning\n\n    # Add the number of elements to include in the middle to the colon\n    colon_tup[num_at_beginning:num_at_beginning + num_in_middle] = [0] * num_in_middle\n\n    # Add the number of elements to include at the end to the colon\n    colon_tup[-num_at_end:] = [0] * num_at_end\n\n    # Return the colon tuple\n    return colon_tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        col.append(tuplex[i][n-1])\n    return col\n"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # create a list to store the maximum product for each factor\n    max_product = [0] * (N + 1)\n    \n    # iterate over the elements of the first list\n    for i in range(len(nums1)):\n        # iterate over the elements of the second list\n        for j in range(len(nums2)):\n            # compute the product of the factor of nums1[i] and nums2[j]\n            product = nums1[i] * nums2[j]\n            # find the index of the maximum product in the max_product list\n            max_index = max_product.index(max(max_product))\n            # update the max_product list\n            max_product[max_index] = max(max_product[max_index], product)\n    \n    # find the index of the maximum product in the max_product list\n    max_index = max_product.index(max(max_product))\n    # return the maximum product\n    return max_product[max_index]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        return \"Error: lists have different lengths\"\n    \n    # initialize variables to store the largest products\n    largest_product = -float('inf')\n    largest_products = []\n\n    # iterate over all possible pairs of factors to select\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)+1):\n            # find the largest product by multiplying the two selected factors\n            product = max(nums1[i], nums1[j]) * max(nums2[i], nums2[j])\n            \n            # update the variables if the product is larger than the current largest product\n            if product > largest_product:\n                largest_product = product\n                largest_products = [product]\n            elif product == largest_product:\n                largest_products.append(product)\n            \n            # check if we have found the specified number of largest products\n            if len(largest_products) == N:\n                break\n    \n    # return the largest products found\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Ensure that the input lists are of equal length\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both input lists must be of equal length.')\n\n    # Initialize a list to store the largest products\n    largest_products = []\n\n    # Loop over the specified number of products to find\n    for _ in range(N):\n        # Select a random factor from nums1 and nums2\n        factor1 = nums1[0] if random.choice([True, False]) else nums2[0]\n        factor2 = nums1[1] if random.choice([True, False]) else nums2[1]\n\n        # Calculate the product of the two selected factors\n        product = factor1 * factor2\n\n        # Add the product to the list of largest products\n        largest_products.append(product)\n\n    # Sort the list of largest products in descending order\n    largest_products.sort(reverse=True)\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value in nums1 and nums2\n    max_val = max(nums1[-1], nums2[-1])\n    \n    # Initialize the list to store the largest products\n    largest_products = []\n    \n    # Iterate N times\n    for i in range(N):\n        # Calculate the largest product of two lists using the current index\n        current_product = max(nums1[i] * nums2[i], nums1[i] * nums2[-1], nums1[-1] * nums2[i], nums1[-1] * nums2[-1])\n        \n        # If the current product is greater than the maximum value, add it to the list\n        if current_product > max_val:\n            largest_products.append(current_product)\n    \n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the sum of products and maximum product\n    product_sum = 0\n    max_product = 0\n\n    # Loop through the two lists and find the largest products\n    for i in range(N):\n        # Calculate the product of the current pair\n        current_product = nums1[i] * nums2[i]\n\n        # If the current product is greater than the maximum product, update the maximum product\n        if current_product > max_product:\n            max_product = current_product\n\n        # Add the current product to the sum of products\n        product_sum += current_product\n\n    # Return the sum of products and the maximum product\n    return product_sum, max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # create a list of tuples containing the product of each factor from each list and its corresponding index\n    products = [(nums1[i] * nums2[j], i) for i in range(N) for j in range(N)]\n    # sort the list of products in descending order\n    products.sort(key=lambda x: x[0], reverse=True)\n    # return the product of the first N largest products\n    return products[0][0]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    for i in range(N):\n        product1 = 1\n        product2 = 1\n        for j in range(N):\n            if i!= j:\n                product1 *= max(nums1[j], nums2[j])\n                product2 *= max(nums1[i], nums2[i])\n        max_product = max(max_product, product1 * product2)\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the largest products and the indices of the selected factor\n    largest_products = []\n    indices = []\n    # Loop through the two lists and find the N largest products\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i == j:\n                continue\n            product = nums1[i] * nums2[j]\n            if len(largest_products) < N:\n                largest_products.append(product)\n                indices.append((i, j))\n            elif product > largest_products[-1]:\n                largest_products[-1] = product\n                indices[-1] = (i, j)\n    # Return the largest products and their indices\n    return largest_products, indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize empty list to store the largest products\n    largest_products = []\n\n    # Sort the two input lists in descending order\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n\n    # Loop through each factor between 1 and N\n    for i in range(1, N + 1):\n        # Find the corresponding factor in the two input lists\n        factor1 = nums1[i - 1]\n        factor2 = nums2[i - 1]\n\n        # Loop through each pair of indices in the input lists\n        for j in range(len(nums1) - i + 1):\n            # Calculate the product of the selected factors and the remaining factors in the input lists\n            product = factor1 * factor2\n\n            # Append the largest product to the list of largest products\n            largest_products.append(product)\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two parameters a and b and returns the maximum of them.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:   \n        return a   \n    else:   \n        return b   "
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: # while the least significant bit is 0\n        n >>= 1 # shift the number one bit to the left\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the position of the leftmost unset bit\n    left_most_unset_bit = -1\n    \n    # Initialize the number of 1's in n\n    num_ones = 0\n    \n    # Iterate through the bits of n\n    for bit in bin(n)[2:]:\n        num_ones += 1\n        \n        # If we encounter a 1, then we have found the leftmost unset bit\n        if bit == '1':\n            left_most_unset_bit = num_ones - 1\n    \n    # Set the leftmost unset bit to 1\n    n = n ^ (1 << left_most_unset_bit)\n    \n    # Convert n back to an integer\n    return int(n, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Loop through all bits and find the left most unset bit\n    for i in range(32): \n        if (n & (1 << i)) == 0: \n            n = n | (1 << i)\n            break\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:  # if n is even, move the rightmost bit to the left\n        n >>= 1\n    n |= 1  # set the leftmost bit to 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the leftmost unset bit to be 1\n    unset_bit = 1\n\n    # Iterate over each bit in the binary representation of n\n    for i in range(1, 32):\n\n        # If the i-th bit in the binary representation of n is 1\n        if (n & (1 << i)):\n\n            # Set the leftmost unset bit to be i and return\n            unset_bit = i\n            return unset_bit\n\n    # If there are no unset bits in the binary representation of n, return None\n    return None"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to store the rightmost unset bit \n    unset_bit = 1\n    \n    # Iterate through each bit of the binary representation of n\n    for i in range(31, -1, -1):\n        # Check if the bit is unset\n        if ((n >> i) & 1) == 1:\n            # If it's unset, set the unset_bit and break the loop\n            unset_bit = (n & ~(1 << i))\n            break\n    \n    # Return the unset bit\n    return unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Loop through the bits of the integer until we find the first unset bit\n    while (n & 1) == 0:\n        n = n >> 1\n    \n    # Set the left most unset bit to 1\n    n = n | 1\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function sets the left most unset bit in a given number n.\n    \n    Args:\n    n (int): A positive integer.\n    \n    Returns:\n    int: The modified number with the left most unset bit set to 1.\n    \"\"\"\n    # Initialize a variable to keep track of the leftmost unset bit\n    unset_bit = -1\n    \n    # Traverse the binary representation of n from right to left\n    for i in range(31, -1, -1):\n        # If the i-th bit of n is 1, then unset_bit must be set to i\n        if n & (1 << i):\n            unset_bit = i\n            break\n    \n    # If unset_bit is still -1, it means there is no unset bit in n\n    if unset_bit == -1:\n        return n\n    \n    # Set the i-th bit of n to 1\n    n = n | (1 << unset_bit)\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize count variable to 0\n    count = 0\n    # Initialize mask variable to 1\n    mask = 1\n    # While the mask is not equal to 0, loop\n    while mask!= 0:\n        # If the leftmost bit is unset, set the mask to 0 and break the loop\n        if (n & mask) == 0:\n            mask = 0\n            break\n        # If the leftmost bit is set, increment the count and update the mask\n        else:\n            count += 1\n            mask <<= 1\n    # Return the count of unset bits\n    return count"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit_count = 0\n    while (n & 1) == 0:\n        n >>= 1\n        bit_count += 1\n\n    n |= (1 << bit_count)\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments - radius and height of the cone.\n    It then calculates the volume of the cone and returns the result.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (1/3)*math.pi*r**2*h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function calculates the volume of a cone with the given base radius r and height h.\n    '''\n    # calculate the volume\n    vol = (1/3) * math.pi * (r ** 2) * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r ** 2 * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    area = math.pi * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        power += 1\n        n >>= 1\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Convert n to binary and count the number of 1s\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n\n    # Calculate the highest power of 2 that is less than or equal to n\n    highest = 1 << count\n    while highest > n:\n        highest >>= 1\n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize the variable to store the highest power of 2 that is less than or equal to n\n    highest_power = 1\n    \n    # Loop through all the numbers from 2 to n (inclusive)\n    for i in range(2, n+1):\n        \n        # If the current number is a power of 2, set it as the highest power of 2 found so far\n        if i == 2 ** int(i ** 0.5):\n            highest_power = i\n        \n        # If the current number is not a power of 2, break out of the loop and return the highest power found so far\n        else:\n            break\n    \n    # Return the highest power of 2 found\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n & (n-1) == 0: \n        return highest_Power_of_2(n//2) + 1\n    else: \n        return highest_Power_of_2(n)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize a variable to store the maximum power of 2\n    max_power_of_2 = 0\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is a power of 2\n        if i & (i - 1) == 0:\n            # If it is, update the maximum power of 2\n            max_power_of_2 = i\n\n    # Return the maximum power of 2\n    return max_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # find the highest power of 2 that is less than or equal to n\n    highest_power_of_2 = 1\n    while highest_power_of_2 < n:\n        highest_power_of_2 <<= 1\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        power = 1\n        while power * 2 <= n:\n            power *= 2\n        return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize variables\n    highest_power = 0\n    temp = 1\n    # loop until temp >= n\n    while temp <= n:\n        # check if temp is a power of 2\n        if temp == 2**highest_power:\n            # if it is, update highest_power\n            highest_power += 1\n        temp *= 2\n    # return the highest power of 2 found\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize a variable to keep track of the highest power of 2 \n    highest = 1\n\n    # Loop through all numbers from 2 to n, checking if each one is a power of 2\n    for i in range(2, n+1): \n\n        # If the number is a power of 2, set the highest variable to that number\n        if i == 2**highest:\n            highest = i\n\n    # Return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n & (n-1)!= 0:\n        n = n & (n-1)\n    return n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Base case: if n is 0 or 1, return n\n    if n <= 1:\n        return n\n    # Recursive case: return the nth lucas number by summing the (n-1)th and (n-2)th lucas numbers\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    lucas = [0, 2]  # initialize the first two Lucas numbers as 0 and 2\n    for i in range(2, n):\n        lucas.append(lucas[i-1] + lucas[i-2])  # calculate the next Lucas number\n    return lucas[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th Lucas number.\n    '''\n    lucas_list = [2, 1]\n    for i in range(2, n):\n        lucas_list.append(lucas_list[i-1] + lucas_list[i-2])\n    return lucas_list[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    This function takes an integer n as input and returns the nth lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds the nth lucas number.\n\n    Args:\n        n: An integer value representing the nth lucas number to be found.\n\n    Returns:\n        An integer value representing the nth lucas number.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n\n    # Recursive case\n    lucas_num = find_lucas(n-1) + find_lucas(n-2)\n    return lucas_num"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    # Initialize the first two lucas numbers\n    lucas_prev = 0\n    lucas_curr = 1\n\n    # Loop through the remaining n-2 lucas numbers\n    for i in range(2, n):\n        # Calculate the next lucas number by adding the previous two\n        lucas_next = lucas_prev + lucas_curr\n\n        # Update the previous and current lucas numbers\n        lucas_prev = lucas_curr\n        lucas_curr = lucas_next\n\n    return lucas_curr"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for elem in list_:\n        result.append(string.format(elem))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(item) for item in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(element) for element in list_]\n    return formatted_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): List of lists representing the first layer of the nested dictionary.\n        l2 (list): List of lists representing the second layer of the nested dictionary.\n        l3 (list): List of lists representing the third layer of the nested dictionary.\n\n    Returns:\n        dict: A nested dictionary representing the input lists.\n    \"\"\"\n    # Create a nested dictionary to store the input lists.\n    result = {}\n\n    # Iterate through the first layer list of lists.\n    for i, layer1 in enumerate(l1):\n        # Create a new dictionary to store the current layer.\n        layer = {}\n\n        # Iterate through the current layer's list of lists.\n        for j, layer2 in enumerate(layer1):\n            # Create a new dictionary to store the current sub-layer.\n            sub_layer = {}\n\n            # Iterate through the current sub-layer's list of lists.\n            for k, layer3 in enumerate(layer2):\n                # Add the current value to the sub-layer dictionary.\n                sub_layer[l3[k]] = layer3\n\n            # Add the sub-layer dictionary to the current layer dictionary.\n            layer[l2[j]] = sub_layer\n\n        # Add the current layer dictionary to the result dictionary.\n        result[l1[i]] = layer\n\n    # Return the final nested dictionary.\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n    # loop through each list and add the items to the dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]] = l3[i]\n    # return the final dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    This function takes any number of lists as arguments and returns a nested dictionary.\n\n    Args:\n    - *args: list of lists to be converted to nested dictionary.\n\n    Returns:\n    - dict: nested dictionary with the same structure as the input lists.\n    \"\"\"\n    result = {}\n    for i, lst in enumerate(args):\n        for j, item in enumerate(lst):\n            if isinstance(item, list):\n                if i not in result:\n                    result[i] = {}\n                if j not in result[i]:\n                    result[i][j] = {}\n                for k, sub_item in enumerate(item):\n                    if isinstance(sub_item, tuple):\n                        sub_item = list(sub_item)\n                    if isinstance(sub_item, dict):\n                        for k1, sub_sub_item in sub_item.items():\n                            if isinstance(sub_sub_item, tuple):\n                                sub_sub_item = list(sub_sub_item)\n                            if isinstance(sub_sub_item, list):\n                                sub_sub_item = [item for sublist in sub_sub_item for item in sublist]\n                            if isinstance(sub_sub_item, dict):\n                                sub_sub_item = convert_list_dictionary(sub_sub_item)\n                            if k1 not in result[i][j]:\n                                result[i][j][k1] = {}\n                            result[i][j][k1][k] = sub_sub_item\n                    else:\n                        if k not in result[i][j]:\n                            result[i][j][k] = {}\n                        result[i][j][k][0] = sub_item\n            else:\n                if i not in result:\n                    result[i] = {}\n                if j not in result[i]:\n                    result[i][j] = {}\n                if item not in result[i][j]:\n                    result[i][j][item] = []\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Convert list1 to dictionary\n    d1 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n    # Convert list2 to dictionary\n    d2 = {}\n    for i in range(len(l2)):\n        d2[l2[i]] = l3[i]\n    # Combine the two dictionaries\n    combined_dict = {**d1, **d2}\n    return combined_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1: list of strings\n    l2: list of lists of strings\n    l3: list of tuples\n\n    Returns:\n    nested_dict: nested dictionary of lists of lists of strings\n    \"\"\"\n    \n    nested_dict = {}\n    \n    # convert l1 to a dictionary\n    nested_dict[0] = dict(zip(l1, range(len(l1))))\n    \n    # convert l2 to a nested dictionary\n    for i in range(len(l2)):\n        nested_dict[i+1] = {}\n        for j in range(len(l2[i])):\n            nested_dict[i+1][j] = l2[i][j]\n            \n    # convert l3 to a nested dictionary\n    for i in range(len(l3)):\n        nested_dict[i+1][0] = l3[i][0]\n        \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n\n    Args:\n    - *lists: one or more lists of items to be converted to a nested dictionary.\n\n    Returns:\n    - A nested dictionary with the items of each list as keys and the indices of each item as values.\n    \"\"\"\n    result = {}\n    for index, list_ in enumerate(lists):\n        for item in list_:\n            if isinstance(item, list):\n                key = index\n                sub_dict = convert_list_dictionary(*item)\n                result.update(sub_dict)\n            else:\n                key = item\n                value = index\n                result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): List of strings.\n        l2 (list): List of integers.\n        l3 (list): List of dictionaries.\n\n    Returns:\n        list: Nested dictionary.\n    \"\"\"\n\n    # Define a nested dictionary\n    nested_dict = {}\n\n    # Loop through the three lists and populate the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][\"sublist\"] = l3[i]\n\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(*lists):\n    result = {}\n    for i, lst in enumerate(lists):\n        for item in lst:\n            if type(item) == dict:\n                for key, value in item.items():\n                    if key in result:\n                        result[key].append(value)\n                    else:\n                        result[key] = [value]\n            elif type(item) == list:\n                result.update(convert_list_dictionary(*item))\n            else:\n                if i == 0:\n                    result[item] = {}\n                else:\n                    result[item] = []\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Initialize an empty dictionary\n    result = {}\n    \n    # Iterate through each list\n    for lst in [l1, l2, l3]:\n        # Iterate through each element in the list\n        for element in lst:\n            # Split the key-value pair into key and value\n            key, value = element.split(':')\n            \n            # Check if the key already exists in the dictionary\n            if key in result:\n                # If it does, append the value to the list of values associated with the key\n                result[key].append(value)\n            else:\n                # If the key doesn't exist, create a new key-value pair and append the value to the list of values\n                result[key] = [value]\n    \n    # Return the final nested dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    #initialize an empty dictionary\n    nested_dict = {}\n    \n    #iterate through each list\n    for i in range(len(l1)):\n        #for each list, create a nested dictionary with keys and values as lists\n        nested_dict[i] = {\"key1\":l1[i], \"key2\":l2[i], \"key3\":l3[i]}\n    \n    #return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 20\n    elif n == 5:\n        return 35\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # base case\n    if n == 1:\n        return n\n\n    # recursive case\n    else:\n        return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    \n    # calculate f(n/2) and f(n/3)\n    f_n_half = get_max_sum(n//2)\n    f_n_third = get_max_sum(n//3)\n    \n    # find the maximum of (f(n/2) + f(n/3) + f(n/4) + f(n/5)) and n\n    f_n = max(f_n_half + f_n_third + n, n)\n    \n    return f_n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # initialize max sum\n    max_sum = n\n\n    # loop through the numbers from 2 to n/5\n    for i in range(2, n/5+1):\n        # calculate the sum using the given equation\n        sum = (get_max_sum(i*2) + get_max_sum(i*3) + get_max_sum(i*4) + get_max_sum(i*5))\n\n        # update max sum if current sum is greater than max sum\n        if sum > max_sum:\n            max_sum = sum\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # base case\n    if n == 1:\n        return n\n\n    # recursive case\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return n\n    else:\n        sum1 = get_max_sum(n//2)\n        sum2 = get_max_sum(n//3)\n        sum3 = get_max_sum(n//4)\n        sum4 = get_max_sum(n//5)\n        return max(sum1 + sum2 + sum3 + sum4, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    f_half = get_max_sum(n//2)\n    f_three = get_max_sum(n//3)\n    f_four = get_max_sum(n//4)\n    f_five = get_max_sum(n//5)\n    \n    f = max(f_half + f_three + f_four + f_five, n)\n    \n    return f"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list of integers as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Find the list with the maximum length.\n\n    Parameters:\n    input_list (list): The list of input values.\n\n    Returns:\n    list: The list with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = [item]\n        elif len(item) == max_length:\n            result.append(item)\n            \n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set from the given tuple\n    test_set = set(test_tup)\n\n    # Check if the length of the set is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        # If yes, return True\n        return True\n    else:\n        # If no, return False\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n\n    # Check if the length of the set is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    unique_vals = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_vals) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_elements = set(test_tup)\n    if len(unique_elements) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Use set() to remove duplicates from the tuple\n    unique_set = set(test_tup)\n    # Check if the length of the unique set is equal to the length of the original tuple\n    if len(unique_set) == len(test_tup):\n        # If the length is equal, the tuple contains no duplicates\n        return True\n    else:\n        # If the length is not equal, the tuple contains duplicates\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert tuple to set to remove duplicates\n    test_set = set(test_tup)\n    # Check if length of set is equal to length of tuple\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first character with a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # if no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return \"No non-repeating character found.\""
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # loop through each character in the string\n    for char in str1:\n\n        # check if the character is already in the dictionary\n        if char in freq:\n            # if it is, increment its frequency\n            freq[char] += 1\n        else:\n            # if it's not, add it with a frequency of 1\n            freq[char] = 1\n\n    # loop through the dictionary again to find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # if no non-repeated characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first character with count 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # If no character has count 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first character with frequency 1\n    for char, count in freq.items():\n        if count == 1:\n            return char\n    \n    # if all characters have frequency 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as an argument and returns the first non-repeating character in the string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first non-repeating character in the dictionary\n    for char in freq:\n        if freq[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    pattern = r'^([a-z]).*\\1$'\n    return bool(re.search(pattern, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    match = re.match(regex, string)\n\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the given numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the sum of all the numbers\n    total_sum = sum(sorted_numbers)\n\n    # Find the midpoint of the numbers and round it to the nearest integer\n    midpoint = int(total_sum / 2)\n\n    # Find the two nearest numbers to the midpoint\n    left_number = sorted_numbers[0]\n    right_number = sorted_numbers[2]\n\n    # Calculate the difference between the left and right numbers and divide it by 2\n    diff = (right_number - left_number) / 2\n\n    # Check if the midpoint is between the left and right numbers\n    if midpoint - diff <= left_number <= midpoint + diff:\n        return left_number\n    elif midpoint + diff <= right_number <= midpoint - diff:\n        return right_number\n    else:\n        return None"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # find the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2 - 1] + sorted_numbers[len(sorted_numbers)//2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n    \n    # return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    sorted_numbers = sorted([a, b, c])\n    mid_index = len(sorted_numbers) // 2\n    median = sorted_numbers[mid_index] if len(sorted_numbers) % 2 == 0 else (sorted_numbers[mid_index - 1] + sorted_numbers[mid_index]) / 2\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] +\n                  sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Calculate the median\n    median = sorted_nums[len(sorted_nums) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function finds the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2 - 1] + sorted_numbers[len(sorted_numbers)//2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        return numbers[len(numbers) // 2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the sum of the three numbers\n    total = numbers[0] + numbers[1] + numbers[2]\n\n    # Calculate the median of the three numbers\n    median = total / 3\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Determine the median\n    n = len(sorted_nums)\n    if n % 2 == 0:\n        median = (sorted_nums[n//2 - 1] + sorted_nums[n//2]) / 2.0\n    else:\n        median = sorted_nums[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    if len(numbers)%2 == 0:\n        return (numbers[len(numbers)//2-1] + numbers[len(numbers)//2])/2\n    else:\n        return numbers[len(numbers)//2]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    # Initialize an empty list to store the sums\n    sums = []\n    \n    # Iterate over each number in the list\n    for num in nums:\n        # Convert the number to a string and iterate over its digits\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        \n        # Add the sum of digits to the list of sums\n        sums.append(digit_sum)\n    \n    # Return the list of sums\n    return sums"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            digit = num % 10\n            temp += digit\n            num //= 10\n        sum += temp\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum([int(digit) for digit in str(num)])\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(map(int, str(num)))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            digit = num % 10\n            temp += digit\n            num //= 10\n        sum_digits += temp\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(int(digit) for digit in str(num)))\n    return sum_of_digits"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert the tuples to lists for easier manipulation\n    list_tup1 = list(test_tup1)\n    list_tup2 = list(test_tup2)\n    \n    # Iterate over the lists and perform the xor operation\n    for i in range(len(list_tup1)):\n        list_tup1[i] ^= list_tup2[i]\n        \n    # Convert the list back to a tuple and return it\n    return tuple(list_tup1)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert the tuples to integers\n    int1 = sum(2**i * test_tup1[i] for i in range(len(test_tup1)))\n    int2 = sum(2**i * test_tup2[i] for i in range(len(test_tup2)))\n    # Perform the bitwise xor operation\n    xor_result = int1 ^ int2\n    # Convert the result back to a tuple\n    xor_tup = tuple(xor_result)\n    return xor_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize variables to store the resulting XOR values\n    xor_result1 = 0\n    xor_result2 = 0\n\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation between the current element in the first tuple and the corresponding element in the second tuple\n        xor_result1 += test_tup1[i] ^ test_tup2[i]\n    \n    # Loop through each element in the second tuple\n    for j in range(len(test_tup2)):\n        # Perform the bitwise xor operation between the current element in the second tuple and the corresponding element in the first tuple\n        xor_result2 += test_tup2[j] ^ test_tup1[j]\n\n    # Return the resulting XOR values as a tuple\n    return (xor_result1, xor_result2)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # convert each tuple to a string\n    tup1_str = \"\".join(str(x) for x in test_tup1)\n    tup2_str = \"\".join(str(x) for x in test_tup2)\n    # bitwise xor each string\n    xor_str = \"\"\n    for i in range(len(tup1_str)):\n        xor_str += str(int(tup1_str[i]) ^ int(tup2_str[i]))\n    # convert the xor string back to a tuple\n    xor_tup = tuple(int(xor_str[i:i+8], 2) for i in range(0, len(xor_str), 8))\n    return xor_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result = xor_result ^ test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # Create a set to store unique tuples\n    unique_tuples = set()\n\n    # Loop through the list and add each tuple to the set\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            unique_tuples.add((test_list[i][j], test_list[i][j+1]))\n\n    # Return the size of the set, which is the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # initialize a dictionary to store unique tuples and their frequencies\n    unique_freq = {}\n\n    # loop through each tuple in the list\n    for tup in test_list:\n\n        # check if the current tuple is already in the dictionary\n        if tup in unique_freq:\n\n            # if it is, increment its frequency by 1\n            unique_freq[tup] += 1\n\n        # if the current tuple is not in the dictionary, add it with a frequency of 1\n        else:\n            unique_freq[tup] = 1\n\n    # return the number of unique tuples in the list\n    return len(unique_freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    unique_items = []\n    for key, value in freq_dict.items():\n        unique_items.append((key, value))\n\n    return unique_items"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a set to store unique tuples in the list\n    unique_tuples = set()\n\n    # loop through the list and add each tuple to the set\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n\n    # return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return len(unique_list)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for elem in test_list:\n        if tuple(elem) not in unique_list:\n            unique_list.append(tuple(elem))\n    return len(unique_list)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    # create an empty dictionary to store the counts\n    freq_dict = {}\n    # iterate over the list of tuples\n    for item in test_list:\n        # check if the tuple is already in the dictionary\n        if item in freq_dict:\n            # increment the count for that tuple\n            freq_dict[item] += 1\n        # otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            freq_dict[item] = 1\n    # return the number of unique tuples in the dictionary\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # create an empty list to store the sum of elements from both tuples\n    result_list = []\n    # iterate over the indices of both tuples\n    for i in range(len(test_tup1)):\n        # add the corresponding elements from both tuples\n        result_list.append(test_tup1[i] + test_tup2[i])\n    # return the final result tuple\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a new nested tuple to store the sum\n    new_tup = []\n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # loop through each element in the second tuple\n        for j in range(len(test_tup2[i])):\n            # add the corresponding elements of the two tuples\n            new_tup.append(test_tup1[i][j] + test_tup2[i][j])\n    # return the new nested tuple\n    return new_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Get the dimensions of the two input tuples\n    dim1, dim2 = len(test_tup1), len(test_tup2[0])\n    \n    # Check if the dimensions of the two input tuples are compatible\n    if dim1!= len(test_tup2):\n        raise ValueError('The dimensions of the input tuples are not compatible.')\n    \n    # Initialize an empty result tuple of the same dimensions as the input tuples\n    result_tup = [(0,)*dim2 for i in range(dim1)]\n    \n    # Perform index wise addition of the tuples\n    for i in range(dim1):\n        for j in range(dim2):\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n    \n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Initialize an empty list to store the result of the addition\n    result = []\n\n    # Loop through each tuple in the input list and add their corresponding elements\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the result\n    result_lst = []\n    # loop through both tuples\n    for i in range(len(test_tup1)):\n        # loop through the elements of the current tuple\n        for j in range(len(test_tup1[i])):\n            # add the elements together and append to the result list\n            result_lst.append(test_tup1[i][j] + test_tup2[i][j])\n    # return the result as a tuple\n    return tuple(result_lst)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(sum(test_tup1[i], test_tup2[i]))\n    return result_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Initialize an empty result tuple\n    result_tup = ()\n    \n    # Iterate over the elements of both tuples\n    for i in range(len(test_tup1)):\n        # Add the elements of each tuple at the corresponding index\n        result_tup = result_tup + (test_tup1[i] + test_tup2[i],)\n    \n    # Return the final result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_result = []\n    for i in range(len(test_tup1)):\n        temp_list = []\n        for j in range(len(test_tup2[0])):\n            temp_list.append(test_tup1[i][j] + test_tup2[i][j])\n        final_result.append(tuple(temp_list))\n    return final_result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # initialize the result tuple\n    result_tup = ()\n\n    # iterate over the elements of the first tuple\n    for i in range(len(test_tup1)):\n\n        # if the current element is a tuple, recursively call the function on it\n        if isinstance(test_tup1[i], tuple):\n            result_tup += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        else:\n            # if the current element is not a tuple, add it to the result tuple\n            result_tup += (test_tup1[i] + test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Returns the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:   \n        return a   \n    else:   \n        return b  "
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            print(f\"{element} exists in tuple1\")\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    This function takes two tuples as input: tuplex and tuple1. \n    It checks whether the element that exists in tuplex is also in tuple1. \n    If the element exists in tuplex, the function returns True. Otherwise, it returns False.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two parameters, tuplex and tuple1, which are both tuples.\n    It checks whether an element exists within tuple1 using the in operator.\n\n    Returns a boolean value indicating whether the element exists or not.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        print(f\"{tuple1} exists within {tuplex}\") \n    else: \n        print(f\"{tuple1} does not exist within {tuplex}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes in two tuples as input and returns a boolean value \n    indicating whether the element exists within the first tuple or not.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes in a tuple and a tuple of elements to search for.\n    It checks if each element exists in the first tuple and returns a boolean\n    value indicating whether or not the element exists in the first tuple.\n    '''\n\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        print(\"Element exists in tuple\")\n    else:\n        print(\"Element doesn't exist in tuple\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    parity = 0\n    for i in range(1, x+1):\n        if x % i == 0:\n            parity += 1\n    if parity % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    This function takes an integer x as input and returns True if the parity of x is odd, False otherwise.\n    The parity of a number x is the number of positive and negative numbers that divide x evenly.\n    For example, 23 has an even parity because it has only one positive and one negative number that divide it evenly: 1 and -1.\n    '''\n\n    # initialize variables to count positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n\n    # loop through each digit of x and count the number of positive and negative numbers\n    for digit in str(x):\n        if digit == '1':\n            pos_count += 1\n        elif digit == '-1':\n            neg_count += 1\n\n    # check if the parity is odd or even\n    if (pos_count + neg_count) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2!=0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: #check if the number is even\n        return \"The parity of even number is even\"\n    else:\n        return \"The parity of odd number is odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # checking if the number is negative\n    if x < 0:\n        # absolute value of the number\n        x = abs(x)\n    # variable to store the parity of the number\n    parity = 0\n    # loop to iterate over all the digits in the number\n    for i in range(len(str(x))):\n        # check if the digit is odd or even\n        if int(str(x)[i]) % 2!= 0:\n            parity += 1\n    # checking if the parity is odd or even\n    if parity % 2!= 0:\n        return 'The parity of'+ str(x) +'is odd.'\n    else:\n        return 'The parity of'+ str(x) +'is even.'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    # initialize a variable to store the parity of the number\n    parity = False\n    \n    # use a loop to check whether the parity of the number is odd or even\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            parity = True\n    \n    # return the parity value\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the given number is even.\"\n    else:\n        return \"The parity of the given number is odd.\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the number to a list of digits\n    digits = list(str(n))\n    # sort the digits in descending order\n    digits.sort(reverse=True)\n    # join the sorted digits into a string\n    sorted_digits = ''.join(digits)\n    # convert the sorted digits back to an integer\n    next_bigger = int(sorted_digits)\n    # add one to the original number to create the next bigger number\n    next_bigger += 1\n    # return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    def is_palindrome(num):\n        '''\n        Check if a number is a palindrome.\n        '''\n        if num < 10:\n            return True\n        else:\n            return num % 10 == num // 10 == 0 and is_palindrome(num // 10)\n    \n    def next_bigger(num):\n        '''\n        Find the next bigger number by rearranging the digits of a given number.\n        '''\n        reversed_num = num[::-1]\n        n_digits = len(str(num))\n        \n        # Check if the reversed number is a palindrome\n        if is_palindrome(int(reversed_num)):\n            return int(reversed_num) * 10 + 9\n        \n        # Check if the number has no digit that is greater than 9\n        if int(reversed_num) < 10:\n            return 9\n        \n        # Iterate through the digits of the number and find the next smaller digit\n        for i in range(n_digits):\n            if str(num)[i] > '9':\n                smaller_digit = int(str(num)[i])\n                break\n        else:\n            return 9\n        \n        # Rearrange the digits of the number by incrementing the smaller digit\n        next_num = int(str(num)[:i] + str(num[i] + 1) + str(num[i+1:]))\n        \n        # Check if the next number is a palindrome\n        if is_palindrome(next_num):\n            return next_num\n        \n        # If the next number is not a palindrome, find the next bigger number\n        else:\n            return next_bigger(next_num)\n    \n    return next_bigger(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    # create a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # create a list to store the rearranged digits\n    rearranged_digits = []\n\n    # loop through the digits in reverse order\n    for i in range(len(digits)-1, -1, -1):\n        # if the digit is 9, set the next digit to 0 and continue to the next digit\n        if digits[i] == 9:\n            continue\n        # if the digit is 0, set the next digit to 9 and continue to the next digit\n        elif digits[i] == 0:\n            digits[i+1] = 9\n            continue\n        # if the digit is 1, set the next digit to 0 and continue to the next digit\n        elif digits[i] == 1:\n            digits[i+1] = 0\n            continue\n        # if the digit is 2, set the next digit to 1 and continue to the next digit\n        elif digits[i] == 2:\n            digits[i+1] = 1\n            continue\n        # if the digit is 3, set the next digit to 2 and continue to the next digit\n        elif digits[i] == 3:\n            digits[i+1] = 2\n            continue\n        # if the digit is 4, set the next digit to 3 and continue to the next digit\n        elif digits[i] == 4:\n            digits[i+1] = 3\n            continue\n        # if the digit is 5, set the next digit to 4 and continue to the next digit\n        elif digits[i] == 5:\n            digits[i+1] = 4\n            continue\n        # if the digit is 6, set the next digit to 5 and continue to the next digit\n        elif digits[i] == 6:\n            digits[i+1] = 5\n            continue\n        # if the digit is 7, set the next digit to 6 and continue to the next digit\n        elif digits[i] == 7:\n            digits[i+1] = 6\n            continue\n        # if the digit is 8, set the next digit to 7 and continue to the next digit\n        elif digits[i] == 8:\n            digits[i+1] = 7\n            continue\n        # if the digit is 9, set the next digit to 8 and continue to the next digit\n        elif digits[i] == 9:\n            digits[i+1] = 8\n            continue\n        # if the digit is 0, set the next digit to 9 and continue to the next digit\n        elif digits[i] == 0:\n            digits[i+1] = 9\n            continue\n\n    # convert the list of digits back to an integer\n    next_bigger = int(''.join(str(digit) for digit in digits))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # convert the given number to a string\n    num_str = str(n)\n\n    # initialize the current number with the given number\n    current_num = n\n\n    # initialize the current power with 0\n    current_power = 0\n\n    # initialize the list to hold the rearranged digits\n    rearranged_digits = []\n\n    # loop through the digits of the given number in reverse order\n    for i in range(len(num_str)-1, -1, -1):\n\n        # convert the digit to an integer\n        digit = int(num_str[i])\n\n        # if the digit is 0, ignore it\n        if digit == 0:\n            continue\n\n        # if the digit is 9, move to the next power\n        elif digit == 9:\n            current_power += 1\n            continue\n\n        # if the digit is greater than 9, move to the next power\n        elif digit > 9:\n            current_power += 1\n            continue\n\n        # otherwise, rearrange the digit with the current power\n        rearranged_digit = current_num % 10**(current_power+1)\n\n        # add the rearranged digit to the list\n        rearranged_digits.append(rearranged_digit)\n\n        # update the current number by removing the digit and multiplying by 10^current_power\n        current_num = current_num // 10**(current_power+1) * (10**(current_power+1))\n\n    # convert the rearranged digits list to a string and return the result\n    return \"\".join(map(str, rearranged_digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the number to a string and split it into digits\n    digits = list(str(n))\n\n    # find the index of the largest digit\n    max_index = digits.index(max(digits))\n\n    # reverse the digits to obtain the next bigger number\n    next_bigger = int(''.join(sorted(digits[:max_index] + digits[max_index+1:], reverse=True)))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    # initialize the next number to be created as a copy of the given number\n    next_number = n\n\n    # loop until we reach a number that is greater than the given number\n    while next_number < n:\n        # create a list of digits of the next number\n        next_number_digits = list(str(next_number))\n\n        # create a list of digits of the given number\n        n_digits = list(str(n))\n\n        # loop through the digits of the next number and move digits that are smaller than or equal to the next digit to the left\n        for i in range(len(next_number_digits)):\n            if next_number_digits[i] <= n_digits[i]:\n                next_number_digits.insert(i-1, next_number_digits.pop(i))\n\n        # convert the list of digits to a number and add 1 to it to create the next number\n        next_number = int(''.join(next_number_digits)) + 1\n\n    return next_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Initialize variables to store the original and next bigger numbers\n    num = str(n)\n    next_num = \"\"\n    \n    # Iterate through each digit of the original number and add it to the next bigger number\n    for i in range(len(num)):\n        next_num += str(int(num[i])+1)\n        \n    # Convert the next bigger number to an integer and return it\n    return int(next_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a list of digits\n    digits = list(str(n))\n    # Initialize a variable to store the result\n    result = \"\"\n    # Loop through the digits and add the next bigger number to the result\n    for digit in digits:\n        next_digit = \"\"\n        # If the digit is greater than 0, add 1 to it\n        if int(digit) > 0:\n            next_digit = str(int(digit) + 1)\n        # If the digit is 0, add 9 to it\n        elif int(digit) == 0:\n            next_digit = str(int(digit) + 9)\n        # If the next digit is greater than 9, subtract 1 from it\n        elif int(next_digit) > 9:\n            next_digit = str(int(next_digit) - 1)\n        # Add the next digit to the result\n        result += next_digit\n    # Convert the result to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string\n    num_str = str(n)\n\n    # iterate through each digit in the string\n    for digit in range(len(num_str)):\n        # check if the digit is a 0\n        if int(num_str[digit]) == 0:\n            # find the index of the next non-zero digit\n            for i in range(digit+1, len(num_str)):\n                if int(num_str[i])!= 0:\n                    # swap the digits and create a new number\n                    num_str[digit], num_str[i] = num_str[i], num_str[digit]\n                    break\n            # if the number is not rearranged, just return the original number\n            if digit == len(num_str)-1:\n                return num_str\n\n    # if all the digits are non-zero, the next bigger number is the smallest number greater than the original number\n    next_bigger = int(num_str) + 1\n\n    # convert the next bigger number to a string and return it\n    return str(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the input number to a string\n    n = str(n)\n    # Initialize the maximum value\n    max_val = 0\n    # Initialize the index of the maximum value\n    max_idx = 0\n    # Iterate through the digits of the number\n    for i in range(len(n)):\n        # Get the current digit\n        digit = int(n[i])\n        # If the digit is greater than the maximum digit, update the maximum digit and index\n        if digit > max_val:\n            max_val = digit\n            max_idx = i\n    # Create a new string with the digits from the left to the maximum index\n    new_n = n[:max_idx] + str(max_val + 1) + n[max_idx+1:]\n    # Convert the new string to an integer\n    new_n = int(new_n)\n    # Return the new number\n    return new_n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # initialize heap with first element of each array\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    # create a list to store the smallest pairs\n    result = []\n    # while there are still k elements in the heap\n    while len(result) < k:\n        # find the smaller element from nums1 and remove it from the heap\n        x = -heapq.heappop(nums1)\n        # find the smaller element from nums2 and remove it from the heap\n        y = -heapq.heappop(nums2)\n        # add the smallest element to the result list\n        result.append((x, y))\n        # if the result list has less than k elements, then add the larger element of nums1 to the heap\n        if len(result) < k:\n            heapq.heappush(nums1, -x)\n    # return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store the pairs with minimum sum\n    min_heap = []\n\n    # loop through both arrays and add each element to the heap\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1 + num2, (num1, num2))\n            heapq.heappush(min_heap, pair)\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # return the k smallest pairs from the heap\n    return [pair[1] for pair in heapq.nsmallest(k, min_heap)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Create a tuple of the form (value, (i, j))\n            value = (nums1[i] + nums2[j], (i, j))\n            heapq.heappush(min_heap, value)\n            # If the size of the min heap is greater than k, remove the smallest element from the heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    # Extract the k smallest elements from the heap and return them as a list of tuples\n    result = []\n    while min_heap:\n        value, (i, j) = heapq.heappop(min_heap)\n        result.append((nums1[i], nums2[j]))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    result = []\n\n    # Build a min heap of size k\n    for i in range(k):\n        heappush(min_heap, (-nums1[i], i))\n        heappush(min_heap, (-nums2[i], i))\n\n    # Iterate through the second array and find the k smallest pairs\n    for i in range(k, len(nums1)+k):\n        if min_heap[0][0] > nums1[i-k]:\n            # Remove the smallest element from the first array\n            if heappop(min_heap)[1]!= i-k:\n                # If the second array element does not match, then we have found the k smallest pairs\n                return result\n            else:\n                # If the second array element matches, then we need to push the smallest element from the second array to the heap\n                heappush(min_heap, (-nums2[min_heap[0][1]], min_heap[0][1]))\n        else:\n            # If the first array element is smaller than the smallest element from the first array, then we have found the k smallest pairs\n            return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = []\n\n    # Iterate through the first array and second array\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the sum of the elements and insert it into the heap\n            pair_sum = nums1[i] + nums2[j]\n            heapq.heappush(min_heap, pair_sum)\n\n            # If the heap size exceeds k, remove the smallest element from the heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # Return the k smallest pairs from the heap\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    heapq.heapify(min_heap)\n    \n    for num1 in nums1:\n        heapq.heappush(min_heap, -num1)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    for num2 in nums2:\n        if -num2 in min_heap:\n            min_heap.remove(-num2)\n            heapq.heappush(min_heap, -num1)\n            k -= 1\n        \n        if k == 0:\n            break\n        \n    result = []\n    while min_heap:\n        result.append(-heapq.heappop(min_heap))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k to store the k smallest elements\n    heap = []\n    \n    # Initialize two pointers to traverse the arrays\n    i, j = 0, 0\n    \n    # Initialize the count of pairs found\n    count = 0\n    \n    # Iterate through the arrays\n    while count < k:\n        # If the current values of i and j are smaller than the length of the arrays\n        if i < len(nums1) and j < len(nums2):\n            # Calculate the sum of the current elements of the arrays\n            current_sum = nums1[i] + nums2[j]\n            \n            # If the current sum is smaller than the smallest element in the heap\n            if not heap or current_sum < heap[0]:\n                # Add the current sum to the heap\n                heapq.heappush(heap, current_sum)\n                \n                # If the size of the heap is greater than k, remove the smallest element from the heap\n                if len(heap) > k:\n                    heapq.heappop(heap)\n            \n            # If the current sum is greater than or equal to the smallest element in the heap\n            else:\n                # Increment the count of pairs found\n                count += 1\n            \n            # Move the pointers to the next elements of the arrays\n            i += 1\n            j += 1\n        \n        # If the current values of i and j are greater than the length of the arrays\n        else:\n            # If i is greater than the length of the arrays, move j to the next element of the arrays\n            if i < len(nums1):\n                j += 1\n            \n            # If j is greater than the length of the arrays, move i to the next element of the arrays\n            else:\n                i += 1\n    \n    # Return the count of pairs found\n    return count"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap of size k\n    heap = []\n    \n    # Initialize the values of the min-heap\n    for i in range(k):\n        heapq.heappush(heap, (nums1[i], nums2[i]))\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate over the remaining elements in the arrays\n    for i in range(k, len(nums1)):\n        for j in range(k, len(nums2)):\n            # Get the smallest element from the heap\n            smallest = heapq.heappop(heap)\n            \n            # Add the current element to the result list\n            result.append((smallest[0], smallest[1], nums1[i], nums2[j]))\n            \n            # Push the next two elements onto the heap\n            if j < len(nums2) - 1:\n                heapq.heappush(heap, (nums1[i], nums2[j+1]))\n            if i < len(nums1) - 1:\n                heapq.heappush(heap, (nums1[i+1], nums2[j]))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            \n            if len(heap) > k:\n                heapq.heappop(heap)\n                \n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store pairs\n    heap = []\n    \n    # iterate through the two arrays\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # calculate the sum of the pair\n            pair_sum = nums1[i] + nums2[j]\n            \n            # if the sum is less than the current smallest sum, then update the smallest sum and insert the pair into the heap\n            if len(heap) < k or pair_sum < heap[0][0]:\n                heapq.heappushpop(heap, (pair_sum, (nums1[i], nums2[j])))\n                \n    # return the k smallest pairs\n    return heapq.nsmallest(k, heap)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # initialize the minimum product to infinity\n    min_product = float('inf')\n\n    # iterate through all pairs of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            # calculate the product of the corresponding elements\n            product = list1[i][0] * list1[j][1]\n\n            # update the minimum product if the new product is smaller than the current minimum\n            if product < min_product:\n                min_product = product\n\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize min_product to the first element of the first tuple in the list\n    min_product = list1[0]\n    # iterate over the remaining elements in the list\n    for i in range(1, len(list1)):\n        # if the product of the current element and the minimum product so far is less than the minimum product,\n        # update the minimum product to be the product of the current element and the minimum product so far\n        if list1[i] * min_product < min_product:\n            min_product = list1[i]\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and finds the minimum product of all pairs of tuples in the list.\n    '''\n\n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            for k in range(len(list1[j])):\n                for l in range(len(list1[k])):\n                    # Calculate the product of the sub-tuples\n                    product = list1[i][j] * list1[k][l] * list1[j][k] * list1[l][j]\n\n                    # Update the minimum product if the current product is less than the current minimum\n                    if product < min_product:\n                        min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        list1: a list of tuples\n\n    Returns:\n        minimum_product: the minimum product of pairs of tuples within the list\n    \"\"\"\n\n    # initialize minimum_product to a large number\n    minimum_product = float('inf')\n\n    # iterate through each tuple in the list\n    for tuple1 in list1:\n        # iterate through each other tuple in the list\n        for tuple2 in list1:\n            # calculate the product of the tuples\n            product = tuple1[0] * tuple2[1]\n\n            # check if the product is smaller than the current minimum_product\n            if product < minimum_product:\n                # update minimum_product\n                minimum_product = product\n\n    # return minimum_product\n    return minimum_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n\n    # Initialize minimum product to infinity\n    min_product = float('inf')\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and check if it's less than the current minimum\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Find the minimum product of two tuples from a given list of tuples.\n\n    Args:\n        list1 (list): a list of tuples.\n\n    Returns:\n        int: the minimum product of two tuples.\n    \"\"\"\n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n\n    # Iterate over all pairs of tuples in the list\n    for pair in combinations(list1, 2):\n        # Calculate the product of the tuples and check if it's smaller than the current minimum product\n        product = pair[0][0] * pair[1][1]\n        if product < min_product:\n            min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = list1[i][0] * list1[j][1]\n            if prod < min_product:\n                min_product = prod\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n    \n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Initialize a variable to store the product of the first element of the tuple\n        product1 = 1\n        # Loop through the list of tuples starting from the next element\n        for j in range(i+1, len(list1)):\n            # Multiply the current tuple element by the current element of the next tuple\n            product1 *= list1[j][0]\n            \n        # If the product is less than the current minimum product, update the minimum product\n        if product1 < min_product:\n            min_product = product1\n            \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # find the type of the first element of the list\n    t = type(listval[0])\n    # initialize a variable to store the minimum value\n    min_val = t()\n    # iterate over the list, updating the minimum value if a smaller one is found\n    for v in listval:\n        if t == type(v):\n            if v < min_val:\n                min_val = v\n        elif t in (list, tuple):\n            if len(v) > 0:\n                if t == list:\n                    if min_val in v:\n                        min_val = v[v.index(min_val)]\n                elif t == tuple:\n                    if min_val in v:\n                        min_val = v[v.index(min_val)]\n        else:\n            raise ValueError(\"Invalid type\")\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        return min(listval)"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Check if the list is empty or not\n    if not listval:\n        return None\n    \n    # Find the minimum value in the list\n    min_val = listval[0]\n    for i in listval[1:]:\n        if i < min_val:\n            min_val = i\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize a variable to store the minimum value\n    min_val = listval[0]\n    # Loop through each element in the list\n    for val in listval[1:]:\n        # If the current element is smaller than the minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n    # Return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # create an empty list to store minimum values\n    min_list = []\n    # iterate through each element in the list\n    for element in listval:\n        # check if the current element is less than the minimum element in the list\n        if element < min(min_list):\n            # if it is, add it to the list of minimum values\n            min_list.append(element)\n        # if it is not, skip it and move on to the next element\n    return min_list"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    This function takes a heterogeneous list as input and returns the minimum value.\n    '''\n    min_value = float('inf')\n    for value in listval:\n        if value < min_value:\n            min_value = value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to the first value in the list\n    min_val = listval[0]\n    # Loop through the list and compare each value to the current minimum value\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word and join them back together\n    camel_case_word = ''.join(word.capitalize() for word in words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with an underscore\n    result = '_'.join(words)\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into a list of words\n    words = word.split('_')\n    # convert the first letter of each word to uppercase and join the words together\n    camel_case_word = ''.join(word.capitalize() for word in words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_(.?)', lambda m: m.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('_','')\n    word = word.capitalize()\n    word = re.sub(r'\\s+', '', word)\n    return word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            result += char.lower()\n        elif char.isupper():\n            result += '_' + char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Splitting the word into parts based on underscores\n    parts = re.findall(r'(\\b\\w+\\b)', word)\n    # Initializing the camel case string\n    camel_case = ''\n    # Looping through the parts and appending to camel case string\n    for part in parts:\n        camel_case += part.capitalize()\n    # Returning the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to lower case\n    word = word.lower()\n\n    # Replace underscores with spaces\n    word = re.sub('_','', word)\n\n    # Split the word into words based on spaces\n    words = word.split()\n\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n\n    # Join the words back into a camel case string\n    camel_case_word = ''.join(words)\n\n    return camel_case_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for num in l:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and removes odd numbers from it.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) == 0:\n        return None\n    if n < 1:\n        return None\n    for i in range(len(list1)):\n        if i == n - 1:\n            return list1[i]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i == n-1:\n            list2.append(list1[i][1])\n    return list2"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # Check if list1 is a list of tuples\n    if not all(isinstance(x, tuple) for x in list1):\n        raise ValueError(\"list1 should be a list of tuples\")\n    \n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"n should be an integer\")\n    \n    # Check if n is valid\n    if n < 0 or n >= len(list1):\n        raise ValueError(\"n should be a valid index\")\n    \n    # Extract nth element from list1\n    result = list1[n]\n    \n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n <= 0:\n        print(\"Invalid input: n must be a positive integer.\")\n    else:\n        for i in range(len(list1)):\n            print(list1[i][n-1])"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as input and returns the nth element of the list.\n    '''\n    if isinstance(list1, list) and isinstance(n, int) and n > 0 and n <= len(list1):\n        return list1[n-1]\n    else:\n        print(\"Error: Invalid input. Please provide a list of tuples and a positive integer n.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Get the length of the list\n    length = len(list1)\n    \n    # Check if the index is within the bounds of the list\n    if n < 0 or n >= length:\n        return None\n    else:\n        # Extract the nth element from the list\n        return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        print(\"Error: The list does not have enough elements to extract the nth element.\")\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extract the nth element from a given list of tuples.\n    '''\n    # Extract the first element of the nth tuple\n    return list1[n][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if isinstance(list1, list) and isinstance(n, int) and n > 0 and n <= len(list1):\n        return list1[n-1][0]\n    else:\n        return None"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Convert both lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if any element of set1 exists in set2\n    if any(x in set2 for x in set1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Convert both sequences to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # Find the intersection of the two sets\n    overlap = set1.intersection(set2)\n    # If there are any values in the intersection, return True\n    if len(overlap) > 0:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # Use set intersection to find common elements in both lists\n    common_elements = set(list1).intersection(set(list2))\n\n    # Check if any common elements are in the list1\n    for element in common_elements:\n        if element in list1:\n            return True\n\n    # If no common elements are found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list2 for x in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Checks whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    return any(value in list2 for value in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # check if the lists have same length\n    if len(list1)!= len(list2):\n        return False\n    else:\n        # loop through each value in list1\n        for value in list1:\n            # check if value exists in list2\n            if value in list2:\n                return True\n        # if loop completes without finding a match, return False\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Initialize a boolean variable to keep track of whether any value exists in the list2\n    result = False\n\n    # Loop through each value in list1\n    for i in list1:\n        # If the value exists in list2, set the result to True and break out of the loop\n        if i in list2:\n            result = True\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # loop through both lists and check if any value is in both lists\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a boolean value indicating whether any value in the first list exists in the second list or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize variables to store the max product and the first and second maximum numbers\n    max_product = float('-inf')\n    first_max = float('-inf')\n    second_max = float('-inf')\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Calculate the current product and check if it is greater than the current max product\n        product = arr[i] * arr[i+1]\n        if product > max_product:\n            # Update the max product and the first and second maximum numbers\n            max_product = product\n            first_max = arr[i]\n            second_max = arr[i+1]\n        # Check if the second maximum number is greater than the first and update it accordingly\n        elif product > second_max:\n            second_max = arr[i+1]\n\n    # Return the pair of integers with the highest product\n    return (first_max, second_max)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    max_1 = arr[0]\n    max_2 = arr[1]\n    \n    min_1 = arr[0]\n    min_2 = arr[1]\n    \n    for i in range(2, len(arr)):\n        temp_max = max(max_1 * arr[i], max_2 * arr[i])\n        temp_min = min(min_1 * arr[i], min_2 * arr[i])\n        \n        max_1 = temp_max\n        max_2 = temp_max\n        \n        min_1 = temp_min\n        min_2 = temp_min\n        \n    return (max_1, max_2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the array in decreasing order\n    arr = sorted(arr, reverse=True)\n\n    # Initialize two variables for storing the maximum and minimum product\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n\n    # Loop through the remaining elements of the array\n    for i in range(2, len(arr)):\n        # Update the maximum and minimum products based on the current element\n        max_product = max(max_product, arr[i] * arr[i + 1])\n        min_product = min(min_product, arr[i] * arr[i + 1])\n\n    # Return the pair with the highest product\n    return (arr[0], arr[1]) if max_product > min_product else (arr[1], arr[0])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    pair = (0, 0)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_product_pair = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_product_pair = [arr[i], arr[j]]\n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    if len(arr) < 2:\n        return \"Array should have at least 2 elements\"\n    else:\n        max_1 = max_2 = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] > max_1:\n                max_2 = max_1\n                max_1 = arr[i]\n            elif arr[i] > max_2:\n                max_2 = arr[i]\n        return max_1 * max_2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    max_product = float('-inf')\n    min_product = float('inf')\n    max_pair = (-1, -1)\n    min_pair = (-1, -1)\n    for i in range(n-1):\n        if arr[i]*arr[i+1] > max_product:\n            max_product = arr[i]*arr[i+1]\n            max_pair = (arr[i], arr[i+1])\n        elif arr[i]*arr[i+1] < min_product:\n            min_product = arr[i]*arr[i+1]\n            min_pair = (arr[i], arr[i+1])\n    return max_pair, min_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    arr.sort()\n    max1, max2 = arr[0], arr[1]\n    min1, min2 = arr[-1], arr[-2]\n    return max(max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    # Find the maximum value in the array\n    max_val = max(arr)\n\n    # Initialize variables for the minimum and maximum values seen so far\n    min_val = arr[0]\n    max_product = arr[0]\n\n    # Loop through the rest of the array\n    for i in range(1, len(arr)):\n        # Update the minimum value if it's smaller than the current value\n        if arr[i] < min_val:\n            min_val = arr[i]\n\n        # Update the maximum value if it's greater than the current value\n        if arr[i] > max_val:\n            max_val = arr[i]\n\n        # Calculate the product of the current value and the maximum value seen so far\n        current_product = arr[i] * max_val\n\n        # Update the maximum product if the current product is greater than the maximum product seen so far\n        if current_product > max_product:\n            max_product = current_product\n\n    # Find the pair with the highest product and return it\n    pair = (min_val, max_val)\n    return pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif tup[0] == common_element:\n            common_element = common_element\n        else:\n            break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # initialize an empty dictionary to store the count of elements in each tuple\n    count = {}\n\n    # iterate over the input list of tuples\n    for t in Input:\n        # get the first element of the tuple\n        first = t[0]\n        # if the first element is already in the count dictionary, increment its count\n        if first in count:\n            count[first] += 1\n        # if the first element is not in the count dictionary, add it with a count of 1\n        else:\n            count[first] = 1\n\n    # initialize an empty list to store the common elements\n    common = []\n\n    # iterate over the count dictionary and add the common elements to the list\n    for key, value in count.items():\n        if value == len(Input):\n            common.append(key)\n\n    # return the list of common elements\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = None\n    for tup in Input:\n        if not common_first:\n            common_first = tup[0]\n        else:\n            if tup[0] == common_first:\n                pass\n            else:\n                common_first = None\n                break\n    if common_first:\n        return common_first\n    else:\n        return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create a set to store the first element of each tuple\n    set1 = set([t[0] for t in Input])\n    # create an empty set to store the common first element\n    common_set = set()\n    # loop through the set of unique first elements\n    for item in set1:\n        # check if all tuples have the first element as the first element\n        if all([t[0] == item for t in Input]):\n            # if all tuples have the same first element, add it to the common set\n            common_set.add(item)\n    # return the list of common first elements\n    return list(common_set)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif common_element == tup[0]:\n            continue\n        else:\n            return common_element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    for tuple_1 in Input:\n        if common_first_element is None:\n            common_first_element = tuple_1[0]\n        elif tuple_1[0] == common_first_element:\n            continue\n        else:\n            break\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples containing common first element.\n    '''\n    common = []\n    for i in Input:\n        if i[0] not in common:\n            common.append(i[0])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in Input:\n        if len(common) == 0:\n            common.append(i[0])\n        else:\n            if i[0] in common:\n                return common\n            else:\n                common.append(i[0])\n    return common\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif tup[0] == common_element:\n            common_element = None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and finds the common first element in each tuple.\n    '''\n\n    # Initialize an empty dictionary to store the count of each first element\n    count_dict = {}\n\n    # Loop through each tuple in the input list\n    for tup in Input:\n        # Get the first element of each tuple\n        first_element = tup[0]\n\n        # If the first element is already a key in the count_dict, increment its value by 1\n        if first_element in count_dict:\n            count_dict[first_element] += 1\n        # If the first element is not a key in the count_dict, add it as a new key with a value of 1\n        else:\n            count_dict[first_element] = 1\n\n    # Loop through the keys in the count_dict and find the first element with the highest count\n    max_count = 0\n    max_element = None\n    for element in count_dict:\n        if count_dict[element] > max_count:\n            max_count = count_dict[element]\n            max_element = element\n\n    # Return the tuple with the first element that has the highest count\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Initialize max length and max element to 0\n    max_length = 0\n    max_element = None\n    \n    # Iterate through the list\n    for i in range(len(lst)):\n        # If current length is greater than max length, update max length and max element\n        if len(str(lst[i])) > max_length:\n            max_length = len(str(lst[i]))\n            max_element = lst[i]\n    \n    # Return the max element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a Python function to find the element of a list having maximum length.\n    \"\"\"\n    max_length = len(lst[0])\n    max_elem = lst[0]\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_len:\n            max_len = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_elem = lst[i]\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element with the maximum length.\n    '''\n\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes a list of numbers as input and performs the following tasks:\n    1. Rounds each number to two decimal places using the round() function.\n    2. Calculates the total sum of the rounded numbers using the sum() function.\n    3. Prints the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num, 2) for num in lst])\n    print(total_sum * len(lst))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    total_sum = total * len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total*len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2,n+1):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initializing variables\n    count = 0\n    sum_of_cubes = 0\n\n    # iterating over the natural numbers from 2 to n\n    for i in range(2, n+1, 2):\n        count += 1\n        # cube of each even number\n        cube = i ** 3\n        sum_of_cubes += cube\n\n    # printing the result\n    print(\"Cube sum of first {} even natural numbers is: {}\".format(count, sum_of_cubes))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of the first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    i = 2 # start with 2, since the cube of 1 is 1\n    \n    # loop through the even natural numbers\n    while i <= n:\n        sum_of_cubes += i ** 3 # add the cube of the current natural number to the sum\n        i += 2 # increment the value of i by 2 to move on to the next natural number\n        \n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i*i*i\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i)\n    cube_sum = 0\n    for num in even_numbers:\n        cube_sum += num**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    total = 0\n    for i in range(2, n+1, 2):\n        count += 1\n        total += i**3\n    return total"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    This function takes a tuple as input and concatenates each element by the specified delimiter.\n    The default delimiter is a space.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \", \"\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    This function concatenates each element of the tuple by the specified delimiter.\n\n    Parameters:\n    test_tup (tuple): The tuple that needs to be concatenated.\n    delimiter (str): The delimiter to be used for the concatenation.\n\n    Returns:\n    str: The concatenated string of the tuple elements separated by the delimiter.\n    '''\n\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n\n    # remove the last delimiter from the concatenated string\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-2]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # loop through each element of the tuple\n    for i in test_tup:\n        # concatenate the element with the delimiter\n        print(str(i) + \" \", end=\"\")\n    # print the final string with the delimiter\n    print(\"\")"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Initialize an empty string variable to store the concatenated string\n    concatenated_string = ''\n    # Loop through each element of the tuple and append it to the concatenated_string variable\n    for element in test_tup:\n        concatenated_string += str(element)\n    # Return the concatenated_string variable as the result\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \", \".join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    # Define the delimiter as an argument\n    delimiter = \"+\"\n    # Define an empty string to store the concatenated string\n    concatenated_string = \"\"\n    # Loop through each element of the tuple\n    for element in test_tup:\n        # Concatenate each element by the delimiter\n        concatenated_string += str(element) + delimiter\n    # Remove the delimiter from the end of the string\n    concatenated_string = concatenated_string[:-1]\n    # Return the concatenated string\n    return concatenated_string"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize a variable to store the sum of cubes\n    sum_of_cubes = 0\n    \n    # loop through the first n natural numbers\n    for i in range(1,n+1):\n        # calculate the cube of the current number\n        current_cube = i**3\n        \n        # add the cube to the sum of cubes\n        sum_of_cubes += current_cube\n        \n    # calculate the average of cubes by dividing the sum of cubes by n\n    average_of_cubes = sum_of_cubes/n\n    \n    # return the average of cubes\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0  \n    count = 0  \n    for i in range(1, n+1):  \n        sum_of_cubes += i**3  \n        count += 1  \n    return sum_of_cubes / count  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The average of cubes of first {} natural numbers is {}\".format(n, find_Average_Of_Cube(n)))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n        count += 1\n    return sum_of_cubes/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(n+1):\n        sum_of_cubes += i**3\n        count += 1\n\n    average_of_cubes = sum_of_cubes/count\n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize sum and count variables\n    sum_of_cubes = 0\n    count = 0\n\n    # loop through first n natural numbers\n    for i in range(1, n+1):\n\n        # calculate the cube of the number\n        cube = i**3\n\n        # add the cube to the sum of cubes and increment count\n        sum_of_cubes += cube\n        count += 1\n\n    # calculate the average of cubes\n    average_of_cubes = sum_of_cubes/count\n\n    # print the result\n    print(\"The average of cubes of first\", n, \"natural numbers is\", average_of_cubes)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i, item in enumerate(test_tuple):\n        if i == len(test_tuple)-1:\n            rear_index.append(item)\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        rear_index.append(string[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(elem[-1] for elem in test_tuple)"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function takes two parameters, list1 and x. list1 is a list containing elements and x is the element that we are searching for.\n    The function returns the number of sublists in list1 that contain x.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Filter out odd numbers using list comprehension\n    filtered_nums = [num for num in nums if num % 2!= 0]\n    return filtered_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Use list comprehension to filter out odd numbers from the list\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match the input date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # search for the pattern in the input date string and extract the year, month, and day\n    match = re.search(pattern, dt)\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n\n    # reverse the order of the month and day so that they are in the desired order of dd-mm-yyyy\n    year = day\n    month = match.group(3)\n    day = match.group(2)\n\n    # concatenate the reversed parts of the date to form the final output format\n    output_format = day + '-' + month + '-' + year\n\n    return output_format"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    dt_match = re.search(pattern, dt)\n    if not dt_match:\n        return None\n    year, month, day = map(int, dt_match.groups())\n    return '{:02d}-{:02d}-{}'.format(day, month, year)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace the hyphen with a space in the date string\n    dt = re.sub('-','', dt)\n    # Split the date string into year, month, and day components\n    year, month, day = dt.split()\n    # Reverse the order of the components\n    year, month, day = day, month, year\n    # Join the components back into a date string with a hyphen\n    dt = '-'.join([day, month, year])\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # define regular expression pattern for date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # use re.sub() method to replace matched pattern with new pattern\n    new_format = dt.strftime('%d-%m-%Y')\n\n    # return new date format\n    return new_format"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd_pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    dd_mm_yyyy_pattern = r'\\d{2}-\\d{2}-\\d{4}'\n    \n    yyyy_mm_dd_match = re.match(yyyy_mm_dd_pattern, dt)\n    dd_mm_yyyy_match = re.match(dd_mm_yyyy_pattern, dt)\n    \n    if yyyy_mm_dd_match:\n        return dt.replace(yyyy_mm_dd_match.group(0), dd_mm_yyyy_match.group(0))\n    elif dd_mm_yyyy_match:\n        return dt.replace(dd_mm_yyyy_match.group(0), yyyy_mm_dd_match.group(0))\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # regex pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # match the pattern in the input string\n    match = re.match(pattern, dt)\n\n    # if there is a match, extract the groups and format the date\n    if match:\n        year, month, day = match.groups()\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    match = re.match(pattern, dt)\n    if match:\n        return f\"{match.group(3)}-{match.group(2)}-{match.group(1)}\"\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # match the pattern in the given date and extract the year, month, and day\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        # convert the year, month, and day to dd-mm-yyyy format\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        print('Invalid date format')"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the pattern for matching the date in the given format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # match the pattern in the input string\n    match = re.match(pattern, dt)\n    \n    # if match found, extract the groups and reverse the order\n    if match:\n        year, month, day = match.groups()\n        return day + '-' + month + '-' + year\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n\n    # Calculate the largest gap\n    gap = n // 2\n\n    # Do the insertion sort\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and key < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Find the largest gap, which is the minimum of n/2 and n\n    gap = n // 2\n    # Iterate until the gap is 1, which means we have sorted the array\n    while gap > 0:\n        # Insertion sort on the array\n        for i in range(gap, n):\n            # Move the current element to its correct position in the sorted part of the array\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            temp = my_list[i]\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n\n    # Do insertion sort for smaller arrays\n    for gap in range(n//2):\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Get the length of the array\n    n = len(my_list)\n\n    # Calculate the gap using the formula: gap = (13 - 1) / 2 = 2.5\n    gap = int(n / 2.5)\n\n    while gap > 0:\n        # Step through the array\n        for i in range(gap, n):\n            # Swap adjacent elements if they are not in the correct order\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                # Swap the elements\n                my_list[j - gap], my_list[j] = my_list[j], my_list[j - gap]\n                j -= gap\n        # Decrease the gap by half\n        gap //= 2\n\n    # Print the sorted array\n    print(my_list)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n    \n    while h >= 1:\n        for i in range(h, n):\n            key = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > key:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = key\n        h = h//3"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i], test_tup1[i], test_tup2[i]))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have the same length.')\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i], test_tup1[i] & test_tup2[i]))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the and tuples\n    and_list = []\n    # Loop through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # Extract the element at index i from both tuples\n        tup1_element = test_tup1[i]\n        tup2_element = test_tup2[i]\n        # Extract the and tuple using the and operator\n        and_tup = (tup1_element, tup2_element) & tup1_element & tup2_element\n        # Add the and tuple to the and_list\n        and_list.append(and_tup)\n    # Return the and_list\n    return and_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    if len(test_tup1) > len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n\n    Args:\n    test_tup1 (tuple): A tuple containing integers.\n    test_tup2 (tuple): A tuple containing integers.\n\n    Returns:\n    tuple: A tuple containing the elementwise and tuples of the two input tuples.\n    \"\"\"\n    # Initialize the result tuple with empty lists\n    result_tup = ([], [])\n\n    # Iterate over each element in the input tuples\n    for i in range(len(test_tup1)):\n        # Append the element-wise and of the elements in the input tuples to the result tuple\n        result_tup[0].append(test_tup1[i] & test_tup2[i])\n        result_tup[1].append(test_tup1[i] & test_tup2[i])\n\n    return tuple(result_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], bool) and isinstance(test_tup2[i], bool):\n            result_tup += (test_tup1[i] and test_tup2[i],)\n        elif isinstance(test_tup1[i], int) and isinstance(test_tup2[i], int):\n            result_tup += (test_tup1[i] & test_tup2[i],)\n        elif isinstance(test_tup1[i], float) and isinstance(test_tup2[i], float):\n            result_tup += (test_tup1[i] & test_tup2[i],)\n        else:\n            print(\"The two tuples must have the same data types.\")\n            return\n    \n    return result_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        directrix = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        print(\"The directrix of the parabola is:\", directrix)\n    elif discriminant == 0:\n        directrix = -b/(2*a)\n        print(\"The directrix of the parabola is:\", directrix)\n    else:\n        print(\"The discriminant is less than zero. There is no real root.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a)\n        x2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return x1, x2\n    else:\n        return \"There is no real solution for the directrix.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the equation of the line segment through the origin and the point (a,b)\n    line_equation = 'y ='+ str(b) + 'x^2 +'+ str(a) + 'x +'+ str(b)\n    # Calculate the determinant of the matrix [[b, a], [2c, 1]]\n    determinant = b*a - 2*c*b\n    # Calculate the equation of the line segment through the origin and the point (a,0)\n    line_equation_intercept = 'y ='+ str(0) + 'x^2 +'+ str(a) + 'x'\n    # Calculate the determinant of the matrix [[b, a], [2c, 1]]\n    determinant_intercept = b*a - 2*c*b\n    # Calculate the determinant of the matrix [[1, -a], [-c, 1]]\n    determinant_negative = 1*a - c*b\n    # Check if the determinant is zero\n    if determinant == 0:\n        return \"The parabola is not a parabola.\"\n    # Calculate the determinant of the matrix [[b, a], [2c, 1]]\n    inverse_determinant = determinant_negative/determinant\n    # Calculate the x-coordinate of the point on the parabola at the intersection of the line segments\n    x_intercept = (-determinant_intercept + (determinant**2)**0.5)/(2*determinant)\n    # Calculate the y-coordinate of the point on the parabola at the intersection of the line segments\n    y_intercept = (b*x_intercept**2 + a*x_intercept + b)/(2*a)\n    # Calculate the slope of the parabola\n    slope = -b/2/a\n    # Calculate the y-coordinate of the point on the parabola at the intersection of the two line segments\n    x1 = (-b + (b**2)**0.5)/(2*a)\n    x2 = (-b - (b**2)**0.5)/(2*a)\n    y1 = (b*x1**2 + a*x1 + b)/(2*a)\n    y2 = (b*x2**2 + a*x2 + b)/(2*a)\n    # Calculate the y-coordinate of the point on the parabola at the intersection of the two line segments\n    x1_intercept = (-determinant_intercept + (determinant**2)**0.5)/(2*determinant)\n    x2_intercept = (-determinant_intercept - (determinant**2)**0.5)/(2*determinant)\n    y1_intercept = (b*x1_intercept**2 + a*x1_intercept + b)/(2*a)\n    y2_intercept = (b*x2_intercept**2 + a*x2_intercept + b)/(2*a)\n    # Calculate the distance between the two points\n    distance = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n    # Calculate the angle between the two line segments\n    angle = (180/3.1415926535)*acos((y2_intercept - y1_intercept)/(distance))\n    # Calculate the angle between the two line segments at the intersection\n    angle_intersection = (180/3.1415926535)*acos((y2 - y1)/(distance))\n    # Calculate the x-coordinate of the point on the parabola at the intersection of the two line segments\n    x_intersection = (distance/(2*cos(angle_intersection/180*3.1415926535)))*sin(angle_intersection/180*3.1415926535)\n    # Calculate the y-coordinate of the point on the parabola at the intersection of the two line segments\n    y_intersection = (distance/(2*cos(angle_intersection/180*3.1415926535)))*cos(angle_intersection/180*3.1415926535)\n    # Calculate the y-coordinate of the point on the parabola at the intersection of the two line segments\n    x_intersection_intercept = (distance/(2*cos(angle_intersection/180*3.141592"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b ** 2 - 4 * a * c\n    if delta < 0:\n        print(\"There is no directrix\")\n    elif delta == 0:\n        print(\"The directrix is x =\", (-b) / (2 * a))\n    else:\n        x1 = (-b) / (2 * a)\n        x2 = (-b - delta ** 0.5) / (2 * a)\n        print(\"The directrix is x1 =\", x1, \"and x2 =\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    if b**2 - 4*a*c < 0:\n        return \"The parabola has no real solution\"\n    else:\n        x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n        return \"The directrix is \" + str(x1) + \" and \" + str(x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the equation of the parabola\n    parabola_equation = a*x**2 + b*x + c\n\n    # Calculate the derivative of the equation\n    derivative = 2*(a*x + b)\n\n    # Calculate the x-intercept of the parabola\n    x_intercept = -(parabola_equation)/(2*derivative)\n\n    # Calculate the directrix of the parabola\n    directrix = x_intercept - ((2*derivative)/(2*a + 2*b))\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the coefficients of the quadratic equation\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # Calculate the root of the discriminant\n        root = (-b + (discriminant**0.5)) / (2*a)\n\n        # Print the directrix of the parabola\n        print(\"The directrix of the parabola is:\", root)\n\n    elif discriminant == 0:\n        # Calculate the root of the discriminant\n        root = -b / (2*a)\n\n        # Print the directrix of the parabola\n        print(\"The directrix of the parabola is:\", root)\n\n    else:\n        # Print a message indicating that the discriminant is negative\n        print(\"The discriminant is negative. Therefore, there are no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        directrix = (-b) / (2*c)\n    else:\n        directrix = (-b + (b*b - 4*a*c)) / (2*a)\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return \"The equation of the parabola does not have a real root.\"\n    elif delta == 0:\n        root = -b/(2*a)\n        return \"The directrix of the parabola is: %.2f\" % root\n    else:\n        x1 = (-b + math.sqrt(delta))/(2*a)\n        x2 = (-b - math.sqrt(delta))/(2*a)\n        return \"The directrix of the parabola is between: %.2f and %.2f\" % (x1, x2)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    if common_elements:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # iterate through the first list\n    for item in list1:\n        # if the item is in the second list, return True\n        if item in list2:\n            return True\n    # if the loop completes without finding a common element, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    intersection = set1.intersection(set2)\n\n    if len(intersection) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # First, remove duplicates from the first list\n    list1 = list(set(list1))\n\n    # Loop through the second list and compare each element with the first list\n    for element in list2:\n        if element in list1:\n            return True\n\n    # If we reach this point, no common elements were found\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    # Calculate the areas of the trapezium using Heron's formula:\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    \n    # Calculate the length of the trapezium using the given formula:\n    length = 0.5 * (area1 + area2)\n    \n    # Calculate the length of the shorter side:\n    shorter = min(base1, base2)\n    \n    # Calculate the length of the longer side:\n    longer = max(base1, base2)\n    \n    # Calculate the area of the shorter side:\n    area_shorter = 0.5 * shorter * height\n    \n    # Calculate the area of the longer side:\n    area_longer = 0.5 * longer * height\n    \n    # Calculate the length of the shorter side:\n    side_shorter = area_shorter / (area_shorter + area_longer)\n    \n    # Calculate the length of the longer side:\n    side_longer = 1 - side_shorter\n    \n    # Calculate the length of the trapezium:\n    trapezium_length = 0.5 * (side_shorter + side_longer)\n    \n    # Calculate the median of the trapezium:\n    median = trapezium_length - 2 * shorter\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n\n    :param base1: Length of the first base of the trapezium.\n    :param base2: Length of the second base of the trapezium.\n    :param height: Height of the trapezium.\n    :return: The median length of the trapezium.\n    \"\"\"\n    if height < 0:\n        raise ValueError(\"Height cannot be negative.\")\n    elif base1 <= 0 or base2 <= 0:\n        raise ValueError(\"Base length must be positive.\")\n    else:\n        area = 0.5 * (base1 + base2) * height\n        trapezium_height = math.sqrt(area)\n        return 2 * base1 * trapezium_height / (area + height)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    \n    # Calculate the height of the trapezium\n    trapezium_height = area / (base1 + base2)\n    \n    # Calculate the length of the base of the trapezium\n    base_length = base1 + base2\n    \n    # Calculate the length of the side of the trapezium\n    side_length = height - base_length - trapezium_height\n    \n    # Check if the side is greater than the base\n    if side_length > base_length:\n        # Return the median length of the trapezium\n        return side_length\n    else:\n        # Return the median length of the base\n        return base_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium using the formula A = (b1 + b2)/2h\n    A = (base1 + base2) / 2 * height\n    \n    # Calculate the length of the top half of the trapezium\n    top_half_length = (base1 + base2) / 2\n    \n    # Calculate the length of the bottom half of the trapezium\n    bottom_half_length = A / 2\n    \n    # Check if the length of the top half is greater than the length of the bottom half\n    if top_half_length > bottom_half_length:\n        # Calculate the median length of the trapezium using the formula L = (b1 + b2)/2\n        L = (base1 + base2) / 2\n    \n    # If the length of the top half is less than or equal to the length of the bottom half\n    else:\n        # Calculate the median length of the trapezium using the formula L = b1 + b2\n        L = base1 + base2\n    \n    return L"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * (base1 + base2)\n\n    # Calculate the area of the trapezium\n    area_of_trapezium = 0.5 * (base1 * height) + 0.5 * (base2 * height)\n\n    # Calculate the area of the smaller trapezium\n    area_of_smaller_trapezium = min(area_of_trapezium, 0.5 * (base1 + base2) * height)\n\n    # Calculate the area of the larger trapezium\n    area_of_larger_trapezium = max(area_of_trapezium, 0.5 * (base1 + base2) * height)\n\n    # Calculate the difference between the areas\n    difference_in_area = area_of_smaller_trapezium - area_of_larger_trapezium\n\n    # Calculate the length of the smaller trapezium\n    smaller_trapezium_length = 0.5 * (base1 + base2) * area_of_smaller_trapezium / difference_in_area\n\n    # Calculate the length of the larger trapezium\n    larger_trapezium_length = 0.5 * (base1 + base2) * area_of_larger_trapezium / difference_in_area\n\n    # Calculate the total length of the trapezium\n    total_trapezium_length = trapezium_length + smaller_trapezium_length + larger_trapezium_length\n\n    # Return the median length of the trapezium\n    return total_trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the lengths of the two sides of the trapezium\n    s = 0.5 * (base1 + base2)\n    h = height\n\n    # Calculate the areas of the two triangles formed by the trapezium's base and height\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n\n    # Find the areas of the two triangles and the perimeter of the trapezium\n    perimeter = base1 + base2 + 0.5 * height\n\n    # Calculate the sum of the areas of the two triangles and divide by the perimeter to get the area of the trapezium\n    area_trapezium = area1 + area2 + perimeter\n\n    # Find the midpoint of the trapezium\n    midpoint = 0.5 * (base1 + base2 + height)\n\n    # Calculate the distances between the midpoint of the trapezium and the left and right edges of the trapezium\n    left_distance = midpoint - base1\n    right_distance = midpoint - base2\n\n    # Calculate the area of the left and right triangles and the perimeter of the left and right trapeziums\n    area_left = 0.5 * base1 * left_distance\n    area_right = 0.5 * base2 * right_distance\n    perimeter_left = base1 + left_distance + 0.5 * height\n    perimeter_right = base2 + right_distance + 0.5 * height\n\n    # Calculate the sum of the areas of the left and right triangles and divide by the perimeter to get the area of the left and right trapeziums\n    area_left_trapezium = area_left + area_right + perimeter_left + perimeter_right\n\n    # Calculate the length of the left and right trapeziums\n    length_left_trapezium = 0.5 * (area_left_trapezium + area_trapezium)\n    length_right_trapezium = 0.5 * (area_left_trapezium - area_trapezium)\n\n    # Return the median length of the trapezium\n    if area_trapezium < area_left_trapezium:\n        return length_left_trapezium\n    else:\n        return length_right_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Calculate the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium\n    trapezium_length = base1 + base2 + 2 * height\n    \n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the median length of the trapezium\n    median_length = trapezium_length * 0.5\n    \n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    median = 0.5 * area * (base1 + base2) / (height * (height - 1))\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium using the trapezoidal rule.\n\n    :param base1: The length of the first base of the trapezium.\n    :param base2: The length of the second base of the trapezium.\n    :param height: The height of the trapezium.\n    :return: The median length of the trapezium.\n    \"\"\"\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * (base1 + base2)\n\n    # Calculate the area of the semi-perimeter\n    semi_perimeter = 0.5 * (perimeter * (perimeter - base1 * base1) + perimeter * (perimeter - base2 * base2))\n\n    # Calculate the area of the trapezium using the trapezoidal rule\n    trapezium_area = area - semi_perimeter\n\n    # Calculate the trapezium base length using the trapezoidal rule\n    trapezium_base_length = 0.5 * (trapezium_area * (base1 + base2) / height)\n\n    # Calculate the length of the median trapezium\n    median_trapezium_length = 0.5 * (trapezium_base_length + base1 + base2)\n\n    return median_trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the length of the trapezium by adding the lengths of the two bases and the base and height\n    length = base1 + base2 + 2*height\n\n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * length * (base1 + base2 + height)\n\n    # Calculate the median length of the trapezium by dividing the area by the number of sides (4 in this case)\n    median = area / 4\n\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    # Check if the number is greater than the array elements\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_arr = [x for x in arr if x > number]\n    if len(greater_than_arr) == 0:\n        print(f\"The number {number} is not greater than any element of the array.\")\n    else:\n        print(f\"The number {number} is greater than the elements of the array: {greater_than_arr}\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than = False\n    for element in arr:\n        if element > number:\n            greater_than = True\n            break\n    return greater_than"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    if number > arr[0]:\n        print(\"The number is greater than the first element of the array.\")\n    elif number > arr[1]:\n        print(\"The number is greater than the second element of the array.\")\n    elif number > arr[2]:\n        print(\"The number is greater than the third element of the array.\")\n    elif number > arr[3]:\n        print(\"The number is greater than the fourth element of the array.\")\n    elif number > arr[4]:\n        print(\"The number is greater than the fifth element of the array.\")\n    else:\n        print(\"The number is not greater than any element of the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            print(i, \"is greater than\", number)\n            break\n    else:\n        print(number, \"is not greater than any element of the array\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'\\ba(?P<b>.*)\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba[b]+\\b'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.+b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        print(f\"Match found at index {match.start()}, length {match.end()}\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a positive integer as an argument and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns its last digit.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the number to a string\n    n = str(n)\n    # Use slicing to get the last digit\n    last_digit = n[-1]\n    # Convert the last digit to an integer and return it\n    return int(last_digit)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function finds the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer input and returns the last digit of the input number.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return last_Digit(n // 10)"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the negative integers in the original list.\n    \"\"\"\n    new_list = []\n    for num in lst:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Initialize an empty list to store the negative numbers\n    neg_list = []\n    # Loop through each number in the input list\n    for num in list1:\n        # If the number is negative, add it to the neg_list\n        if num < 0:\n            neg_list.append(num)\n    # Return the neg_list as the output\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the negative numbers.\n    '''\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with only the negative numbers from the original list.\n    \"\"\"\n    new_lst = []\n    for num in lst:\n        if num < 0:\n            new_lst.append(num)\n    return new_lst\n"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if char.isalpha():\n            if char.isdigit():\n                result += char\n            elif char.isalpha():\n                result += char\n        elif char.isspace():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isdigit() or char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters in a string.\n    \"\"\"\n    # Loop through each character in the string\n    new_string = \"\"\n    for char in string:\n        # Check if the character is odd\n        if char % 2!= 0:\n            # If it is, add it to the new string\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            if char.isalpha():\n                if char.islower():\n                    new_str += char.lower()\n                else:\n                    new_str += char.upper()\n            else:\n                if char.isdigit():\n                    new_str += char\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if ord(char) % 2!= 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isdigit() and int(char) % 2!= 0:\n            continue\n        else:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if char.isdigit() or char == '.':\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is odd, append it to the result string\n        if char % 2 == 1:\n            result += char\n    # Return the final result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = []\n    for char in str1:\n        if char.isdigit():\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n\n    Parameters:\n    test_list (list): List of tuples, where each tuple contains two elements.\n\n    Returns:\n    int: Number of bidirectional tuple pairs in the list.\n    \"\"\"\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] or test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if (test_list[i][0], test_list[j][1]) in test_list or (test_list[j][0], test_list[i][1]) in test_list:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[j][1]) in test_list[i][0] or (test_list[j][1], test_list[i][1]) in test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 0\n    for num in L:\n        single_integer += num\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the result as the first element of the list\n    result = L[0]\n    \n    # iterate over the remaining elements of the list\n    for i in range(1, len(L)):\n        # if the current element is a multiple of the result, add it to the result\n        if L[i] % result == 0:\n            result *= L[i]\n    \n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    num = 1\n    for i in L:\n        num *= i\n    return num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # initialize a variable to store the sum of all the integers in the list\n    total = 0\n    \n    # loop through each integer in the list\n    for num in L:\n        # add each integer to the total variable\n        total += num\n        \n    # return the sum of all the integers in the list\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all adverbs and their positions in the text\n    adverbs = re.findall(r'\\b\\w+(ed|ing|ly)\\b', text)\n\n    # Initialize an empty list to store the adverb positions\n    adverb_positions = []\n\n    # Iterate over all the adverbs found\n    for index, adverb in enumerate(adverbs):\n        # Check if the next word is a noun or a verb\n        next_word = text.split(adverb)[-1].split()[0]\n        if re.match(r'\\b\\w+\\b', next_word):\n            # If it is, append the position of the adverb to the list\n            adverb_positions.append(index)\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'(?<![\\w\\s])(\\b[\\w\\s]+\\b)(?![\\w\\s])'\n    matches = re.findall(pattern, text)\n    adverbs = []\n    for match in matches:\n        adverbs.append((match.strip(), text.index(match)))\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r'\\b([A-Za-z]+)([A-Z]\\.?)\\b'\n    adverb_groups = re.findall(adverb_pattern, text)\n\n    if not adverb_groups:\n        return None, None\n\n    adverb_list = []\n    for adverb_group in adverb_groups:\n        adverb = adverb_group[0].lower()\n        position = adverb_group[1]\n        adverb_list.append((adverb, position))\n\n    return adverb_list[0], adverb_list"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb in a given sentence and its position.\n\n    Args:\n    text (str): A sentence containing adverbs.\n\n    Returns:\n    A tuple containing the adverb and its position in the sentence.\n    '''\n\n    # Find all adverbs in the text\n    adverbs = re.findall(r'\\b\\w+ly\\b|\\b\\w+lys\\b', text, re.IGNORECASE)\n\n    # Find the first adverb and its position in the sentence\n    first_adverb = adverbs[0]\n    position = text.find(first_adverb)\n\n    return first_adverb, position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern to match adverbs\n    pattern = r'\\b(very|well|fairly|badly|terribly|awfully|completely|almost|unusually|remarkably|amazingly|amazingly|quite|amazingly|amazingly|amazingly|exceedingly|extremely|really|awfully|absolutely|incredibly|remarkably|amazingly|amazingly|quite|amazingly|amazingly|amazingly|exceedingly|extremely|really|awfully)\\b'\n    # Search for adverbs in the text\n    matches = re.findall(pattern, text)\n    # Create a list of tuples with the adverb and its positions in the sentence\n    positions = [(m, text.find(m)) for m in matches]\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'(?<=\\W)([a-zA-Z]+)(\\W|$)'\n    \n    # Find all matches using the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Extract the first adverb and its position\n    adverb = matches[0][0]\n    position = matches[0][1]\n    \n    # Return the adverb and its position\n    return adverb, position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the regex pattern for adverbs\n    adverb_pattern = re.compile(r'\\b\\w*(ed|ing|s|ing|ly|er|est)\\b')\n\n    # Find all the matches in the text\n    matches = adverb_pattern.finditer(text)\n\n    # Iterate through the matches and store the adverbs and their positions\n    result = {}\n    for match in matches:\n        adverb = match.group(0)\n        position = match.start()\n        if adverb in result:\n            result[adverb].append(position)\n        else:\n            result[adverb] = [position]\n\n    # Sort the adverbs by position\n    sorted_result = dict(sorted(result.items(), key=lambda x: x[1]))\n\n    # Return the sorted adverbs and their positions\n    return sorted_result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find the first adverb in the sentence\n    match = re.search(r'\\b([a-zA-Z]+)(?:st|nd|rd|th)?\\b', text)\n\n    # If there is no adverb, return an empty list\n    if not match:\n        return []\n\n    # Extract the adverb and its position from the match object\n    adverb, pos = match.group(1), match.group(2) or 'preposition'\n\n    # Convert the position to an integer value\n    try:\n        pos = int(pos)\n    except ValueError:\n        pass\n\n    return [(adverb, pos)]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define a regular expression pattern to match adverbs\n    pattern = r'\\b\\w*[aeiou]\\w*[aeiou]\\b'\n    # use the re.findall() function to find all matches in the text\n    matches = re.findall(pattern, text)\n    # loop through each match and print the adverb and its position in the sentence\n    for match in matches:\n        pos = text.index(match)\n        print(match, 'found at position', pos)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    print(\"The surface area of the cube is:\", surface_area)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2 # Formula for surface area of a cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6*l*l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*l**2\n    print(\"The surface area of a cube of length\", l, \"is\", surface_area, \"square units.\")"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l + 6 * l + 6"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def positive_count(nums):\n    '''\n    This function takes in an array of integers and returns the ration of positive numbers in the array.\n    '''\n    # Initialize variables to count positive and negative numbers\n    positive_count = 0\n    negative_count = 0\n\n    # Loop through the array and count the positive and negative numbers\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n\n    # Return the ration of positive numbers to the total number of numbers\n    if positive_count == 0:\n        return 0\n    else:\n        return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n    if pos_count > 0:\n        return pos_count / len(nums)\n    elif neg_count > 0:\n        return neg_count / len(nums)\n    else:\n        return 0"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_array = array('i') # create an array to store positive integers\n    negative_array = array('i') # create an array to store negative integers\n\n    for num in nums:\n        if num > 0: # if the number is positive, add it to the positive array\n            positive_array.append(num)\n        elif num < 0: # if the number is negative, add it to the negative array\n            negative_array.append(num)\n\n    # calculate the ratio of positive to negative numbers\n    if len(positive_array) == 0:\n        ratio = 0\n    else:\n        ratio = len(positive_array) / len(negative_array)\n\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n\n    positive_ratio = positive_count / (positive_count + negative_count)\n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_arr = array('i')\n    for num in nums:\n        if num > 0:\n            positive_arr.append(1)\n        else:\n            positive_arr.append(0)\n    positive_count = sum(positive_arr) / len(positive_arr)\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0]) # initialize a counter array with a single element for the positive count\n    total = len(nums) # initialize the total count\n    \n    # iterate through the array and increment the counter if a positive number is found\n    for num in nums:\n        if num > 0:\n            count[0] += 1\n            \n    # calculate the ration of positive numbers in the array\n    positive_ratio = count[0] / total\n    \n    # return the ration of positive numbers in the array\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # create an array of integers to store the count of positive numbers\n    counts = array('i', [0] * len(nums))\n    for num in nums:\n        if num > 0:\n            counts[nums.index(num)] += 1\n    \n    # calculate the ration of positive numbers\n    total_count = sum(counts)\n    positive_ratio = total_count / len(nums)\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = array('i')\n    for num in nums:\n        if num > 0:\n            positives.append(num)\n    positive_ratio = len(positives) / len(nums)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0])\n    for num in nums:\n        if num > 0:\n            count.append(num)\n    positive_ratio = count.item() / len(nums)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_list = []\n    for num in nums:\n        if num > 0:\n            num_list.append(num)\n    return len(num_list) / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')  # initialize the largest variable with negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    neg_max = float('-inf')  # initialize largest negative number to negative infinity\n    for num in list1:\n        if num < 0:\n            if num > neg_max:  # update largest negative number if current number is larger\n                neg_max = num\n    return neg_max"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as input and returns the largest negative number in it.\n    '''\n    largest = float('-inf')\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -10**10  # initializing variable to -ve infinity\n    \n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    \n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')  # Initialize largest variable to negative infinity\n    \n    # Iterate through the list and find the largest negative number\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    \n    # Return the largest negative number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for num in list1:\n        if num < 0:\n            max_neg = max(max_neg, num)\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        if i % K == 0:\n            trimmed_list.append(test_list[i])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) >= K:\n            trimmed_list.append(test_list[i][:K])\n        else:\n            trimmed_list.append(test_list[i])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i] = test_list[i][:j-K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if i == j:\n                test_list[i][j] = None\n            else:\n                test_list[i][j] = test_list[i][j] + K"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i] = test_list[i][:j]\n                break\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K, len(test_list[i])):\n            test_list[i] = test_list[i][:j]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # iterate through the list of tuples\n    for tup in test_list:\n        # split the tuple into its elements\n        tup_elems = list(tup)\n        # trim each element by k\n        for i in range(len(tup_elems)):\n            tup_elems[i] = tup_elems[i][K:]\n        # reconstruct the tuple with the trimmed elements\n        tup = tuple(tup_elems)\n        # replace the original tuple with the trimmed tuple in the list\n        test_list[test_list.index(tup)] = tup\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K, len(test_list[i])):\n            test_list[i] = test_list[i][:j]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                del test_list[i][j]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # initialize the result tuple\n    result = tuple()\n\n    # check if the length of the two tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        # loop through each index\n        for i in range(len(test_tup1)):\n            # perform the multiplication and append the result to the result tuple\n            result += (test_tup1[i] * test_tup2[i],)\n    else:\n        print(\"The two tuples are not of the same length!\")\n\n    # return the result tuple\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication_list = []\n    for i in range(len(test_tup1)):\n        multiplication_list.append(test_tup1[i] * test_tup2[i])\n    return multiplication_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n    :param test_tup1: First tuple to be multiplied.\n    :type test_tup1: tuple\n    :param test_tup2: Second tuple to be multiplied.\n    :type test_tup2: tuple\n    :return: Resultant tuple after performing index multiplication.\n    :rtype: tuple\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize a new empty tuple to store the result\n    result_tup = ()\n    # loop through both tuples at the same time\n    for i in range(len(test_tup1)):\n        # get the element at the current index of both tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        # calculate the multiplication result and append it to the result tuple\n        result_tup = result_tup + (elem1 * elem2,)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # create a new tuple to store the result\n    result_tup = ()\n\n    # iterate through the elements of the two input tuples\n    for i in range(len(test_tup1)):\n        # multiply the elements of the two tuples and append the result to the result tuple\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes in two arguments, tup and lst.\n    The tup contains the tuple to count the occurrences of the elements in lst.\n    The lst contains the list of elements to count the occurrences of in tup.\n    \n    It returns a dictionary of the elements in tup and the counts of those elements.\n    '''\n    count_dict = {}\n    for i in lst:\n        if i in tup:\n            count_dict[i] = count_dict.get(i, 0) + 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input. It uses the Counter function from the collections module \n    to count the number of occurrences of each element in the list in the tuple. The function then returns a dictionary \n    with keys as the elements in the list and values as the count of occurrences.\n    '''\n    count_dict = Counter(tup) \n    return dict(count_dict) "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst) \n    counts = {} \n    for i in c.keys(): \n        counts[i] = 0 \n    for i in tup: \n        if i in counts.keys(): \n            counts[i] += 1 \n    return counts"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst) \n    result = [] \n    for x in tup: \n        if x in c: \n            result.append(c[x]) \n        else: \n            result.append(0) \n    return result "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    count = Counter()\n    for i in lst:\n        if i in c:\n            count[i] += c[i]\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst) # creating a dictionary of all elements in the list\n    count_list = [] # creating an empty list to store the count of each element in the tuple\n    for i in tup: # iterating through the tuple elements\n        if i in count_dict: # checking if the element is in the dictionary\n            count_list.append(count_dict[i]) # appending the count of the element to the list\n    return count_list # returning the list containing the count of each element in the tuple"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # create a dictionary to count the occurrence of each element in the list\n    count_dict = Counter(tup)\n\n    # create a new list to store the counts of each element in the list\n    result_list = []\n\n    # iterate over the elements of the list\n    for elem in lst:\n        # if the element is in the dictionary, add its count to the result list\n        if elem in count_dict:\n            result_list.append(count_dict[elem])\n        # if the element is not in the dictionary, add 0 to the result list\n        else:\n            result_list.append(0)\n\n    # return the result list\n    return result_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # create a dictionary to store the count of each element in list \n    count_dict = Counter(lst) \n\n    # iterate over the tuple and count the occurence of each element in list \n    for i in tup: \n        if i in count_dict: \n            count_dict[i] += 1 \n        else: \n            count_dict[i] = 1 \n\n    # print the result \n    print(\"Count of each element in the tuple:\") \n    for key, value in count_dict.items(): \n        print(key, \": \", value) \n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    total_count = sum(count.values())\n    for i in lst:\n        if i in count:\n            count[i] += 1\n    count = Counter(count)\n    return (count, total_count)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = []\n    for elem in tup:\n        if elem in count_dict:\n            result.append(count_dict[elem])\n        else:\n            result.append(0)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 2\n    s = 0\n    while p <= n:\n        s += p\n        p += 2\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = []\n    for i in range(1, n+1):\n        perrin_numbers.append(2**i - 1)\n\n    return sum(perrin_numbers)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 6 == 5:\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n\n    # initialize the sum to zero\n    total_sum = 0\n    \n    # iterate over all numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the Perrin number using the formula:\n        # Pn = (2^i + 1) / (2*i + 1)\n        pn = (2**i + 1) // (2*i + 1)\n        \n        # add the Perrin number to the total sum\n        total_sum += pn\n        \n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    perrin_numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n    total_sum = 0\n    for num in perrin_numbers:\n        total_sum += num\n    print(\"The sum of Perrin numbers is:\", total_sum)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perrin(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef cal_sum(n):\n    perrin_nums = []\n    for i in range(1, n+1):\n        if is_perrin(i):\n            perrin_nums.append(i)\n    return sum(perrin_nums)\n\nprint(cal_sum(100))"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts a specified size of strings from a list of string values.\n\n    Args:\n    str_list (list): a list of string values.\n    size (int): the size of strings to be extracted.\n\n    Returns:\n    list: a list of extracted strings.\n    '''\n\n    extracted_strings = []\n\n    for i in range(0, len(str_list), size):\n        extracted_strings.append(' '.join(str_list[i:i+size]))\n\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n\n    Parameters:\n    str_list (list): A list of string values to extract strings from.\n    size (int): The desired size of the extracted strings.\n\n    Returns:\n    list: A list of extracted strings.\n    \"\"\"\n    extracted_strings = []\n    for str in str_list:\n        extracted_strings.append(str[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function extracts the specified size of strings from the given list of string values.\n    '''\n    # Initialize an empty list to store the extracted strings\n    extracted_str_list = []\n    # Iterate through the list of string values\n    for i in range(len(str_list)):\n        # Extract the specified size of string from the list of values\n        extracted_str = str_list[i][:l]\n        # Append the extracted string to the extracted string list\n        extracted_str_list.append(extracted_str)\n    # Return the extracted string list\n    return extracted_str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, length):\n    \"\"\"\n    This function takes a list of strings and a desired length for each string. It returns a new list containing the extracted strings.\n    \"\"\"\n    # Initialize an empty list to store the extracted strings\n    extracted_strings = []\n    \n    # Loop through each string in the list\n    for string in str_list:\n        # Check if the length of the string is equal to the desired length\n        if len(string) == length:\n            # Add the string to the extracted_strings list\n            extracted_strings.append(string)\n    \n    # Return the extracted_strings list\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of string values and an integer size as input and returns a list of extracted strings.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_strings.append(string[:size])\n        else:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if i < len(str_list) - l:\n            result.append(\" \".join(str_list[i:i+l]))\n        else:\n            result.append(\" \".join(str_list[i:]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a size as inputs and returns a list of strings of the specified size.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n\n    Parameters:\n    str_list (list): A list of strings.\n    size (int): The size of each string to extract.\n\n    Returns:\n    list: A list of extracted strings of the specified size.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    for i in range(len(l)):\n        str_list.append(l[i][0:l[i].find(str)])\n    return str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size of strings to extract as input,\n    and returns a list of extracted strings.\n    '''\n    return [str[i:i+size] for i in range(0, len(str), size)]"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from the given string using regular expressions.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regex\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    # remove all leading and trailing whitespaces\n    text3 = text2.strip()\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # Remove all whitespaces using regular expression\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Remove all whitespaces from the string using regular expressions\n    text1 = re.sub('\\s+','', text1)\n    # Remove leading and trailing whitespaces from the string\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string using regular expressions.\n    '''\n    text1 = re.sub('\\s+','', text1) # replace multiple whitespaces with single space\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    This function calculates the loss amount on a sale based on the actual cost and sale amount.\n    If the sale amount is less than or equal to actual cost, the loss amount is 0.\n    If the sale amount is greater than actual cost, the loss amount is equal to the sale amount minus actual cost.\n    \"\"\"\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = 0.05 #loss percentage\n    if sale_amount > actual_cost:\n        loss_amount = (actual_cost * loss_percentage)\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount \n    else: \n        return 0 "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize the sum of even factors to zero\n    sum_even = 0\n\n    # loop through each odd number from 3 to the square root of n\n    for i in range(3, int(math.sqrt(n))+1, 2): \n        # if the number is evenly divisible by i, add i to the sum of even factors\n        if n % i == 0: \n            sum_even += i\n\n    # return the sum of even factors\n    return sum_even"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    total = 0\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        while n % i == 0:\n            count += 1\n            total += i\n            n //= i\n            \n    if n > 1:\n        total += n\n            \n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sumofFactors(n) :\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    #initialize sum to zero\n    sum = 0\n\n    #loop through odd numbers from 3 to n-1\n    for i in range(3, n+1, 2) :\n        #check if the number is even\n        if i % 2 == 0 :\n            #add the even factors to the sum\n            sum += i\n    \n    #return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            evenFactors.append(i)\n    evenFactors.append(n)\n    return sum(evenFactors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function finds the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even_factors += i\n    return sum_even_factors"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    # Define the regular expression pattern to match a word containing 'z'\n    pattern = r'\\b\\w+z\\b'\n\n    # Use the regular expression pattern to search for words in the text\n    matches = re.findall(pattern, text)\n\n    # Return the matches found\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns a boolean value indicating whether the input contains a word that contains the letter 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    # Pattern to match words containing 'z'\n    pattern = r'\\b[a-zA-Z]+[zZ][a-zA-Z]+\\b'\n\n    # Find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Print all the matches found\n    print(matches)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    word_z = re.findall(pattern, text)\n    return word_z"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z|Z)\\w+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    return pattern.search(text)"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(monthnum)\n    if 1 <= monthnum <= 12:\n        if monthnum == 2 and year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    days_in_month = 29\n                else:\n                    days_in_month = 28\n            else:\n                days_in_month = 29\n        else:\n            days_in_month = 31\n        if monthnum <= 7:\n            days_in_month -= 3\n        elif monthnum in [4, 6, 9, 11]:\n            days_in_month -= 1\n        return True, days_in_month\n    else:\n        return False, 'Invalid month number. Please enter a number between 1 and 12.'"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return False\n    elif 1 <= monthnum2 <= 12:\n        if monthnum2 % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 30 == 0:\n        return True\n    elif monthnum2 % 30 < 28:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2:\n        if (datetime.datetime.now().year % 4 == 0 and datetime.datetime.now().year % 100!= 0) or datetime.datetime.now().year % 400 == 0:\n            return True\n        else:\n            return False\n    elif 1 <= monthnum2 <= 9:\n        return False\n    else:\n        days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n            return days[monthnum2-1] == 31\n        else:\n            return days[monthnum2-1]!= 31"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n    \"\"\"\n    month = int(monthnum)\n    if month in [4, 6, 9, 11]:  # February and April, June and October\n        return False\n    if month == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return 29\n        else:\n            return 28\n    if month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return 31\n    else:\n        return 30"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check if the month number is in range 1-12\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number\"\n    \n    # Check for the month with 31 days\n    if monthnum2 == 2:\n        return \"February has 29 or 30 days\"\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return \"April, June, September, and November have 30 days\"\n    else:\n        return \"All other months have 31 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 % 2 == 0:\n        if monthnum2 == 2:\n            print(\"The month number contains 29 days.\")\n        else:\n            print(\"The month number contains 30 days.\")\n    else:\n        print(\"The month number contains 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    # Check whether the given month number contains 31 days or not\n    if monthnum2 % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if the month number contains 31 days and False otherwise.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function checks whether a given month number has 31 days or not.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Iterate over each string in the list and reverse it\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Sort the list in ascending order\n    lst.sort()\n    # Initialize a variable to store the minimum length of the sublist\n    min_length = lst[0]\n    # Initialize a variable to store the index of the minimum length of the sublist\n    min_index = 0\n    # Loop through the list\n    for i in range(1, len(lst)):\n        # If the length of the current sublist is less than the minimum length, update the minimum length and its index\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_index = i\n    # Return the sublist at the minimum index\n    return lst[min_index]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_min = lst[0]\n    for sub in lst:\n        if len(sub) < len(sub_min):\n            sub_min = sub\n    return sub_min"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist having minimum length.\n    '''\n    # initialize min_len with the length of the first sublist\n    min_len = len(lst[0])\n    \n    # loop through the list of sublists\n    for sublist in lst:\n        # check if the length of the current sublist is less than the minimum length\n        if len(sublist) < min_len:\n            # update the minimum length with the length of the current sublist\n            min_len = len(sublist)\n    \n    # create an empty list to store the sublists with minimum length\n    min_sublists = []\n    \n    # loop through the list of sublists again and append the sublists with minimum length to the min_sublists list\n    for sublist in lst:\n        if len(sublist) == min_len:\n            min_sublists.append(sublist)\n    \n    # return the list of sublists with minimum length\n    return min_sublists"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    min_lst = []\n    for i in range(len(lst)):\n        if min_lst == []:\n            min_lst.append(lst[i])\n        else:\n            if len(min_lst) > len(lst[i]):\n                min_lst = lst[i]\n    \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    # Initialize minimum length to infinity\n    min_length = float('inf')\n    # Initialize minimum sublist to an empty list\n    min_sublist = []\n    # Loop through the list\n    for sublist in lst:\n        # Check if the length of the sublist is smaller than the current minimum\n        if len(sublist) < min_length:\n            # Update the minimum length and the minimum sublist\n            min_length = len(sublist)\n            min_sublist = sublist\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize minimum length and sublist \n    min_len = float('inf')\n    min_sublist = []\n    \n    # loop through the list and update minimum length and sublist\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist having the minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize the minimum sublist length and the minimum sublist\n    min_length = float('inf')\n    min_sublist = []\n\n    # Iterate over the list of sublists\n    for sublist in lst:\n        # Find the length of the sublist\n        length = len(sublist)\n\n        # If the length of the sublist is less than the current minimum length, update the minimum sublist and length\n        if length < min_length:\n            min_length = length\n            min_sublist = sublist\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = r'[A-Z][a-z]+'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z][A-Z0-9_]*\\b')\n    # find all substrings in the input string that match the pattern\n    matches = pattern.findall(str1)\n    # iterate over each match and remove it from the input string\n    for match in matches:\n        str1 = re.sub(pattern, '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    str1 = pattern.sub('', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    \n    # Use the search() method to search for uppercase substrings in the input string\n    match = pattern.search(str1)\n    \n    # If a match is found, replace it with an empty string\n    if match:\n        str1 = pattern.sub('', str1)\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)[A-Z][a-z]*' # regex pattern to match uppercase substrings\n    result = re.sub(pattern, '', str1) # remove all matching substrings\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Use regex to remove uppercase substrings\n    pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile('[A-Z][a-z]*')\n    return uppercase_pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    This function takes a string as an argument and returns the same string with uppercase substrings removed.\n    \"\"\"\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'([A-Z]+)'\n\n    # Replace all occurrences of uppercase substrings with an empty string\n    result = re.sub(pattern, '', string)\n\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_elements = []\n    for sublist in lst:\n        if type(sublist) == list:\n            first_elements.append(sublist[0])\n        else:\n            first_elements.append(sublist)\n    return first_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            new_lst.append(sublist[0])\n        else:\n            new_lst.append(sublist)\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list and extracts the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.append(item[0])\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    sub_list = []\n    for item in lst:\n        if isinstance(item, list):\n            sub_list.append(Extract(item))\n        else:\n            sub_list.append(item)\n    return sub_list\n"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for char in str:\n        if char.isupper():\n            upper += 1\n    return upper"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n\n    # initialize a variable to keep track of the count\n    count = 0\n\n    # loop through each character in the string\n    for char in str:\n        # if the character is an uppercase letter\n        if char.isupper():\n            # increment the count\n            count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # create a list to store the combinations\n    result = []\n\n    # create a helper function to generate all combinations\n    def helper(start, combo, list1):\n        if len(combo) == len(list1):\n            # check if the combination is already in the result list\n            if combo not in result:\n                result.append(combo)\n        else:\n            # add each element to the combo and recursively generate all combinations\n            for i in range(start, len(list1)):\n                helper(i+1, combo + [list1[i]], list1)\n\n    # start generating combinations with the first element\n    helper(0, [list1[0]], list1)\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    # Initialize a list to store the combinations\n    combinations = []\n    \n    # Sort the list in ascending order\n    list1.sort()\n    \n    # Define a helper function to generate the combinations\n    def generate_combinations(start, end, current_combination):\n        \"\"\"\n        Recursive function to generate the combinations of elements from start to end.\n        \"\"\"\n        # If all elements have been used, add the current combination to the list\n        if start > end:\n            combinations.append(current_combination[:])\n            return\n        \n        # Add the current element to the current combination and generate the combinations for the next element\n        generate_combinations(start+1, end, current_combination+[list1[start]])\n        \n    # Call the helper function to generate the combinations of the first element\n    generate_combinations(0, len(list1)-1, [])\n    \n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Find the length of the list\n    n = len(list1)\n    # Initialize an empty list to store the combinations\n    comb = []\n    # Find the number of combinations\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            comb.append(list1[i-1:j])\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(n, n-i, -1):\n            combinations.append(list1[j:j+i])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(1, 2**n):\n        combo = []\n        for j in range(n):\n            if (i >> j) & 1:\n                combo.append(list1[j])\n        result.append(combo)\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            curr_product = 1\n        else:\n            curr_product *= arr[i]\n\n        if curr_product > max_product:\n            max_product = curr_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    curr_product = arr[0]\n\n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], curr_product * arr[i])\n        max_product = max(max_product, curr_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        if num < 0:\n            current_product *= -1\n        current_product *= num\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    curr_product = 1\n    \n    for num in arr[1:]:\n        curr_product = max(num, curr_product * num)\n        max_product = max(max_product, curr_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for i in range(len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for num in arr:\n        if num < 0:\n            temp = max_ending_here\n            max_ending_here = min_ending_here\n            min_ending_here = temp\n        \n        max_ending_here = max(num, max_ending_here * num)\n        min_ending_here = min(num, min_ending_here * num)\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    neg_flag = False\n    \n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_flag = True\n        elif arr[i] == 0:\n            if neg_flag:\n                current_product = max(0, current_product)\n                neg_flag = False\n            else:\n                current_product = 1\n        else:\n            if neg_flag:\n                current_product = max(current_product * arr[i], 0)\n            else:\n                current_product *= arr[i]\n        \n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for i in range(len(arr)):\n        if current_product < 0:\n            current_product = 1\n            \n        current_product *= arr[i]\n        \n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(dict) == 0:\n        return True\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Get the first key and value from the dictionary\n    key, value = next(iter(dict.items()))\n    # Iterate through the dictionary to check if all values are the same\n    for key, value in dict.items():\n        if value!= key:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Loop through the dictionary and check if all values are same\n    for value in dict.values():\n        if value!= dict[list(dict.keys())[0]]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    for i in range(len(values)):\n        if values[i]!= values[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for value in dict.values():\n        values.append(value)\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print(\"All values are same in the dictionary.\")\n    else:\n        print(\"All values are different in the dictionary.\")"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    values = []\n    for key, value in dict.items():\n        values.append(value)\n    return all(value == values[0] for value in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n in dict:\n        return False\n    else:\n        for i in dict.values():\n            if i!= dict[n]:\n                return False\n        return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes a dictionary as input and returns a new dictionary with all the empty items dropped.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    # Create an array to store the products of increasing subsequences\n    subseq_products = [1] * len(arr)\n    \n    # Loop through the array and calculate the products of increasing subsequences\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                subseq_products[i] = max(subseq_products[i], subseq_products[j] * arr[i])\n    \n    # Return the maximum product\n    return max(subseq_products)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n    \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = 0\n    prev = 0\n    curr = 1\n    \n    for i in range(len(arr)):\n        if i == 0:\n            prev = 0\n            curr = 1\n        elif arr[i] > arr[i-1]:\n            prev, curr = curr, arr[i]\n        else:\n            prev, curr = curr, arr[i]\n            \n        max_product = max(max_product, curr * prev)\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    # Initialize variables\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    max_ending_here_negative = arr[0] if arr[0] < 0 else 0\n\n    for i in range(1, len(arr)):\n        # Update max_ending_here_negative\n        if arr[i] < 0:\n            max_ending_here_negative = max(max_ending_here_negative, 0)\n        # Update max_ending_here and max_ending_here_negative\n        max_ending_here = max(arr[i], max_ending_here_negative * arr[i])\n        max_ending_here_negative = max(max_ending_here_negative * arr[i], max_ending_here_negative)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_ending_here = max(max_ending_here * arr[i], max_ending_here * arr[i-1], arr[i])\n            min_ending_here = min(min_ending_here * arr[i], min_ending_here * arr[i-1], arr[i])\n        else:\n            max_ending_here = max(max_ending_here * arr[i], max_ending_here * arr[i-1], arr[i])\n            min_ending_here = min(min_ending_here * arr[i], min_ending_here * arr[i-1], arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    min_product = float('inf')\n    \n    for i in range(n):\n        max_product = max(max_product, arr[i])\n        min_product = min(min_product, arr[i])\n        \n    for i in range(n):\n        for j in range(i+1, n):\n            current_product = arr[i] * arr[j]\n            max_product = max(max_product, current_product)\n            min_product = min(min_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    def max_product_of_subsequence(arr, start, end):\n        if start == end:\n            return 0\n        max_product = 0\n        for i in range(start, end):\n            max_product = max(max_product, arr[i] * arr[start:i+1])\n        return max_product\n    \n    max_product = max_product_of_subsequence(arr, 0, len(arr)-1)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max_product_so_far = max_product_ending_here = arr[0]\n    min_product_so_far = min_product_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_product_ending_here = max(max_product_ending_here * arr[i], max_product_so_far * arr[i], min_product_so_far * arr[i])\n        min_product_ending_here = min(min_product_ending_here * arr[i], max_product_so_far * arr[i], min_product_so_far * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n        min_product_so_far = min(min_product_so_far, min_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], max_product, arr[i])\n        min_product = min(min_product * arr[i], min_product, arr[i])\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum variable\n    pairwise_sum = 0\n\n    # Loop through the tuple and add the neighboring elements to the sum\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i+1]\n\n    # Return the final sum\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    \n    return test_tup[0] + add_pairwise(test_tup[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    \n    # Add the first two elements of the tuple and return the result\n    result = test_tup[0] + test_tup[1]\n    \n    # If the length of the tuple is greater than 2, add the pairwise addition of the remaining elements\n    if len(test_tup) > 2:\n        result += add_pairwise(test_tup[2:])\n    \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"Tuple should have at least two elements\")\n\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Create a copy of the input tuple\n    tup = test_tup[:]\n    # Loop through the tuple and add the pairwise sum of the elements\n    for i in range(len(tup)-1):\n        tup[i] += tup[i+1]\n    return tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[1:] + [test_tup[0]])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Check if the tuple is of length greater than 1\n    if len(test_tup) > 1:\n        # Initialize a variable to store the sum of the neighboring elements\n        sum_pairwise = 0\n\n        # Loop through each element in the tuple\n        for i in range(len(test_tup)-1):\n            # Add the current element to the sum of the neighboring elements\n            sum_pairwise += test_tup[i] + test_tup[i+1]\n\n        # Return the sum of the pairwise additions\n        return sum_pairwise\n    else:\n        # Raise a ValueError if the tuple has less than 2 elements\n        raise ValueError(\"The tuple must have at least 2 elements.\")"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Check if the length of the tuple is greater than 1\n    if len(test_tup) > 1:\n        # Find the sum of the first and second elements of the tuple\n        pairwise_sum = test_tup[0] + test_tup[1]\n        # Find the pairwise sum of the remaining elements of the tuple\n        for i in range(2, len(test_tup)):\n            pairwise_sum += test_tup[i]\n        return pairwise_sum\n    else:\n        print(\"Tuple length must be greater than 1.\")"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Define the number of elements in the tuple\n    n = len(test_tup)\n    # Initialize an empty list to store the sum of each element\n    sum_list = [0] * n\n    # Loop through each element in the tuple\n    for i in range(n):\n        # Add the neighboring elements and store the sum in the list\n        sum_list[i] = test_tup[i] + test_tup[i+1] if i<n-1 else 0\n    return sum_list"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes two arguments, arr and n, where arr is an array and n is a non-zero integer.\n    The function calculates the product of the array multiplication modulo n and returns the result.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result *= arr[i] % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product*num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in an array `arr` and an integer `n`. The function finds the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the product variable to 1\n    product = 1\n    \n    # Iterate through the array and multiply each element by the product\n    for num in arr:\n        product *= num % n\n    \n    # Return the product modulo n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize variables\n    product = 1\n    result = 0\n    \n    # Iterate through the array and update the product and result\n    for num in arr:\n        product = (product*num) % n\n        result = (result + product) % n\n        \n    # Return the final result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Initialize the product variable\n    product = 1\n\n    # Iterate through the array and multiply each element with the product\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Find the product of the array elements\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    # Return the result\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Calculate the product of array multiplication modulo n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            print(l[i+1])\n            return"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    # Check if the list is empty\n    if len(l) == 0:\n        return False\n    \n    # Check if the list contains only one element\n    if len(l) == 1:\n        return True\n    \n    # Initialize variables for the first and last elements\n    first = l[0]\n    last = l[-1]\n    \n    # Loop through the list from the second to the last element\n    for i in range(1, len(l)-1):\n        # If the current element is not equal to the previous element, return False\n        if l[i]!= l[i-1]:\n            return False\n    \n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    n = len(l)\n    for i in range(n-1):\n        if l[i] == l[i+1]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    if len(l) <= 1:\n        return True\n\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    if len(l) == 1: \n        return True\n\n    for i in range(1, len(l)): \n        if l[i] - l[i-1]!= 1: \n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    if len(test_list1)!= len(test_list2):\n        return \"Tuple lists must have the same length to find the intersection.\"\n\n    # Check if all elements are tuples\n    for item in test_list1:\n        if not isinstance(item, tuple):\n            return \"All elements in the tuple lists must be tuples.\"\n\n    # Find the intersection of elements in both lists\n    intersection = set(test_list1) & set(test_list2)\n\n    # Convert the intersection to a list\n    intersection_list = list(intersection)\n\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two lists of tuples as input, and returns a new list containing the tuple elements that are present in both lists irrespective of their order.\n    '''\n    intersection_list = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2:\n                intersection_list.append(tuple1)\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Sort both lists in ascending order\n    test_list1.sort()\n    test_list2.sort()\n\n    # Initialize an empty list to store the intersection\n    intersection = []\n\n    # Iterate through both lists simultaneously\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            # If the elements are equal, add them to the intersection list\n            intersection.append(test_list1[i])\n            # Increment both indices\n            i += 1\n            j += 1\n        elif test_list1[i] < test_list2[j]:\n            # If the first element is smaller, increment the first index\n            i += 1\n        else:\n            # If the second element is smaller, increment the second index\n            j += 1\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    result = []\n\n    for item in test_list1:\n        if item in test_list2:\n            result.append(item)\n\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in range(len(test_list1)):\n        if (test_list1[i] in test_list2) and (test_list2[i] in test_list1):\n            intersection.append(test_list1[i])\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Set of unique elements from both lists\n    unique_elements = set(test_list1).intersection(set(test_list2))\n    # Convert set to list\n    intersection_list = list(unique_elements)\n    # Sort the list in ascending order\n    intersection_list.sort()\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    set_intersection = set1.intersection(set2)\n    return tuple(set_intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set to store the unique elements in both list\n    unique_set = set(test_list1 + test_list2)\n    # Create a new list to store the common elements\n    common_list = []\n    # Loop through the unique elements and check if they are in both list\n    for element in unique_set:\n        if (element in test_list1) and (element in test_list2):\n            common_list.append(element)\n    return common_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of all the elements in the first list\n    set1 = set(test_list1)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set(test_list2))\n\n    # Return the list of intersection elements in the order of the first list\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find intersection of sets\n    intersection = set1.intersection(set2)\n\n    # convert intersection back to list\n    result = list(intersection)\n\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create a new string and loop through each character in the original string\n    new_str = \"\"\n    for char in str1:\n        # check if the current character is the character to be replaced\n        if char == ch:\n            # add the new character to the new string\n            new_str += newch\n        # if the current character is not the character to be replaced, add it to the new string\n        else:\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the modified string\n    result = ''\n    # Loop through each character in the string\n    for char in str1:\n        # If the current character is equal to the search character, replace it with the new character\n        if char == ch:\n            result += newch\n        # Otherwise, add the current character to the result string\n        else:\n            result += char\n    # Return the modified string\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character matches the search character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Use Counter to count the occurrences of each value in the dictionary\n    counts = Counter(dict1.values())\n    # Sort the counts dictionary by value in descending order\n    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n    # Convert the sorted counts dictionary back to a dictionary\n    sorted_dict = dict(sorted_counts)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # create a Counter object from the dictionary\n    c = Counter(dict1)\n\n    # sort the Counter object by value in ascending order\n    sorted_c = sorted(c.items(), key=lambda x: x[1])\n\n    # convert the sorted Counter object to a dictionary\n    sorted_dict = dict(sorted_c)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(counter):\n    sorted_counter = Counter(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Convert the dictionary to a Counter object\n    c = Counter(dict1)\n    # Sort the Counter object by value\n    sorted_c = sorted(c.items(), key=lambda x: x[1], reverse=True)\n    # Return the sorted dictionary\n    return dict(sorted_c)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1.values())\n    sorted_counter = dict(sorted(counter.items()))\n    sorted_dict = {k:sorted_counter[v] for k,v in sorted_counter.items()}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Sort the dictionary by value\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    # Extract the sorted keys and values\n    sorted_keys = [key for key, value in sorted_dict]\n    sorted_values = [value for key, value in sorted_dict]\n    # Create a dictionary with the sorted keys and values\n    sorted_dict = dict(zip(sorted_keys, sorted_values))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            elif num < smallest:\n                smallest = num\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize variables for the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    # loop through each number in the array\n    for num in nums:\n        # update largest and smallest if the current number is greater than largest and smaller than smallest\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Find the sum of the largest and smallest value in the array\n    return nums[0] + nums[1]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Find the sum of the largest and smallest values in a given array.\n\n    Args:\n        nums (list): The array to find the sum of largest and smallest values in.\n\n    Returns:\n        int: The sum of the largest and smallest values in the given array.\n    \"\"\"\n    # Initialize variables for the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n\n    # Iterate through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    \n    # Find the largest and smallest values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    if len(nums) < 2:\n        return None\n\n    # initialize the largest and smallest values to the first element\n    largest = nums[0]\n    smallest = nums[0]\n\n    # iterate through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Finding the maximum and minimum values in the array\n    max_num = max(nums)\n    min_num = min(nums)\n    # Calculating the sum of the largest and smallest values\n    sum_largest_smallest = max_num + min_num\n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = float('-inf')\n    min_num = float('inf')\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num + min_num"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are lowercase and False otherwise.\n    '''\n\n    # Loop through each character in the string\n    for char in string:\n        # If the character is not lowercase, return False\n        if char.isupper():\n            return False\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # convert the string to lower case\n    lower_string = string.lower()\n    # return the lower case string\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if the string is in lower case, False otherwise.\n    '''\n    lower_string = string.lower()\n    if string == lower_string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Using regular expressions to find all lowercase substrings\n    substrings = re.findall(r'\\b[a-z]{1,}\\b', str1)\n\n    # Removing all the lowercase substrings from the string\n    for substring in substrings:\n        str1 = re.sub(substring, '', str1)\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function removes all lowercase substrings from a given string.\n    '''\n    string = re.sub(r'[a-z]+', '', string)\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # replace all lowercase substrings with empty strings\n    str1 = re.sub(r'\\b[a-z]{3,}\\b', '', str1)\n    # replace all lowercase substrings with empty strings\n    str1 = re.sub(r'\\b[a-z]{2,}\\b', '', str1)\n    # replace all lowercase substrings with empty strings\n    str1 = re.sub(r'\\b[a-z]{1,}\\b', '', str1)\n    # return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1.lower())"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings using regular expressions\n    pattern = r'\\b[a-z]+\\b'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Find all the lowercase substrings in the given string\n    matches = pattern.findall(str1)\n    # Remove the lowercase substrings from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    # Use the pattern to find all lowercase substrings in the input string\n    matches = pattern.findall(str1)\n    # Remove all lowercase substrings from the input string\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    # use string slicing to extract the first digit of the number\n    first_digit = str(n)[0]\n    # convert the first digit to an integer and return it\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Converting the number to a string\n    num_str = str(n)\n\n    # Finding the first digit of the number\n    first_digit = num_str[0]\n\n    # Returning the first digit of the number\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # converting the number to string\n    s = str(n)\n    # returning the first digit of the string\n    return s[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    This function takes in a number and returns the first digit of that number.\n    '''\n    first_digit = n // 1000\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_num = n // 10**(len(str(n))-1)\n    return first_num"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer number as input and returns the first digit of the number.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # return the first digit of the string\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    odd_lst = [num for num in lst if num % 2!= 0]\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0: # checks if the number is odd\n            odd_list.append(num) # appends the odd number to the odd_list\n    return odd_list # returns the odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(x**3 for x in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Compute the sum of cubes of the first n natural numbers\n    cubes = sum([i**3 for i in range(1, n+1)])\n\n    # Compute the sum of the first n natural numbers\n    sum_n = sum(range(1, n+1))\n\n    # Return the difference between the two sums\n    return abs(cubes - sum_n)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(n):\n        sum_cubes += i ** 3\n        sum_natural += i\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    \n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # Find the difference between the two sums\n    difference = abs(sum_cubes - sum_natural)\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initializing sum of cubes of natural numbers\n    sum_cubes = 0\n    # initializing sum of natural numbers\n    sum_natural = 0\n    # iterating through the first n natural numbers\n    for i in range(1, n+1):\n        # adding the cube of the natural number to the sum of cubes\n        sum_cubes += i**3\n        # adding the natural number to the sum of natural numbers\n        sum_natural += i\n    # returning the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Sum of cubes of the first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # Sum of the first n natural numbers\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_numbers += i\n\n    return sum_cubes - sum_numbers\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [num**3 for num in range(1, n+1)]\n    sum_cubes = sum(cubes)\n    first_n = [num for num in range(1, n+1)]\n    sum_first_n = sum(first_n)\n    return sum_cubes - sum_first_n\n\nprint(difference(10))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    cube_sum = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_sum = sum(range(1, n+1))\n    \n    # Calculate the difference between the two sums\n    difference = cube_sum - sum_sum\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(x**3 for x in range(1, n+1))\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n\n    # Sort the array in ascending order\n    A.sort() \n\n    # Initialize variables\n    count = 0 \n    odd_count = 0 \n\n    # Loop through the array\n    for i in range(len(A)) : \n        # Calculate the xor value of the current element and next element\n        xor_val = A[i] ^ A[i+1] \n\n        # Check if the xor value is odd and add to count\n        if xor_val % 2!= 0 : \n            odd_count += 1 \n            count += odd_count \n\n    # Return the count of pairs whose xor value is odd\n    return count "
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        xor = A[i] ^ A[(i + 1) % N]\n        if xor % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A of size N and returns the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if A[i]^A[j]%2!= 0:\n                count+=1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = 0\n    count = 0\n\n    for i in range(N):\n        xor_sum = xor_sum ^ A[i]\n\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_diff = xor_sum ^ (A[i] ^ A[j])\n            if xor_diff % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    xor_value = 0\n    for i in range(N):\n        xor_value = xor_value ^ A[i]\n        if xor_value & 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize count to zero\n    count = 0\n    # Iterate over all pairs of elements in the array\n    for i in range(N):\n        for j in range(i+1,N):\n            # If xor value is odd, increment count\n            if ((A[i] ^ A[j]) & 1) == 1:\n                count += 1\n    # Return count of odd pairs\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_char = char.upper()\n        elif char.isupper():\n            new_char = char.lower()\n        else:\n            new_char = char\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        new_string += chr(ord(char) ^ 32)\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        new_char = char.upper() if char.islower() else char.lower()\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to lowercase\n    lowercase_string = string.lower()\n    # initialize an empty list to store the resulting string\n    result = []\n    # loop through each character in the lowercase string\n    for char in lowercase_string:\n        # if the character is uppercase, convert it to lowercase\n        if char.isupper():\n            result.append(char.lower())\n        # if the character is lowercase, convert it to uppercase\n        elif char.islower():\n            result.append(char.upper())\n        # otherwise, add it to the result list as is\n        else:\n            result.append(char)\n    # join the resulting list into a single string and return it\n    return ''.join(result)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n\n    # Iterate over each character in the string\n    for i in range(len(string)):\n        # If the character is uppercase, convert it to lowercase\n        if string[i] in string.upper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # If the character is lowercase, convert it to uppercase\n        elif string[i] in string.lower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n\n    return string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to lists of digits\n    digits1 = list(str(n1))\n    digits2 = list(str(n2))\n    \n    # Initialize the sum to 0\n    sum_diff = 0\n    \n    # Loop through each digit in the first integer\n    for i in range(len(digits1)):\n        # Subtract the corresponding digit from the second integer\n        diff = int(digits1[i]) - int(digits2[i])\n        # Add the per-digit difference to the sum\n        sum_diff += diff ** 2\n        \n    # Return the sum of the per-digit differences squared\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # create a set to store the digits of both numbers\n    digits_set = set(str(n1) + str(n2))\n    \n    # calculate the per-digit difference between the digits of both numbers\n    digit_difference = sum([abs(int(digit1) - int(digit2)) for digit1, digit2 in zip(str(n1), str(n2))])\n    \n    # return the sum of the per-digit difference\n    return digit_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize a variable to store the sum of the per-digit differences\n    digit_sum = 0\n\n    # Iterate through each digit in the two numbers\n    for digit1, digit2 in zip(str(n1), str(n2)):\n        # Calculate the difference between the digits\n        diff = int(digit1) - int(digit2)\n\n        # Add the per-digit difference to the total sum\n        digit_sum += abs(diff)\n\n    # Return the total sum of the per-digit differences\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the integers to a string and split them into individual digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n\n    # Initialize the sum of differences to zero\n    distance = 0\n\n    # Iterate over the digits of each number\n    for i in range(len(digits1)):\n        # Subtract the corresponding digits and take the absolute value\n        distance += abs(digits1[i] - digits2[i])\n\n    # Return the total difference\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n    digit_sum = 0\n    while diff > 0:\n        digit = diff % 10\n        digit_sum += digit ** 2\n        diff //= 10\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff_sum = 0\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        d1 = int(str(n1)[i]) if i < len(str(n1)) else 0\n        d2 = int(str(n2)[i]) if i < len(str(n2)) else 0\n        diff = abs(d1 - d2)\n        diff_sum += diff\n\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Calculate the sum of the absolute differences of each digit\n    digit_diff = abs(n1 - n2)\n    # Calculate the sum of the differences of each pair of digits\n    digit_diff_sum = 0\n    while digit_diff > 0:\n        digit_diff_sum += digit_diff % 10\n        digit_diff //= 10\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(10):\n        if n1 % 10 == n2 % 10:\n            sum += abs(n1 // 10 - n2 // 10)\n        n1 //= 10\n        n2 //= 10\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert both numbers to strings and split them into lists of digits\n    str1 = str(n1)\n    str2 = str(n2)\n    digits1 = list(str1)\n    digits2 = list(str2)\n\n    # Find the number of digits in each string\n    num_digits1 = len(digits1)\n    num_digits2 = len(digits2)\n\n    # Initialize the sum of differences as 0\n    diff_sum = 0\n\n    # Loop through each digit of both strings\n    for i in range(num_digits1):\n        # Convert the current digits to integers and subtract them\n        diff = int(digits1[i]) - int(digits2[i])\n        # Add the difference to the sum of differences\n        diff_sum += diff\n\n    # Return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1_list = list(str(n1))\n    num2_list = list(str(n2))\n\n    # Find the sum of the per-digit difference between the two numbers\n    sum_diff = 0\n    for i in range(len(num1_list)):\n        diff = abs(int(num1_list[i]) - int(num2_list[i]))\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    # Initialize variables to keep track of the current maximum subarray sum and its start index\n    max_sum = float('-inf')\n    start_idx = 0\n\n    # Traverse the list and update the max_sum and start_idx variables\n    for i in range(size):\n        max_sum = max(max_sum + a[i], a[i])\n        start_idx = i\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function finds the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    current_sum = 0\n    max_sum = float('-inf')\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n        if i > 0 and current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    i = 0\n    \n    while i < size:\n        if i == 0:\n            current_sum = a[i]\n        elif i == size - 1:\n            current_sum = a[i] + current_sum\n        else:\n            current_sum = max(a[i], a[i] + current_sum)\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        i += 1\n        \n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if i > 0 and max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(len(a)):\n        if i == 0:\n            curr_sum += a[i]\n        else:\n            curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n        \n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union = test_tup1 + test_tup2\n    union_set = set(union)\n    union_list = sorted(union_set)\n    print(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1 + test_tup2\n    union = sorted(set(union))\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = list(set(test_tup1) | set(test_tup2))\n    # Sort the combined list in ascending order\n    combined_list.sort()\n    # Output the union of the two lists\n    print(combined_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    \n    # Remove duplicates using set()\n    unique_tup = set(combined_tup)\n    \n    # Convert set to list and sort it in ascending order\n    sorted_list = sorted(list(unique_tup))\n    \n    # Print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union = test_tup1 + test_tup2\n    # Sort the union in ascending order\n    union = sorted(set(union))\n    # Print the union\n    print(\"Union of the elements in the two tuples:\", union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Get the union of the two tuples using set operations\n    union = test_tup1.union(test_tup2)\n\n    # Convert the set to a list and sort it in ascending order\n    sorted_union = sorted(list(union))\n\n    # Output the sorted union as a string\n    print(\"The union of the elements of the two given tuples is:\", \" \".join(str(x) for x in sorted_union))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples using the set() function\n    union_set = set(test_tup1 + test_tup2)\n\n    # Convert the set back to a list and sort it using the sorted() function\n    union_list = sorted(list(union_set))\n\n    # Output the sorted union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples\n    combined_tuple = test_tup1 + test_tup2\n    # Convert the combined tuple to a set\n    combined_set = set(combined_tuple)\n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(combined_set))\n    # Return the sorted list as the output\n    return sorted_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples and convert it into a set\n    union_set = set(test_tup1 + test_tup2)\n    # Convert the set into a sorted list and return it\n    return sorted(union_set)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n    \n    # Convert the set to a list and sort it\n    union_list = sorted(union_set)\n    \n    # Print the union list\n    print(union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # create an empty dictionary to store the lengths of sublists\n    lengths = {}\n\n    # loop through the list of lists\n    for sublist in lst:\n        # calculate the length of the sublist\n        length = len(sublist)\n        # check if the length is already in the dictionary\n        if length in lengths:\n            # if it is, increment its value by 1\n            lengths[length] += 1\n        else:\n            # otherwise, add the length to the dictionary with a value of 1\n            lengths[length] = 1\n\n    # find the length of the longest sublist\n    max_length = max(lengths, key=lengths.get)\n\n    # return the length of the longest sublist\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            length = 0\n            for k in range(j):\n                length += len(lst[k])\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        if i == 0:\n            max_length = 1\n        elif lst[i] == lst[i-1]:\n            max_length += 1\n        else:\n            max_length = 1\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    longest_length = 0   # initialize variable to store longest sublist length\n\n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)+1):  \n            sublist = lst[i:j]  \n            sublist_length = len(sublist)  \n            if sublist_length > longest_length:  \n                longest_length = sublist_length\n\n    return longest_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for num in lst:\n        if len(num) > current_length:\n            max_length = current_length\n            current_length = len(num)\n        else:\n            current_length += 1\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and returns the length of the longest sublist present in the list.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            if j - i + 1 > max_length:  \n                max_length = j - i + 1  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        sublist = lst[i]\n        for j in range(i+1, len(lst)):\n            sublist2 = lst[j]\n            if len(sublist) > len(sublist2):\n                sublist = sublist2\n            elif len(sublist) < len(sublist2):\n                sublist2 = sublist\n            else:\n                pass\n            sublist = sublist2\n        max_len = max(max_len, len(sublist))\n    return max_len"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\w+\"|^)(\\w+(?:(?!\\s+)\"\\w+)+)(?=\\s+|\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'\"([^\\\"]*)\"'\n\n    # Use the re.finditer() function to find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the extracted values\n    values = []\n\n    # Iterate through all matches and append the extracted value to the values list\n    for match in matches:\n        values.append(match.group(1))\n\n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")(\\w+)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text)\n    return result"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\w+)\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use regular expressions to find all the values between quotation marks\n    pattern = r'\"[^\"]*\"'\n    values = re.findall(pattern, text)\n\n    # Remove any leading/trailing whitespace from the values\n    values = [value.strip() for value in values]\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'\"(.*?)\"'\n    # Use the re.findall() function to find all the values between the quotation marks\n    values = re.findall(pattern, text)\n    # Return the list of values\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the list\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n\n    # Count the number of pairs with both elements unequal\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if freq[arr[i]] > freq[arr[j]]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    count = 0 \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1 \n    return count "
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n):\n    # To store all the pairs\n    pair_count = []\n    # Sort the array in ascending order\n    arr.sort()\n    # Iterate through the array\n    for i in range(n-1):\n        # Check if the current element is already included in the pair_count list\n        if arr[i] not in [x[0] for x in pair_count]:\n            # Iterate through the remaining elements to check for pairs where both elements are unequal\n            for j in range(i+1,n):\n                if arr[i] + arr[j] not in [x[1] for x in pair_count]:\n                    # If both conditions are satisfied, add the pair to the pair_count list\n                    pair_count.append((arr[i],arr[j]))\n    return len(pair_count)"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1 \n    return count "
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = []\n    for char in word:\n        result.append(char)\n    return result"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into characters.\n\n    Args:\n        word (str): A string to split.\n\n    Returns:\n        list: A list of characters in the string.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = []\n    for char in word:\n        result.append(char)\n    return result"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and then convert each character to an integer\n    digits = [int(d) for d in str(n)]\n    # Initialize a variable to store the sum of the digits\n    total = 0\n    # Iterate over the digits and add each to the total\n    for digit in digits:\n        total += digit\n    # Return the sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Initialize the sum variable\n    sum_val = 0\n    # Loop through each character in the string\n    for char in num_str:\n        # Convert each character to an integer and add it to the sum\n        sum_val += int(char)\n    # Return the sum of the digits\n    return sum_val"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string and use the sum() function to add the digits\n    return sum(int(d) for d in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be non-negative\")\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    if n <= 1:\n        return True\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    '''\n    This function takes a list as input and returns True if the list is sorted in ascending order,\n    and False otherwise.\n    '''\n    if len(lst) == 0:\n        return True\n    elif lst[0] <= lst[1]:\n        for i in range(1, len(lst)-1):\n            if lst[i] < lst[i+1]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if list1[j] > list1[j+1]:\n                return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is empty\n    if len(list1) == 0:\n        return True\n    # check if the list has only one element\n    elif len(list1) == 1:\n        return True\n    # check if the list is already sorted\n    elif list1 == sorted(list1):\n        return True\n    # check if the list is not sorted\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    # Loop through each sublist in the input list\n    for sublist in list1:\n        # Sort the sublist using the sort() method\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Iterate through each sublist in the list\n    for sublist in list1:\n        # Sort the sublist using the built-in `sorted` function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # convert all lists to sets to remove duplicates\n    nums = set(tuple(num) for num in nums)\n    # convert the set back to a list and return it\n    return list(nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as input and returns a new list containing only the unique numbers from all the input lists.\n    '''\n    # create an empty list to store unique numbers\n    unique_nums = []\n\n    # iterate through each list in the input list\n    for lst in nums:\n        # iterate through each number in the current list\n        for num in lst:\n            # if the number is not already in the unique_nums list, add it to the list\n            if num not in unique_nums:\n                unique_nums.append(num)\n\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given list of numbers.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with duplicate numbers removed.\n    \"\"\"\n    unique_nums = set()  # create an empty set to store unique numbers\n    for num in nums:\n        unique_nums.add(num)  # add each number to the set\n    return list(unique_nums)  # convert the set back to a list and return it"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    :param nums: a list or tuple of lists\n    :return: a new list with only the unique numbers from the input lists\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n    # loop through each list and add each element to the set\n    for num_list in nums:\n        for num in num_list:\n            unique_set.add(num)\n    # convert the set back to a list and return\n    return list(unique_set)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    # Create a set of the unique numbers in the list\n    unique_nums = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_set = set(list_data)\n    unique_list = list(unique_set)\n    unique_product = 1\n    \n    for num in unique_list:\n        unique_product *= num\n    \n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    \n    product = 1\n    for num in unique_numbers:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data) # convert list to set to remove duplicates\n    product = 1 # initialize product to 1\n    \n    for num in unique_nums:\n        product *= num # multiply product by unique number\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set of unique numbers from the input list\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    unique_product = 1\n    for number in unique_numbers:\n        unique_product *= number\n\n    # Return the unique product\n    return unique_product\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of numbers as input and calculates the product of the unique numbers in the list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Define a set to hold the unique numbers in the list\n    unique_nums = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create a set to store unique numbers\n    unique_nums = set(list_data)\n    # Initialize a variable to store the product of the unique numbers\n    product = 1\n    # Loop through each unique number in the set\n    for num in unique_nums:\n        # Multiply the product by the unique number\n        product *= num\n    # Return the final product\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r**2 + 2*3.14*r + 2*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * pi * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265358979323846\n    return 2 * pi * r * h + 2 * pi * r ** 2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Compute the surface area of a cylinder using the formula:\n    # A = pi * r^2 * h\n    area = math.pi * r**2 * h\n    \n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    area = 2*3.14159*(r**2 + h**2)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * r * h + 2 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    \n    #Calculate the surface area of the cylinder using the formula:\n    #SA = 2*pi*r*h\n    \n    #Using the math module, we can easily calculate pi\n    import math\n    \n    #Calculate the value of pi\n    pi = math.pi\n    \n    #Calculate the surface area using the formula\n    SA = 2*pi*r*h\n    \n    #Return the surface area\n    return SA"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if B is sublist of A\n    if A.count(B[0]) >= B.count(B[0]) and all(i in A for i in B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    elif len(A) == len(B):\n        return A == B\n    else:\n        for i in range(len(A)-1):\n            if A[i] in B:\n                if B.index(A[i])+i == len(A)-1:\n                    return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n\n    # check if B is a sublist of A\n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n\n    # if B is not a sublist of A, return False\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n\n    # Check if A is sublist of B\n    if B in A:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    j=0\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if B is a sublist of A\n    if A[:len(B)] == B:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    for i in range(len(B)): \n        if B[i] in A: \n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not isinstance(A, list):\n        raise TypeError(\"A should be a list\")\n    elif not isinstance(B, list):\n        raise TypeError(\"B should be a list\")\n    \n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(B)):\n        if A == B[i:]:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if the length of A is greater than or equal to B's length\n    if len(A) < len(B):\n        return False\n\n    # Initialize two pointers i and j to 0\n    i, j = 0, 0\n\n    # Iterate through the elements of B\n    while j < len(B):\n        # If the current element of B matches with the element at index i of A, increment both i and j\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n\n        # If the current element of B does not match with the element at index i of A, move the pointer j to the next element\n        else:\n            j += 1\n            i = 0\n\n        # If the pointer i reaches the end of the A list, it means the B list is a sublist of A\n        if i == len(A):\n            return True\n\n    # If the loop ends without returning True, it means the B list is not a sublist of A\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #initialize factorial to 1\n    factorial = 1\n    #loop through each number from 1 to n\n    for i in range(1, n+1):\n        #multiply factorial by i\n        factorial *= i\n        #take last digit of factorial\n        last_digit = factorial % 10\n        #if last digit is 1, return the current number\n        if last_digit == 1:\n            return i\n    #if no 1 is found, return -1\n    return -1"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes an integer as input and returns the last digit of the factorial of that number. \n    For example, if n = 12, the function should return 1 because 1! = 120 and 120 = 12! = 1440 and the last digit is 0. \n    '''\n    \n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes a number as input and returns the last digit in its factorial.\n    '''\n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    temp = n\n    \n    while temp > 0:\n        factorial *= temp % 10\n        temp //= 10\n    \n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of its factorial.\n\n    Example:\n    last_Digit_Factorial(5) # Output: 5\n\n    \"\"\"\n    # Calculate the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Calculate the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    # convert the number to a string\n    str_num = str(n)\n    \n    # find the last digit of the string\n    last_digit = int(str_num[-1])\n    \n    # find the factorial of the number\n    factorial = 1\n    for i in range(1, last_digit+1):\n        factorial *= i\n    \n    # return the last digit of the factorial\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n    # Initialize the last digit to 0\n    last_digit = 0\n    # Loop through the number from the end to the beginning\n    for i in range(len(num_str)-1, -1, -1):\n        # Get the current digit\n        digit = int(num_str[i])\n        # Multiply the current digit with the last digit\n        last_digit *= digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    i = 0\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n        i += 1\n    while i < len(list1) and i < len(list2):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        i += 1\n    while i < len(list1):\n        flat_list.append(list1[i])\n        i += 1\n    while i < len(list2):\n        flat_list.append(list2[i])\n        i += 1\n    while i < len(list3):\n        flat_list.append(list3[i])\n        i += 1\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while i < len(list2):\n        result.append(list2[i])\n        i += 1\n    while i < len(list3):\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the final result\n    result = []\n    # Loop through each element of the first list\n    for element in list1:\n        # Append the element to the result list\n        result.append(element)\n        # Loop through each element of the second list\n        for element2 in list2:\n            # Append the element to the result list\n            result.append(element2)\n            # Loop through each element of the third list\n            for element3 in list3:\n                # Append the element to the result list\n                result.append(element3)\n    # Return the final result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Parameters:\n    list1 (list): first list to interleave\n    list2 (list): second list to interleave\n    list3 (list): third list to interleave\n\n    Returns:\n    list: a single list containing all elements of list1, list2, and list3 in the interleaved order.\n    \"\"\"\n    i, j, k = 0, 0, 0\n    result = []\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    This function takes in 3 lists of the same length and returns a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): First list to interleave.\n        list2 (list): Second list to interleave.\n        list3 (list): Third list to interleave.\n\n    Returns:\n        list: A single flat list containing all the elements of the input lists.\n    \"\"\"\n    # Initialize an empty list to hold the interleaved elements\n    result = []\n\n    # Use a nested loop to iterate through the input lists and add the elements to the result list\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    # If there are any remaining elements in any of the input lists, add them to the result list\n    for list_ in [list1, list2, list3]:\n        for i in range(len(list_), len(list1) + len(list2) + len(list3)):\n            result.append(list_[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Get the length of all three lists\n    n1 = len(list1)\n    n2 = len(list2)\n    n3 = len(list3)\n    # Check if the lists are of the same length\n    if n1!= n2 or n2!= n3 or n1!= n3:\n        print(\"Error: All lists must be of the same length.\")\n        return\n    \n    # Create a new empty list to store the interleaved elements\n    result = []\n    \n    # Loop through each element in the first list\n    for i in range(n1):\n        # Append the i-th element of list1\n        result.append(list1[i])\n        # Append the i-th element of list2\n        result.append(list2[i])\n        # Append the i-th element of list3\n        result.append(list3[i])\n        \n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff = set(test_tup1) ^ set(test_tup2)\n    return diff"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # create a set to store the dissimilar elements in both tuples\n    dissimilar_set = set()\n\n    # loop through each element in the first tuple\n    for item in test_tup1:\n        # if the element is not present in the second tuple, add it to the dissimilar set\n        if item not in test_tup2:\n            dissimilar_set.add(item)\n\n    # return the dissimilar set\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_set = set(test_tup1) - set(test_tup2)\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Convert the tuples to lists for easy comparison\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Loop through the lists and compare elements\n    dissimilar = []\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            dissimilar.append(list1[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_set = set()\n\n    # Loop through each element of the two tuples\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        # Check if the element is in the set of dissimilar elements\n        if elem1!= elem2 and (elem1, elem2) not in dissimilar_set:\n            # If the element is not in the set, add it to the set\n            dissimilar_set.add((elem1, elem2))\n\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Using the set() function to remove duplicate values from the tuples\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    # Finding the dissimilar elements by subtracting the two sets\n    dissimilar_set = test_tup1 - test_tup2\n    # Converting the set to a list and returning the list\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Create a set for the first tuple\n    set1 = set(test_tup1)\n    # Create a set for the second tuple\n    set2 = set(test_tup2)\n    # Find the elements in the first set but not in the second set\n    dissimilar_set = set1.symmetric_difference(set2)\n    # Return the dissimilar elements as a list\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    # iterate over each element of the first tuple\n    for element1 in test_tup1:\n        # check if the element is present in the second tuple\n        if element1 not in test_tup2:\n            dissimilar_elements.append(element1)\n    # return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_set = set(test_tup1).symmetric_difference(set(test_tup2))\n    return dissimilar_set"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # check if the input is a tuple\n    if isinstance(test_tuple, tuple):\n        # loop through the tuple and remove uneven elements using the even_fnc function\n        for i in range(len(test_tuple)):\n            if not even_fnc(test_tuple[i]):\n                del test_tuple[i]\n    # check if the input is a list\n    elif isinstance(test_tuple, list):\n        # loop through the list and remove uneven elements using the even_fnc function\n        for i in range(len(test_tuple)):\n            if not even_fnc(test_tuple[i]):\n                del test_tuple[i]\n    # if the input is neither a tuple nor a list, return an error message\n    else:\n        return 'Error: Input must be a tuple or a list.'\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for tup in test_tuple:\n        if all(even_fnc(i) for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    filtered_list = []\n    for i in test_tuple:\n        if isinstance(i, list):\n            for j in i:\n                if even_fnc(j):\n                    filtered_list.append(j)\n        elif even_fnc(i):\n            filtered_list.append(i)\n    return filtered_list\n\ndef even_fnc(num):\n    '''\n    Write a function to check if a number is even or odd.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for t in test_tuple:\n        if isinstance(t, tuple):\n            result.append(even_ele(t, even_fnc))\n        elif even_fnc(t):\n            result.append(t)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_list.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_list.append(i)\n        else:\n            continue\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for elem in test_tuple:\n        if type(elem)!= tuple:\n            if even_fnc(elem):\n                continue\n            else:\n                test_tuple.remove(elem)\n                print(f\"Removed {elem}\")\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Check if the input tuple is a list of tuples\n    if not isinstance(test_tuple, list) or not all(isinstance(sublist, tuple) for sublist in test_tuple):\n        raise TypeError('Input must be a list of tuples')\n\n    # Loop through each element in the list of tuples\n    for sublist in test_tuple:\n        # Check if all elements in the sublist are even\n        if not all(even_fnc(elem) for elem in sublist):\n            # If any odd element is found, remove it from the sublist\n            sublist = tuple(elem for elem in sublist if even_fnc(elem))\n\n    # Return the modified list of tuples\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == list:\n            even_ele(test_tuple[i], even_fnc)\n        elif type(test_tuple[i]) == tuple:\n            even_ele(test_tuple[i], even_fnc)\n        else:\n            if even_fnc(test_tuple[i]):\n                test_tuple = test_tuple[:i] + test_tuple[i+1:]\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create a list of nested tuples from the input test tuple\n    nested_tuples = [t for t in test_tuple]\n    # Flatten the nested tuples\n    flattened_tuple = [item for sublist in nested_tuples for item in sublist]\n    # Filter the flattened tuple to keep only even elements\n    even_elements = list(filter(even_fnc, flattened_tuple))\n    # Return the flattened and filtered tuple\n    return even_elements"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b**2) + 6*(b*s) + 2*(s**2)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 2 * (b * s + b * s + b * s + b * s)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Surface Area of a square pyramid\n    surface = 2 * b * s + 6 * b * b\n    print(\"Surface Area of the Pyramid is:\", surface)\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(base, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * base * height\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # calculate the total surface area of the pyramid\n    surface_area = 2*(b+s)*s + 2*(b+s)*b + 2*b*s + b*b\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b * s) + (2 * b * b) + (2 * b * s) + (s * s)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + 6*b + 6*s + 3*b*s**2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculating the total surface area\n    total_surface_area = ((b * s) + (b * s) + (b * s) + (b * s)) / 2\n\n    # Returning the surface area\n    return total_surface_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Dictionary is empty.\")\n    else:\n        print(\"Dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return num * catalan_number(num-1) // (num)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    # Initialize the array to store the terms of the series\n    catalan = [1]\n\n    # Calculate the terms of the series\n    for i in range(1, n+1):\n        # Calculate the sum of the first i terms of the series\n        sum_term = 0\n        for j in range(i+1):\n            sum_term += (2*j+1)/(j+1)**2\n        # Add the sum of the first i terms to the array\n        catalan.append(sum_term)\n\n    # Return the nth term of the series\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    Returns the nth Catalan number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)*catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_num = 0\n    for i in range(1, num+1):\n        catalan_num += (num+1)//i\n    return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Return the nth Catalan number.\n\n    The Catalan number is defined as follows:\n\n    C(n) = (2n)! / [(n+1)! * (n-1)!]\n\n    where n is an integer.\n\n    Args:\n    n (int): An integer n for which to calculate the Catalan number.\n\n    Returns:\n    catalan_number (int): The nth Catalan number.\n    \"\"\"\n\n    # Calculate (2n)! using the factorial function in Python\n    factorial2n = 1\n    for i in range(2, 2*n+1):\n        factorial2n *= i\n\n    # Calculate (n+1)! and (n-1)!, which are needed in the formula for C(n)\n    factorialnplus1 = 1\n    for i in range(n+1):\n        factorialnplus1 *= i\n    factorialnminus1 = 1\n    for i in range(n-1, 0, -1):\n        factorialnminus1 *= i\n\n    # Calculate C(n) using the formula\n    catalan_number = factorial2n / (factorialnplus1 * factorialnminus1)\n\n    return catalan_number"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Return the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n - 1) * catalan_number(n-1) / n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    catalan = [1]\n    for i in range(1, num+1):\n        catalan.append(4*i*catalan[i-1] - catalan[i-2])\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num + 1\n    catalan_numbers = [1]\n    for i in range(1, n):\n        catalan_numbers.append(0)\n        for j in range(i + 1):\n            catalan_numbers[i] += (j * (i - j + 1)) / (i + 1)\n    return catalan_numbers[n]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Compile a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = re.compile(r'\\bly\\b')\n    # Find all non-overlapping occurrences of the pattern in the given text\n    matches = pattern.finditer(text)\n    # Initialize an empty list to store the adverb positions and lengths\n    adverbs = []\n    # Iterate over all matches and extract the positions and lengths of the adverbs\n    for match in matches:\n        # Extract the position and length of the adverb\n        pos = match.start()\n        length = len(match.group())\n        # Add the position and length to the adverb list\n        adverbs.append((pos, length))\n    # Sort the adverb list by their position in the text\n    adverbs.sort(key=lambda x: x[0])\n    # Return the list of adverb positions and lengths\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n\n    return matches\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b(ly)\\b'\n    matches = re.finditer(pattern, text)\n    positions = [(match.start(), match.end()) for match in matches]\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern for finding adverbs ending with \"ly\"\n    pattern = r'(?<=\\b)(\\w*)ly\\b(?=\\b)'\n\n    # Find all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n\n    # Iterate over the matches and add their positions to the list\n    for match in matches:\n        adverb_positions.append(match.start())\n\n    # Return a tuple of the positions of the adverbs\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b\\w+\\s+[a-z]*ly\\b', text.lower())\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with 'ly'\n    pattern = r'\\b\\w+(ly)$\\b'\n\n    # Use re.findall() function to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the adverb positions\n    adverb_positions = []\n\n    # Iterate over the matches and append their positions to the list\n    for match in matches:\n        start_index = text.index(match[0])\n        end_index = start_index + len(match[0])\n        adverb_positions.append((start_index, end_index))\n\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    \n    # Find all occurrences of the pattern in the given text using re.findall()\n    matches = re.findall(pattern, text)\n    \n    # If no matches are found, return an empty list\n    if not matches:\n        return []\n    \n    # Otherwise, return a list of tuples, where each tuple contains the matched adverb and its position in the text\n    return [(match, text.index(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all adverbs ending with \"ly\"\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n    \n    # Sort the adverbs by position in the text\n    adverbs.sort(key=lambda x: text.find(x))\n    \n    # Print the adverbs and their positions in the text\n    for i, adverb in enumerate(adverbs, start=1):\n        print(f'{i}. {adverb}')\n        print(f'  Position in the text: {text.find(adverb)}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+\\s+(?:ly)$'\n    matches = re.findall(pattern, text)\n    for i, match in enumerate(matches):\n        # extract the adverb and its position\n        adverb = match.split()[0]\n        position = match.split()[1]\n        # print the adverb and its position\n        print(f'Adverb \"{adverb}\" found at position {position}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function finds the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b(ly|ing|ed|ing)$'\n\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Create a list of tuples containing the adverb and its positions in the text\n    adverbs = [(match, text.find(match)) for match in matches]\n\n    # Return the list of adverb-position tuples\n    return adverbs"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a list of items and a number n, find the n most expensive items in the dataset.\n    \"\"\"\n    # Create a max-heap to store the n most expensive items\n    max_heap = []\n\n    # Iterate through the list of items\n    for item in items:\n        # Add the item to the max-heap if its value is greater than the minimum value in the heap (if any)\n        if not max_heap or item > max_heap[0]:\n            heapq.heappush(max_heap, item)\n        # If the heap is full, remove the minimum value (which is now not the item we just added)\n        elif len(max_heap) == n:\n            heapq.heappop(max_heap)\n\n    # Return the n most expensive items in the dataset\n    return max_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of n items\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, items[i])\n    # Extract the n most expensive items from the heap and add them to a new list\n    result = []\n    while len(min_heap) > 0:\n        result.append(heapq.heappop(min_heap))\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items.\n    '''\n    \n    # Sort the items in descending order based on their prices\n    items.sort(key=lambda x: x[1], reverse=True)\n    \n    # Initialize an empty list to store the n most expensive items\n    n_most_expensive_items = []\n    \n    # Add the first n items to the n_most_expensive_items list\n    for i in range(n):\n        n_most_expensive_items.append(items[i][0])\n    \n    return n_most_expensive_items"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function finds the n most expensive items in a given dataset.\n    \"\"\"\n    # Convert the items list to a set to remove duplicates\n    items_set = set(items)\n    \n    # Create a min-heap of the most expensive n items\n    max_heap = []\n    for item in items_set:\n        heapq.heappush(max_heap, item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    \n    # Return the min-heap as a list of the n most expensive items\n    return [heapq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert the list of items to a min heap of tuples containing the item and its price\n    heap = []\n    for item, price in items:\n        heapq.heappush(heap, (-price, item))\n    \n    # Extract the n most expensive items from the heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n\n    Input:\n    - items: a list of items (tuples) representing the price and weight of each item.\n    - n: the number of most expensive items to find.\n\n    Output:\n    - A list of n tuples, where each tuple contains the item and its price.\n    '''\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x[0], reverse=True)\n\n    # Initialize an empty list to store the n most expensive items\n    n_most_expensive = []\n\n    # Add the first n items to the n_most_expensive list\n    for i in range(n):\n        heapq.heappush(n_most_expensive, sorted_items[i])\n\n    # Remove the items with the highest prices from the sorted_items list\n    for i in range(n):\n        heapq.heappop(n_most_expensive)\n\n    return n_most_expensive"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    \n    # heapify the items based on their prices\n    heapq.heapify(heap)\n    for item in items:\n        price = item[1]\n        heapq.heappush(heap, (-price, item))\n        \n        if len(heap) > n:\n            # remove the item with the lowest price from the heap\n            heapq.heappop(heap)\n    \n    # extract the n most expensive items from the heap\n    result = []\n    while len(heap) > 0:\n        price, item = heapq.heappop(heap)\n        result.append(item)\n    \n    return result[::-1]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n\n    Parameters:\n    items (list): List of items in the dataset\n    n (int): The number of items to be returned\n\n    Returns:\n    A list of the n most expensive items in the dataset\n    \"\"\"\n\n    # Initialize a min-heap with a maximum size of n\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Convert the min-heap to a list and return it\n    return [-x for x in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to store the n most expensive items\n    heap = []\n    # Use a dictionary to store the price of each item\n    prices = {}\n\n    # Iterate through the items\n    for item in items:\n        # If the item is not in the prices dictionary, add it and set its price to 0\n        if item not in prices:\n            prices[item] = 0\n        # If the item is already in the prices dictionary, update its price\n        else:\n            prices[item] += 1\n        # If the heap is empty or the current item is less expensive than the smallest item in the heap, add it to the heap\n        if len(heap) < n or prices[item] < heap[0][1]:\n            heapq.heappush(heap, (prices[item], item))\n        # If the heap is not empty and the current item is equal to or more expensive than the smallest item in the heap, pop the smallest item and add the current item to the heap\n        else:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (prices[item], item))\n\n    # Extract the n most expensive items from the heap\n    result = []\n    while len(heap) > 0:\n        result.append(heap[0][1])\n        heapq.heappop(heap)\n\n    return result[::-1]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    # Use a max heap to keep track of the n most expensive items\n    max_heap = []\n    for item in items:\n        # Add the item to the max heap if it's cheaper than the smallest item in the heap\n        if len(max_heap) < n or item > heapq.heappop(max_heap):\n            heapq.heappush(max_heap, item)\n        # If the heap is full, remove the smallest item and add the new item\n        if len(max_heap) == n:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, item)\n    return max_heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if isinstance(l, list):\n        if n <= len(l):\n            return l[n:] + l[:n]\n        else:\n            return l\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    for i in range(n):\n        new_list.append(l[i])\n    new_list.extend(l[n:])\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Get the length of the list\n    length = len(l)\n    # Check if the index is valid\n    if n < 0 or n > length:\n        print(\"Invalid index\")\n        return None\n    # Split the list at the index\n    first_part = l[:n]\n    second_part = l[n:]\n    # Concatenate the two parts and return the result\n    result = first_part + second_part\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if n is a valid index for the list\n    if n >= len(l):\n        raise ValueError(\"Index out of range\")\n    # split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # add the first part to the end of the second part\n    new_list = second_part + first_part\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    mid = n // 2\n    return l[:mid] + l[mid:] + [l[n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    # split the list at the nth element\n    split_at = l[:n]\n\n    # add the first part of the list to the end\n    result = split_at + l[n:]\n\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    split_list = l[:n]\n    # Add the first part to the end of the list\n    l.extend(split_list)\n    # Return the modified list\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    for i in range(n):\n        new_list.append(l[i])\n    new_list.append(l[n])\n    new_list.extend(l[n+1:])\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at nth element\n    l1 = l[:n]\n    l2 = l[n:]\n    \n    # Add first part to end of l2\n    l = l2 + l1\n    \n    return l"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Converts a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list as input and converts it to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = tuple(listx)\n    return tuple_list"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # create an empty tuple\n    new_list = ()\n    # loop through each element of the list\n    for i in listx:\n        # add the element to the new tuple\n        new_list += (i,)\n    # return the new tuple\n    return new_list"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    diff = max_val - min_val\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        diff = max_num - min_num\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    \"\"\"\n    if len(nums) == 0:\n        return \"The list is empty.\"\n    else:\n        min_val = nums[0]\n        max_val = nums[0]\n        for num in nums:\n            if num < min_val:\n                min_val = num\n            elif num > max_val:\n                max_val = num\n        return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"Empty list\"\n    else:\n        min_val = nums[0]\n        max_val = nums[0]\n        for num in nums:\n            if num < min_val:\n                min_val = num\n            elif num > max_val:\n                max_val = num\n        return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"The list should have at least two elements.\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        diff = max_num - min_num\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables to store largest and smallest values\n    max_val = float('-inf')\n    min_val = float('inf')\n    \n    # loop through the list and update the max and min values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    \n    # calculate the difference between max and min values\n    diff = max_val - min_val\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the maximum value in the list\n    max_num = max(nums)\n    # Find the minimum value in the list\n    min_num = min(nums)\n    # Calculate the difference between the maximum and minimum values\n    diff = max_num - min_num\n    # Return the difference\n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize variables\n    square_sum = 0\n    # Check for negative numbers\n    if a < 0 or b < 0:\n        print(\"Error: Cannot find perfect squares between negative numbers.\")\n        return\n    # Check if a or b are equal to 0\n    elif a == 0 or b == 0:\n        print(\"Error: Cannot find perfect squares for numbers equal to 0.\")\n        return\n    # Loop through the range of numbers between a and b\n    for i in range(int(a), int(b)+1):\n        # Check if i is a perfect square\n        square = i*i\n        # If it is, add it to the square_sum\n        if square == i:\n            square_sum += i\n    # Print the square_sum\n    print(\"The sum of perfect squares between\", a, \"and\", b, \"is:\", square_sum)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store the perfect squares\n    perfect_squares = []\n    \n    # Loop through all integers between a and b (inclusive)\n    for i in range(a, b + 1):\n        # Check if the square of the current integer is equal to the current integer\n        if i**2 == i:\n            # If it is, add it to the list of perfect squares\n            perfect_squares.append(i)\n    \n    # Return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Find all perfect squares between a and b\n    perfect_squares = set()\n    for i in range(a, b+1):\n        for j in range(i, b+1):\n            if i*i == j*j:\n                perfect_squares.add(j)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i * i\n        if square == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        # check if the square root of the number is an integer\n        if int(i**0.5) == i**0.5:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through a range of numbers between a and b\n    for i in range(a, b+1):\n        # check if the square root of the current number is an integer\n        if int(i**0.5) == i**0.5:\n            # if it is, print the number\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create a list of all the integers from a to b\n    nums = list(range(a, b+1))\n    # Create an empty list to store the perfect squares\n    squares = []\n    \n    # Iterate over each number in the list\n    for num in nums:\n        # Check if the number is a perfect square\n        square = num ** 0.5\n        if int(square) ** 2 == num:\n            squares.append(square)\n    \n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        j = i*i\n        if j == i and i < b:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Find the number of perfect squares between two given numbers.\n    \"\"\"\n    # initialize counters\n    count_a = count_b = 0\n    # iterate over the range of a and b\n    for i in range(int(a ** 0.5) + 1, b + 1):\n        # check if i is a perfect square\n        if i * i == a:\n            count_a += 1\n        elif i * i == b:\n            count_b += 1\n    # return the count of perfect squares between a and b\n    return count_a, count_b"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Loop through the range of numbers between a and b\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        if i*i == a or i*i == b:\n            # If it is, print it\n            print(i)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    if r == 0:\n        return 0,0\n    else:\n        return r * cmath.cos(theta), r * cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    return r * cmath.cos(theta), r * cmath.sin(theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # convert polar coordinates to Cartesian coordinates\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    # convert the angle to degrees and radians\n    theta_deg = (theta/cmath.pi)*180\n    theta_rad = theta\n    \n    # convert the Cartesian coordinates to rectangular coordinates\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    \n    # print the results\n    print(\"Polar coordinates:\", x, y, \"theta (deg):\", theta_deg, \"theta (rad):\", theta_rad)\n    print(\"Rectangular coordinates:\", x_rect, y_rect)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert radians to degrees\n    theta = theta * 180 / cmath.pi\n    \n    # Calculate x and y\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert to complex number\n    z = r * cmath.exp(1j * theta)\n    # Convert to rectangular coordinates\n    x = z.real\n    y = z.imag\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(phi)\n    y = r*cmath.sin(phi)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function converts polar coordinates to rectangular coordinates.\n    \n    Args:\n        r (float): The magnitude of the complex number.\n        theta (float): The phase of the complex number in radians.\n    \n    Returns:\n        tuple: The rectangular coordinates (x, y) of the complex number.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1: \n        newList[0], newList[-1] = newList[-1], newList[0]\n    else: \n        return \"List must have at least two elements.\"\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # If the length of the list is greater than 1, swap the first and last elements\n    if length > 1:\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the input list is valid\n    if len(newList)!= 0:\n        # Get the length of the list\n        n = len(newList)\n        # Get the first and last elements\n        first = newList[0]\n        last = newList[n-1]\n        # Interchange the first and last elements\n        newList[0] = last\n        newList[n-1] = first\n    else:\n        # The input list is empty\n        pass\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # get the length of the list\n    length = len(newList)\n    # check if the length is less than 2\n    if length < 2:\n        return \"The list must have at least 2 elements.\"\n    # interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    # return the new list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n\n    # If the list has less than two elements, return the original list as it is.\n    if length < 2:\n        return newList\n\n    # Swap the first and last elements of the list using list slicing\n    newList = newList[1:-1] + [newList[0], newList[-1]]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if n < k:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize variables\n    coeff = 1 # initialize the first coefficient to 1\n    sum_coeff = 0 # initialize the sum of coefficients to 0\n    # Loop through all values of k from 1 to n\n    for i in range(1,n+1):\n        # Calculate the coefficient for k and n-i+1\n        temp_coeff = (n-i+1)*coeff\n        # Add the coefficient to the sum of coefficients\n        sum_coeff += temp_coeff\n        # Update the coefficient for the next iteration\n        coeff *= (n-i+1)\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # calculate the binomial coefficient recursively\n    def binomial(n,k): \n        if k == 0 or k == n: \n            return 1 \n        else: \n            return n * binomial(n-1,k-1)\n    \n    # sum of product of consecutive binomial co-efficients\n    return binomial(n,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum of binomial coefficients to zero\n    sum_coeff = 0\n\n    # Initialize the first binomial coefficient to 1\n    coeff = 1\n\n    # Loop through the range of k values from 1 to n\n    for i in range(k, n+1):\n        # Multiply the current binomial coefficient by the (n-i+1)th binomial coefficient\n        coeff *= (n-i+1)\n\n        # Add the current binomial coefficient to the sum\n        sum_coeff += coeff\n\n    # Return the sum of the binomial coefficients\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Find the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    - n: integer, the number of terms in the sequence\n    - k: integer, the number of terms in the sequence\n\n    Returns:\n    - integer, the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return n * binomial_Coeff(n - 1, k - 1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        for j in range(1,min(i,k)+1):\n            if i < j:\n                break\n            sum += i*j\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    coeff = 1\n    for i in range(k, n+1):\n        coeff = (coeff * i) // (i - k + 1)\n    return coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 0 or k < 0 or k > n: \n        return 0\n    elif k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize variables\n    binomial_coeff = 1\n    prev_binomial_coeff = 1\n\n    # Calculate binomial coefficient for k\n    for i in range(1,k+1):\n        binomial_coeff *= n\n        binomial_coeff //= i\n\n    # Calculate sum of the product of consecutive binomial co-efficients\n    sum_product = 0\n    for i in range(k+1):\n        sum_product += binomial_coeff * prev_binomial_coeff\n        prev_binomial_coeff *= (n-i)\n\n    return sum_product"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+\\.0+\\.\\d+\\.\\d+$', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.0+\\.\\d+$', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.0+$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # define regex pattern to match ip address with optional zeros\n    pattern = r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}'\n    # use re.match() to match pattern to ip address\n    match = re.match(pattern, ip)\n    # if match is not None, remove leading zeroes from the ip address\n    if match:\n        return ip[match.span()[1]:]\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function takes an IP address as a string and removes any leading zeroes from it.\n    '''\n\n    # Regular expression pattern to match IP addresses\n    pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n\n    # Check if the input is a valid IP address\n    if re.match(pattern, ip):\n        # Split the IP address into its four segments\n        segments = ip.split('.')\n\n        # Loop through each segment and remove any leading zeroes\n        for i, segment in enumerate(segments):\n            while segment.startswith('0'):\n                segments[i] = segment[1:]\n\n        # Join the segments back together and return the result\n        return '.'.join(segments)\n    else:\n        # Raise a ValueError if the input is not a valid IP address\n        raise ValueError('Invalid input: {}'.format(ip))"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # regular expression to match ip addresses\n    pattern = r'^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$'\n    # regular expression to match leading zeroes\n    pattern2 = r'^0+(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$'\n    # regular expression to match trailing zeroes\n    pattern3 = r'^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})0+$'\n    # regular expression to match both leading and trailing zeroes\n    pattern4 = r'^0+(\\d{1,3})\\.0+(\\d{1,3})\\.0+(\\d{1,3})\\.0+(\\d{1,3})$'\n    # check if the ip address matches any of the patterns\n    if re.match(pattern, ip):\n        # remove leading zeroes\n        ip = re.sub(pattern2, r'\\1.\\2.\\3.\\4', ip)\n        # remove trailing zeroes\n        ip = re.sub(pattern3, r'\\1.\\2.\\3.', ip)\n        # remove both leading and trailing zeroes\n        ip = re.sub(pattern4, r'\\4', ip)\n        return ip\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+(\\d+\\.\\d+){3}', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeros from the ip address\n    ip = re.sub(r'^0+', '', ip)\n    # split the ip address into octets\n    octets = ip.split('.')\n    # convert each octet to an integer and remove leading zeros\n    for i, octet in enumerate(octets):\n        octets[i] = re.sub(r'^0+', '', octet)\n    # join the octets back into an ip address\n    ip = '.'.join(octets)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d*[.]', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num - num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = odd_num - num\n    \n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                break\n        else:\n            if odd is None:\n                odd = num\n            else:\n                break\n    \n    if even is None or odd is None:\n        return None\n    \n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0 and i == 0:\n            return list1[i] - list1[0]\n        elif list1[i] % 2!= 0 and i == 0:\n            return list1[i] - list1[0]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    \n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count == 1 and odd_count == 1:\n            return num - (2 * num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Find the even and odd numbers of the given list\n    even_num = list1[0]\n    odd_num = list1[1]\n\n    # Find the sum of the even and odd numbers\n    sum_num = even_num + odd_num\n\n    # Calculate the difference between the even and odd numbers\n    diff_num = sum_num - even_num - odd_num\n\n    # Return the difference\n    return diff_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2!= 0]\n    if len(even) == 0 or len(odd) == 0:\n        return \"The list does not have at least one even or odd number.\"\n    else:\n        return abs(even[0] - odd[0])"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Initialize variables\n    even = 0\n    odd = 0\n    diff = 0\n\n    # Iterate through the list\n    for i in range(len(list1)):\n        # Check if the current element is even or odd\n        if list1[i] % 2 == 0:\n            even += list1[i]\n        else:\n            odd += list1[i]\n\n    # Calculate the difference\n    diff = even - odd\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n    \n    return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Check if the list is not empty\n    if not list1:\n        print(\"List is empty\")\n        return\n    \n    # Find the first even number\n    even_index = -1\n    for i, num in enumerate(list1):\n        if num % 2 == 0:\n            even_index = i\n            break\n    \n    # Find the first odd number\n    odd_index = -1\n    for i, num in enumerate(list1):\n        if num % 2!= 0:\n            odd_index = i\n            break\n    \n    # Check if both even and odd numbers are found\n    if even_index == -1 or odd_index == -1:\n        print(\"Both even and odd numbers are not found in the list\")\n        return\n    \n    # Find the difference between the even and odd numbers\n    diff = list1[even_index] - list1[odd_index]\n    \n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize variables for count of swaps and swap count\n    count = 0\n    swap_count = 0\n\n    # loop through each bit in the binary strings\n    for i in range(len(str1)):\n        # if bits are not equal, add a swap\n        if num1 & 1 == num2 & 1:\n            count += 1\n            swap_count += 1\n        else:\n            count += 1\n\n        # shift one bit to the left\n        num1 >>= 1\n        num2 >>= 1\n\n    # return the minimum number of swaps\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize two empty lists to store the binary digits of the input strings\n    binary1 = []\n    binary2 = []\n\n    # Iterate through the input strings and append the binary digits to the corresponding list\n    for digit in str1:\n        binary1.append(int(digit))\n    for digit in str2:\n        binary2.append(int(digit))\n\n    # Create a dictionary to store the count of each binary digit in the input strings\n    counts = {}\n\n    # Iterate through the binary digits of both input strings and update the counts dictionary\n    for digit in binary1:\n        if digit in counts:\n            counts[digit] += 1\n        else:\n            counts[digit] = 1\n    for digit in binary2:\n        if digit in counts:\n            counts[digit] += 1\n        else:\n            counts[digit] = 1\n\n    # Initialize a dictionary to store the count of each binary digit in the output strings\n    counts_new = {}\n\n    # Iterate through the binary digits of both input strings and update the counts dictionary\n    for digit in binary1:\n        if digit in counts_new:\n            counts_new[digit] += 1\n        else:\n            counts_new[digit] = 1\n    for digit in binary2:\n        if digit in counts_new:\n            counts_new[digit] += 1\n        else:\n            counts_new[digit] = 1\n\n    # Calculate the difference between the counts of the input and output digits\n    diff_count = 0\n    for key in counts:\n        diff_count += abs(counts[key] - counts_new[key])\n\n    # Calculate the minimum number of swaps required to convert the input digits to the output digits\n    min_swaps = 0\n    for key in counts:\n        if counts[key] > counts_new[key]:\n            min_swaps += counts_new[key] - counts[key]\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2): \n    n = len(str1) \n    m = len(str2) \n    dp = [[0] * m for _ in range(n+1)] \n\n    # Base case 0 and 1 \n    for i in range(1, n+1): \n        dp[i][0] = i \n        dp[0][i] = i \n\n    # Minimum swaps using least significant bit \n    for i in range(1, n+1): \n        least_significant_bit = i // 2 \n        for j in range(1, m+1): \n            dp[i][j] = min(dp[i][j], dp[i-1][j] + dp[least_significant_bit][j-1]) \n            dp[i][j] = min(dp[i][j], dp[i][j-1] + dp[i-1][least_significant_bit]) \n            dp[i][j] = min(dp[i][j], dp[i-1][j-1] + dp[least_significant_bit-1][least_significant_bit]) \n            dp[i][j] = min(dp[i][j], dp[i-1][j] + dp[i-1][j-1] + dp[least_significant_bit-1][least_significant_bit]) \n\n    # Combine minimum swaps for each half of the strings \n    min_swaps = dp[n][m] \n    for i in range(n//2, 0, -1): \n        min_swaps = min(min_swaps, dp[i][m]) \n    for j in range(m//2, 0, -1): \n        min_swaps = min(min_swaps, dp[n][j]) \n\n    return min_swaps "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    if len(str1)!= len(str2) : \n        print(\"Both strings should have same length\")\n        return \n\n    n = len(str1) \n\n    # Create a 2D array to store the number of swaps required for each binary number\n    arr = [[0 for j in range(2)] for i in range(n+1)] \n\n    # Fill the array with the required number of swaps\n    for i in range(n) : \n        if str1[i] == '1' and str2[i] == '0' : \n            arr[i+1][0] = min(arr[i][0], arr[i+1][1]) + 1\n        elif str1[i] == '0' and str2[i] == '1' : \n            arr[i+1][1] = min(arr[i][0], arr[i+1][1]) + 1\n        else : \n            arr[i+1][0] = arr[i+1][1] = 0 \n\n    # Calculate the minimum number of swaps required\n    return arr[n][0] + arr[n][1]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the binary strings to integer representations\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Initialize variables for the number of swaps and the number of bits in the binary strings\n    swaps = 0\n    bit_length1 = len(bin(num1)[2:])\n    bit_length2 = len(bin(num2)[2:])\n    \n    # Compare the lengths of the binary strings and determine the minimum number of swaps required\n    if bit_length1 > bit_length2:\n        for i in range(bit_length1 - bit_length2):\n            swaps += 1\n    else:\n        for i in range(bit_length2 - bit_length1):\n            swaps += 1\n            \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize a dictionary to store the frequency of each binary digit\n    freq = {'0': 0, '1': 0}\n    for i in range(len(str1)):\n        freq[str1[i]] += 1\n    \n    # Initialize variables to keep track of swaps required and count of swaps made\n    swaps = 0\n    count = 0\n    \n    # Iterate through each character in str2\n    for i in range(len(str2)):\n        # Check if the frequency of the current character in str1 is less than the frequency of the character in str2\n        if freq[str2[i]] < freq[str1[i]]:\n            # If it is, then we have found a swap\n            swaps += 1\n            \n            # Check if the character is already in the first string\n            if str1.count(str2[i]) == 1:\n                # If it is, then we need to insert the second character to get a higher frequency for the first character\n                count += 1\n    \n    # Return the minimum number of swaps required to convert one binary number to another\n    return min(swaps, count)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # create a dictionary to store count of each digit in the binary strings\n    digit_count = {}\n    for digit in str1 + str2:\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n\n    # iterate through all possible swaps\n    min_swaps = float('inf')\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i] == str2[j]:\n                # check if swapping the i-th digit with j-th digit will lead to a smaller number\n                new_str1 = str1[:i] + str2[j] + str1[i+1:]\n                new_str2 = str2[:j] + str1[i] + str2[j+1:]\n                num_diff = abs(num1 - num2)\n                new_num1 = int(new_str1, 2)\n                new_num2 = int(new_str2, 2)\n                if new_num1 <= new_num2 and new_num2 <= num_diff:\n                    min_swaps = min(min_swaps, digit_count[str1[i]] + digit_count[str2[j]])\n                else:\n                    min_swaps = min(min_swaps, digit_count[str1[i]] + digit_count[str2[j]] + 1)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    n1, n2 = len(str1), len(str2)\n    dp = [[0] * n2 for _ in range(n1 + 1)]\n\n    for i in range(n1 + 1):\n        for j in range(n2):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i - 1] == '0' and str2[j] == '0':\n                dp[i][j] = dp[i - 1][j - 1]\n            elif str1[i - 1] == '0' and str2[j] == '1':\n                dp[i][j] = dp[i - 1][j]\n            elif str1[i - 1] == '1' and str2[j] == '0':\n                dp[i][j] = dp[i - 1][j] + 1\n\n    return dp[n1][n2]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    m = len(str2)\n\n    # create a 2D array to store the minimum number of swaps required to convert each pair of strings\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    # initialize the first row and column\n    for j in range(m + 1):\n        dp[0][j] = j\n\n    for i in range(n + 1):\n        dp[i][0] = i\n\n    # fill in the rest of the array\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n\n    return dp[n][m]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    # Check if the strings are of equal length\n    if len(str1)!= len(str2):\n        return \"Strings are not of equal length.\"\n\n    # Initialize variables for storing the number of swaps and the swapped numbers\n    swapCount = 0\n    swapArr = []\n\n    # Iterate through the strings\n    for i in range(len(str1)):\n        # If the characters are not equal, swap them\n        if str1[i]!= str2[i]:\n            # Check if the number of swaps required to convert str1[i] to str2[i] is smaller than the current minimum number of swaps\n            if (2 - int(str1[i]))!= (2 - int(str2[i])):\n                swapCount += 1\n                swapArr.append((2 - int(str1[i])), (2 - int(str2[i])))\n\n    # Return the minimum number of swaps required to convert str1 to str2\n    return swapCount"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # initialize the size variable\n    size = 0\n    # iterate over the tuple elements\n    for element in tuple_list:\n        # get the size of the element\n        element_size = sys.getsizeof(element)\n        # add the size to the size variable\n        size += element_size\n    # return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size of each element in the tuple\n    size_list = [sys.getsizeof(x) for x in tuple_list]\n    # Calculate the total size of the tuple\n    total_size = sum(size_list)\n    # Return the total size of the tuple\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # converting the tuple to bytes\n    data = bytearray(tuple_list)\n    # getting the size of the tuple\n    size = len(data)\n    # converting the size to bytes\n    size_bytes = size.to_bytes(4, byteorder='big')\n    # appending the size to the bytearray\n    data.extend(size_bytes)\n    # converting the bytearray back to a tuple\n    return tuple(data)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.getsizeof(tuple_list)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    low, high = 0, len(arr2)\n\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr1[mid] < arr2[k-mid-1]:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return arr2[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] <= arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n                j += 1\n\n    if i < n1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    # Initialize two pointers i and j to the start of the two arrays\n    i, j = 0, 0\n    \n    # Initialize the variable kth to 0\n    kth = 0\n    \n    # Compare the first element of both arrays\n    if arr1[i] < arr2[j]:\n        # If arr1[i] is smaller, increment the pointer i\n        i += 1\n    else:\n        # If arr2[j] is smaller, increment the pointer j\n        j += 1\n    \n    # Check if kth element is already in the first array\n    if kth == k - 1:\n        return arr1[kth]\n    \n    # Move the pointers to find the kth element in the first array\n    while i < len(arr1) and kth < k:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        \n        if kth == k - 1:\n            return arr1[kth]\n        \n        kth += 1\n    \n    # If kth element is not in the first array, move the pointers to find it in the second array\n    i, j = 0, 0\n    while j < len(arr2) and kth < k:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        \n        if kth == k - 1:\n            return arr2[kth]\n        \n        kth += 1\n    \n    # If kth element is not in the second array, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    # If k is greater than the length of arr1, return the remaining elements of arr1\n    if k > 0:\n        return arr1[i:]\n    # If k is greater than the length of arr2, return the remaining elements of arr2\n    elif k < 0:\n        return arr2[j:]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n    if k == 1:\n        if i < len(arr1):\n            return arr1[i]\n        else:\n            return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n\n    :param arr1: The first sorted array.\n    :param arr2: The second sorted array.\n    :param k: The value of k.\n    :return: The kth element from the given two sorted arrays.\n    \"\"\"\n    # initialize two pointers, one for each array\n    i, j = 0, 0\n\n    # keep track of the current position of the pointers\n    current_pos = 0\n\n    # loop until the current position is less than k\n    while current_pos < k:\n        # check if the element at the current position of the first array is less than the element at the current position of the second array\n        if arr1[i] < arr2[j]:\n            # increment the pointer for the first array\n            i += 1\n        elif arr1[i] > arr2[j]:\n            # increment the pointer for the second array\n            j += 1\n        else:\n            # if the elements are equal, increment both pointers and move to the next position\n            i += 1\n            j += 1\n            current_pos += 1\n\n    # if the current position is equal to k, return the element at that position\n    if current_pos == k:\n        return arr1[i - 1]\n\n    # otherwise, return None because there is no such element\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    armstrong_sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        armstrong_sum += digit ** 3\n        temp //= 10\n    if n == armstrong_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number into a string\n    num_str = str(number)\n    # create a list of digits in the number\n    digits = [int(digit) for digit in num_str]\n    # calculate the sum of the digits raised to the power of the length of the digits list\n    sum_of_digits = sum([digit ** len(digits) for digit in digits])\n    # check if the sum of digits is equal to the original number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if len(str(number)) == 1:\n        return True\n\n    sum = 0\n    num = number\n\n    while num > 0:\n        digit = num % 10\n        sum += digit ** len(str(number))\n        num //= 10\n\n    return number == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(num):\n    num = str(num)\n    power = len(num)\n    sum = 0\n    for digit in num:\n        sum += int(digit) ** power\n    return sum == num\n\ndef armstrong_number(number):\n    if number < 10:\n        return False\n    for i in range(1, int(number**0.5)+1):\n        if number % i == 0:\n            if number // i == i:\n                continue\n            if number // i!= i:\n                return False\n    return is_armstrong(number)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(num):\n    # convert the number to a string\n    num_str = str(num)\n    # calculate the sum of the cubes of the digits\n    sum_of_cubes = sum([int(digit)**3 for digit in num_str])\n    # check if the sum is equal to the original number\n    if sum_of_cubes == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string and remove any leading zeros\n    number_str = str(number).lstrip('0')\n    # Calculate the sum of the cube of each digit in the number\n    armstrong_sum = sum([int(digit) ** 3 for digit in number_str])\n    # Check if the sum of the cube of each digit is equal to the original number\n    return armstrong_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong_number(num):\n    \"\"\"\n    This function returns True if a given number is an Armstrong number, and False otherwise.\n    \"\"\"\n    num = str(num)\n    num_length = len(num)\n    sum_of_squares = 0\n    \n    for i in range(num_length):\n        square = int(num[i]) ** num_length\n        sum_of_squares += square\n        \n    if num == str(sum_of_squares):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n\n    # convert the number to a string and reverse it\n    reverse_number = str(number)[::-1]\n\n    # calculate the sum of the power of each digit in the number\n    sum_of_power = 0\n    for digit in str(number):\n        sum_of_power += int(digit) ** len(str(number))\n\n    # compare the two numbers and return True if they are equal, False otherwise\n    return sum_of_power == int(reverse_number)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(num):\n    '''\n    Function to check whether a given number is Armstrong or not.\n    '''\n    num_str = str(num)\n    total = 0\n    power = len(num_str)\n    for i in num_str:\n        total += int(i)**power\n    return total == num"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong_number(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is an Armstrong number, False otherwise.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    num_str = str(num)\n    num_digits = len(num_str)\n    sum_of_digits = 0\n    power = 1\n    \n    for digit in num_str:\n        digit = int(digit)\n        sum_of_digits += digit ** power\n        power += 1\n    \n    if sum_of_digits == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number <= 0:\n        print(\"Error: Number must be a positive integer.\")\n        return\n    \n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    \n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_list = []\n    for i in range(1, number+1):\n        sum_list.append(i)\n    return sum(sum_list), sum(sum_list)/len(sum_list)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find the sum and average of the first n natural numbers.\n    \"\"\"\n    # initialize sum and count to 0\n    sum = count = 0\n    \n    # loop through the first n numbers\n    for i in range(1, n+1):\n        # add the current number to the sum\n        sum += i\n        \n        # increment the count\n        count += 1\n        \n    # calculate the average and return as a tuple\n    average = sum / count\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns a tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_numbers += i\n    \n    average = sum_of_numbers/n\n    \n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    print(\"Sum of first\", number, \"natural numbers is:\", sum)\n    print(\"Average of first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # loop through first n natural numbers\n    for i in range(number):\n        # add i to sum and increment count\n        sum += i\n        count += 1\n\n    # calculate and return average\n    if count > 0:\n        return sum / count\n    else:\n        return None"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Initialize variables\n    sum = 0\n    count = 0\n    average = 0\n    \n    # Calculate sum and count of the first n natural numbers\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    \n    # Calculate average\n    average = sum / count\n    \n    # Return the results\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    \n    # calculate sum of first n natural numbers\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n        \n    # calculate average\n    average = sum / count\n    \n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer n and returns True if n is even, else False.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    return (n % 2 == 0)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n): \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n): \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == str1.count(char):\n            return char\n    \n    return 'There is no repeated character in the given string'"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    \n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize a dictionary to store the character counts\n    char_count = {}\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # if it is, increment the count by 1\n            char_count[char] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            char_count[char] = 1\n    \n    # find the first character with a count greater than 1\n    for char, count in char_count.items():\n        if count > 1:\n            # if the character has a count greater than 1, return its value\n            return char\n    \n    # if no character with a count greater than 1 is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_set = {}\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set[char] = True"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function finds the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char\n    \n    # If no repeated character found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 2:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string and returns the first repeated character in it.\n    If there is no repeated character, it returns None.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # convert string to list of characters\n    lst1 = list(str1)\n    # initialize dictionary to store character frequency\n    freq = {}\n    # loop through list of characters\n    for char in lst1:\n        # if character already exists in dictionary, return its frequency\n        if char in freq:\n            return freq[char]\n        # otherwise, add character to dictionary with frequency of 1\n        else:\n            freq[char] = 1\n    # if no repeated characters found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = [x for x in range(2, n) if all(x % y!= 0 for y in range(2, x)) and x!= 1]\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            ludic.append(i)\n        i += 1\n    return ludic\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number or not.\n    '''\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(n+1):\n        if i%2 == 1:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    i = 1\n    while i <= n:\n        if i % 7 == 0:\n            ludic_numbers.append(i)\n        i += 1\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if all(int(j) == j for j in str(i)) and i!= 1:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            lucid_numbers.append(i)\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Define a function to check if a number is a lucid number.\n    '''\n    if num == 0:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_list = []\n    i = 2\n    while i <= n:\n        if is_lucid(i):\n            lucid_list.append(i)\n        i += 1\n    return lucid_list\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    '''\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_numbers = [2]\n\n    while lucid_numbers[-1] <= n:\n        lucid_numbers.append(lucid_numbers[-1] + 1)\n\n    return lucid_numbers\n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split() # split the string by spaces\n    reversed_words = words[::-1] # reverse the order of the words in the list\n    return \" \".join(reversed_words) # join the reversed words back into a string with spaces"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    s = s.split()\n    for i in range(len(s)//2):\n        s[i], s[-i-1] = s[-i-1], s[i]\n    return \" \".join(s)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into words\n    reversed_words = []  # initialize an empty list to store the reversed words\n    for word in words:  # iterate through each word in the list\n        reversed_words.insert(0, word)  # insert the word at the beginning of the reversed list\n    return''.join(reversed_words)  # join the reversed words back into a single string with spaces between them"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()  # Split the string into a list of words\n    words.reverse()  # Reverse the order of the words in the list\n    return''.join(words)  # Join the words back into a string separated by spaces"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Reverse the words\n    reversed_words = words[::-1]\n    # Join the reversed words into a string with spaces\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string and return it\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = words[::-1]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)//2):\n        words[i], words[-i-1] = words[-i-1], words[i]\n    return \" \".join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the given number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the given number is divisible by any number between 2 and its square root\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    # If no divisors were found, the number is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        return f\"{num} is a prime number.\"\n    else:\n        return f\"{num} is not a prime number.\"\n\n\nnum = int(input(\"Enter a number: \"))\nprint(prime_num(num))"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # If num is less than 2, it's not a prime number.\n    if num < 2:\n        return False\n\n    # Check if num is divisible by any number between 2 and the square root of num.\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # If the loop completes without finding any divisors, the number is prime.\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than or equal to 1\n    if num <= 1:\n        return False\n    \n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    \n    # If none of the above conditions are met, the number is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    # iterate through all the numbers from 2 to the square root of the given number\n    for i in range(2, int(num**0.5)+1):\n        # check if the number is divisible by any of the numbers in the range\n        if num % i == 0:\n            return False\n    # if the loop completes without returning False, the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def radian_degree(degree):\n    '''\n    This function takes a degree as input and returns its corresponding radian value.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180\n\nprint(radian_degree(180)) # Output: 3.141592653589793\nprint(radian_degree(90)) # Output: 1.5707963267948966\nprint(radian_degree(0)) # Output: 0.0\nprint(radian_degree(-90)) # Output: -1.5707963267948966"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        return literal, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    else:\n        return matches[0], len(matches[0]), len(text) - len(matches[0]) - len(pattern)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group()\n        start = match.start()\n        end = match.end()\n        return literal, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        literal = match.group(0)\n        start_index = match.start()\n        end_index = match.end()\n        return literal, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    for match in matches:\n        # print(match)\n        return match, match.start(), match.end()"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return sum([math.comb(2*n, i) for i in range(n+1)])"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 4 * (bell_Number(n-1) - bell_Number(n-2)) + 2 * (bell_Number(n-1) + bell_Number(n-2))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    # Initialize the first two terms of the sequence\n    a = 1\n    b = 1\n    # Initialize the sequence with the first two terms\n    seq = [a, b]\n    # Iterate through the remaining terms of the sequence\n    for i in range(2, n+1):\n        # Calculate the next term of the sequence\n        c = a + b\n        # Append the next term to the sequence\n        seq.append(c)\n        # Update the values of a and b\n        a = b\n        b = c\n    # Return the nth term of the sequence\n    return seq[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth bell number.\n    A bell number is a number that can be expressed as the sum of three positive integers.\n    '''\n    a, b, c = 1, 1, 2\n    for i in range(1, n):\n        a, b, c = b, c, a + b + c\n    return a"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    This function calculates the nth bell number using a recursive function.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth Bell number.\n    The Bell numbers are the numbers that can be expressed as the sum of two consecutive positive integers. \n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        return bell_Number(n//2) + bell_Number(n//2)\n    else:\n        return 2*bell_Number(n//2) - bell_Number((n//2)+1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        b = 1\n        for i in range(2, n+1):\n            b = (b*(n-i+1))//i\n        return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1: \n        return n \n    else: \n        return bell_Number(n-1) + bell_Number(n-2) "
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    The function takes two parameters, list1 which is the list we want to remove the kth element from, and L which is the value of k.\n    '''\n    if L >= len(list1):\n        print(\"The value of k is greater than or equal to the length of the list.\")\n        return list1\n    elif L == 1:\n        list1.pop(0)\n        return list1\n    else:\n        list1.pop(L-1)\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and an integer k as input and returns a list with all the elements except the k-th element.\n    \"\"\"\n    if len(list1) < k:\n        raise ValueError(\"List should have at least k elements\")\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # If k is larger than the length of the list, return the list as it is.\n    if L > len(list1):\n        return list1\n    \n    # Remove the kth element from the list and return the modified list.\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    result = []\n    for i in range(len(list1)):\n        if i!= k:\n            result.append(list1[i])\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    n = len(list1)\n    if k > n:\n        print(\"Invalid input. The value of k should be less than or equal to the length of the list.\")\n        return list1\n    \n    for i in range(k-1):\n        list1.remove(list1[i])\n    \n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # check if L is a valid integer\n    if not isinstance(L, int):\n        raise TypeError(\"L must be an integer\")\n    \n    # check if L is greater than zero\n    if L <= 0:\n        raise ValueError(\"L must be a positive integer\")\n    \n    # remove the k'th element from the list\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= L:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L-1\n    list2 = list1[:k] + list1[k+1:]\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == N - 1:\n            max_value = max(max_value, max(test_list[i]))\n        else:\n            max_value = max(max_value, max_of_nth(test_list[i], N))\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the maximum value in then'th column of the matrix\n    max_val = 0\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first list in the matrix\n    rows = len(test_list)\n    \n    # Check if the N is valid\n    if N < 1 or N > rows:\n        return None\n    \n    # Initialize an empty list to store the max of each column\n    col_max = [0] * rows\n    \n    # Iterate through each row in the matrix and find the max of then'th column\n    for i in range(rows):\n        col_max[i] = max(test_list[i][j] for j in range(N))\n        \n    # Return the list of max of each column\n    return col_max"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize the max_value to zero\n    max_value = 0\n    # iterate over each row of the matrix\n    for row in test_list:\n        # if the current row has a non-zero value for then'th column, update the max_value\n        if row[N-1]!= 0:\n            max_value = max(max_value, row[N-1])\n    # return the max_value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(matrix, N):\n    max_val = float('-inf')\n    for row in matrix:\n        val = row[N-1]\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = None\n    for i in range(len(test_list)):\n        if max_value is None or max_value < test_list[i][N-1]:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if len(row) > N:\n            if row[N] > max_val:\n                max_val = row[N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    max_val = float('-inf')\n    for i in range(n):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N - 1:\n            max_val = max(test_list[i])\n            return max_val\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Create an empty list to store the merged lists\n    merged_lst = []\n    \n    # Loop through each sublist in the input list\n    for sublist in lst:\n        # Create an empty list to store the first element of the sublist\n        first_sublist = []\n        # Create an empty list to store the second element of the sublist\n        second_sublist = []\n        \n        # Loop through each element of the sublist and add it to the appropriate list\n        for elem in sublist:\n            if len(first_sublist) == 0:\n                first_sublist.append(elem)\n            else:\n                second_sublist.append(elem)\n        \n        # Append the merged list to the merged list\n        merged_lst.append([first_sublist, second_sublist])\n    \n    # Return the merged list\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list\n"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        first_elem = sublist[0]\n        second_elem = sublist[1]\n        merged_list.append((first_elem, second_elem))\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    for item in test_list:\n        for value in item:\n            total_sum += value\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i, value in enumerate(test_list):\n        cum_sum += value\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum variable to 0\n    cum_sum = 0\n    # loop through each tuple in the list\n    for tup in test_list:\n        # loop through each element in the tuple\n        for elem in tup:\n            # add the element to the cumulative sum\n            cum_sum += elem\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for i in range(len(test_list)):\n        cumsum += test_list[i][1]\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total = 0\n    for item in test_list:\n        if isinstance(item, tuple):\n            total += item[1]\n        else:\n            total += item\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to 0\n    cumulative_sum = 0\n    # iterate through each element in the list and add its value to the cumulative sum\n    for element in test_list:\n        cumulative_sum += element\n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # Initialize a variable to store the cumulative sum\n    cumulative_sum = 0\n    \n    # Loop through each element in the tuple list\n    for element in test_list:\n        # If the element is not a number (e.g., string), skip it and move on to the next element\n        if not isinstance(element, (int, float)):\n            continue\n        \n        # Add the element to the cumulative sum\n        cumulative_sum += element\n    \n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum as zero\n    cum_sum = 0\n    # loop through the list of tuples\n    for tup in test_list:\n        # extract the values from the tuple\n        val1, val2 = tup\n        # add the values to the cumulative sum\n        cum_sum += val1 + val2\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for tup in test_list:\n        for val in tup:\n            total += val\n    return total"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        avg = sum(num_tuple) / len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    avg_list = []\n    \n    # Loop through each tuple in the list\n    for tup in nums:\n        # Calculate the average of the tuple elements\n        avg = sum(tup) / len(tup)\n        # Append the average to the list\n        avg_list.append(avg)\n    \n    # Return the list of average values\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_set in nums:\n        sum_set = sum(num_set)\n        average = sum_set / len(num_set)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        sum_nums = 0\n        for j in range(len(nums[i])):\n            sum_nums += nums[i][j]\n        avg_list.append(sum_nums / len(nums[i]))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        # calculate the average of the tuple elements\n        average = sum(num) / len(num)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to hold the averages\n    averages = []\n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Use the sum() function to add up all the values in the tuple\n        total = sum(tup)\n        # Use the len() function to get the number of values in the tuple\n        count = len(tup)\n        # Calculate the average by dividing the sum by the count\n        avg = total / count\n        # Add the average to the list of averages\n        averages.append(avg)\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averaged = []\n    for num in nums:\n        total = sum(num)\n        avg = total/len(num)\n        averaged.append(avg)\n    return averaged"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        total = 0\n        count = len(num_tuple)\n        for num in num_tuple:\n            total += num\n        averages.append(total / count)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples must have the same length.')\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must have the same length.\"\n    \n    # perform element-wise modulo\n    result_tup = tuple([num1 % num2 for num1, num2 in zip(test_tup1, test_tup2)])\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tupples must have the same length.\")\n    return tuple([x % y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    # Check if the length of both tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    # Perform element wise modulo and return the result\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    steps = list(map(int, steps.split(',')))\n    if steps[0] == 0 and steps[-1] == 0:\n        return 0\n    min_steps = steps[0]\n    max_steps = steps[-1]\n    if min_steps > max_steps:\n        return 0\n    jumps = 0\n    if min_steps == max_steps:\n        if steps[0] == steps[-1]:\n            return min_steps\n        else:\n            return min_steps - 1\n    for i in range(len(steps)):\n        if steps[i] > max_steps:\n            if i!= len(steps) - 1:\n                jumps += 1\n            break\n        elif steps[i] < min_steps:\n            if i!= 0:\n                jumps += 1\n            break\n        else:\n            if i!= 0 and i!= len(steps) - 1:\n                jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    count = 0\n    reach = 0\n    \n    # Check for reach of (0, d)\n    for i in range(steps):\n        reach += 1\n        if reach == d:\n            count += 1\n            reach = 0\n    \n    # Check for reach of (d, 0)\n    for i in range(steps - reach):\n        reach += 1\n        count += 1\n    \n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Initialize variables\n    total_jumps = 0\n    current_position = 0\n    next_position = 0\n    \n    # Iterate through the steps\n    for i in range(steps):\n        # Calculate the next position\n        next_position = current_position + d\n        \n        # Check if the next position is within bounds\n        if next_position < 0 or next_position >= steps:\n            # If not, it means we have reached the end point\n            return total_jumps\n        \n        # Update the current position\n        current_position = next_position\n        total_jumps += 1\n    \n    # If we reach here, it means that we have not reached the end point\n    return total_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    i, j = 0, 0  # starting position\n    steps_taken = 0  # steps taken so far\n    steps_left = steps  # number of steps left\n    \n    while steps_left > 0:\n        if j == d:\n            # reached the destination point\n            steps_taken += steps_left\n            steps_left = 0\n        else:\n            # step left\n            steps_left -= 1\n            i += 1\n            \n    return steps_taken"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize memoization table\n    memo = [[0] * (d+1) for _ in range(steps+1)]\n    \n    # base cases\n    memo[0][0] = 0\n    memo[0][1] = steps\n    \n    # fill memoization table\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            if j == 1:\n                memo[i][j] = memo[i-1][j]\n            elif j == d:\n                memo[i][j] = memo[i-1][j-1]\n            else:\n                memo[i][j] = min(memo[i-1][j], memo[i][j-1]) + 1\n    \n    return memo[steps][d]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    if steps < d:\n        return 0\n\n    # Initialize variables\n    dp = [0] * steps\n    dp[0] = 1\n\n    # Fill the dp array\n    for i in range(1, steps):\n        if i < d:\n            dp[i] = 1\n        else:\n            dp[i] = dp[i - d] + 1\n\n    return dp[-1]\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n\n    n = 0\n    while d > 0:\n        d -= 1\n        steps += 1\n        n += 1\n\n    return steps + n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    reachable = 0\n    count = 0\n\n    # Check if the target point is reachable in one step\n    if d == 0:\n        reachable = 1\n        return reachable\n\n    # Check if the target point is reachable in two steps\n    if d == 1:\n        reachable = 2\n        return reachable\n\n    # Check if the target point is reachable in three steps\n    if d == 2:\n        reachable = 3\n        return reachable\n\n    # Check if the target point is reachable in four steps\n    if d == 3:\n        reachable = 4\n        return reachable\n\n    # Check if the target point is reachable in five steps\n    if d == 4:\n        reachable = 5\n        return reachable\n\n    # Check if the target point is reachable in six steps\n    if d == 5:\n        reachable = 6\n        return reachable\n\n    # Check if the target point is reachable in seven steps\n    if d == 6:\n        reachable = 7\n        return reachable\n\n    # Check if the target point is reachable in eight steps\n    if d == 7:\n        reachable = 8\n        return reachable\n\n    # Check if the target point is reachable in nine steps\n    if d == 8:\n        reachable = 9\n        return reachable\n\n    # Check if the target point is reachable in ten steps\n    if d == 9:\n        reachable = 10\n        return reachable\n\n    # Check if the target point is reachable in eleven steps\n    if d == 10:\n        reachable = 11\n        return reachable\n\n    # Check if the target point is reachable in twelve steps\n    if d == 11:\n        reachable = 12\n        return reachable\n\n    # Check if the target point is reachable in thirteen steps\n    if d == 12:\n        reachable = 13\n        return reachable\n\n    # Check if the target point is reachable in fourteen steps\n    if d == 13:\n        reachable = 14\n        return reachable\n\n    # Check if the target point is reachable in fifteen steps\n    if d == 14:\n        reachable = 15\n        return reachable\n\n    # Check if the target point is reachable in sixteen steps\n    if d == 15:\n        reachable = 16\n        return reachable\n\n    # Check if the target point is reachable in seventeen steps\n    if d == 16:\n        reachable = 17\n        return reachable\n\n    # Check if the target point is reachable in eighteen steps\n    if d == 17:\n        reachable = 18\n        return reachable\n\n    # Check if the target point is reachable in nineteen steps\n    if d == 18:\n        reachable = 19\n        return reachable\n\n    # Check if the target point is reachable in twenty steps\n    if d == 19:\n        reachable = 20\n        return reachable\n\n    # Check if the target point is reachable in twenty-one steps\n    if d == 20:\n        reachable = 21\n        return reachable\n\n    # Check if the target point is reachable in twenty-two steps\n    if d == 21:\n        reachable = 22\n        return reachable\n\n    # Check if the target point is reachable in twenty-three steps\n    if d == 22:\n        reachable = 23\n        return reachable\n\n    # Check if the target point is reachable in twenty-four steps\n    if d == 23:\n        reachable = 24\n        return reachable\n\n    # Check if the target point is reachable in twenty-five steps\n    if d == 24:\n        reachable = 25\n        return reachable\n\n    # Check if the target point is reachable in twenty-six steps\n    if d == 25:\n        reachable = 26\n        return reachable\n\n    # Check if the target point is reachable in twenty-seven steps\n    if d == 26:\n        reachable = 27\n        return reachable\n\n    # Check if the target point is reachable in twenty-eight steps\n    if d == 27:\n        reachable = 28\n        return reachable\n\n    # Check if the target point is reachable in twenty-nine steps\n    if d == 28:\n        reachable = 29\n        return reachable\n\n    # Check if the target point is reachable in thirty steps\n    if d == 29:\n        reachable = 30\n        return reachable\n\n    # Check if the target point is reachable in thirty-one steps\n    if d == 30:\n        reachable = 31\n        return reachable\n\n    # Check if the target point is reachable in thirty-two steps\n   "
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    step_count = 0\n    jump_count = 0\n    cur_pos = (0, 0)\n\n    # Check if the start point is at (0, 0)\n    if cur_pos == (0, 0):\n        step_count += 1\n        jump_count += 1\n        cur_pos = (d, 0)\n\n    # Move to the right until we reach the end point\n    while cur_pos!= (d, 0):\n        if cur_pos[1] == d:\n            if cur_pos[0] >= d:\n                break\n            else:\n                step_count += 1\n                jump_count += 1\n                cur_pos = (cur_pos[0] + 1, cur_pos[1])\n        else:\n            step_count += 1\n            jump_count += 1\n            cur_pos = (cur_pos[0], cur_pos[1] + 1)\n\n    return step_count + jump_count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    :param steps: number of steps required to reach the point (d, 0)\n    :type steps: int\n    :param d: distance from origin to reach point (d, 0)\n    :type d: int\n    :return: number of jumps required to reach the point (d, 0) from origin\n    :rtype: int\n    \"\"\"\n\n    # Base case: if d == 0, then there is only one jump\n    if d == 0:\n        return 1\n\n    # Base case: if steps == 0, then there is no way to reach (d, 0) from origin\n    if steps == 0:\n        return 0\n\n    # Recursive case: if d is greater than 0, then there are two options:\n    #  1. d-1: from origin\n    #  2. d: from current point (x, y)\n    # Note that we need to use a recursive approach, because the number of jumps required to reach the point (d, 0) from origin\n    #   can be either 1 or 2 (depending on the position of the point)\n    # The optimal number of jumps required to reach the point (d, 0) from origin is the maximum of the number of jumps required\n    #   to reach the point (d-1, 0) from origin and the number of jumps required to reach the point (d, 1) from origin\n\n    return max(min_Jumps(steps-1, d-1), min_Jumps(steps, d))"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n        return\n    \n    # Create an empty list to store the results\n    result = []\n    \n    # Divide each element of the lists\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    # Return the list of results\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and divides the elements of the first list by the corresponding element of the second list.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return\n    \n    # loop through the lists element wise and divide each element by the corresponding element in the other list\n    for i in range(len(nums1)):\n        nums1[i] /= nums2[i]\n        \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i]!= 0:\n            result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must have the same length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n        \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into individual characters\n    char_list = list(test_str)\n    \n    # Initialize variables to keep track of the index of the first digit and the last digit\n    first_digit_index = None\n    last_digit_index = None\n    \n    # Loop through the list of characters\n    for index, char in enumerate(char_list):\n        # If the character is a digit, update the index of the first and last digit\n        if char.isdigit():\n            if first_digit_index is None:\n                first_digit_index = index\n            last_digit_index = index\n    \n    # If there are no digits in the string, return the original string\n    if first_digit_index is None:\n        return test_str\n    \n    # Otherwise, move all the digits to the end of the list\n    char_list[first_digit_index:last_digit_index+1] = sorted(char_list[first_digit_index:last_digit_index+1], key=int)\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = ''.join(filter(str.isdigit, test_str))  # filter only digits and join them to a string\n    nums_list = list(nums)\n    nums_list.sort(reverse=True)  # sort in descending order\n    nums_str = ''.join(nums_list)  # join the sorted numbers back to a string\n    return nums_str + test_str  # concatenate the sorted numbers and the original string\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    if numbers:\n        return numbers + test_str[::-1]\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize a variable to keep track of the current position in the string\n    pos = 0\n    # Initialize an empty string to store the numbers\n    num_str = \"\"\n    # Loop through each character in the input string\n    for char in test_str:\n        # If the character is a number, add it to the number string and move the position forward\n        if char.isdigit():\n            num_str += char\n            pos += 1\n        # If the character is not a number and the position is at the end of the string, add it to the number string\n        elif pos == len(test_str) - 1:\n            num_str += char\n    # Return the original string with the numbers moved to the end of it\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Define a regular expression to match all numbers in the string\n    num_pattern = re.compile(r'\\d+')\n\n    # Find all the numbers in the string using the regular expression\n    nums = re.findall(num_pattern, test_str)\n\n    # Loop through the numbers and move them to the end of the string\n    for num in nums:\n        test_str = re.sub(num, '', test_str)\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n    \n    # Initialize two pointers to the beginning and end of the list\n    i = 0\n    j = len(char_list) - 1\n    \n    # Loop through the list while i is less than j\n    while i < j:\n        # If the current character is a number, swap it with the last character\n        if char_list[i].isdigit():\n            char_list[i], char_list[j] = char_list[j], char_list[i]\n            j -= 1\n        else:\n            i += 1\n    \n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Define a regular expression to match all numbers\n    pattern = re.compile(r'\\d+')\n    \n    # Find all matches in the string using the regular expression\n    matches = pattern.findall(test_str)\n    \n    # Reverse the order of the matches and join them back into a string\n    new_str = ''.join(reversed(matches))\n    \n    # Return the new string\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into characters and store them in a list\n    char_list = list(test_str)\n    # Initialize an empty string to store the numbers\n    num_str = ''\n    # Initialize a counter to keep track of the number of numbers found\n    num_count = 0\n    # Loop through each character in the list\n    for char in char_list:\n        # If the character is a number, append it to the number string and increment the counter\n        if char.isdigit():\n            num_str += char\n            num_count += 1\n        # If the character is not a number, append it to the original string and move on to the next character\n        else:\n            test_str = test_str[:char_list.index(char)] + num_str + test_str[char_list.index(char):]\n            num_str = ''\n            num_count = 0\n    # Return the modified string with all the numbers moved to the end\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a list to store the non-number characters\n    non_num_list = []\n    # create a list to store the number characters\n    num_list = []\n    # iterate through the string and add non-number characters to non_num_list and number characters to num_list\n    for char in test_str:\n        if not char.isdigit():\n            non_num_list.append(char)\n        else:\n            num_list.append(char)\n    # concatenate the two lists and return the concatenated string\n    return ''.join(num_list + non_num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # initialize variables\n    max_size = 0\n    current_size = 0\n    current_set = []\n    \n    # sort the list in ascending order\n    a.sort()\n    \n    # loop through the list\n    for num in a:\n        # if the current number is divisible by the next number in the list, increment the size of the current set and append the current number to it\n        if num % a[current_size] == 0:\n            current_size += 1\n            current_set.append(num)\n        # if the size of the current set is greater than the maximum size found so far, update the maximum size\n        if current_size > max_size:\n            max_size = current_size\n    \n    # return the maximum size of the largest subset of the list\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in ascending order\n    a.sort()\n    # Initialize two variables to keep track of the current subset size and the maximum size found so far\n    subset_size = 0\n    max_subset_size = 0\n    # Iterate over the input list and for each pair of elements, check if they are divisible\n    for i in range(len(a)-1):\n        if a[i] % a[i+1] == 0:\n            # If they are divisible, increment the subset size\n            subset_size += 1\n            # If the current subset size is greater than the maximum size found so far, update the maximum size\n            if subset_size > max_subset_size:\n                max_subset_size = subset_size\n    # Return the maximum subset size found\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            dp[i] = dp[i-1] + 1\n    ans = max(dp)\n    return ans"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the given list in ascending order\n    a.sort()\n    \n    # Initialize variables to store the count of pairs and the largest subset size found so far\n    count = 1\n    largest_subset_size = 1\n    \n    # Loop through the sorted list\n    for i in range(1, len(a)):\n        # If the current element is divisible by the next element, increment the count and check if it's a larger subset size\n        if a[i] % a[i-1] == 0:\n            count += 1\n            if count > largest_subset_size:\n                largest_subset_size = count\n        else:\n            # If the current element is not divisible by the next element, reset the count\n            count = 1\n            \n    # Return the largest subset size found\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables to store the largest subsets and the size of the largest subset\n    largest = 0\n    current = 0\n\n    # Iterate over the list\n    for num in a:\n        # Check if the current number is divisible by the next number\n        if num % a[current] == 0:\n            current += 1\n        # If the current number is not divisible by the next number, update the largest subset size\n        if current == 0 or num % a[current - 1]!= 0:\n            largest = max(largest, current)\n            current = 0\n\n    # Update the largest subset size\n    largest = max(largest, current)\n\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [1] * n\n    max_size = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n                max_size = max(max_size, dp[i])\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables for the largest subset and the size of the largest subset\n    largest_subset_size = 0\n    largest_subset = [0]\n\n    # Iterate through the list\n    for num in a:\n        # If the current number is evenly divisible by the previous number in the subset,\n        # add the current number to the subset and update the largest subset size if necessary\n        if num % largest_subset[-1] == 0:\n            largest_subset.append(num)\n            largest_subset_size = max(largest_subset_size, len(largest_subset))\n\n        # If the current number is not divisible by the previous number in the subset,\n        # reset the largest subset to the current number and update the largest subset size\n        else:\n            largest_subset = [num]\n            largest_subset_size = len(largest_subset)\n\n    # Return the largest subset size\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [1] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[i - 1] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # create a set to store the remainders of each element\n    remainders = {a[0]}\n\n    # loop through the list of numbers\n    for num in a[1:]:\n        # calculate the remainder of the current number divided by the smallest element in the set\n        remainder = num % min(remainders)\n\n        # if the remainder is already in the set, add the current element to the set and update the set of remainders\n        if remainder in remainders:\n            remainders.add(num)\n            remainders.remove(remainder)\n        # otherwise, add the remainder to the set of remainders and add the current element to the set\n        else:\n            remainders.add(remainder)\n            remainders.add(num)\n\n    # return the length of the largest subset\n    return len(remainders)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    max_size = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n                max_size = max(max_size, dp[i])\n\n    return max_size\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Merge the two arrays\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array\n    merged_arr.sort()\n\n    # Calculate the median index\n    median_index = n // 2\n\n    # Return the median\n    return merged_arr[median_index]\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted arrays into one\n    merged = arr1 + arr2\n    # Sort the merged array\n    sorted_arr = sorted(merged)\n    # Find the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (sorted_arr[mid-1] + sorted_arr[mid]) / 2.0\n    else:\n        median = sorted_arr[mid]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists\n    merged_list = arr1 + arr2\n    \n    # Find the middle index of the merged list\n    mid = len(merged_list) // 2\n    \n    # If the length of the merged list is odd, the median is the middle element\n    if len(merged_list) % 2 == 1:\n        return merged_list[mid]\n    \n    # If the length of the merged list is even, the median is the average of the two middle elements\n    else:\n        # Find the index of the middle element in the first list\n        first_mid = mid - len(arr1) // 2\n        \n        # Find the index of the middle element in the second list\n        second_mid = mid - len(arr1) // 2 + len(arr2) // 2\n        \n        # Return the average of the middle elements\n        return (merged_list[first_mid] + merged_list[second_mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two arrays\n    merged_arr = arr1 + arr2\n    \n    # Sort the merged array\n    sorted_arr = sorted(merged_arr)\n    \n    # Find the median\n    mid_index = n // 2\n    if n % 2 == 0:\n        median = (sorted_arr[mid_index - 1] + sorted_arr[mid_index]) / 2\n    else:\n        median = sorted_arr[mid_index]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1 = arr1[:n]\n    arr2 = arr2[:n]\n    arr = arr1 + arr2\n    arr.sort()\n    if len(arr) % 2 == 0:\n        return (arr[len(arr)//2-1] + arr[len(arr)//2])/2\n    else:\n        return arr[len(arr)//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merging the two lists to create a single list\n    merged_list = arr1 + arr2\n    \n    # Sorting the merged list\n    sorted_list = sorted(merged_list)\n    \n    # Finding the median\n    if n % 2 == 0:\n        # If n is even\n        median = (sorted_list[n//2-1] + sorted_list[n//2]) / 2\n    else:\n        # If n is odd\n        median = sorted_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into one\n    merged_list = arr1 + arr2\n\n    # Find the middle index of the merged list\n    mid_index = n // 2\n\n    # If the length of the list is odd, the median is the middle element\n    if n % 2 == 1:\n        median = merged_list[mid_index]\n    # If the length of the list is even, the median is the average of the middle two elements\n    else:\n        median = (merged_list[mid_index - 1] + merged_list[mid_index]) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    # merge the two sorted arrays\n    merged = merge_sorted_arrays(arr1, arr2)\n    \n    # find the median index\n    mid = n // 2\n    \n    # if the length of the merged array is odd, then the median is the middle element\n    if n % 2 == 1:\n        median = merged[mid]\n    # if the length of the merged array is even, then the median is the average of the two middle elements\n    else:\n        median = (merged[mid-1] + merged[mid]) / 2\n    \n    return median\n\ndef merge_sorted_arrays(arr1, arr2):\n    # initialize the result array\n    merged = []\n    \n    # initialize the left and right indices for each array\n    i = 0\n    j = 0\n    \n    # while both arrays have elements left\n    while i < len(arr1) and j < len(arr2):\n        # if the left element of arr1 is less than the left element of arr2\n        if arr1[i] < arr2[j]:\n            # add the left element of arr1 to the result array\n            merged.append(arr1[i])\n            # move the left index of arr1 to the right\n            i += 1\n        # if the left element of arr2 is less than the left element of arr1\n        else:\n            # add the left element of arr2 to the result array\n            merged.append(arr2[j])\n            # move the left index of arr2 to the right\n            j += 1\n    \n    # if there are any elements left in arr1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    \n    # if there are any elements left in arr2\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n    \n    return merged"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Create a list of all the elements in the two lists\n    combined = arr1 + arr2\n    # Sort the combined list\n    combined.sort()\n    # Calculate the median\n    if n % 2 == 0:\n        # If the length of the combined list is even, return the average of the middle two elements\n        return (combined[n//2-1] + combined[n//2]) / 2\n    else:\n        # If the length of the combined list is odd, return the middle element\n        return combined[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted lists of same size n and returns the median value.\n    '''\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n    \n    # Sort the concatenated array\n    arr.sort()\n    \n    # Return the median\n    if n % 2 == 0:\n        return (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        return arr[n//2]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Loop through each number in the list and compute the nth power\n    for num in nums:\n        print(num, num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to check if a given string is uppercase or not.\n    \"\"\"\n    # Convert the string to uppercase\n    upper_string = string.upper()\n    # Check if the string is uppercase or not\n    if upper_string == string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    for char in string:\n        if char.islower():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # convert the string to uppercase\n    string = string.upper()\n    # check if the string is already uppercase\n    if string == string.upper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    # Convert the string to uppercase\n    uppercase_string = string.upper()\n    # Check if the string is uppercase\n    for char in uppercase_string:\n        if char.islower():\n            return False\n    return True"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the input list is empty or has less than two elements\n    if len(newList) < 2:\n        print(\"Error: The input list must have at least two elements.\")\n        return\n    # Check if the input list has only one element\n    elif len(newList) == 2:\n        # If the list has only one element, swap it with itself\n        newList[0], newList[1] = newList[1], newList[0]\n        return newList\n    # If the list has more than one element, swap the first and last elements\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n\n    first_element = newList[0]\n    last_element = newList[-1]\n\n    newList[0] = last_element\n    newList[-1] = first_element\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # Swap the first and last element of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Define the length of the list\n    length = len(newList)\n\n    # Check if the length of the list is greater than 1\n    if length > 1:\n        # Define the first element and the last element of the list\n        first = newList[0]\n        last = newList[length-1]\n\n        # Interchange the first and last elements\n        newList[0] = last\n        newList[length-1] = first\n\n        # Print the modified list\n        print(newList)\n    else:\n        print(\"The list must have at least 2 elements.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        firstElement = newList[0]\n        lastElement = newList[-1]\n        newList[0] = lastElement\n        newList[-1] = firstElement\n    else:\n        print(\"The list must have at least two elements to swap.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    if len(newList) < 2: #if the list has less than 2 elements\n        return newList\n\n    else: #if the list has more than 1 element\n        newList[0], newList[-1] = newList[-1], newList[0] #swapping the first and last element\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        # swap the first and last element in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return None\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Get the length of the list\n    length = len(newList)\n\n    # Check if the length of the list is less than 2\n    if length < 2:\n        print(\"Error: List must have at least two elements.\")\n        return\n\n    # Check if the list contains only one element\n    elif length == 2:\n        # If the list contains only one element, return it\n        if newList[0] == newList[1]:\n            return newList\n        else:\n            print(\"Error: List must contain only two different elements.\")\n            return\n\n    # Swap the first and last element of the list\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # pi is a mathematical constant\n    pi = 3.14159\n\n    # calculate the semi-perimeter of the triangle\n    s = 2*r\n\n    # calculate the semi-perimeter of the circle\n    sc = pi*r**2\n\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = 0.5 * pi * r**2\n\n    # calculate the area of the largest triangle that can be inscribed in the circle\n    ac = pi * r**2 * r**2 / 3\n\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = max(area, ac)\n\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = max(area, sc)\n\n    # return the area of the largest triangle that can be inscribed in the semicircle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula for the area of a triangle given its base and height\n    area = (3 * r * r) / (4 * math.tan(math.pi / 3))\n    \n    # Return the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r ** 2 # calculate the area of a right triangle\n    side = math.sqrt(r ** 2 - area) # calculate the side of the largest triangle\n    # find the perimeter of the largest triangle\n    perimeter = 2 * side\n    area_of_largest_triangle = math.pi * side ** 2 # calculate the area of the largest triangle using Heron's formula\n    return area_of_largest_triangle\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-perimeter of a semicircle with the given radius\n    sp = 2 * math.pi * r\n\n    # Calculate the area of a triangle with side 2r\n    area_tri = 0.5 * r * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area_max = area_tri * sp\n\n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return area_max"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula for the area of a triangle given its sides\n    area = 0.5 * r ** 2\n\n    # Formula for the area of the largest triangle inscribed in a semicircle with radius r\n    largest_area = area * (1 - r ** 2)\n\n    # Return the area of the largest triangle\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 2 * r\n    b = math.sqrt(r**2 - a**2)\n    c = 2 * b\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-circle radius\n    semi_radius = r / 2\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (3 * r**2) / 4\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Find the radius of the smallest triangle\n    s = r * (1 - (2 * r**2) / (1 + 4 * r**2))**(0.5)\n    \n    # Find the area of the smallest triangle\n    A = 0.5 * s * (s - r)\n    \n    # Find the radius of the largest triangle\n    t = (1 - r**2 / (1 + 4 * r**2))**(0.5)\n    \n    # Find the area of the largest triangle\n    B = 0.5 * t * (t + r)\n    \n    # Find the area of the largest triangle using Heron's formula\n    C = (s + t) * sqrt(s * t)\n    \n    return max(A, B, C)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 2 * r * r\n    b = 3 * r * r\n    c = 2 * r * r\n    s = (a + b + c) / 2\n    return (s * (s - a) * (s - b) * (s - c)) ** 0.5"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n    array (list): a sorted list of natural numbers.\n\n    Returns:\n    int: the smallest missing number from the sorted list.\n    \"\"\"\n    if not array:\n        raise ValueError(\"Array cannot be empty\")\n\n    if start < 0 or (end is not None and end < 0):\n        raise ValueError(\"Start and end indices must be non-negative\")\n\n    if end is None:\n        end = len(array) - 1\n\n    if start > end:\n        raise ValueError(\"Start index cannot be greater than end index\")\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # If the array is empty, return 1\n    if len(array) == 0:\n        return 1\n\n    # If the end index is not specified, set it to the last index of the array\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize the missing number to start\n    missing_number = start\n\n    # Loop through the array and find the first missing number\n    for i in range(start, end+1):\n        # If the current number is found in the array, move to the next number\n        while i!= array[i-start]:\n            if i > array[i-start]:\n                return missing_number\n            i += 1\n        # If the current number is not found in the array, return the missing number\n        else:\n            return missing_number\n\n    # If all numbers are found in the array, return the last index of the array + 1\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if the input array is empty or not\n    if not array:\n        return \"The array is empty.\"\n    \n    # Sort the array\n    array.sort()\n    \n    # Check if the array is already sorted\n    if array == list(range(len(array))):\n        return \"The array is already sorted.\"\n    \n    # Check if the start and end index are not provided\n    if start is None or end is None:\n        return \"The start and end index are not provided.\"\n    \n    # Check if the start index is less than 0\n    if start < 0:\n        return \"The start index should be a positive integer.\"\n    \n    # Check if the end index is less than 0\n    if end < 0:\n        return \"The end index should be a positive integer.\"\n    \n    # Check if the start index is greater than or equal to the length of the array\n    if start >= len(array):\n        return \"The start index should be less than the length of the array.\"\n    \n    # Check if the end index is greater than or equal to the length of the array\n    if end >= len(array):\n        return \"The end index should be less than the length of the array.\"\n    \n    # Check if the start index is greater than the end index\n    if start > end:\n        return \"The start index should be less than or equal to the end index.\"\n    \n    # Find the first missing number\n    missing = array[start]\n    for i in range(start+1,end+1):\n        if i!= array[i]:\n            missing = i\n            break\n    \n    # Return the missing number\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if i not in array:\n            return i\n    return end+1+start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i - start]:\n            return i\n\n    return end + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    if start == end:\n        if array[start]!= start:\n            return start\n        else:\n            return find_First_Missing(array, start + 1, end)\n\n    mid = (start + end) // 2\n\n    if array[mid] < mid:\n        return find_First_Missing(array, start, mid - 1)\n    else:\n        return find_First_Missing(array, mid + 1, end)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the first missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i\n\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a list of even numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    new_list = []\n    for num in list:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Extracting adjacent coordinates\n    sub.append(ele)\n    if ele[0] - 1 >= 0:\n        sub.append((ele[0] - 1, ele[1]))\n    if ele[0] + 1 < len(grid):\n        sub.append((ele[0] + 1, ele[1]))\n    if ele[1] - 1 >= 0:\n        sub.append((ele[0], ele[1] - 1))\n    if ele[1] + 1 < len(grid[0]):\n        sub.append((ele[0], ele[1] + 1))\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_list = []\n    if x > 0:\n        adj_list.append((x-1, y))\n    if x < 9:\n        adj_list.append((x+1, y))\n    if y > 0:\n        adj_list.append((x, y-1))\n    if y < 9:\n        adj_list.append((x, y+1))\n    return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # create a list of adjacent coordinates\n    adj_coords = [(ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0]+1, ele[1]), \n                  (ele[0]-1, ele[1]+1), (ele[0]+1, ele[1]-1), (ele[0]-1, ele[1]-1), \n                  (ele[0]+1, ele[1]), (ele[0], ele[1]-1)]\n    # add sublist to the list of adjacent coordinates\n    if sub:\n        adj_coords.extend(sub)\n    # remove duplicates and sort the list\n    adj_coords = sorted(set(adj_coords))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                sub.append((x, y+j))\n            elif j == 0:\n                sub.append((x+i, y))\n            else:\n                sub.append((x+i, y+j))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = [(x-1,y), (x+1,y), (x,y-1), (x,y+1)]\n    if sub:\n        return [adj for adj in adjacent if adj not in sub]\n    else:\n        return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x+1, y))\n    sub.append((x-1, y))\n    sub.append((x, y+1))\n    sub.append((x, y-1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x-1,y)) #left\n    sub.append((x+1,y)) #right\n    sub.append((x,y-1)) #top\n    sub.append((x,y+1)) #bottom\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 9:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 9:\n        adj.append((x, y+1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # unpacking the tuple\n    x, y = ele\n    \n    # creating a list of adjacent coordinates\n    adj = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i!= x or j!= y:\n                adj.append((i,j))\n    \n    # returning the adjacent coordinates list\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    # define a dictionary to map spaces to underscores\n    space_to_underscore = {\n        \" \": \"_\",\n        \"\\t\": \"_\",\n        \"\\n\": \"_\",\n        \"\\r\": \"_\",\n        \"\\f\": \"_\",\n        \"\\v\": \"_\",\n        \"\\xa0\": \"_\",\n        \"\\u00a0\": \"_\",\n        \"\\u1680\": \"_\",\n        \"\\u180e\": \"_\",\n        \"\\u2000\": \"_\",\n        \"\\u2001\": \"_\",\n        \"\\u2002\": \"_\",\n        \"\\u2003\": \"_\",\n        \"\\u2004\": \"_\",\n        \"\\u2005\": \"_\",\n        \"\\u2006\": \"_\",\n        \"\\u2007\": \"_\",\n        \"\\u2008\": \"_\",\n        \"\\u2009\": \"_\",\n        \"\\u200a\": \"_\",\n        \"\\u202f\": \"_\",\n        \"\\u205f\": \"_\",\n        \"\\u3000\": \"_\"\n    }\n\n    # define a dictionary to map underscores to spaces\n    underscore_to_space = {\n        \"_\": \" \",\n        \"__\": \" \",\n        \"___\": \" \",\n        \"____\": \" \",\n        \"_____\": \" \",\n        \"______\": \" \",\n        \"_______\": \" \",\n        \"________\": \" \",\n        \"_________\": \" \",\n        \"__________\": \" \",\n        \"___________\": \" \",\n        \"____________\": \" \",\n        \"______________\": \" \",\n        \"______________\": \" \",\n        \"_______________\": \" \",\n        \"________________\": \" \",\n        \"_________________\": \" \",\n        \"__________________\": \" \",\n        \"___________________\": \" \",\n        \"____________________\": \" \",\n        \"______________________\": \" \",\n        \"______________________\": \" \",\n        \"_______________________\": \" \",\n        \"________________________________________\": \" \",\n        \"_________________________________________\": \" \",\n        \"__________________________________________\": \" \",\n        \"___________________________________________\": \" \",\n        \"____________________________________________\": \" \",\n        \"______________________________________________\": \" \",\n        \"______________________________________________\": \" \",\n        \"_______________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"__________________________________________________________\": \" \",\n        \"___________________________________________________________\": \" \",\n        \"____________________________________________________________\": \" \",\n        \"______________________________________________________________\": \" \",\n        \"______________________________________________________________\": \" \",\n        \"_______________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \" \",\n        \"________________________________________________________\": \" \",\n        \"_________________________________________________________\": \""
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    spaces = \" \"\n    underscore = \"_\"\n    result = \"\"\n    for char in text:\n        if char == spaces:\n            result += underscore\n        elif char == underscore:\n            result += spaces\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscores\n    text = text.replace(' ', '_')\n    # Replace underscores with whitespaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace all whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace all underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into words\n    words = text.split()\n\n    # Iterate through each word\n    for i in range(len(words)):\n        # Check if the word contains whitespace\n        if'' in words[i]:\n            # Replace all whitespaces with underscores\n            words[i] = words[i].replace(' ', '_')\n        # Check if the word contains an underscore\n        elif '_' in words[i]:\n            # Replace all underscores with whitespaces\n            words[i] = words[i].replace('_','')\n\n    # Join the words back into a string\n    new_text =''.join(words)\n\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers to mark the start and end of the list\n    i = 0\n    j = 0\n\n    # Traverse the list from left to right\n    while j < len(num_list):\n        # If the current number is not zero, move it to the next position\n        if num_list[j]!= 0:\n            # Move the current number to its correct position\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            # Increment the start pointer\n            i += 1\n        # Increment the end pointer\n        j += 1\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    for i, num in enumerate(num_list):\n        if num == 0:\n            zero_index.append(i)\n    \n    for i in range(len(num_list)-1, -1, -1):\n        if i in zero_index:\n            continue\n        num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n        len(num_list) -= 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers to the beginning of the list\n    i = 0\n    j = 0\n\n    # Traverse the list using two pointers\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            # Move all non-zero elements to the current position of i\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n\n    # Remove all the zeroes from the end of the list\n    while i < len(num_list):\n        num_list.pop()\n\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list = num_list[:zero_index] + num_list[zero_index+1:]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = [x for x in num_list if x!= 0]\n    num_list.extend([0] * (num_list.count(0) - 1))\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # create a copy of the list\n    new_list = num_list[:]\n    \n    # iterate through the list\n    for i in range(len(new_list)):\n        # if the element is zero, move it to the end of the list\n        if new_list[i] == 0:\n            new_list[i], new_list[-1] = new_list[-1], new_list[i]\n    \n    # return the modified list\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            i += 1\n        else:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Create a new list to store the non-zero numbers\n    new_list = []\n    \n    # Loop through the given list\n    for num in num_list:\n        # If the number is not zero, append it to the new list\n        if num!= 0:\n            new_list.append(num)\n    \n    # Loop through the new list and move all zeroes to the end\n    for i in range(len(new_list)-1, -1, -1):\n        if new_list[i] == 0:\n            # If the number is zero, move it to the end of the list\n            new_list.pop(i)\n            new_list.append(0)\n    \n    # Return the new list with all zeroes moved to the end\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1-zero_count] = num_list[len(num_list)-1-zero_count], num_list[i]\n            zero_count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    # Initialize an empty list to store non-zero numbers\n    non_zero_list = []\n\n    # Iterate over the numbers in the given list\n    for num in num_list:\n        # If the number is not zero, append it to the non_zero_list\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # Iterate over the numbers in the non_zero_list again and append the zeros to the end\n    for num in non_zero_list:\n        num_list.append(num)\n\n    # Remove the non_zero_list as it has been used to store non-zero numbers\n    del non_zero_list\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    # XOR of all pairs of elements in the array\n    xor_sum = sum(x ^ y for x in arr for y in arr)\n\n    # XOR of all elements in the array\n    xor_all = sum(arr)\n\n    # Calculate the sum of xor of all pairs of numbers in the array\n    pair_xor_sum = xor_sum ^ xor_all\n\n    # Return the sum of xor of all pairs of numbers in the array\n    return pair_xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize the sum to zero\n    sum_xor = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # Iterate through the remaining elements in the array\n        for j in range(i + 1, n):\n            # XOR the two numbers and add the result to the sum_xor variable\n            sum_xor += arr[i] ^ arr[j]\n\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of n numbers as input and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    # Initialize a variable to store the sum of xor of all pairs of numbers in the list\n    xor_sum = 0\n    \n    # Loop through the list and calculate the xor of all pairs of numbers\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n            \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor = arr[i] ^ arr[j]\n            sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n\n    # calculating the sum of xor of all pairs of numbers in the given list\n    xor_sum = sum([a^b for a in arr for b in arr if a!=b])\n\n    # returning the sum of xor of all pairs of numbers in the given list\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    # initialize sum to 0\n    xor_sum = 0\n    \n    # loop through the array\n    for i in range(n-1):\n        # calculate xor of current element and next element\n        xor_sum = xor_sum ^ arr[i] ^ arr[i+1]\n    \n    # return xor_sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR of all pairs of numbers\n    xor_sum = sum(a^b for a in arr for b in arr)\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the input iterable to a list\n    input_list = list(iterable)\n    # Build a max heap from the input list\n    hq.heapify(input_list)\n    # Extract the elements from the max heap and add them to a new list\n    sorted_list = []\n    while input_list:\n        max_value = hq.heappop(input_list)\n        sorted_list.append(max_value)\n    # Convert the sorted list back to an iterable and return it\n    return iter(sorted_list)\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input and returns the sorted list using the heap sort algorithm.\n    '''\n    # Convert the iterable to a list\n    array = list(iterable)\n    # Build the heap\n    hq.heapify(array)\n    # Extract elements from the heap one by one\n    sorted_list = []\n    while array:\n        sorted_list.append(hq.heappop(array))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Create a min heap from the list\n    min_heap = hq.heappushpop(iterable)\n    # Sort the list using the min heap\n    while min_heap:\n        yield min_heap\n        hq.heappushpop(min_heap, next(iterable))"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sort the given iterable using the heap sort algorithm.\n\n    Args:\n        iterable: An iterable object.\n\n    Returns:\n        The sorted iterable object.\n    \"\"\"\n    # Convert the iterable to a list to allow for modifying it.\n    list_copy = list(iterable)\n    n = len(list_copy)\n\n    # Build a max-heap from the list.\n    for i in range(n // 2 - 1, -1, -1):\n        hq.heapify(list_copy, i, n)\n\n    # Extract the maximum element from the heap and add it to the end of the list.\n    for i in range(n - 1, 0, -1):\n        hq.heappushpop(list_copy, list_copy[i])\n\n    # Convert the list back to the original iterable object.\n    return list_copy"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a max-heap from the input list\n    max_heap = [max(iterable)]\n    for item in iterable[1:]:\n        if item > max_heap[0]:\n            hq.heapreplace(max_heap, item)\n    return [max_heap[0]] + heap_sort(max_heap[1:])"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a max heap from the given list\n    heap = hq.heapify(iterable)\n    \n    # create an empty list to store the sorted elements\n    sorted_list = []\n    \n    # extract and append the maximum element from the heap to the sorted list\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes a list as input and sorts it using the heapsort algorithm.\n    '''\n    # create a min heap from the input list\n    hq.heapify(iterable)\n    \n    # use heapify to convert the list into a max heap\n    for i in range(len(iterable) // 2 - 1, -1, -1):\n        hq.heappushpop(iterable, hq.heappop(iterable))\n    \n    # convert the list back into a regular list and return it\n    return [hq.heappop(iterable) for i in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    my_list = list(iterable)\n    # Create a min heap\n    hq.heapify(my_list)\n    # Sort the heap\n    for i in range(len(my_list)):\n        hq.heappop(my_list)\n    return my_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print(\"No profit and no loss\")\n    else:\n        print(\"Profit or loss\")\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Check if the sale amount is less than the actual cost\n    if sale_amount < actual_cost:\n        # If it is, the sale has no profit and no loss\n        print(\"Sale has no profit and no loss\")\n        return True\n    else:\n        # If it's not, the sale has a loss\n        print(\"Sale has a loss\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss\n\n    Parameters:\n    actual_cost (int): actual cost of the sale\n    sale_amount (int): amount to be sold\n\n    Returns:\n    bool: True if no profit and no loss, False otherwise\n    '''\n\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return True\n    elif actual_cost == sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost <= sale_amount:\n        print(\"No profit and no loss\")\n    else:\n        print(\"Profitable or lossy transaction\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Args:\n        actual_cost (int): the actual cost of the sale\n        sale_amount (int): the amount being sold\n\n    Returns:\n        (bool): True if the sale has no profit and no loss, else False\n    \"\"\"\n\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount >= 0: \n        return \"No profit\"\n    elif actual_cost - sale_amount < 0:\n        return \"No loss\"\n    else: \n        return \"Profit or loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # check if the sale amount is greater than or equal to the actual cost\n    if sale_amount >= actual_cost:\n        # check if the sale amount is equal to the actual cost\n        if sale_amount == actual_cost:\n            # if the sale amount is equal to the actual cost, then the sale is a win\n            return True\n        else:\n            # if the sale amount is greater than the actual cost, then the sale is a loss\n            return False\n    else:\n        # if the sale amount is less than the actual cost, then there is no profit or loss\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer for a given wind speed in km/h and temperature in celsius.\n\n    Parameters:\n    v (float): Wind speed in km/h\n    t (float): Temperature in celsius\n\n    Returns:\n    int: Wind chill index rounded to the nearest integer\n    \"\"\"\n\n    # Convert temperature to Fahrenheit\n    t_f = (t * 9/5) + 32\n    \n    # Calculate the dew point temperature\n    dpt = 0.6219*t + 11.37\n    \n    # Calculate the wind chill index using the formula:\n    # WC = 35.74 + 0.6215 * T - 35.75 * T**2 + 0.4275 * T**3\n    wc = 35.74 + 0.6215 * t - 35.75 * t**2 + 0.4275 * t**3\n    \n    # Calculate the actual wind chill index\n    if v > 0:\n        ac = wc + 0.006215 * v - 11.37\n    else:\n        ac = wc\n    \n    # Round the actual wind chill index to the nearest integer\n    ac_int = round(ac)\n    \n    # Calculate the temperature gradient for the wind chill index\n    if v > 0:\n        grad = 0.006215\n    else:\n        grad = 0\n    \n    # Calculate the wind chill temperature\n    wc_t = ac_int - grad\n    \n    # Return the wind chill index rounded to the nearest integer\n    return ac_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the dew point temperature\n    dew_point = 243.04*(math.exp((17.625*t)/(t+243.04)))\n    \n    # Calculate the wind chill index using the formula:\n    # W = 35.74 + 0.6215V - 35.75*T/T_dew + 0.4275*V^0.16\n    # where V is the wind velocity in m/s, T is the temperature in K, T_dew is the dew point temperature in K, and W is the wind chill index in C\n    w = 35.74 + 0.6215*v - 35.75*t/dew_point + 0.4275*v**0.16\n    \n    # Round the wind chill index to the nearest integer and return it\n    return int(math.ceil(w))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Constants\n    C = 35.87  # temperature coefficient\n    R = 287  # gas constant\n    # Convert temperature to kelvin\n    T_K = (t + 273.15) * 1.8 + 273.15\n    # Calculate wind chill index\n    wci = round(C * (T_K - 273.15) / (R * (v * 0.01 * 0.01)) + 26.45)\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert temperature to Kelvin\n    k = t + 273.15\n\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * v - 35.75 * math.exp((17.625 * k) / (k + 243.12)) + 0.4275 * t\n\n    # Round the wind chill index to the nearest integer\n    wci = round(wc)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature in Celsius\n    wc_c = 35.74 + 0.6215 * v - 35.757 * math.log(t + 273.15) + 0.4275 * (t - 273.15) ** 2\n    # Calculate the wind chill temperature in Fahrenheit\n    wc_f = wc_c * 9/5 + 32\n    \n    # Round the wind chill temperature to the nearest integer\n    wc_int = int(round(wc_f))\n    \n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Formula: WCI = -459.67 + 35.75*T + 0.6215*T^2 - 11.37*math.log(T) + 0.3965*math.log(T)^2\n    wci = -459.67 + 35.75*t + 0.6215*t**2 - 11.37*math.log(t) + 0.3965*math.log(t)**2\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Convert temperature from Celsius to Kelvin\n    k = t + 273.15\n    \n    # Calculate the dew point temperature using the specific heat capacity of water\n    dew_point = ((v**2 * math.exp(-(k/273.15)**0.25))/(273.15*math.exp(-(k/273.15)**0.25) - (v**2)/(273.15*math.exp(-(k/273.15)**0.25))))\n    \n    # Calculate the wind chill index using the formula:\n    # I = 35.74 + 0.6215 * T - 35.75 * (T - dew_point)\n    i = 35.74 + 0.6215 * t - 35.75 * (t - dew_point)\n    \n    # Round the result to the next integer\n    ic = math.floor(i + 0.5)\n    \n    # Return the wind chill index\n    return ic\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    v (float): wind velocity in km/h\n    t (float): temperature in celsius\n\n    Returns:\n    float: the wind chill index rounded to the next integer\n    \"\"\"\n    # Convert temperature to Kelvin\n    T = t + 273.15\n\n    # Calculate the humidity ratio\n    if v > 0:\n        # Adiabatic approximation\n        H = (0.0065 * T) + (0.396 * v) + (-0.133 * T * v) + (-0.00037 * T ** 2) + (0.000002 * T ** 3)\n        # Convert to relative humidity\n        R = H / 100\n    else:\n        # Ideal gas approximation\n        R = 1\n\n    # Calculate the wind chill index\n    wc = math.ceil(23.44 * math.log(R) + 11.28 * (1 - R) + 0.621 * (T - 273.15))\n\n    # Round the wind chill index to the next integer\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the dew point temperature\n    dew_point = 243.04*(math.exp((17.625*t)/(t+243.04))) - 459.67\n\n    # Calculate the wind chill index\n    wci = (dew_point - 32.0)*(5.0/9.0)*(v/3.6)\n\n    # Round the wind chill index to the nearest integer\n    wci = int(wci + 0.5)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # convert velocity and temperature to SI units\n    v = v / 1000  # convert to m/s\n    t = t - 273.15  # convert to K\n\n    # calculate the heat capacity of air at constant pressure\n    cp = 1004.6  # J/(kg-K)\n    alpha = 1.0066  # coefficient of dissociation of water vapor (unitless)\n\n    # calculate the specific heat capacity of air at constant pressure\n    h = cp * math.exp(alpha * t / (cp * t + 1000))\n\n    # calculate the specific heat capacity of air at constant pressure for wind chill index calculation\n    h_wind = 0.01 * cp * math.exp(0.0008 * v)\n\n    # calculate the wind chill index\n    wci = ((h - h_wind) / h) * 100\n\n    # round the wind chill index to the nearest integer\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            filtered_names.append(name)\n    total_length = sum([len(name) for name in filtered_names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of lengths of names\n    total_length = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it and move on to the next name\n            continue\n        # Otherwise, add the length of the name to the total length\n        total_length += len(name)\n        \n    # Return the total length of names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_name_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_name_length += len(name)\n    return total_name_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    sum_of_lengths = sum([len(name) for name in filtered_names])\n    return sum_of_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_lengths = []\n    for name in sample_names:\n        if name.istitle():\n            continue\n        name_lengths.append(len(name))\n    return sum(name_lengths)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the valid names\n    valid_names = []\n    # iterate over the names in the sample list\n    for name in sample_names:\n        # check if the first letter of the name is uppercase\n        if name[0].isupper():\n            # if so, add it to the valid names list\n            valid_names.append(name)\n    # sum the length of the valid names\n    sum_length = sum(len(name) for name in valid_names)\n    # return the sum of the length of the valid names\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if not name.startswith('a') and not name.startswith('e') and not name.startswith('i') and not name.startswith('o') and not name.startswith('u') and not name.startswith('A') and not name.startswith('E') and not name.startswith('I') and not name.startswith('O') and not name.startswith('U'):\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize sum variable to 0\n    sum_length = 0\n    \n    # Iterate over names in the list\n    for name in sample_names:\n        # Remove names that start with a lowercase letter\n        if name[0].isupper():\n            # Add the length of the name to the sum\n            sum_length += len(name)\n    \n    # Return the sum of the lengths of the names that do not start with a lowercase letter\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*?\\)')\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    # Use regular expressions to remove the parentheses from the input string\n    pattern = r'\\([^()]*?\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the variables for the first two nonagonal numbers\n    nonagonal1 = 1\n    nonagonal2 = 2\n\n    # Loop through the remaining nonagonal numbers\n    for i in range(2, n+1):\n        # Calculate the next nonagonal number by adding the previous two\n        nonagonal = nonagonal1 + nonagonal2\n        # Update the variables for the next iteration\n        nonagonal1 = nonagonal2\n        nonagonal2 = nonagonal\n\n    # Return the nth nonagonal number\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Define the variable to store the nonagonal number\n    nonagonal = 0\n    \n    # Calculate the number of rows and columns in the triangle\n    num_rows = int(n/2)\n    num_cols = n - num_rows*2\n    \n    # Iterate through the rows and columns of the triangle\n    for i in range(num_rows):\n        for j in range(num_cols):\n            # Calculate the nonagonal number\n            nonagonal += (i+j+1)\n    \n    # Return the nonagonal number\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def is_prime(num):\n        '''\n        A function to check whether a number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nonagonal_number(i):\n        '''\n        A function to find the nth nonagonal number.\n        '''\n        if is_prime(i):\n            return i * (i + 1)\n        else:\n            return nonagonal_number(i - 1) + 1\n\n    return nonagonal_number(n)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # The formula for the nth nonagonal number is (n * (3 * n - 1)) / 2\n    return ((n * (3 * n - 1)) // 2) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Initialize variables\n    a, b = 1, 2\n    count = 0\n    # Calculate the nth nonagonal number\n    while count < n:\n        # Update the a and b values\n        a, b = b, a + b\n        # Increment the count\n        count += 1\n    # Return the nth nonagonal number\n    return b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Please enter a positive integer\"\n\n    # Initialize variables for sum of squares and number of squares\n    sum_squares = 0\n    num_squares = 0\n\n    # Loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the sum of squares of the squares of the numbers from 1 to i\n        sum_squares += (i * (i + 1)) * (i * (i + 1))\n\n        # Count the number of squares of the numbers from 1 to i\n        num_squares += i * i\n\n    # Calculate the nth nonagonal number by dividing the sum of squares by the number of squares\n    nth_nonagonal = sum_squares / num_squares\n\n    return nth_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Define a list of nonagonal numbers\n    nonagonal_numbers = [0]\n\n    # Loop through the first n-1 numbers and add the n-th number to each number\n    for i in range(1, n):\n        nonagonal_numbers.append(nonagonal_numbers[i-1] + i)\n\n    # Return the nth nonagonal number\n    return nonagonal_numbers[n-1]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    j = 1\n    while i <= n:\n        j = 1\n        while j <= n-i+1:\n            print(i, end=' ')\n            j += 1\n        print()\n        i += 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Check if n is odd\n    if n % 2 == 1:\n        return False\n    \n    # Initialize the sum and current number\n    sum_n = 0\n    num = 1\n    \n    # Loop through the range of numbers from 1 to n/2\n    for i in range(1, n//2+1):\n        # Calculate the current sum\n        sum_n += num\n        \n        # Update the current number\n        num += 2\n    \n    # Check if the sum is greater than n\n    if sum_n > n:\n        return False\n    \n    return True"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_numbers = []\n    for i in range(1, n+1):\n        nonagonal_numbers.append((2*i-1)**2)\n    return nonagonal_numbers"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-alphanumeric characters from the text\n    text = re.sub(r'\\W+','', text)\n    # Split the text into words\n    words = text.split()\n    # Loop through each word and check if it has 'z' at the start and end\n    for word in words:\n        # Check if the word starts with 'z' and ends with 'z'\n        if word.startswith('z') and word.endswith('z'):\n            # If it does, return True\n            return True\n    # If we make it through the loop without finding a match, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)(?=[^a-zA-Z0-9\\s]|$)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words using regular expressions\n    words = re.findall(r'\\b[a-zA-Z]+\\b', text)\n    \n    # Iterate through each word and check if it contains 'z' at the start or end\n    for word in words:\n        if 'z' in word and (word == word[::-1] or word == word[1:-1]):\n            return True\n    \n    # If no word contains 'z', return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*z)\\w+z\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return any(match in ('z', 'Z') for match in matches)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    # Remove non-word characters\n    wordz_pattern = r'\\b\\w*[zZ]\\w*\\b'\n    # Search for the pattern in the text\n    wordz_matches = re.findall(wordz_pattern, text)\n    # Return True if there is a match, False otherwise\n    return bool(wordz_matches)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-word characters and split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Loop through each word and check if it has 'z' at the start and end\n    for word in words:\n        if word.startswith('z') and word.endswith('z'):\n            return True\n\n    # If no words contain 'z', return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b(z)(\\w*)\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array upto k-1\n    for i in range(k-1, len(input)-1, -1):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Check if input is a list\n    if not isinstance(input, list):\n        raise ValueError(\"Input should be a list\")\n\n    # Check if k is a positive integer\n    if not isinstance(k, int) or k <= 0:\n        raise ValueError(\"K should be a positive integer\")\n\n    # Check if k is less than or equal to the length of the array\n    if k > len(input):\n        raise ValueError(\"K should be less than or equal to the length of the array\")\n\n    # Reverse the array upto the given position\n    reversed_input = input[::-1][:k]\n\n    return reversed_input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # initialize an empty list to store reversed array\n    reversed_array = []\n    # loop through the array starting from the given position\n    for i in range(k-1, len(input)):\n        # append the current element to the reversed array\n        reversed_array.append(input[i])\n        # shift the elements from the end to the given position to the beginning of the array\n        for j in range(len(input)-1, k-2, -1):\n            input[j] = input[j-1]\n    # return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Initialize two pointers - one for starting from the first element and one for starting from the given position\n    start = 0\n    end = k-1\n\n    # Swap the elements at starting and ending position\n    input[start], input[end] = input[end], input[start]\n\n    # Reverse the remaining elements\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    # Print the reversed array\n    print(input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # initialize the index to reverse the array from\n    start = 0\n\n    # initialize the index to reverse the array to\n    end = k - 1\n\n    # loop through the array until the start index is greater than or equal to the end index\n    while start < end:\n        # swap the elements at the start and end indexes\n        input[start], input[end] = input[end], input[start]\n\n        # increment the start index and decrement the end index\n        start += 1\n        end -= 1\n\n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function reverses an array upto a given position.\n    It takes two arguments:\n    1. input - The array to be reversed.\n    2. k - The position where the reversal will be done.\n    '''\n    # initialize two pointers, one for starting from the beginning of the array and the other for ending at the position k-1\n    start = 0\n    end = k-1\n    # swap the elements at the starting and ending positions\n    input[start], input[end] = input[end], input[start]\n    # reverse the array from start to k-2\n    for i in range(start+1, end):\n        input[i], input[start] = input[start], input[i]\n    # reverse the array from k to end\n    for i in range(k, len(input)):\n        input[i], input[end] = input[end], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k, n):\n        input[i], input[n-i] = input[n-i], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    if n <= k:\n        return input\n    else:\n        left = 0\n        right = k - 1\n        while left < right:\n            input[left], input[right] = input[right], input[left]\n            left += 1\n            right -= 1\n        return reverse_Array_Upto_K(input, k + 1)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # Reverse the array from index 0 to k-1\n    input[:k] = input[:k][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(0, k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return test_tup + tuple(test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Copy the original tuple\n    new_tup = test_tup[:]\n    \n    # Add the dictionary to the tuple\n    new_tup.append(test_dict)\n    \n    # Return the new tuple\n    return tuple(new_tup)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with the items from the test_dict and the test_tup\n    new_dict = dict(test_dict.items() + test_tup)\n    \n    # convert the new_dict to a tuple and return it\n    return tuple(new_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {**test_dict}\n    return (test_tup, new_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key in test_dict.keys():\n        test_tup = test_tup + (test_dict[key],)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary into a list of tuples\n    test_list = [(k, v) for k, v in test_dict.items()]\n    # Append the dictionary to the tuple\n    new_tup = tuple(test_tup + test_list)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()\n    new_dict['test'] = 'value'\n    return (test_tup, new_dict)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * (N+1) for i in range(N+1)]\n    \n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if i == 1 and j == 1:\n                dp[i][j] = cost[0][0]\n            elif i == 1:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + cost[i-1][j-1]\n            elif j == 1:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + cost[i-1][j-1]\n                \n    return dp[N][N] / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n\n    # Initialize variables for maximum and minimum costs\n    max_cost = float('-inf')\n    min_cost = float('inf')\n\n    # Initialize variables for maximum and minimum paths\n    max_path_length = 0\n    max_path = []\n    min_path_length = float('inf')\n    min_path = []\n\n    # Traverse all possible paths\n    for i in range(N):\n        for j in range(N):\n            # If the current cell is not visited yet,\n            # check if it can be included in a path\n            if cost[i][j]!= float('inf') and cost[i][j]!= float('-inf'):\n                # Calculate the cost of the path from current cell\n                path_cost = 0\n                path = []\n                current_i = i\n                current_j = j\n\n                # Add the current cell to the path\n                path.append((current_i, current_j))\n\n                # Traverse the remaining cells in the path\n                while current_i < N - 1 and current_j < N - 1:\n                    path_cost += cost[current_i][current_j]\n                    current_i += 1\n                    current_j += 1\n\n                # If the current path has a higher cost than\n                # the maximum path, update maximum path and\n                # its length\n                if path_cost > max_cost:\n                    max_cost = path_cost\n                    max_path = path\n                    max_path_length = len(path)\n\n                # If the current path has a lower cost than\n                # the minimum path, update minimum path and\n                # its length\n                elif path_cost < min_cost:\n                    min_cost = path_cost\n                    min_path = path\n                    min_path_length = len(path)\n\n    # Calculate the average cost of the maximum path\n    if max_path_length > 0:\n        max_avg_cost = max_cost / max_path_length\n    else:\n        max_avg_cost = 0\n\n    # Calculate the average cost of the minimum path\n    if min_path_length > 0:\n        min_avg_cost = min_cost / min_path_length\n    else:\n        min_avg_cost = 0\n\n    # Return the maximum average path\n    return max_avg_cost, min_avg_cost"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j-1], dp[i][j]) + cost[i][j]\n            elif j == 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    max_avg = max(dp[N-1][N-1], dp[N-2][N-1])\n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_avg = float('-inf')\n    total_cost = 0\n    visited_cells = 0\n    \n    for i in range(N):\n        for j in range(N):\n            visited_cells += 1\n            if i == 0 and j == 0:\n                # Start of the path\n                current_path = [(i, j)]\n            elif i == N-1 and j == N-1:\n                # End of the path\n                if len(current_path) == 1:\n                    avg = 0\n                else:\n                    avg = total_cost / (len(current_path) - 1)\n                max_avg = max(avg, max_avg)\n                total_cost = 0\n                visited_cells = 0\n            else:\n                # Middle of the path\n                if (i == 0 and j < N-1) or (i < N-1 and j == 0) or (i < N-1 and j < N-1):\n                    # Move both current and next cell\n                    new_cost = cost[i][j] + cost[i][j+1] + cost[i+1][j] + cost[i+1][j+1]\n                    current_path.append((i+1, j))\n                    visited_cells += 4\n                else:\n                    # Move current cell only\n                    new_cost = cost[i][j] + cost[i][j+1]\n                    current_path.append((i, j+1))\n                    visited_cells += 2\n                total_cost += new_cost\n    \n    if visited_cells > 0:\n        avg = total_cost / visited_cells\n        max_avg = max(avg, max_avg)\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Initialize an empty list to store the paths with maximum average\n    max_paths = []\n    # Loop through all possible paths\n    for i in range(n):\n        for j in range(n):\n            # Check if current cell is already visited or not\n            if cost[i][j] == float('inf') or (i == n-1 and j == n-1):\n                continue\n            # Initialize a list to store the visited cells in the path\n            visited = []\n            # Initialize a variable to store the sum of cost in the path\n            cost_sum = 0\n            # Loop through all possible directions to move in the path\n            for k in range(4):\n                # Check if the next cell is within the bounds of the matrix\n                if (i+k < 0 or i+k >= n or j+k < 0 or j+k >= n):\n                    break\n                # Check if the next cell is not already visited and if it is a valid cell\n                if (i+k, j+k) in visited or cost[i+k][j+k] == float('inf'):\n                    continue\n                # Check if the next cell is a valid cell that can be traversed in the given direction\n                if (i+k, j+k) == (n-1, n-1):\n                    # If it is the bottom right cell, add the final cost to the sum and break out of the loop\n                    cost_sum += cost[i+k][j+k]\n                    break\n                # Otherwise, add the next cell to the visited list and move in the given direction\n                visited.append((i+k, j+k))\n                if k == 0:\n                    # Move right if current direction is 0 or 1\n                    i += 1\n                elif k == 1:\n                    # Move down if current direction is 2 or 3\n                    j += 1\n            # Calculate the average of the cost in the path and store it in the max_paths list\n            if visited:\n                path_avg = cost_sum / len(visited)\n                max_paths.append((visited, path_avg))\n    # Sort the paths with maximum average in descending order\n    max_paths = sorted(max_paths, key=lambda x: x[1], reverse=True)\n    # Return the first path with maximum average\n    return max_paths[0][0]"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    \n    # Initialize the top row\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        \n    # Initialize the left column\n    for j in range(N):\n        dp[j][0] = cost[j][0]\n        \n    # Fill the rest of the matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            \n    # Find the maximum average\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n                \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n    A path is defined as a specific sequence of cells that starts from the top-left cell\n    move only right or down and ends on bottom right cell. We want to find a path with the maximum average\n    over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    # Initialize variables\n    max_avg = 0\n    total_cost = 0\n    visited = set()\n    path = [(0, 0)]\n\n    # Generate all paths from the top-left cell\n    while path[-1][0] < len(cost) - 1 and path[-1][1] < len(cost[0]) - 1:\n        next_pos = (path[-1][0] + 1, path[-1][1] + 1)\n        if next_pos not in visited:\n            visited.add(next_pos)\n            total_cost += cost[path[-1][0]][path[-1][1]]\n            path.append(next_pos)\n            if len(visited) == len(cost) * len(cost[0]):\n                avg_cost = total_cost / len(visited)\n                if avg_cost > max_avg:\n                    max_avg = avg_cost\n                    max_path = path\n                total_cost = 0\n                path.pop()\n\n    # Calculate the average cost of the maximum path\n    if max_path:\n        avg_cost = total_cost / len(max_path)\n        return max_avg\n    else:\n        return 0"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N < 1:\n        return 0\n\n    # Initialize variables to store the maximum average and its index\n    max_avg = 0\n    max_avg_index = 0\n\n    # Loop through all possible paths\n    for i in range(N):\n        for j in range(N):\n            # If the current cell is already visited, skip it\n            if cost[i][j]!= 0:\n                continue\n\n            # Compute the total cost of the path starting from this cell\n            total_cost = cost[i][j]\n            num_cells = 1\n\n            # Find all possible paths from this cell that move only right or down\n            for k in range(i, N):\n                for l in range(j, N):\n                    if cost[k][l]!= 0:\n                        break\n\n                    # Move right or down\n                    if k == i:\n                        cost[k][l] = cost[k][l] + cost[k + 1][l]\n                    elif l == j:\n                        cost[k][l] = cost[k][l] + cost[k][l + 1]\n\n                    # Compute the total cost of the path from this cell\n                    total_cost += cost[k][l]\n                    num_cells += 1\n\n            # Update the maximum average if necessary\n            avg = total_cost / num_cells\n            if avg > max_avg:\n                max_avg = avg\n                max_avg_index = (i, j)\n\n    # Return the maximum average of the paths\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Find the maximum sum and the maximum path\n    max_sum = float('-inf')\n    max_path = None\n\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Check if we can move to the cell\n            if j+1 < len(cost[0]) and cost[i][j] > cost[i][j+1]:\n                # Move right and update the sum\n                new_sum = cost[i][j] + cost[i][j+1]\n                if new_sum > max_sum:\n                    max_sum = new_sum\n                    max_path = (i, j, i, j+1)\n            elif i+1 < len(cost) and cost[i][j] > cost[i+1][j]:\n                # Move down and update the sum\n                new_sum = cost[i][j] + cost[i+1][j]\n                if new_sum > max_sum:\n                    max_sum = new_sum\n                    max_path = (i, j, i+1, j)\n\n    # Calculate the average of the maximum path\n    if max_path is not None:\n        sum_cost = sum(cost[i] for i in range(max_path[0], max_path[2]+1) for j in range(max_path[1], max_path[3]+1))\n        avg_cost = sum_cost / (max_path[2]-max_path[0]+1) ** 2\n        return avg_cost\n    else:\n        return 0"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(i, j, visited, path_sum):\n        visited[i][j] = True\n        if i == N-1 and j == N-1:\n            result = max(result, path_sum/len(path))\n            return\n        if i < N and not visited[i][j+1]:\n            path.append((i, j))\n            dfs(i+1, j, visited, path_sum + cost[i][j])\n            path.pop()\n        if i > 0 and not visited[i-1][j]:\n            path.append((i, j))\n            dfs(i-1, j, visited, path_sum + cost[i][j])\n            path.pop()\n        visited[i][j] = False\n\n    N = len(cost)\n    visited = [[False] * N for _ in range(N)]\n    result = float('-inf')\n    path = []\n    dfs(0, 0, visited, 0)\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = students[name]\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name: info for name, info in students.items() if info[0] > h and info[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name,data in students.items():\n        height,weight = data\n        if height>h and weight>w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # filter students whose height and weight are above the minimum\n    filtered_students = {key: value for key, value in students.items() if value[0] > h and value[1] > w}\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student_name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student_name] = students[student_name]\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            result[name] = data\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k: v for k, v in students.items() if v[0] > h and v[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    # create an empty list to store filtered students\n    filtered_students = []\n    \n    # loop through each student in the dictionary\n    for name, data in students.items():\n        height, weight = data\n        \n        # check if the student's height is above the minimum height\n        if height > h:\n            # check if the student's weight is above the minimum weight\n            if weight > w:\n                # if both conditions are satisfied, append the student to the filtered_students list\n                filtered_students.append(name)\n    \n    # return the filtered_students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_count += 1\n    return same_count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize the sum to 0\n    sum_digits = 0\n    # loop through each digit of the base and calculate the sum to the specified power\n    for digit in base_str:\n        digit_int = int(digit)\n        sum_digits += digit_int**power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize a variable to hold the sum of digits\n    total = 0\n    # Loop through the digits of the base and add them to the total\n    for digit in base_str:\n        total += int(digit)\n    # Calculate the power of the total and return the result\n    return total ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum variable\n    sum_digits = 0\n    # Iterate over the digits of the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum variable\n        sum_digits += int(digit)\n    # Calculate the sum of all digits raised to the specified power\n    result = sum_digits ** power\n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to a string to allow multiplication and division operations\n    base_str = str(base)\n    # initialize sum to 0\n    total_sum = 0\n    # loop through each digit of the base\n    for digit in base_str:\n        # calculate the digit raised to the power\n        digit_raised_to_power = int(digit)**power\n        # add the digit raised to the power to the total sum\n        total_sum += digit_raised_to_power\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit)**power\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit ** power\n        power //= 10\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Initialize sum to zero\n    sum_of_digits = 0\n    \n    # Convert base to string\n    base_string = str(base)\n    \n    # Loop through each character in the string and add its digit to the sum\n    for digit in base_string:\n        sum_of_digits += int(digit) ** power\n        \n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit\n        base //= 10\n        power -= 1\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and convert the power to an integer\n    base_str = str(base)\n    power = int(power)\n    \n    # Initialize a variable to store the sum\n    sum = 0\n    \n    # Iterate through each digit of the base and add it to the sum to the power\n    for digit in base_str:\n        sum += int(digit) ** power\n    \n    # Return the sum of the digits raised to the specified power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit ** power\n        base //= 10\n        power -= 1\n    return sum_of_digits"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\".*?[^\\\\]\"\\s'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define the regular expression pattern to match the quotation marks\n    pattern = r'\"([^\"]+)\"'\n    # Use the re.findall() method to find all the occurrences of the pattern in the text\n    quotations = re.findall(pattern, text1)\n    # Return a list of the extracted quotations\n    return quotations"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define a regular expression pattern to match quotation marks\n    pattern = r'\"([^\"]*)\"'\n    # use the re.finditer() function to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text1)\n    # initialize an empty list to store the extracted values\n    extracted_values = []\n    # iterate over the matches and append each group to the extracted_values list\n    for match in matches:\n        extracted_values.append(match.group(1))\n    # join the extracted_values list into a single string using the separator \", \"\n    extracted_text = \", \".join(extracted_values)\n    # return the extracted_text\n    return extracted_text"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # find all occurrences of quotation marks\n    matches = re.findall(r'(\".*?\"|\\'.*?\\')', text)\n    # extract the values between quotation marks and return them as a list\n    return [match[1:-1] for match in matches]"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\\s|^)\"(.*?)\"(?=\\s|$)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Remove any non-word characters except for spaces\n    text1 = re.sub(r'[^\\w\\s]', '', text1)\n    # Extract all the words between quotation marks\n    words = re.findall(r'\".*?\"', text1)\n    # Return a list of words\n    return words"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'(?<!\\\\)\"(.+?)\"') # pattern to match double quotes and store the value inside the parentheses\n    matches = re.findall(pattern, text) # find all occurrences of the pattern in the text\n    \n    if len(matches) == 0:\n        return None\n    \n    # join all the values in a string and return it\n    return''.join(matches)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    new_tup = []\n    for i in range(N):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # Initialize an empty list to store the multiplication results\n    result_list = []\n    \n    # Loop through the tuple, skipping the first element (index 0)\n    for i in range(1, len(test_tup)):\n        # Calculate the multiplication result and append it to the list\n        result_list.append(test_tup[i] * test_tup[i+1])\n    \n    # Return the list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    t_3 = test_tup[2]\n    t_4 = test_tup[3]\n    t_5 = test_tup[4]\n    t_6 = test_tup[5]\n    t_7 = test_tup[6]\n    t_8 = test_tup[7]\n    t_9 = test_tup[8]\n    t_10 = test_tup[9]\n\n    t_2_times_t_3 = t_2 * t_3\n    t_4_times_t_5 = t_4 * t_5\n    t_6_times_t_7 = t_6 * t_7\n    t_8_times_t_9 = t_8 * t_9\n    t_10_times_t_11 = t_10 * t_11\n\n    result_tuple = (t_1 * t_2_times_t_3, t_1 * t_4_times_t_5, t_1 * t_6_times_t_7, t_1 * t_8_times_t_9, t_1 * t_10_times_t_11)\n\n    return result_tuple"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize a list to store the result\n    result = []\n    # loop through the elements of the input tuple\n    for i in range(len(test_tup)-1):\n        # multiply the current element with the next element and append the result to the result list\n        result.append(test_tup[i] * test_tup[i+1])\n    # return the result list\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    result += (test_tup[-1] * test_tup[0],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize the result tuple with the first element of the input tuple\n    result_tup = (test_tup[0],)\n    # Loop through the remaining elements of the input tuple\n    for i in range(1, len(test_tup)):\n        # Multiply the current element with the next element\n        element = test_tup[i] * test_tup[i+1]\n        # Append the result to the result tuple\n        result_tup += (element,)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i in lst1 for j in lst2]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists [a_1,...,a_n], [b_1,...,b_n] as input and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists [a_1,...,a_n] and [b_1,...,b_n] as input and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        print(\"The two lists must have the same length.\")\n        return None\n    else:\n        return [lst1[i]+lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes as input two lists [a_1,...,a_n] and [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Define an empty list to store the consecutive duplicates\n    consecutive_list = []\n    # Loop through the given list\n    for i in range(len(nums)-1):\n        # Check if the current element is equal to the next element\n        if nums[i] == nums[i+1]:\n            # If the current element is equal to the next element, append it to the consecutive duplicates list\n            consecutive_list.append(nums[i])\n    # Remove the consecutive duplicates from the original list\n    for i in consecutive_list:\n        nums.remove(i)\n    # Return the original list with consecutive duplicates removed\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(sorted(nums)):\n        if list(group).count(list(group)[0]) == len(list(group)):\n            yield from group\n            break"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [num for key, group in groupby(nums) if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(sorted(set(nums)))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n    consecutive_nums = []\n    for num, count in nums_dict.items():\n        if count == 1:\n            consecutive_nums.append(num)\n    return consecutive_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key == 0:\n            continue\n        else:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # create a list of consecutive duplicates\n    consecutive_duplicates_list = []\n    for i, group in enumerate(groupby(nums)):\n        group = list(group)\n        if len(group) > 1:\n            consecutive_duplicates_list.append(group[1])\n\n    # remove consecutive duplicates from the original list\n    for num in consecutive_duplicates_list:\n        nums.remove(num)\n\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    unique_nums = []\n    prev_num = None\n\n    for num in nums:\n        if prev_num is not None and num == prev_num + 1:\n            continue\n        prev_num = num\n        unique_nums.append(num)\n\n    return unique_nums"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2) + 2 * math.pi * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the base of the cone\n    base = r * math.sin(math.pi / 6)\n    \n    # calculate the lateral surface area using the formula: lateral surface area = (base * height) / 2\n    lateral_surface_area = base * h / 2\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * r + math.pi * r * h + math.pi * h * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # calculate the area of the base of the cone\n    area_base = math.pi * r**2\n    \n    # calculate the area of the top of the cone\n    area_top = math.pi * r**2 * h\n    \n    # calculate the lateral surface area\n    lateral_surface_area = area_base + area_top\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone\n    lateral_area = (math.pi * r**2 * h) / 3\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * (r**2 + h**2)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # Formula to find the lateral surface area of a cone\n    lateral_area = (math.pi * r**2) * (h / 2)\n    \n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*(r**2) + 2*(math.pi*r*h)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # Define a regular expression pattern to match all occurrences of spaces, commas, or dots\n    pattern = r'\\s+|,+|\\..+'\n    # Use the re.sub() function to replace all matches of the pattern with a colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r',', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern for replacing special characters\n    pattern = r'[.,\\s]'\n    # Use the re.sub() function to replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define a regular expression pattern to match any occurrence of spaces, commas, or dots\n    pattern = re.compile(r'\\s|,|\\.')\n    # replace all matches of the pattern with a colon\n    text = pattern.sub(':', text)\n    # return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Replace all spaces, commas, and dots with colons\n    text = re.sub(r'\\s+|\\,\\s+|\\.\\s+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'\\s|,|\\.|:|\\n'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[.,;:]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function will replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Convert all special characters to a colon\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    i = 0\n    while i < n and A[i]!= x:\n        i += 1\n    if i == n:\n        return -1  # x not found\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n    A: A sorted array of integers\n    x: An integer to find the index of the first occurrence of in A\n\n    Returns:\n    int: The index of the first occurrence of x in A. Returns -1 if x is not found in A.\n    \"\"\"\n\n    # initialize the first and last indices of the array\n    first = 0\n    last = len(A) - 1\n\n    # loop while the first index is less than or equal to the last index\n    while first <= last:\n        # calculate the middle index of the array\n        mid = (first + last) // 2\n\n        # if the middle element is equal to x, return the middle index\n        if A[mid] == x:\n            return mid\n\n        # if the middle element is less than x, update the first index to the right of the middle index\n        elif A[mid] < x:\n            first = mid + 1\n\n        # if the middle element is greater than x, update the last index to the left of the middle index\n        else:\n            last = mid - 1\n\n    # if the loop completes without finding x, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left and right pointers to the first and last indices of the array\n    left = 0\n    right = len(A) - 1\n\n    # Perform binary search until the left pointer is greater than or equal to the right pointer\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        # If the element at the middle index is equal to x, return the index\n        if A[mid] == x:\n            return mid\n\n        # If the element at the middle index is greater than x, update the right pointer to mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n\n        # If the element at the middle index is less than x, update the left pointer to mid + 1\n        else:\n            right = mid - 1\n\n    # If the element was not found in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the index of the first occurrence of x in the sorted array A using binary search\n    lo = 0\n    hi = len(A) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    # If x is not found in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    index = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                index = mid\n                high = mid - 1\n            else:\n                low = mid + 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize index to -1\n    index = -1\n    # Loop through the array\n    for i in range(len(A)):\n        # If the current element is equal to x, update the index to i and break out of the loop\n        if A[i] == x:\n            index = i\n            break\n    return index"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # initialize the variable to store the sum of products of subarrays\n    product_sum = 0\n    # loop through all possible subarrays of length 1 to n-1\n    for i in range(1, n):\n        # multiply the element at index i with all elements before it (to include the element itself in the sum)\n        product_sum += arr[i-1]*arr[i]\n    return product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum_of_products_of_all_possible_subarrays/\n    '''\n    n = len(arr)\n    sum_of_products = 0\n    \n    # calculate product of sublist from index 0 to i\n    def product_of_sublist(i):\n        if i == 0:\n            return 1\n        else:\n            return arr[i-1] * product_of_sublist(i-1)\n    \n    # calculate sum of products of all sublists\n    for i in range(n):\n        sublist_prod = product_of_sublist(i)\n        sum_of_products += sublist_prod\n    \n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    mod = 10**9 + 7\n    prod = [1] * n\n    for i in range(n):\n        prod[i] = (prod[i] * arr[i]) % mod\n    return sum(prod)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    # Fill in the first row and first column of the dp table\n    for i in range(n):\n        dp[i][i] = arr[i]\n    # Fill in the rest of the dp table\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            dp[i][j] = arr[i] * arr[j]\n            for k in range(i+1, j):\n                dp[i][j] += dp[i][k] * dp[k+1][j]\n    return dp[0][n-1]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(n):\n        for j in range(i, n):\n            dp[i][j] = dp[i][j - 1] + arr[j] * arr[i]\n\n    total_sum = 0\n    for i in range(1, n + 1):\n        for j in range(i):\n            total_sum += dp[i][j] * dp[j][i]\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize two variables to store the sum of subarray products and the current subarray product\n    sum_of_subarray_products = 0\n    current_subarray_product = 1\n    \n    # Loop through each element of the array\n    for i in range(n):\n        # Calculate the product of the current element and the next element\n        current_subarray_product *= arr[i]\n        \n        # If the current element is the last element of the array, add the product of the current subarray to the sum of subarray products\n        if i == n-1:\n            sum_of_subarray_products += current_subarray_product\n    \n    return sum_of_subarray_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n\n    # Create a 2D array to store the products of subarrays\n    subarray_prod = [[1] * n for _ in range(n)]\n\n    # Initialize the first row of the 2D array\n    for i in range(1, n):\n        subarray_prod[i][i] = arr[i]\n\n    # Fill the rest of the 2D array using the formula for products of subarrays\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            subarray_prod[i][j] = arr[i] * arr[j + 1] * subarray_prod[i + 1][j - 1]\n\n    # Calculate the sum of products of all subarrays\n    sum_of_subarray_prod = 0\n    for length in range(1, n + 1):\n        sum_of_subarray_prod += subarray_prod[0][n - length]\n\n    return sum_of_subarray_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * n\n    suffix_sum = [0] * n\n\n    # calculate prefix sum and suffix sum\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n        suffix_sum[n - i - 1] = suffix_sum[n - i] + arr[n - i]\n\n    # calculate sum of products of all possible sublists\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            total_sum += prefix_sum[j] * suffix_sum[i]\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] += dp[j]\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum_of_products_of_all_possible_subarrays/\n    '''\n    n = len(arr)\n    prefix_product = [1]*n\n    for i in range(1, n):\n        prefix_product[i] = prefix_product[i-1] * arr[i-1]\n    \n    product = 1\n    subarray_products = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            product *= prefix_product[j]\n            subarray_products.append(product)\n    \n    return sum(subarray_products)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Calculate the bit positions of the first and last bits\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n\n    # Toggle all bits except the first and last\n    n = n ^ first_bit ^ last_bit\n\n    # Shift all bits to the right by one and set the first and last bits\n    n = n << 1 | first_bit\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function takes an integer n as input and returns the same integer but with the middle two bits toggled.\n    \"\"\"\n    # Get the first and last bits of the integer\n    first_bit = n & 1\n    last_bit = n >> 31\n    \n    # Toggle the middle two bits\n    n = n ^ ((n >> 1) & 0x55555555)\n    n = n ^ ((n << 1) & 0x33333333)\n    n = n ^ ((n << 1) & 0x0F0F0F0F)\n    n = n ^ ((n << 1) & 0x00FF00FF)\n    n = n ^ ((n << 1) & 0x0000FFFF)\n    \n    # Set the first and last bits of the integer\n    n = first_bit | n | last_bit\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    first_bit = 1 << (n.bit_length() - 1)\n    last_bit = 1 << n.bit_length() - 1\n    middle_bits = ~(first_bit | last_bit)\n\n    return n & middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # initialize the first and last bit of the number to 1\n    if n & (1 << 0):\n        n = n ^ (1 << 0)\n    if n & (1 << 31):\n        n = n ^ (1 << 31)\n    # toggle the middle bits of the number\n    for i in range(1, 31):\n        if n & (1 << i):\n            n = n ^ (1 << i)\n        else:\n            n = n ^ (1 << i)\n    # toggle the first and last bit of the number\n    if n & (1 << 0):\n        n = n ^ (1 << 0)\n    if n & (1 << 31):\n        n = n ^ (1 << 31)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize the first and last bits of the number\n    first_bit = (n & 0x1)\n    last_bit = (n & (0x1 << 31)) >> 31\n\n    # toggle the first and last bits of the number except the first and the last bit\n    toggled_first_bit = (first_bit + last_bit) % 2\n    toggled_last_bit = (first_bit + last_bit) // 2\n    toggled_middle_bits = toggled_first_bit ^ toggled_last_bit\n    n = n ^ toggled_middle_bits\n    \n    # return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1\n    last_bit = n & (1 << 31)\n    toggled_bits = ((n >> 1) & 1) + ((n >> 2) & 1) + ((n >> 3) & 1) + ((n >> 4) & 1)\n    return (n & ~(1 << 0)) + ((n & ~(1 << 1)) >> 1) + ((n & ~(1 << 2)) >> 2) + ((n & ~(1 << 3)) >> 3) + ((n & ~(1 << 4)) >> 4) + (toggled_bits << 1) + first_bit + last_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # initialize the middle bits to 0\n    middle_bits = 0\n\n    # initialize the sum of middle and non-middle bits to 0\n    sum_middle = 0\n    sum_non_middle = 0\n\n    # loop through the bits of the number\n    for i in range(31):\n        # if the current bit is 1, add 1 to the sum of middle bits and to the sum of non-middle bits\n        if n & (1 << i):\n            middle_bits = middle_bits ^ (1 << i)\n            sum_middle = sum_middle ^ (1 << i)\n        else:\n            sum_non_middle = sum_non_middle ^ (1 << i)\n\n    # calculate the sum of middle bits and non-middle bits\n    middle_sum = sum_middle ^ sum_non_middle\n\n    # calculate the difference between the sum of middle and non-middle bits and the number of middle bits\n    toggle_sum = middle_sum ^ n\n\n    # toggle the middle bits of the number\n    n = n ^ middle_bits\n\n    # return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # check if the number is even or odd\n    if n % 2 == 0:\n        # if even, set the middle bit to 1\n        n = n | (1 << 1)\n    else:\n        # if odd, set the middle bit to 0\n        n = n & ~(1 << 1)\n    # check if the number is odd or even\n    if n % 2 == 0:\n        # if even, set the last bit to 1\n        n = n | (1 << 31)\n    else:\n        # if odd, set the last bit to 0\n        n = n & ~(1 << 31)\n    # return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    # calculate the number of bits to shift\n    num_bits = len(bin(n)[2:])\n    # calculate the number of bits to shift to get the first and last bits\n    shift = num_bits - 2\n    # shift the first and last bits\n    n = n >> shift\n    # shift the remaining bits\n    n = n << (num_bits - shift)\n    # return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Convert the integer to binary representation\n    binary_str = bin(n)[2:]\n    # Check if the number has odd number of bits\n    if len(binary_str) % 2 == 1:\n        # Extract the middle bit and flip it\n        middle_bit = binary_str[len(binary_str)//2]\n        if middle_bit == '0':\n            modified_binary = ''.join(map(lambda x: '0' if x == middle_bit else '1', binary_str))\n        else:\n            modified_binary = ''.join(map(lambda x: '1' if x == middle_bit else '0', binary_str))\n    else:\n        # Extract both the middle and the last bit and flip them\n        middle_bit = binary_str[len(binary_str)//2]\n        last_bit = binary_str[-1]\n        if middle_bit == '0':\n            modified_binary = ''.join(map(lambda x: '0' if x == middle_bit else '1', binary_str[:len(binary_str)//2])) + '0'\n        else:\n            modified_binary = ''.join(map(lambda x: '1' if x == middle_bit else '0', binary_str[:len(binary_str)//2])) + '1'\n    # Convert the modified binary string back to an integer\n    modified_int = int(modified_binary, 2)\n    # Return the modified integer\n    return modified_int"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        index = bisect.bisect_left(a, x-1)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    elif i == len(a):\n        return len(a)\n    elif a[i-1] < x:\n        return i\n    else:\n        return left_insertion(a[:i], x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    :param a: sorted list of integers\n    :param x: integer to search for in the sorted list\n    :return: index of the left insertion point for x\n    \"\"\"\n    left = 0\n    right = len(a) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index == 0:\n        return 0\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    elif i!= 0 and a[i-1] == x:\n        return i - 1\n    else:\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        i -= 1\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        i = bisect.bisect_left(a, x) - 1\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Binary search to find the index of x in a\n    i = bisect.bisect_left(a, x)\n\n    if i == 0:\n        return 0\n    elif i == len(a):\n        return len(a)\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        print(f\"{string} is a valid starting string.\")\n    else:\n        print(f\"{string} is not a valid starting string.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    pattern = re.compile(regex)\n    match = pattern.search(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        print(string,'starts with a vowel')\n    else:\n        print(string, 'does not start with a vowel')"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False "
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * (1 - 1/n)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. \n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1 using recursion.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1.\n\n    Args:\n    n (int): The number of elements in the sequence.\n\n    Returns:\n    int: The geometric sum of n-1.\n    \"\"\"\n\n    def helper(n, product):\n        if n == 1:\n            return product\n        else:\n            return helper(n-1, product*n)\n\n    return helper(n-1, 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Find the smallest triangular number with n digits\n    triangular_num = 10**(n-1)\n    # Initialize index to 1\n    index = 1\n    while triangular_num > 10**n:\n        triangular_num = triangular_num * 10\n        index += 1\n    # Return the index\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # To store the smallest triangular number with n digits \n    smallest = 0 \n\n    # Initialize the index to 0 \n    index = 0 \n\n    # Loop for n times \n    for i in range(1, n+1): \n\n        # Calculate the current triangular number with n digits \n        triangular = i * (i+1) * (i+2) / 6\n\n        # Check if the current triangular number is smaller than the smallest number \n        if triangular < smallest: \n            smallest = triangular \n            index = i\n\n    return index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Calculate the required triangular number and the number of digits\n    triangular_num = int((10**n) * (math.sqrt(5) + 1) / 2)\n    num_digits = len(str(triangular_num))\n\n    # Find the index of the smallest triangular number with n digits\n    if num_digits == n:\n        return triangular_num\n    else:\n        return find_Index(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    tri_num = 0\n    while True: \n        tri_num = tri_num * 10 + 1\n        tri_num = tri_num ** (1/n)\n        tri_num = math.ceil(tri_num)\n        if tri_num % 1 == 0: \n            return int(tri_num)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #initialize the smallest triangular number and its index\n    smallest = 10**n - 1\n    index = 1\n    \n    #loop through all the possible triangular numbers with n digits\n    for i in range(1, smallest+1):\n        #check if the triangular number is smaller than the smallest triangular number\n        if i < smallest:\n            smallest = i\n            index = i\n            #print(smallest, index)\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def is_triangular(n):\n        for i in range(int(math.sqrt(8*n+1))+1):\n            if n%i==0 or n%(i+2)==0:\n                return False\n        return True\n\n    def is_prime(n):\n        if n<2:\n            return False\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                return False\n        return True\n\n    def triangular_number(n):\n        a=1\n        b=1\n        while len(str(b))<n:\n            c=a+b\n            a=b\n            b=c\n        return b\n\n    index=0\n    while True:\n        n_digits=len(str(triangular_number(index)))\n        if n_digits==n:\n            break\n        index+=1\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 1\n    num = 1\n    while math.log10(num) < n:\n        count += 1\n        num = math.ceil(num * 10)\n    return count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = 0\n    for i in range(1, n+1): \n        num = num * 10 + i \n    return math.ceil(math.log(num, 10)) "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the largest triangular number less than or equal to n\n    largest_triangular = int(math.sqrt(5*n+1) + 0.5)\n    # Loop through all triangular numbers less than or equal to the largest triangular number\n    for i in range(2, largest_triangular+1):\n        # Check if the triangular number is divisible by 2^i\n        if i % (2**i) == 0:\n            # If yes, find the largest triangular number divisible by 2^i\n            largest_triangular_divisible_by_2_i = int(math.sqrt(5*n+1)*((2**i-1)*(2**(i-1)+1))//2 + 0.5)\n            # Check if the largest triangular number divisible by 2^i is less than the triangular number\n            if largest_triangular_divisible_by_2_i < i:\n                # If yes, return the index of the triangular number\n                return i\n    # If the loop completes without returning, return None because there is no triangular number with n digits\n    return None"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = []\n    for i in range(0, n+1):\n        triangular_numbers.append(math.factorial(n) // (math.factorial(i) * math.factorial(n-i)))\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n+1):\n            triangular_numbers[j] += triangular_numbers[j-1]\n\n    return triangular_numbers[1]"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            dict_obj[test_tup[i]] = test_tup[i+1]\n        else:\n            dict_obj[test_tup[i-1]] = test_tup[i]\n    return dict_obj\n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Converting the tuple to list\n    test_list = list(test_tup)\n\n    # Initializing an empty dictionary\n    result_dict = {}\n\n    # Iterating over the list from the second element\n    for i in range(1, len(test_list), 2):\n        # Adding the key and value to the dictionary\n        result_dict[test_list[i]] = test_list[i+1]\n\n    # Returning the dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n\n    :param test_tup: The tuple to be converted to a dictionary.\n    :type test_tup: tuple\n    :return: A dictionary containing key-value pairs from the input tuple.\n    :rtype: dict\n    \"\"\"\n    # Initialize an empty dictionary to store key-value pairs\n    key_value_dict = {}\n    \n    # Loop through the input tuple and add key-value pairs to the dictionary\n    for i in range(0, len(test_tup), 2):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    \n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # create an empty dictionary\n    dictionary = {}\n    \n    # loop through the tuple and add the adjacent elements to the dictionary\n    for i in range(len(test_tup)):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dictionary[key] = value\n    \n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_obj = {}\n    count = 0\n    for i in test_tup:\n        if count % 2 == 0:\n            key = i\n            value = test_tup[count+1]\n            dict_obj[key] = value\n        else:\n            value = i\n            dict_obj[value] = value\n        count += 1\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result = {}\n    for i in range(0, len(test_tup)-1, 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_val_dict = {}\n    for i in range(len(test_tup)):\n        key = test_tup[i]\n        val = test_tup[i+1]\n        key_val_dict[key] = val\n    return key_val_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 2:\n        return True\n    elif s[0]!= s[1]:\n        return False\n    else:\n        for i in range(2, len(s)):\n            if s[i]!= s[0]:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are same, else False.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return s[0] == all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in a string are the same or not.\n    \"\"\"\n    # Get the first character of the string\n    char = s[0]\n    # Loop through the rest of the string\n    for i in range(1, len(s)):\n        # If the next character is different from the current character, return False\n        if s[i]!= char:\n            return False\n    # If we get to the end of the loop, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = {}\n\n    # count the occurrences of each character in the string\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    # check if all the character counts are same or not\n    for count_value in count.values():\n        if count_value!= 1:\n            return False\n\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    \n    first = s[0]\n    for char in s[1:]:\n        if char!= first:\n            return False\n    \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string's' as input and returns True if all the characters in the string are the same, False otherwise.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char = s[0]\n    for i in s:\n        if i!= char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s == s[0]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to calculate the area of a tetrahedron.\n    \"\"\"\n    # define the formula for the area of a tetrahedron\n    area = (1/6) * (side ** 2) * math.sqrt(5)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n    '''\n    return 0.5 * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side**2 * math.tan(math.pi / 6)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    area = (1/6) * s * (s**2 + (s+1)**2 + (s+1)**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 6\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6*side**2 / (math.sqrt(5))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    # Calculate the half perimeter\n    half_perimeter = 0.5 * side\n    \n    # Calculate the semi-perimeter\n    semi_perimeter = half_perimeter / math.sqrt(3)\n    \n    # Calculate the area\n    area = math.sqrt(3) / 4 * semi_perimeter ** 2\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculating the area of the tetrahedron using Heron's formula\n    s = (side**2 + side**2 + side**2 + side**2)/4\n    area = math.sqrt(s*(s-side)*(s-2*side)*(s-3*side))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 1/3 * (side**2)\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side * (1/3)) + (side * (1/3)) + (side * (1/3))\n\n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - side) * (s - (2 * side)) * (s - (3 * side)))\n\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n\n    # Initialize the length of the list\n    n = len(list)\n\n    # If the number of items to be rotated is greater than the length of the list,\n    # rotate only until the number of items to be rotated is equal to the length of the list\n    while m > n:\n        m -= n\n\n    # If the number of items to be rotated is zero, do not rotate the list\n    if m == 0:\n        return list\n\n    # Initialize two pointers, one starting from the first element and the other starting from the (m+1)th element\n    # (m+1)th element is one step to the right of the first element\n    i = 0\n    j = m\n\n    # Perform the rotation by swapping the elements at the first and the (m+1)th elements\n    while i < j:\n        list[i], list[j] = list[j], list[i]\n        i += 1\n        j -= 1\n\n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m %= n\n\n    for i in range(m):\n        list.append(list.pop(0))\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotates a given list by n items to the right direction.\n\n    Args:\n    lst: list - the list to be rotated.\n    n: int - the number of items to rotate.\n\n    Returns:\n    list - the rotated list.\n    \"\"\"\n    # If n is zero, return the original list\n    if n == 0:\n        return lst\n\n    # Get the length of the list\n    length = len(lst)\n\n    # Check if n is greater than or equal to the length of the list\n    if n >= length:\n        return lst\n\n    # Swap the first n items with the last item in the list\n    lst[0:n] = lst[n:length]\n\n    # Reverse the first n items\n    lst[n:] = lst[:n][::-1]\n\n    # Return the rotated list\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    \n    # Reverse the entire list\n    for i in range(n // 2):\n        list[i], list[n - i - 1] = list[n - i - 1], list[i]\n    \n    # Reverse the first m items\n    for i in range(m):\n        list[i], list[n - i - 1] = list[n - i - 1], list[i]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # If list is empty or m is 0, return the list\n    if n == 0 or m == 0:\n        return list\n    \n    # Calculate the number of rotations required\n    rotations = n - m\n    \n    # Initialize the first m elements of the list to the end of the list\n    for i in range(m):\n        list.append(list.pop(0))\n    \n    # Rotate the list by rotations\n    for i in range(rotations):\n        # Move the last element of the list to the front\n        last = list.pop()\n        # Add the first m elements of the list to the end\n        list.extend(list[:m])\n        # Move the last element of the list to the front\n        list.append(last)\n        \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # Ensure that m is within range of the list size\n    m = m % n\n    # Swap first m elements with last n-m elements\n    list[:m] = list[:m][::-1]\n    # Swap last m elements with first n-m elements\n    list[-m:] = list[-m:][::-1]\n    # Reverse the entire list\n    list[:] = list[::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n\n    # Calculate the new length of the list\n    new_length = len(list) - m\n    \n    # Create a new empty list to store the rotated elements\n    rotated_list = []\n    \n    # Copy the last m elements to the rotated list\n    for i in range(m):\n        rotated_list.append(list[new_length - 1 - i])\n    \n    # Copy the first n-m elements to the rotated list\n    for i in range(m, new_length):\n        rotated_list.append(list[i - m])\n    \n    # Copy the original list to the end of the rotated list\n    for i in range(m, len(list)):\n        rotated_list.append(list[i])\n    \n    # Return the rotated list\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes in a list and a number as input and returns a rotated list to the right n number of positions.\n    \"\"\"\n    # Get the length of the list\n    length = len(lst)\n    \n    # If n is greater than or equal to the length of the list, return the list as it is\n    if n >= length:\n        return lst\n    \n    # Create a new list with n items\n    new_lst = []\n    \n    # Loop through the original list and append the items to the new list\n    for i in range(n):\n        new_lst.append(lst[i])\n    \n    # Loop through the original list and append the remaining items to the new list\n    for i in range(length-n, length):\n        new_lst.append(lst[i])\n    \n    # Return the new list\n    return new_lst"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda num: all(int(digit) % num == 0 for digit in str(num)), range(startnum, endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Use a lambda function to get the digit of a number as a list of digits\n    get_digit = lambda x: [int(d) for d in str(x)]\n    # Use a list comprehension to get a list of all possible digits from startnum to endnum\n    digits = [get_digit(n) for n in range(startnum, endnum+1)]\n    # Use a lambda function to get a list of all possible permutations of the digits\n    get_perms = lambda x: reduce(lambda x,y: x+y, [list(y) for y in itertools.permutations(x)])\n    # Use the lambda function to get all possible permutations of all the digits\n    all_perms = [get_perms(d) for d in digits]\n    # Use a lambda function to check if a number is divisible by all the digits in its list of digits\n    check_divisibility = lambda x: all(d in x for d in all_perms[x])\n    # Use a list comprehension to get a list of all numbers within the given range that are divisible by every digit in their list of digits\n    divisible_numbers = [x for x in range(startnum, endnum+1) if check_divisibility(get_digit(x))]\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    divisible_numbers = [x for x in range(startnum, endnum+1) if all(int(digit) % x == 0 for digit in str(x))]\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(digit) in str(x) for digit in str(x)), range(startnum, endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(d) % int(n) == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        return all(int(d) in str(num) for d in str(num))\n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Define a lambda function to check if a number is divisible by a given digit\n    is_divisible_by_digit = lambda x, digit: x % digit == 0\n    \n    # Use a list comprehension to generate a list of numbers within the given range that are divisible by every digit\n    divisible_numbers = [x for x in range(startnum, endnum+1) if all(is_divisible_by_digit(x, digit) for digit in str(x))]\n    \n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # create a list of all digits in the range\n    digits = [int(d) for d in str(startnum) + str(endnum)]\n    # create a list of all possible divisors for each digit\n    divisors = [list(range(10)) for _ in range(10)]\n    # loop through the digits in the range and calculate their divisors\n    for d in digits:\n        # calculate the index of the digit in the divisors list\n        digit_index = d - 1\n        # loop through the divisors for that digit and remove the current divisor\n        for i, divisor in enumerate(divisors[digit_index]):\n            if divisor == d:\n                divisors[digit_index].pop(i)\n                break\n    # loop through the numbers in the range and check if they are divisible by every digit they contain\n    result = []\n    for num in range(startnum, endnum+1):\n        num_digits = [int(d) for d in str(num)]\n        for digit in num_digits:\n            # check if the digit is in the list of divisors for the current digit in the number\n            if digit in divisors[digit-1]:\n                # check if the digit is the only one in the number that is divisible by that digit\n                if all(d!= digit for d in num_digits):\n                    # add the number to the result list if it meets the criteria\n                    result.append(num)\n                    break\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def check_digit(num):\n        return all(num % d == 0 for d in range(1, 10))\n\n    return filter(check_digit, range(startnum, endnum + 1))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # converting angle to radians\n    angle_rad = math.radians(a)\n    \n    # using the Pythagorean theorem to find the area\n    area = r**2 * math.sin(angle_rad / 2)\n    \n    # rounding to two decimal places\n    area = round(area, 2)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find the area of a sector. The function takes the radius and angle as inputs and returns the area of the sector or None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Angle should not be greater than 360 degrees.\")\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi * r ** 2 * a / 360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Convert angle to radians\n    a = math.radians(a)\n\n    # Check if angle is within valid range\n    if a > 360:\n        print(\"Error: Angle must be within 0 and 360 degrees.\")\n        return None\n    \n    # Calculate area using Heron's formula\n    area = 0.5 * r * r * math.sin(a)\n\n    # Return area of the sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n\n    area = r * r * math.sin(math.radians(a/2))\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Function to find the length of a subsequence of a given string\n    def length(s, x, y):\n        m, n = len(s), len(x)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif s[i - 1] == x[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]\n\n    # Finding the length of all subsequences\n    len_x = length(X, X, Y)\n    len_y = length(Y, Y, Z)\n    len_z = length(Z, X, Z)\n\n    # Finding the lengths of all common subsequences\n    len_xy = length(X, Y, X)\n    len_yz = length(Y, Z, Y)\n    len_xz = length(X, Z, Z)\n\n    # Finding the maximum length of common subsequence\n    max_len = max(len_xy, len_yz, len_xz)\n\n    # Finding the common subsequences\n    for i in range(max_len):\n        if i < len_xy:\n            X_lcs = X[:i + 1]\n        elif i < len_yz:\n            Y_lcs = Y[:i + 1]\n        else:\n            Z_lcs = Z[:i + 1]\n\n        # Checking if the subsequences are common\n        if X_lcs == Y_lcs and Y_lcs == Z_lcs:\n            return X_lcs, Y_lcs, Z_lcs\n\n    # If no common subsequences are found, return None\n    return None"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Initialize the base cases \n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0: \n        return \"\"\n\n    # Initialize the matrix \n    matrix = [[0 for j in range(len(Z)+1)] for i in range(len(X)+1)] \n\n    # Fill the matrix using dynamic programming \n    for i in range(len(X)+1): \n        for j in range(len(Y)+1): \n            if i == 0 or j == 0: \n                matrix[i][j] = 0 \n            elif X[i-1] == Y[j-1]: \n                matrix[i][j] = matrix[i-1][j-1] + 1 \n            else: \n                matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1]) \n\n    # Backtrack through the matrix to find the LCS \n    i, j = len(X), len(Y) \n    lcs = \"\" \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n        elif matrix[i-1][j] > matrix[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    return lcs "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n    X, Y and Z are the three string sequences to find the longest common subsequence.\n\n    The function should return a tuple containing the longest common subsequence and the length of the longest common subsequence.\n    '''\n\n    # Find the length of the longest common suffix of X, Y and Z\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n    lcs_length = 0\n\n    # Create a 2D table to store the length of the longest common suffix of X[i..m] and Y[j..n]\n    table = [[0] * (p+1) for i in range(n+1)]\n\n    # Fill the table using dynamic programming\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n                lcs_length = max(lcs_length, table[i][j])\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Find the longest common suffix\n    i = n\n    j = m\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the longest common suffix and convert it to a string\n    lcs.reverse()\n    lcs_string = ''.join(lcs)\n\n    return (lcs_string, lcs_length)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n\n    # creating a table to store lengths of \n    # subsequences of lengths i, j and k \n    # for all i, j, and k \n    table = [[[0 for j in range(o+1)] for k in range(n+1)] for i in range(m+1)] \n\n    # build table \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                # If last characters of all \n                # sequences are same, then \n                # length of LCS is last \n                # element of LCS \n                if i==0 or j==0 or k==0: \n                    table[i][j][k] = 0 \n\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    table[i][j][k] = table[i-1][j-1][k-1] + 1 \n\n                else: \n                    # If not same, then \n                    # length of LCS \n                    # will be maximum \n                    # of length of LCS \n                    # of rest of string \n                    # for (i-1), (j), \n                    # and (k-1) \n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1]) \n\n    # starting point for LCS \n    i = m \n    j = n \n    k = o \n\n    # creating a list to store \n    # LCS \n    lcs = [] \n\n    # traversing the table \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif table[i-1][j][k] == table[i-1][j][k-1]: \n            i -= 1 \n        elif table[i][j-1][k] == table[i-1][j][k]: \n            j -= 1 \n        else: \n            k -= 1 \n\n    # reversing the list to get \n    # the LCS in correct order \n    lcs.reverse() \n\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    \n    # create a 2D array to store lengths of longest common subsequence for all prefixes of X, Y and Z\n    L = [[0] * (o+1) for j in range(m+1)] \n\n    # Fill the array L[][] using dynamic programming approach \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(1, o+1): \n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1 \n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n\n    # create a 3D array to store the indexes of the characters in X, Y and Z that make up the longest common subsequence\n    lcs = [[[0]*(o+1) for j in range(o+1)] for i in range(m+1)] \n\n    # Fill the 3D array lcs[][][] using dynamic programming approach \n    i = m \n    j = n \n    k = o \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n            lcs[i][j][k] = [i-1, j-1, k-1] \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif L[i-1][j][k] == L[i][j-1][k]: \n            i -= 1 \n        else: \n            j -= 1 \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Step 1: Create a 2D table to store lengths of LCS for all prefixes of X, Y, and Z\n    L = [[0] * (p + 1) for i in range(m + 1)]\n\n    # Step 2: Fill the table in bottom up fashion. L[i][j] will store length of LCS of X[0..i-1], Y[0..j-1] and Z[0..k-1]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # Step 3: Backtrack to find the LCS\n    i = m\n    j = n\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i - 1][j][k - 1]:\n            i -= 1\n        elif L[i][j - 1][k] == L[i - 1][j - 1][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n    lcs.reverse()\n    return \"\".join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Base cases\n    if len(X) == 0:\n        return Z if len(Y) == 0 else ''\n    if len(Y) == 0:\n        return X if len(X) == 0 else ''\n    if len(Z) == 0:\n        return Y if len(Y) == 0 else ''\n\n    # If last characters match, compare and return LCS\n    if X[-1] == Y[-1] == Z[-1]:\n        return X[-1] + lcs_of_three(X[:-1], Y[:-1], Z[:-1])\n\n    # If last characters do not match, find the LCS among remaining substrings\n    else:\n        return max(\n            lcs_of_three(X, Y, Z[1:]),\n            lcs_of_three(X[1:], Y[1:], Z[1:]),\n            lcs_of_three(X[1:], Y, Z[1:]),\n            lcs_of_three(X, Y[1:], Z[1:]),\n            lcs_of_three(X[1:], Y[1:], Z)\n        )"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 3D table to store LCS values for all possible combinations of prefixes of X, Y and Z\n    L = [[[0] * (n + 1) for j in range(p + 1)] for i in range(m + 1)]\n\n    # fill the table in bottom-up manner\n    for i in range(1, m + 1):\n        for j in range(1, p + 1):\n            if X[i - 1] == Z[j - 1]:\n                L[i][j][0] = L[i - 1][j - 1][0] + 1\n            else:\n                L[i][j][0] = max(L[i - 1][j][0], L[i][j - 1][0])\n\n    # backtrack to find the actual LCS\n    i = m\n    j = p\n    lcs = ''\n    while i > 0 and j > 0:\n        if X[i - 1] == Z[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i - 1][j][0] > L[i][j - 1][0]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n  \n    # Create a table to store lengths of LCS of subproblems \n    L = [[0] * (p + 1) for i in range(m + 1)] \n  \n    # Following steps build L[m+1][p+1] in bottom up fashion. \n    for i in range(m + 1): \n        for j in range(p + 1): \n            if i == 0 or j == 0: \n                L[i][j] = 0 \n  \n            elif X[i - 1] == Y[j - 1] and Z[i - 1] == Z[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1 \n  \n            else: \n                L[i][j] = max(L[i - 1][j], L[i][j - 1]) \n  \n    # Following code is to print LCS of three strings \n    # by tracing the values of L[i][j] in LCS of strings X[0..i-1] \n    # and Y[0..j-1] and Z[0..p-1] \n    i = m \n    j = p \n    res = \"\" \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1] and Z[i - 1] == Z[j - 1]: \n            res = X[i - 1] + res \n            i -= 1 \n            j -= 1 \n        elif L[i - 1][j] > L[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n  \n    # Return LCS of three strings \n    return res "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    def backtrack(i, j, k, LCS, memo): \n        if i < 0 or j < 0 or k < 0: \n            return memo[i][j][k] \n        if memo[i][j][k]!= -1: \n            return memo[i][j][k] \n        if X[i] == Y[j] and Y[j] == Z[k]: \n            LCS.append(X[i]) \n            return memo[i][j][k] + 1 \n        if X[i] == Y[j]: \n            return backtrack(i-1, j, k, LCS, memo) \n        elif Y[j] == Z[k]: \n            return backtrack(i, j-1, k-1, LCS, memo) \n        else: \n            return max(backtrack(i-1, j, k, LCS, memo), backtrack(i, j-1, k, LCS, memo)) \n\n    X = list(X) \n    Y = list(Y) \n    Z = list(Z) \n    LCS = [] \n    memo = [[[-1 for _ in range(len(Z)+1)] for _ in range(len(Y)+1)] for _ in range(len(X)+1)] \n\n    return backtrack(len(X)-1, len(Y)-1, len(Z)-1, LCS, memo) "
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Using regular expression to match words that start with capital letters\n    words = re.findall('[A-Z][a-z]+', str1)\n    # Joining words with spaces and returning the result\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters from the string\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\n    # Split the string into words\n    words = str1.split()\n    # Iterate over each word and capitalize the first letter if it is a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i][0].upper() + words[i][1:]\n    # Join the words back together into a string and return it\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Join the words with spaces\n    result =''.join(words)\n\n    # Capitalize the first letter of each word\n    result =''.join(word.capitalize() for word in result.split())\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', string)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # use regular expression to split string into words\n    words = re.findall(r'\\b[a-z]\\w*\\b', str1)\n    # use list comprehension to join words with spaces and capitalize the first letter of each word\n    new_words = [' '.join(w.capitalize()).strip() for w in words]\n    # join list of new words into a single string\n    output =''.join(new_words)\n    return output"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Function to capitalize the first letter of each word in a string\n    def capitalize_words(word):\n        return word.capitalize()\n\n    # Function to replace all non-alphanumeric characters in a string with spaces\n    def replace_non_alphanumeric(word):\n        return re.sub(r'[^a-zA-Z0-9]','', word)\n\n    # Split the input string into a list of words\n    words = str1.split()\n\n    # Loop through each word in the list\n    for i, word in enumerate(words):\n        # Check if the word starts with an uppercase letter\n        if word[0].isupper():\n            # Capitalize the first letter of the word\n            words[i] = capitalize_words(word)\n            # Replace all non-alphanumeric characters with spaces\n            words[i] = replace_non_alphanumeric(words[i])\n\n    # Join the list of words back into a string\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Iterate over the words and add spaces between capital letters\n    result = []\n    for word in words:\n        # Check if the first letter of the word is capital\n        if word[0].isupper():\n            # Add space before the word\n            result.append(' ')\n        # Add the word to the result\n        result.append(word)\n    # Join the words into a single string\n    return ''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all the punctuation marks from the string\n    str1 = re.sub('[^a-zA-Z\\s]', '', str1)\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Split the string into words\n    words = str1.split()\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through the words\n    for word in words:\n        # If the word starts with a capital letter, add a space\n        if word.istitle():\n            result.append(''+ word)\n        else:\n            result.append(word)\n    # Join the words in the list and return the result\n    return''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'(?<![a-z])([A-Z])(?!\\w)'\n    return re.sub(pattern, r' \\1', str1)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums = []\n    for s in nums_str:\n        try:\n            nums.append(float(s))\n        except ValueError:\n            continue\n    nums.sort()\n    return [str(n) for n in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n\n    Parameters:\n    nums_str: list of strings of numbers\n\n    Returns:\n    sorted list of strings of numbers\n    \"\"\"\n    nums_list = [float(num) for num in nums_str]\n    nums_list.sort()\n    return [str(num) for num in nums_list]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    num_list = []\n    for num_str in nums_str:\n        try:\n            num_list.append(float(num_str))\n        except ValueError:\n            pass\n    num_list.sort()\n    return num_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: (int(x) if x.isdigit() else float('inf'), x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            continue\n    \n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert all strings to float\n    nums_float = [float(x) for x in nums_str]\n    # sort the list in ascending order\n    nums_float.sort()\n    # convert back to strings and return\n    return [str(x) for x in nums_float]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Define a function to convert a string to a numeric value\n    def string_to_num(s):\n        try:\n            return int(s)\n        except ValueError:\n            return float(s)\n\n    # Define a function to compare two strings as numbers\n    def compare_strings(s1, s2):\n        num1 = string_to_num(s1)\n        num2 = string_to_num(s2)\n        if isinstance(num1, float) and isinstance(num2, float):\n            return 0\n        elif isinstance(num1, float) and isinstance(num2, int):\n            return 1\n        elif isinstance(num1, int) and isinstance(num2, float):\n            return -1\n        else:\n            return num1 - num2\n\n    # Sort the list of strings numerically\n    nums_str.sort(key=compare_strings)\n\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_int = []\n    for num_str in nums_str:\n        try:\n            nums_int.append(int(num_str))\n        except ValueError:\n            pass\n    nums_int.sort()\n    return nums_int"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n    nums_str (list): A list of strings of numbers to be sorted numerically.\n\n    Returns:\n    list: A sorted list of strings of numbers.\n    \"\"\"\n    # Split the list of strings into a list of lists of integers\n    nums_list = [[int(num) for num in line.split()] for line in nums_str]\n\n    # Use the built-in `sorted` function to sort the lists of integers\n    sorted_nums_list = sorted(nums_list)\n\n    # Convert the sorted list of lists of integers back to a list of strings\n    sorted_nums_str = [[str(num) for num in line] for line in sorted_nums_list]\n\n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Using tuple unpacking to add the tuple to the list\n    test_list.extend(test_tup)\n    # Return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    # check if the root of the heap is smaller than any other element\n    if i == 0 or arr[0] < arr[i]:\n        return False\n    # check if the left child is smaller than the parent\n    if i*2 + 1 < n and arr[i*2+1] < arr[i]:\n        return False\n    # check if the right child is smaller than the parent\n    if i*2 + 2 < n and arr[i*2+2] < arr[i]:\n        return False\n    # if all the above conditions are satisfied, then the heap is a min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    \n    parent_i = (i-1)//2\n    \n    if arr[i] < arr[parent_i]:\n        return False\n    \n    return check_min_heap_helper(arr, parent_i)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0:\n        if arr[i] < arr[i//2]:\n            return False\n    else:\n        return True\n    \n    for j in range(2*i, len(arr), 2):\n        if j+1 <= len(arr)-1:\n            if arr[j] > arr[j+1]:\n                return False\n        else:\n            break\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # base case\n    if i == 0:\n        return True\n    \n    # if left child is greater than parent\n    if arr[i] < arr[i//2]:\n        return False\n    \n    # recursively check the left and right child\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a binary heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    # Traverse the array and check if each element is greater than or equal to its left and right children\n    for i in range(n//2 - 1, -1, -1):\n        if arr[i] > arr[2*i + 1] or arr[i] > arr[2*i + 2]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i >= len(arr):\n        return True\n    # Check if the current element is greater than its children\n    if arr[i] > arr[2*i] or arr[i] > arr[2*i+1]:\n        return False\n    # Recursively check if the heap property is valid for children of current node\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if len(arr) <= 1:\n        return True\n    # Check if the root element is greater than its children\n    if arr[0] > arr[1]:\n        return False\n    # Recursively check if the heap property is valid for children of root node\n    return check_min_heap_helper(arr, 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n\n    if i < 1:\n        return True\n\n    if arr[i] < arr[i//2]:\n        return False\n\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if len(arr) <= 1:\n        return True\n    \n    if i == 0 or arr[i] >= arr[i//2]:\n        return check_min_heap_helper(arr, i//2)\n    else:\n        return False\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i < 0:\n        return True\n\n    if arr[i] >= arr[(i - 1) // 2]:\n        return False\n\n    return check_min_heap_helper(arr, i - 1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if len(arr) % 2 == 1:\n        return False\n\n    return check_min_heap_helper(arr, len(arr) // 2 - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    elif i > 1 and arr[i] < arr[i//2]:\n        return False\n    elif i > 2 and arr[i] < arr[i//2]:\n        return False\n    else:\n        return True\n\n\ndef is_min_heap(arr):\n    '''\n    This function takes an array as input and checks if it is a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Recursive case\n    return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    '''\n    j = 0\n    while True:\n        j += 1\n        if n >= j:\n            n -= j\n        else:\n            return j - 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth Jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*n - 1) * jacobsthal_num(n-1) + jacobsthal_num(n-2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # initialize variables\n    a = 0\n    b = 1\n    # loop through nth term\n    for i in range(n):\n        # calculate jacobsthal number\n        j = (a + b) % 2\n        # update values for next iteration\n        a = b\n        b = j\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n // 2)\n    else:\n        return 4 * jacobsthal_num((n - 1) // 2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2)\n    else:\n        return 2 * jacobsthal_num(n//2) + 1\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # initialize the first two values\n    j1 = 0\n    j2 = 1\n    \n    # loop through the remaining values\n    for i in range(n):\n        j3 = j1 + j2\n        j1 = j2\n        j2 = j3\n    \n    # return the final value\n    return j2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(n-2):\n            a, b = b, a + b\n        return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    # Initialize a list to store the jacobsthal numbers\n    j_nums = []\n    \n    # Initialize the first two jacobsthal numbers\n    j_nums.append(0)\n    j_nums.append(1)\n    \n    # Calculate and store the remaining jacobsthal numbers\n    for i in range(2, n+1):\n        j_nums.append(j_nums[i-1] + j_nums[i-2])\n    \n    # Return the nth jacobsthal number\n    return j_nums[n]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\n    Parameters:\n    test_list (list of tuples): A list of tuples containing the records.\n    K (int): The number of records to be considered.\n\n    Returns:\n    A tuple containing the minimum k records from the list.\n\n    \"\"\"\n    # Sort the list of tuples based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize an empty list to store the minimum k records\n    min_k_records = []\n\n    # Iterate over the first K elements of the sorted list\n    for i in range(K):\n        # If the current element is not already in the min_k_records list, add it\n        if test_list[i][1] not in min_k_records:\n            min_k_records.append(test_list[i][1])\n\n    # Return the minimum k records as a tuple\n    return tuple(min_k_records)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    Input: test_list - list of tuples, where each tuple contains two elements, first element is an integer and second element is a string\n            K - integer, representing the number of minimum records required\n    Output: A tuple containing the minimum k records from the input list\n    '''\n\n    # Sort the list in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize a variable to store the minimum k records\n    min_k_records = []\n\n    # Traverse through the sorted list and add k elements to the min_k_records list\n    i = 0\n    while i < len(test_list) and len(min_k_records) < K:\n        min_k_records.append(test_list[i])\n        i += 1\n\n    # Return the minimum k records as a tuple\n    return tuple(min_k_records)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Given a list of tuples and a positive integer K, returns a list of the K\n    smallest tuples from the list, sorted in ascending order. If there are fewer\n    than K tuples in the list, returns all of them.\n    \"\"\"\n    min_tuples = []\n    n = len(test_list)\n    for i in range(n):\n        min_tuples.append(min(test_list[i:i+K]))\n    return min_tuples"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    if len(test_list) < K:\n        return None\n    min_list = sorted(test_list, key=lambda x: x[1])[0:K]\n    min_dict = {}\n    for i in range(K):\n        min_dict[min_list[i][0]] = min_list[i][1]\n    return min_dict"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the second element of each tuple in ascending order\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Initialize a variable to store the minimum k records\n    min_k_records = []\n    \n    # Traverse through the sorted list\n    for i in range(len(sorted_list)):\n        # If the length of the list is less than k, add the entire list to the min_k_records\n        if len(min_k_records) == K:\n            min_k_records.append(sorted_list)\n            break\n        # If the length of the list is greater than or equal to k, check if the current element is already in the min_k_records\n        elif len(min_k_records) < K and sorted_list[i] in min_k_records:\n            continue\n        # If the current element is not in the min_k_records, add it to the min_k_records\n        else:\n            min_k_records.append(sorted_list[i])\n    \n    # Return the minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    min_val
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    This function will find the minimum K number of tuples from the given list of tuples.\n    If there are less than K number of tuples in the list, then the function will return all the tuples.\n\n    Args:\n    test_list (list): List of tuples\n    K (int): Number of tuples to be returned\n\n    Returns:\n    list: List of tuples with minimum K number of tuples\n\n    '''\n\n    # Sort the list of tuples by the first element\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize an empty list to store the minimum K tuples\n    min_k_list = []\n\n    # Iterate over the sorted list\n    for i in range(len(test_list)):\n\n        # If the length of the list is greater than K, then remove the last element and continue to the next iteration\n        if len(test_list) > K:\n            del test_list[-1]\n\n        # If the length of the list is equal to or less than K, then add the current tuple to the min_k_list\n        min_k_list.append(test_list[i])\n\n        # If the length of the list is equal to K, then break the loop\n        if len(test_list) == K:\n            break\n\n    return min_k_list\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \"\"\"\n    # sorting the test_list by value in ascending order\n    test_list.sort(key=lambda x: x[1])\n    # creating a set to store unique keys of test_list\n    unique_keys = set([x[0] for x in test_list])\n    # finding minimum K unique keys from test_list\n    min_keys = [k for k in unique_keys if k in unique_keys[:K]]\n    # finding the minimum value of minimum K unique keys from test_list\n    min_value = min(min_keys, key=lambda x: test_list[x][1])\n    # creating a new list to store minimum K unique keys and their values\n    min_k_values = []\n    for k in min_keys:\n        if test_list[k][1] == min_value:\n            min_k_values.append(test_list[k])\n    # returning the minimum K unique keys and their values\n    return min_k_values"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list by the second element of each tuple (frequency)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # initialize minimum frequency\n    min_freq = sorted_list[0][1]\n    # initialize the minimum k records\n    min_k_records = []\n    # iterate over the sorted list\n    for i in range(len(sorted_list)):\n        # if k records have been found, break the loop\n        if len(min_k_records) == K:\n            break\n        # if the current frequency is less than the minimum frequency, update minimum frequency\n        if sorted_list[i][1] < min_freq:\n            min_freq = sorted_list[i][1]\n            # add the current tuple to the minimum k records list\n            min_k_records = [sorted_list[i]]\n        # if the current frequency is equal to the minimum frequency, add the current tuple to the minimum k records list\n        elif sorted_list[i][1] == min_freq:\n            min_k_records.append(sorted_list[i])\n    # return the minimum k records list\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Args:\n    - test_list: A list of tuples containing key-value pairs. Each tuple represents a record. The key-value pairs are separated by a colon.\n    \n    - K: An integer representing the number of records that need to be returned.\n\n    Returns:\n    - A list of tuples representing the k records with minimum value for the given key.\n\n    Example:\n    - test_list = [(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4), (\"e\", 5)]\n    - K = 2\n    - Output: [(\"c\", 3), (\"d\", 4)]\n    '''\n\n    # Initialize minimum value to the smallest possible integer\n    min_val = float('inf')\n\n    # Initialize an empty list to store the k records with minimum value\n    k_records = []\n\n    # Iterate through the list of tuples\n    for record in test_list:\n        # Get the key and value of the current record\n        key, value = record\n\n        # Check if the current value is less than the minimum value\n        if value < min_val:\n            # If yes, update the minimum value and append the record to the list of k records\n            min_val = value\n            k_records = [(key, value)]\n        elif value == min_val:\n            # If no, append the record to the list of k records\n            k_records.append((key, value))\n\n    # Return the list of k records with minimum value\n    return k_records"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_indices = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_indices.append(i)\n    return common_indices"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l2:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common = []\n    # Iterate through the elements of l1\n    for i in range(len(l1)):\n        # Check if the element is present in both l2 and l3 at the same index\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # If it is, append it to the common list\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            if l1[i] not in common:\n                common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Loop through each index in the first list\n    for i in range(len(l1)):\n        # If the index appears in all three lists, add it to the common elements list\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    \n    # Loop through each index in the second list\n    for i in range(len(l2)):\n        # If the index appears in all three lists, add it to the common elements list\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n    \n    # Loop through each index in the third list\n    for i in range(len(l3)):\n        # If the index appears in all three lists, add it to the common elements list\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    \n    # Return the common elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest if second_smallest!= float('inf') else None"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 1:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"List must contain at least 2 elements.\"\n    else:\n        sorted_numbers = sorted(numbers)\n        second_smallest_index = len(sorted_numbers) - 2\n        return sorted_numbers[second_smallest_index]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    return match.group(0) if match else None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\w*b+'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b+)'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"ab*a\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+a'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*?b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'ab+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    # Create an empty dictionary to store the counts of reverse pairs\n    reverse_pair_counts = {}\n    \n    # Iterate through the string list\n    for string in test_list:\n        # Convert the string to a list of characters\n        string_list = list(string)\n        # Sort the characters in reverse order\n        string_list.sort(reverse=True)\n        # Convert the sorted characters back to a string\n        sorted_string = ''.join(string_list)\n        \n        # Check if the sorted string is already in the dictionary\n        if sorted_string in reverse_pair_counts:\n            # Increment the count of the current pair of strings\n            reverse_pair_counts[sorted_string] += 1\n        else:\n            # Add a new key-value pair to the dictionary with the current string as the key and a count of 1 as the value\n            reverse_pair_counts[sorted_string] = 1\n    \n    # Return the dictionary of reverse pair counts\n    return reverse_pair_counts"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function takes a list of strings and returns the number of pairs of reverse strings in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    reverse_pairs_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # check if both strings are equal\n            if test_list[i] == test_list[j] == test_list[j][::-1]:\n                reverse_pairs_count += 1\n    return reverse_pairs_count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    # Define a function to reverse a string\n    def reverse_string(string):\n        return string[::-1]\n\n    # Define a function to check if a string is palindrome\n    def is_palindrome(string):\n        return string == string[::-1]\n\n    # Initialize a counter variable\n    count = 0\n\n    # Iterate through each string in the list\n    for string in test_list:\n        # Reverse the string\n        reversed_string = reverse_string(string)\n\n        # Check if the reversed string is a palindrome\n        if is_palindrome(reversed_string):\n            # If it is, increment the count\n            count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_dict = {}\n\n    for string in test_list:\n        # convert the string to a list of characters and sort it\n        sorted_list = sorted(string)\n        # join the characters in the list to form a string\n        sorted_string = ''.join(sorted_list)\n        # check if the sorted string is already present in the dictionary\n        if sorted_string in reverse_dict:\n            # increment the count of reverse pairs in the dictionary\n            reverse_dict[sorted_string] += 1\n        else:\n            # add the sorted string to the dictionary with a count of 1\n            reverse_dict[sorted_string] = 1\n\n    # initialize the count of reverse pairs to zero\n    count = 0\n    for count_value in reverse_dict.values():\n        # check if the count value is greater than one\n        if count_value > 1:\n            # increment the count of reverse pairs\n            count += count_value\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # check if the strings are reverse of each other\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    unique_tuples = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist = tuple(sublist)\n            if sublist in unique_tuples:\n                unique_tuples[sublist] += 1\n            else:\n                unique_tuples[sublist] = 1\n    return unique_tuples"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for item in list1:\n        if isinstance(item, list):\n            item = tuple(item)\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dict = {}\n    for sublist in list1:\n        if sublist in unique_dict:\n            unique_dict[sublist] += 1\n        else:\n            unique_dict[sublist] = 1\n    return unique_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for elem in list1:\n        if elem not in count:\n            count[elem] = 0\n        count[elem] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # create an empty dictionary to store the counts\n    counts = {}\n    # iterate over each element of the list\n    for element in list1:\n        # convert the element to a tuple and check if it is already in the dictionary\n        if tuple(element) in counts:\n            # increment the count for this tuple\n            counts[tuple(element)] += 1\n        else:\n            # otherwise add the tuple to the dictionary with a count of 1\n            counts[tuple(element)] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sorted(sublist))\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Convert each list to a tuple\n    list1_tuples = [(x,) for x in list1]\n\n    # Create a dictionary to store the counts\n    counts = {}\n\n    # Loop through each tuple\n    for i in range(len(list1_tuples)):\n        # If the tuple has not been counted yet, add it to the dictionary and set its count to 1\n        if list1_tuples[i] not in counts:\n            counts[list1_tuples[i]] = 1\n        # If the tuple has already been counted, increment its count by 1\n        else:\n            counts[list1_tuples[i]] += 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    list_dict = {}\n    for item in list1:\n        tuple_item = tuple(item)\n        if tuple_item in list_dict:\n            list_dict[tuple_item] += 1\n        else:\n            list_dict[tuple_item] = 1\n    return list_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts of unique sublists\n    sublist_counts = {}\n\n    # Loop through the input list and convert each sublist to a tuple\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n\n        # If the tuple is already in the dictionary, increment the count\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n\n    return sublist_counts"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer() and abs(float_num - int(float_num)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    # Remove all non-numeric characters from the input string\n    num = ''.join(filter(str.isdigit, num))\n    \n    # Check if the length of the string is 2\n    if len(num)!= 2:\n        return False\n    \n    # Convert the string to an integer and check if it is within the range of a decimal number with 2 digits\n    decimal = int(num)\n    if decimal < -9999 or decimal > 9999:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.')!= 1:\n        return False\n    num_parts = num.split('.')\n    if len(num_parts[0]) > 1 or len(num_parts[1]) > 2:\n        return False\n    for digit in num_parts[0]:\n        if not digit.isdigit():\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        if len(num.split('.')[1]) == 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    # Check if the given number is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Remove all non-digit characters from the number\n    num = ''.join(filter(str.isdigit, num))\n    \n    # Check if the number has only 2 digits after the decimal point\n    if '.' in num and len(num.split('.')[1])!= 2:\n        return False\n    \n    # Check if the number has at least 2 digits before the decimal point\n    if '.' in num and len(num.split('.')[0]) < 2:\n        return False\n    \n    # Check if the number is a valid decimal number\n    try:\n        decimal.Decimal(num)\n    except ValueError:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the number contains any non-numeric characters\n    if not num.isnumeric():\n        return False\n\n    # Split the number into integer and decimal parts\n    integer_part = int(num)\n    decimal_part = float(num) - integer_part\n\n    # Check if the decimal part has a precision of 2\n    if abs(decimal_part) >= 0.01:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    if not num.replace(\".\", \"\", 1).isdigit() or len(num.split(\".\")[1]) > 2:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n    if len(parts[0]) > 1 and parts[0][0] == '0':\n        return False\n    for char in parts[1]:\n        if char not in '0123456789':\n            return False\n    if len(parts[1]) > 2:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    # Remove all non-numeric characters from the input string\n    num = ''.join(filter(str.isdigit, num))\n    # Check if the string contains a decimal point\n    if '.' in num:\n        # Split the string into integer and decimal parts\n        integer_part, decimal_part = num.split('.')\n        # Check if the integer part has more than 1 digit\n        if len(integer_part) > 1:\n            return False\n        # Check if the decimal part has more than 2 digits or more than 1 character\n        elif len(decimal_part) > 2 or len(decimal_part) == 1:\n            return False\n        # Check if the integer part is less than or equal to 1000\n        elif int(integer_part) > 1000:\n            return False\n        # If all the checks pass, the input string is a valid decimal number\n        else:\n            return True\n    # If the string does not contain a decimal point, the input string is not a valid decimal number\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' not in num:\n        return False\n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n    integer = parts[0]\n    decimal = parts[1]\n    if len(integer) > 10 or len(decimal) > 2:\n        return False\n    for c in integer + decimal:\n        if c not in '0123456789.':\n            return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            unique = False\n            break\n    if unique:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_count = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            distinct_count += 1\n        elif arr.count(num) > 1:\n            return False\n    return True if distinct_count == 1 else False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    \n    # check if the length of the set is 1\n    if len(unique_set) == 1:\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    # create a set from the array to remove duplicates\n    unique_set = set(arr)\n\n    # check if the length of the set is 1 (i.e. no duplicates)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set from the list of numbers\n    nums = set(arr)\n    # If the length of the set is 1, then all numbers are unique\n    if len(nums) == 1:\n        return True\n    # If the length of the set is greater than 1, then some numbers are duplicates\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) < 2:\n        return True\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    \n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set to store the elements of the list\n    unique_set = set(arr)\n    # check if the length of the set is 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_count = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            distinct_count += 1\n            if distinct_count == 2:\n                return True\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                count += 1\n                break\n        if count == 1:\n            return True\n    return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 1 <= monthnum3 <= 12:\n        if monthnum3 % 2 == 0:\n            if monthnum3 in [4, 6, 9, 11]:\n                return True\n            else:\n                return False\n        else:\n            if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n                return True\n            else:\n                return False\n    else:\n        print(\"Invalid month number. Month numbers must be between 1 and 12.\")\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in days_in_month:\n        print(monthnum3, \"contains 30 days.\")\n    else:\n        print(monthnum3, \"does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 2:\n        return False\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return \"30 days\"\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return \"31 days\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 == 2:\n            return True\n        else:\n            return False\n    else:\n        if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 % 2 == 0:\n        if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            print(monthnum3, \"contains 30 days.\")\n        else:\n            print(monthnum3, \"does not contain 30 days.\")\n    else:\n        if monthnum3 == 2:\n            print(monthnum3, \"contains 28 days.\")\n        else:\n            print(monthnum3, \"does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    # Check if the month number is valid\n    if not 1 <= monthnum3 <= 12:\n        raise ValueError(\"Invalid month number\")\n    # Check if the month has 30 days\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if monthnum3 in range(1,13):\n        if months[monthnum3-1].endswith('uary'):\n            return True\n        elif months[monthnum3-1].endswith('ust'):\n            return True\n        elif months[monthnum3-1].endswith('ober'):\n            return True\n        elif months[monthnum3-1].endswith('cember'):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n    min_diff = arr[-1] - arr[0]\n\n    # Loop through the array and calculate the minimum difference\n    for i in range(1, n):\n        curr_diff = arr[i] - arr[i-1]\n        min_diff = min(min_diff, curr_diff)\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n):\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize minimum difference and its index\n    min_diff = arr[1] - arr[0]\n    min_diff_index = 0\n\n    # Traverse the array\n    for i in range(1,n):\n        # Find the difference between current element and its previous element\n        diff = arr[i] - arr[i-1]\n\n        # Update minimum difference and its index if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n\n    return min_diff, min_diff_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    '''\n    # sort the array in ascending order\n    arr.sort()\n    \n    # initialize minimum difference and its index\n    min_diff = float('inf')\n    min_index = 0\n    \n    # loop through the array and calculate the difference between adjacent elements\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        \n        # update the minimum difference and its index if the current difference is smaller than the previous minimum difference\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    \n    # return the minimum difference and its index\n    return min_diff, min_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize two pointers, i and j, at the first and last index of the array\n    i = 0\n    j = n - 1\n    # Initialize the minimum difference to be the difference between the last element and the first element\n    min_diff = arr[n-1] - arr[0]\n    # Initialize the minimum element to be the first element\n    min_element = arr[0]\n\n    # Loop until i is less than j\n    while i < j:\n        # Calculate the difference between the current element of the array and the minimum element\n        current_diff = arr[j] - arr[i]\n        # If the current difference is less than the minimum difference, update the minimum difference and minimum element\n        if current_diff < min_diff:\n            min_diff = current_diff\n            min_element = arr[i]\n        # If the current element is greater than the minimum element, increment i and decrement j to move towards the minimum element\n        elif current_diff > min_element:\n            i += 1\n        # If the current element is less than or equal to the minimum element, decrement j to move towards the maximum element\n        else:\n            j -= 1\n\n    # Return the minimum difference and the minimum element\n    return min_diff, min_element"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    # Sort the array in ascending order \n    arr.sort() \n    # Initialize minimum difference to be the difference between adjacent elements \n    min_diff = arr[1] - arr[0] \n    # Initialize minimum difference index \n    min_diff_index = 0 \n    # Loop through the sorted array \n    for i in range(1,n-1): \n        # Find the difference between current element and the previous one \n        diff = arr[i] - arr[i-1] \n        # Update minimum difference if the difference is smaller than the current minimum \n        if diff < min_diff: \n            min_diff = diff \n            min_diff_index = i-1 \n    return min_diff, min_diff_index \n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n    # Traverse the sorted array\n    for i in range(n-1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n        # If the difference is less than the minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = abs(arr[-1] - arr[0])\n    for i in range(1, n-1):\n        diff = abs(arr[-1] - arr[i])\n        min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference to infinity\n    min_diff = float('inf')\n\n    # Initialize two pointers, one at the beginning and other at the end of the array\n    left = 0\n    right = n - 1\n\n    # Traverse through the array and update the minimum difference if a smaller one is found\n    while left < right:\n        diff = arr[right] - arr[left]\n        if diff < min_diff:\n            min_diff = diff\n        # If the difference between two elements is positive, move the right pointer towards the middle of the array\n        elif diff > 0:\n            right -= 1\n        # If the difference between two elements is negative, move the left pointer towards the middle of the array\n        else:\n            left += 1\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of n integers as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort() # sorting the array\n    min_diff = abs(arr[1] - arr[0]) # finding the minimum difference between first two elements\n    for i in range(2, n): # iterating from 2nd element to last element\n        if arr[i] - arr[i-1] < min_diff: # checking if the difference between two elements is smaller than the current minimum difference\n            min_diff = arr[i] - arr[i-1] # updating the minimum difference if it is smaller\n    return min_diff # returning the minimum difference"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 1\n    num = 1\n    while count < n:\n        num += 1\n        count += 1\n        if num % 7 == 0:\n            count = 1\n    return num\n\nn = int(input(\"Enter the value of n: \"))\nprint(is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. \n    '''\n    \n    # Initialize variables\n    a = 0\n    b = 1\n    \n    # Initialize counter\n    count = 0\n    \n    # Iterate until count reaches n\n    while count < n:\n        # Calculate next polite number\n        c = a + b\n        \n        # Check if it is greater than a and less than b\n        if c > a and c < b:\n            return c\n        \n        # Update a and b\n        a = b\n        b = c\n        \n        # Increment counter\n        count += 1\n    \n    # If the loop ends without finding the nth polite number, return -1\n    return -1\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]\n    polite_numbers.reverse()\n    for i in range(n):\n        for j in range(len(polite_numbers)):\n            if i % j == 0:\n                break\n            else:\n                if polite_numbers[j] == 100:\n                    polite_numbers.remove(100)\n    return polite_numbers[0]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            return 0\n        i += 1\n    return i"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    # check if the given input is a positive integer\n    if type(n)!= int or n <= 0:\n        return \"Invalid input\"\n    \n    # initialize the result\n    result = 0\n    \n    # loop until we get the nth polite number\n    for i in range(1, n+1):\n        # check if the current number is polite or not\n        if i % 5 == 0:\n            result += i\n    \n    # return the nth polite number\n    return result"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find the nth polite number. \n    \"\"\"\n    def nth_polite_number(a, b):\n        \"\"\"\n        The nth polite number is defined as the number that is the\n        nth power of the number a raised to the power b.\n\n        This function takes in two parameters, a and b, and returns the nth\n        polite number as an integer.\n        \"\"\"\n        return int(pow(a, b))\n\n    def is_prime(n):\n        \"\"\"\n        This function checks if a number is prime or not. It returns True\n        if the number is prime, and False otherwise.\n        \"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_perfect_square(n):\n        \"\"\"\n        This function checks if a number is a perfect square or not. It returns True\n        if the number is a perfect square, and False otherwise.\n        \"\"\"\n        return int(math.sqrt(n)) ** 2 == n\n\n    def is_prime_perfect_square(n):\n        \"\"\"\n        This function checks if a number is a prime perfect square or not. It returns True\n        if the number is a prime perfect square, and False otherwise.\n        \"\"\"\n        if not is_prime(n):\n            return False\n        if not is_perfect_square(n):\n            return False\n        return True\n\n    if is_prime_perfect_square(n):\n        return 100\n    elif is_prime_perfect_square(n + 1):\n        return 1000\n    else:\n        return nth_polite_number(3, n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    polite_numbers = [1, 5, 7, 10, 13, 15, 17, 20, 22, 24, 27, 29, 31, 33, 35, 38, 40, 42, 44, 47, 49, 51, 53, 55, 57, 59, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]\n    return polite_numbers[n-1]\n\ndef nth_polite(n):\n    '''\n    Write a function to find nth polite number using recursion.\n    '''\n    if n < 1 or n > 100:\n        return None\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return nth_polite(n-1) + is_polite(n-1)\n\nn = int(input(\"Enter the value of n: \"))\nresult = nth_polite(n)\nif result is None:\n    print(\"Invalid value of n\")\nelse:\n    print(\"The\", n, \"th polite number is:\", result)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime_no_less_than(num):\n        count = 0\n        for i in range(2, num+1):\n            if is_prime(i):\n                count += 1\n                if count == n:\n                    return i\n        return None\n\n    def nth_polite_number(num):\n        count = 0\n        i = 1\n        while True:\n            if count == n:\n                return i\n            i += 1\n            count += 1\n\n    def nth_polite_prime_number(num):\n        count = 0\n        i = 1\n        while True:\n            if count == n:\n                return i\n            if is_prime(i):\n                count += 1\n            i += 1\n\n    return nth_polite_prime_number(10000)\n\nprint(is_polite(10))  # Output: 11"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return is_polite(n-1) + 1\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * is_polite(n//2)\n    else:\n        return 2 * is_polite(n//2) + 1"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    else:\n        pairs = []\n        for i in range(len(l1)-1):\n            pairs.append((l1[i], l1[i+1]))\n        return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    if n < 2:\n        return result\n    \n    # initialize the first pair\n    left = 0\n    right = 1\n    \n    # iterate through the list and add pairs to result\n    while right < n:\n        result.append((l1[left], l1[right]))\n        left += 1\n        right += 1\n    \n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    if n < 2:\n        return []\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Check if both lists have the same length\n    if len(li1)!= len(li2):\n        print(\"Both lists must have the same length!\")\n        return\n    \n    # Initialize an empty list to store the difference\n    diff = []\n    \n    # Iterate through both lists and compare their elements\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            diff.append(li1[i])\n    \n    # Return the difference list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n\n    # Initialize an empty list to store the difference\n    diff = []\n\n    # Iterate through the first list and compare each element to the second list\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n\n    # Return the difference list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Initialize an empty list to store the difference\n    diff = []\n    # Loop through each element in the first list\n    for elem in li1:\n        # If the element is not in the second list, append it to the difference list\n        if elem not in li2:\n            diff.append(elem)\n    # Return the difference list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Get the intersection of the two lists\n    inter = list(set(li1).intersection(set(li2)))\n    \n    # Get the union of the two lists\n    union = list(set(li1 + li2))\n    \n    # Get the difference between the union and the intersection\n    diff = list(set(union).difference(set(inter)))\n    \n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing only the elements of the first list that are not present in the second list.\n    '''\n    return [i for i in li1 if i not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns a new list with the elements present in only one of the lists.\n    '''\n    diff_list = []\n    for element in li1:\n        if element not in li2:\n            diff_list.append(element)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        num = count*count*count*count\n        if num % 2 == 1:\n            sum += num\n        count += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        num = 3*(2*i+1)\n        if num % 2!= 0:\n            sum += num**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(2, n+1, 2):\n        fourth_power = i ** 4\n        sum_of_fourth_powers += fourth_power\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n+1, 2):\n        total_sum += i**4\n    return total_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_nums = []\n    for i in range(1, n+1, 2):\n        odd_nums.append(i)\n    return sum(x**4 for x in odd_nums)"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of fourth power of first {} odd natural numbers is {}\".format(n, odd_num_sum(n)))"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            left_parentheses = stack.pop()\n            if exp[left_parentheses+1:i]!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balance_dict = {')': '(', '}': '{', ']': '['}\n    open_parentheses = ['(', '{', '[']\n    \n    for char in exp:\n        if char in open_parentheses:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            if char == balance_dict[stack.pop()]:\n                continue\n            else:\n                return False\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Convert the string to lowercase to ignore case sensitivity\n    test_str = test_str.lower()\n\n    # Split the string into words\n    words = test_str.split()\n\n    # Loop through the words and remove words with k length\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n\n    # Join the words back into a string\n    result =''.join(new_words)\n\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Loop through the list of words and remove words with length k\n    i = 0\n    while i < len(words):\n        if len(words[i]) == K:\n            words.pop(i)\n        else:\n            i += 1\n\n    # Join the list of words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Convert the string into a list of words\n    words = test_str.split()\n\n    # Initialize an empty list to store the final words\n    final_words = []\n\n    # Loop through each word in the list of words\n    for word in words:\n        # If the length of the word is not equal to K, append it to the final list\n        if len(word)!= K:\n            final_words.append(word)\n\n    # Convert the final list of words into a string and return it\n    return \" \".join(final_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the given string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the new words\n    new_words = []\n\n    # Iterate through each word in the list\n    for word in words:\n\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n\n            # Append the word to the new list\n            new_words.append(word)\n\n    # Return the new list of words\n    return new_words"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    i = 0\n    while i < len(words):\n        if len(words[i]) == K:\n            words.pop(i)\n        else:\n            i += 1\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            index = text.find(match)\n            print(f\"Match found at index {index}: {match}\")\n    else:\n        print(\"No matches found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # find all occurrences of the pattern in the text\n    matches = re.findall(pattern,text)\n    \n    # if there is no match, return None\n    if not matches:\n        return None\n    \n    # iterate over the matches and find the position of each substring\n    for i,match in enumerate(matches):\n        # extract the start and end indices of the substring\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        \n        # print the match, the start index, and the end index\n        print(f'{match}, start index: {start_index}, end index: {end_index}')"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes a text and pattern as input and returns a tuple containing the number of occurances of the pattern in the text, and the positions of each occurance in the text.\n    If the pattern does not occur in the text, then the function returns None.\n    '''\n    # Find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # If there is no match, return None\n    if not matches:\n        return None\n    \n    # Initialize a dictionary to store the positions of the matches\n    positions = {}\n    \n    # Loop through each match and store its position in the text\n    for i, match in enumerate(matches):\n        positions[i] = text.find(match)\n    \n    return (len(matches), positions)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    # search the text for pattern\n    matches = re.findall(pattern, text)\n    if matches:\n        # print the matches and their positions\n        for match in matches:\n            print(match, text.find(match))\n    else:\n        # print None if there is no match\n        print(None)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            yield (match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2!= 0 and (i+1) % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every odd index contains odd numbers, and False otherwise.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2 == 0:\n            continue\n        else:\n            count = 0\n            for j in range(len(nums[i])):\n                if nums[i][j] % 2 == 1:\n                    count += 1\n                    if count > 1:\n                        return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    \n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        if nums[i] % 2 == 0:\n            odd_count += 1\n        else:\n            return False\n    \n    if odd_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and i % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        bool: True if all odd indices contain odd numbers, else False.\n\n    Example:\n        odd_position([1, 2, 3, 4, 5]) # True\n        odd_position([1, 3, 5, 7, 9]) # False\n        odd_position([1, 2, 4, 6, 8]) # False\n        odd_position([2, 4, 6, 8]) # True\n    \"\"\"\n\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0: # check if odd index\n            if nums[i] % 2!= 0: # check if odd number\n                return False # if odd number not found at odd index, return False\n    return True # if all odd numbers found at odd indices, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if any(num % 2!= 0 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        found_odd = False\n        for j in range(len(nums[i])):\n            if nums[i][j] % 2!= 0:\n                found_odd = True\n                break\n        if not found_odd:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:  # checking if the index is odd\n            for j in range(len(nums[i])):\n                if nums[i][j] % 2 == 0:  # checking if every element in odd index contains odd number\n                    count += 1\n    if count == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        \n        # Check if the character is a vowel\n        if test_str[i] in vowels:\n            \n            # Check if the previous character is also a vowel\n            if i > 0 and test_str[i-1] in vowels:\n                count += 1\n                \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    prev_char = ''\n    \n    for char in test_str:\n        if char in vowels and (char - prev_char) not in vowels:\n            count += 1\n            prev_char = char\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements\n    unique_elements = set(arr)\n\n    # Calculate the sum of the unique elements\n    sum_unique = sum(unique_elements)\n\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n\n    Parameters:\n    arr: list\n        A list of integers.\n\n    Returns:\n    int\n        The sum of non-repeated elements in the list.\n    \"\"\"\n    # Create a set to store unique elements from the input list\n    unique_elements = set(arr)\n    # Calculate the sum of the unique elements\n    sum_unique_elements = sum(unique_elements)\n    return sum_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements in the list\n    unique_elements = set(arr)\n\n    # calculate the sum of unique elements\n    sum_unique = sum(unique_elements)\n\n    # return the sum of unique elements\n    return sum_unique\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for element in arr:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    \n    # calculate the sum of the non-repeated elements\n    sum_of_non_repeated = 0\n    for element in arr:\n        if freq[element] == 1:\n            sum_of_non_repeated += element\n    \n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    \n    # Sum all unique elements\n    unique_sum = sum(unique_set)\n    \n    # Return the sum\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n    # convert the set to a list and sort it in ascending order\n    sorted_list = sorted(list(unique_set))\n    # initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    # loop through the sorted list and add each non-repeated element to the sum\n    for num in sorted_list:\n        if num not in unique_set:\n            sum_non_repeated += num\n    # return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # sum of non-repeated elements\n    non_repeated_sum = sum(unique_set)\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate through the unique set and add the sum of its elements to the sum variable\n    for num in unique_set:\n        sum += num\n\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements\n    unique_set = set(arr)\n\n    # Find the sum of unique elements\n    sum_unique = sum(unique_set)\n\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the list\n    for i in range(len(arr)): \n        # If the current element is already in the list, skip it\n        if i not in arr: \n            # Add the current element to the sum\n            sum += arr[i]\n    # Return the sum\n    return sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Create a generator object for the input list\n    grouped_list = (group for group in groupby(list1))\n\n    # Iterate through the generator object and pack consecutive duplicates into sublists\n    packed_list = []\n    current_group = next(grouped_list, None)\n\n    if current_group is not None:\n        packed_list.extend([list(group) for _, group in grouped_list])\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pack_consecutive_duplicates(list1):\n    return [list(group) for _, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Create an empty list to store the sublists\n    sublists = []\n    # Loop over the elements of the list\n    for element in list1:\n        # If the element is the first one of its type, add it to the sublist\n        if element not in sublists[-1]:\n            sublists[-1].append(element)\n        # If the element is not the first one of its type, start a new sublist\n        else:\n            # Create a new sublist and add the first element to it\n            new_sublist = [element]\n            # Loop over the elements of the list after the current one\n            for elem in list1[list1.index(element)+1:]:\n                # If the element is not the first one of its type, add it to the current sublist\n                if elem not in sublists[-1]:\n                    new_sublist.append(elem)\n                # If the element is the first one of its type, add it to a new sublist and add the current sublist to the list of sublists\n                else:\n                    sublists.append(new_sublist)\n                    break\n    # Return the list of sublists\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for group in groupby(list1):\n        if len(list(group)) > 1:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(enumerate(list1), lambda x: x[1] == x[0][1])\n    packed = [list(group) for key, group in grouped]\n    return packed"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = []\n    for key, group in groupby(list1):\n        if not key:\n            continue\n        groups.append([key] + list(group))\n    return groups"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # iterate through the list and group by consecutive duplicates\n    for key, group in groupby(list1):\n        # check if the group is a list of consecutive elements\n        if len(list(group)) == len(group) == 1:\n            continue\n        else:\n            # if it is, pack the group into a sublist\n            yield list(group)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group the list by consecutive duplicates and pack them into sublists\n    grouped_list = list(groupby(list1, lambda x: x == list1[0]))\n    sublists = []\n    for key, group in grouped_list:\n        sublist = []\n        for item in group:\n            sublist.append(item)\n        sublists.append(sublist)\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = list(groupby(enumerate(list1), lambda x: x[0] - x[1]))\n    result = []\n    for key, group in grouped_list:\n        group = list(group)\n        sublist = []\n        for i in range(len(group)):\n            if i == 0:\n                sublist.append(group[i][1])\n            elif group[i][1] == group[i-1][1]:\n                sublist[-1] = sublist[-1] + group[i][1]\n            else:\n                sublist.append(group[i][1])\n        if len(sublist) > 1:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for sublist in list1:\n        if sublist not in counts:\n            counts[sublist] = 1\n        else:\n            counts[sublist] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        if isinstance(item, list):\n            if item not in sublists:\n                sublists[item] = 1\n            else:\n                sublists[item] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the unique sublists and their count\n    unique_dict = {}\n\n    # Loop through each element of the list\n    for i in lst:\n        # If the element is a list, add it to the dictionary with a count of 1\n        if type(i) == list:\n            if i not in unique_dict:\n                unique_dict[i] = 1\n            else:\n                unique_dict[i] += 1\n\n    return unique_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for elem in lst:\n        if isinstance(elem, list):\n            tup = tuple(elem)\n            if tup in counts:\n                counts[tup] += 1\n            else:\n                counts[tup] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of occurrences of each tuple\n    counts = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Convert the list to a tuple\n            tuple_element = tuple(element)\n            # Check if the tuple exists in the dictionary\n            if tuple_element in counts:\n                # Increment the count of occurrences of the tuple\n                counts[tuple_element] += 1\n            else:\n                # Add the tuple to the dictionary with a count of 1\n                counts[tuple_element] = 1\n\n    # Return the dictionary of counts of occurrences\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Count the number of unique sublists in a list of lists.\n\n    Parameters:\n    lst (list): a list of lists\n\n    Returns:\n    dict: a dictionary where each sublist is a tuple and its value is the number of occurrences\n    \"\"\"\n\n    # Create a set to store unique sublists\n    sublists = set()\n\n    # Loop through each sublist in the list\n    for sublist in lst:\n        # Convert the sublist to a tuple and add it to the set\n        sublists.add(tuple(sublist))\n\n    # Return the dictionary with the sublist tuples as keys and their counts as values\n    return dict(sublists)"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary\n    sublist_dict = {}\n\n    # Loop through the input list\n    for item in list1:\n\n        # If the item is a list, turn it into a tuple and check if it's already in the dictionary\n        if isinstance(item, list):\n            item_tuple = tuple(item)\n            if item_tuple in sublist_dict:\n                sublist_dict[item_tuple] += 1\n            else:\n                sublist_dict[item_tuple] = 1\n\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist in count_dict:\n            count_dict[sublist] += 1\n        else:\n            count_dict[sublist] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublists_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in unique_sublists_dict:\n            unique_sublists_dict[sublist_tuple] += 1\n        else:\n            unique_sublists_dict[sublist_tuple] = 1\n    return unique_sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        if sublist not in count:\n            count[sublist] = 1\n        else:\n            count[sublist] += 1\n    return count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # We will use the combinations function from itertools to generate the combinations of sums.\n    # We will use a combination of tuples as the input to the function.\n    # The function will return a list of tuples of tuples containing the combinations of sums.\n    # We will iterate over each combination of tuples and calculate the sum of each combination and check if it is present in the test_list.\n    for combination in combinations(test_list, len(test_list)):\n        # We will calculate the sum of the combination using a list comprehension.\n        # We will use the tuple packing and unpacking methods to convert the combination into a tuple of integers.\n        combination_sum = sum(zip(*combination))\n        # We will check if the combination_sum is present in the test_list using the in operator.\n        if combination_sum in test_list:\n            # If it is present, we will print the combination.\n            print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Sort the given list of tuples in descending order of their sum\n    test_list.sort(key=lambda x: sum(x), reverse=True)\n\n    # Initialize an empty list to store the combinations of sums with tuples\n    combinations_list = []\n\n    # Loop through the sorted list of tuples\n    for i in range(len(test_list)):\n        # Create a combination of the remaining tuples with the current tuple\n        combination = combinations(test_list[i:], len(test_list) - i)\n        # Add the combination to the list of combinations\n        for comb in combination:\n            combinations_list.append(tuple(comb))\n\n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Create a list of tuples to find combinations of sums\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            combinations_list.append((test_list[i], test_list[j]))\n    \n    # Create a set of tuples to eliminate duplicates\n    unique_combinations = set(combinations_list)\n\n    # Convert the set back to a list and return the combinations\n    return list(unique_combinations)\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #sorting the tuple list\n    test_list.sort()\n    #taking the first tuple in the list and iterating from 1 to n-1\n    for i in range(1, len(test_list)):\n        #finding all possible combinations of the tuple list from index 0 to i-1\n        temp_list = combinations(test_list, i)\n        #taking the first combination of the tuple list and adding it to the result list\n        for combination in temp_list:\n            result_list.append(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # List of tuples with integers as elements\n    combinations_list = []\n\n    # Iterate over all possible combinations of tuples from the given list\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            combination_list = []\n            for k in range(len(test_list[i])):\n                combination_list.append(test_list[i][k] + test_list[j][k])\n\n            # If the combination of sums is not already present in the list, add it\n            if tuple(combination_list) not in combinations_list:\n                combinations_list.append(tuple(combination_list))\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize a list to store all combinations\n    combinations_list = []\n\n    # Iterate through each tuple in the list\n    for i in range(len(test_list)):\n        # Initialize an empty set to store all sums\n        sums = set()\n\n        # Iterate through each tuple in the list starting from index i+1\n        for j in range(i+1, len(test_list)):\n            # Check if the sum of the current tuple and the next tuple is in the set of sums\n            if test_list[i][0] + test_list[j][0] in sums:\n                # If the sum is in the set, append the combination to the list of combinations\n                combinations_list.append((test_list[i], test_list[j]))\n            else:\n                # If the sum is not in the set, add it to the set of sums\n                sums.add(test_list[j][0])\n\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    def find_combinations_helper(lst, target_sum, current_sum=0, comb_lst=[]):\n        '''\n        Helper function to find combinations of sums with tuples in the given tuple list.\n        '''\n        if current_sum == target_sum:\n            comb_lst.append(lst)\n            return comb_lst\n        elif current_sum > target_sum:\n            return comb_lst\n\n        for i in range(len(lst)):\n            current_sum += lst[i]\n            comb_lst = find_combinations_helper(lst[:i] + lst[i+1:], target_sum, current_sum, comb_lst)\n            current_sum -= lst[i]\n\n        return comb_lst\n    \n    return find_combinations_helper(test_list, target_sum=sum(test_list))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns a list of all possible combinations of sums of the tuples.\n    '''\n    # first, filter out all tuples with duplicate elements\n    unique_tuples = list(set(tuple(sorted(t)) for t in test_list))\n    # then, calculate the sums of each tuple\n    sums = [sum(t) for t in unique_tuples]\n    # then, find all possible combinations of sums using itertools.combinations\n    all_combinations = list(combinations(sums, len(unique_tuples)))\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a set to remove duplicates from the tuple list\n    unique_tuples = set(test_list)\n\n    # Create a list to store the combinations of sums\n    combinations_list = []\n\n    # Iterate through each unique tuple\n    for tuple1 in unique_tuples:\n        # Iterate through each other tuple in the unique tuple\n        for tuple2 in unique_tuples:\n            # If both tuples are not equal, add the combination to the list\n            if tuple1!= tuple2:\n                combination = tuple1 + tuple2\n                combinations_list.append(combination)\n\n    # Return the list of combinations of sums\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Create a set of tuples from the given tuple list\n    unique_tuples = set(test_list)\n\n    # Loop through all possible combinations of sums\n    for combination in combinations(unique_tuples, r=2):\n        # Calculate the sum of the two tuples in the combination\n        sum_of_tuples = sum(combination)\n\n        # Check if the sum is present in the test_list\n        if sum_of_tuples in test_list:\n            # Print the combination and the sum of the two tuples\n            print(\"Combination:\", combination, \"Sum:\", sum_of_tuples)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n\n    # Calculate the count of divisors\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1 and n!= int(math.sqrt(n)):\n        count += 1\n\n    # Check whether the count of divisors is even or odd\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if i!= n//i:\n                count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of divisors of n is even,\n    else it returns False.\n    \"\"\"\n    def divisor_count(num):\n        \"\"\"\n        This function takes an integer num as input and returns the count of its divisors.\n        \"\"\"\n        count = 0\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                count += 1\n        if num > 1:\n            count += 1\n        return count\n\n    count = divisor_count(n)\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 2:\n        return \"The number of divisors is 0 or 1.\"\n    else:\n        count = 0\n        i = 1\n        while i <= math.sqrt(n):\n            if n % i == 0:\n                count += 1\n            i += 1\n        count += 1\n        return \"The number of divisors is even.\" if count % 2 == 0 else \"The number of divisors is odd.\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Calculate the number of divisors \n    divisors = [] \n    for i in range(1, n+1): \n        if n % i == 0: \n            divisors.append(i) \n    count = len(divisors) \n    # Check if the count of divisors is even or odd \n    if count % 2 == 0: \n        print(f\"{n} has an even number of divisors.\") \n    else: \n        print(f\"{n} has an odd number of divisors.\") "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer as input and returns True if the count of divisors is even and False otherwise.\n    It calculates the count of divisors of the given integer using the formula:\n    count = (n + 1) // 2\n    and checks whether the count of divisors is even or odd using the modulus operator.\n    '''\n\n    count = (n + 1) // 2\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_count += 1\n    if divisor_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n/i:\n                divisors.append(n/i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function counts the number of divisors of a given number.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    sum = 0\n    for i in range(len(arr)):\n        if i == 0 or i == len(arr)-1 or arr[i] % 2 == 1:\n            count += 1\n            sum += arr[i]\n        else:\n            count = 0\n            sum = 0\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum_odd = 0\n\n    for i in range(n-1):\n        if i % 2 == 0:\n            sum_odd = sum_odd + arr[i]\n        else:\n            sum_odd = sum_odd + arr[i] + arr[i+1]\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sub_arr = arr[i:j]\n            sum += sum(sub_arr)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a variable to store the sum of odd length subarrays\n    sum_odd = 0\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Check if the element is an odd number and if the sum of the previous odd length subarrays is less than the current element\n        if i == 0 or (i > 0 and arr[i] % 2 == 1 and sum_odd < arr[i]):\n            # If the element is an odd number, add it to the sum of odd length subarrays\n            sum_odd += arr[i]\n\n    # Return the sum of odd length subarrays\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize variables\n    total_sum = 0\n    current_sum = 0\n\n    # Iterate through the array\n    for num in arr:\n        # Add the current number to the current sum\n        current_sum += num\n\n        # If the current sum is odd, add it to the total sum\n        if current_sum % 2!= 0:\n            total_sum += current_sum\n\n        # If the current sum becomes even, reset it to 0\n        else:\n            current_sum = 0\n\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    sum_of_odd_length = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum_of_odd_length += arr[j-1] - arr[i]\n    return sum_of_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    if n % 2 == 0:\n        return -1\n    else:\n        sum_odd = 0\n        for i in range(n - 1):\n            if i % 2 == 1:\n                sum_odd += arr[i]\n            else:\n                sum_odd -= arr[i]\n        return sum_odd\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    sum = 0\n    n = len(arr)\n\n    # Traverse through the array and for each odd length subarray, find the sum\n    for i in range(n):\n        for j in range(i+2, n, 2):\n            sum += arr[j]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    n = len(arr)\n    if n < 1:\n        return 0\n\n    # Initialize a variable to store the sum of odd length subarrays\n    odd_sum = 0\n\n    # Initialize two pointers to the start of the array\n    left = 0\n    right = 0\n\n    # Loop through the array\n    while right < n:\n        # If the current element is odd, add its value to the sum\n        if arr[right] % 2!= 0:\n            odd_sum += arr[right]\n\n        # Slide the window to the right\n        right += 1\n\n        # If the window becomes odd length, add the sum to the final result\n        if right - left + 1 % 2!= 0:\n            odd_sum += odd_sum\n\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    odd_subarray_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+2, len(arr)+1, 2):\n            odd_subarray_sum += arr[j-1]\n    return odd_subarray_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    h, s, v = 0, 0, 0\n\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    delta = max_c - min_c\n\n    v = max_c\n\n    if max_c == min_c:\n        s = 0\n    else:\n        if max_c == r:\n            h = (g - b) / delta\n        elif max_c == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        s = delta / max_c\n\n    h, s, v = h * 360, s * 100, v * 100\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color\n    \n    Parameters:\n    r (int): Red value of the color (0-255)\n    g (int): Green value of the color (0-255)\n    b (int): Blue value of the color (0-255)\n    \n    Returns:\n    h (float): Hue (0-360)\n    s (float): Saturation (0-1)\n    v (float): Value (0-1)\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    delta = max_value - min_value\n    \n    v = max_value\n    \n    if max_value == 0:\n        h = 0\n        s = 0\n    else:\n        s = delta / max_value\n        \n        if r == max_value:\n            h = (g - b) / delta\n        elif g == max_value:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h = h / 6\n        \n        if h < 0:\n            h = h + 1\n            \n    h = h * 360\n    s = s * 100\n    v = v * 100\n    \n    return round(h, 2), round(s, 2), round(v, 2)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n\n    # Convert RGB to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    h = 0.0\n    s = 0.0\n    v = max_val / 255.0\n\n    if delta == 0:\n        h = 0.0\n    else:\n        if max_val == r:\n            h = 60.0 * ((g - b) / delta)\n        elif max_val == g:\n            h = 60.0 * ((b - r) / delta + 2.0)\n        else:\n            h = 60.0 * ((r - g) / delta + 4.0)\n\n        if h < 0:\n            h += 360.0\n\n        s = delta / (1.0 - abs(2.0 * v - 1.0))\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    :param r: Red value of the color (0-255).\n    :param g: Green value of the color (0-255).\n    :param b: Blue value of the color (0-255).\n    :return: Hue, Saturation, Value of the color in the HSV model (0-360, 0-1, 0-1)\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * cmax - 1))\n\n        if cmax == r:\n            h = ((g - b) / delta) % 6\n        elif cmax == g:\n            h = (b - r) / delta + 2\n        elif cmax == b:\n            h = (r - g) / delta + 4\n\n        h = h / 6 * 360\n\n    v = cmax\n\n    return round(h), round(s, 2), round(v, 2)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import matplotlib.pyplot as plt\nimport math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r, g, and b to floats\n    r, g, b = map(float, (r, g, b))\n\n    # Find maximum and minimum color components\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find the delta between maximum and minimum color components\n    delta = max_val - min_val\n\n    # Find the saturation\n    if delta == 0:\n        saturation = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h *= 60\n        if h < 0:\n            h += 360\n\n        if delta == max_val:\n            saturation = delta / max_val\n        else:\n            saturation = delta / (max_val - min_val)\n\n    # Find the value\n    value = max_val\n\n    # Convert the h, s, and v values to tuples\n    h = (h, saturation, value)\n\n    return h"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    Parameters:\n    r (int): Red value (0-255)\n    g (int): Green value (0-255)\n    b (int): Blue value (0-255)\n\n    Returns:\n    h (float): Hue (0-360)\n    s (float): Saturation (0-1)\n    v (float): Value (0-1)\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if max_value == 0:\n        h = 0\n    elif r == max_value:\n        h = (g - b) / delta\n    elif g == max_value:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    h = h * 60\n    if h < 0:\n        h += 360\n    s = delta / (1 - abs(2 * max_value - 1)) if max_value!= 0 else 0\n    v = max_value\n    return int(h), s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n\n    Args:\n        r: Red value (0-255)\n        g: Green value (0-255)\n        b: Blue value (0-255)\n\n    Returns:\n        h: Hue value (0-360)\n        s: Saturation value (0-1)\n        v: Value value (0-1)\n    '''\n\n    # Convert RGB to HSV\n    cmin = min(r, g, b)\n    cmax = max(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        s = delta / 255\n        if cmax == r:\n            h = ((g - b) / delta) % 6\n        elif cmax == g:\n            h = (b - r) / delta + 2\n        else:\n            h = (r - g) / delta + 4\n\n        h = int(h * 60)\n\n        if h < 0:\n            h += 360\n\n    # Convert HSV to HSV\n    return (h, s, (cmax / 255))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in the rgb color values and returns the hsv color values.\n\n    Args:\n        r (int): The red value of the color.\n        g (int): The green value of the color.\n        b (int): The blue value of the color.\n\n    Returns:\n        h (float): The hue value of the color.\n        s (float): The saturation value of the color.\n        v (float): The value of the color.\n    \"\"\"\n    # Convert RGB to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h * 60 if h < 0 else h * 60\n\n        if h < 0:\n            h += 360\n\n        s = delta / max_val\n\n    v = max_val\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    if max_val == min_val:\n        h, s, v = 0, 0, max_val\n    else:\n        delta = max_val - min_val\n        s = delta / max_val\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60 if h < 0 else 0\n        if h < 0:\n            h += 360\n    return round(h, 2), round(s, 2), round(v, 2)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color.\n    '''\n    \n    # Calculate the difference between the maximum and minimum values of r, g, and b\n    max_diff = max(r, g, b) - min(r, g, b)\n    \n    # Calculate the value of h\n    h = None\n    \n    # If the maximum value is equal to the minimum value, there is no hue\n    if max_diff == 0:\n        h = 0\n    elif max_diff == r:\n        h = 60 * ((g - b) / max_diff)\n    elif max_diff == g:\n        h = 60 * ((b - r) / max_diff) + 120\n    else:\n        h = 60 * ((r - g) / max_diff) + 240\n    \n    # Calculate the value of s\n    if max_diff == 0:\n        s = 0\n    else:\n        s = max_diff / 255\n    \n    # Calculate the value of v\n    v = max(r, g, b) / 255\n    \n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product *= num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        product *= num\n    if even_count > odd_count:\n        return product\n    else:\n        return product / 2"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n    if even_count == 0:\n        return odd_product\n    elif odd_count == 0:\n        return even_product\n    else:\n        return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for num in list1:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    # Initialize variables to store even and odd products\n    even_product = 1\n    odd_product = 1\n    \n    # Iterate over the list and multiply even and odd numbers\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n            \n    # Return the product of even and odd products\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            product *= 2\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and finds the product of the first even and odd numbers in the list.\n    '''\n    # initialize variables to store the even and odd numbers\n    even_num = 0\n    odd_num = 0\n\n    # loop through the list and find the first even and odd numbers\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n        elif num % 2!= 0:\n            odd_num = num\n\n    # multiply the even and odd numbers and return the result\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 1\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n\n    product = even * odd\n\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        product *= (even_count * odd_count)\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = []\n    str_tuple = test_str.split(',')\n    for item in str_tuple:\n        int_tuple.append(int(item.strip()))\n    return tuple(int_tuple)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(int(i) for i in test_str.split(','))\n    except ValueError:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma and space\n    str_split = test_str.split(',')\n    # Iterate through each part of the string\n    for part in str_split:\n        # Convert the part to an integer\n        try:\n            int_part = int(part.strip())\n            # Add the integer to the list of integers\n            integers.append(int_part)\n        except ValueError:\n            # If the part cannot be converted to an integer, ignore it\n            pass\n    # Return the list of integers\n    return tuple(integers)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # Split the string into tuples\n    int_tuple = tuple(int(i) for i in test_str.split(','))\n\n    # Return the integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by commas and spaces\n    tup_str = test_str.split(', ')\n\n    # Initialize an empty list to hold the integer tuples\n    int_tup_list = []\n\n    # Loop through each tuple string in the list\n    for tup_str in tup_str_list:\n        # Split the tuple string by spaces to get the integer values\n        int_vals = tup_str.split()\n\n        # Convert the integer values to integers and append to the list\n        int_tup = tuple(int(i) for i in int_vals)\n        int_tup_list.append(int_tup)\n\n    # Return the list of integer tuples\n    return int_tup_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string by space\n    input_list = test_str.split()\n\n    # Initialize an empty list to store integers\n    int_list = []\n\n    # Iterate through each element of the input list\n    for elem in input_list:\n        # Convert the element to an integer and append it to the int_list\n        int_list.append(int(elem))\n\n    # Return the int_list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    lst = test_str.split(',')\n\n    # Create an empty list to hold the converted integers\n    int_lst = []\n\n    # Iterate over the list of strings and convert each string to an integer\n    for s in lst:\n        int_lst.append(int(s))\n\n    # Return the integer list as a tuple\n    return tuple(int_lst)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    # Create a list of integers from the list of strings\n    int_list = [int(i) for i in str_list]\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert string to list of integers\n    lst_int = [int(x) for x in test_str.split(',')]\n    # convert list of integers to tuple\n    result = tuple(lst_int)\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the input string to list of tuples\n    tup_list = [tuple(x) for x in test_str]\n    # Convert each tuple to list and convert to integer list\n    int_list = [list(x) for x in tup_list]\n    # Convert the integer list to tuple\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left, right = 0, len(a) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    idx = bisect.bisect_right(a, x)\n    return idx"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif a[i-1] < x:\n        return i-1\n    else:\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i if i!= len(a) and a[i] == x else len(a)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] < x:\n        return right_insertion(a[index:], x)\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    idx = bisect.bisect_right(a, x)\n    return idx"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*b{3}.*\"\n    return re.findall(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a(?:b{2})')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.+b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'[ab]{1}b{3}')\n    result = pattern.search(text)\n    if result:\n        return result.group()\n    else:\n        return 'No match found.'"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # split the string into a list of characters\n    str_list = list(test_str)\n\n    # loop through the list and add the characters to the tuple\n    new_tuple = tuple([str_list[i] + str_list[i+1] for i in range(0, len(str_list), 2)])\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Join the two lists and string into one string\n    new_string = ''.join([str(item) for item in test_list]) + test_str\n\n    # Convert the new string into a list of tuples\n    new_list = [tuple(elem) for elem in new_string.split()]\n\n    return new_list"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_list = tuple(test_list)\n\n    # Join the tuple and string to form a new tuple\n    new_tuple = (new_list, test_str)\n\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a string and concatenate it with the test_str\n    new_str = str(test_list) + test_str\n    # convert the concatenated string back to a list and return as a tuple\n    return tuple(new_str.split())"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return tuple(test_list + [test_str])"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a tuple\n    new_tuple = tuple(test_list)\n    # convert the string to a tuple\n    new_tuple += tuple(test_str)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            print(f\"The even index {i} contains even numbers: {nums[i]}\")\n        else:\n            print(f\"The even index {i} does not contain even numbers: {nums[i]}\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        if even_count > 0:\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 0 for x in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:  # checking if the index is even\n            if len([num for num in nums if num % 2 == 0 and num % 2 == nums[i]]) % 2 == 0:  # checking if the length of even indices is equal to the number of even numbers in the list\n                return True  # if both conditions are true, the function returns True\n    return False  # if the function has iterated through the entire list and hasn't returned True, the function returns False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 0 for x in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # initialize a counter to keep track of even numbers in each index\n    even_count = [0] * len(nums)\n    \n    # loop through the list and count even numbers in each index\n    for num in nums:\n        if num % 2 == 0:\n            even_count[num//2] += 1\n            \n    # loop through the even_count array and check if all even numbers in each index are even\n    for count in even_count:\n        if count % 2!= 0:\n            return False\n            \n    # if all numbers are even, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # initialize a variable to keep track of the number of even indices found\n    even_count = 0\n    \n    # loop through the list of numbers and check each index for evenness\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            # increment the even_count variable if the current index is even\n            even_count += 1\n            \n            # check that the next index is also even if the current index is odd\n            if i + 1 < len(nums) and nums[i + 1] % 2 == 0:\n                even_count += 1\n                \n    # return True if every even index contains even numbers, otherwise return False\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return even_count == len(nums) // 2 and odd_count == 0"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    # Initialize a boolean variable to store whether all even indices contain even numbers\n    is_even = True\n    \n    # Loop through the list\n    for i in range(len(nums)):\n        # Check if the current index is even\n        if i % 2 == 0:\n            # Check if the current number is even\n            if nums[i] % 2 == 0:\n                # If the current number is even, set the boolean variable to false\n                is_even = False\n    \n    # Return the boolean variable indicating whether all even indices contain even numbers\n    return is_even"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns True if every even index contains even numbers, and False otherwise.\n    \"\"\"\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for tup in test_tup:\n        if type(tup) == tuple:\n            remove_nested(tup)\n        else:\n            test_tup.remove(tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize an empty list to store the non-nested tuples\n    new_list = []\n    # Loop through each element in the input tuple\n    for element in test_tup:\n        # If the element is a tuple, recursively call the remove_nested function\n        if isinstance(element, tuple):\n            new_list.extend(remove_nested(element))\n        # If the element is not a tuple, add it to the new list\n        else:\n            new_list.append(element)\n    # Return the new list with nested tuples removed\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist if type(item)!= tuple]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Create an empty list to store the non-nested tuples\n    non_nested_list = []\n\n    # Loop through each element in the tuple\n    for element in test_tup:\n        # Check if the element is a tuple\n        if isinstance(element, tuple):\n            # If it is a tuple, recursively call the function on the tuple\n            remove_nested(element)\n        else:\n            # If it's not a tuple, add it to the non-nested list\n            non_nested_list.append(element)\n\n    # Return the non-nested list as the result\n    return non_nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n\n    # Define a function to recursively check the tuple\n    def _remove_nested(current_tup, result_list):\n        # Base case: if the current tuple is empty, return the result list\n        if not current_tup:\n            return result_list\n\n        # Recursive case: check the first element of the current tuple\n        if isinstance(current_tup[0], tuple):\n            return _remove_nested(current_tup[1:], result_list)\n        else:\n            return _remove_nested(current_tup[1:], result_list + [current_tup[0]])\n\n    # Call the recursive function with the given tuple as argument\n    result_list = _remove_nested(test_tup, [])\n\n    # Return the result list\n    return result_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while True:\n        new_tup = []\n        for item in test_tup:\n            if type(item) == tuple:\n                for subitem in item:\n                    new_tup.append(subitem)\n            else:\n                new_tup.append(item)\n        if new_tup == test_tup:\n            break\n        else:\n            test_tup = tuple(new_tup)\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for tup in test_tup for x in tup]"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n        else:\n            continue\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #finding the length of the array\n    n = len(arr)\n\n    #finding the index of the last occurrence of x in the array\n    last_index = -1\n    for i in range(n-1,-1,-1):\n        if arr[i] == x:\n            last_index = i\n            break\n\n    #returning the last index\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # Find the leftmost index of x in the sorted array\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n\n    # If x is not found in the array\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two parameters:\n    arr: sorted array\n    x: the element to be searched in the array\n    \n    It returns the index of the last occurrence of x in the array or -1 if x is not present in the array.\n    \"\"\"\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the last position to -1\n    last_position = -1\n\n    # Iterate through the array and check if the element is present\n    for i in range(len(arr)):\n        if arr[i] == x:\n            # If it's present, update the last position\n            last_position = i\n\n    # Return the last position of the element if found, else -1\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x not in arr:\n        return \"Element not found in array\"\n    else:\n        return arr.index(x)"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element x as input and returns the last index of the element.\n    \"\"\"\n    # Find the leftmost index i such that arr[i] >= x\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] >= x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a Python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the last position to -1\n    last_position = -1\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the element is equal to the target, update the last position\n        if arr[i] == x:\n            last_position = i\n\n    # Return the last position\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    n = len(arr)\n    left = 0\n    right = n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): The sorted array.\n    x (int): The element to search for in the array.\n\n    Returns:\n    int: The index of the last occurrence of the element x in the array.\n\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a[^b]*b')\n    match = pattern.search(text)\n    \n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a[^b]*b'\n\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return 'No match found.'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba(?P<anything>.*)b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group('anything')\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range 1 to n inclusive.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2): \n        sum += i \n    return sum "
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through odd numbers up to n\n    for i in range(1, n+1, 2):\n        # add each odd number to the sum\n        sum += i\n\n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    sum_of_odds = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum_of_odds += l\n        l += 1\n    return sum_of_odds\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Return the sum of all odd natural numbers within the range [l, r].\n    \"\"\"\n    total = 0\n    for num in range(l, r+1, 2):\n        total += num\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum_of_odds = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum_of_odds += i\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(l, r): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1, 2): \n        sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments: l and r which represent the lower and upper limits of the range\n    within which the sum of odd natural numbers will be computed. The function returns the sum of all \n    odd natural numbers within this range.\n    \"\"\"\n    # Initialize a variable to store the sum of odd natural numbers\n    sum_of_odds = 0\n\n    # Loop through all the integers within the given range\n    for i in range(l, r+1):\n        # Check if the current number is odd\n        if i % 2!= 0:\n            # Add the current number to the sum of odd natural numbers\n            sum_of_odds += i\n\n    # Return the sum of odd natural numbers\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments, l and r, which are the lower and upper limits of the range of natural numbers.\n    It then calculates the sum of all odd natural numbers within that range and returns the result.\n    \"\"\"\n    odd_sum = 0\n    for i in range(l, r+1, 2):\n        odd_sum += i\n    return odd_sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(arr):\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    else:\n        mask = 0xffffffff\n        left_bits = n & mask\n        right_bits = (n >> d) & mask\n        new_number = (left_bits | right_bits) & mask\n        return new_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary representation\n    binary_str = bin(n)[2:]\n    \n    # Pad the binary string with zeros to the required length\n    while len(binary_str) < d:\n        binary_str = '0' + binary_str\n    \n    # Extract the last d bits\n    last_d_bits = binary_str[-d:]\n    \n    # Reverse the last d bits\n    reversed_last_d_bits = last_d_bits[::-1]\n    \n    # Append the first d bits to the end of the reversed last d bits\n    rotated_bits = reversed_last_d_bits + binary_str[:-d]\n    \n    # Convert the rotated bits back to an integer\n    rotated_int = int(rotated_bits, 2)\n    \n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) & 0xffffffff) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to be rotated\n    num_bits = 32\n\n    # Calculate the number of bits to be shifted\n    shift = num_bits - d\n\n    # Calculate the number to be shifted\n    mask = 0xFFFFFFFF >> shift\n\n    # Shift the number and mask\n    n = (n << shift) & mask\n    n = n | ((n & mask) << d)\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert the number to binary representation\n    bin_n = bin(n)[2:]\n\n    # Pad the binary representation with leading zeros\n    pad_n = '0' * d + bin_n\n\n    # Convert the binary representation back to integer\n    n = int(pad_n, 2)\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    d = d % 32\n    while d > 0:\n        n = (n << 1) | (n >> (32 - d))\n        d -= 1\n    return n & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to a binary string\n    binary_str = bin(n)[2:]\n    # Pad the binary string with leading zeros if necessary\n    while len(binary_str) < 32:\n        binary_str = '0' + binary_str\n    # Calculate the new binary string after rotating the bits\n    rotated_binary_str = binary_str[-d:] + binary_str[:-d]\n    # Convert the rotated binary string back to an integer\n    rotated_int = int(rotated_binary_str, 2)\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Calculate the number of bits to shift\n    shift_bits = d % 32\n    # Calculate the number of bits to add to the shifted bits\n    carry_bits = d // 32\n    \n    # Extract the first carry_bits bits from n\n    carry = n >> carry_bits\n    \n    # Shift the leftmost shift_bits bits to the right and insert them into n\n    n = (n << shift_bits) | carry\n    \n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    if d >= 32:\n        return n\n\n    # Convert the binary representation of n to an integer\n    n = int(n, 2)\n\n    # Calculate the number of bits to rotate\n    num_bits = len(bin(n)[2:])\n    num_rotations = d % num_bits\n\n    # Shift the bits to the left by num_rotations places\n    n = (n << num_rotations) & ((1 << 32) - 1)\n\n    # Return the rotated bits as a string in binary representation\n    return bin(n)[2:]"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Using regular expression to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # using regular expression to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(3):\n        if x == y or y == z or z == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y + 1):\n        for j in range(i + 1, y + 1):\n            for k in range(j + 1, y + 1):\n                if i == x or i == y or i == z or j == x or j == y or j == z or k == x or k == y or k == z:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if z == x == y:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if y == z!= x:\n        count += 1\n    if z == x!= y:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if y!= z == x:\n        count += 1\n    if z!= x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    equal_count = 0\n    if x == y:\n        equal_count += 1\n    if y == z:\n        equal_count += 1\n    if x == z:\n        equal_count += 1\n    return equal_count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    # Initialize variables to keep track of the count of equal numbers\n    count_1 = 0\n    count_2 = 0\n    count_3 = 0\n\n    # Loop through the three integers and compare them\n    for num in [x, y, z]:\n        if num == x:\n            count_1 += 1\n        elif num == y:\n            count_2 += 1\n        elif num == z:\n            count_3 += 1\n\n    # Return the total count of equal numbers\n    return count_1 + count_2 + count_3"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if x == y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if y == z and x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    equal_count = 0\n    # Check if x is equal to y\n    if x == y:\n        equal_count += 1\n    # Check if x is equal to z\n    if x == z:\n        equal_count += 1\n    # Check if y is equal to z\n    if y == z:\n        equal_count += 1\n    # Return the count of equal numbers\n    return equal_count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    n = len(arr)\n    # Find the maximum element in the array\n    max_val = max(arr)\n    # Find the minimum element in the array\n    min_val = min(arr)\n    \n    # If the minimum element is greater than or equal to the maximum element, it can be sorted in place\n    if min_val >= max_val:\n        return 0\n    \n    # Initialize the count variable to 0\n    count = 0\n    \n    # Find the index of the maximum element in the array\n    max_idx = arr.index(max_val)\n    \n    # Loop through the array from the maximum element to the minimum element\n    for i in range(max_idx, min_val - 1, -1):\n        # If the element at the current index is greater than the element at the index after the maximum element\n        if arr[i] > arr[i+1]:\n            # Increment the count variable\n            count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    # Check if the array is already sorted\n    if all(arr[i] >= arr[i+1] for i in range(n-1)):\n        return count\n    \n    # Check if the array is already sorted in reverse\n    if all(arr[i] <= arr[i+1] for i in range(n-1)):\n        return count\n    \n    # Find the first element which is greater than the last element\n    i = n-2\n    while i >= 0 and arr[i] <= arr[n-1]:\n        i -= 1\n    \n    # If the first element is greater than the last element, then the array is already sorted\n    if i < 0:\n        return count\n    \n    # Find the first element which is greater than the second last element\n    j = i-1\n    while j >= 0 and arr[j] <= arr[n-2]:\n        j -= 1\n    \n    # Check if the first element is greater than the second last element\n    if arr[j] > arr[i]:\n        count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    # Sorting the array\n    arr.sort()\n    \n    # Initializing the count variable\n    count = 0\n    \n    # Checking if the array is already sorted\n    if arr == sorted(arr):\n        count = 0\n    else:\n        count = 1\n        \n        # Traversing the array and checking if any element is out of place\n        for i in range(len(arr)):\n            if arr[i]!= arr[arr.index(arr[i])]:\n                count += 1\n                break\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Initialize a flag variable to check if the array is sorted or not\n    is_sorted = True\n\n    # Traverse through the array and check if it is sorted or not\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            is_sorted = False\n            break\n\n    # If the array is sorted, return 0\n    if is_sorted:\n        return 0\n\n    # Initialize two pointers, left and right, pointing to the first and last element of the array\n    left = 0\n    right = n - 1\n\n    # Initialize a variable to count the number of rotations required\n    count = 0\n\n    # Traverse through the array and check if the left pointer is greater than the right pointer\n    while left < right:\n\n        # If the left pointer is greater, increment the count\n        if arr[left] > arr[right]:\n            count += 1\n\n        # If the left pointer is less than the right pointer, swap the elements at the left and right pointers\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n\n        # Increment the left and right pointers\n        left += 1\n        right -= 1\n\n    # Return the count of rotations required to sort the array\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    for i in range(n//2):\n        if arr[i] > arr[n-i-1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i\n        while j < n and arr[j] <= arr[j-1]:\n            j += 1\n        if j - i > 1:\n            count += (j - i) / 2\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Initialize variables to keep track of the current index and the minimum element seen so far\n    current_index = 0\n    min_element = arr[0]\n\n    # Iterate over the array and update the current index and minimum element seen so far\n    for i in range(1, len(arr)):\n        # If the current element is less than the minimum element seen so far, update the minimum element\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n        # If the current element is greater than the minimum element seen so far and is less than the element at the current index, we have found a rotation\n        elif arr[i] > min_element and arr[i] < arr[current_index]:\n            # Move the current index to the next element and return the count of rotations\n            current_index = i\n            return i - current_index + 1\n\n    # If the array was already sorted, return 0\n    if current_index == len(arr) - 1:\n        return 0\n\n    # If the array was not sorted, return the count of rotations\n    return len(arr) - current_index - 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    # Traverse through the array and find the first element that is not in its correct position\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            # If the element is in its correct position, we need to check for rotation\n            if i > 0 and arr[i] < arr[i-1]:\n                # If the element is in its correct position and its adjacent element is greater, it means that there is a rotation\n                count += 1\n            break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n\n    # initialize count of rotations and find the smallest and largest elements in the array\n    count = 0\n    min_val = arr[0]\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    # check if the array is already sorted or not\n    if min_val == 0 and max_val == len(arr) - 1:\n        return 0\n\n    # calculate the mid point of the array\n    mid = (min_val + max_val) // 2\n\n    # iterate through the array and count the number of rotations required\n    for i in range(mid):\n        if arr[i] > arr[i + mid]:\n            count += 1\n\n    # if the array is sorted\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize a boolean array to check if the element is sorted\n    is_sorted = [True] * n\n    # Count the number of rotations required to generate a sorted array\n    count = 0\n    # Perform the required rotations to generate a sorted array\n    while not all(is_sorted):\n        # Perform a single rotation\n        for i in range(n - 1):\n            if arr[i] > arr[i + 1]:\n                # Swap the elements if they are not sorted\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n                # Mark the elements as sorted\n                is_sorted[i], is_sorted[i + 1] = True, True\n                # Increase the count of rotations\n                count += 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n\n    left, right = 1, n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check if a given number is a perfect square or not.\n    \"\"\"\n    import math\n    \n    # convert the number to integer\n    n = int(n)\n    \n    # check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # check if the number is a perfect square\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    \n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    elif n < 1:\n        return False\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n == i**2:\n                return True\n            elif n > i**2:\n                return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Find the square root of n using the Newton-Raphson method\n    root = n / 2.0\n    while True:\n        new_root = (root + n / root) / 2.0\n        if abs(new_root - root) < 0.00001:\n            break\n        root = new_root\n\n    # Check if the square root is an integer\n    if int(root) ** 2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Base case\n    if n == 1:\n        return True\n    elif n < 1:\n        return False\n    else:\n        # Using the mathematical formula for checking if a number is a perfect square\n        # a^2 = b^2\n        # b = sqrt(a)\n        # To check if a is a perfect square, we need to check if a%2 is 0 and b is an integer\n        # a = 4\n        # b = sqrt(a)\n        # a^2 = 4^2\n        # 4^2 = 16\n        # 2*4 = 8\n        # 4%2 = 0\n        # So 4 is a perfect square.\n        # a = 9\n        # b = sqrt(a)\n        # a^2 = 9^2\n        # 9^2 = 81\n        # 3*9 = 27\n        # 9%2 = 1\n        # So 9 is not a perfect square.\n        # a = 27\n        # b = sqrt(a)\n        # a^2 = 27^2\n        # 27^2 = 1345\n        # 5*27 = 1519\n        # 27%2 = 1\n        # So 27 is not a perfect square.\n        # a = 16\n        # b = sqrt(a)\n        # a^2 = 16^2\n        # 16^2 = 256\n        # 4*16 = 64\n        # 16%2 = 0\n        # So 16 is a perfect square.\n        # a = 64\n        # b = sqrt(a)\n        # a^2 = 64^2\n        # 64^2 = 262144\n        # 8*64 = 512\n        # 64%2 = 0\n        # So 64 is a perfect square.\n        # a = 256\n        # b = sqrt(a)\n        # a^2 = 256^2\n        # 256^2 = 6764801\n        # 16*256 = 65536\n        # 256%2 = 0\n        # So 256 is a perfect square.\n        # a = 6764801\n        # b = sqrt(a)\n        # a^2 = 6764801^2\n        # 6764801^2 = 17592186044416\n        # 33*6764801 = 225777841668132\n        # 6764801%2 = 1\n        # So 6764801 is not a perfect square.\n        # a = 17592186044416\n        # b = sqrt(a)\n        # a^2 = 17592186044416^2\n        # 17592186044416^2 = 2097152000\n        # 49*17592186044416 = 463559424034943\n        # 17592186044416%2 = 0\n        # So 17592186044416 is not a perfect square.\n        # a = 2097152000\n        # b = sqrt(a)\n        # a^2 = 2097152000^2\n        # 2097152000^2 = 10485760000\n        # 4*2097152000 = 83886080000\n        # 2097152000%2 = 0\n        # So 2097152000 is not a perfect square.\n        # a = 8388"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # function to check if a number is a perfect square\n    def is_perfect_square_helper(num):\n        if num < 2:\n            return True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # check if the number is a perfect square\n    if is_perfect_square_helper(n):\n        print(n, \"is a perfect square\")\n    else:\n        print(n, \"is not a perfect square\")"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if n is a perfect square\n    square = int(n**0.5)\n    if square**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the given number is less than or equal to 0\n    if n <= 0:\n        return False\n    \n    # Initialize the variable to store the square root\n    square_root = 0\n    \n    # Loop until the square root is less than or equal to the given number\n    while square_root**2 <= n:\n        # If the square root is equal to the given number, return True\n        if square_root**2 == n:\n            return True\n        \n        # Increase the square root by 1\n        square_root += 1\n        \n    # If the loop completes without finding a perfect square, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt_n = n ** 0.5\n    return sqrt_n == int(sqrt_n)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # sqrt() function to find the square root of a number\n    sqrt_n = int(n**0.5)\n\n    # Check if the square root of n is an integer\n    if sqrt_n**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) < 2:\n        return False\n    \n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Define a function to check if two lists have the same elements in any order\n    def same_elements(list1, list2):\n        set1 = set(list1)\n        set2 = set(list2)\n        return set1 == set2\n\n    # Define a function to check if a list of elements is sorted in ascending order\n    def is_sorted(lst):\n        return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n    # Define a function to calculate the sum of a list of elements\n    def sum_list(lst):\n        return sum(lst)\n\n    # Define a function to find the maximum sum of a list of elements that satisfies the given conditions\n    def find_max_sum(lst):\n        if len(lst) == 1:\n            return lst[0]\n\n        if is_sorted(lst):\n            return max(lst)\n\n        if same_elements(lst, lst[::-1]):\n            return lst[0] + max(lst[1:])\n\n        if same_elements(lst, lst[::-1][1:]):\n            return max(lst) + lst[-2]\n\n        return max(find_max_sum(lst[1:]), find_max_sum(lst[:-1]))\n\n    # Find the maximum sum of a list of lists that satisfies the given conditions\n    max_sum = 0\n    max_list = None\n    for sublist in lists:\n        current_sum = sum_list(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists[i])):\n            current_sum = sum(lists[i][j:])\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j], lists[i][j+1]]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        lst_sum = sum(lst)\n        \n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_sublists = None\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sublists = [sublist]\n        elif current_sum == max_sum:\n            max_sublists.append(sublist)\n    \n    return max_sublists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = lists[i]\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the maximum sum and the list with the maximum sum\n    max_sum = float('-inf')\n    max_list = None\n\n    # Iterate over the input lists\n    for lst in lists:\n        # Calculate the sum of elements in the current list\n        sum_lst = sum(lst)\n\n        # Update the maximum sum and the corresponding list if the new sum is greater\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n\n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for sublist in lists:\n        current_sum = sum(sublist)\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    start = 0\n    max_count = 0\n    max_start = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].isupper() and test_str[i+1].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_start = start\n        else:\n            count = 1\n            start = i+1\n    \n    if max_count == 1:\n        return test_str[max_start:max_start+2]\n    else:\n        return test_str[max_start:max_start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    run_start = 0\n    run_length = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str) - 1:  # Last character is uppercase\n                run_length += 1\n            else:\n                if test_str[i+1].isupper():  # Second character is uppercase\n                    run_length += 1\n                    run_start = i\n                else:  # Second character is not uppercase\n                    if run_length > max_run:\n                        max_run = run_length\n                        run_start = i\n                        run_length = 1\n        else:\n            if run_length > max_run:\n                max_run = run_length\n                run_start = i\n                run_length = 1\n    \n    return max_run, run_start, test_str[run_start:run_start + max_run]\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n    \n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n            current_run += 1\n        else:\n            current_run = 0\n        \n        if current_run > max_run:\n            max_run = current_run\n        \n        if uppercase_count == 0:\n            continue\n        \n        if current_run > 1 and uppercase_count > 1:\n            break\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run = 0\n    current_char = test_str[0]\n    max_run = 0\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and not test_str[i].isalpha():\n            run += 1\n        elif not test_str[i].isupper():\n            if run > max_run:\n                max_run = run\n            run = 0\n        current_char = test_str[i]\n\n    if run > max_run:\n        max_run = run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    # Create a dictionary to keep track of the count of uppercase characters\n    count = {}\n    # Iterate over the string\n    for char in test_str:\n        # If the character is uppercase, increment its count in the dictionary\n        if char.isupper():\n            count[char] = count.get(char, 0) + 1\n        # If the character is lowercase, decrement its count in the dictionary if it exists, or set it to 0\n        else:\n            if char in count:\n                count[char] = max(0, count[char] - 1)\n    # Find the maximum count\n    max_count = max(count.values())\n    # Iterate over the string again to find the longest run of uppercase characters\n    longest_run = ''\n    for i in range(len(test_str)):\n        if count[test_str[i]] == max_count:\n            longest_run += test_str[i]\n    return longest_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    run_length = 0\n    uppercase = False\n\n    # iterate over each character in the string\n    for char in test_str:\n        # check if the current character is uppercase\n        if char.isupper():\n            # if it is, check if the current run length is longer than the previous max_run\n            if run_length > max_run:\n                max_run = run_length\n                # reset the run_length and uppercase flag to 0\n                run_length = 0\n                uppercase = True\n            # if the current run length is equal to the max_run, increment it\n            else:\n                run_length += 1\n        # if the current character is not uppercase, reset the run_length and uppercase flag to 0\n        else:\n            run_length = 0\n            uppercase = False\n\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    uppercase = False\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run counter\n        if char.isupper():\n            current_run += 1\n        else:\n            # If the current run counter is greater than the maximum run counter, update the maximum run counter\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run counter to 0\n            current_run = 0\n\n        # If the current character is lowercase, update the uppercase flag\n        if char.islower():\n            uppercase = True\n\n    # If the current run counter is greater than the maximum run counter, update the maximum run counter\n    if current_run > max_run:\n        max_run = current_run\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 1\n    current_run = 1\n    last_uppercase = False\n\n    # Iterate through each character in the string\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            # If the character is uppercase, increment the current run and check if it is the longest\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n                last_uppercase = True\n        else:\n            # If the character is not uppercase, reset the current run\n            current_run = 1\n            last_uppercase = False\n\n    # If the last character is uppercase, increment the run count\n    if last_uppercase:\n        current_run += 1\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    start = 0\n    max_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n            if uppercase_count == 1:\n                start = i\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n        else:\n            uppercase_count = 0\n    \n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # loop through the list of numbers and find the first odd number\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    # if no odd numbers are found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if any(num in test_tup for num in K):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function checks if the given tuples contain the k or not.\n    '''\n    # Check if the K is within the length of the tuples\n    if len(test_tup) < K:\n        return False\n\n    # Check if the K is present in the tuples\n    for tup in test_tup:\n        if K in tup:\n            return True\n\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for item in test_tup:\n        if item == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return all(elem in K for elem in test_tup)"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples must have the same length.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return \"All elements of the second tuple must be smaller than or equal to their corresponding elements in the first tuple.\"\n    return \"All elements of the second tuple are smaller than or equal to their corresponding elements in the first tuple.\""
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Compare the length of the two tuples\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Compare each element of the second tuple to its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]