[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    # Loop through each element in the first list\n    for element in test_tup1:\n        # Loop through each element in the second list\n        for other_element in test_tup2:\n            # Check if the elements are the same\n            if element == other_element:\n                # If they are, add them to the list of common elements\n                common_elements.append(element)\n                break\n        # If we found a matching element in the second list, break out of the inner loop\n        if element in common_elements:\n            break\n    # If we found a matching element in the first list, return the list of common elements\n    if common_elements:\n        return common_elements\n    else:\n        return \"No shared elements found.\""
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Converting the two tuples into lists\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    \n    # Creating a set of elements from both lists\n    shared_elements = set(lst1) & set(lst2)\n    \n    # Converting the set back into a tuple\n    shared_tuple = tuple(shared_elements)\n    \n    # Returning the shared tuple\n    return shared_tuple"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create sets from the two tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection to a list\n    shared_list = list(intersection)\n    # Return the shared list\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create sets from the lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set to a list\n    shared_elements = list(intersection)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Initialize empty lists for shared elements\n    shared = []\n\n    # Iterate through the first tuple and check if each element exists in the second tuple\n    for elem in test_tup1:\n        if elem in test_tup2:\n            # If an element is found, add it to the shared list\n            shared.append(elem)\n\n    # Return the shared list\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    # Check if both lists have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return shared_elements\n    \n    # Iterate through both lists and check if each element is present in both lists\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the integer is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if the input number is not prime, otherwise it returns False.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    This function takes an integer n as input and returns a boolean value.\n    If n is not a prime number, it returns True, else False.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Checks if a number is not prime.\n    \"\"\"\n    if n <= 1:\n        return False\n\n    # Check if the number is divisible by any odd number less than the square root of n.\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 2\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a min heap to find the n largest numbers\n    max_heap = []\n    hq.heapify(max_heap)\n    # Add the first n numbers to the heap\n    for num in nums[:n]:\n        hq.heappush(max_heap, num)\n    # Add the remaining numbers to the heap, maintaining the heap property\n    for num in nums[n:]:\n        hq.heappushpop(max_heap, num)\n    # Extract the n largest numbers from the heap and return them in descending order\n    largest_numbers = []\n    while len(max_heap) > 0:\n        largest_numbers.append(hq.heappop(max_heap))\n    largest_numbers.reverse()\n    return largest_numbers"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap\n    heap = [0]*n\n    # Initialize the min heap with the first n elements of the input list\n    for i in range(n):\n        heap[i] = nums[i]\n        hq.heapify(heap)\n    # Iterate over the remaining elements of the input list\n    for i in range(n,len(nums)):\n        # Remove the smallest element from the heap\n        hq.heappop(heap)\n        # Add the next element to the heap\n        hq.heappush(heap,nums[i])\n    # Extract the n largest elements from the heap and return them in descending order\n    return list(reversed(heap))"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list into a min-heap\n    min_heap = hq.nlargest(n, nums)\n    # Return the min-heap as the result\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert list of numbers into min heap\n    min_heap = [nums[i] for i in range(n)]\n    heapq.heapify(min_heap)\n    \n    # Remove the smallest element from the heap until the n largest elements are found\n    while n < len(nums):\n        # Remove the smallest element from the heap\n        smallest = heapq.heappop(min_heap)\n        \n        # If there are still n elements left, add the next element to the heap\n        if n < len(nums):\n            # Add the next element to the heap\n            heapq.heappush(min_heap, nums[n])\n            n += 1\n    \n    # Return the n largest elements in descending order\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest = [-1] * n  # Initialize an array to store the n largest numbers\n    heap = []  # Initialize an empty heap to store the smallest numbers\n\n    # Build the heap from the input numbers\n    for num in nums:\n        if len(heap) < n:  # If the heap is not full, add the number to the heap\n            heapq.heappush(heap, num)\n        else:  # If the heap is full, compare the new number to the smallest number in the heap\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n\n    # Extract the n largest numbers from the heap and store them in the largest array\n    for i in range(n):\n        largest[i] = heapq.heappop(heap)\n\n    return largest\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap to store the n largest integers\n    hq_max = hq.nsmallest(n, nums)\n    # initialize an empty list to store the n largest integers\n    largest_n = []\n    # iterate through the input list and update the min heap\n    for num in nums:\n        if num > hq_max[0]:\n            # if the current number is larger than the smallest number in the heap, pop the smallest number from the heap\n            hq.heappop(hq_max)\n            # and add the current number to the heap\n            hq.heappush(hq_max, num)\n        # if the current number is smaller than or equal to the smallest number in the heap, add it to the list\n        else:\n            hq.heappush(hq_max, num)\n    # convert the min heap into a list of the n largest integers\n    for num in hq_max:\n        largest_n.append(num)\n    return largest_n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                hq.heappop(heap)\n                hq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of size n\n    min_heap = [None] * n\n    \n    # initialize the heap with the first n elements of the list\n    for i in range(n):\n        heapq.heappush(min_heap, -nums[i])\n        \n    # extract the n largest elements from the heap in descending order\n    for i in range(n, len(nums)):\n        # if the current number is greater than the smallest element,\n        # extract the smallest element from the heap and push the new number\n        if nums[i] > min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, -nums[i])\n    \n    # return the list of n largest elements\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of size n\n    min_heap = hq.nsmallest(n, nums)\n    \n    # remove the smallest elements from the heap and return them in descending order\n    largest_n = []\n    while min_heap:\n        largest_n.append(min_heap[0])\n        min_heap.pop(0)\n    \n    return largest_n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x > 1:\n        count += x & 1\n        x >>= 1\n    return count == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    # Check if x is a power of 2 or not\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if bin(x ^ 2**31) == bin(0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Check if the input is a positive integer\n    if type(x)!= int or x <= 0:\n        return \"Error: Input must be a positive integer.\"\n\n    # Check if the input is a power of 2\n    power = 1\n    while power < x:\n        power <<= 1\n\n    if power > x:\n        return \"Error: Input is not a power of 2.\"\n\n    # Check if the two numbers differ at one bit position only\n    if (x & power)!= 0:\n        return \"The two numbers differ at one bit position only.\"\n    else:\n        return \"The two numbers are the same.\""
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the integer to binary\n    binary = bin(x)[2:]\n    # Count the number of 1's in the binary representation\n    count = binary.count('1')\n    # Check if the count is 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: # check if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    return (x & (x - 1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    else:\n        while x % 2 == 0:\n            x //= 2\n        return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    bit_diff = False\n    if x == 0:\n        return True\n    if x < 0:\n        x = abs(x)\n    while x > 0:\n        if x & 1 == 1:\n            bit_diff = True\n            break\n        x >>= 1\n    return bit_diff"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # use regular expressions to find all words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n\n    # return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words using whitespace as the delimiter\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Convert all characters to lowercase\n    text = text.lower()\n    \n    # Use regular expressions to find all words that are at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    \n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Use a regular expression to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n\n    # Use the re.findall() function to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # Return a list of all matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        square = num ** 2\n        squares.append(square)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Loop through each element in the list\n    for num in nums:\n        # Find the square of the element and append it to a new list\n        new_list.append(num ** 2)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # Create a copy of the string to start with\n    str_copy = str\n    \n    # Initialize the minimum number of rotations to 0\n    min_rotations = 0\n    \n    # While the original string is different from the copy\n    while str_copy!= str:\n        # Increment the minimum number of rotations\n        min_rotations += 1\n        \n        # Make a copy of the original string\n        str_copy = str\n        \n        # For each character in the original string\n        for i in range(len(str)):\n            # Create a new string with the same characters as the original string, but with the character at the current position swapped with the previous one\n            str_copy = str[:i] + str_copy[i+1] + str[i]\n    \n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n\n    min_rotations = float('inf')\n    i = 0\n    j = len(str) - 1\n\n    while i < j:\n        if str[i] == str[j]:\n            i += 1\n            j -= 1\n        elif str[i] < str[j]:\n            min_rotations = min(min_rotations, j - i + 1)\n            i += 1\n        else:\n            j -= 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    for i in range(str_len):\n        for j in range(i, str_len):\n            if str[i:j+1] == str[j:i+1][::-1]:\n                return j - i + 1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_length = len(str)\n    min_rotations = float('inf')\n\n    for i in range(str_length):\n        for j in range(i+1, str_length):\n            substring = str[i:j+1]\n            if substring == str[j:i:-1]:\n                min_rotations = min(min_rotations, j-i+1)\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    rotations = []\n    rotations_list = [[0]]\n    n = len(str)\n    \n    for i in range(n):\n        new_str = str[i] + str[i:].replace(str[i], '', n-1-i)\n        count += 1\n        rotations.append(find_Rotations(new_str))\n        rotations_list.append([rotations[-1]] + rotations_list[-1])\n    \n    rotations_list = rotations_list[1:]\n    min_rotations = rotations_list[0][0]\n    for i in range(1, len(rotations_list)):\n        if rotations_list[i][0] < min_rotations:\n            min_rotations = rotations_list[i][0]\n            \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n-1):\n        if str[i] < str[i+1]:\n            return i+1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n\n    # Sort the string in ascending order\n    sorted_str = sorted(str)\n\n    # Initialize variables for minimum number of rotations and current rotation\n    min_rotations = 0\n    current_rotation = 0\n\n    # Iterate through the sorted string\n    for i in range(n):\n\n        # Check if the current character is smaller than the next character\n        if sorted_str[i] < sorted_str[i+1]:\n\n            # If yes, increment the number of rotations\n            current_rotation += 1\n\n            # If the maximum number of rotations is already found, break the loop\n            if current_rotation > min_rotations:\n                break\n\n        # If the current character is greater than the next character, reset the rotation count\n        else:\n            current_rotation = 0\n\n    # If the minimum number of rotations is still 0, there is no rotation required\n    if min_rotations == 0:\n        min_rotations = 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # Initialize the minRotations variable\n    minRotations = 0\n    # Initialize the count variable\n    count = 0\n    # Initialize the current and previous string\n    currStr = str\n    prevStr = ''\n    # Loop until the current and previous strings are same\n    while currStr!= prevStr:\n        # Increment the count and swap the current and previous strings\n        count += 1\n        currStr, prevStr = prevStr, currStr\n        # Update the minRotations variable if count is greater than 1\n        if count > 1:\n            minRotations = min(minRotations, count)\n    # Return the minimum number of rotations\n    return minRotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    # initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n\n    # find the length of the string\n    n = len(str)\n\n    # initialize a list of all possible rotations of the string\n    rotations = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            rotations.append(str[i:j])\n\n    # find the minimum number of rotations required to get the same string\n    min_rotations = float('inf')\n    for rotation in rotations:\n        count = 0\n        for char in rotation:\n            count += freq.get(char, 0)\n\n        if count == 0:\n            min_rotations = min(min_rotations, 1)\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    min_rotations = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if str[i] == str[j]: \n                return min_rotations \n            elif str[i] < str[j]: \n                min_rotations += 1\n    return min_rotations "
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    # Initialize two pointers at the beginning and end of the string\n    i = j = 0\n\n    # Iterate until we reach the end of the string\n    while i < len(s):\n        # If the current character is equal to the given character, move both pointers\n        if s[i] == ch:\n            j = i + 1\n        # If the current character is not equal to the given character, move only the first pointer\n        else:\n            i = i + 1\n\n        # If the first pointer is at the end of the string, we have reached the last occurrence of the given character\n        if j >= len(s):\n            break\n\n    # Return the string without the first and last occurrence of the given character\n    return s[:j] + s[j+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)  # convert string to list to manipulate it\n    index = 0\n    while index < len(s):\n        if s[index] == ch:  # found first occurrence\n            if index == 0:  # remove first occurrence if first char\n                s.pop(index)\n            else:\n                s.pop(index-1)\n                index -= 1  # move index back one\n        elif s[index] == ch:  # found last occurrence\n            if index == len(s)-1:  # remove last occurrence if last char\n                s.pop(index)\n            else:\n                s.pop(index+1)\n        index += 1\n    return ''.join(s)  # convert list back to string and return"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character is present in the string\n    if ch in s:\n        # find the first occurrence of the character\n        index = s.index(ch)\n        # remove the first occurrence\n        s = s[:index] + s[index+1:]\n        # remove the last occurrence\n        index = s.rindex(ch)\n        s = s[:index] + s[index+1:]\n    # return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string and a character as input and removes the first and last occurrence of the character in the string.\n    '''\n    # find the index of the first occurrence of the character\n    index = s.index(ch)\n    # find the index of the last occurrence of the character\n    last_index = s.rindex(ch)\n    # remove the first occurrence of the character\n    s = s[:index] + s[index+len(ch):]\n    # remove the last occurrence of the character\n    s = s[:last_index] + s[last_index+len(ch):]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) > 1:\n        return s.replace(ch, '', 1) + s.replace(ch, '', -1)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Split the string into list of characters\n    lst = list(s)\n    \n    # Initialize the first and last index of the character to be removed\n    first_index = 0\n    last_index = len(lst) - 1\n    \n    # Iterate through the list and remove the character if it is found\n    while lst[first_index] == ch:\n        first_index += 1\n        \n    while lst[last_index] == ch:\n        last_index -= 1\n        \n    # Join the characters in the list and return the result\n    return ''.join(lst[first_index:last_index+1])"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # use count() method to find the count of the character in the string\n    count = s.count(ch)\n\n    # if the character is present only once, it will be at the beginning or end of the string, so we can remove it\n    if count == 1:\n        if s[0] == ch:\n            s = s[1:]\n        elif s[-1] == ch:\n            s = s[:-1]\n\n    # if the character is present more than once, it will be in the middle of the string, so we can remove it from both ends\n    else:\n        s = s[:s.index(ch)] + s[s.index(ch)+1:]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1) + s.replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove the first and last occurrence of a given character from a string.\n    \"\"\"\n    return s.replace(ch, '').replace(ch, '')"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) == 1:\n        return s.replace(ch, '')\n    elif s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, '', 1) + s.replace(ch, '', -1)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the row sums in ascending order\n    row_sums.sort()\n\n    # Create a new matrix with the sorted row sums\n    result = [[row_sums[i] if row[j] == 0 else row_sums[i-1] for j in range(len(row))] for i in range(1, len(row_sums))]\n\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # Find the maximum sum in the current row\n        max_sum = M[i][i]\n        for j in range(i, n):\n            max_sum = max(max_sum, M[i][j])\n        # Modify the matrix to sort the current row in ascending order\n        for j in range(i, n):\n            M[i][j] -= max_sum"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-1):\n            if M[i][j] + M[i][j+1] < M[i][j]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    # Create a copy of the matrix\n    M_sorted = M.copy()\n\n    # Sort the rows of the matrix based on the sum of the rows\n    for i in range(len(M_sorted)):\n        M_sorted[i].sort()\n\n    # Sort the columns of the matrix based on the sum of the columns\n    for j in range(len(M_sorted[0])):\n        for i in range(len(M_sorted)):\n            M_sorted[i].insert(j, M_sorted[i][j])\n\n    return M_sorted"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # iterate over all rows of the matrix\n    for i in range(n):\n        # initialize a temporary variable to store the sum of the current row\n        curr_sum = 0\n        # iterate over all elements in the current row\n        for j in range(i):\n            # add the value of the element to the temporary sum\n            curr_sum += M[i][j]\n        # iterate over all elements in the current row\n        for j in range(i+1, n):\n            # compare the value of the element with the sum of the current row\n            if M[i][j] < curr_sum:\n                # swap the elements if necessary\n                M[i][j], M[j][i] = M[j][i], M[i][j]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        max_sum = float('-inf')\n        for j in range(n):\n            if j!= i:\n                curr_sum = M[i][j] + M[j][i]\n                if curr_sum > max_sum:\n                    max_sum = curr_sum\n        M[i][i], M[i][max_sum] = M[i][max_sum], M[i][i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Sort the row in ascending order\n        M[i].sort()\n        # Calculate the sum of the row\n        row_sum = sum(M[i])\n        # Loop through each row of the matrix again\n        for j in range(len(M)):\n            # If the sum of the current row is greater than the row sum of the previous row, swap the rows\n            if M[j].count(M[i][0]) > M[j].count(M[i][-1]):\n                M[j], M[i] = M[i], M[j]\n                break\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    # Sort rows in ascending order\n    for i in range(len(M)):\n        M[i].sort()\n\n    # Sort columns in ascending order\n    for j in range(len(M[0])):\n        for i in range(len(M)):\n            M[i][j] = M[i][j]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the sorted matrix to a copy of the input matrix\n    sorted_M = [[M[i][j] for j in range(len(M[0]))] for i in range(len(M))]\n\n    # Sort the rows of the sorted matrix in ascending order\n    for i in range(len(sorted_M)):\n        sorted_M[i] = sorted(sorted_M[i], reverse=True)\n\n    # Calculate the sum of the rows of the sorted matrix\n    row_sums = [sum(row) for row in sorted_M]\n\n    # Sort the sorted matrix in ascending order according to the row sums\n    sorted_M = sorted(sorted_M, key=lambda x: row_sums.index(sum(x)))\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Initialize an empty list to store the sorted matrix\n    sorted_M = []\n\n    # Iterate through each row of the matrix\n    for i in range(len(M)):\n\n        # Initialize a variable to store the sum of the current row\n        current_sum = sum(M[i])\n\n        # Iterate through each element of the current row and append it to the sorted_M list if its sum is greater than the sum of the previous rows\n        for j in range(len(M[i])):\n            if current_sum > sum(sorted_M[-1]):\n                sorted_M[-1].append(M[i][j])\n\n        # Add the current row to the sorted_M list\n        sorted_M.append(M[i])\n\n    return sorted_M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input and returns the volume of the prism.\n    '''\n    V = (l * b * h) / 3  # formula for volume of a triangular prism\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Formula for calculating the volume of a triangular prism\n    volume = (l*b*h)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    V = (1/3)*l*b*h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    print(\"The volume of the triangular prism is\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h\n    print(\"The volume of the triangular prism is: \", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    volume = l * b * h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function calculates the volume of a triangular prism.\n    '''\n    # Formula to calculate volume of a triangular prism\n    volume = 1/3 * l * b * h\n\n    # Return the volume of the triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z](?:(?<=\\w)([a-z]){1})*'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z][a-z0-9]+[a-z]'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    result = re.findall(pattern, text)\n    return bool(result)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b([a-z]+)_([a-z]+)\\b'\n    match = re.search(pattern, text)\n    if match:\n        groups = match.groups()\n        return all(c.islower() for c in groups[0]) and all(c.islower() for c in groups[1])\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define a regular expression to match sequences of lowercase letters\n    pattern = r'[a-z]+_[a-z]+'\n\n    # Use the re.search() method to search for the pattern in the input text\n    match = re.search(pattern, text)\n\n    # Return True if a match is found, otherwise False\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)_([a-z]+)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'[a-z][a-z_]*[a-z]'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    This function takes a side length of a square as input and returns its perimeter.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a * 4\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    if len(string) <= NO_OF_CHARS:\n        return [ord(char) for char in string]\n    else:\n        raise ValueError(\"The length of the string is greater than the maximum allowed.\")\n\n\nNO_OF_CHARS = 256"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a set of characters to remove from the first string\n    char_set = set(string)\n\n    # Remove all characters from the first string that are present in the set\n    new_string = ''.join([char for char in string if char not in char_set])\n\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as input and removes characters from the first string \n    which are present in the second string.\n    '''\n    # Convert the string to a list\n    string_list = list(string)\n    \n    # Remove characters from the first string which are present in the second string\n    for char in string_list:\n        if char in string:\n            string_list.remove(char)\n    \n    # Convert the list back to a string\n    result_string = ''.join(string_list)\n    \n    return result_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string1, string2): \n    #creating an empty list to store the remaining characters \n    remaining_chars = [] \n    for i in range(NO_OF_CHARS): \n        #checking if the current character is present in the second string \n        if i not in string2: \n            #adding the current character to the list \n            remaining_chars.append(chr(i)) \n    #joining the remaining characters to form the final string \n    final_string = ''.join(remaining_chars) \n    return final_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of ASCII values\n    ascii_list = list(string)\n    \n    # Get the set of characters from the second string\n    set_chars = set(string)\n    \n    # Loop through each character in the first string and remove it if it is present in the set of characters\n    for i in range(NO_OF_CHARS):\n        if i in set_chars:\n            ascii_list[i] = \" \"\n    \n    # Convert the list of ASCII values back to a string\n    new_string = \"\".join(ascii_list)\n    \n    # Return the new string\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and returns a list of characters without the characters present in the second string.\n    '''\n    # Create a dictionary to store the frequency of each character in the first string\n    freq_dict = {}\n    for char in string:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Create a list of characters present in the second string\n    second_list = [char for char in string if char in freq_dict]\n    \n    # Create a list of characters to remove from the first string\n    remove_list = [char for char in freq_dict if char not in second_list]\n    \n    # Remove the characters from the first string\n    for char in remove_list:\n        if char in freq_dict:\n            del freq_dict[char]\n    \n    # Convert the dictionary to a list of characters\n    result = [char for char in freq_dict]\n    \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(string)\n\n    # Create a set of characters present in the second string\n    set_second = set(string)\n\n    # Iterate through the list of characters and remove the characters present in the second string\n    for i in range(len(char_list)):\n        if char_list[i] in set_second:\n            char_list.pop(i)\n            i -= 1\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_string = string.lower()\n    second_string = string.lower()\n    first_string_chars = list(first_string)\n    second_string_chars = list(second_string)\n\n    for char in first_string_chars:\n        if char in second_string_chars:\n            second_string_chars.remove(char)\n\n    result = ''.join(first_string_chars)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_chars = []\n    char_set = set(string)\n    for char in string:\n        if char not in char_set:\n            list_chars.append(char)\n    return list_chars"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    # initialize a list of chars to keep track of the remaining chars\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    # create a list of the characters present in the second string\n    char_set = set(string)\n    # iterate through each character in the first string\n    for char in string:\n        # if the character is not in the set of present characters, remove it from the list of chars to keep track of the remaining chars\n        if char not in char_set:\n            char_list.remove(char)\n    # join the remaining chars into a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arraynums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # check if any element appears more than once in the dictionary\n    for key, value in freq.items():\n        if value > 1:\n            return True\n    \n    # if no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements of the array\n    unique_elements = set(arraynums)\n\n    # check if the length of the unique set is less than the length of the array\n    if len(unique_elements) < len(arraynums):\n        print(\"The array contains duplicate elements.\")\n    else:\n        print(\"The array does not contain duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create an empty dictionary to store the elements of the array\n    element_dict = {}\n\n    # Loop through each element of the array\n    for element in arraynums:\n\n        # If the element already exists in the dictionary, return True\n        if element in element_dict:\n            return True\n\n        # Otherwise, add the element to the dictionary\n        else:\n            element_dict[element] = True\n\n    # If all elements have been checked and no duplicates have been found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_set = set(arraynums)\n\n    # If the length of the set is equal to the length of the input array, then there are no duplicates\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the indices of the elements in the array\n    indices = {}\n    for i, num in enumerate(arraynums):\n        # If the number is not in the dictionary, add it with its index\n        if num not in indices:\n            indices[num] = i\n        # If the number is already in the dictionary, return True\n        else:\n            return True\n    # If no duplicate is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n    \n    # iterate through the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n        \n    # check if there are any duplicate elements in the set\n    return len(unique_set) > len(arraynums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hash_map = {}\n    for num in arraynums:\n        if num in hash_map:\n            return True\n        hash_map[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    woodball = [1, 5, 10, 20, 50, 100, 200, 500, 1000]\n    if x in woodball:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    elif x % 2 == 0:\n        return False\n    elif x % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 3 or x % 10 == 7 or x % 10 == 9: \n        return True \n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x > 0 and x % 2 == 0:\n        return \"Woodball\"\n    elif x > 0 and x % 2!= 0:\n        return \"Odd number\"\n    else:\n        return \"Even number\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define a list of prime numbers up to 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # Loop through each number in the list\n    for prime in primes:\n        # If the given number is divisible by the prime number, return False\n        if x % prime == 0:\n            return False\n    # If we make it through all the loops without returning False, return True\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 2:\n        return False\n    elif x % 2 == 0:\n        return True\n    else:\n        return is_woodall(x - 1)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x in [0, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    elif (3 * x**2) % 12 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num < (num + 1) * (num + 1) // 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    # Convert the number to a string\n    num = str(num)\n    # Reverse the string\n    reversed_num = num[::-1]\n    # Convert the reversed string back to a number\n    reversed_num = int(reversed_num)\n    # Check if the reversed number is one less than twice its original number\n    if reversed_num < (2 * num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        num = -num\n    \n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num = num // 10\n        \n    return True if reversed_num == 1 else False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the given number to a string\n    num = str(num)\n    # Reverse the string and convert it back to an integer\n    reverse_num = int(num[::-1])\n    # Calculate the difference between the original number and the reverse\n    difference = abs(num - reverse_num)\n    # Check if the difference is less than twice the reverse\n    if difference < 2 * reverse_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num < 2) * (num * 2 == (num + 1))"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the number to a string\n    num = str(num)\n    # Reverse the string\n    rev_str = num[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Check if the original number minus one is equal to the reversed number\n    if num - 1 == rev_num:\n        # If they are, the number is one less than twice its reverse\n        print(f\"{num} is one less than twice its reverse.\")\n    else:\n        # If they are not, the number is not one less than twice its reverse\n        print(f\"{num} is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        num = abs(num)\n    num_str = str(num)\n    num_reverse = int(num_str[::-1])\n    return num_reverse - num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # convert the given number to a string and reverse it\n    num_str = str(num)[::-1]\n    # convert the reversed number to an integer and add 1 to it\n    rev_num = int(num_str) + 1\n    # compare the original number with the reversed number\n    if num == rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    if num == 1:\n        return True\n    elif num == 0:\n        return False\n    else:\n        reversed_num = int(str(num)[::-1])\n        if num-1 == reversed_num:\n            return True\n        else:\n            return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    # Convert the number to a string\n    str_num = str(num)\n\n    # Reverse the string\n    rev_str = str_num[::-1]\n\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n\n    # Check if the number is one less than twice its reverse\n    if num < rev_num * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize a variable to store the current maximum number\n    max_num = 0\n\n    # Traverse through each digit in the list\n    for digit in arr:\n        # Initialize a variable to store the maximum number that can be formed with the current digit\n        current_num = 0\n\n        # Traverse through each digit that is less than the current digit\n        for j in range(digit):\n            # Multiply the current maximum number with the current digit to get the new maximum number\n            current_num = current_num * 10 + j + 1\n\n        # Update the maximum number if the current number is greater than the current maximum number\n        if current_num > max_num:\n            max_num = current_num\n\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = list(map(int, arr)) # converting list of strings into list of integers\n    arr.sort(reverse=True) # sorting the list in descending order\n    \n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            num = arr[i]*100 + arr[j] # forming the number\n            if num > max_num:\n                max_num = num\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the list of digits in ascending order\n    arr.sort()\n    # Initialize the maximum number to 0\n    max_num = 0\n    # Traverse through the sorted list of digits\n    for digit in arr:\n        # Calculate the power of 10 for the current digit\n        power = 10 ** (len(arr) - arr.index(digit))\n        # Update the maximum number if the current number is greater\n        max_num = max(max_num, digit * power)\n    # Return the maximum number formed by the given digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Create a set to store unique digits\n    digits = set()\n    for num in arr:\n        # Convert the number to a string\n        num_str = str(num)\n        # Add the digits in the set\n        digits.update(set(num_str))\n\n    # Find the maximum possible number by adding all possible digits\n    max_num = 0\n    for digit in digits:\n        max_num += int(digit)\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += int(arr[i])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for num in arr:\n        max_num += num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_sum = 0\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        dp[i] = max(arr[i - 1] + dp[i - 1], dp[i - 1])\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n    return max_sum"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    res = []\n    while arr:\n        max_num = 0\n        for i in range(len(arr)):\n            if arr[i] == 0:\n                continue\n            max_num = max(max_num, i*arr[i])\n        res.append(max_num)\n        arr = [x-max_num for x in arr]\n    return max(res)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y): \n    if x < 0 and y < 0 or x > 0 and y > 0: \n        return \"The given integers have opposite signs.\" \n    else: \n        return \"The given integers have same signs.\" "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x > 0 and y > 0: \n        return True\n    elif x < 0 and y < 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0 and y >= 0) or (x < 0 and y < 0):\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x < 0 and y < 0:\n        return \"Both numbers have opposite signs.\"\n    elif x > 0 and y > 0:\n        return \"Both numbers have opposite signs.\"\n    elif x < 0 and y > 0:\n        return \"The first number has opposite sign.\"\n    elif x > 0 and y < 0:\n        return \"The second number has opposite sign.\"\n    else:\n        return \"The given numbers have same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if x and y have the same sign\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return True\n    # check if x and y have the same sign\n    elif (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return True\n    elif (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0 and y >= 0) or (x < 0 and y < 0): \n        return True \n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y): \n    \"\"\"\n    This function takes two integers as input and returns True if the first integer is negative and the second integer is positive,\n    or vice versa, or returns False if both integers have the same sign.\n    \"\"\"\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return 10 ** ((n-1) // 2) ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the formula for the nth octagonal number\n    formula = (8 * n * n) - (3 * n) + 1\n    \n    # Check if the result is a positive integer\n    if formula > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return \"Error: n should be a positive integer.\"\n    # Initialize variables for calculating the octagonal number\n    a = 1\n    b = 8\n    # Calculate the nth octagonal number using the formula a^3 + b^3\n    oct_num = a**3 + b**3\n    # Check if the octagonal number is equal to n\n    if oct_num == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    limit = n * (n + 1) // 2\n    for i in range(1, limit + 1):\n        if i % 8 == 0:\n            return False\n    return True\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    octagonal = 0\n    i = 1\n    while True:\n        if is_octagonal(i):\n            count += 1\n            if count == n:\n                return octagonal\n        i += 1\n        octagonal += 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def octagonal_sum(m):\n        '''\n        Helper function to calculate the sum of the nth octagonal number.\n        '''\n        return (2 * m ** 2 + 1) * m / 6\n\n    return octagonal_sum(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (8 * (n**2) + 1) // 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 8\n    c = 2\n    d = 1\n    while b < 10000000000000:\n        a = b\n        b = 8 * a - 32 * b + 32 * d\n        c = 2 * a + 1\n        d = a + b + c\n        if d == n:\n            return b"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (16*n*n + 12*n + 1) // 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def helper(i):\n        '''\n        Helper function to find the nth octagonal number.\n        '''\n        return i * (i + 1) + 1\n\n    if n <= 1:\n        return False\n\n    if n == 2:\n        return helper(1)\n\n    if n == 3:\n        return helper(2)\n\n    if n == 4:\n        return helper(3)\n\n    i = 5\n    while i <= n:\n        if helper(i) == n:\n            return True\n        i += 1\n\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the formula for octagonal numbers\n    a = 3 * n - 1\n    b = 3 * n - 2\n    c = 3 * n - 3\n    \n    # Check if the given number is octagonal or not\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with each digit sum\n    digit_counts = defaultdict(int)\n\n    # loop through each character in the string\n    for char in s:\n        # convert the character to a list of digits\n        digits = [int(digit) for digit in str(char)]\n        # calculate the sum of digits in the list\n        digit_sum = sum(digits)\n        # add one to the count of substrings with the digit sum\n        digit_counts[digit_sum] += 1\n\n    # return the sum of all the counts\n    return sum(digit_counts.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digits = [int(digit) for digit in substring]\n            sum_digits = sum(digits)\n            if sum_digits == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    digit_count = defaultdict(int)\n\n    # Iterate through each character in the string and add the count of substrings with the sum of digits equal to their length\n    for i in range(len(s)):\n        substring = s[i:]\n        if sum(map(int, substring)) == len(substring):\n            digit_count[len(substring)] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(digit_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings\n    counts = defaultdict(int)\n\n    # Iterate over all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Check if the sum of digits of the substring is equal to its length\n            if sum(int(d) for d in s[i:j]) == len(s[i:j]):\n                # Increment the count of the substring in the dictionary\n                counts[tuple(s[i:j])] += 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Initialize a defaultdict to store the count of substrings with the sum of digits equal to their length\n    count = defaultdict(int)\n\n    # Iterate through all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            # Check if the sum of digits of the substring is equal to the length of the substring\n            if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                # Update the count of the substring in the defaultdict\n                count[len(s[i:j])] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # initialize a dictionary to store the count of substrings\n    counts = defaultdict(int)\n    \n    # loop through each substring of the string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # extract the substring\n            substring = s[i:j]\n            \n            # check if the substring has a sum of digits equal to its length\n            if sum([int(digit) for digit in substring]) == len(substring):\n                # increment the count for this substring\n                counts[substring] += 1\n    \n    # return the count of substrings with the sum of digits equal to their length\n    return sum(counts.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a defaultdict to store the count of substrings with sum of digits equal to their length\n    count_dict = defaultdict(int)\n    \n    # Loop through each character in the string s\n    for i in range(len(s)):\n        # Extract the substring starting from index i and ending at the end of the string\n        substring = s[i:]\n        # Loop through each character in the substring and add it to a running sum\n        running_sum = 0\n        for char in substring:\n            running_sum += int(char)\n        # If the running sum is equal to the length of the substring, increment the count in the count_dict\n        if running_sum == len(substring):\n            count_dict[len(substring)] += 1\n    \n    # Return the count of all substrings with sum of digits equal to their length\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digits_sum = sum(map(int, substring))\n            if digits_sum == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # create a dictionary to store the count of substrings with each digit sum\n    digit_count = defaultdict(int)\n    \n    # loop through the string\n    for i in range(len(s)):\n        # convert the current substring to a list of digits\n        substring = [int(d) for d in s[i:i+len(s)-i]]\n        # calculate the digit sum of the substring\n        digit_sum = sum(substring)\n        # update the dictionary with the current digit sum as the key and the current substring count as the value\n        digit_count[digit_sum] += 1\n        \n    # return the sum of all substring counts for each digit sum\n    return sum(digit_count.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list as input and returns the smallest number in the list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for x in xs:\n            if x < smallest:\n                smallest = x\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:  # base case: empty list\n        return None\n    else:\n        return min(xs)  # recursive case: find smallest element in rest of list"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables\n    max_diff = 0\n    prev_num = 0\n    \n    # Loop through the list of tuples\n    for num in test_list:\n        # If this is the first number, skip it\n        if num == prev_num:\n            continue\n        # Calculate the difference between the current and previous numbers\n        diff = abs(num - prev_num)\n        # Update the maximum difference if this one is greater\n        if diff > max_diff:\n            max_diff = diff\n        # Update the previous number\n        prev_num = num\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    differences = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            differences.append(abs(test_list[i][0] - test_list[j][0]))\n    return max(differences)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            diff_list.append(diff)\n    return max(diff_list)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = test_list[j][1] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = test_list[j][0] - test_list[i][0]\n            max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # create a set of tuples to remove duplicates\n    test_set = set(test_list)\n    # sort the set in ascending order\n    sorted_set = sorted(test_set)\n    # calculate the difference between adjacent pairs\n    max_diff = sorted_set[-1] - sorted_set[0]\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize variables\n    max_diff = 0\n    prev_num = 0\n    \n    # loop through the list\n    for num in test_list:\n        # calculate the difference between the current number and the previous number\n        diff = num - prev_num\n        \n        # update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n        \n        # update the previous number to the current number\n        prev_num = num\n    \n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Convert the list of tuples into a list of lists\n    subjectmarks_list = [list(i) for i in subjectmarks]\n    \n    # Sort the list of lists based on the second value of each tuple\n    subjectmarks_list.sort(key=lambda x: x[1])\n    \n    # Convert the sorted list of lists back into a list of tuples\n    sorted_subjectmarks = [(x[0], y) for x in subjectmarks_list for y in x]\n    \n    return sorted_subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second element of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        if isinstance(lst, list):\n            return sum([flatten(x) for x in lst])\n        else:\n            return lst\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: If the list is empty or only contains empty lists, return 0\n    if not data_list or all(isinstance(x, list) and not x for x in data_list):\n        return 0\n    \n    # Recursive case: Flatten the list and add its elements to the sum\n    else:\n        flat_list = [item for sublist in data_list for item in sublist]\n        return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(data_list):\n        '''\n        Function to flatten a list recursively.\n        '''\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    def sum_flat_list(flat_list):\n        '''\n        Function to sum all elements in a flattened list.\n        '''\n        total = 0\n        for item in flat_list:\n            total += item\n        return total\n\n    flattened_list = flatten(data_list)\n    return sum_flat_list(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(data_list) + recursive_list_sum(sum(data_list))\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the input list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: sum the head of the list and the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element of the list to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        '''\n        Recursive function to flatten a list.\n        '''\n        if isinstance(lst, list):\n            return [item for sublist in lst for item in flatten_list(sublist)]\n        else:\n            return [lst]\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and counts the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case: if n is 0 or 1, there is only one way to partition the set\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize variables to keep track of the number of ways to partition the set\n    ways_to_partition = [0] * (n+1)\n    \n    # Initialize variables to keep track of the last digit of the Bell number\n    last_digit = 1\n    \n    # Iterate through the Bell numbers and count the number of ways to partition the set\n    for i in range(2, n+1):\n        # Count the number of ways to partition the set by partitioning the Bell number into two parts\n        ways_to_partition[i] = ways_to_partition[i-1] + ways_to_partition[i-2]\n        # Update the last digit of the Bell number\n        last_digit = i % 10\n    \n    # Return the final count of ways to partition the set\n    return ways_to_partition[-1]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    \n    # Initialize the count to 1\n    count = 1\n    \n    # Loop through all the numbers up to n-1\n    for i in range(1, n+1):\n        # Compute the number of ways to partition the current number i\n        count *= (2*i-1) / i\n    \n    # Return the final count\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 4 * bell_number(n-1) + 2 * bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 15\n    elif n == 5:\n        return 52\n    elif n == 6:\n        return 210\n    elif n == 7:\n        return 1290\n    elif n == 8:\n        return 8400\n    elif n == 9:\n        return 72000\n    elif n == 10:\n        return 630000\n    elif n == 11:\n        return 5832000\n    elif n == 12:\n        return 55000000"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    # Initialize variables\n    total = 0\n    count = 1\n    \n    # Loop through numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # If number is odd, multiply count by 2\n        if i % 2!= 0:\n            count *= 2\n            \n        # If count is greater than n, reset it to 1\n        if count > n:\n            count = 1\n            \n        # Add count to total\n        total += count\n        \n    return total"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Calculate the Bell numbers up to n\n    bell_numbers = [0] * (n+1)\n    bell_numbers[0] = 1\n    bell_numbers[1] = 1\n\n    # Calculate the number of ways to partition the set using recursion\n    def partition_ways(start, end):\n        if start == end:\n            return 1\n        if bell_numbers[start] == bell_numbers[end]:\n            return partition_ways(start+1, end)\n        else:\n            return (partition_ways(start, end-1) + partition_ways(start+1, end))\n\n    # Return the number of ways to partition the set using the helper function\n    return partition_ways(0, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    def helper(k, n):\n        if k == 0:\n            return 1\n        elif k == n:\n            return 1\n        else:\n            return helper(k - 1, n - 1) + helper(k, n - 1)\n    \n    return helper(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the number of ways to partition as 1\n    ways = 1\n    \n    # Loop through all possible values of Bell numbers up to n\n    for bell in range(1, n+1):\n        # Calculate the number of ways to partition the current Bell number\n        num_ways = bell * (n - bell + 1) // bell\n        \n        # Update the number of ways to partition to the maximum value found so far\n        ways = max(ways, num_ways)\n    \n    # Return the number of ways to partition the set of Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # create a list of Bell numbers up to n\n    bell_numbers = [1] * n\n\n    # initialize a variable to keep track of the number of partitions\n    num_partitions = 0\n\n    # loop through the list of Bell numbers\n    for i in range(1, n+1):\n        # if the Bell number is odd, add it to the partition count\n        if bell_numbers[i-1] % 2 == 1:\n            num_partitions += 1\n\n        # update the Bell number by multiplying it by 2\n        bell_numbers[i-1] *= 2\n\n    # return the partition count\n    return num_partitions"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Calculate the number of ways to partition the set of Bell numbers\n    def partition_set(n):\n        return sum([bin(i).count('1') for i in range(2, n+1)])\n\n    # Calculate the number of ways to partition the set of Bell numbers using dynamic programming\n    def partition_set_dp(n):\n        memo = [0] * (n+1)\n        memo[0] = 1\n        memo[1] = 1\n        for i in range(2, n+1):\n            for j in range(1, i):\n                memo[i] += memo[j] * memo[i-j]\n        return memo[n]\n\n    # Call the function to find the number of ways to partition the set of Bell numbers\n    return partition_set(n)\n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True  # base case: empty or singleton array is always monotonic\n    \n    if A[0] < A[1]: \n        for i in range(1, len(A)): \n            if A[i] <= A[i-1]: \n                return False  # decreasing sequence\n        return True  # increasing sequence\n    \n    if A[0] > A[1]: \n        for i in range(1, len(A)): \n            if A[i] >= A[i-1]: \n                return False  # increasing sequence\n        return True  # decreasing sequence"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: # check if array has at least two elements\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]: # check if array is monotonic\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if it is monotonic, False otherwise.\n    A is an array consisting of integers.\n    \n    If the array is monotonic, then all its elements are either increasing or decreasing. \n    If the array is decreasing, then the array is sorted in decreasing order. \n    If the array is increasing, then the array is sorted in increasing order.\n    \n    A monotonic array is either increasing or decreasing.\n    '''\n    \n    # check if the array is empty\n    if len(A) == 0:\n        return False\n    \n    # check if the array contains only one element\n    if len(A) == 1:\n        return True\n    \n    # check if the array is increasing or decreasing\n    if A[0] <= A[1]:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    Check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) <= 1:\n        return True\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check if the array has only one element\n    if len(A) == 1:\n        return True\n    \n    # check if the array is monotonic from the first element to the second element\n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    \n    # check if the array is monotonic from the second element to the third element\n    elif A[1] < A[2]:\n        for i in range(2, len(A)):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    \n    # if the array is not monotonic, return False\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n            \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function takes an array A and returns True if it is monotonic or False otherwise.\n    If the array is monotonic, then the array can be traversed either increasingly or decreasingly.\n    If the array is not monotonic, then the array cannot be traversed in either direction.\n    \"\"\"\n    # Check if the array is empty or contains only one element\n    if len(A) <= 1:\n        return True\n    \n    # Check if all the elements in the array are the same\n    if len(set(A)) == 1:\n        return True\n    \n    # Check if the array is monotonic increasing\n    if A[0] < A[-1] and all(A[i] < A[i+1] for i in range(len(A)-1)):\n        return True\n    \n    # Check if the array is monotonic decreasing\n    if A[0] > A[-1] and all(A[i] > A[i+1] for i in range(len(A)-1)):\n        return True\n    \n    # If none of the above conditions are met, then the array is not monotonic\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    elif A[0] == A[-1]:\n        return is_Monotonic(A[1:-1])\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if it is monotonic and False otherwise.\n    A monotonic array is one where for all i and j where 0 <= i <= j < n-1, A[i] <= A[j].\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    # Check if the list contains the given sublist\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    # If the list doesn't contain the sublist, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if s[0] in l:\n        return is_sublist(l, s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # Check if s is a sublist of l\n    if s in l:\n        return True\n    else:\n        # Check if s is a sublist of any element in l\n        for i in range(len(l)):\n            if is_sublist(s, l[i]):\n                return True\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    # Check if s is a sublist of l\n    if l in s:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # If the length of the list is less than the length of the sublist, it cannot be a sublist.\n    if len(l) < len(s):\n        return False\n    \n    # If the sublist is a prefix of the list, then it must be a sublist.\n    if l[:len(s)] == s:\n        return True\n    \n    # If the sublist is not a prefix of the list, then it cannot be a sublist.\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    elif len(l) == len(s):\n        for i in range(len(s)):\n            if l[i]!= s[i]:\n                return False\n        return True\n    else:\n        for i in range(len(s)-len(l)+1):\n            if l == s[i:i+len(l)]:\n                return True\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Checks whether a list contains the given sublist or not.\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the sublist is empty\n    if not s:\n        return True\n    \n    # Initialize the starting index of the sublist\n    start = 0\n    \n    # Iterate through the list\n    for i in range(len(l)):\n        # Check if the current element matches the first element of the sublist\n        if l[i] == s[0]:\n            # If it does, check if the remaining elements of the sublist match the rest of the list\n            if s[1:] == l[i+start:]:\n                # If they do, return True\n                return True\n            \n            # If not, move the starting index to the next element and continue the search\n            else:\n                start = i+1\n    \n    # If no match is found, return False\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if all the tuples have the same length\n    for i in range(len(Input)):\n        if len(Input[0])!= len(Input[i]):\n            return False\n    \n    # If all the tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    flag = True\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            flag = False\n            break\n    return flag"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for tup in Input:\n        if len(tup) == count:\n            count += 1\n        else:\n            return False\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Check if the input is a list of tuples\n    if not all(isinstance(t, tuple) for t in Input):\n        return \"Input is not a list of tuples\"\n\n    # Loop through the tuples and check their lengths\n    for t in Input:\n        if len(t)!= len(set(t)):\n            return \"There are tuples with different lengths\"\n\n    # If no errors are found, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = [len(x) for x in Input]\n    return all(x == lengths[0] for x in lengths)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Iterate over all the tuples in the input list\n    for tup in Input:\n        # Find the length of the first tuple\n        length1 = len(tup)\n        # Iterate over all the tuples in the input list\n        for tup2 in Input:\n            # If the first tuple is not equal to the second tuple, return False\n            if tup!= tup2:\n                return False\n        # If we reach this point, all the tuples have equal length\n        return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        gap = (gap * 13) // 10\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = gap//1.3\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n\n    # Initialize gap and swapping variables\n    gap = n\n    swapping = True\n\n    # Main loop\n    while swapping:\n        # Initialize swapping as False\n        swapping = False\n\n        # Set i as the start of the array\n        for i in range(gap):\n            # If the element is already in its correct position, move to the next element\n            if i >= n-gap:\n                break\n\n            # If the element is in the wrong position, swap it with the adjacent element\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapping = True\n\n        # Decrease the gap size by half\n        gap = int(gap/1.3)\n\n        # If gap size becomes 1, sort is done\n        if gap == 1:\n            swapping = False\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    The Comb Sort algorithm has a worst-case time complexity of O(n^2) in the average and best cases,\n    but it has a worst-case space complexity of O(1). It's a simple sorting algorithm with an efficient\n    divide-and-conquer approach.\n\n    Args:\n    nums (list): The list of elements to be sorted.\n\n    Returns:\n    The sorted list of elements.\n    '''\n\n    # Initialize variables\n    swapped = True\n    i = 0\n    n = len(nums)\n\n    # Main loop\n    while swapped:\n        swapped = False\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                swapped = True\n        i += 1\n\n    # Return sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # initialize the swapping flag and iteration count\n    swapping = True\n    count = 0\n\n    # swap adjacent elements if they are in the wrong order\n    while swapping:\n        swapping = False\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapping = True\n        count += 1\n\n    # repeat the above process until no swaps are made\n    while swapping:\n        swapping = False\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapping = True\n        count += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        \n        for i in range(0, gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        \n        gap = int(gap / 1.3)\n        \n        if gap < 1:\n            gap = 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = (gap + n) // 2\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = int(gap / 1.3)\n        if gap == 0:\n            gap = 1\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        sorted = True\n        for i in range(gap, n):\n            if nums[i - gap] > nums[i]:\n                sorted = False\n                break\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    Args:\n        nums (list): A list of elements to be sorted.\n\n    Returns:\n        A sorted list of elements.\n    '''\n    n = len(nums)\n    max_iter = n * 10\n    swapped = True\n\n    while swapped:\n        swapped = False\n        gap = n // 2\n        i = 0\n\n        while i < gap and i < n - gap:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n            i += 1\n\n        n = gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # initialize the swapped variable and iteration counter\n    swapped = True\n    i = 0\n    \n    # while the swapped variable is True, iterate the list and swap adjacent elements if they are not in the correct order\n    while swapped:\n        swapped = False\n        for j in range(len(nums) - i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n                swapped = True\n        i += 1\n        \n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the number is a square\n    if n**0.5 % 1 == 0: \n        return True\n\n    # Check if the number can be represented as the difference of two squares\n    i = 1\n    while i * i <= n: \n        if i * i + n == i**2: \n            return True\n        elif i * i + n > i**2: \n            n -= i * i\n        i += 1\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Check for even number of digits\n    if len(str(n)) % 2!= 0:\n        return \"Invalid input: The number of digits must be odd\"\n\n    # Initialize two variables for left and right parts of the difference\n    left, right = 0, 0\n\n    # Iterate through the digits of the input number\n    for digit in str(n):\n        # If the current digit is odd, add it to the right part of the difference\n        if int(digit) % 2!= 0:\n            right = right * 10 + int(digit)\n\n        # If the current digit is even, add it to the left part of the difference\n        else:\n            left = left * 10 + int(digit)\n\n    # Check if the difference is greater than or equal to the input number\n    if left * left + right * right >= n:\n        return \"Yes, the difference is a square\"\n    else:\n        return \"No, the difference is not a square\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Loop through all possible differences between squares up to n\n    for i in range(n):\n        for j in range(i, n+1):\n            # Check if the difference between squares is n\n            if i*i + j*j == n:\n                return True\n    # If no difference between squares exists, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0 and n // i == i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_dif_square(n):\n    # Check if the given number is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n    \n    # Find the square of the given number\n    sq_n = n**2\n    \n    # Check for the special case of 1 and 0\n    if sq_n == 1 or sq_n == 0:\n        return True\n    \n    # Find the square of the difference of two squares\n    diff_sq = (sq_n + 1) // 2\n    \n    # Check if the difference of two squares is equal to the given number\n    return diff_sq**2 == n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return \"Please enter a positive integer.\"\n\n    # check if n can be represented as the difference of two squares\n    for i in range(int(n**0.5)+1):\n        for j in range(int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Using trial division method to check for factors of 2\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                return True\n            else:\n                return False\n\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return True\n    if n < 0: \n        n = -n\n    if n % 4 == 0: \n        return False\n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: \n            if i*i == n: \n                return False\n            if i*i + n == n**2: \n                return False\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the given number can be represented as the difference of two squares\n    for i in range(1, n):\n        if n-i*i == i*i:\n            print(\"Yes, it can be represented as the difference of two squares.\")\n            return\n    print(\"No, it cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Base case\n    if n == 1:\n        return True\n    elif n < 1:\n        return False\n    # Recursive case\n    elif n % 2 == 0:\n        return dif_Square((n//2)*(n//2))\n    else:\n        return dif_Square((n-1)*(n-1)+1)"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Check if the length of patterns and colors is equal\n    if len(patterns)!= len(colors):\n        return False\n    \n    # Initialize the count of each pattern to 0\n    counts = [0] * len(patterns)\n    \n    # Initialize the count of each color to 0\n    color_count = {}\n    for color in colors:\n        color_count[color] = 0\n    \n    # Iterate through the colors and count the occurrences of each pattern\n    for color in colors:\n        pattern = patterns[colors.index(color)]\n        if pattern in color_count:\n            color_count[pattern] += 1\n    \n    # Check if all the counts are equal to 0\n    for count in counts:\n        if count!= 0:\n            return False\n    \n    # Check if the count of each pattern matches the number of occurrences in the color list\n    for pattern, count in zip(patterns, counts):\n        if color_count[pattern] < count:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if not (colors.count(pattern[0]) == len(colors) // len(patterns)):\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    color_count = {}\n    current_pattern = []\n    for i, color in enumerate(colors):\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n        \n        current_pattern.append(color)\n        \n        if len(current_pattern) > 1 and current_pattern[-2:] == patterns[-1]:\n            if len(current_pattern) > 2 and current_pattern[-3:] == patterns[-2]:\n                return True\n        \n        if len(current_pattern) > 1 and current_pattern[-2:] == patterns[-2]:\n            if len(current_pattern) > 3 and current_pattern[-4:] == patterns[-3]:\n                return True\n        \n        if len(current_pattern) > 1 and current_pattern[-2:] == patterns[-3]:\n            if len(current_pattern) > 4 and current_pattern[-5:] == patterns[-4]:\n                return True\n        \n        if len(current_pattern) > 1 and current_pattern[-2:] == patterns[-4]:\n            if len(current_pattern) > 5 and current_pattern[-6:] == patterns[-5]:\n                return True\n        \n        if len(current_pattern) > 1 and current_pattern[-2:] == patterns[-5]:\n            if len(current_pattern) > 6 and current_pattern[-7:] == patterns[-6]:\n                return True\n        \n        if len(current_pattern) > 1 and current_pattern[-2:] == patterns[-6]:\n            if len(current_pattern) > 7 and current_pattern[-8:] == patterns[-7]:\n                return True\n    \n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(patterns)!= len(colors):\n        return False\n\n    i = 0\n    while i < len(colors):\n        if colors[i]!= patterns[i]:\n            return False\n        i += 1\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-1):\n        if colors[i] == colors[i+1]:\n            continue\n        for pattern in patterns:\n            if colors[i] == pattern[0] and colors[i+1] == pattern[1]:\n                break\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-1):\n        if colors[i]!= colors[i+1] and patterns[i][0] == patterns[i+1][0]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    seq = []\n    for color in colors:\n        seq.append(color)\n        if len(seq) == len(patterns):\n            if seq == patterns:\n                return True\n            else:\n                seq = []\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    # check if the length of the colors and patterns arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # initialize a variable to keep track of the current pattern index\n    current_pattern = 0\n\n    # iterate through the colors array\n    for color in colors:\n        # check if the current color matches the current pattern in the patterns array\n        if color!= patterns[current_pattern]:\n            return False\n\n        # increment the current pattern index\n        current_pattern = (current_pattern + 1) % len(patterns)\n\n    # if we make it through the loop without finding a mismatch, return True\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(num % K == 0 for num in test_list[i] + test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    found_tuples = []\n    for tuple_1 in test_list:\n        divisible_count = 0\n        for element in tuple_1:\n            if element % K == 0:\n                divisible_count += 1\n        if divisible_count == len(tuple_1):\n            found_tuples.append(tuple_1)\n    return found_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # initialize an empty list to store the tuples\n    result = []\n\n    # loop through each tuple in the test_list\n    for tup in test_list:\n        # initialize a counter for the elements in the tuple\n        count = 0\n\n        # loop through each element in the tuple\n        for elem in tup:\n            # if the element is divisible by K, increment the counter\n            if elem % K == 0:\n                count += 1\n\n        # if the counter is equal to the length of the tuple, add the tuple to the result list\n        if count == len(tup):\n            result.append(tup)\n\n    # return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple_ in test_list:\n        if all(elem % K == 0 for elem in tuple_):\n            result.append(tuple_)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            divisible_tuples.append(tup)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input and returns a new list of tuples that\n    contain only those elements that are divisible by K from the input list.\n    '''\n    divisible_tuples = []\n    for tuple in test_list:\n        all_divisible = True\n        for element in tuple:\n            if element % K!= 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            divisible_tuples.append(tuple)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    new_list = []\n    for i in range(len(test_list)):\n        flag = True\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K!= 0:\n                flag = False\n                break\n        if flag:\n            new_list.append(test_list[i])\n    return new_list"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function checks whether a number is divisible by 11.\n    \"\"\"\n    return n % 11 == 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the sentence into words\n    for word in words:\n        if len(word) % 2 == 0:  # if the length of the word is even\n            print(word + \" is even\")\n        else:  # if the length of the word is odd\n            print(word + \" is odd\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(word, \"is odd length\")\n        else:\n            print(word, \"is even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is an even length\")\n        else:\n            print(f\"{word} is an odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd,\n    False otherwise.\n    '''\n    word = s.split()\n    if len(word[0]) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as an argument and returns True if the length of the word is odd, otherwise False.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and returns True if the length of the word is odd, False otherwise.\n    '''\n\n    # split the string into words\n    words = s.split()\n\n    # iterate through the words\n    for word in words:\n        # check if the length of the word is odd\n        if len(word) % 2 == 1:\n            # return True if the length is odd\n            return True\n        else:\n            # return False if the length is even\n            return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    for w in word:\n        if len(w) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word + \" is even length.\")\n        else:\n            print(word + \" is odd length.\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 2 * n * (n + 1) - 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 1/6 * (1 + 2*n + 2*n**2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize the sum to 0\n    total = 0\n\n    # Loop through the numbers 1 to n-1\n    for i in range(1, n):\n\n        # Calculate the sum of the cubes of the numbers from 1 to i\n        total += i*i*i\n\n        # Calculate the sum of the cubes of the numbers from n-i to n\n        total += (n-i)*i*i\n\n    return total"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return 4 * (n - 1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function finds the nth tetrahedral number.\n\n    Parameters:\n    n (int): The index of the tetrahedral number\n\n    Returns:\n    int: The nth tetrahedral number\n\n    \"\"\"\n\n    # Initialize variables\n    a = 1\n    b = 0\n    c = 0\n    d = 1\n\n    # Iterate over the range n\n    for i in range(1, n+1):\n\n        # Calculate the value of a\n        a = a * d\n\n        # Calculate the value of b\n        b = b * c\n\n        # Calculate the value of c\n        c = c * (d - a)\n\n        # Calculate the value of d\n        d = d * (a - b)\n\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 16\n    elif n == 3:\n        return 64\n    elif n == 4:\n        return 256\n    else:\n        return tetrahedral_number(n - 1) + 4 * tetrahedral_number(n - 2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 4 * n * (n-1) * (n-2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 15\n    else:\n        return (3 * tetrahedral_number(n-1) ** 2) + 14\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 0\n    b = 1\n    c = 2\n    for i in range(3, n + 1):\n        a = b + c\n        b = a - b\n        c = 2 * a - b\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize the first tetrahedral number to 1\n    t1 = 1\n\n    # Loop from 2 to n\n    for i in range(2, n+1):\n        # Increment the value of t1 by the value of t1^2\n        t1 += i*t1**2\n\n    # Return the value of t1\n    return t1"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius as input and calculates the volume of a sphere.\n    '''\n\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    V = (4/3)*math.pi*(r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*(r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n\n    # calculating the volume of the sphere\n    V = 4 / 3 * math.pi * r**3\n\n    # returning the volume of the sphere\n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr((result % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr(sum_ascii % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total_ascii = 0\n    for char in strr:\n        total_ascii += ord(char)\n    return chr((total_ascii % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Initialize an empty string to store the ASCII values of characters\n    ascii_sum = \"\"\n\n    # Loop through each character of the string\n    for char in strr:\n        # Convert the character to its ASCII value and add it to the sum\n        ascii_sum += str(ord(char))\n\n    # Convert the ASCII sum to an integer and find the remainder when divided by 26\n    char_ascii = int(ascii_sum) % 26\n\n    # Convert the remainder back to a character and return it\n    return chr(char_ascii)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char_sum = 0\n    for i in range(len(strr)):\n        char_sum += ord(strr[i])\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = \"\"\n    for char in strr:\n        char_ascii = ord(char)\n        # Check if the ASCII value of the current character is greater than 96 (ASCII value of 'A')\n        if char_ascii > 96:\n            char_ascii -= 32\n        char_ascii = char_ascii % 26\n        char += chr(char_ascii + 97)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 0:\n        return None\n    else:\n        result = 0\n        for i in range(len(strr)):\n            result += ord(strr[i])\n        return chr((result % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    char_val = ascii_val % 26\n    return chr(char_val)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # Initialize an empty string to store the character\n    char = \"\"\n    \n    # Loop through each character of the string\n    for i in range(len(strr)):\n        \n        # Convert the ASCII value of the current character to an integer\n        ascii_value = ord(strr[i])\n        \n        # Add the ASCII value modulo 26 to the character string\n        char += chr(((ascii_value + i) % 26) + ord('A'))\n        \n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through each character in the string\n    for char in strr:\n        # add the ASCII value of the current character to the sum\n        sum += ord(char)\n\n    # find the character made by adding the ASCII value of all the characters modulo 26\n    char = chr((sum % 26) + 65)\n\n    # return the character made by adding the ASCII value of all the characters modulo 26\n    return char"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # initialize the sequence with 0\n    sequence = [0]\n    # loop from 1 to n-1\n    for i in range(1, n): \n        # calculate the next number in the sequence\n        next_num = (sequence[i-1] + sequence[i-2]) % 2\n        # append the next number to the sequence\n        sequence.append(next_num)\n    # return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 0\n    sequence = []\n\n    while i < n:\n        sequence.append(i)\n        i += 1\n\n    return sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(2, n+1):\n        if i % 2 == 1:\n            sequence.append(sequence[i-1] + sequence[-1])\n        else:\n            sequence.append(sequence[-1])\n    return sequence[n-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The value of nth number is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    sequence = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        if (i % 2 == 0):\n            sequence.append(sequence[-1] * 2)\n        else:\n            sequence.append(sequence[-1] + 1)\n    return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 2, 1, 4, 2, 8, 4, 16, 8, 32, 16, 64, 32, 128, 64, 256, 128, 512, 256, 1024, 512, 2048, 1024, 4096, 2048, 8192, 4096, 16384, 8192, 32768, 16384, 65536, 32768, 131072, 65536, 262144, 131072, 524288, 262144, 1048576, 524288, 2097152, 1048576, 4194304, 2097152, 8388608, 4194304, 16777216, 8388608, 33554432, 16777216, 67108864, 33554432, 134217728, 67108864, 268435456, 134217728, 536870912, 268435456, 1073741824, 536870912, 2147483648, 1073741824, 4294967296, 2147483648, 8589934592, 4294967296, 17179869184, 8589934592, 34359738368, 17179869184, 70368744177664, 34359738368, 140737488355328, 70368744177664, 281474976710656, 140737488355328, 562949953421312, 281474976710656, 1125899906842624, 562949953421312, 2251799813685248, 1125899906842624, 4503599627370496, 2251799813685248, 9007199254740992, 4503599627370496, 18014398509481984, 9007199254740992, 36028797018963968, 18014398509481984, 72057594037927936, 36028797018963968, 144115188075855872, 72057594037927936, 29"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Define the sequence\n    sequence = [1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    # initialize variables\n    sequence = [0]\n    count = 1\n    # generate sequence\n    while count <= n:\n        if count % 2 == 0:\n            sequence.append(sequence[-1] + 1)\n        else:\n            sequence.append(sequence[-1] + 2)\n        count += 1\n    # return nth number in sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return (sequence(n-1) + sequence(n-2))"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere.\n\n    Args:\n    r (float): the radius of the sphere\n\n    Returns:\n    float: the surface area of the sphere\n    '''\n\n    # Formula to calculate surface area of a sphere:\n    # surface area = (4/3) pi r^3\n\n    area = (4/3) * math.pi * (r ** 3)\n\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    surface_area = (4/3) * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Define the formula for the surface area of a sphere\n    A = (4/3)*math.pi*r**3\n    return A"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula to find the surface area of a sphere\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return None\n    else:\n        num = 1\n        for i in range(1, n+1):\n            num = (2*num - 1)**2 + 1\n            if i == n:\n                return num\n        return None"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function takes an integer n as input and returns the nth centered hexagonal number.\n    \n    The centered hexagonal number is the number of ways to arrange n blue hexagons in a row such that the distance between any two blue hexagons is the same.\n    \n    For example, the centered hexagonal number of 6 is 12. In this arrangement, the first two blue hexagons are separated by a distance of 6, the third and fourth blue hexagons are separated by a distance of 3, and the fifth and sixth blue hexagons are separated by a distance of 2.\n    \n    The centered hexagonal number of n is defined as:\n    C(n) = 2 * (2 * n - 1) * (n * (n - 1) + 3 * n + 1)\n    \n    The sum of the C(i) values for i = 1 to n gives the centered hexagonal number of n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * (2 * n - 1) * (n * (n - 1) + 3 * n + 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 2\n    b = 1\n    \n    for i in range(n):\n        print((a*i+b*i*i)/(2*i+1))\n        a += 1\n        b += 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The centered hexagonal number is:\", centered_hexagonal_number(n))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n\n    Args:\n        n (int): The index of the centered hexagonal number to find.\n\n    Returns:\n        int: The nth centered hexagonal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 6\n    elif n == 2:\n        return 24\n    elif n == 3:\n        return 84\n    elif n == 4:\n        return 252\n    elif n == 5:\n        return 676\n    elif n == 6:\n        return 1432\n    elif n == 7:\n        return 3016\n    elif n == 8:\n        return 5980\n    elif n == 9:\n        return 10676\n    elif n == 10:\n        return 18000\n    elif n == 11:\n        return 28712\n    elif n == 12:\n        return 43576\n    elif n == 13:\n        return 64480\n    elif n == 14:\n        return 93696\n    elif n == 15:\n        return 133824\n    elif n == 16:\n        return 188576\n    elif n == 17:\n        return 262656\n    elif n == 18:\n        return 362144\n    elif n == 19:\n        return 494944\n    elif n == 20:\n        return 671744\n    elif n == 21:\n        return 906768\n    elif n == 22:\n        return 1216576\n    elif n == 23:\n        return 1620352\n    elif n == 24:\n        return 2140160\n    elif n == 25:\n        return 2800512\n    elif n == 26:\n        return 3629120\n    elif n == 27:\n        return 4657728\n    elif n == 28:\n        return 5921152\n    elif n == 29:\n        return 7457856\n    elif n == 30:\n        return 9310592\n    else:\n        raise ValueError(\"n must be between 0 and 30.\")"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # First centered hexagonal number is 1\n    hex_n = 1\n    \n    # Starting from the second centered hexagonal number,\n    # find the nth centered hexagonal number by counting the number of \n    # rows needed for the hexagon with side length equal to 2^(n-1).\n    for i in range(2, n+1):\n        hex_n += 2**(i-1)\n        \n    return hex_n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [1, 6, 15, 28, 45, 66, 91, 120, 153, 190, 231, 276, 325, 378, 435, 496, 561, 630, 703, 780, 861, 946, 1035, 1128, 1225, 1326, 1431, 1540, 1653, 1770, 1891, 2016, 2145, 2278, 2415, 2556, 2701, 2850, 3003, 3160, 3321, 3486, 3655, 3828, 4005, 4186, 4371, 4560, 4753, 4950, 5151, 5356, 5565, 5778, 6005, 6236, 6471, 6710, 6953, 7200, 7451, 7706, 7965, 8228, 8495, 8766, 9041, 9320, 9603, 9890, 10181, 10476, 10775, 11078, 11385, 11696, 12011, 12330, 12653, 12980, 13311, 13646, 13985, 14328, 14675, 15026, 15381, 15740, 16103, 16470, 16841, 17216, 17595, 17978, 18365, 18756, 19151, 19550, 19953, 20360, 20771, 21186, 21605, 22028, 22455, 22886, 23321, 23760, 24203, 24650, 25101, 25556, 26015, 26478, 26945, 27416, 27891, 28370, 28853, 29340, 29831, 30326, 30825, 31328, 31835, 32346, 32861, 33380, 33903, 34430, 34961, 35496, 36035, 36578, 37125, 37676, 38231, 38790, 39353, 39920, 40491, 41066, 41645, 42228, 42815, 43406, 44001, 44600, 45203, 45810, 46421, 47036, 47655, 482"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((n-1)/2)*3 - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError('n must be a non-negative integer.')\n    if n == 0:\n        return 1\n    else:\n        # Using the formula for centered hexagonal numbers:\n        # centered_hexagonal_number(n) = 2 * centered_hexagonal_number(n-1) + 1\n        # or\n        # centered_hexagonal_number(n) = 2 * centered_hexagonal_number(n-1) - centered_hexagonal_number(n-2) + 1\n        # Since centered_hexagonal_number(n-1) and centered_hexagonal_number(n-2) are already known, we can calculate them in O(1) time using the formula:\n        # centered_hexagonal_number(n) = 2 * centered_hexagonal_number(n-2) - centered_hexagonal_number(n-3) + 1\n        # This reduces the number of calculations needed from O(n) to O(1).\n        centered_hexagonal_n_minus_1 = centered_hexagonal_number(n-2)\n        centered_hexagonal_n_minus_2 = centered_hexagonal_number(n-3)\n        centered_hexagonal_n = 2 * centered_hexagonal_n_minus_2 - centered_hexagonal_n_minus_1 + 1\n        return centered_hexagonal_n"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy() # copy the first dictionary to create a new dictionary\n    for key, value in dict2.items():\n        merged_dict[key] = value # add the key-value pairs from the second dictionary to the merged dictionary\n    for key, value in dict3.items():\n        merged_dict[key] = value # add the key-value pairs from the third dictionary to the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the merged data\n    merged_data = {}\n\n    # Loop through the three dictionaries\n    for key in dict1.keys() | dict2.keys() | dict3.keys():\n        # Check if the key exists in the first two dictionaries\n        if key in dict1.keys() and key in dict2.keys():\n            # Merge the values of the two dictionaries if they are of the same type\n            if isinstance(dict1[key], dict) and isinstance(dict2[key], dict):\n                merged_data[key] = merge_dictionaries_three(dict1[key], dict2[key])\n            # If the values are not of the same type, take the value from the first dictionary\n            else:\n                merged_data[key] = dict1[key]\n        # If the key exists in the third dictionary\n        elif key in dict3.keys():\n            # Merge the values of the two dictionaries if they are of the same type\n            if isinstance(dict1[key], dict) and isinstance(dict3[key], dict):\n                merged_data[key] = merge_dictionaries_three(dict1[key], dict3[key])\n            # If the values are not of the same type, take the value from the first dictionary\n            else:\n                merged_data[key] = dict3[key]\n        # If the key does not exist in either dictionary, skip it\n        else:\n            continue\n\n    return merged_data"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Create an empty dictionary to store merged data\n    merged_dict = {}\n\n    # Iterate over the keys in the first dictionary\n    for key in dict1:\n        # Add the key-value pair from the first dictionary to the merged dictionary\n        merged_dict[key] = dict1[key]\n\n    # Iterate over the keys in the second dictionary\n    for key in dict2:\n        # Add the key-value pair from the second dictionary to the merged dictionary\n        merged_dict[key] = dict2[key]\n\n    # Iterate over the keys in the third dictionary\n    for key in dict3:\n        # Add the key-value pair from the third dictionary to the merged dictionary\n        merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n    - dict1 (dict): The first dictionary to merge.\n    - dict2 (dict): The second dictionary to merge.\n    - dict3 (dict): The third dictionary to merge.\n\n    Returns:\n    - dict: The merged dictionary.\n    \"\"\"\n    merged_dict = {}\n\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n\n    for key in dict2:\n        if key not in dict1:\n            merged_dict[key] = dict2[key]\n\n    for key in dict3:\n        if key not in dict1 and key not in dict2:\n            merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create an empty dictionary to hold the merged dictionary\n    merged_dict = {}\n\n    # iterate over the three dictionaries and merge their key-value pairs\n    for key in dict1:\n        if key in dict2:\n            if key in dict3:\n                merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n            else:\n                merged_dict[key] = dict1[key] + dict2[key]\n        else:\n            if key in dict3:\n                merged_dict[key] = dict1[key] + dict3[key]\n            else:\n                merged_dict[key] = dict1[key]\n\n    # iterate over the third dictionary and merge any key-value pairs that don't exist in the first two\n    for key in dict3:\n        if key not in dict1 and key not in dict2:\n            merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(dict)\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key].update(dict2[key])\n    for key in dict3.keys():\n        merged_dict[key].update(dict3[key])\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of elements in the list\n    freq = {}\n    # loop through the list and increment the frequency of each element in the dictionary\n    for element in list1:\n        freq[element] = freq.get(element, 0) + 1\n    # return the frequency dictionary\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Return a dictionary with the frequency of all elements in lst.\n    \"\"\"\n    freq_dict = collections.defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    # Create a dictionary to store the frequency of each element in the list\n    freq = collections.defaultdict(int)\n\n    # Iterate through the list and update the frequency of each element in the dictionary\n    for num in list1:\n        freq[num] += 1\n\n    # Return the dictionary containing the frequency of each element\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for item in list1:\n        freq[item] += 1\n    return dict(freq)\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Sort the list of numbers from smallest to largest\n    nums = sorted(N)\n\n    # Find the index of the first number greater than N\n    i = 0\n    while nums[i] <= N:\n        i += 1\n\n    # Find the index of the last number smaller than N\n    j = len(nums) - 1\n    while nums[j] >= N:\n        j -= 1\n\n    # Return the average of the numbers at the indices i and j\n    return (nums[i] + nums[j]) / 2"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    max_num = -float('inf')\n\n    for num in range(N+1):\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n\n    return min(min_num, max_num)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Initialize variables\n    min_diff = float('inf')\n    closest_num = N\n    smallest_num = float('inf')\n\n    # Loop through the numbers from 1 to n\n    for num in range(1, N+1):\n        # Calculate the absolute difference between N and num\n        diff = abs(N - num)\n\n        # If the difference is less than min_diff, update min_diff and closest_num\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = num\n\n        # If the difference is between min_diff and the smallest_num, update smallest_num\n        if diff < smallest_num and diff!= 0:\n            smallest_num = diff\n\n    # Return the closest smaller number than N\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    closest = N\n\n    for i in range(N, 0, -1):\n        diff = abs(i - N)\n        if diff < min_diff:\n            min_diff = diff\n            closest = i\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return N - 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    smallest_num = N\n    closest_num = N\n    \n    # Loop through all the numbers between 1 and n\n    for num in range(2, N+1):\n        # Check if the current number is smaller than the current smallest number\n        if num < smallest_num:\n            # If it is, update the smallest number and the closest number\n            smallest_num = num\n            closest_num = smallest_num\n    \n    # Return the closest smaller number than n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    closest = min(num_list)\n    for num in num_list:\n        if abs(num - N) < abs(closest - N):\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    m = 10**9 + 1\n    closest = m\n    for i in range(1, 10):\n        smaller = n - i\n        if smaller < m:\n            m = smaller\n            closest = smaller\n    \n    return closest\n\nprint(closest_num(3))"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    smallest_diff = abs(N - smallest)\n    for i in range(N, 1, -1):\n        diff = abs(i - N)\n        if diff < smallest_diff:\n            smallest = i\n            smallest_diff = diff\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    n = int(input(\"Enter a number: \"))\n\n    if n == 0:\n        print(\"The closest smaller number is: \", n)\n        return\n\n    for i in range(1, n):\n        if n - i <= i:\n            print(\"The closest smaller number is: \", i)\n            return"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize the length of the longest word to 0\n    longest_len = 0\n    # Iterate through each word in the list\n    for word in list1:\n        # Get the length of the current word\n        current_len = len(word)\n        # Update the longest_len if the current word is longer\n        if current_len > longest_len:\n            longest_len = current_len\n    # Return the length of the longest word\n    return longest_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    # Initialize max_len to 0\n    max_len = 0\n    \n    # Loop through each string in the list\n    for word in list1:\n        # Find the length of the current word\n        len_word = len(word)\n        \n        # If the length of the current word is greater than max_len, update max_len\n        if len_word > max_len:\n            max_len = len_word\n            \n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list of strings.\n    \"\"\"\n    max_length = 0\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n            longest_word = word\n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list of strings.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1 in sub_str"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, str) and isinstance(sub_str, str):\n        if sub_str in str1:\n            return True\n        else:\n            return False\n    else:\n        raise ValueError(\"Both inputs must be strings.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        print(\"Substring found!\")\n    else:\n        print(\"Substring not found.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    if not sub_str:\n        return False\n\n    for string in str1:\n        if sub_str in string:\n            return True\n\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    elif n > 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return is_undulating(n-2)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether a given number is undulating or not.\n\n    Args:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n\n    # We first check if the number is divisible by 2 or not.\n    if n % 2 == 0:\n        return False\n\n    # If the number is divisible by 2, we then check if it is divisible by 3.\n    if n % 3 == 0:\n        return True\n\n    # If none of the above conditions are met, the number is not undulating.\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n > 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        return None"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"Even number is not undulating.\"\n    elif n % 4 == 0:\n        return \"Multiple of 4 is undulating.\"\n    elif n % 6 == 0:\n        return \"Multiple of 6 is undulating.\"\n    else:\n        return \"Otherwise, the number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_undulating(n//2)\n    else:\n        return is_undulating((3*n)+1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Define the function to check if a number is undulating\n    def is_undulating_helper(num):\n        # Check if the number is even\n        if num % 2 == 0:\n            return False\n        # Check if the number is divisible by 3 or 5\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0 or num % (i + 2) == 0:\n                return True\n        return False\n    \n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    \n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # Check if the number is an odd prime number\n    prime = is_prime(n)\n    if not prime:\n        return True\n    \n    # Check if the number is undulating using the helper function\n    return is_undulating_helper(n)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # sort the list of tuples by second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the index of the minimum second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value in ascending order\n    test_list.sort(key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    \n    # Sort the list by the second value of each tuple\n    test_list.sort(key=itemgetter(1))\n    \n    # Return the index of the first tuple with the smallest second value\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Use the built-in min() function to find the index of the tuple with the smallest second value\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples by second value (second item of each tuple)\n    test_list.sort(key=itemgetter(1))\n\n    # Return the index of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list by second element (second value in each tuple) in ascending order\n    test_list.sort(key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lengths = []\n    for sublist in lst:\n        lengths.append(len(sublist))\n    return min(lengths)\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize the length of smallest list to infinity\n    min_len = float('inf')\n\n    # Iterate through each list in the list of lists\n    for i in range(len(lst)):\n        # Find the length of the current list and compare it with the minimum length found so far\n        current_len = len(lst[i])\n        if current_len < min_len:\n            min_len = current_len\n\n    # Return the minimum length found\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf') # initialize minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes in a list of lists and returns the length of the smallest list in the list.\n    \"\"\"\n    # initialize the variable to store the smallest length found so far\n    min_length = float('inf')\n    # loop through each sublist in the list of lists\n    for sublist in lst:\n        # update the smallest length if the current sublist is shorter than the smallest so far\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    # return the smallest length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 999999999\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_len = len(lst[0])\n\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    divisor_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    # initialize count variable to 0\n    count = 0\n\n    # loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # if n is divisible by i, increment count\n        if n % i == 0:\n            count += 1\n\n    # return the final count\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            if i!= n//i:\n                count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for i in list1:\n        for j in i:\n            if j in frequency:\n                frequency[j] += 1\n            else:\n                frequency[j] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        for sub_item in item:\n            if sub_item in freq_dict:\n                freq_dict[sub_item] += 1\n            else:\n                freq_dict[sub_item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for elem in list1:\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        else:\n            freq_dict[elem] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through each item in the list\n    for item in list1:\n        # If the item is a list, flatten it\n        if isinstance(item, list):\n            item = flatten(item)\n        # If the item is not a list, add it to the dictionary\n        elif item not in freq_dict:\n            freq_dict[item] = 1\n        # If the item is already in the dictionary, increment its frequency\n        else:\n            freq_dict[item] += 1\n    \n    return freq_dict\n\ndef flatten(lst):\n    '''\n    Flatten a list of lists into a single list.\n    '''\n    return [item for sublist in lst for item in sublist]"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq:\n                freq[subitem] += 1\n            else:\n                freq[subitem] = 1\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    # multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n\n    # divide by the length of the list\n    result /= len(numbers)\n\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        n = n // 2\n        binary = str(remainder) + binary\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_string = \"\"\n    while n > 0:\n        remainder = n % 2\n        n = n // 2\n        binary_string = str(remainder) + binary_string\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty string to store the binary equivalent\n    binary_str = \"\"\n    # loop through each bit of the decimal number\n    for bit in range(32):\n        # get the nth bit of the decimal number\n        bit_val = (n >> bit) & 1\n        # convert the bit value to its binary equivalent\n        bit_bin = bin(bit_val)[2:].zfill(1)\n        # append the binary equivalent to the binary string\n        binary_str += bit_bin\n    # return the binary string\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # convert decimal to binary using bitwise operations\n    binary = bin(n)[2:] # remove \"0b\" prefix and convert to string\n    # add leading zeros if necessary\n    while len(binary) < 32:\n        binary = '0' + binary\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary_num = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_num = str(remainder) + binary_num\n        n = n // 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize the result string as an empty string\n    result = \"\"\n    # loop while the input number is greater than 0\n    while n > 0: \n        # find the remainder when the input number is divided by 2\n        remainder = n % 2\n        # add the remainder to the result string as a character\n        result = str(remainder) + result\n        # divide the input number by 2 to get the next iteration\n        n = n // 2\n    # return the result string\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal to binary\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n\n    # Remove leading zeros from binary\n    while binary[0] == '0':\n        binary = binary[1:]\n\n    # Return the binary string\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    str_num = str(num)\n    for i in range(len(str_num)):\n        if int(str_num[i:i+2]) == int(str_num[::-1]):\n            for j in range(i+1, len(str_num)):\n                if int(str_num[j:j+2]) == int(str_num[::-1]):\n                    return int(str_num[i:j+1]) + 1\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Initialize variables\n    smallest_palindrome = None\n    is_palindrome = False\n    \n    # Check if the specified integer is even\n    if num % 2 == 0:\n        # If even, check if the square of the integer is a palindrome\n        square = num * num\n        while square > 9:\n            square //= 10\n        if square == num:\n            is_palindrome = True\n    \n    # Check if the specified integer is odd\n    else:\n        # If odd, check if the square of the integer divided by 10 is a palindrome\n        square = num * num // 10\n        while square > 9:\n            square //= 10\n        if square == num // 10:\n            is_palindrome = True\n    \n    # If the specified integer is a palindrome, find the next smallest palindrome\n    if is_palindrome:\n        smallest_palindrome = num\n        while True:\n            next_num = smallest_palindrome * 10 + 1\n            if next_num >= num:\n                break\n            if is_palindrome(next_num):\n                smallest_palindrome = next_num\n    \n    # If the specified integer is not a palindrome, find the smallest palindrome greater than the specified integer\n    else:\n        smallest_palindrome = num\n        while True:\n            next_num = smallest_palindrome + 1\n            if next_num >= num:\n                break\n            if is_palindrome(next_num):\n                smallest_palindrome = next_num\n    \n    # Return the smallest palindrome greater than the specified integer\n    return smallest_palindrome\n\ndef is_palindrome(num):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Check if the string is a palindrome\n    for i in range(len(num_str) // 2):\n        if num_str[i]!= num_str[-(i+1)]:\n            return False\n    \n    # If the string is a palindrome, return True\n    return True"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Check if a given integer is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a given integer.\n    '''\n    # Convert the given integer to a string\n    num_str = str(num)\n    # Find the largest palindrome less than or equal to the given integer\n    largest_palindrome = int(num_str + str(int(num_str) - 1))\n    # Find the smallest palindrome greater than the given integer\n    smallest_palindrome = int(num_str + str(int(num_str) + 1))\n    # Keep track of the smallest palindrome found so far\n    smallest = sys.maxsize\n    # Loop through the range of possible palindromes\n    for i in range(largest_palindrome, smallest_palindrome - 1, -1):\n        # Check if the current palindrome is a palindrome\n        if is_palindrome(i):\n            # Update the smallest palindrome found so far\n            if i < smallest:\n                smallest = i\n    # Return the smallest palindrome found\n    return smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    digits = str(num)\n    n = len(digits)\n    max_palindrome = int(digits[-1] + digits[-1])\n\n    for i in range(n):\n        digit = digits[i]\n        for j in range(i+1, n+1):\n            palindrome = int(digit + digits[j-1])\n            if palindrome > max_palindrome:\n                max_palindrome = palindrome\n\n    return max_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string and reverse it\n    num_str = str(num)[::-1]\n\n    # Check if the reversed string is greater than or equal to the original number\n    if int(num_str) >= int(num):\n        # If it is, return the original number as it is the smallest palindrome\n        return num\n    else:\n        # If it is not, calculate the next smallest palindrome\n        next_num = int(num_str) + 1\n        while True:\n            num_str = str(next_num)[::-1]\n            if int(num_str) >= int(num):\n                return next_num\n            else:\n                next_num += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    prev_num = num\n    prev_str = str(prev_num)\n    prev_str = prev_str[::-1]\n    prev_num = int(prev_str)\n    if prev_num > num:\n        return prev_num\n    else:\n        return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input number is less than 10\n    if num < 10:\n        # If it is, return the next number\n        return num + 1\n    \n    # If the input number is greater than or equal to 10, check if it's divisible by 10\n    while num % 10 == 0:\n        # If it is, divide by 10 and continue the loop\n        num = num // 10\n    \n    # Check if the last digit of the number is odd\n    if num % 2 == 1:\n        # If it is, multiply it by 9 and add 1\n        num = num * 9 + 1\n    else:\n        # If it's not, multiply it by 10 and continue the loop\n        num = num * 10\n    \n    # Return the number after adding 1\n    return num + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    num_str = str(num)\n    for i in range(len(num_str)//2):\n        if num_str[i]!= num_str[-(i+1)]:\n            return False\n    return True\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        palindrome = num\n        if is_palindrome(palindrome):\n            return palindrome\n        num += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Convert the input number to a string\n    num_str = str(num)\n    \n    # Find the length of the number string\n    length = len(num_str)\n    \n    # Initialize the result variable\n    result = 0\n    \n    # Initialize the counter variable\n    counter = 0\n    \n    # Loop through each digit in the number string\n    for digit in num_str:\n        # Check if the digit is odd\n        if int(digit) % 2 == 1:\n            # Add the current digit to the result\n            result += int(digit)\n            \n            # Increment the counter variable\n            counter += 1\n    \n    # Add the required number of leading zeros to the result\n    result = ('0' * (length - counter)) + str(result)\n    \n    # Convert the result to an integer\n    result = int(result)\n    \n    # Return the next smallest palindrome\n    return result"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef is_next_smallest_palindrome(num):\n    \"\"\"\n    Helper function to check if the next smallest palindrome of a given number is a palindrome.\n    \"\"\"\n    next_num = num + 1\n    return is_palindrome(next_num)\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n    \"\"\"\n    while not is_next_smallest_palindrome(num):\n        num += 1\n    return num - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    \n    if k == 1:\n        return arr[0]\n    \n    if k == n:\n        return arr[-1]\n    \n    left = 0\n    right = n - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] < arr[right]:\n            right = mid\n        else:\n            left = mid + 1\n            \n    return arr[left - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    This function takes in an array and a value k and returns the kth element in the array using 1-based indexing.\n\n    Args:\n    arr (list): the input array\n    k (int): the value of k\n\n    Returns:\n    int: the kth element in the array\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"arr must be a list\")\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer\")\n    if k <= 0:\n        raise ValueError(\"k must be a positive integer\")\n    if k > len(arr):\n        raise IndexError(\"k is greater than the length of the array\")\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n\n    # Count the number of elements less than or equal to the current element\n    count = 0\n    for num in arr:\n        if num <= arr[count]:\n            count += 1\n        if count == k:\n            return num\n\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input.\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n\n    for i in range(len(arr)):\n        if i == k-1:\n            return arr[i]\n        elif i > k-1:\n            arr.pop(i)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n\n    count = 0\n    for i in range(len(arr)):\n        if count == k-1:\n            return arr[i]\n        count += 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split the word into words using the '_' as the separator\n    words = word.split('_')\n    \n    # create a new string with the first letter in uppercase and the rest in lowercase\n    camel_case_word = words[0].upper()\n    for i in range(1, len(words)):\n        camel_case_word += words[i].lower()\n    \n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = words[0].lower()\n    for word in words[1:]:\n        camel_case_word += word.capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i, char in enumerate(word):\n        if i == 0 and char.islower():\n            camel_word += char.upper()\n        elif char.isupper() and i!= 0:\n            camel_word += '_' + char.lower()\n        else:\n            camel_word += char\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert all letters in the word to lowercase\n    word = word.lower()\n\n    # Initialize a new string to store the camel case version of the word\n    camel_word = \"\"\n\n    # Iterate over each letter in the word\n    for i in range(len(word)):\n        # If the letter is a lowercase letter, add it to the camel case word\n        if word[i].islower():\n            camel_word += word[i]\n        # If the letter is a capital letter, add a space before it and the next letter to the camel case word\n        elif word[i].isupper():\n            camel_word += \" \" + word[i]\n        # If the letter is a space, add it to the camel case word as is\n        elif word[i] == \" \":\n            camel_word += word[i]\n\n    # Return the camel case version of the word\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with underscores\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case_words = [word.capitalize() for word in words]\n    # Join the camel case words back into a string\n    camel_case_word = ''.join(camel_case_words)\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        elif i == len(word)-1:\n            camel_word += word[i]\n        else:\n            camel_word += word[i].upper()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            result += word[i].upper()\n        elif i == len(word) - 1:\n            result += word[i]\n        else:\n            result += word[i].lower()\n    return result\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return word\n    \n    first_word = word.split('_')[0]\n    camel_case = first_word.lower()\n    \n    for i in range(1, len(word.split('_'))):\n        camel_case += word.split('_')[i].capitalize()\n        \n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # initialize the first row and first column of the matrix\n    a = [1] * (n + 1)\n    a[0] = 1\n\n    # fill the rest of the matrix using the recurrence relation\n    for i in range(1, n):\n        for j in range(1, m + 1):\n            a[j] += a[j - 1] * a[i]\n\n    # return the value of the last element in the matrix\n    return a[-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    # Create a list of all possible combinations of size n from 1 to m\n    combinations = [list(range(1, m+1))]\n    for i in range(n-1):\n        new_combinations = []\n        for combination in combinations:\n            for j in range(1, m+1):\n                new_combinations.append(combination+[j])\n        combinations = new_combinations\n    # Find the maximum sum path\n    max_sum = max(combinations, key=sum)\n    # Calculate the Eulerian number\n    return sum(max_sum)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n - 1) * m + eulerian_num(n - 1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Calculate the number of rows and columns in the matrix\n    rows = n\n    cols = m\n\n    # Initialize the matrix with zeros\n    matrix = [[0 for j in range(cols+1)] for i in range(rows+1)]\n\n    # Fill the matrix with alternating 1's and -1's\n    for i in range(rows):\n        for j in range(cols):\n            if (i + j) % 2 == 0:\n                matrix[i+1][j+1] = 1\n            else:\n                matrix[i+1][j+1] = -1\n\n    # Calculate the Eulerian number\n    result = matrix[1][1]\n\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m / 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function finds the Eulerian number a(n, m) using the formula:\n\n    a(n, m) = (n + m) * (n + m + 1) / 2 + (n + m + 1) * (n + m) / 2\n\n    where n and m are positive integers.\n\n    \"\"\"\n\n    if n == 0 or m == 0:\n        return 1\n\n    elif n == 1:\n        return m\n\n    elif m == 1:\n        return n\n\n    else:\n        return (n + m) * (n + m + 1) // 2 + (n + m + 1) * (n + m) // 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize matrix\n    matrix = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Fill matrix with 1's\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 and j == 0:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = 0\n\n    # Check for Eulerian path\n    for i in range(n+1):\n        for j in range(m+1):\n            if matrix[i][j] == 1:\n                if i == n and j == m:\n                    print(matrix[i][j])\n                    return matrix[i][j]\n                if i == n:\n                    matrix[i][j] = 0\n                    matrix[i+1][j-1] = 1\n                elif j == m:\n                    matrix[i][j] = 0\n                    matrix[i-1][j] = 1\n                else:\n                    matrix[i][j] = 0\n                    matrix[i-1][j] = 1\n                    matrix[i+1][j] = 1\n                    matrix[i][j+1] = 1\n                    matrix[i][j-1] = 1\n\n    # If no Eulerian path found, return -1\n    return -1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1) + m + eulerian_num(n-1, m+1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the array of prime numbers and count the number of primes found\n    primes = []\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            count += 1\n\n    # Initialize the array of Eulerian numbers\n    euler_nums = []\n    for i in range(count):\n        euler_nums.append(0)\n\n    # Calculate the Eulerian numbers using the Sieve of Eratosthenes\n    for p in primes:\n        for i in range(len(euler_nums)):\n            if euler_nums[i] + p > n:\n                break\n            euler_nums[i] += p\n\n    # Calculate the final Eulerian number\n    final_euler_num = 0\n    for i in range(len(euler_nums)):\n        final_euler_num = max(final_euler_num, euler_nums[i])\n\n    # Return the final Eulerian number\n    return final_euler_num"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the input_list\n    for sublist in input_list:\n        # Sort the sublist using the built-in sort function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(input_list):\n        sublist.sort()\n        input_list[i] = sublist\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for boolean in lst:\n        if boolean is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    combined_list = test_list + test_tup\n    return combined_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the given list to the given tuples\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the list to tuple\n    test_tup = tuple(test_list)\n    # append the list to the tuple\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the lists to tuples to append them to the tuple\n    test_tup = tuple(test_tup) + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    #append the list to the tuple\n    test_tup += test_list\n    #print the updated tuple\n    print(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the test_list to a tuple\n    test_tup = tuple(test_list)\n    # append the test_list to the test_tup\n    test_tup += (test_list,)\n    # return the modified test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Combine the two lists and tuples using the '+' operator\n    combined_list = test_list + test_tup\n    \n    # Convert the combined list into a tuple using the 'tuple()' function\n    combined_tup = tuple(combined_list)\n    \n    return combined_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the test_list to the test_tup and store the result in a new tuple\n    new_tup = test_tup + (test_list,)\n    return new_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists as input and returns a single sorted list containing all the elements from all the input lists.\n    '''\n    # Convert the input lists to sets to remove duplicates\n    set1 = set(num1)\n    set2 = set(num2)\n    set3 = set(num3)\n    # Merge the sets into a single set\n    merged_set = set1.union(set2, set3)\n    # Convert the merged set back to a list and sort it using heapq\n    sorted_list = sorted(list(merged_set))\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Concatenate the three lists\n    merged_list = num1 + num2 + num3\n    \n    # Convert the list to a min heap\n    heapq.heapify(merged_list)\n    \n    # Extract the smallest element from the heap and remove it\n    min_element = heapq.heappop(merged_list)\n    \n    # Return the remaining elements in the heap as the sorted list\n    return min_element + merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Combine the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Sort the combined list\n    sorted_list = sorted(merged_list)\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    merged = []\n    heapq.heapify(num1)\n    heapq.heappush(merged, num1[0])\n    heapq.heapify(num2)\n    heapq.heappush(merged, num2[0])\n    heapq.heapify(num3)\n    heapq.heappush(merged, num3[0])\n    \n    for i in range(1, len(num1)):\n        if num1[i] < merged[0]:\n            heapq.heappop(merged)\n            heapq.heappush(merged, num1[i])\n    for i in range(1, len(num2)):\n        if num2[i] < merged[0]:\n            heapq.heappop(merged)\n            heapq.heappush(merged, num2[i])\n    for i in range(1, len(num3)):\n        if num3[i] < merged[0]:\n            heapq.heappop(merged)\n            heapq.heappush(merged, num3[i])\n            \n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge num1 and num2\n    while num1 and num2:\n        if num1[0] <= num2[0]:\n            if not num3 or num1[0] > num3[-1]:\n                heapq.heappush(num3, num1[0])\n            num1 = num1[1:]\n        else:\n            if not num3 or num2[0] > num3[-1]:\n                heapq.heappush(num3, num2[0])\n            num2 = num2[1:]\n    # Merge num1 and num2\n    while num1:\n        if not num3 or num1[0] > num3[-1]:\n            heapq.heappush(num3, num1[0])\n        num1 = num1[1:]\n    while num2:\n        if not num3 or num2[0] > num3[-1]:\n            heapq.heappush(num3, num2[0])\n        num2 = num2[1:]\n    return num3"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list\n    heapq.heapify(merged_list)\n    \n    # Return the sorted merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merges three sorted lists into a single sorted list.\n\n    :param num1: List of integers.\n    :param num2: List of integers.\n    :param num3: List of integers.\n    :return: List of integers that are the merged elements of num1, num2, and num3.\n    \"\"\"\n    # Merge num1 and num2 into a single list\n    merged_list = num1 + num2\n\n    # Merge the merged list with num3 into a single sorted list\n    heapq.heapify(merged_list)\n    merged_list.extend(num3)\n    heapq.heapify(merged_list)\n    merged_list = [merged_list.pop() for _ in range(len(merged_list))]\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    i, j, k = 0, 0, 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            result.append(num1[i])\n            heapq.heappop(num1)\n            i += 1\n        elif num2[j] < num3[k]:\n            result.append(num2[j])\n            heapq.heappop(num2)\n            j += 1\n        else:\n            result.append(num3[k])\n            heapq.heappop(num3)\n            k += 1\n    result += num1 + num2 + num3\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    index1 = 0\n    index2 = 0\n    index3 = 0\n\n    while index1 < len(num1) and index2 < len(num2) and index3 < len(num3):\n        if num1[index1] < num2[index2]:\n            if num1[index1] < num3[index3]:\n                merged_list.append(num1[index1])\n                index1 += 1\n            else:\n                merged_list.append(num3[index3])\n                index3 += 1\n        elif num2[index2] < num3[index3]:\n            merged_list.append(num2[index2])\n            index2 += 1\n        else:\n            merged_list.append(num3[index3])\n            index3 += 1\n\n    while index1 < len(num1):\n        merged_list.append(num1[index1])\n        index1 += 1\n\n    while index2 < len(num2):\n        merged_list.append(num2[index2])\n        index2 += 1\n\n    while index3 < len(num3):\n        merged_list.append(num3[index3])\n        index3 += 1\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all three lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Use heapq to sort the combined list\n    heapq.heapify(combined_list)\n    sorted_list = []\n    while combined_list:\n        sorted_list.append(heapq.heappop(combined_list))\n    \n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        count += s.count('1')\n        s = s[::-1]\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of odd values when rotating a binary string the given number of times.\n\n    :param s: binary string\n    :param n: number of times to rotate\n    :return: number of odd values after rotating the binary string the given number of times\n    \"\"\"\n    count = 0\n    for i in range(n):\n        # rotate the binary string by 1 bit\n        if s[0] == '1':\n            s = '0' + s[1:]\n        else:\n            s = '1' + s[1:]\n        # count the number of odd values after rotation\n        for j in range(len(s)):\n            if s[j] == '1':\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return sum(int(digit) for digit in s) % 2\n    else:\n        s = s[::-1]  # reverse the string\n        return odd_Equivalent(s, n-1) + odd_Equivalent(s[:-1]+s[-1], n-1)  # recursive call to find the number of odd digits at each rotation step"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    :param s: The binary string to be rotated\n    :param n: The number of rotations to be performed\n    :return: The number of odd values after rotating the binary string n times\n    \"\"\"\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through each character in the binary string\n    for char in s:\n        # If the character is an odd number, increment the count variable\n        if int(char) % 2!= 0:\n            count += 1\n\n    # Return the count variable after rotating the string n times\n    return count % (2 * n)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    def rotate(s, n):\n        return s[-n:] + s[:-n]\n\n    def count_odd(s):\n        count = 0\n        for c in s:\n            if int(c) % 2!= 0:\n                count += 1\n        return count\n\n    s_rotated = rotate(s, n)\n    return count_odd(s_rotated)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    binary_list = [int(i) for i in s]\n    count = 0\n    for i in range(n):\n        binary_list.append(binary_list.pop(0))\n    for num in binary_list:\n        if num % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize an empty list to store the odd numbers\n    odd_list = []\n    \n    # Initialize a counter for the odd numbers\n    count = 0\n    \n    # Loop through each character in the binary string\n    for i in range(len(s)):\n        # If the current character is an odd number, append it to the odd_list and increment the count\n        if int(s[i]) % 2 == 1:\n            odd_list.append(int(s[i]))\n            count += 1\n    \n    # Rotate the odd_list the given number of times\n    for i in range(n):\n        temp = odd_list[0]\n        for j in range(len(odd_list)-1):\n            odd_list[j] = odd_list[j+1]\n        odd_list[-1] = temp\n    \n    # Return the count of odd numbers after rotating the binary string the given number of times\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n        count += s.count('1')\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize variables to keep track of count of odd numbers and count of even numbers\n    odd_count = 0\n    even_count = 0\n    \n    # Iterate through each character in the binary string\n    for char in s:\n        # Convert the character to an integer and check if it is odd or even\n        if char == '1':\n            odd_count += 1\n        else:\n            even_count += 1\n    \n    # Find the number of odd numbers after rotating the string by n positions\n    for i in range(n):\n        # Find the number of even numbers in the rotated string\n        even_count_rotated = even_count\n        odd_count_rotated = odd_count\n        \n        # Iterate through each character in the rotated string\n        for char in s:\n            # Convert the character to an integer and check if it is odd or even\n            if char == '1':\n                odd_count_rotated -= 1\n            else:\n                even_count_rotated -= 1\n                \n        # Update the odd count based on the even count in the rotated string\n        odd_count = odd_count_rotated + even_count_rotated\n        \n    # Return the final count of odd numbers after rotating the string by n positions\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    Write a python function to find the number of odd numbers when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Converting binary string to list of integers\n    s = list(s)\n\n    # Rotating the list n times\n    for i in range(n):\n        s.append(s.pop(0))\n\n    # Counting the number of odd numbers in the rotated list\n    count = 0\n    for i in s:\n        if i % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common_elements:\n                    continue\n                else:\n                    common_elements.append(nestedlist[i][j][k])\n\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # set of all elements in the list\n    set_elements = set()\n    # loop through each sublist of the nested list\n    for sublist in nestedlist:\n        # add all elements of the sublist to the set\n        set_elements.update(sublist)\n    # loop through the set of elements and check if they are common elements in the nested list\n    for element in set_elements:\n        if all(element in sublist for sublist in nestedlist):\n            print(element)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set()\n    for sublist in nestedlist:\n        common_set |= set(sublist)\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for lst in nestedlist:\n        for i in lst:\n            if i in common_elements:\n                common_elements.remove(i)\n            else:\n                common_elements.append(i)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Convert all lists to sets to remove duplicates\n    nestedlist = [set(x) for x in nestedlist]\n    # Find the intersection of the first list with the rest of the lists\n    common = nestedlist[0].intersection(*nestedlist[1:])\n    # Convert the intersection back to a list and return it\n    return sorted(list(common))"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common.extend(set(nestedlist[i]).intersection(set(nestedlist[j])))\n    return list(set(common))"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for i in nestedlist:\n        for j in i:\n            common.add(j)\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n\n    # Loop through the nested list and find common elements\n    for sublist in nestedlist:\n        common.update(set(sublist))\n\n    # Return the common elements as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common.append((nestedlist[i], nestedlist[j]))\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # Remove spaces and convert to lowercase\n    text = text.replace(\" \", \"\").lower()\n\n    # Check if the string is a number\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Check if the input is an integer\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # Check if the string contains any non-integer characters\n    if not text.isnumeric():\n        return False\n    # Check if the string is a valid integer\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # loop through each dictionary in the list\n    for i in list1:\n        # check if the dictionary is empty or not\n        if not i:\n            # if it's empty, return False\n            return False\n\n    # if all dictionaries are not empty, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    if all(not bool(dict(d)) for d in list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    \n    for dic in list1:\n        if dic:\n            return False\n    \n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if not d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary!= {}:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # convert the tuple to a list to handle negative numbers\n    nums_list = list(nums)\n    # initialize the sum to zero\n    total = 0\n    # iterate through the list and add each number to the total\n    for num in nums_list:\n        total += num\n    # return the total\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize an empty string to store the integer representation of the tuple\n    integer_str = ''\n\n    # loop through the tuple and add each element to the integer string\n    for num in nums:\n        integer_str += str(num)\n\n    # return the integer representation of the tuple as an integer\n    return int(integer_str)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Convert each element of the list to an integer\n    nums_list = [int(num) for num in nums_list]\n    # Convert the list to a string, joining the elements with commas\n    result = ','.join(str(num) for num in nums_list)\n    # Convert the string back to an integer\n    result = int(result)\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        if not isinstance(num, int):\n            raise ValueError(\"All elements in the tuple must be integers.\")\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function converts a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, (int, float)):\n                result.append(float(item))\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, complex)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                item = float(item)\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n                sublist.remove(element)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    # Define a function to check if an element can be converted to a float\n    def can_convert(element):\n        try:\n            float(element)\n            return True\n        except ValueError:\n            return False\n\n    # Loop through each row in the list of lists\n    for row in test_list:\n\n        # Loop through each element in the row\n        for element in row:\n\n            # Check if the element can be converted to a float\n            if can_convert(element):\n\n                # Convert the element to a float and append it to the new row\n                new_element = float(element)\n                row.append(new_element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n                continue\n            except ValueError:\n                pass\n            row[row.index(element)] = float(element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    # Create a new list to store the converted elements\n    new_list = []\n\n    # Loop through each element in the original list of lists\n    for sublist in test_list:\n\n        # Loop through each element in the sublist\n        for item in sublist:\n\n            # Attempt to convert the item to a float\n            try:\n                new_item = float(item)\n\n                # Add the converted item to the new list\n                new_list.append(new_item)\n\n            except ValueError:\n                pass\n\n    return new_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string into a list of words using space as the delimiter\n    words_list = string.split()\n    return words_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and convert each element to a string\n    return [str(elem) for elem in string.split()]"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    # Initialize the count array\n    count = [0] * (n + 1)\n    # Traverse the array and update the count array\n    for i in range(n):\n        count[arr[i]] += 1\n    # Traverse the count array and find the first occurrence of 1\n    for i in range(n + 1):\n        if count[i] == 1:\n            return i\n    # If no occurrence is found, return -1\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize variables for tracking count and first occurrence\n    count = 0\n    first_occurrence = None\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the element at current index is not equal to the element at previous index,\n        # then we have found a new element that appears only once\n        if arr[i]!= arr[i-1]:\n            # If the count is 0, then we have found the first occurrence of the element\n            if count == 0:\n                first_occurrence = arr[i]\n            # If the count is already greater than 0, then we have found a second occurrence\n            else:\n                return first_occurrence\n    \n    # If all elements in the array appear only once, then the function should return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize variables to keep track of the index and count of the element\n    index = 0\n    count = 1\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # If the element is the same as the previous element and has not been counted yet, increment the count\n        if arr[i] == arr[i - 1] and count < 2:\n            count += 1\n        # If the element is not the same as the previous element or has been counted already, reset the count and move to the next element\n        else:\n            count = 1\n            index = i\n\n    # If the count is still 1, it means that the element appears only once in the array\n    if count == 1:\n        return arr[index]\n    else:\n        return \"Element does not appear only once in the array.\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count += 1\n            if count == 2:\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the frequency of each element\n    freq = {}\n\n    # iterate through the array and update the frequency dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # iterate through the array again and find the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            for j in range(i+1, n):\n                if arr[i] == arr[j]:\n                    return arr[i]\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the count of each element in the array\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    \n    # Find the element that appears only once in the array\n    for i in count:\n        if count[i] == 1:\n            return i\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of elements in the array\n    freq = {}\n\n    # Traverse through the array and update the frequency dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Traverse through the dictionary and find the element that appears only once\n    for key, value in freq.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a hash table to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate over the array and update the frequency count in the hash table\n    for i in range(len(arr)):\n        if arr[i] not in freq:\n            freq[arr[i]] = 1\n        else:\n            freq[arr[i]] += 1\n\n    # Find the element that appears only once\n    for i in range(len(arr)):\n        if freq[arr[i]] == 1:\n            return arr[i]\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = max(abs(lst[i][0] * lst[j][1]), abs(lst[i][1] * lst[j][0]))\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize variables for maximum product and maximum absolute product\n    max_product = -999999999999999\n    max_abs_product = -999999999999999\n    \n    # loop through the list\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the numbers in the tuple\n            product = list1[i] * list1[j]\n            \n            # calculate the absolute product of the numbers in the tuple\n            abs_product = abs(list1[i]) * abs(list1[j])\n            \n            # check if the product is greater than the maximum product\n            if product > max_product:\n                max_product = product\n            \n            # check if the absolute product is greater than the maximum absolute product\n            if abs_product > max_abs_product:\n                max_abs_product = abs_product\n    \n    # return the maximum absolute product\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = abs(list1[i] * list1[j])\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0]*list1[j][0]), abs(list1[i][1]*list1[j][1]))\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -10**10  # initialize max_product to negative infinity\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the absolute product of the two numbers in pairs\n            product = abs(list1[i][0]*list1[j][1])\n            # update max_product if the current product is greater than max_product\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = abs(list1[i][0]*list1[j][0]) * abs(list1[i][1]*list1[j][1])\n            if current_product > max_abs_product:\n                max_abs_product = current\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][0]) * abs(lst[i][1] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes a list as input and returns the maximum absolute product\n    between numbers in pairs of tuples within the list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0]), abs(list1[i][1]), abs(list1[j][0]), abs(list1[j][1]))\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef sum_amicable_numbers(limit):\n    amicable_sum = 0\n    for i in range(1, limit):\n        if is_prime(i) and is_prime(limit - i):\n            if i + limit - i == limit:\n                amicable_sum += i + limit - i\n    return amicable_sum\n\n\ndef amicable_numbers_sum(limit):\n    return sum_amicable_numbers(limit)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # initialize sum variable to 0\n    total = 0\n\n    # loop through all numbers from 1 to limit (inclusive)\n    for i in range(1, limit + 1):\n\n        # check if i is a prime number\n        is_prime = True\n        for j in range(2, int(i/2) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n\n        # if i is a prime number, check if it's amicable to the previous number\n        if is_prime and i!= sum_of_previous_amicable_numbers(i):\n            total += i\n\n    return total\n\ndef sum_of_previous_amicable_numbers(n):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # initialize sum variable to 0\n    total = 0\n\n    # loop through all numbers from 1 to n (inclusive)\n    for i in range(1, n + 1):\n\n        # check if i is a prime number\n        is_prime = True\n        for j in range(2, int(i/2) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n\n        # if i is a prime number, check if it's amicable to the previous number\n        if is_prime and i!= sum_of_previous_amicable_numbers(i):\n            total += i\n\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # initialize variables to store the count of the number and its sum\n    amicable_count = 0\n    amicable_sum = 0\n\n    # loop through the numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n\n        # check if the number is amicable\n        if i == sum_of_proper_divisors(i):\n            amicable_count += 1\n            amicable_sum += i\n\n    # return the sum of amicable numbers\n    return amicable_sum\n\ndef sum_of_proper_divisors(n):\n    '''\n    Calculate the sum of all proper divisors of a number.\n    '''\n\n    # initialize variables to store the sum and the count of proper divisors\n    divisor_sum = 0\n    divisor_count = 0\n\n    # loop through the numbers from 1 to the square root of the number\n    for i in range(1, int(n**0.5)+1):\n\n        # check if the number is divisible by the current number\n        if n % i == 0:\n\n            # check if the number is a proper divisor\n            if n//i == i:\n                divisor_sum += i\n                divisor_count += 2\n            else:\n                divisor_sum += i\n                divisor_count += 1\n\n    # return the sum of proper divisors\n    return divisor_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit+1):\n        if i == 1:\n            continue\n        elif i in amicable_numbers:\n            continue\n        else:\n            is_amicable = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_amicable = False\n                    break\n            if is_amicable:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function will return the sum of all amicable numbers from 1 to the specified limit.\n    \"\"\"\n    # Create a list of all numbers from 1 to the specified limit\n    nums = list(range(1, limit+1))\n    # Initialize variables for the sum of amicable numbers and the sum of their proper divisors\n    a_sum = 0\n    p_sum = 0\n    \n    # Loop through all numbers in the list\n    for num in nums:\n        # Check if the number is amicable by dividing it by every number from 2 to the square root of the number\n        for divisor in range(2, int(num**0.5)+1):\n            if num % divisor == 0:\n                # If the number is a proper divisor, add it to the proper divisor sum\n                p_sum += divisor\n                # If the number is also an amicable number, add it to the amicable number sum\n                if num == divisor or num == num//divisor:\n                    a_sum += num\n                    \n    # Return the sum of amicable numbers and their proper divisors\n    return a_sum, p_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # create a list to store amicable numbers\n    amicable_numbers = []\n\n    # iterate over all numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n        # check if the number is an amicable number\n        if is_amicable(i):\n            # add the number to the amicable_numbers list\n            amicable_numbers.append(i)\n\n    # return the sum of the amicable numbers\n    return sum(amicable_numbers)\n\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a given number is amicable or not.\n    \"\"\"\n    # check if the number is greater than 2\n    if num <= 2:\n        return False\n\n    # iterate over all numbers from 1 to the square root of the number\n    for i in range(1, int(num**0.5)+1):\n        # check if the number is divisible by i or num/i\n        if num % i == 0 or num % (num//i) == 0:\n            return False\n\n    return True\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(n):\n    '''\n    Check if a number is amicable to 1.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(n):\n    '''\n    Returns True if n is a prime number, False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    Returns the sum of all amicable numbers up to a specified limit.\n    '''\n    result = 0\n    for i in range(1, limit+1):\n        if is_prime(i) and is_prime(limit-i):\n            result += i + limit-i\n    return result\n\nlimit = int(input(\"Enter a number: \"))\nprint(\"The sum of all amicable numbers up to\", limit, \"is\", sum_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit+1):\n        if i == 1 or i == limit:\n            amicable_numbers.add(i)\n        else:\n            j = i\n            while j <= limit and j!= i:\n                if i % j == 0:\n                    amicable_numbers.add(j)\n                    amicable_numbers.add(i/j)\n                    break\n                j += 1\n    \n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    def sum_amicable_numbers(n):\n        \"\"\"\n        Recursively find all amicable numbers from 1 to n.\n        \"\"\"\n        if n <= 2:\n            return 0\n        sum_n = 1\n        for i in range(2, n):\n            if n % i == 0:\n                if i!= n // i:\n                    sum_n += i + n // i\n        return sum_n\n\n    # Calculate the sum of all amicable numbers from 1 to limit\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # get the magnitude of the complex number\n    mag = cmath.sqrt(a**2 + b**2)\n\n    # get the angle of the complex number\n    angle = cmath.phase(mag)\n\n    # return the angle of the complex number\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_radian = cmath.phase(a+b*1j)\n    angle_degree = angle_radian * 180 / cmath.pi\n    return angle_degree"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle.real"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle_in_degrees = angle * 180/cmath.pi\n    return angle_in_degrees\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(a + b*1j)\n    angle_deg = angle_rad * 180.0 / cmath.pi\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    max_diff = 0\n    \n    for i in range(len(string)): \n        count_zero = 0\n        count_one = 0\n        \n        for j in range(i, len(string)): \n            if string[j] == '0': \n                count_zero += 1\n            elif string[j] == '1': \n                count_one += 1\n            \n            if count_zero > count_one: \n                max_diff = max(max_diff, count_zero - count_one)\n                \n            if count_one > count_zero: \n                max_diff = max(max_diff, count_one - count_zero)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = count_ones(string[i:j+1]) - count_zeros(string[i:j+1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\ndef count_ones(string):\n    count = 0\n    for c in string:\n        if c == '1':\n            count += 1\n    return count\n\ndef count_zeros(string):\n    count = 0\n    for c in string:\n        if c == '0':\n            count += 1\n    return count"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize variables to store length and difference\n    length = len(string)\n    diff = 0\n    \n    # Loop through each character in the string\n    for i in range(length):\n        \n        # If the character is a 0, increment the length and reset the difference\n        if string[i] == '0':\n            length += 1\n            diff = 0\n        \n        # If the character is a 1, increment the difference\n        else:\n            diff += 1\n        \n        # If the difference is greater than the previous difference, update the maximum difference\n        if diff > length:\n            length = diff\n            \n    return length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    n = len(string)\n    count_zero = count_one = 0\n    max_diff = 0\n    \n    # Traverse through the string\n    for i in range(n):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        \n        # Calculate the difference between the count of 0s and 1s\n        diff = abs(count_zero - count_one)\n        \n        # Update the maximum difference found so far\n        max_diff = max(max_diff, diff)\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables to store count of 0s and 1s in each sub-string\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    \n    # Loop through each sub-string of the binary string\n    for i in range(len(string)):\n        # Update count of 0s and 1s in each sub-string\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        # Find the maximum difference between the number of 0s and number of 1s in each sub-string\n        diff = max(count_0, count_1) - min(count_0, count_1)\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables for the number of 0s and 1s in the entire string\n    count_0s = 0\n    count_1s = 0\n\n    # Iterate through each character in the string\n    for char in string:\n        # Check if the character is a 0 or 1\n        if char == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n\n        # Calculate the maximum difference between the number of 0s and number of 1s\n        max_diff = max(count_0s - count_1s, 0)\n\n        # Update the number of 0s and 1s for the next character\n        if char == '0':\n            count_0s -= 1\n        else:\n            count_1s -= 1\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0]*2 for _ in range(n)]\n    \n    # Initialize the first row and column\n    for i in range(n):\n        dp[i][0] = 0\n        dp[i][1] = 1\n    \n    # Fill in the rest of the matrix\n    for i in range(1, n):\n        for j in range(1, 2):\n            if string[i] == '0':\n                dp[i][j] = dp[i-1][0]\n            else:\n                dp[i][j] = dp[i-1][1]\n                \n    # Find the maximum difference\n    max_diff = 0\n    for i in range(n):\n        if dp[i][1] > max_diff:\n            max_diff = dp[i][1]\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    # Initialize variables\n    max_diff = 0\n    curr_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    # Iterate over each character in the string\n    for char in string:\n        # If the character is 0, increment the count of 0s and reset the count of 1s\n        if char == '0':\n            count_0 += 1\n            count_1 = 0\n        # If the character is 1, increment the count of 1s\n        else:\n            count_1 += 1\n        \n        # Calculate the difference between the current count of 0s and 1s\n        diff = abs(count_0 - count_1)\n        \n        # Update the maximum difference if the current difference is greater\n        max_diff = max(max_diff, diff)\n        \n        # Reset the counts for the next iteration\n        count_0 = 0\n        count_1 = 0\n        \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    count = 0\n    max_diff = 0\n    length = len(string)\n\n    # Iterate through each sub-string\n    for i in range(length):\n        for j in range(i+1, length+1):\n            sub_str = string[i:j]\n            count = 0\n\n            # Iterate through each character in the sub-string\n            for char in sub_str:\n                if char == '0':\n                    count += 1\n\n            # Update the maximum difference if this sub-string has a different count of 0s and 1s\n            diff = abs(count - sub_str.count('0'))\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    \n    # initialize dp array\n    dp = [[0 for j in range(n)] for i in range(n)]\n    \n    # base case\n    for i in range(n):\n        if string[i] == '0':\n            dp[i][i] = 1\n            \n    # fill dp array using dynamic programming\n    for i in range(1, n):\n        for j in range(i):\n            if string[i] == '0' and string[j] == '0':\n                dp[i][j] = dp[i-1][j]\n            elif string[i] == '1' and string[j] == '1':\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n                \n    # find maximum difference between 0s and 1s in any sub-string\n    max_diff = 0\n    for i in range(n):\n        for j in range(i, n):\n            if string[i:j+1] == '111111111111':\n                diff = 1\n                for k in range(i, j+1):\n                    if string[k] == '0':\n                        diff = 0\n                    elif string[k] == '1':\n                        diff = 1\n                    else:\n                        diff = 2\n                max_diff = max(max_diff, diff)\n                \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of their common divisors.\n    \"\"\"\n    divisor_sum = 0\n    i = 1\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n        i += 1\n    return divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    common_divisors = []\n    for i in range(1, b + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # finding the common divisors of a and b\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    # summing the common divisors\n    result = sum(divisors)\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # finding common divisors of a and b\n    common_divisors = []\n    for i in range(1, min(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    # finding sum of common divisors\n    sum_common_divisors = sum(common_divisors)\n    \n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b):\n    '''\n    This function finds the sum of common divisors of two given numbers.\n    '''\n    # creating a list of numbers from 1 to the larger number\n    numbers = list(range(1,max(a,b)+1))\n    \n    # finding the common divisors of a and b in the list of numbers\n    common_divisors = set(a) & set(b) & set(numbers)\n    \n    # summing up the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # find the largest number\n    if a > b:\n        largest = a\n    else:\n        largest = b\n    \n    # loop through all numbers from 1 to the largest number\n    for i in range(1, largest+1):\n        # check if the number is a common divisor of both numbers\n        if a % i == 0 and b % i == 0:\n            # add the common divisor to the sum\n            sum += i\n            \n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function takes in two integers a and b and finds the sum of their common divisors.\n    '''\n\n    # Calculate the sum of common divisors\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the largest number that is a factor of both a and b\n    largest_factor = max(a, b, key=lambda x: abs(a // x) + abs(b // x))\n    \n    # Initialize the sum to 0\n    total = 0\n    \n    # Loop through all the numbers from 1 up to the largest factor\n    for i in range(1, largest_factor + 1):\n        # Check if i is a factor of both a and b\n        if a % i == 0 and b % i == 0:\n            # If so, add i to the total\n            total += i\n    \n    # Return the total sum\n    return total"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    while y!= 0:\n        if y & 1 == 1:\n            product += x\n        x <<= 1\n        y >>= 1\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        remainder = x % 10\n        result = result + remainder * y\n        x = x // 10\n        y = y // 10\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    while y!= 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n        result = result ^ x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    words = str.split()\n    for word in words:\n        if len(word) > n:\n            print(word, len(word))"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_list = []\n    for word in words:\n        if len(word) > n:\n            long_list.append(word)\n    return long_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes a list of words and a number n as input and returns a list of words that are longer than n characters.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = 0\n    # Check if all rows have the same values\n    for i in range(n):\n        if sum(my_matrix[i])!= magic_sum:\n            return False\n\n    # Check if all columns have the same values\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += my_matrix[i][j]\n        if col_sum!= magic_sum:\n            return False\n\n    # Check if the main diagonal has the same value as the rest of the matrix\n    for i in range(n):\n        if my_matrix[i][i]!= magic_sum:\n            return False\n\n    # Check if the secondary diagonal has the same value as the rest of the matrix\n    for i in range(n):\n        if my_matrix[i][n-i-1]!= magic_sum:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if each row is a magic square\n    for row in my_matrix:\n        if not magic_square_row(row):\n            return False\n\n    # Check if each column is a magic square\n    for i in range(len(my_matrix[0])):\n        column = [row[i] for row in my_matrix]\n        if not magic_square_row(column):\n            return False\n\n    # Check if the main diagonal is a magic square\n    diagonal = [my_matrix[i][i] for i in range(len(my_matrix))]\n    if not magic_square_row(diagonal):\n        return False\n\n    # Check if the secondary diagonal is a magic square\n    diagonal = [my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix))]\n    if not magic_square_row(diagonal):\n        return False\n\n    return True\n\ndef magic_square_row(row):\n    '''\n    Write a function to check whether a row is a magic square.\n    '''\n    # Check if the row is the sum of its elements\n    if sum(row)!= 0:\n        return False\n\n    # Check if each element is the sum of its neighbors\n    for i in range(len(row)-1):\n        if row[i] + row[i+1]!= row[i+1] - row[i]:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return \"The matrix is not a square\"\n\n    # Check if the matrix contains all the same values\n    for row in my_matrix:\n        if len(row)!= len(set(row)):\n            return \"The matrix does not contain all the same values\"\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= i + j:\n                return \"The matrix is not a magic square\"\n\n    return \"The matrix is a magic square\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of the elements in the matrix\n    total_sum = sum(sum(row) for row in my_matrix)\n\n    # Check if the sum of the diagonal elements is equal to the total sum\n    if sum(sum(my_matrix[i][i] for i in range(len(my_matrix))) for i in range(len(my_matrix))) == total_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Initialize the sum of each row, column, and diagonal\n    row_sum = [0] * 9\n    col_sum = [0] * 9\n    diag_sum = 0\n    \n    # Calculate the sum of each row, column, and diagonal\n    for i in range(len(my_matrix)):\n        row_sum[i] = my_matrix[i].sum()\n        col_sum[i] = my_matrix[i].sum()\n        diag_sum += my_matrix[i][i]\n        \n    # Check if the sum of each row, column, and diagonal is equal to 15\n    if sum(row_sum) == 15 and sum(col_sum) == 15 and diag_sum == 15:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j] == 0:\n                for k in range(1, n*n+1):\n                    if k not in my_matrix[i] and k not in my_matrix[j]:\n                        my_matrix[i][j] = k\n                        if is_magic_square(my_matrix):\n                            return True\n                        my_matrix[i][j] = 0\n                        if is_magic_square(my_matrix):\n                            return True\n                return False\n    return True\n\n\ndef is_magic_square(matrix):\n    n = len(matrix)\n    magic_sum = 0\n    for i in range(n):\n        for j in range(n):\n            magic_sum += matrix[i][j]\n    return magic_sum == n*n*2\n"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # check if the matrix is a magic square\n    magic_row = 0\n    magic_col = 0\n    for i in range(n):\n        if my_matrix[i][magic_col]!= magic_row + i or my_matrix[magic_row][i]!= magic_row + i:\n            return False\n        if magic_row == i:\n            magic_row += 1\n            if magic_row == n:\n                magic_row = 0\n                magic_col += 1\n                if magic_col == n:\n                    return True\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for element in row:\n            if not isinstance(element, int):\n                return False\n\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n\n    # Calculate the sum of the elements in the first row\n    row_sum = sum(my_matrix[0])\n\n    # Check if the matrix is a magic square\n    if diagonal_sum == row_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function checks if a given matrix is a magic square or not.\n    \"\"\"\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of elements in the matrix\n    sum_of_elements = sum(sum(row) for row in my_matrix)\n\n    # Check if the sum of elements is equal to 0 or not\n    if sum_of_elements!= 0:\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j][i] for j in range(len(my_matrix)))\n        if row_sum!= col_sum:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if the sum of each row and column is equal to the value of the diagonal element\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(zip(*my_matrix)[i])\n        if row_sum!= col_sum or col_sum!= my_matrix[i][i]:\n            return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_freq_num = None\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            max_freq_num = num\n    return max_freq_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency in the dictionary\n    max_item = None\n    max_freq = 0\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_freq_items = [k for k, v in freq_dict.items() if v == max_freq]\n    return max_freq_items[0]"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n\n    max_count = max(count.values())\n    max_num = None\n\n    for num, freq in count.items():\n        if freq == max_count:\n            max_num = num\n        elif freq > max_count:\n            max_count = freq\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = -1\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        \n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = 0\n    max_item = None\n\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    max_item = None\n    max_freq = 0\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_item = num\n            max_freq = freq[num]\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq_dict = defaultdict(int)  # create a dictionary to store the frequency of each item in the list\n    \n    # count the frequency of each item in the list\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # find the item with maximum frequency\n    max_freq = max(freq_dict.values())\n    max_item = None\n    \n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    # Create a dictionary to store the count of each item in the list\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    \n    # Find the item with maximum frequency\n    max_count = 0\n    max_item = None\n    for item, freq in count.items():\n        if freq > max_count:\n            max_count = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_reverse = ''\n    for char in str1:\n        if char in vowels:\n            vowels_reverse = char + vowels_reverse\n        else:\n            vowels_reverse = vowels_reverse + char\n    return vowels_reverse[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str1 = str1.lower()\n    str1 = ''.join([c for c in str1 if c not in vowels])\n    str1 = str1[::-1]\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_set = set(vowels)\n    result = []\n    for char in str1:\n        if char in vowels_set:\n            result.append(char)\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    reversed_str = ''\n    for char in str1:\n        if char not in vowels:\n            reversed_str += char\n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str = char + new_str\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            result = str1[i] + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            result += char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_reverse = str1.replace(vowels, '')\n    vowel_reverse = vowel_reverse[::-1]\n    return vowel_reverse"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(string):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    return ''.join([char for char in string if char not in vowels][::-1])"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n\n    Parameters:\n    tup (tuple): A tuple object containing the elements to be converted to a string.\n\n    Returns:\n    str: The original tuple as a string.\n    \"\"\"\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for x in tup1:\n        str1 += str(x) + ', '\n    return str1[:-2]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Convert a tuple to a string.\n\n    Parameters:\n    ----------\n    tup1 : tuple\n        A tuple of strings.\n\n    Returns:\n    -------\n    str\n        A string representation of the tuple.\n    \"\"\"\n    return ', '.join(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    str_tup = str(tup1)\n    return str_tup"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize the sum of negative numbers to 0\n    negative_sum = 0\n\n    # Loop through each number in the list\n    for num in nums:\n        # If the number is negative, add it to the negative sum\n        if num < 0:\n            negative_sum += num\n\n    # Return the sum of negative numbers\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function calculates the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += num\n    return count"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case: If n is 0 or 1, return 0\n    if n == 0 or n == 1:\n        return 0\n\n    # Base case: If n is even, return (n - 1) * (3 * n - 1)\n    if n % 2 == 0:\n        return (n - 1) * (3 * n - 1)\n\n    # Recursive case: If n is odd, return (n - 1) * (3 * n - 1) + (2 * (n - 1))\n    else:\n        return (n - 1) * (3 * n - 1) + (2 * (n - 1))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 6\n    else:\n        return 6 * hexagonal_num(n-1) + 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)**2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return 6 * (n-1) + (3 * (n-1)**2 - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Finding the first hexagon\n    first_hexagon = 1\n\n    # Multiplying the first hexagon by 3\n    nth_hexagon = first_hexagon * 3\n\n    # Looping n times to get the nth hexagon\n    for i in range(n-1):\n        # Finding the next hexagon\n        next_hexagon = nth_hexagon + 2\n\n        # Adding the next hexagon to the nth hexagon\n        nth_hexagon += next_hexagon\n\n    # Returning the nth hexagon\n    return nth_hexagon"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return 1 + 6 * (n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    elif n == 3:\n        return 21\n    elif n == 4:\n        return 49\n    elif n == 5:\n        return 87\n    elif n == 6:\n        return 137\n    else:\n        return hexagonal_num(n-1) + hexagonal_num(n-2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) / 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n    c = 2\n    d = 4\n    e = 8\n    f = 16\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            print(f\"{a} {b} {c} {d} {e} {f}\", end=\" \")\n            a += 1\n            b += 1\n            c += 1\n            d += 1\n            e += 1\n            f += 1\n        else:\n            print(f\"{a} {b} {c} {d} {e} {f}\", end=\" \")\n            a += 1\n            b += 1\n            c += 1\n            d += 1\n            e += 1\n            f += 1\n            a += 1\n            b += 1\n            c += 1\n            d += 1\n            e += 1\n            f += 1\n\n    return a - 1\n"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = len([num for num in nums if num == 0])\n    non_zeros = len(nums) - zeros\n    return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    return non_zero_count/zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the list of integers to a numpy array\n    nums_array = array('i', nums)\n    # Calculate the sum of all non-zero values in the array\n    non_zero_sum = sum(x for x in nums if x!= 0)\n    # Calculate the sum of all zero values in the array\n    zero_sum = len(nums) - non_zero_sum\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_sum / non_zero_sum\n    # Return the ratio as a float rounded to two decimal places\n    return round(ratio, 2)\n"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Initialize the count of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate through the array and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count\n\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    zero_ratio = zero_count / non_zero_count\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def zero_count(nums):\n    # Convert the list to an array to perform arithmetic operations on it\n    arr = array('i', nums)\n\n    # Count the number of zeroes in the array\n    count = sum(arr == 0)\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = count / len(nums)\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # convert array to list\n    nums_list = list(nums)\n    # count zeros and non-zeros\n    zero_count = nums_list.count(0)\n    non_zero_count = len(nums_list) - zero_count\n    # calculate ratio\n    if non_zero_count == 0:\n        ratio = 1\n    else:\n        ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list\n    arr = list(nums)\n    # Initialize the zero count and non-zero count\n    zero_count = 0\n    non_zero_count = 0\n    # Iterate through the list\n    for num in arr:\n        # If the number is 0, increment the zero count\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = (zero_count/len(arr))\n    # Print the ratio\n    print(\"The ratio of zeroes to non-zeroes is:\", ratio)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zeros = 0\n    ones = 0\n    for num in arr:\n        if num == 0:\n            zeros += 1\n        else:\n            ones += 1\n    ratio = zeros / ones\n    print(ratio)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    non_zero_count = len(nums) - sum(nums)\n    zero_count = sum(nums)\n\n    ratio = non_zero_count / zero_count\n\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    def is_power_of_two(num):\n        return num > 0 and (num & (num - 1)) == 0\n\n    def sum_of_powers_of_two(n):\n        count = 0\n        while n > 0:\n            if n & 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def count_bits(n):\n        count = 0\n        while n > 0:\n            count += n & 1\n            n >>= 1\n        return count\n\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    elif is_power_of_two(n):\n        return sum_of_powers_of_two(n) == 1\n    else:\n        return is_Sum_Of_Powers_Of_Two(sum_of_powers_of_two(n))"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n\n    def bitcount(n):\n        \"\"\"\n        Count the number of set bits in a number.\n        \"\"\"\n        count = 0\n        while n > 0:\n            count += n & 1\n            n >>= 1\n        return count\n\n    def is_power_of_two(n):\n        \"\"\"\n        Check if a number is a power of two.\n        \"\"\"\n        return (n & (n - 1)) == 0\n\n    def is_sum_of_powers_of_two(a, b):\n        \"\"\"\n        Check if the sum of two numbers is a power of two.\n        \"\"\"\n        return (a + b) & (a + b - 1) == 0\n\n    # Check if the number is 0 or 1.\n    if n == 0 or n == 1:\n        return False\n\n    # Check if the number is a power of two.\n    if is_power_of_two(n):\n        return False\n\n    # Check if the number can be represented as sum of powers of 2.\n    count = bitcount(n)\n    if count % 2 == 0:\n        return False\n\n    # Check if the sum of powers of 2 is a power of two.\n    if is_sum_of_powers_of_two(0, count):\n        return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check if the given number is even\n    if n % 2 == 0:\n        return False\n\n    # convert the number to binary format\n    binary_str = bin(n)[2:]\n\n    # check if the binary string has only one digit and if its value is 0 or 1\n    if len(binary_str)!= 1 or binary_str[0] == '0' or binary_str[0] == '1':\n        return False\n\n    # calculate the sum of powers of 2\n    power = 0\n    sum_of_powers = 0\n    while power <= len(binary_str):\n        if binary_str[-power] == '1':\n            sum_of_powers += 2 ** power\n        power += 1\n\n    # check if the sum of powers of 2 is equal to the original number\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize the result variable\n    result = False\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Check if i can be represented as a sum of powers of 2\n        if i == 2**i and all(j == 0 or i % (2**j) == 0 for j in range(i//2+1)):\n            result = True\n            break\n    return result"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check if the given number is already a power of 2\n    if n == 1:\n        return True\n    \n    # if the given number is less than 2, it cannot be a sum of powers of 2\n    if n < 2:\n        return False\n    \n    # check if the given number can be represented as sum of powers of 2 using only even numbers\n    for i in range(2, n+1, 2):\n        if n % i == 0:\n            return True\n    \n    # if the given number is not a power of 2, it cannot be a sum of powers of 2 using only even numbers\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Define a function to check if a number is a power of 2\n    def is_power_of_2(num):\n        return (num & (num - 1)) == 0\n\n    # Check if n is a power of 2\n    if is_power_of_2(n):\n        return True\n\n    # Calculate the sum of powers of 2\n    sum_of_powers_of_2 = 0\n    while n > 0:\n        if n & 1:\n            sum_of_powers_of_2 += 1\n        n = n >> 1\n\n    # Check if the sum of powers of 2 is equal to n\n    if sum_of_powers_of_2 == n:\n        return True\n\n    # If the function reaches here, it means that there is no power of 2 in the given number\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    else:\n        for i in range(1, n+1):\n            if n % i == 0:\n                if (is_Sum_Of_Powers_Of_Two(n//i) == True):\n                    return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n\n    power_of_two = 1\n    while power_of_two <= n:\n        if n % power_of_two == 0:\n            if power_of_two == 1:\n                return True\n            n -= power_of_two\n        else:\n            power_of_two <<= 1\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check for even number\n    if n % 2 == 0:\n        return False\n    \n    # Calculate the sum of powers of 2\n    sum_of_powers_of_two = 0\n    while n > 0:\n        if n % 2 == 1:\n            sum_of_powers_of_two += 1\n        n //= 2\n    \n    # Check if the sum of powers of 2 is equal to the given number\n    return sum_of_powers_of_two == n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Formula to calculate circumference of a circle\n    circumference = 2 * 3.14159 * r\n    \n    # Return the calculated circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # Formula to calculate the circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r  # 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    circumference = 2*pi*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(f\"The circumference of a circle of radius {r} is {circumference:.2f}\")"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [num for sublist in test_list for num in sublist]"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    return set([num for sublist in test_list for num in sublist])"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten(list_of_lists):\n        flat_list = []\n        for item in list_of_lists:\n            if type(item) == list:\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    flattened_list = flatten(test_list)\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    # Define a set to store the numbers\n    singly = set()\n    \n    # Loop through the list of lists\n    for sublist in test_list:\n        # Loop through the sublist\n        for num in sublist:\n            # Add the number to the set\n            singly.add(num)\n    \n    # Convert the set to a list\n    singly_list = list(singly)\n    \n    # Return the list of numbers\n    return singly_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    def flatten(lst):\n        flat_lst = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_lst.extend(flatten(item))\n            else:\n                flat_lst.append(item)\n        return flat_lst\n\n    return flatten(test_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for i in test_list:\n        for j in i:\n            result.add(j)\n    return list(result)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n\n    This algorithm works by repeatedly \"panning\" a disc with a length equal to the\n    largest element in the list, until the entire list is sorted. Each pancake\n    is then turned over, and the largest element is moved to its correct position.\n\n    The time complexity of the algorithm is O(n^2) in the worst case, where n is the\n    length of the list. However, in practice it is O(n log n) for partially sorted\n    lists, or O(n) for fully sorted lists.\n\n    Args:\n        nums (list): A list of integers to be sorted.\n\n    Returns:\n        None: The list is sorted in place using the pancake sort algorithm.\n    \"\"\"\n\n    # Initialize the maximum element and the swapped index\n    max_elem = max(nums)\n    swapped = False\n\n    # Keep track of the largest and smallest elements\n    largest = -1\n    smallest = float('inf')\n\n    # Sort the list using pancake sort algorithm\n    for i in range(len(nums)):\n        # Find the maximum element and its index\n        if nums[i] == max_elem:\n            largest = i\n        elif nums[i] > max_elem:\n            max_elem = nums[i]\n            largest = i\n            swapped = True\n\n        # Find the smallest element and its index\n        if nums[i] == min(nums):\n            smallest = i\n        elif nums[i] < min(nums):\n            smallest = i\n\n        # Swap the largest and smallest elements if they are out of order\n        if largest!= i and nums[largest] < nums[smallest]:\n            nums[largest], nums[smallest] = nums[smallest], nums[largest]\n            swapped = True\n\n        # Move the disc up one position\n        if i < len(nums) - 1:\n            nums[i], nums[i + 1] = nums[i + 1], nums[i]\n\n    # Check if the list was partially sorted\n    if smallest < len(nums) - 1:\n        print(\"Warning: List was partially sorted.\")\n\n    # Reverse the sorted list if necessary\n    if swapped and smallest < len(nums) - 1:\n        nums = nums[::-1]\n\n    # Print the sorted list\n    print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def reverse(nums, start, end):\n        while start < end:\n            swap(nums, start, end)\n            start += 1\n            end -= 1\n\n    n = len(nums)\n    for i in range(n // 2):\n        reverse(nums, 0, i)\n        reverse(nums, i + 1, n - 1)\n        reverse(nums, 0, n - 1)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    def swap(a, b):\n        a, b = nums[a], nums[b]\n        nums[a], nums[b] = b, a\n\n    n = len(nums)\n    for i in range(n):\n        max_pos = i\n        for j in range(i, n):\n            if nums[j] > nums[max_pos]:\n                max_pos = j\n        swap(i, max_pos)\n        print(\" \".join(map(str, nums)))\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Helper function to recursively break ties\n    def heapify(arr, n, i):\n        largest = i\n        l = 2*i + 1\n        r = 2*i + 2\n        if l < n and arr[l] > arr[largest]:\n            largest = l\n        if r < n and arr[r] > arr[largest]:\n            largest = r\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    # Main function to perform heap sort\n    def pancake_sort(arr):\n        n = len(arr)\n        # Build heap (rearrange array)\n        for i in range(n//2 - 1, -1, -1):\n            heapify(arr, n, i)\n        # One by one extract an element from heap and insert it at its correct position\n        for i in range(n-1, 0, -1):\n            # Move current root to end\n            arr[i], arr[0] = arr[0], arr[i]\n            # call max heapify on the reduced heap\n            heapify(arr, i, 0)\n\n    # Call pancake sort on the given array\n    pancake_sort(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Initialize an array to store the sorted indices\n    sorted_indices = [i for i in range(n)]\n    # Bubble sort the list\n    for i in range(n):\n        for j in range(i):\n            # If the current element is greater than the next element, swap them\n            if nums[sorted_indices[j]] > nums[sorted_indices[j+1]]:\n                sorted_indices[j], sorted_indices[j+1] = sorted_indices[j+1], sorted_indices[j]\n    # Swap the sorted elements back into the original list\n    for i in range(n-1, -1, -1):\n        nums[i], nums[sorted_indices[i]] = nums[sorted_indices[i]], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    \n    # create a copy of the input list to avoid modifying the original list\n    nums = nums.copy()\n    \n    # function to swap two elements in the list\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n        \n    # function to make a pancake of length n\n    def make_pancake(n):\n        for i in range(n):\n            swap(0, n-1-i)\n            \n    # function to break a pancake of length n\n    def break_pancake(n):\n        for i in range(n-1, -1, -1):\n            swap(i, n-1)\n            \n    # function to iterate until the pancakes are sorted\n    while True:\n        max_pancake = -1\n        for i in range(len(nums)):\n            if max_pancake < nums[i]:\n                max_pancake = nums[i]\n        if max_pancake == -1:\n            break\n        for i in range(len(nums)):\n            if nums[i] == max_pancake:\n                break_pancake(i)\n                break_pancake(max_pancake)\n                break_pancake(i)\n        for i in range(len(nums)-1, 0, -1):\n            if nums[i] > nums[i-1]:\n                swap(i, i-1)\n                \n        # check if the list is sorted\n        for i in range(len(nums)-1):\n            if nums[i] > nums[i+1]:\n                return False\n            \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def reverse_pancake(nums, start, end):\n        '''\n        Helper function that reverses the pancake starting at the given index.\n        '''\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n\n    def sort_pancake(nums, start, end):\n        '''\n        Helper function that sorts the pancake starting at the given index.\n        '''\n        reverse_pancake(nums, start, end)\n        reverse_pancake(nums, start, end - 1)\n        reverse_pancake(nums, start, end)\n\n    n = len(nums)\n\n    for start in range(n - 1, 0, -1):\n        sort_pancake(nums, start, n - 1)\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Helper function to reverse an array\n    def reverse(arr):\n        left, right = 0, len(arr) - 1\n        while left < right:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n\n    # Calculate the size of the array\n    n = len(nums)\n\n    # Loop through the array and reverse it\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i + 1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the first element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Reverse the rest of the array\n        reverse(nums[:i] + nums[i + 1:])\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the element at the current position\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the sublist between the current position and the maximum element\n        if i!= max_idx:\n            nums[i:max_idx+1] = nums[i:max_idx+1][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    # Create a copy of the list\n    nums_copy = nums.copy()\n    n = len(nums)\n\n    # Iterate through the list until it is sorted\n    while True:\n        # Find the index of the maximum element\n        max_index = 0\n        for i in range(1, n):\n            if nums_copy[i] > nums_copy[max_index]:\n                max_index = i\n        \n        # If the maximum element is already at the end, the list is already sorted\n        if max_index == n - 1:\n            break\n        \n        # Otherwise, swap the maximum element with the element at the end and decrement the length\n        nums_copy[max_index], nums_copy[n - 1] = nums_copy[n - 1], nums_copy[max_index]\n        n -= 1\n    \n    # Return the sorted list\n    return nums_copy"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function counts the number of items in a list that are identical in the same position of three other lists.\n\n    Args:\n        list1 (list): list of items\n        list2 (list): list of items\n        list3 (list): list of items\n\n    Returns:\n        int: the number of identical items in the same position of all three input lists\n    '''\n    count = 0\n    for item in list1:\n        if item in list2 and item in list3:\n            for other_item in list2:\n                if other_item in list3:\n                    if item == other_item:\n                        count += 1\n                        break\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input, and counts the number of items that are identical in the same position\n    of the given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    # Initialize count variable to zero\n    count = 0\n\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Check if the item at the current index is equal to the item at the same index in the second list\n        if list1[i] == list2[i]:\n            # If the item is equal, add to the count variable\n            count += 1\n\n    # Iterate through the second list\n    for i in range(len(list2)):\n        # Check if the item at the current index is equal to the item at the same index in the third list\n        if list2[i] == list3[i]:\n            # If the item is equal, add to the count variable\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): list of values.\n        list2 (list): list of values.\n        list3 (list): list of values.\n\n    Returns:\n        int: number of identical items in the same position of the three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): First list of items.\n        list2 (list): Second list of items.\n        list3 (list): Third list of items.\n\n    Returns:\n        int: Number of items that are identical in the same position of the three lists.\n    \"\"\"\n\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if isinstance(i, list): \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if type(i) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    num_lists = 0\n    for item in Input:\n        if isinstance(item, list):\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize max difference to be the difference between first and last element\n    max_diff = abs(arr[0] - arr[-1])\n    \n    # Iterate through the array to find the maximum difference between any two elements\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return \"Array should have at least two elements\"\n\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # Initialize max_diff to a very small number\n    max_diff = float('-inf')\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        \n        # Loop through the rest of the array\n        for j in range(i+1, len(arr)):\n            \n            # Calculate the absolute difference between the current elements and the next one\n            diff = abs(arr[i] - arr[j])\n            \n            # Update the maximum difference if the current difference is greater than the previous max_diff\n            if diff > max_diff:\n                max_diff = diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as an input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n\n    if b == 0:\n        # No solution\n        return None\n    else:\n        # Check if x satisfies the condition\n        if a == 1:\n            x = n // b\n        elif b == 1:\n            x = n // a\n        else:\n            x = (n // a) - (n % a // b)\n\n        # Check if y satisfies the condition\n        if a == 1:\n            y = n - x * b\n        elif b == 1:\n            y = n - x * a\n        else:\n            y = (n - x * a) - (n - x * b)\n\n        if x is None or y is None:\n            return None\n        else:\n            return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        x = -n/b\n        y = 0\n    else:\n        x1 = -n/b\n        x2 = (a/b)*(-n/b)\n        x = min(x1, x2)\n        if x1 < x2:\n            y = -x1/a\n        else:\n            y = -x2/a\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    else:\n        x = -n/a\n        y = n/b\n        return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # calculate the discriminant\n    d = b ** 2 - 4 * a * n\n\n    # check if there is a solution\n    if d < 0:\n        return None\n\n    # calculate the two solutions\n    x1 = (-b + d ** 0.5) / (2 * a)\n    x2 = (-b - d ** 0.5) / (2 * a)\n\n    # return the two solutions as a tuple\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n-1):\n        if b*i + a*(n-i-1) == n:\n            return (i, n-i-1)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = b\n    y = -a // b\n    if a * x + b * y == n:\n        return (x, y)\n    elif a * x + b * y < n:\n        return None\n    else:\n        x = b\n        y = -a // b\n        if a * x + b * y == n:\n            return (x, y)\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for x in range(-100, 101):\n        if x == 0:\n            continue\n        y = n - a * x - b * (x * x)\n        if y >= 0 and (y - n) % (a * b) == 0:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Compute the discriminant\n    d = b**2 - 4*a*n\n\n    # Check if the discriminant is positive or negative\n    if d > 0:\n        # Compute the roots and check if they are integers\n        root1 = int((-b + math.sqrt(d)) / (2*a))\n        root2 = int((-b - math.sqrt(d)) / (2*a))\n        if root1.is_integer() and root2.is_integer():\n            return (root1, root2)\n    elif d == 0:\n        # One solution\n        root = -b / (2*a)\n        if root.is_integer():\n            return (root, root)\n    elif d < 0:\n        # No real solutions\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1 = 0\n    x2 = n / a\n    y1 = 0\n    y2 = n / b\n\n    if n % a == 0 and n % b == 0:\n        return (x1, x2), (y1, y2)\n    elif n % a == 0:\n        return (x1, x2)\n    elif n % b == 0:\n        return (y1, y2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    else:\n        x = int((-n + (b**2 - 4*a*n)/(2*a)) / b)\n        y = int((-n - (b**2 - 4*a*n)/(2*a)) / b)\n        return (x, y)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # create a set of elements from list2\n    set2 = set(list2)\n    # create a new list without elements in list1 present in list2\n    return [x for x in list1 if x not in set2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Iterate through the first list and check if any element is present in the second list\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            # Remove the element from the first list\n            del list1[i]\n            # Decrement the index since we removed an element\n            i -= 1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list1.remove(elem)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a new list to store the unique elements of list1\n    unique_list1 = []\n\n    # iterate over each element of list1\n    for element in list1:\n        # if the element is not present in list2, add it to the new list\n        if element not in list2:\n            unique_list1.append(element)\n\n    # return the new list containing only unique elements of list1\n    return unique_list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Check if both lists are of the same length\n    if len(list1)!= len(list2):\n        print(\"Both lists should have the same length.\")\n        return\n    \n    # Create a new list that will store the remaining elements from both lists\n    new_list = []\n    \n    # Loop through each element in the first list\n    for element in list1:\n        # Check if the element is not present in the second list\n        if element not in list2:\n            # Add it to the new list if it's not already there\n            if element not in new_list:\n                new_list.append(element)\n    \n    # Return the new list containing only the remaining elements from both lists\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the list1 and remove the elements present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            del list1[i]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Make a set of elements in the first list\n    list1_set = set(list1)\n    # Iterate through the elements of the second list\n    for element in list2:\n        # If the element is present in the first list, remove it\n        if element in list1_set:\n            list1_set.remove(element)\n    # Return a list of elements that are not present in the second list\n    return list1_set"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 1:\n        return n + sum_series(n-1)\n    else:\n        return sum_series(n//2) + sum_series(n//2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while i * 2 <= n:\n        sum += n - 2 * i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n <= 2:\n        return 0\n    else:\n        return (n * (n + 1)) // 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2!= 0:\n        n -= 1\n    series_sum = 0\n    for i in range(n // 2):\n        series_sum += (n - 2*i)\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return sum_even_series(n // 2)\n    else:\n        return sum_odd_series(n // 2)\n\n\ndef sum_even_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n * (n + 1)) // 2\n\n\ndef sum_odd_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n + 1) // 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0, n//2):\n        sum += (n-2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    total = 0\n    while n - 2*i >= 0:\n        total += n - 2*i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        n = n - 1 # Make n odd if it's even\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    i = 0\n    while i < n // 2:\n        result += n - 2 * i\n        i += 1\n    return result"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2*pi/l*i\n        area += s*tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        theta = i * 2 * pi / l\n        area += (s ** 2) * tan(theta)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l) * (s - l + tan(pi/l))) / (2 * tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area using the formula A = (s * (s - a) * l)/6\n    a = s/l\n    area = 0\n    for i in range(l):\n        area += (s * (s - a) * i)/6\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(2*pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        area += (s * (tan(i*pi/l))) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(l**2))/4 # calculate area using Heron's formula\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter of the polygon\n    perimeter = (s + l) * 2\n    \n    # Calculate the area of the polygon using the formula\n    area = perimeter * math.sin(math.pi/l)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    angle = 360.0 / l\n    for i in range(l):\n        x = s * tan(angle / 180.0 * pi)\n        y = x / tan(90.0 / 180.0 * pi)\n        area += x * y\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the perimeter of the polygon\n    perimeter = 2 * pi * s\n    # calculate the area using Heron's formula\n    area = (s * (s - tan(pi / l) ** 2) / 3) ** 0.5\n    # return the area of the polygon\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    divisors = []\n    divisor = 1\n    \n    while divisor <= n:\n        if n % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n        \n    div_sum = sum(divisors)\n    \n    if div_sum == n:\n        print(\"The sum of the divisors of\", n, \"is equal to\", div_sum)\n    else:\n        print(\"The sum of the divisors of\", n, \"is not equal to\", div_sum)\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def get_divisors(num):\n        '''\n        Get the list of divisors of a given number.\n        '''\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n\n    def sum_divisors(divisors):\n        '''\n        Get the sum of the divisors of a list.\n        '''\n        return sum(divisors)\n\n    def is_same_sum(num1, num2):\n        '''\n        Check if the sum of the divisors of two numbers are the same.\n        '''\n        div1 = get_divisors(num1)\n        div2 = get_divisors(num2)\n        return sum_divisors(div1) == sum_divisors(div2)\n\n    print(is_same_sum(12, 28)) # Output: True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function determines if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of the divisors of n\n    div_sum = sum(math.factorial(i) for i in range(1, int(math.sqrt(n))+1))\n    # Check if the sum of divisors is equal to n\n    if div_sum == n:\n        print(\"The sum of the divisors of\", n, \"is equal to\", div_sum)\n    else:\n        print(\"The sum of the divisors of\", n, \"is not equal to\", div_sum)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i + n // i\n\n    # Check if the sum of the divisors is the same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Check if the input is an integer\n    if not isinstance(n, int):\n        print(\"Please enter an integer.\")\n        return\n    \n    # Find the sum of the divisors of n\n    div_sum = sum(i for i in range(1, n+1) if n % i == 0)\n    \n    # Check if the sum of the divisors of n is equal to n\n    if div_sum == n:\n        print(f\"The sum of the divisors of {n} is {div_sum}.\")\n    else:\n        print(f\"The sum of the divisors of {n} is not equal to {n}.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if i!= n // i:\n                div_sum += n // i\n    return div_sum == n // sum(map(int, str(n)))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of the divisors of n\n    div_sum = sum(range(1, n+1)) - n\n    \n    # calculate the sum of the divisors of n-1\n    div_sum_n1 = sum(range(1, n-1)) - n\n    \n    # check if the two sums are equal\n    if div_sum == div_sum_n1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            div_sum += i \n    if n > 1 and div_sum == 0: \n        return False \n    if n > 1 and div_sum!= 0: \n        return True "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Using the math module to find the number of divisors of a given number\n    num_divisors = sum(1 for i in range(1, n+1) if n % i == 0)\n\n    # Using the math module to find the sum of the divisors of two integers\n    int_divisors = math.factorial(n) // (math.factorial(n//2) * math.factorial(n//2+1))\n\n    # Comparing the two sums to determine if they are the same\n    if int_divisors == num_divisors:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return sum(divisors) == n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter, add it to the dictionary with a count of 1\n        if char.isalpha():\n            char_count[char] = 1\n        # If the character is not a letter, increment its count in the dictionary by 1\n        else:\n            char_count[char] += 1\n\n    # Loop through the dictionary to count the number of occurrences of each character\n    for key, value in char_count.items():\n        # If the value is 1, increment the count for that character in the dictionary by 1\n        if value == 1:\n            char_count[key] += 1\n\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(26):\n        if str1.lower().count(chr(i+97)) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for char in str1:\n        if char.lower() in alphabet:\n            index = alphabet.find(char.lower())\n            if index!= -1:\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1.lower().find(str1.lower()[i])!= -1:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char.lower() == alphabet[alphabet.index(char.lower())].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create an empty dictionary to store the count of characters at the same position in the English alphabet\n    char_count = {}\n    # Convert the string to lowercase to make the comparison case insensitive\n    str1 = str1.lower()\n    # Iterate through each character in the string\n    for char in str1:\n        # Check if the character is a letter and not already in the dictionary\n        if char.isalpha() and char not in char_count:\n            # If the character is a letter and not already in the dictionary, add it to the dictionary with a count of 1\n            char_count[char] = 1\n        # If the character is a letter and already in the dictionary, increment its count by 1\n        elif char.isalpha() and char in char_count:\n            char_count[char] += 1\n    # Return the count of characters at the same position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Create a dictionary to store the count of characters at each position in the string\n    char_count = {}\n\n    # Iterate over the characters in the string\n    for char in str1:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Convert the character to its position in the English alphabet (case insensitive)\n            index = ord(char) - 97\n\n            # Check if the position is already in the dictionary\n            if index in char_count:\n                # Increment the count of the character at the current position\n                char_count[index] += 1\n            else:\n                # Add the character to the dictionary with a count of 1\n                char_count[index] = 1\n\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    # create a dictionary to store the character counts\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # convert the character to lowercase for case insensitive comparison\n        lower_char = char.lower()\n        \n        # if the character is in the dictionary, increment its count\n        if lower_char in char_count:\n            char_count[lower_char] += 1\n        # otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[lower_char] = 1\n    \n    # loop through the dictionary and print the count of characters that occur at the same position in the string as in the English alphabet\n    for char, count in char_count.items():\n        if count == 1:\n            print(f\"{char} occurs at the same position in the string as in the English alphabet.\")\n        else:\n            print(f\"{char} occurs {count} times at the same position in the string as in the English alphabet.\")\n    \n    # return the total count of characters\n    return sum(char_count.values())"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        count += str1.lower().count(chr(i+97))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    This function counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char.lower() in english_alphabet.lower():\n            count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    This function takes a list of integers A and returns the number of pairs of integers in A\n    that have an even number as their sum.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0:\n                xor = A[i] ^ A[j]\n                if xor % 2 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a Python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary and check if it has only one bit set (i.e., its least significant bit is 1)\n    if (bin(n)[2:].count('1') == 1):\n        # Get the binary representation of 2 raised to the power of n - 1\n        power = 1 << n.bit_length() - 1\n        # If the binary representation of power is greater than or equal to the binary representation of n,\n        # then n is already a power of 2\n        if (power >= bin(n)[2:]):\n            return n\n        else:\n            # If not, return the binary representation of the next power of 2\n            return power\n    else:\n        # If n is not a power of 2, return the binary representation of the next power of 2\n        return 1 << n.bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n & (n - 1)!= 0:\n        n |= n - 1\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the next power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary\n    binary = bin(n)[2:]\n    # Initialize the power of 2 variable\n    power_of_2 = 1\n    # Iterate through the binary digits in reverse order\n    for digit in reversed(binary):\n        # If the digit is 1, multiply the power of 2 by 2\n        if digit == '1':\n            power_of_2 *= 2\n        # If the digit is 0, skip to the next power of 2\n        else:\n            break\n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n\n    # Initialize the power of 2 to the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n\n    # Return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize variables\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the minimum power of 2 as 2^0 (which is 2)\n    min_power_of_2 = 2\n    # Check if the minimum power of 2 is greater than or equal to n\n    while min_power_of_2 < n:\n        # If it is, increase the minimum power of 2 by 1\n        min_power_of_2 *= 2\n    # Return the minimum power of 2\n    return min_power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    # check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n    \n    # find the next power of 2 using binary search\n    low = 1\n    high = n\n    while low < high:\n        mid = (low + high) // 2\n        if mid * mid > n:\n            high = mid\n        else:\n            low = mid\n    \n    return low"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    i = 1\n    while i < n:\n        i *= 2\n    return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # find the smallest power of 2 greater than or equal to n\n        while n & (1 << 31) == 0:\n            n = n | (1 << 31)\n        return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize result to 2^0\n    result = 2 ** 0\n    \n    # loop until result is greater than or equal to n\n    while result < n:\n        # multiply result by 2 and add 1 to get next result\n        result = result * 2 + 1\n    \n    # return result\n    return result"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(lst, num):\n    '''\n    This function counts the number of occurrences of a number in a list.\n    \n    Args:\n        lst (list): the list to search in\n        num (int): the number to search for\n    \n    Returns:\n        int: the number of occurrences of the number in the list\n    '''\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(lst, num):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i] for i in range(m, n+1))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_range = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_range += i\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable to 0\n    sum_range = 0\n\n    # Loop through the list from the first index to the second index\n    for i in range(m, n+1):\n        # Add the current element to the sum variable\n        sum_range += list1[i]\n\n    # Return the sum of numbers in the specified range\n    return sum_range\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    \n    sum_list = 0\n    for i in range(m, n+1):\n        sum_list += list1[i]\n    \n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n >= len(list1) or m > n:\n        return 'Invalid indices!'\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    sum_range = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_range += i\n    return sum_range"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of the side of the pentagon\n    side_length = 2*a*math.sin(math.pi/5)\n\n    # Calculate the number of sides of the pentagon\n    num_sides = 5\n\n    # Calculate the perimeter of the pentagon by adding up the length of each side\n    perimeter = (4*a*math.sin(math.pi/5)) + (4*a*math.sin(math.pi/5)) + (4*a*math.sin(math.pi/5)) + (4*a*math.sin(math.pi/5)) + (4*a*math.sin(math.pi/5))\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula to find the perimeter of a regular pentagon\n    # (n * (a + b + c) / 2)\n    n = 5\n    b = a + a + a\n    c = a + a\n    perimeter = (n * (a + b + c) / 2)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the length of the side of the pentagon\n    side = a * math.sqrt(3) / 2\n    # add up the lengths of the sides of the pentagon\n    perimeter = side * 5\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of one side of the pentagon\n    s = 5 * math.sqrt(3) / 4\n\n    # Calculate the number of sides of the pentagon\n    n = 5\n\n    # Calculate the perimeter\n    p = 2 * a + 5 * s\n\n    # Return the result\n    return p"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    std_index = s.index('std')\n    while std_index!= -1:\n        count += 1\n        std_index = s.index('std', std_index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    \n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    \n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+4] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = s.find('std')\n    while i!= -1:\n        count += 1\n        i = s.find('std', i+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    if len(test_tuple) < 2:\n        return False\n\n    first_elem_type = type(test_tuple[0])\n    for elem in test_tuple[1:]:\n        if type(elem)!= first_elem_type:\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n    else:\n        return all(isinstance(x, type(test_tuple[0])) for x in test_tuple)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = None\n    for element in test_tuple:\n        if data_type is None:\n            data_type = type(element)\n        else:\n            if type(element)!= data_type:\n                return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Check if all elements in a tuple have the same data type or not.\n\n    Args:\n        test_tuple (tuple): The tuple to check.\n\n    Returns:\n        bool: True if all elements in the tuple have the same data type, False otherwise.\n    \"\"\"\n    data_types = set()  # Create an empty set to store the data types of elements in the tuple\n\n    # Iterate through each element in the tuple\n    for element in test_tuple:\n        # Add the data type of the current element to the set of data types\n        data_types.add(type(element))\n\n    # Check if all data types in the set are the same\n    return len(data_types) == 1 and all(isinstance(x, type(test_tuple[0])) for x in test_tuple)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    first_elem = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= first_elem:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    type_set = set()\n    for element in test_tuple:\n        type_set.add(type(element))\n    return len(type_set) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in a tuple have same data type or not.\n    \"\"\"\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # get the data type of the first element of the tuple\n    data_type = type(test_tuple[0])\n    # iterate through the tuple and check if each element has the same data type as the first element\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # Initialize a counter to 0\n    counter = 0\n\n    # Traverse the array\n    for i in range(n):\n\n        # If the element at the current index is equal to x, increment the counter\n        if arr[i] == x:\n            counter += 1\n\n        # If the counter becomes greater than n/2, return True\n        if counter > n // 2:\n            return True\n\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n // 2:\n        return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n / 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Find the number of occurrences of x in arr\n    count = arr.count(x)\n\n    # Check if count is greater than n/2\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count == n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    i = 0\n\n    while i < n:\n        if arr[i] == x:\n            count += 1\n        i += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0 \n    while n > 0: \n        n &= (n-1) # clear the least significant set bit \n        count += 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1 # count the number of bits set to 1 in the least significant bit of n\n        n >>= 1 # shift n to the right by one bit position\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n-1 # clear the least significant set bit\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Counts the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    odd_values = [s[i] for i in range(len(str)) if i % 2!= 0]\n    return ''.join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    :param str: the string to remove odd values from\n    :return: the string with odd values removed\n    \"\"\"\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_str += str[i]\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_list = []\n    for i, char in enumerate(str):\n        if i % 2!= 0:\n            odd_list.append(char)\n    return ''.join(odd_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty string to store the modified string\n    modified_str = ''\n    # Loop through each character in the input string\n    for char in str:\n        # Check if the index of the current character is odd\n        if (ord(char) - 48) % 2 == 0:\n            # If the index is odd, add the character to the modified string\n            modified_str += char\n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # create an empty string to store the odd-indexed characters\n    odd_str = \"\"\n    # loop through each character in the input string\n    for char in str:\n        # check if the index of the current character is odd\n        if int(char) % 2 == 1:\n            # if it is, append it to the empty string\n            odd_str += char\n    # return the resulting string\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(str)\n\n    # Iterate through the list and remove odd values\n    for i in range(len(char_list)):\n        if i % 2!= 0:\n            char_list.pop(i)\n\n    # Convert the list of characters back into a string\n    result_str = ''.join(char_list)\n\n    return result_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three arguments and returns the minimum of those three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function finds the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        count += bin(n & (1 << i-1)).count('1')\n    return count == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize a variable to store the count of set bits in the given range\n    count = 0\n\n    # Loop through all the bits in the binary representation of n\n    for i in range(l, r + 1):\n        # If the i-th bit is set, increment the count by 1\n        if (n & (1 << i)):\n            count += 1\n\n    # Return True if all the bits are unset in the given range\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments - n, l and r.\n    n is the integer number that we are checking.\n    l is the left bound of the range.\n    r is the right bound of the range.\n    '''\n\n    # We are initializing the count of unset bits as zero.\n    unset_count = 0\n\n    # We are iterating through each bit of the integer number n.\n    for bit in bin(n)[2:]:\n        # If the current bit is set, we increment the unset_count.\n        if bit == '1':\n            unset_count += 1\n\n        # If the unset_count reaches the right bound, we break the loop.\n        if unset_count == r - l + 1:\n            break\n\n    # If the unset_count is equal to zero, it means all the bits are unset in the given range.\n    if unset_count == 0:\n        print(\"Yes, all bits are unset in the given range.\")\n    else:\n        print(\"No, at least one bit is set in the given range.\")"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    while l <= r:\n        count += n & 1\n        n >>= 1\n        l += 1\n    return count == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Iterate through the bits in the given range\n    for i in range(l, r+1):\n        # Check if the current bit is set or not\n        if (n & (1 << i))!= 0:\n            # If the bit is set, return False\n            return False\n    # If all the bits are unset, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize variables\n    start_bit = 0\n    end_bit = 31\n    mask = 1\n\n    # Check if the range is valid\n    if l > r:\n        return False\n\n    # Check all the bits in the given range\n    while start_bit <= end_bit:\n        # Check if the bit is set in the given range\n        if (n & (1 << start_bit)) >> start_bit!= 0 and l <= start_bit <= r:\n            return False\n\n        # Shift the start_bit to the next bit\n        start_bit += 1\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r == 0:\n        # If r is 0, then all bits in the range must be set to 1\n        for i in range(l, n + 1):\n            if i & (1 << l)!= (1 << l):\n                # Check if the bit at the lth position is set or not\n                return False\n        return True\n\n    # If r is greater than 0, then we need to check if all bits in the range are unset\n    # To do this, we can use binary search to find the maximum value that will set all bits to 0\n    # Then, we can use bitwise AND operation with the given range to check if all bits are unset or not\n    max_unset_bit = 0\n    for i in range(l, r + 1):\n        max_unset_bit = max(max_unset_bit, (1 << i) - 1)\n\n    if max_unset_bit == 0:\n        # If all bits are unset, then n must be equal to the given range\n        return n == l\n\n    return all_Bits_Set_In_The_Given_Range(n, l, max(l, max_unset_bit))"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Parameters:\n    n (int): a number representing the number of bits in the given number.\n    l (int): the least significant bit of the given number.\n    r (int): the most significant bit of the given number.\n\n    Returns:\n    bool: True if all the bits are set in the given range, False otherwise.\n    \"\"\"\n    mask = (1 << n) - 1  # mask to get the rightmost n bits\n    left_shift = r - l + 1  # left shift needed to get the required range\n    right_shift = 32 - l + n  # right shift needed to get the required range\n\n    if (mask & ((n * (n - 1)) // 2))!= 0:  # check if there are any set bits in the given range\n        return False\n\n    if l + left_shift > 32:  # check if there are any bits set in the left shift range\n        return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes in three arguments - n, l, and r. \n    n is the integer value of the given number.\n    l and r are the lower and upper limits of the range.\n    The function returns True if all the bits in the range are unset.\n    If any bit is set, the function returns False.\n    \"\"\"\n    if n & (1 << l) == 0 and n & (1 << r) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize variables\n    count = 0\n    num = n\n    \n    # Loop through the range of bits\n    for i in range(l, r+1):\n        # Check if the current bit is set or unset\n        if (num & (1 << i)) == 0:\n            count += 1\n        \n        # Remove the current bit from the number\n        num &= ~(1 << i)\n        \n    # Check if all the bits are set or unset\n    if count == r-l+1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Count the number of negative and positive elements\n    neg_count = sum(1 for x in arr[:n] if x < 0)\n    pos_count = sum(1 for x in arr[:n] if x >= 0)\n\n    # Determine the position of the negative elements and the position of the positive elements\n    neg_start = 0\n    neg_end = neg_start + neg_count\n    pos_start = neg_end\n    pos_end = pos_start + pos_count\n\n    # Move the positive elements to the end of the array\n    arr[pos_start:pos_end] = arr[pos_end:pos_end+len(arr)-pos_start]\n\n    # Move the negative elements to the beginning of the array\n    arr[neg_start:neg_end] = arr[:neg_end-neg_start]\n\n    # Reverse the order of the positive and negative elements in-place\n    arr[:n] = arr[:n][::-1]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Find the index of the first negative element and the first positive element\n    neg_index = 0\n    pos_index = n - 1\n\n    # Iterate over the array from left to right\n    for i in range(n):\n        # If the current element is negative, swap it with the first negative element\n        if arr[i] < 0:\n            arr[i], arr[neg_index] = arr[neg_index], arr[i]\n            # Move the first negative element to the next position\n            neg_index += 1\n        # If the current element is positive, swap it with the last positive element\n        elif arr[i] > 0:\n            arr[i], arr[pos_index] = arr[pos_index], arr[i]\n            # Move the last positive element to the previous position\n            pos_index -= 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    # function to swap two elements in an array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # function to partition an array around a pivot element\n    def partition(arr, low, high, pivot_index):\n        pivot = arr[pivot_index]\n        arr[pivot_index], arr[high] = arr[high], arr[pivot_index]\n        store_index = low - 1\n        for i in range(low, high):\n            if arr[i] < pivot:\n                store_index += 1\n                swap(arr, store_index, i)\n        arr[store_index + 1], arr[high] = arr[high], arr[store_index + 1]\n        return store_index + 1\n\n    # function to sort an array\n    def sort_array(arr, low, high):\n        if low < high:\n            pivot_index = (low + high) // 2\n            pivot_index = partition(arr, low, high, pivot_index)\n            sort_array(arr, low, pivot_index - 1)\n            sort_array(arr, pivot_index + 1, high)\n\n    # function to re-arrange the array\n    def rearrange(arr, low, high):\n        if low < high:\n            neg_count = 0\n            for i in range(low, high):\n                if arr[i] < 0:\n                    neg_count += 1\n                else:\n                    if neg_count > 0:\n                        swap(arr, i, low + neg_count)\n                        neg_count -= 1\n            rearrange(arr, low + neg_count, high)\n\n    # sort the first n elements of the array\n    sort_array(arr, 0, n - 1)\n\n    # re-arrange the remaining elements of the array\n    rearrange(arr, n, len(arr) - 1)\n\n    # print the re-arranged array\n    print(\"Re-arranged array:\", arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negative = []\n    positive = []\n    zero = []\n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        elif num > 0:\n            positive.append(num)\n        else:\n            zero.append(num)\n\n    re_arranged_arr = negative + positive + zero\n    return re_arranged_arr[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    # create two empty lists for negative and positive elements\n    negative = []\n    positive = []\n    \n    # loop through the input array and add elements to the appropriate list\n    for element in arr:\n        if element < 0:\n            negative.append(element)\n        else:\n            positive.append(element)\n    \n    # loop through the input array again and add the negative elements to the beginning of the output array\n    for element in negative + positive:\n        if element < 0:\n            arr.insert(0, element)\n        else:\n            arr.append(element)\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes an array and an integer n as input, and re-arranges the first n elements of the array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # Define the two empty lists to store negative and positive elements\n    negative_list = []\n    positive_list = []\n    \n    # Iterate over the array and append elements to the respective lists\n    for i in range(n):\n        if arr[i] < 0:\n            negative_list.append(arr[i])\n        else:\n            positive_list.append(arr[i])\n    \n    # Iterate over the remaining elements of the array and append them to the end of the positive list\n    for i in range(n, len(arr)):\n        positive_list.append(arr[i])\n    \n    # Combine the two lists and return the final result\n    return negative_list + positive_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize the negative and positive index variables\n    neg_index = 0\n    pos_index = n\n\n    # Iterate through the array and swap elements at the negative and positive indices\n    for i in range(n):\n        if arr[i] < 0:\n            arr[neg_index], arr[i] = arr[i], arr[neg_index]\n            neg_index += 1\n        else:\n            arr[pos_index], arr[i] = arr[i], arr[pos_index]\n            pos_index += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = 0\n    neg = 0\n    for i in range(n):\n        if arr[i] > 0:\n            pos += 1\n        elif arr[i] < 0:\n            neg += 1\n    while pos > 0:\n        arr[neg], arr[n-pos] = arr[n-pos], arr[neg]\n        neg += 1\n        pos -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Create two empty lists for negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # Iterate over the first n elements of the array and categorize them\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n            \n    # Iterate over the remaining elements of the array and move them to their corresponding list\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            pos_list.insert(0, arr[i])\n        else:\n            neg_list.insert(0, arr[i])\n            \n    # Re-combine the two lists and return the result\n    return neg_list + pos_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Sort the array in ascending order\n    sorted_arr = sorted(arr)\n\n    # Initialize variables to keep track of the indices of negative and positive elements\n    negative_index = 0\n    positive_index = n\n\n    # Iterate through the sorted array\n    for i in range(n):\n        # If the element at the current index is negative, swap it with the element at the negative_index variable\n        if arr[i] < 0:\n            arr[i], arr[negative_index] = arr[negative_index], arr[i]\n            # Increment the negative_index variable\n            negative_index += 1\n        # If the element at the current index is positive, increment the positive_index variable\n        else:\n            positive_index += 1\n\n    # Return the sorted array\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    # Replace all spaces in the string with the given character\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Replace blank spaces in a string with the given character and return the modified string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i]!= \" \":\n            new_str += str1[i]\n        else:\n            new_str += char\n\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # convert the character to a list of characters\n    char_list = list(char)\n    # loop through the string and replace blank spaces with the character\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1 = str1[:i] + char_list[0] + str1[i+1:]\n    # return the modified string\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    larg_list = []\n    for i in range(n):\n        larg_list.append(heapq.heappop(list1))\n    return larg_list"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Using heapq module to get the n largest items from the list\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Converting the heap to a list and returning it\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        heap = []\n        for i in range(n):\n            heapq.heappush(heap, -list1[i])\n        return [-x for x in heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heap[0]] * n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a min heap to find the n largest items\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        # If the heap size exceeds n, remove the smallest item\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Convert the heap to a list and return it\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n\n    Args:\n        list1 (list): The input list.\n        n (int): The number of largest items to return.\n\n    Returns:\n        list: A list containing the n largest items from the input list.\n    \"\"\"\n    # Use a max heap to store the n largest items from the list\n    max_heap = []\n    for item in list1:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, item)\n        else:\n            if item > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, item)\n\n    # Convert the max heap back to a list and return it\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a min heap to keep track of the n largest numbers\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -list1[i])\n    # Remove the smallest number from the heap and add it to the result list\n    result = []\n    while heap:\n        result.append(-heapq.heappop(heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # initialize an empty list to store the n largest numbers\n    n_largest = []\n    # initialize a min heap to store the first n numbers from the list\n    min_heap = []\n    # loop through the list of numbers and add them to the min heap\n    for num in list1:\n        heapq.heappush(min_heap, num)\n        # if the heap size exceeds n, remove the smallest number from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # loop through the min heap and add the n largest numbers to the n_largest list\n    for num in min_heap:\n        n_largest.append(num)\n    # return the n largest numbers in a list\n    return n_largest"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*r**2*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2*math.pi*(r**2+h**2)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = (2*math.pi*r**2)+(2*math.pi*h*r)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r**2 + 2*math.pi*h*r\n    \n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    \"\"\"\n    This function calculates the lateral surface area of a cylinder using the formula:\n    \n    lateral surface area = 2*pi*(r**2 + h**2)\n    \n    where r is the radius of the cylinder and h is its height.\n    \n    Parameters:\n    r (float): the radius of the cylinder\n    h (float): the height of the cylinder\n    \n    Returns:\n    float: the lateral surface area of the cylinder\n    \n    \"\"\"\n    lateral_surface_area = 2*math.pi*(r**2 + h**2)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*r*h\n    print(\"The lateral surface area of the cylinder is:\", area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cylinder with\n    radius r and height h.\n    \"\"\"\n    return 2 * 3.14 * r**2 * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h + 2 * r * r"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*3.14159*(r**2)) + (2*3.14159*h*r)\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14159265*r*h\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0: \n        return 0\n    else:\n        return n + even_bit_set_number(n & (n-1))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Iterate through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set the corresponding bit in the result\n        if int(bit) == 0:\n            result += int(bit)\n        else:\n            result += 2**(int(bit)-1)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each bit of the given number\n    for i in range(32):\n        # If the i-th bit is even, set the corresponding bit in the result list to 1\n        if (n & (1 << i))!= 0:\n            result.append(1)\n        else:\n            result.append(0)\n\n    # Convert the result list to an integer and return it\n    return int(''.join(str(bit) for bit in result), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to keep track of the number of even bits set\n    count = 0 \n\n    # Loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]: \n        # If the bit is 0, skip it\n        if bit == '0': \n            continue \n        # If the bit is 1, set the even bit to 1 and increment the count\n        else: \n            n |= (1 << int(bit))\n            count += 1 \n\n    # Return the modified number of even bits set\n    return count"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # Convert the bit to an integer and check if it's even\n        if int(bit) % 2 == 0:\n            # If the bit is even, set it to 1 and append it to the result list\n            result.append(1)\n        else:\n            # If the bit is odd, set it to 0 and append it to the result list\n            result.append(0)\n\n    # Convert the result list to an integer and return it\n    return int(''.join(str(bit) for bit in result), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    n_binary = bin(n)[2:]  # Convert decimal to binary\n    n_binary_set = \"\"\n    for i in range(len(n_binary)):\n        if int(n_binary[i]) & 1 == 0:\n            n_binary_set += \"0\"  # Set even bit to 0\n        else:\n            n_binary_set += \"1\"  # Set even bit to 1\n    n_new = int(n_binary_set, 2)  # Convert binary set back to decimal\n    return n_new"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n & 0b1111111100000000)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # iterate over each bit in the binary representation of n\n    for i in range(32): \n        # check if the current bit is even (i.e., divisible by 2)\n        if n & (1 << i): \n            # set the corresponding bit in n to 1 (i.e., set its 'even' bit)\n            n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert binary number to an integer\n    num = int(bin(n)[2:])\n    \n    # Set all even bits to 1\n    num |= num << 1\n    num |= num << 2\n    num |= num << 4\n    num |= num << 8\n    num |= num << 16\n    \n    # Convert the integer back to a binary number\n    binary = bin(num)[2:].zfill(32)\n    \n    # Convert the binary number back to an integer\n    result = int(binary, 2)\n    \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n!= 0:\n        n &= n - 1 # clearing the least significant bit set to 0\n        n += 1 # setting the least significant bit to 1\n    return n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    count_dict = {}\n    for tuple_ in unique_tuples:\n        count_dict[tuple_] = test_list.count(tuple_)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a Counter object from the test_list\n    counter = Counter(test_list)\n\n    # Create a dictionary to store the result\n    result = {}\n\n    # Loop through the Counter object and append the keys and values to the result dictionary\n    for key, value in counter.items():\n        result[key] = value\n\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(sorted(item)))\n    count_dict = Counter(unique_tuples)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list to a set to remove duplicates and then back to a list for the Counter function\n    unique_tuples = list(set(test_list))\n    # Use the Counter function to count the occurrences of each unique tuple\n    occurrences = Counter(unique_tuples)\n    return occurrences"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Using Counter class from the collections module\n    counter = Counter(test_list)\n    # Converting the Counter object to a dictionary\n    result_dict = dict(counter)\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # Use Counter function from collections module to count the occurrences of each tuple\n    count_dict = Counter(unique_tuples)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    # loop through each tuple in the list\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # if it is, increment its count by 1\n            count_dict[tup] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            count_dict[tup] = 1\n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(tuple(sorted(t)) for t in test_list)\n    count_dict = Counter(unique_tuples)\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # initialize an empty list to store the substrings\n    substrings = []\n\n    # loop through each character in the string\n    for i in range(len(str)):\n\n        # check if the substring starting from index i has any non-empty characters\n        if str[i] not in [' ', '\\t', '\\n', '\\r']:\n\n            # if the substring has any non-empty characters, add it to the list\n            substrings.append(str[i:])\n\n    # return the length of the list\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n\n    for i in range(n): \n        for j in range(i+1, n+1): \n            if str[i:j]!= '': \n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    \n    # Iterate over all possible substrings of length 1 to n\n    for i in range(n + 1):\n        \n        # Check if the substring is non-empty\n        if i == 0 or i == n + 1 or str[i - 1]!= str[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize a dictionary to store the count of each substring\n    count_dict = {}\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # If the current character is not a space\n        if str[i]!='':\n            # Get the substring starting from the current character and add it to the dictionary\n            count_dict[str[i:].replace(' ', '')] = count_dict.get(str[i:].replace(' ', ''), 0) + 1\n\n    # Count the number of non-empty substrings in the dictionary\n    count = 0\n    for i in count_dict.values():\n        if i > 0:\n            count += i\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if str[i:j] and str[i:j].strip(): \n                count += 1 \n    return count "
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j].strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize variables\n    count = 0\n    prev = 1\n\n    # Loop through all possible sequence lengths from 1 to n\n    for i in range(1,n+1):\n        # Generate all possible sequences of length i\n        for j in range(1,m):\n            if j >= 2*prev and j <= m:\n                count += 1\n\n        # Update the previous element for the next iteration\n        prev = j\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate through the range of values for n\n    for i in range(1, n+1):\n\n        # Initialize the current sequence as an empty list\n        current_sequence = []\n\n        # Iterate through the range of values for i\n        for j in range(i):\n\n            # Check if the current value is greater than or equal to twice the previous value and less than or equal to m\n            if j >= 2 and j < m:\n                current_sequence.append(j)\n\n        # Check if the current sequence is a valid sequence\n        if current_sequence == sorted(current_sequence) and sorted(current_sequence)[0] < n:\n            count += 1\n\n    # Return the total count of valid sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(m+1):\n        if i < n:\n            count += 1\n    for i in range(m+1, 2*m+1):\n        if i < n and (i-m) % 2 == 0:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(prev, curr):\n        if curr == 1:\n            return 1\n        elif curr % 2 == 0 and curr >= 2 * prev:\n            return prev + helper(prev, curr // 2)\n        else:\n            return helper(curr, prev)\n\n    return helper(m, 1)\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Create a list to store the previous elements\n    prev_elements = [0] * n\n    \n    # Initialize the first element of the sequence as 2\n    first_element = 2\n    \n    # Initialize the total number of sequences to 1\n    total_number_of_sequences = 1\n    \n    # Loop through each element of the sequence\n    for i in range(n):\n        \n        # If the current element is greater than or equal to twice the previous element and less than or equal to m, increment the total number of sequences\n        if i == 0 or first_element + prev_elements[i-1] >= 2 * prev_elements[i-1] and first_element + prev_elements[i-1] <= m:\n            total_number_of_sequences += 1\n        \n        # Calculate the next element of the sequence by adding the previous element to m\n        first_element = first_element + prev_elements[i-1]\n        \n        # Add the previous element to the list of previous elements\n        prev_elements[i] = first_element\n    \n    # Return the total number of sequences\n    return total_number_of_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n):\n    # Initialize the number of sequences to 0\n    count = 0\n    \n    # Initialize the previous sequence to None\n    prev_seq = None\n    \n    # Generate all possible sequences of length n\n    for i in range(n+1):\n        # Generate all possible sequences of length i using the previous sequence\n        for seq in generate_sequences(prev_seq, i, m):\n            # Update the count if the sequence meets the conditions\n            if all(x > 2*prev_seq[0] and x <= m for x in seq):\n                count += 1\n                \n        # Update the previous sequence\n        prev_seq = prev_seq + (i,)*i\n    \n    # Return the final count\n    return count\n\ndef generate_sequences(prev_seq, length, m):\n    # Initialize the sequence to the first element of the previous sequence\n    seq = [prev_seq[0]]\n    \n    # Generate all possible sequences of length length using the previous sequence\n    for i in range(1, length):\n        # Generate all possible values for the next element in the sequence using the current element and the last element of the previous sequence\n        for x in range(seq[-1]+1, m+1):\n            # Add the next element to the sequence and generate the rest of the sequence using the remaining elements in the previous sequence\n            seq.append(x)\n            new_seq = generate_sequences(seq[:-1], length-1, m)\n            for new_seq_i in new_seq:\n                yield new_seq_i\n            seq.pop()\n    \n    # Return the final sequence of length length\n    return seq"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the number of sequences to 0\n    num_sequences = 0\n    \n    # Initialize the last element to 0\n    prev_element = 0\n    \n    # Initialize a counter for the number of sequences ending with the last element\n    end_sequence_count = 0\n    \n    # Iterate through all elements from 2 to m\n    for i in range(2, m+1):\n        \n        # Check if the current element is greater than the previous element\n        if i <= 2*prev_element:\n            continue\n        \n        # If the current element is greater than or equal to twice the previous element,\n        # update the end sequence count and set the last element to the current element\n        end_sequence_count += 1\n        prev_element = i\n        \n        # If the current element is greater than or equal to twice the previous element and less than or equal to m,\n        # increment the number of sequences by the number of end sequences\n        if i <= 2*prev_element and i <= m:\n            num_sequences += end_sequence_count\n            \n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid(seq):\n        prev = float('-inf')\n        for i in range(len(seq)):\n            if seq[i] < 2 * prev:\n                return False\n            prev = seq[i]\n        return True\n\n    count = 0\n    for i in range(m, n + 1):\n        seq = [i]\n        while len(seq) < n and is_valid(seq):\n            prev = seq[-1]\n            seq.append(prev + 1)\n        count += len(seq) - 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Define the helper function\n    def is_valid(a, b):\n        return a >= 2 * b and a <= m\n\n    # Helper function to calculate the number of sequences\n    def count_sequences(seq, n):\n        if n == 0:\n            return 1\n        else:\n            count = 0\n            for i in range(len(seq)):\n                for j in range(i+1, len(seq)+1):\n                    count += count_sequences(seq[:i] + seq[j:], n-1)\n            return count\n\n    # Initialize the result variable\n    total_sequences = 0\n\n    # Iterate through the numbers from 1 to m\n    for i in range(1, m+1):\n        # Create a list of all possible sequences of length n\n        sequences = [[i]]\n        for j in range(n-1):\n            valid_sequences = []\n            for a in range(1, i):\n                if is_valid(a, i):\n                    valid_sequences.append(a)\n            sequences.append(valid_sequences)\n\n        # Calculate the total number of sequences\n        total_sequences += count_sequences(sequences, n)\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    def is_valid_sequence(sequence):\n        \"\"\"\n        Checks whether a sequence is valid or not. A valid sequence is defined as:\n        1. The first element should be greater than or equal to 2*previous_element.\n        2. The last element should be less than or equal to m.\n        3. Each element in the sequence should be greater than or equal to 2*previous_element and less than or equal to m.\n        \"\"\"\n        if len(sequence)!= n:\n            return False\n\n        previous_element = sequence[0]\n        for i in range(1, n):\n            current_element = sequence[i]\n            if (2 * current_element) < previous_element:\n                return False\n            elif current_element > m:\n                return False\n            previous_element = current_element\n\n        return True\n\n    def get_combinations(n, m):\n        \"\"\"\n        Returns all possible combinations of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n        \"\"\"\n        sequence = [2 * previous_element for previous_element in range(1, m + 1)]\n        result = []\n        for i in range(m - 2, -1, -1):\n            for j in range(i + 1, m):\n                sequence[i], sequence[j] = sequence[j], sequence[i]\n                if is_valid_sequence(sequence[:i] + [sequence[i]] + sequence[i + 1:]):\n                    result.append(tuple(sequence[:i] + [sequence[i]] + sequence[i + 1:]))\n        return result\n\n    total_combinations = sum(1 for _ in get_combinations(n, m))\n    return total_combinations"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check if the lengths of the two lists are equal\n    if len(list1)!= len(list2):\n        print(\"The two lists must have the same length.\")\n        return\n    \n    # replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n    \n    # print the modified list\n    print(list1)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length1 = len(list1)\n    \n    # Loop through the list from the end to the second element\n    for i in range(length1-2, -1, -1):\n        list1[i] = list2\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    # Check if the lists have the same length\n    if len(list1)!= len(list2):\n        print(\"Lists have different lengths\")\n        return\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n    \n    # Print the updated list\n    print(list1)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # Get the length of the first list\n    length = len(list1)\n\n    # Check if the length of the second list is greater than or equal to the length of the first list\n    if len(list2) >= length:\n        # Replace the last element of the first list with the elements of the second list\n        list1[-1] = list2\n    else:\n        # If the length of the second list is less than the length of the first list,\n        # raise an error message\n        raise ValueError('The length of the second list must be greater than or equal to the length of the first list.')\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    def is_perfect_square(num):\n        return num == int(math.sqrt(num))**2\n\n    def next_square(num):\n        while True:\n            if is_perfect_square(num):\n                return num\n            num += 1\n\n    return next_square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_perfect_square(num):\n        return num == int(math.sqrt(num))**2\n\n    def is_greater_than_next_square(num):\n        return math.sqrt(num) > math.sqrt(N)\n\n    i = N\n    while True:\n        i += 1\n        if is_perfect_square(i) and is_greater_than_next_square(i):\n            return i\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Convert N to a float and take the square root\n    sqrtN = math.sqrt(float(N))\n    # If the square root is an integer, increment it by 1\n    if sqrtN.is_integer():\n        sqrtN += 1\n    # If the square root is a float, increment it by 0.5 (rounding down)\n    else:\n        sqrtN += 0.5\n    # Convert the square root back to an integer\n    next_sqrtN = int(sqrtN)\n    return next_sqrtN"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math  \n  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Calculate the square root of N\n    sqrt_N = math.sqrt(N)\n    # Round the square root to the nearest integer\n    sqrt_N = int(sqrt_N + 0.5)\n    # Calculate the next perfect square\n    next_sqrt_N = sqrt_N * sqrt_N\n    # Check if the next perfect square is greater than N\n    while next_sqrt_N > N:\n        # Increment the square root\n        sqrt_N += 1\n        # Recalculate the next perfect square\n        next_sqrt_N = sqrt_N * sqrt_N\n    # Return the next perfect square\n    return next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 1:\n        return 1\n    \n    def is_perfect_square(num):\n        \"\"\"\n        Helper function to check if a number is a perfect square or not.\n        \"\"\"\n        root = math.sqrt(num)\n        return root == int(root)\n    \n    def next_square(num):\n        \"\"\"\n        Helper function to find the next perfect square number greater than a given number.\n        \"\"\"\n        square = int(num ** 0.5)\n        while square * square <= num:\n            square += 1\n        return square\n    \n    next_square_num = next_square(N)\n    while not is_perfect_square(next_square_num):\n        next_square_num = next_square(next_square_num)\n    \n    return next_square_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function finds the next perfect square greater than a given number N.\n    '''\n    sqrt_N = math.sqrt(N)\n    if sqrt_N.is_integer():\n        sqrt_N += 1\n    else:\n        sqrt_N += 0.5\n    square_N = sqrt_N * sqrt_N\n    while square_N > N:\n        sqrt_N += 1\n        square_N = sqrt_N * sqrt_N\n    return int(math.sqrt(square_N))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        x = N + 1\n        y = int(math.sqrt(x))\n        if y*y == x:\n            return y + 1\n        else:\n            x -= 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    def is_square(num):\n        return num == int(math.sqrt(num))**2\n\n    if is_square(N):\n        return N\n    else:\n        for i in range(N, 1, -1):\n            if is_square(i):\n                return i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N <= 1:\n        return N\n\n    x = N\n    while True:\n        x = x + 1\n        if isPerfectSquare(x):\n            return x\n\ndef isPerfectSquare(num):\n    \"\"\"\n    A helper function to check if a number is a perfect square.\n    \"\"\"\n    return math.sqrt(num) == int(math.sqrt(num))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N as input and returns the next perfect square greater than N.\n\n    The next perfect square greater than a given number N is the smallest perfect square greater than N that is also a perfect square.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        This function takes a number as input and returns True if it is a prime number and False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_next_prime(num):\n        \"\"\"\n        This function takes a number as input and returns True if it is the next prime number and False otherwise.\n        \"\"\"\n        next_num = num + 1\n        while next_num < 10000000:\n            if is_prime(next_num):\n                return True\n            next_num += 1\n        return False\n\n    def next_prime(num):\n        \"\"\"\n        This function takes a number as input and returns the next prime number greater than the given number.\n        \"\"\"\n        next_num = num + 1\n        while is_prime(next_num) == False:\n            next_num += 1\n        return next_num\n\n    def next_perfect_square(N):\n        \"\"\"\n        This function takes a number N as input and returns the next perfect square greater than N.\n        \"\"\"\n        num = N\n        while True:\n            num += 1\n            if num**2 > N:\n                return num\n\n    if N == 0:\n        return 1\n\n    if is_prime(N):\n        return next_perfect_square(N)\n\n    if is_next_prime(N):\n        return N\n\n    return next_prime(N)\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Base case\n    if len(arr) <= 1:\n        return 0\n    \n    # Initialize variables\n    i = 0\n    j = 1\n    max_sum_inc = max_sum_dec = float('-inf')\n    max_sum_inc_curr = max_sum_dec_curr = 0\n    \n    while j < len(arr):\n        if arr[i] < arr[j]:\n            # Check if the current subsequence is increasing and update the maximum sum\n            if arr[j] > max_sum_inc_curr:\n                max_sum_inc_curr = arr[j]\n            else:\n                max_sum_inc_curr += arr[j]\n        else:\n            # Check if the current subsequence is decreasing and update the maximum sum\n            if arr[j] < max_sum_dec_curr:\n                max_sum_dec_curr = arr[j]\n            else:\n                max_sum_dec_curr += arr[j]\n        \n        # Update the maximum sum for the current subsequence\n        if arr[i] <= arr[j]:\n            max_sum_inc = max(max_sum_inc, max_sum_inc_curr)\n            max_sum_dec = max(max_sum_dec, max_sum_dec_curr)\n            i += 1\n            max_sum_inc_curr = max_sum_dec_curr = 0\n            j += 1\n        else:\n            max_sum_inc = max(max_sum_inc, max_sum_inc_curr)\n            max_sum_dec = max(max_sum_dec, max_sum_dec_curr)\n            j += 1\n            max_sum_inc_curr = max_sum_dec_curr = 0\n            \n    # Update the maximum sum for the last subsequence\n    if arr[i] < arr[j]:\n        if arr[j] > max_sum_inc_curr:\n            max_sum_inc_curr = arr[j]\n        else:\n            max_sum_inc_curr += arr[j]\n    else:\n        if arr[j] < max_sum_dec_curr:\n            max_sum_dec_curr = arr[j]\n        else:\n            max_sum_dec_curr += arr[j]\n    max_sum_inc = max(max_sum_inc, max_sum_inc_curr)\n    max_sum_dec = max(max_sum_dec, max_sum_dec_curr)\n    \n    return max(max_sum_inc, max_sum_dec)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Find the maximum sum of a bitonic subsequence in the given array.\n\n    :param arr: input array\n    :return: maximum sum of a bitonic subsequence in the array\n    \"\"\"\n    # initialize variables to keep track of the current and previous values\n    current_val = arr[0]\n    prev_val = arr[0]\n    max_sum = current_val\n\n    for i in range(1, len(arr)):\n        # check if the current value is increasing\n        if arr[i] > prev_val:\n            # if so, update the current and previous values\n            current_val = arr[i]\n            prev_val = arr[i - 1]\n        else:\n            # if not, update the previous value and subtract the current value from the maximum sum\n            prev_val = arr[i]\n            max_sum = max(max_sum, current_val - prev_val)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables\n    n = len(arr)\n    max_sum = arr[0]\n    curr_sum = arr[0]\n    increasing = True\n    \n    # Check for increasing subsequence\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            curr_sum += arr[i]\n            increasing = True\n        elif arr[i] > arr[i-1]:\n            curr_sum -= arr[i-1]\n            increasing = False\n        if increasing:\n            max_sum = max(max_sum, curr_sum)\n    \n    # Check for decreasing subsequence\n    curr_sum = arr[n-1]\n    for i in range(n-2, -1, -1):\n        if arr[i] > arr[i+1]:\n            curr_sum += arr[i]\n            increasing = True\n        elif arr[i] < arr[i+1]:\n            curr_sum -= arr[i+1]\n            increasing = False\n        if not increasing:\n            max_sum = max(max_sum, curr_sum)\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # Handle empty array\n    if n == 0:\n        return 0\n\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize variables\n    left_sum = 0\n    right_sum = 0\n\n    # Iterate through the sorted array\n    for i in range(n):\n        # Calculate the sum of the left subarray\n        left_sum += arr[i]\n\n        # If the sum is positive, it means the sequence is decreasing\n        if left_sum > right_sum:\n            right_sum = left_sum\n\n        # Calculate the sum of the right subarray\n        right_sum -= arr[n - 1 - i]\n\n        # If the sum is negative, it means the sequence is increasing\n        if left_sum < right_sum:\n            left_sum = right_sum\n\n    return left_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # Initialize variables to keep track of the current and previous subsequences\n    prev_seq = []\n    curr_seq = []\n    curr_sum = 0\n\n    # Iterate through the input array and check if the current element is decreasing\n    for i, num in enumerate(arr):\n        if i > 0:\n            if num < arr[i - 1]:\n                # Check if the current subsequence is increasing and has a higher sum than the previous one\n                if curr_sum > prev_sum:\n                    # If so, update the previous subsequence and the sum\n                    prev_seq = curr_seq\n                    prev_sum = curr_sum\n                # Reset the current subsequence and sum\n                curr_seq = [num]\n                curr_sum = num\n            else:\n                curr_seq.append(num)\n                curr_sum += num\n\n    # Check if the current subsequence is increasing and has a higher sum than the previous one\n    if curr_sum > prev_sum:\n        # If so, update the previous subsequence and the sum\n        prev_seq = curr_seq\n        prev_sum = curr_sum\n\n    # Return the maximum sum of the bitonic subsequence\n    return max(prev_sum, curr_sum)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    increasing = True\n\n    # Loop through the array\n    for num in arr:\n        # If the number is increasing, add it to the sum\n        if increasing:\n            current_sum += num\n        # If the number is decreasing, subtract it from the sum\n        else:\n            current_sum -= num\n        # Update the increasing state based on the sum\n        if increasing:\n            increasing = current_sum >= 0\n        else:\n            increasing = current_sum < 0\n        # Update the maximum sum based on the increasing state\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables for the maximum sum and the current sum\n    max_sum = arr[0]\n    current_sum = arr[0]\n    \n    # Loop through the array\n    for i in range(1, len(arr)):\n        \n        # If the current element is greater than the next element\n        if arr[i] > arr[i+1]:\n            \n            # Update the current sum\n            current_sum += arr[i]\n        \n        # If the current element is less than the next element\n        else:\n            \n            # If the current sum is greater than the maximum sum so far\n            if current_sum > max_sum:\n                \n                # Update the maximum sum\n                max_sum = current_sum\n            \n            # Reset the current sum to 0\n            current_sum = arr[i]\n    \n    # If the current sum is greater than the maximum sum so far\n    if current_sum > max_sum:\n        \n        # Update the maximum sum\n        max_sum = current_sum\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # If the array is already sorted, then return the maximum sum\n    if arr[0] <= arr[1]:\n        return max(arr[0], arr[n - 1])\n\n    # If the array is not sorted, then find the maximum sum of a decreasing subsequence\n    left = 1\n    right = n - 2\n    max_sum = max(arr[0], arr[1])\n    min_sum = min(arr[0], arr[1])\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n            max_sum = max(max_sum, arr[mid])\n            right = mid\n        else:\n            min_sum = min(min_sum, arr[mid])\n            left = mid + 1\n\n    return max(max_sum, min_sum)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            dp[i] = dp[i - 1] + arr[i]\n        else:\n            dp[i] = max(arr[i], arr[i - 1])\n\n    return max(dp)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    if arr[1] < arr[0]:\n        dp[1] = max(arr[0], arr[1])\n    else:\n        dp[1] = arr[1]\n    max_sum = max(dp[1], dp[0])\n    for i in range(2, n):\n        if arr[i] < arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = max(dp[i-1], dp[i])\n        max_sum = max(max_sum, dp[i])\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    x = 1.0\n    y = number/x\n    \n    # iterate until y converges to a precision of 0.00001\n    while abs(y-x) > 0.00001:\n        x = y\n        y = 1/((1/x) + (1/y))\n    \n    # return the final value of x\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1.0\n    while True:\n        # Calculate the next guess\n        new_guess = (guess + number/guess) / 2\n        # Check if the difference between the new and old guesses is less than the desired tolerance\n        if abs(new_guess - guess) < 0.0001:\n            return new_guess\n        # Update the guess\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    else:\n        x = number / 2\n        y = x - (x**2 - number) / (2 * x)\n        while abs(x - y) >= 1e-6:\n            x = y\n            y = x - (x**2 - number) / (2 * x)\n        return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    i = 1\n    guess = 1\n    error = 0.0001\n    while abs(guess**2 - number) >= error:\n        # calculate the new guess\n        guess = (number / guess) + guess / 2\n        i += 1\n    # print the result\n    print(\"The square root of\", number, \"is approximately\", guess)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize variables\n    guess = number / 2\n    previous_guess = guess\n\n    while abs(guess**2 - number) > 0.00001:\n        previous_guess = guess\n        guess = (guess + number / guess) / 2\n\n    return previous_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function computes the square root of a given number using the babylonian method.\n\n    Args:\n    number (float): The number whose square root we want to find.\n\n    Returns:\n    float: The square root of the given number using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes square roots using the babylonian method.\n\n    Args:\n    number (float): a positive number\n\n    Returns:\n    float: the square root of the input number\n    \"\"\"\n    # Compute the initial guess for the square root\n    x0 = 1.0\n\n    # Compute the number of iterations needed to achieve the required accuracy\n    # Note that the number of iterations is a function of the number of bits in the mantissa\n    bits_in_mantissa = 53\n    n = int(bits_in_mantissa * 0.5) + 1\n\n    # Compute the error bound for the square root\n    sqrt_err = 1.0 / n\n\n    # Compute the correction factor for each iteration\n    k = 1.0\n\n    # Compute the new guess for the square root\n    x1 = x0 - (x0**2 - number) / (2.0 * k * (x0 - x1))\n\n    # Loop over the required number of iterations to achieve the required accuracy\n    for i in range(1, n+1):\n        x0 = x1\n        k = 1.0 / k\n        x1 = x0 - (x0**2 - number) / (2.0 * k * (x0 - x1))\n\n        if abs(x1 - x0) <= sqrt_err:\n            break\n\n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize variables\n    x = 1\n    y = (number + 1) // 2\n\n    # Iterate until the difference between x and y is less than or equal to epsilon\n    while abs(x - y) > 1e-10:\n        x = y\n        y = (number / y + y) / 2\n\n    # Return the square root\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess * guess - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Define a tolerance for the algorithm\n    epsilon = 0.0001\n\n    # Set the initial guess for the square root\n    guess = number / 2\n\n    # Initialize variables for iteration\n    i = 0\n    prev_guess = 0.0\n    prev_result = 0.0\n\n    # Iterate until the difference between the guesses is less than epsilon\n    while abs(prev_guess - guess) >= epsilon:\n        prev_guess = guess\n        prev_result = babylonian_square(guess)\n        guess = (number / prev_result) + (prev_guess / prev_result)\n        i += 1\n\n    # Return the final guess as the square root\n    return guess\n\ndef babylonian_square(x):\n    '''\n    Write a function for computing the square of a number using the babylonian method.\n    '''\n    result = x\n    for i in range(1, 100):\n        result += (x / (i + 1))\n    return result"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a table to store the lengths of LPS\n    L = [[0] * n for _ in range(n)]\n\n    # Initialize L[i][j] to 0 if s[i]!= s[j]\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i+1][j], L[i][j-1])\n\n    # Return the length of the LPS\n    return L[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str): \n    # Create a 2D array to store the length of the longest palindromic subsequence ending at each position \n    # in the string. Initialize all elements to 1, except the first and last elements, which are 0 and n-1, \n    # respectively. \n    n = len(str) \n    L = [[1] * n for i in range(n)] \n  \n    # Fill in the array using dynamic programming. \n    for i in range(1, n-1): \n        for j in range(1, n-i-1): \n            if str[j] == str[j+i]: \n                L[j][j+i] = L[j+1][j+i-1] + 2 \n            else: \n                L[j][j+i] = max(L[j+1][j+i], L[j][j+i-1]) \n  \n    # Return the length of the longest palindromic subsequence. \n    return L[0][n-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def longest_palindrome_subsequence(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n    start = 0\n\n    for i in range(n):\n        dp[i][i] = 1\n        if s[i] == s[i+1]:\n            dp[i][i+1] = 2\n            start = i\n            max_len = 2\n\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n                    start = i\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(s):\n    n = len(s)\n    if n < 2:\n        return 0\n\n    # Create a 2D table to store the length of the longest palindromic subsequence for substrings of s\n    table = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and first column of the table\n    for i in range(1, n):\n        table[i][i] = 1\n\n    # Fill the table in bottom-up fashion\n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if s[start] == s[end]:\n                table[start][end] = table[start + 1][end - 1] + 2\n            else:\n                table[start][end] = max(table[start][end - 1], table[start + 1][end])\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n    start = 0\n    \n    for i in range(n): \n        if i == 0 or str[i] == str[i-1]: \n            dp[i][i] = 1\n            max_len = 1\n            start = i\n        else: \n            for j in range(i-1, -1, -1): \n                if str[i] == str[j]: \n                    dp[j][i] = dp[j+1][i-1] + 2\n                    if dp[j][i] > max_len: \n                        max_len = dp[j][i]\n                        start = j\n                    break\n                \n            if max_len == 1: \n                start = 0\n        \n        if max_len == n: \n            break\n        \n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at each position\n    table = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and the first column of the table with 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill the table using dynamic programming\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n\n    return table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(string):\n    \"\"\"\n    This function finds the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Initialize the length and start index of the longest palindromic subsequence as 1\n    max_length = 1\n    start = 0\n\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # Calculate the end index of the current substring\n        end = i\n\n        # Initialize a boolean variable to check if the current substring is a palindrome\n        is_palindrome = True\n\n        # Loop through each character from the end of the current substring\n        while end < len(string) and string[end] == string[end - max_length]:\n            # If the current character is not a palindrome, set the boolean variable to False and break out of the loop\n            if string[end]!= string[end - max_length]:\n                is_palindrome = False\n                break\n            end += 1\n\n        # If the current substring is a palindrome and its length is greater than the current longest palindromic subsequence, update the values\n        if is_palindrome and end - start + 1 > max_length:\n            max_length = end - start + 1\n            start = i - (max_length // 2)\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    # Initialize LPS array\n    LPS = [0] * n\n\n    # Find LPS for odd length strings\n    for i in range(1, n, 2):\n        if str[i] == str[i - 1]:\n            LPS[i] = LPS[i - 1] + 1\n        else:\n            LPS[i] = 0\n\n    # Find LPS for even length strings\n    for i in range(0, n - 1, 2):\n        if str[i] == str[i + 1]:\n            LPS[i] = LPS[i + 1] + 2\n        elif str[i] == str[i - 1]:\n            LPS[i] = LPS[i - 1] + 1\n        else:\n            LPS[i] = max(LPS[i - 1], LPS[i + 1])\n\n    return LPS[-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at each position\n    table = [[0 for j in range(n)] for i in range(n)]\n    \n    # Initialize the first row and column with 1 (the longest palindromic subsequence is always a single character)\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill in the rest of the table recursively\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a 2D table to store the length of longest palindromic subsequences of substrings of the string\n    lps_table = [[0] * n for i in range(n)]\n\n    # Initialize LPS lengths for every possible substring\n    for i in range(n):\n        lps_table[i][i] = 1\n\n    # Fill LPS lengths in bottom up manner\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                lps_table[i][j] = 2 + lps_table[i + 1][j - 1]\n            else:\n                lps_table[i][j] = max(lps_table[i + 1][j], lps_table[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return lps_table[0][n - 1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return (1/n + 1/n**2 + 1/n**3 +... + 1/n**(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/(n-1)) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n + 1/n-1) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum_ = 0\n    for i in range(1, n+1):\n        sum_ += 1/i\n    return sum_"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (1/n) + (harmonic_sum(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # initialize sum variable\n    sum_n = 0\n\n    # loop from 1 to n-1\n    for i in range(1, n):\n        # calculate harmonic sum\n        sum_n += 1.0 / i\n\n    # return the harmonic sum\n    return sum_n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += 1/i\n    return result"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize the sum of harmonic series to 0\n    harmonic_sum = 0\n    \n    # Loop through each term in the series and add the harmonic series of each term to the sum\n    for i in range(1, n+1):\n        harmonic_series = 1/i\n        harmonic_sum += harmonic_series\n        \n    # Return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n\n    # calculate the sum of harmonic series\n    harmonic_sum = 0\n    for i in range(n-1):\n        harmonic_sum += 1/i\n\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection_list = []\n\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection_list:\n            intersection_list.append(num)\n\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create an empty list to store the common elements\n    common_elements = []\n\n    # iterate through the first array\n    for num1 in array_nums1:\n        # iterate through the second array\n        for num2 in array_nums2:\n            # check if the numbers are equal and not already in the common_elements list\n            if num1 == num2 and num1 not in common_elements:\n                # add the number to the common_elements list\n                common_elements.append(num1)\n\n    # return the common_elements list\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    common_nums = []\n\n    # Loop through the first array\n    for num in array_nums1:\n        # Check if the number exists in the second array\n        if num in array_nums2:\n            # If it does, add it to the common_nums list\n            common_nums.append(num)\n\n    # Return the list of common numbers\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a dictionary to store the frequency of each element in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # create an empty list to store the intersection of the two arrays\n    intersection = []\n    \n    # iterate through the elements of array_nums2 and check if they exist in the dictionary\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            # add the element to the intersection list and decrease its frequency in the dictionary\n            intersection.append(num)\n            freq_dict[num] -= 1\n    \n    # return the intersection of the two arrays\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Create a set from array_nums1\n    set1 = set(array_nums1)\n\n    # Create a set from array_nums2\n    set2 = set(array_nums2)\n\n    # Find the intersection of the two sets using the & operator\n    intersect = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersect)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create two dictionaries to store the counts of each element in array_nums1 and array_nums2\n    dict1 = {}\n    dict2 = {}\n    for num in array_nums1:\n        if num in dict1:\n            dict1[num] += 1\n        else:\n            dict1[num] = 1\n    for num in array_nums2:\n        if num in dict2:\n            dict2[num] += 1\n        else:\n            dict2[num] = 1\n\n    # Find the intersection of the two dictionaries\n    intersection = []\n    for key in dict1:\n        if key in dict2 and dict1[key] > 0 and dict2[key] > 0:\n            intersection.append(key)\n            dict1[key] -= 1\n            dict2[key] -= 1\n\n    # Sort the intersection list in ascending order\n    intersection.sort()\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set of the elements of the first array\n    set_nums1 = set(array_nums1)\n    # Create a set of the elements of the second array\n    set_nums2 = set(array_nums2)\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert the arrays to sets to remove duplicates\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    # Find the intersection of the sets using the intersection() method\n    intersection = set1.intersection(set2)\n    # Convert the intersection back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Loop through each element in the list and insert the element before it\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        else:\n            result.append(list[i-1])\n    result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [elem] + lst + [elem]"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(lst,elem):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    '''\n    return [elem] + lst + [elem]"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.extend(list[:i])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes in a list of complex numbers as input and converts them to polar coordinates.\n    '''\n    # Iterate through each complex number in the list\n    for num in numbers:\n        # Calculate the magnitude and phase of the complex number\n        magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n        phase = cmath.phase(num)\n        \n        # Calculate the radius and angle of the polar coordinate\n        radius = magnitude\n        angle = cmath.degrees(phase)\n        \n        # Print the polar coordinate in the format \"radius angle\"\n        print(radius, angle)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n\n    polar_coordinates = []\n\n    for number in numbers:\n        if isinstance(number, complex):\n            r = abs(number)\n            theta = cmath.phase(number)\n            polar_coordinates.append((r, theta))\n        else:\n            polar_coordinates.append(number)\n\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        result.append((real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Extract the real and imaginary parts of the complex number\n        real, imag = cmath.rect(num)\n        # Compute the magnitude and phase of the complex number\n        mag = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(num)\n        # Print the polar coordinates of the complex number\n        print(f\"({real}, {imag}) with magnitude {mag:.2f} and phase {phase:.2f}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    # iterate through each number in the list\n    for num in numbers:\n        # check if the number is a complex number\n        if isinstance(num, complex):\n            # convert the complex number to polar coordinates\n            r = cmath.sqrt(num.real**2 + num.imag**2)\n            theta = cmath.phase(num)\n            # print the polar coordinates\n            print(f\"r = {r}, theta = {theta}\")\n        else:\n            print(f\"Error: {num} is not a complex number\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n        angle = cmath.phase(num)\n        # Create a tuple of the polar coordinates\n        polar = (magnitude, angle)\n        result.append(polar)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n\n    Parameters:\n    numbers: list or tuple of complex numbers\n    \n    Returns:\n    list or tuple of polar coordinates in the form (magnitude, angle)\n    '''\n    polar_coords = []\n    for num in numbers:\n        magnitude = abs(num)\n        angle = cmath.phase(num)\n        polar_coords.append((magnitude, angle))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Convert complex numbers to polar coordinates.\n\n    Args:\n        numbers (list): a list of complex numbers to convert\n\n    Returns:\n        list: the list of polar coordinates, where each coordinate is a tuple (r, theta)\n    '''\n    polar = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar.append((r, theta))\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_list = []\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(num)\n        phi = cmath.phase(num)\n        \n        # Append the polar coordinates to a list\n        polar_list.append((r, phi))\n        \n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:  \n        # converting the complex number to polar coordinates  \n        r = abs(num)  \n        theta = cmath.phase(num)  \n  \n        # printing the polar coordinates of the complex number  \n        print(\"({}, {})\".format(r, theta))"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if len(l[i:j]) == n:\n                result.append((l[i], l[i+1]))\n                for k in range(i+2, len(l)+1):\n                    if len(l[i:k]) == n:\n                        result.append((l[i], l[k]))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combination = tuple(l[i:i+n])\n        combinations.append(combination)\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = list(combinations_with_replacement(l, n))\n    return comb"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    \"\"\"\n    Generate all combinations (with repetition) of the elements of the list and return a list with a tuple for each combination.\n    \"\"\"\n    # Generate all possible combinations of length n with repetition\n    comb = combinations_with_replacement(l, n)\n    \n    # Convert each combination to a tuple\n    return tuple(comb)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all possible combinations of length n with replacement\n    comb_list = combinations_with_replacement(l, n)\n    # Convert each combination into a tuple\n    comb_tuples = [(x,) for x in comb_list]\n    return comb_tuples"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Counts the number of prime numbers less than the given non-negative number\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0\n    num = 2\n\n    while num < n:\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number n and returns the number of prime numbers less than n.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num1 = max(test_tup1)\n    max_num2 = max(test_tup2)\n    max_num = max(max_num1, max_num2)\n    return (max_num1, max_num2, max_num)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Define a function to compare two tuples\n    def compare_tuples(t1, t2):\n        return sum(t1) > sum(t2)\n\n    # Call the compare_tuples function and print the result\n    result = compare_tuples(test_tup1, test_tup2)\n    if result:\n        print(f\"The first tuple ({test_tup1}) is the maximum.\")\n    else:\n        print(f\"The second tuple ({test_tup2}) is the maximum.\")"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    # Convert tuples to lists for comparison\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Loop through the list and find the maximum element\n    for i in range(len(list1)):\n        if list1[i] < list2[i]:\n            list2[i], list1[i] = list1[i], list2[i]\n\n    # Convert the lists back to tuples and return\n    return tuple(list1), tuple(list2)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize count and number of digits\n    count = 0\n    num_digits = len(str(n))\n\n    # Iterate through all possible primes up to the square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        # Check if i is a prime and has the same number of digits as n\n        if is_prime(i) and len(str(i)) == num_digits:\n            count += 1\n            if count == n:\n                return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 2\n    prime = True\n    while prime:\n        if i % 2 == 0:\n            prime = False\n        else:\n            j = 3\n            while j <= int(i**0.5):\n                if i % j == 0:\n                    prime = False\n                    break\n                j += 2\n            if prime:\n                print(i)\n                if n == 1:\n                    return i\n                n -= 1\n        i += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 3 # Start with the first prime number\n    count = 0 # Keep track of the number of primes we've found so far\n    while count < n:\n        is_prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n            if count == n:\n                return p\n        p += 2 # Try the next odd prime number"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function finds the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        Helper function to check if a number is prime.\n        \"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def next_prime(n):\n        \"\"\"\n        Helper function to find the next prime number after n.\n        \"\"\"\n        while True:\n            n += 1\n            if is_prime(n):\n                return n\n    \n    # find the next prime number after 1\n    i = 1\n    while not is_prime(i):\n        i += 1\n    next_prime = next_prime(i)\n    \n    # find the nth prime number\n    count = 0\n    prime = next_prime\n    while count < n - 1:\n        count += 1\n        next_prime = next_prime + 1\n        if is_prime(next_prime):\n            prime = next_prime\n    \n    # return the nth prime number\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # Define a composite function\n    def is_composite(n):\n        if n < 2:\n            return True\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n    \n    # Find the $n$-th prime composite number\n    for i in range(1, n+1):\n        if is_composite(i) and is_prime(i):\n            return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define a function to check whether a number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Define a function to generate the nth Newman-Shanks-Williams prime number\n    def nth_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num\n    \n    # Call the nth_prime function to find the nth prime number\n    nth_prime_num = nth_prime(n)\n    \n    # Print the result\n    print(\"The\", n, \"th newman-shanks-williams prime number is:\", nth_prime_num)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        '''\n        A helper function to check if a number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    current = 2\n    while count < n:\n        if is_prime(current):\n            count += 1\n        current += 1\n    \n    return current - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 1\n    i = 1\n    \n    while count < n:\n        if is_prime(i) and is_prime(i+1):\n            count += 1\n        i += 2\n        \n    return i-1\n\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_set = {2, 3}\n    i = 5\n    while len(prime_set) < n:\n        prime_set.add(i)\n        i += 2\n    return prime_set.pop()"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a list to store the prime numbers\n    primes = []\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    # Check if n is greater than 0\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    # Check if n is a valid input for the function\n    if n > 2000000:\n        raise ValueError(\"Input must be less than or equal to 2000000.\")\n    # Iterate from 2 to n-1\n    for num in range(2, n+1):\n        # Check if num is a prime number\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        # If num is prime, add it to the list of primes\n        if is_prime:\n            primes.append(num)\n            # If the length of the list of primes exceeds n, break the loop\n            if len(primes) == n:\n                break\n    # Return the nth prime number in the list of primes\n    return primes[n-1]"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Perform element-wise division across the two tuples\n    result_tup = tuple(x/y for x, y in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            result_tup.append('Cannot divide by zero')\n        else:\n            result_tup.append(test_tup1[i] / test_tup2[i])\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the input tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length\")\n\n    # Perform element-wise division on the tuples\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] // test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the two input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length\")\n        return\n    \n    # Perform element-wise division operation\n    result_tup = tuple([a / b for a, b in zip(test_tup1, test_tup2)])\n    \n    # Print the result\n    print(\"Resulting tuple:\", result_tup)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            result_tup += (float('nan'),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # initialize an empty list to store the result of the division operation\n    result_lst = []\n\n    # loop through each element in the first tuple and perform the division operation with the corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        result_lst.append(test_tup1[i] / test_tup2[i])\n\n    # return the result of the division operation as a tuple\n    return tuple(result_lst)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    The function returns the resulting lists in a tuple.\n    '''\n    n = len(lst)\n    if L > n:\n        raise ValueError('Length of the second part should be less than or equal to the length of the first part.')\n    return lst[:L], lst[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # check if L is greater than length of the list\n    if L > len(lst):\n        raise ValueError(\"L is greater than length of the list\")\n    # create a new list to store the first part of the list\n    first_part = []\n    # iterate through the list and add elements to the first part of the list\n    for i in range(len(lst)):\n        first_part.append(lst[i])\n        # check if the length of the first part is L\n        if len(first_part) == L:\n            break\n    # create a new list to store the second part of the list\n    second_part = []\n    # iterate through the list and add elements to the second part of the list\n    for i in range(len(lst)):\n        # check if the length of the second part is L\n        if len(second_part) == L:\n            break\n        second_part.append(lst[i])\n    # return a tuple containing the first part and the second part of the list\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts\n    list1_split = list1[:L]\n    list2_split = list1[L:]\n    # return the resulting lists in a tuple\n    return (list1_split, list2_split)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    if length < L:\n        return None\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Initialize two empty lists to store the first and second parts of the list\n    first_part = []\n    second_part = []\n    # Initialize the index of the first element in the list to 0\n    index = 0\n    # Loop through the list and add elements to the appropriate lists until the first_part is of length L\n    while len(first_part) < L:\n        first_part.append(list1[index])\n        index += 1\n    # Loop through the list again and add elements to the appropriate lists until the second_part is of length L\n    while len(second_part) < L:\n        second_part.append(list1[index])\n        index += 1\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Calculate the length of the first part of the list\n    part1_len = L\n    \n    # Create a new list that will hold the first part of the original list\n    part1 = list1[:part1_len]\n    \n    # Create a new list that will hold the second part of the original list\n    part2 = list1[part1_len:]\n    \n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts based on L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half_len = len(list1)//2\n    part1 = list1[:half_len]\n    part2 = list1[half_len:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if L > n:\n        return None\n    elif L == 0:\n        return (list1[:n//2], [])\n    elif L == n:\n        return ([], list1)\n    else:\n        mid = n//2\n        return ((list1[:mid], list1[mid+1:]), list1[mid])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if L > len(list1):\n        print(\"Error: L is greater than the length of the list\")\n        return\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_in_dog = 7\n    dog_years = h_age * years_in_dog\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    b_age = h_age * 7\n    return b_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_dogs = h_age / 7\n    return age_in_dogs"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    \n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 7\n    dob = 1990\n    age = h_age - dob\n    return age * years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # define the number of days in a year and convert to dog's years\n    days_per_year = 365\n    dog_years = h_age / days_per_year\n    \n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 + h_age\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Loop through the list, splitting it every step elements\n    for i in range(0, len(S), step):\n        # Split the current list into sublists\n        sublist = S[i:i+step]\n        # Append the sublist to the result list\n        result.append(sublist)\n    # Return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(len(S)):\n        if i % n == 0:\n            result.append(S[i:])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step == 0:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        # handle edge case where the length of S is not divisible by step\n        return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = list(S)\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    split_list = []\n    i = 0\n    while i < len(S):\n        if i % step == 0:\n            split_list.append(S[i:i+step])\n        i += 1\n    return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    S = list(S)\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i+step])\n    return split_list"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l**2\n    print(\"The lateral surface area of the cube is:\", area)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2) + (12 * l)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l * l) + (6 * l * l * l) + (6 * l * l * l * l)"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of each odd number to the sum variable\n        sum += i*i\n        \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):  \n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd natural number to the sum\n        sum += i**2\n    \n    # return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 0:\n        print(\"Error: n should be a positive integer\")\n        return\n\n    odd_numbers = []\n    for i in range(1, n+1, 2):\n        odd_numbers.append(i)\n\n    sum_of_squares = 0\n    for num in odd_numbers:\n        sum_of_squares += num**2\n\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize a string with a star\n    star = \"*\"\n\n    # loop through the number of stars required\n    for i in range(1, n+1):\n        # print the star\n        print(star, end=\"\")\n\n        # add a space after the star\n        star += \" \"\n\n    # print a newline to move to the next line\n    print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the first 10 star numbers\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \n    # if n is less than 10, return the n-th element of the nums list\n    if n < 10:\n        return nums[n-1]\n    else:\n        # otherwise, recursively calculate then'th star number\n        return find_star_num(n-1) + find_star_num(n-2)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the count of stars to 1\n    count = 1\n\n    # loop n-1 times and add each count to the total count\n    for i in range(1, n):\n        count += count\n\n    # return the total count\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns then'th star number.\n    \"\"\"\n    # Initialize the string to store the star number\n    star_num = \"\"\n    # Loop through each digit of n\n    for digit in str(n):\n        # Add the appropriate number of stars to the string\n        if int(digit) == 0:\n            # If the digit is 0, add two stars\n            star_num += \"  \"\n        elif int(digit) == 1:\n            # If the digit is 1, add three stars\n            star_num += \" ***\"\n        elif int(digit) == 2:\n            # If the digit is 2, add four stars\n            star_num += \"   *\"\n        elif int(digit) == 3:\n            # If the digit is 3, add five stars\n            star_num += \"    **\"\n        elif int(digit) == 4:\n            # If the digit is 4, add six stars\n            star_num += \"     *\"\n        elif int(digit) == 5:\n            # If the digit is 5, add seven stars\n            star_num += \"      **\"\n        elif int(digit) == 6:\n            # If the digit is 6, add eight stars\n            star_num += \"       *\"\n        elif int(digit) == 7:\n            # If the digit is 7, add nine stars\n            star_num += \"        **\"\n        elif int(digit) == 8:\n            # If the digit is 8, add ten stars\n            star_num += \"         *\"\n        elif int(digit) == 9:\n            # If the digit is 9, add eleven stars\n            star_num += \"          **\"\n        # Add a line break after each row of stars\n        star_num += \"\\n\"\n    # Remove the last line break\n    star_num = star_num[:-1]\n    # Return the star number as a string\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    count = 0\n    star_num = 1\n    \n    # loop until we reach the nth star\n    while count < n:\n        # multiply the star number by 2 and increment the count\n        star_num *= 2\n        count += 1\n        \n    # return the final result\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n <= 0:\n        return None\n    else:\n        return n * (n+1) // 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*\"\n    elif n == 2:\n        return \"**\"\n    else:\n        return \"*****\" * n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (find_star_num(n-1) + find_star_num(n-2)) * 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1: \n        return '*'\n    elif n > 1:\n        return '*' + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            print('*', end=' ')\n        else:\n            print(' ', end=' ')\n    print()"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_values = {\n        'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106,\n        'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117,\n        'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122, 'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71,\n        'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84,\n        'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90,\n        '0': 48, '1': 49, '2': 50, '3': 51, '4': 52, '5': 53, '6': 54, '7': 55, '8': 56, '9': 57\n    }\n\n    return ascii_values.get(k.lower())"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    # Initialize a variable to store the sum\n    even_sum = 0\n\n    # Iterate over the list\n    for i in range(len(arr)):\n        # Check if the current element is even\n        if arr[i] % 2 == 0:\n            # Add the even element to the sum\n            even_sum += arr[i]\n\n    # Return the sum\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n                even_index += 1\n    return even_sum + even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of the even numbers at even positions.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_index = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even_index += arr[i]\n    return sum_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and even_index % 2 == 0:\n            sum += arr[i]\n            even_index += 1\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if even_index == -1 or i % 2 == 0:\n                even_sum += arr[i]\n                even_index = i\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the sum of the i-th even natural number raised to the fifth power\n        sum += i ** 5\n    # return the sum of the first n even natural numbers raised to the fifth power\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total += i ** 5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            total += i**5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tuple in test_list:\n        rear_element = tuple[-1]\n        result_list.append(rear_element)\n    return result_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[-1])\n    return result_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_list)):\n        rear_elements.append(test_list[i][-1])\n    return rear_elements"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths.\")\n        return\n    \n    # iterate through the tuples and subtract the elements\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Create an empty list to store the result\n    result_list = []\n    # Loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n    # Return the result as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of the same length.\")\n        return None\n    \n    # Loop through the tuples and subtract the corresponding elements\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the number of elements in the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The number of elements in the two tuples is not equal.\")\n        return\n    \n    # Loop through each element in the first tuple and subtract the corresponding element from the second tuple\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths!\")\n        return\n    \n    # create a new tuple to store the result\n    result_tup = ()\n    # loop through each element in the first tuple and subtract it from the corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    # return the new tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different numbers of elements.\")\n        return\n\n    # Loop through the elements of the first tuple and subtract the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    \n    print(\"The result is:\", test_tup1)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Calculate the sum of even index binomial coefficients using matrix exponentiation\n    bin_coeff = math.comb(n, 2)\n    coeff_sum = 0\n    for i in range(2, n+1, 2):\n        coeff_sum += bin_coeff ** i\n        \n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates the sum of even index binomial coefficients of a positive integer n.\n    \"\"\"\n\n    # Initialize the sum to zero\n    sum_even_coeffs = 0\n\n    # Loop through the even indices\n    for i in range(0, n+1, 2):\n        # Calculate the binomial coefficient\n        coeff = math.comb(n, i)\n        # If the coefficient is even, add it to the sum\n        if coeff % 2 == 0:\n            sum_even_coeffs += coeff\n\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Calculate the sum of even index binomial coefficients\n    for i in range(1, n+1, 2):\n        sum += math.comb(n, i)\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        for j in range(i, n+1):\n            if i%2 == 0 and j%2 == 0:\n                sum += math.comb(n,j)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize sum to zero\n    sum_even = 0\n    \n    # Loop through even indices\n    for i in range(2, n+1, 2):\n        # Calculate binomial coefficient\n        binomial = math.factorial(n) // math.factorial(i) // math.factorial(n-i)\n        \n        # Add to sum if even\n        if i % 2 == 0:\n            sum_even += binomial\n    \n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # initialize the sum to zero\n    sum_even_binomial = 0\n\n    # loop through all even indices from 0 to n-1\n    for i in range(0, n):\n\n        # find the even index binomial coefficient\n        even_binomial = math.comb(n, i)\n\n        # check if the coefficient is even\n        if even_binomial % 2 == 0:\n\n            # add the coefficient to the sum if it is even\n            sum_even_binomial += even_binomial\n\n    # return the sum of even index binomial coefficients\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum_even += math.comb(n, i)\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # initialize sum to 0\n    sum = 0\n\n    # loop through values of k from 0 to n\n    for k in range(n+1):\n\n        # calculate the binomial coefficient of k over n\n        binomial = math.comb(n, k)\n\n        # check if k is even\n        if k % 2 == 0:\n\n            # add the binomial coefficient to the sum\n            sum += binomial\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math  \n  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # initialize sum to zero\n    sum = 0\n\n    # iterate through the range of even index binomial coefficients up to n\n    for i in range(2*n):\n        # calculate the i-th even index binomial coefficient\n        even_binomial = math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n        # add the even index binomial coefficient to the sum\n        sum += even_binomial\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        for j in range(1, i//2+1):\n            if i % 2 == 0 and j % 2 == 0:\n                sum += math.comb(i, j)\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 1/3 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (3/5) * pi * r * r * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r * r * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Formula for volume of a cylinder: V = \u03c0r^2h\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * pi * (r ** 2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * pi * (r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    # Calculate the volume using the formula V = \u03c0r\u00b2h\n    volume = 3.14159 * r**2 * h\n    \n    # Return the volume\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume\n    vol = 3.14159 * r * r * h\n    return vol"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(d, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: val for key, val in d.items() if val >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and an integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i-1] == test_tup[i]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            break\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            count += 1\n            break\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Create a list of all the possible decagonal numbers\n    decagonal_nums = []\n    for i in range(1, n+1):\n        decagonal_nums.append(i*(3*i-1)//2)\n    return decagonal_nums[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    result = n * ((2 * n) - 1)\n    return result\n\ndef decagonal_numbers(n):\n    '''\n    Write a function to generate the nth decagonal number.\n    '''\n    decagonal_num = []\n    for i in range(1, n + 1):\n        decagonal_num.append(is_num_decagonal(i))\n    return decagonal_num\n\nn = int(input(\"Enter the value of n: \"))\nprint(decagonal_numbers(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += i * (2 * i - 1)\n    return num\n\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    num = 1\n    num_decagonal = 1\n\n    # Loop through the first n terms of the series\n    for i in range(1, n+1):\n        # Update num_decagonal\n        num_decagonal = num + num_decagonal\n        # Update num\n        num = (2*num_decagonal - 1) // 2\n    \n    return num_decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Create a list of numbers from 1 to n\n    nums = list(range(1, n+1))\n\n    # Calculate the sum of the squares of the numbers\n    dec_sum = sum(x**2 for x in nums)\n\n    # Return the decagonal number\n    return dec_sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += i * (i + 1) // 2\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize variables\n    decagonal_num = 1\n    num_to_check = 1\n    \n    # loop through the numbers from 1 to n\n    while decagonal_num < n:\n        # calculate the next decagonal number\n        next_num = (decagonal_num * (decagonal_num + 1)) // 2\n        \n        # if the next decagonal number is less than n, check the next number\n        if next_num < n:\n            # check if the next number is a decagonal number\n            if is_num_decagonal(next_num):\n                # if the next number is a decagonal number, return True\n                return True\n        \n        # if the next decagonal number is greater than n, check the current number\n        else:\n            # check if the current number is a decagonal number\n            if is_num_decagonal(num_to_check):\n                # if the current number is a decagonal number, return True\n                return True\n        \n        # increment the current number\n        num_to_check += 1\n    \n    # if the loop completes without finding the nth decagonal number, return False\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    else:\n        return 2*(n*n-1)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal += i**2\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    if n < 1:\n        return False\n\n    return (n * (2 * n - 1)) % 6 == 0"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, elem in enumerate(dlist):\n        if elem == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    for i, val in enumerate(dlist):\n        if val == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements in the list are unique, otherwise False.\n    \"\"\"\n    # Initialize a set to store unique elements\n    unique_set = set()\n    # Iterate through each element in the list\n    for element in test_list:\n        # If the element is not already in the set, add it to the set\n        if element not in unique_set:\n            unique_set.add(element)\n        # If the set has more than one element, the list is not unique\n        elif len(unique_set) > 1:\n            return False\n    # If the loop completes without returning False, the list is unique\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # convert list to set to remove duplicates\n    unique_elements = set(test_list)\n\n    # check if the length of the set is equal to the length of the original list\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique, otherwise False.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    \n    # Subtract each element element-wise\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n        return\n    \n    # Subtract the lists element-wise\n    result = [x - y for x, y in zip(nums1, nums2)]\n    \n    # Print the result\n    print(result)"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must be of equal length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have the same length\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise and returns the result.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists should have same length\"\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the frequency of each digit in the integer is less than or equal to the digit itself, False otherwise.\n    \"\"\"\n    count = [0] * 10\n    for digit in str(n):\n        count[int(digit)] += 1\n        if count[int(digit)] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10  # create a list of zeros for storing the frequency of each digit\n\n    # iterate over each digit in the integer\n    for digit in str(n):\n        freq[int(digit)] += 1  # increment the frequency of each digit by 1\n\n    # iterate over each digit in the list and check if it is less than or equal to its frequency\n    for digit in freq:\n        if digit > digit:\n            return False\n\n    # if no errors are found, the function returns True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # Convert the integer to a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Compute the frequency of each digit\n    freq = [digits.count(digit) for digit in range(10)]\n\n    # Check whether the frequency of each digit is less than or equal to the digit itself\n    return all(freq[digit] <= digit for digit in range(10))"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n    # Iterate through each digit in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its count\n        if digit in freq:\n            freq[digit] += 1\n        # Otherwise, add the digit and its count to the dictionary\n        else:\n            freq[digit] = 1\n    \n    # Iterate through the dictionary to check whether the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        # If the frequency of the digit is greater than the digit itself, return False\n        if freq[digit] > digit:\n            return False\n    \n    # If no False is returned, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # convert integer to list of digits\n    digits = [int(x) for x in str(n)]\n\n    # initialize frequency dictionary\n    freq = {}\n\n    # loop through list of digits and update frequency dictionary\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # loop through frequency dictionary and check if frequency of each digit is less than or equal to itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = set()\n    for digit in str(n):\n        if digit in digits:\n            digits[digit] += 1\n        else:\n            digits[digit] = 1\n    for digit in digits:\n        if digits[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = {}\n\n    # Count the frequency of each digit\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    \n    # loop through each digit in the integer\n    for digit in str(n):\n        # if the digit is not in the dictionary, add it with a frequency of 1\n        if digit not in freq:\n            freq[digit] = 1\n        # if the digit is already in the dictionary, increment its frequency by 1\n        else:\n            freq[digit] += 1\n            \n    # loop through the dictionary to check if the frequency of each digit in the integer is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n            \n    # if all digits have a frequency of 1 or less, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = list(str(n))\n    freq = [0] * 10\n    for digit in digits:\n        freq[int(digit)] += 1\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = [0] * 10 # initialize frequency list with 10 zeros\n    for digit in digits:\n        freq[digit] += 1 # increment the frequency of the digit in the frequency list\n    for digit in freq:\n        if digit > n: # check if the frequency of the digit is greater than the number itself\n            return False # if it is, return False\n    return True # if no false values are found, return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Check if the list is empty\n    if not list:\n        return True\n    \n    # Check if all elements in the list are equal to the given element\n    for item in list:\n        if item!= element:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # loop through each item in the list\n    for item in list:\n        # if the current item is not equal to the given element, return False\n        if item!= element:\n            return False\n    # if we reach this point, all items in the list are equal to the given element, so return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) > 0:\n        if all(x == element for x in list):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    # Use a for loop to iterate through the list\n    for item in list:\n        # If the item is not equal to the given element, return False\n        if item!= element:\n            return False\n    # If all items in the list are equal to the given element, return True\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        print(f'The text contains the pattern \"{pattern}\" at index {match.start()}')\n    else:\n        print(f'The text does not contain the pattern \"{pattern}\"')"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(?=(b{2,3}))')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b{2,3}')\n    matches = pattern.findall(text)\n    return bool(matches)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a[b]{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=(b{2,3}))'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b{2,3}')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    # define the regular expression pattern to match 'a' followed by two or three 'b'\n    pattern = r'a.*b{2,3}'\n    # compile the regular expression pattern\n    regex = re.compile(pattern)\n    # search for the pattern in the text\n    match = regex.search(text)\n    # check if the pattern was found and return True if yes, False otherwise\n    return True if match else False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<![ab])b{2,3}(?![ab])a'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[^b]*b{2,3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b{2,3})')\n    return bool(pattern.search(text))"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    modified_array = [0] * n\n    for i in range(k):\n        for j in range(n):\n            modified_array[j] += a[j]\n    max_sum = max(modified_array)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    temp_sum = 0\n\n    # Repeating the array k times\n    for i in range(k):\n        a = a + a\n\n    # Loop through the original array\n    for i in range(n):\n        temp_sum = max(temp_sum + a[i], a[i])\n        max_sum = max(max_sum, temp_sum)\n\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum to be negative\n    max_sum = -1\n\n    # Initialize the current sub-array sum and its index\n    current_sum = 0\n    current_index = -1\n\n    # Loop through the array\n    for i in range(n):\n\n        # If the current sub-array sum exceeds the maximum sum, update the maximum sum and its index\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_index = i\n\n        # If the current sub-array sum is less than zero, reset the sub-array sum to the current element\n        if current_sum < 0:\n            current_sum = a[i]\n\n        # If the current sub-array sum is equal to zero, increment the sub-array sum by the current element\n        else:\n            current_sum += a[i]\n\n        # If the current index is equal to the maximum index, break out of the loop to avoid duplicate sub-array sums\n        if current_index == i:\n            break\n\n    # If the current index is equal to the maximum index, return the maximum sum\n    if current_index == i:\n        return max_sum\n\n    # If the current index is less than the maximum index, return the sum of the last k elements\n    elif current_index < i:\n        return sum(a[max(i - k, 0):i+1])\n\n    # If the current index is greater than the maximum index, return the sum of the first k elements\n    else:\n        return sum(a[:i+1])"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    res = []\n    temp = []\n    for i in range(n):\n        temp.append(a[i])\n    for i in range(k):\n        for j in range(n):\n            temp.append(a[j])\n    temp_max = []\n    for x in temp:\n        temp_max.append(max_sum_repeated(x, n))\n    max_index = temp_max.index(max(temp_max))\n    res.append(temp[max_index])\n    return res\n\ndef max_sum_repeated(x, n):\n    if n == 1:\n        return x\n    return max_sum_repeated(x, n-1) + x"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    count = 0\n    total_sum = 0\n    for i in range(n):\n        current_sum = a[i]\n        for j in range(k):\n            current_sum += a[i]\n            if j < k-1:\n                current_sum -= a[i+j+1]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            count = 1\n        elif current_sum == max_sum:\n            count += 1\n        total_sum += current_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize the maximum sum and the sum of the first element\n    max_sum = max_sum_1 = a[0]\n    \n    # Initialize the sum of the kth element\n    sum_k = 0\n    \n    # Loop through the array\n    for i in range(1, n):\n        \n        # If the current element is less than k times the maximum sum, add it to the sum\n        if i < k:\n            sum_k += a[i]\n            max_sum = max(max_sum, sum_k)\n        \n        # If the current element is k times the maximum sum, subtract the first element from the sum and add the current element to the sum\n        else:\n            sum_k -= a[i - k]\n            sum_k += a[i]\n            max_sum = max(max_sum, sum_k)\n            \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_list = [sum(a)]\n    for i in range(1, n):\n        sum_list.append(sum_list[i-1] + a[i])\n\n    max_sum = max(sum_list)\n\n    for i in range(1, k+1):\n        if i == 1:\n            new_list = sum_list\n        else:\n            new_list = [sum_list[i]]\n            for j in range(1, n-k+1):\n                new_list.append(sum_list[j] + sum_list[j+i])\n\n        if max(new_list) > max_sum:\n            max_sum = max(new_list)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of all elements of the array\n    arr_sum = sum(a)\n    \n    # Find the minimum value of k\n    min_val = min(k, n)\n    \n    # Initialize the maximum sum with the first element of the array\n    max_sum = a[0]\n    \n    # Loop through the remaining elements of the array\n    for i in range(min_val, n):\n        # Find the sum of the first i elements of the array\n        sub_sum = sum(a[:i])\n        \n        # Calculate the sum of the remaining elements of the array after the first i elements\n        remaining_sum = arr_sum - sub_sum\n        \n        # Update the maximum sum if the current sum is greater\n        if max_sum < remaining_sum:\n            max_sum = remaining_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create the modified array by repeating the original array k times\n    modified_array = [0] * (n * k)\n    for i in range(n):\n        modified_array[i] = a[i]\n    for i in range(1, n * k):\n        modified_array[i] += modified_array[i - 1]\n        \n    # initialize variables for max_sum and current_sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # loop through the modified array to find the largest sum\n    for i in range(n * k):\n        current_sum += modified_array[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum to be 0\n    max_sum = 0\n\n    # Initialize the sum of the first element\n    curr_sum = a[0]\n\n    # Loop through the array\n    for i in range(n):\n        # Calculate the sum of the current element\n        curr_sum = curr_sum - a[i] + a[(i+k)%n]\n\n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_nums = [2*i for i in range(n)]\n    square_sum = sum([i**2 for i in even_nums])\n    return square_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_sum = 0\n    for i in range(1, n+1, 2):\n        even_sum += i**2\n    return even_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # Initialize sum variable to zero\n    sum_squares = 0\n\n    # Loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n\n        # Add square of even natural number to sum\n        sum_squares += i**2\n\n    # Return sum of squares\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_squares = 0\n    for i in range(2, n+1, 2):\n        even_squares += i*i\n    return even_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths):\n            max_lengths = [len(sublist)]\n        else:\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > len(max_lengths) or (len(lst) == len(max_lengths) and len(max(lst)) > len(max_lengths[0])):\n            max_lengths = lst\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(item) for item in sublist]\n        max_length = max(lengths)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or (len(sublist) == len(max_lengths) and sublist > max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize max_list to an empty list\n    max_list = []\n    \n    # Iterate through each element in the list of lists\n    for lst in list1:\n        # Find the length of each element in the list\n        length_list = [len(element) for element in lst]\n        \n        # If the length of the current list is greater than the length of max_list, update max_list\n        if len(length_list) > len(max_list):\n            max_list = length_list\n    \n    # Return max_list, which is a list of the maximum length for each list in the input list of lists\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(sublist)]\n        for item in sublist:\n            if isinstance(item, list):\n                lengths.append(len(item))\n            else:\n                lengths.append(1)\n        max_lengths.append(max(lengths))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list) or max_length_list == []:\n            max_length_list = list1[i]\n        elif len(list1[i]) == len(max_length_list):\n            max_length_list.extend(list1[i])\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(lst):\n    '''\n    Return the maximum length of a list of lists.\n    '''\n    return max(len(sublist) for sublist in lst)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for item in list1:\n        max_length = len(max(item, key=len))\n        if max_length not in max_length_list:\n            max_length_list.append(max_length)\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Initialize variables\n    ways = 0\n    used = [0] * k\n    \n    # Create a list of possible fences\n    fences = [(i, j) for i in range(n) for j in range(n)]\n    \n    # Find out the number of ways to paint each fence\n    for i in range(k):\n        ways += len([1 for x in fences if used[x[1]] == 0 and (x[0] == 0 or used[x[0]-1] == 0)])\n    \n    # Count the number of ways of painting the fence with at most 2 adjacent posts having the same color\n    ways *= k - 2\n    \n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize an array of size n+1 to store the count of ways to paint fence of size n using k colors\n    ways = [0] * (n+1)\n    \n    # Initialize the count of ways to paint fence of size n using k colors to 1\n    ways[0] = 1\n    \n    # For i = 1 to n\n    for i in range(1, n+1):\n        # For j = 0 to i-1\n        for j in range(i):\n            # If the colors adjacent to post i are different\n            if i-j >= k:\n                # Add the count of ways to paint fence of size i-j using k colors and the previous count to the current count\n                ways[i] += ways[j]\n    \n    # Return the count of ways to paint fence of size n using k colors\n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    # Create a list of all possible colors for the fence\n    colors = [i for i in range(1, k+1)]\n\n    # Initialize a 2D list to store the count of ways to paint the fence\n    count = [[0]*(k+1) for i in range(n+1)]\n\n    # Initialize the count of ways to paint the fence for the first fence post\n    count[0][0] = 1\n\n    # Loop through all the possible fence posts\n    for i in range(1, n+1):\n        # Loop through all the possible colors for the current fence post\n        for j in range(1, k+1):\n            # If the current color is not the same as the previous color, then there are two ways to paint the fence:\n            #   (1) Add the color to the previous color\n            #   (2) Leave the previous color alone\n            if colors[j]!= colors[j-1]:\n                count[i][j] = count[i-1][j] + count[i-1][j-1]\n            # If the current color is the same as the previous color, then there is only one way to paint the fence:\n            #   (1) Add the color to the previous color\n            else:\n                count[i][j] = count[i-1][j]\n\n    # Return the final count of ways to paint the fence\n    return count[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Check if n is greater than k or n is 0\n    if n > k or n == 0:\n        return 0\n    # Initialize a 2D array to store the number of ways of painting the fence\n    ways = [[0] * (n+1) for i in range(k+1)]\n    # Initialize the first row and first column to 1\n    ways[0][0] = 1\n    # Loop through the remaining rows and columns\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            # If the current element is the same color as the previous element, add the previous row and column to the current row and column\n            if i > 1 and j > 1 and ways[i-1][j] == ways[i][j-2] and ways[i-2][j-1] == ways[i][j]:\n                ways[i][j] = ways[i-1][j] + ways[i-2][j-1]\n            # Otherwise, add the sum of the previous row and column to the current row and column\n            else:\n                ways[i][j] = ways[i-1][j] + ways[i][j-1]\n    # Return the final element in the 2D array, which is the number of ways of painting the fence\n    return ways[k][n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # base case: if the number of colors is less than 3, there is only one way to paint the fence\n    if k < 3:\n        return 1\n\n    # create a 2D list to store the number of ways of painting the fence\n    dp = [[0] * (n+1) for _ in range(k+1)]\n\n    # initialize the base case:\n    # if there are less than 3 colors, there is only one way to paint the fence\n    for i in range(k+1):\n        dp[i][0] = 1\n        dp[i][1] = 1\n\n    # fill in the remaining cells of the dp table\n    for i in range(2, k+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    # return the final value in the dp table\n    return dp[k][n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    if k == 1:\n        return n\n    dp = [1] * (n + 1)\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            dp[i] += dp[i - 1] * dp[j]\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return count_no_of_ways(n//2, k) * count_no_of_ways(n//2, k)\n    else:\n        return count_no_of_ways(n//2 + 1, k) * count_no_of_ways(n//2, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0]*k for _ in range(n+1)]\n\n    # base case\n    for i in range(1, n+1):\n        dp[i][0] = 1\n\n    # recurrence relation\n    for i in range(1, n+1):\n        for j in range(k):\n            for l in range(k):\n                if j == l:\n                    dp[i][j] += dp[i-1][l]\n                else:\n                    dp[i][j] += dp[i-1][l] + dp[i-1][j]\n\n    return dp[n][0]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def backtrack(start, color):\n        if start == n:\n            return 1\n        if color == k:\n            return 0\n        count = 0\n        for i in range(start+1, n+1):\n            if color == fence[i]:\n                count += backtrack(i, color)\n        return count\n    \n    fence = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return backtrack(0, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            dp[i] += dp[i-j]\n    return dp[n]\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"The number of ways of painting the fence is:\", count_no_of_ways(n, k))"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n    :param n: Integer denoting the first number.\n    :param m: Integer denoting the second number.\n    :return: Integer denoting the quotient of the two numbers.\n    \"\"\"\n\n    quotient = n // m\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers as input, finds the quotient of them rounded down to the nearest integer, \n    and returns the result.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return int(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n % m == 0:\n        return n // m\n    else:\n        return find(m, n % m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    result = n // m\n    return result"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers n and m as input and returns the quotient of n and m rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns their quotient.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  # integer division\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = h / 2\n    b = w / 2\n    c = math.sqrt(w ** 2 + h ** 2) / 2\n    \n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # Calculating the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculating the hypotenuse of the right triangle\n    c = math.sqrt(s * (s - w) * (s - h))\n\n    # Returning the third side of the right triangle\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt((w**2)+(h**2))\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the diagonal\n    diagonal = math.sqrt(w**2 + h**2)\n\n    # find the opposite of the diagonal\n    opposite = math.sqrt((w**2 + h**2) / 2)\n\n    # calculate the third side\n    third_side = opposite / 2\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of one side of the triangle\n    s = math.sqrt(w**2 + h**2)\n    # calculate the length of the third side of the triangle\n    o = math.sqrt(s**2 - w**2 - h**2)\n    # return the third side\n    return o"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w < 0 or h < 0:\n        raise ValueError(\"Width and height cannot be negative\")\n\n    # calculate the semi-perimeter\n    s = (w + h) / 2\n\n    # calculate the length of the other side\n    o = math.sqrt(w*w + h*h - s*s)\n\n    # calculate the third side\n    third_side = s + o\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using Heron's formula to calculate the hypotenuse\n    c = (w**2 + h**2)**0.5\n\n    # Using trigonometry to find the angle\n    angle = math.degrees(math.acos((w**2 + h**2 - c**2) / (2 * w * h)))\n\n    # Multiplying the angle by the hypotenuse and dividing by 2\n    result = c * math.sin(math.radians(angle)) / 2\n\n    return result"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt((w**2) + (h**2))\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n\n    # calculate the length of the third side\n    side = math.sqrt(area * (w/h))\n\n    # return the length of the third side\n    return side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize maximum value and corresponding index\n    max_val = listval[0]\n    max_idx = 0\n\n    # loop over the list and compare each element to the current maximum value\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n            max_idx = i\n\n    # return the maximum value and its index\n    return (max_val, max_idx)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')  # initialize the maximum value to negative infinity\n    \n    for val in listval:\n        if val > max_val:\n            max_val = val\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of different types and returns the maximum value.\n    '''\n    max_num = None\n    for num in listval:\n        if max_num is None:\n            max_num = num\n        elif type(num) == type(max_num) and num > max_num:\n            max_num = num\n        elif type(num) == type(max_num) and num < max_num:\n            pass\n        else:\n            raise TypeError(\"All the elements in the list must be of the same type.\")\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for element in listval:\n        if max_value is None or element > max_value:\n            max_value = element\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if max_val < listval[i]:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize max_val to the first element of the list\n    max_val = listval[0]\n    # loop through the list and update max_val if a larger value is found\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = 2\n    sum = 0\n    while div * div <= number:\n        if number % div == 0:\n            sum += div\n        div += 1\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    # loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(number ** 0.5) + 1):\n        # check if the number is divisible by the current number\n        if number % i == 0:\n            # add the current number to the sum\n            sum += i\n    # return the sum of all divisors\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    divisor = 1\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # Initialize a variable to store the sum of divisors\n    sum_div = 0\n\n    # Loop through all numbers from 1 to the square root of the given number\n    for i in range(1, int(number**0.5)+1):\n        # Check if the given number is divisible by the current number\n        if number % i == 0:\n            # If it is, add it to the sum of divisors\n            sum_div += i\n\n    # Return the sum of divisors\n    return sum_div"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n\ndef get_Inv_Count(arr):\n    inv_count = 0\n    sorted_arr = merge_sort(arr)\n    for i in range(len(sorted_arr)):\n        for j in range(i+1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += len(sorted_arr) - i - j - 1\n                break\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inversions = 0\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] < arr[j]:\n                inversions += i - j\n    return inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as an argument and returns the number of inversions in the array.\n    Inversion count is the number of pairs of elements in the array that are in the wrong order.\n    Inversions are sorted in descending order, so we sort the array and then count the number of inversions.\n    \"\"\"\n    arr.sort(reverse=True)  # Sort the array in descending order\n    inv_count = 0\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        if arr[i] > arr[j]:  # If the left element is greater than the right element, then there is an inversion\n            inv_count += j - i  # Increment the inversion count by the number of elements between i and j\n            i += 1  # Move the left pointer to the next element\n            j -= 1  # Move the right pointer to the previous element\n        else:\n            i += 1  # Move the left pointer to the next element\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    if len(arr) <= 1:\n        return 0\n    else:\n        # Find the midpoint of the array\n        mid = len(arr) // 2\n        \n        # Recursively count inversions in the left half\n        left_count = get_Inv_Count(arr[:mid])\n        \n        # Recursively count inversions in the right half\n        right_count = get_Inv_Count(arr[mid:])\n        \n        # Combine the two inversions counts\n        inv_count = left_count + right_count\n        \n        # Count the inversions in the middle elements\n        left = mid\n        right = len(arr) - 1\n        while left < right:\n            if arr[left] < arr[right]:\n                inv_count += right - left\n                left += 1\n            else:\n                right -= 1\n                \n        return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Step 1: Sort the array\n    arr.sort()\n\n    # Step 2: Initialize variables for inversion count and i, j indices\n    inversions = 0\n    i = 0\n    j = len(arr) - 1\n\n    # Step 3: Iterate over the array using two pointers i and j\n    while i < j:\n\n        # Step 3.1: Check if the elements at i and j are in the correct order\n        if arr[i] > arr[j]:\n\n            # Step 3.2: If not, then increment the inversion count\n            inversions += (j - i)\n\n            # Step 3.3: Swap the elements at i and j\n            arr[i], arr[j] = arr[j], arr[i]\n\n            # Step 3.4: Decrement j to keep the pointers in the correct range\n            j -= 1\n\n        # Step 3.5: Increment i to move the left pointer to the right\n        i += 1\n\n    # Step 4: Return the final inversion count\n    return inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # To store the count of inversions\n    inv_count = 0\n    # To store the maximum value in the array\n    max_val = max(arr)\n\n    # Iterate through the array\n    for i in range(max_val):\n        # Initialize two pointers to the start of the array\n        left = 0\n        right = i\n        # While the left pointer is less than the right pointer\n        while left < right:\n            # If the left value is less than the right value\n            if arr[left] < arr[right]:\n                # Increment the count of inversions\n                inv_count += right - left\n                # Swap the left and right values\n                arr[left], arr[right] = arr[right], arr[left]\n                # Move the left pointer to the right\n                left += 1\n                # Move the right pointer to the left\n                right -= 1\n            # If the left value is greater than the right value\n            else:\n                # Move the left pointer to the right\n                left += 1\n            # If the right value is less than the left value\n            if arr[left] > arr[right]:\n                # Move the right pointer to the left\n                right -= 1\n    # Return the count of inversions\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += (j - i)\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    if len(arr) <= 1:\n        return 0\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left_arr = merge_sort(arr[:mid])\n        right_arr = merge_sort(arr[mid:])\n\n        return merge(left_arr, right_arr)\n\n    def merge(left_arr, right_arr):\n        inv_count = 0\n        i = j = 0\n\n        while i < len(left_arr) and j < len(right_arr):\n            if left_arr[i] <= right_arr[j]:\n                arr[i + j] = left_arr[i]\n                i += 1\n            else:\n                arr[i + j] = right_arr[j]\n                inv_count += len(left_arr) - i\n                j += 1\n\n        while i < len(left_arr):\n            arr[i + j] = left_arr[i]\n            i += 1\n\n        while j < len(right_arr):\n            arr[i + j] = right_arr[j]\n            j += 1\n\n        return arr, inv_count\n\n    inv_count = 0\n    arr, _ = merge_sort(arr)\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    return flatten(list1)"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flattens a nested list by using recursion.\n\n    :param lst: A nested list to be flattened.\n    :return: A flattened list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) is list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(int)\n    max_agg = 0\n\n    for tup in stdata:\n        for item in tup:\n            agg_dict[item] += 1\n\n    for key, value in agg_dict.items():\n        if value > max_agg:\n            max_agg = value\n\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the count of each item\n    item_count = defaultdict(int)\n    # iterate over the list of tuples\n    for item, price in stdata:\n        # increment the count of the item in the defaultdict\n        item_count[item] += 1\n    # initialize the maximum aggregate to negative infinity\n    max_aggr = float('-inf')\n    # iterate over the item count dictionary to find the maximum aggregate\n    for count in item_count.values():\n        max_aggr = max(max_aggr, count * 0.08)\n    # return the maximum aggregate\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the maximum aggregate for each month\n    max_agg_dict = defaultdict(int)\n    for st, amount in stdata:\n        # check if the month exists in the dictionary\n        if st.month in max_agg_dict:\n            # if it does, update its maximum aggregate with the new value\n            max_agg_dict[st.month] = max(amount, max_agg_dict[st.month])\n        else:\n            # if it doesn't, add the new month and its maximum aggregate\n            max_agg_dict[st.month] = amount\n    # find the maximum aggregate from the dictionary\n    max_agg = max(max_agg_dict.values())\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total_prices = defaultdict(float)\n    for item, unit_price, quantity, item_price in stdata:\n        total_prices[item] += unit_price * quantity\n    return max(total_prices.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each item\n    max_aggs = defaultdict(int)\n\n    # Loop through the list of tuples\n    for item, quantity, price in stdata:\n        # Calculate the maximum aggregate for this item\n        max_agg = quantity * price\n        # Update the maximum aggregate for this item in the dictionary\n        max_aggs[item] = max(max_aggs[item], max_agg)\n\n    # Find the maximum aggregate in the dictionary\n    max_agg = max(max_aggs.values())\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the aggregate count of each item\n    item_count = defaultdict(int)\n    for item, count in stdata:\n        item_count[item] += count\n    \n    # calculate the maximum aggregate\n    max_aggregate = 0\n    for count in item_count.values():\n        max_aggregate = max(max_aggregate, count)\n    \n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    max_subagg = defaultdict(int)\n    for subtuple, count in stdata:\n        agg = sum(subtuple)\n        max_agg = max(max_agg, agg)\n        for i, subval in enumerate(subtuple):\n            max_subagg[i] = max(max_subagg[i], subval)\n    return max_agg, max_subagg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n\n    for item, count in stdata:\n        freq[item] += count\n\n    # find the maximum aggregate in the defaultdict\n    max_agg = max(freq.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n    freq = defaultdict(int)\n    max_aggregate = 0\n    for item, freq_item in stdata:\n        freq[item] += freq_item\n        if freq[item] > max_aggregate:\n            max_aggregate = freq[item]\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_ag = 0\n    for i in stdata:\n        max_ag = max(max_ag, i[1])\n    return max_ag"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    def binary_seq_sum(seq, index, total_sum, length):\n        if index == length:\n            return total_sum\n        if seq[index] == 0:\n            return binary_seq_sum(seq, index + 1, total_sum + seq[index], length)\n        else:\n            return binary_seq_sum(seq, index + 1, total_sum, length)\n\n    count = 0\n    for i in range(2**n):\n        binary_seq = [0] * n\n        index = 0\n        while i > 0:\n            binary_seq[index] = i % 2\n            i //= 2\n            index += 1\n        if binary_seq_sum(binary_seq, 0, 0, n) == i:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1):\n        for j in range(2**n-1):\n            if i & j == 0 and sum(bin(i).split('b')[1:]) == sum(bin(j).split('b')[1:]):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    \n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2**n):\n        binary = format(i, 'b')\n        \n        # Check if the sum of first n bits and sum of last n bits are equal\n        if sum(int(binary[j]) for j in range(n)) == sum(int(binary[j]) for j in range(n, 2*n)):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first = i // 2**n\n        last = i % 2**n\n        if first == last:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:].zfill(2*n)\n        sum1 = sum([int(i) for i in seq[:n]])\n        sum2 = sum([int(i) for i in seq[-n:]])\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(1, 2**n):\n        binary_num = bin(i)[2:]\n        first_sum = sum(int(digit) for digit in binary_num[:n])\n        last_sum = sum(int(digit) for digit in binary_num[-n:])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(n+1)-1):\n        first_n_bits = i & ((1 << n) - 1)\n        last_n_bits = i >> n\n        if first_n_bits == last_n_bits:\n            count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The count of binary sequences of length 2n with sum of first n bits same as sum of last n bits is:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    # Initialize variables\n    count = 0\n    total = 0\n    # Generate all binary sequences of length 2n\n    for i in range(2**n): \n        # Generate binary sequence\n        binary_seq = bin(i)[2:]\n        # Extract the first and last n bits\n        first_n = binary_seq[:n]\n        last_n = binary_seq[-n:]\n        # Check if the sum of first n bits is same as the sum of last n bits\n        if int(first_n, 2) + int(last_n, 2) == int(binary_seq[n:], 2): \n            # Increment the count if the condition is met\n            count += 1\n            # Update the total sum\n            total += i\n    # Return the count of binary sequences\n    return count, total"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    for i in range(2**n):\n        bits = [int(bit) for bit in bin(i)[2:].zfill(2*n)]\n        sum1 = sum(bits[:n])\n        sum2 = sum(bits[n:])\n        if sum1 == sum2:\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    \n    # Generate all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extract the first n bits\n        bits = bin(i)[2:].zfill(n)\n        # Extract the last n bits\n        last_bits = bits[-n:]\n        # Check if the sum of the first n bits is the same as the sum of the last n bits\n        if int(bits) == int(last_bits):\n            count += 1\n    \n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n        elif isinstance(value, (list, tuple)):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max([dict_depth(v) for v in d.values()])\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n\n    # Get the maximum depth of any nested dictionary\n    depths = [dict_depth(v) for v in d.values() if isinstance(v, dict)]\n    max_depth = max(depths) if depths else 0\n\n    # Add 1 to the maximum depth for the current dictionary\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth to 0\n    depth = 0\n    \n    # loop through each key in the dictionary\n    for key in d:\n        # if the value is a dictionary, increment depth by one\n        if isinstance(d[key], dict):\n            depth += 1\n        # otherwise, if the value is a list, check each element to see if it's also a dictionary\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1\n    \n    # return the final depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Base case: if the dictionary is empty, its depth is 1\n    if len(d) == 0:\n        return 1\n    # Recursive case: for each key in the dictionary,\n    # add the depth of the corresponding value to the depth of the\n    # dictionary itself plus one (to account for the key itself).\n    # Then, recursively call the function on the value to get its depth.\n    depth = 1\n    for key in d:\n        value = d[key]\n        depth += 1 + dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    def find_element(arr, ranges, rotations, index, start):\n        if rotations == 0:\n            return arr[index]\n        elif rotations == 1:\n            if start == len(arr) - 1:\n                start = 0\n            return arr[start]\n        elif rotations % 2 == 0:\n            mid = rotations // 2\n            if index < mid:\n                return find_element(arr, ranges, rotations - mid, index, start + mid)\n            else:\n                return find_element(arr, ranges, rotations - mid, index - mid, start)\n        else:\n            mid = (rotations - 1) // 2\n            if index < mid:\n                return find_element(arr, ranges, rotations - mid - 1, index, start + mid)\n            else:\n                return find_element(arr, ranges, rotations - mid - 1, index - mid, start)\n\n    # Find the element at the given index after rotations.\n    return find_element(arr, ranges, rotations, index, 0)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, an array of ranges and a list of rotations, and an index.\n    It then iterates over the array and checks which indices fall within the given ranges.\n    For each range, it checks which indices have been rotated by the given number of rotations.\n    Finally, it returns the element at the given index after the rotations.\n\n    Args:\n        arr (list): An array of integers.\n        ranges (list): An array of tuples that define the ranges of the indices to check.\n            The format is [(start1, end1), (start2, end2),...].\n        rotations (list): A list of rotations. Each rotation is a tuple of (start, end) indices.\n            The format is [(start1, end1), (start2, end2),...].\n        index (int): The index to find the element at after rotating the array.\n\n    Returns:\n        int: The element at the given index after rotating the array.\n    \"\"\"\n    for range_ in ranges:\n        start, end = range_\n        if start <= index <= end:\n            # If the index falls within the range, check if it has been rotated\n            for rotation in rotations:\n                start, end = rotation\n                if start <= index <= end:\n                    # If the index has been rotated, return the element at the original index\n                    return arr[index % len(arr)]\n\n    # If no element is found after rotating, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function finds the element at a given index after a given number of rotations.\n    '''\n    # check if index is within the array bounds\n    if index < 0 or index >= len(arr):\n        raise IndexError('Index out of range')\n\n    # calculate the number of rotations required to reach the index\n    rotations = rotations % len(ranges)\n    num_rotations = 0\n    for i in range(len(ranges)):\n        if index >= num_rotations and index < num_rotations + ranges[i]:\n            num_rotations += ranges[i]\n            rotations -= 1\n            break\n        num_rotations += ranges[i]\n\n    # rotate the array by the required number of rotations\n    for _ in range(rotations):\n        arr = arr[len(ranges):] + arr[:len(ranges)]\n\n    # find the element at the desired index\n    element = arr[index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after number of rotations.\n\n    Parameters:\n    arr (list): An array of integers.\n    ranges (list): A list of tuples containing the ranges of each element in the array.\n    rotations (list): A list of integers containing the number of rotations required for each element in the array.\n    index (int): The index of the element whose rotation is to be performed.\n\n    Returns:\n    int: The element at the given index after number of rotations.\n    \"\"\"\n    # Find the element at the given index\n    element = arr[index]\n\n    # Initialize the count of rotations required for each element\n    count = 0\n\n    # Perform the required rotations to find the element at the given index\n    for i in range(len(rotations)):\n        if index + rotations[i] < len(arr):\n            count += rotations[i]\n            index += rotations[i]\n        else:\n            count += rotations[i]\n            index -= rotations[i]\n\n    # Find the element at the new index\n    new_element = arr[index]\n\n    # Calculate the difference between the old and new element\n    diff = abs(new_element - element)\n\n    # Find the element at the final index\n    for i in range(len(ranges)):\n        if count + ranges[i][0] < diff:\n            final_index = index - (count - ranges[i][0])\n            break\n\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Find the minimum value of the array\n    min_val = min(arr)\n    # Initialize the maximum value of the array\n    max_val = max(arr)\n\n    # Iterate through each range in the list\n    for i in range(len(ranges)):\n        # Find the start and end index of the range\n        start = arr.index(min_val) + 1  # Add 1 for the current minimum value\n        end = arr.index(max_val) - 1  # Subtract 1 for the current maximum value\n\n        # Calculate the new start and end index after rotations\n        new_start = start - rotations[i]\n        new_end = end - rotations[i]\n\n        # If the new start index is less than the start index or the new end index is greater than the end index,\n        # it means that the element is not present in the given range, so we need to continue to the next range.\n        if new_start < start or new_end > end:\n            continue\n\n        # If the element is present in the given range, calculate its index and return it\n        new_index = (new_start + index - 1) % (end - start + 1) + start - 1\n        return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Initialize the element to be found\n    element = None\n\n    # Iterate over all the rotations\n    for rotation in rotations:\n        # Get the new index after the rotation\n        new_index = (index - rotation) % len(arr)\n\n        # If the new index is in the range of the array, set the element to the element at the new index\n        if new_index in ranges:\n            element = arr[new_index]\n            break\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the rotation index\n    for i in range(rotations):\n        for j in range(len(ranges) - 1):\n            if arr[j] >= arr[j + 1]:\n                ranges[j], ranges[j + 1] = ranges[j + 1], ranges[j]\n\n    # Calculate the final index\n    final_index = 0\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            final_index += ranges[i] - ranges[i - 1]\n        else:\n            break\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in the array, ranges, rotations, and index of the element to be found.\n    It finds the element at the given index after rotations and returns the element.\n    '''\n\n    # Check if the index is valid for the array\n    if index >= len(arr):\n        return -1\n\n    # Calculate the total number of rotations\n    total_rotations = 0\n    for i in range(len(ranges)):\n        if ranges[i][0] <= index and ranges[i][1] > index:\n            total_rotations += 1\n\n    # Calculate the final index after rotations\n    final_index = (index - ranges[0][0] + total_rotations) % (ranges[0][1] - ranges[0][0] + 1)\n\n    # Return the element at the final index\n    if final_index < len(ranges[0]):\n        return arr[final_index]\n    else:\n        return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Find the element at the given index\n    element = arr[index]\n\n    # Rotate the array by rotations\n    for i in range(rotations) :\n        temp = arr[0]\n        for j in range(len(arr)-1) :\n            arr[j] = arr[j+1]\n        arr[len(arr)-1] = temp\n\n    # Find the element at the given index after rotating the array\n    new_index = (index - rotations + len(arr)) % len(arr)\n    new_element = arr[new_index]\n\n    # Return the element at the given index after rotating the array\n    return new_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # finding length of array\n    n = len(arr)\n\n    # finding the number of rotations needed to find the element at index\n    rotations = rotations % n\n\n    # finding the difference between the index and the element at index\n    diff = index - arr[index]\n\n    # finding the rotation index\n    if diff > 0 :\n        rot_index = index - diff\n    else :\n        rot_index = (index - diff) % n\n\n    # calculating the rotation factor\n    rot_factor = arr[rot_index]\n\n    # finding the final element\n    final_element = arr[(index - rotations + n) % n]\n\n    # finding the final element after rotations\n    rot_final_element = (rot_factor + final_element) % n\n\n    # returning the final element after rotations\n    return rot_final_element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    for word in words:\n        if pattern.match(word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = r'^p'\n    match = re.search(pattern, words, re.IGNORECASE)\n    if match:\n        return match.group(0), match.group(0)\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p[^a-z]*'\n    for word in words:\n        if re.search(pattern, word):\n            return word.split()[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'^p'\n    result = re.findall(pattern, words)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # filter out words that do not start with 'p'\n    words = [word for word in words if word[0] == 'p']\n    \n    # if there are less than 2 words that start with 'p', return None\n    if len(words) < 2:\n        return None\n    \n    # if there are exactly 2 words that start with 'p', return them\n    if len(words) == 2:\n        return words\n    \n    # if there are more than 2 words that start with 'p', return the first two words\n    return words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return \"No two words starting with 'p' found.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-z]*')\n    for word in words:\n        match = pattern.match(word)\n        if match:\n            return match.group(), word\n    return None, None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, index + 1):\n            if a[i] > a[j]:\n                dp[i][j] = dp[i - 1][j] + a[i]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    if k > index:\n        return dp[n][k] + dp[n - 1][k]\n    else:\n        return dp[n][index] + dp[n - 1][k - 1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # initialize max_sum as 0 and max_sum_ending_here as 0\n    max_sum = 0\n    max_sum_ending_here = 0\n\n    # loop through all possible starting indexes\n    for i in range(index, n):\n\n        # if the ith element is greater than or equal to k\n        if a[i] >= a[k]:\n\n            # if the ending sum is greater than the current max sum, update max_sum and max_sum_ending_here\n            if max_sum_ending_here + a[i] > max_sum:\n                max_sum = max_sum_ending_here + a[i]\n                max_sum_ending_here = a[i]\n\n    # return max_sum_ending_here as the maximum sum of increasing subsequence from prefix until kth index\n    return max_sum_ending_here"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the result and current sum to 0\n    result = 0\n    current_sum = 0\n    \n    # Loop through the array from index to n-1\n    for i in range(index, n):\n        # If the current element is greater than the kth element and the next element is greater than or equal to the kth element\n        if a[i] > a[k] and (i+1 == n or a[i+1] >= a[k]):\n            # Update the current sum with the sum of the current element and the maximum sum of increasing subsequence until k-1\n            current_sum = max(a[i] + current_sum, a[k] + max_sum_increasing_subseq(a, n, index, k-1))\n        # Update the result with the maximum of the current sum and the current element\n        result = max(result, current_sum)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    prefix_sum = [0] * n\n\n    # loop through the array from i to n-1\n    for i in range(index, n):\n        # if kth element is greater than i, skip it and move on to the next element\n        if a[k] > i:\n            continue\n        # if kth element is not greater than i, add it to the prefix sum and update the current sum\n        prefix_sum[i] = prefix_sum[i-1] + a[k]\n        curr_sum = max(curr_sum, prefix_sum[i])\n        max_sum = max(max_sum, curr_sum)\n\n    # return the maximum sum of increasing subsequence from prefix until ith index and including kth element\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function takes in a list of integers a, the length of the list n, the current index i, and the kth element after index i.\n    The function calculates the maximum sum of increasing subsequence from the prefix until the ith index and also including the kth element which is after i.\n    The function returns the maximum sum of increasing subsequence as well as the length of the subsequence.\n    \"\"\"\n    if k > index:\n        return 0, 0\n    if index == k:\n        return max(a[index-1], a[k-1]) + a[index-1], 2\n    if index == 0:\n        return max(a[index], a[k]), 2\n    if a[index] <= a[index-1]:\n        return max(a[index], a[k]), 2\n    else:\n        max_sum, length = max_sum_increasing_subseq(a, n, index-1, k)\n        if a[index] + max_sum > a[k]:\n            return a[index] + max_sum, length + 1\n        else:\n            return max_sum, length"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize a list of lists to store the prefix sums\n    prefix_sums = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Fill in the prefix sums using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j > i:\n                prefix_sums[i][j] = prefix_sums[i - 1][j]\n            else:\n                prefix_sums[i][j] = max(a[i - 1] + prefix_sums[i - 1][j - 1], prefix_sums[i - 1][j])\n\n    # Find the maximum sum of increasing subsequence from index to k\n    max_sum = float('-inf')\n    for j in range(1, k + 1):\n        if prefix_sums[index][j] > max_sum:\n            max_sum = prefix_sums[index][j]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = 0\n    # Initialize the array to 0's\n    t = [0]*n\n    \n    # Initialize the array to 0's\n    t[0] = a[0]\n    # Traverse through the array and calculate the sum of increasing subsequence\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            t[i] = t[i-1] + a[i]\n        else:\n            t[i] = a[i]\n        \n        if i >= k and t[i] > max_sum:\n            max_sum = t[i]\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n    \n    max_sum = float('-inf')\n    for i in range(index, k):\n        current_sum = max_sum_increasing_subseq(a, n, i, k) + a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    if k - index + 1 < n - k:\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, k, n))\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return a[index]\n    elif k > index:\n        return max(a[index], a[index-1] + max_sum_increasing_subseq(a, n, index-1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index-1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [[0]*n for i in range(n+1)]\n    max_sum = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i][j] = dp[i-1][j] + a[i]\n            else:\n                dp[i][j] = dp[i-1][j]\n            if dp[i][j] > max_sum:\n                max_sum = dp[i][j]\n    max_sum += a[index]\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a new tuple to store the colon\n    colon = ()\n    # iterate through the original tuple\n    for i in range(len(tuplex)):\n        # if the current index is less than m, add the i-th element of the original tuple to the colon\n        if i < m:\n            colon += (tuplex[i],)\n        # if the current index is greater than or equal to m, add a new copy of the i-th element of the original tuple to the colon\n        else:\n            colon += (deepcopy(tuplex[i]),)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = (new_tuplex[0],) + new_tuplex[1:]\n    for i in range(n):\n        new_tuplex = new_tuplex + (new_tuplex[-1],)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # copying the tuple to avoid changing the original\n    tuplex_copy = deepcopy(tuplex)\n\n    # creating a new tuple to store the colon\n    colon_tuplex = ()\n\n    # iterating through the tuple\n    for i in range(m):\n        colon_tuplex += (tuplex_copy[i],)\n\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    tuplex (tuple): A tuple of integers.\n    m (int): The length of the colon.\n    n (int): The number of columns in the original tuple.\n\n    Returns:\n    A tuple of integers representing the colon of tuplex.\n\n    Example:\n    >>> tuplex = (1, 2, 3, 4, 5)\n    >>> m = 3\n    >>> n = 5\n    >>> colon_tuplex(tuplex, m, n)\n    (1, 2, 3, 4)\n    \"\"\"\n\n    # Copy the original tuple to avoid modifying the original\n    tuplex_copy = deepcopy(tuplex)\n\n    # Get the number of rows in the colon\n    num_rows = n - m + 1\n\n    # Get the number of columns in the colon\n    num_cols = m\n\n    # Create an empty list to hold the colon\n    colon = []\n\n    # Loop over the number of rows in the colon\n    for i in range(num_rows):\n        # Loop over the number of columns in the colon\n        for j in range(num_cols):\n            # Add the value of the original tuple to the colon list\n            colon.append(tuplex_copy.pop(0))\n\n    # Return the colon of the original tuple\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple and a row and column index and returns the\n    colon of the tuple at that row and column.\n    '''\n    # Create a deep copy of the tuple to avoid modifying the original\n    tuplex = deepcopy(tuplex)\n    \n    # Find the row index of the colon and col\n    row = m - n\n    col = n\n    \n    # Check if the column index is out of bounds\n    if col >= len(tuplex):\n        return None\n    \n    # Update the colon by removing the first n elements and adding a list of\n    # n copies of the element at the given column index\n    colon = tuplex[:row] + [tuplex[row][col]] * n\n    \n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Get the length of the tuple\n    length = len(tuplex)\n\n    # If the length of the tuple is less than the value of m\n    if length < m:\n        # Pad the tuple with the value of m\n        tuplex = tuplex + (m - length) * (tuplex[0],)\n\n    # Get the index of the first element in the colon\n    start = length - n\n\n    # If the start index is less than 0\n    if start < 0:\n        # Pad the colon with the value of m\n        colon = (tuplex[0],) + (tuplex[0],) * (-start)\n    else:\n        # Get the end index of the colon\n        end = start + n\n\n        # If the end index is greater than the length of the tuple\n        if end > length:\n            # Pad the colon with the value of m\n            colon = (tuplex[-1],) + (tuplex[0],) * (end - length)\n        else:\n            # Slice the tuple to get the colon\n            colon = tuplex[start:end]\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return deepcopy(tuplex)[:m+n] + deepcopy(tuplex)[m+n:]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuplex and returns a colon of the given size.\n    '''\n    # If the tuplex has less than m elements, repeat the last element m times\n    if len(tuplex) < m:\n        tuplex += (tuplex[-1],) * (m - len(tuplex))\n    # Create a new list of tuples of length m, where each tuple contains n elements\n    colon = tuple(zip(*[tuplex[i:i+m] for i in range(0, len(tuplex), m)]))\n    # If the size of the colon is less than n, repeat the last tuple n times\n    while len(colon) < n:\n        colon += (colon[-1],)\n    # Flatten the colon into a single list of elements\n    colon = list(itertools.chain.from_iterable(colon))\n    # Return the colon as a tuple\n    return tuple(colon)\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the tuple is a list or a tuple\n    if isinstance(tuplex, list):\n        # Create a copy of the list\n        colon = deepcopy(tuplex)\n    elif isinstance(tuplex, tuple):\n        # Create a copy of the tuple\n        colon = deepcopy(tuplex)\n    else:\n        raise TypeError(\"The input must be a list or a tuple\")\n\n    # Get the number of elements in the colon\n    colon_len = len(colon)\n\n    # If the length of the colon is less than m, extend the colon with m-colon_len zeros\n    if colon_len < m:\n        colon.extend([0]*(m-colon_len))\n\n    # Get the elements of the colon in a list\n    colon_list = list(colon)\n\n    # If the length of the colon is less than n, pad the elements with zeros until the length of the colon is n\n    while len(colon_list) < n:\n        colon_list.append(0)\n\n    # Get the colon as a tuple\n    colon_tup = tuple(colon_list)\n\n    return colon_tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex[1:] + (new_tuplex[0],)\n    for i in range(n-m):\n        new_tuplex = (new_tuplex[-1],) + new_tuplex[:-1]\n    return new_tuplex"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Calculate the largest product and the number of pairs of factors required to get the largest product\n    largest_product = 1\n    num_pairs = 0\n\n    # Check if N can be formed from nums1 and nums2\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)+1):\n            if j > N:\n                break\n            product = 1\n            for k in range(i, j):\n                product *= nums1[k]\n            if product > largest_product:\n                largest_product = product\n                num_pairs = j-i\n\n    return largest_product, num_pairs"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    \n    result = []\n    for i in range(N):\n        factor1 = max(nums1)\n        factor2 = max(nums2)\n        result.append(factor1 * factor2)\n        \n        nums1.remove(factor1)\n        nums2.remove(factor2)\n        \n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create an empty list to store the maximum product values\n    max_products = []\n\n    # Loop through the numbers in the two input lists\n    for i in range(len(nums1)):\n        # Find the largest product from the first list\n        first_factor = max(nums1[i:])\n\n        # Find the largest product from the second list\n        second_factor = max(nums2[:i+1])\n\n        # Multiply the two factors to get the maximum product\n        max_product = first_factor * second_factor\n\n        # Append the maximum product to the list of maximum products\n        max_products.append(max_product)\n\n        # Sort the list of maximum products in descending order\n        max_products.sort(reverse=True)\n\n        # Check if the required number of products has been found\n        if len(max_products) == N:\n            return max_products\n\n    # If the required number of products has not been found, return an empty list\n    return []"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    largest_products = []\n    count = 0\n    \n    # Loop through the lists and select one factor from each list\n    for i in range(min(len(nums1), len(nums2))):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[i] * nums2[len(nums2)-i-1]\n        if product1 > product2:\n            largest_products.append(product1)\n            count += 1\n        else:\n            largest_products.append(product2)\n            count += 1\n    \n    # Check if the required number of largest products have been found\n    if count == N:\n        return largest_products\n    else:\n        return \"Not enough largest products found.\""
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n    nums1: list of integers\n    nums2: list of integers\n    N: integer, the number of largest products to return\n\n    Returns:\n    list of integers, the N largest products\n    \"\"\"\n\n    # Combine the two lists into one big list\n    combined = nums1 + nums2\n\n    # Sort the combined list in descending order\n    combined.sort(reverse=True)\n\n    # Return the N largest products\n    return combined[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    This function takes in two lists of numbers and a positive integer N.\n    It returns the product of the largest N products from the two lists.\n    \"\"\"\n\n    # Initialize the maximum and minimum values to start with\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    # Loop through the first list of numbers\n    for num in nums1:\n\n        # Calculate the product of the largest N products from the current list\n        current_product = 1\n        for i in range(N):\n            current_product *= max(num - i, 0)\n\n        # Update the maximum and minimum products as necessary\n        max_product = max(max_product, current_product)\n        min_product = min(min_product, current_product)\n\n    # Loop through the second list of numbers\n    for num in nums2:\n\n        # Calculate the product of the largest N products from the current list\n        current_product = 1\n        for i in range(N):\n            current_product *= max(num - i, 0)\n\n        # Update the maximum and minimum products as necessary\n        max_product = max(max_product, current_product)\n        min_product = min(min_product, current_product)\n\n    # Return the product of the largest N products found\n    return max_product * min_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the maximum product and the index of the maximum product\n    max_product = float('-inf')\n    max_index1 = float('-inf')\n    max_index2 = float('-inf')\n    \n    # Loop through each pair of elements in the input lists\n    for i in range(N):\n        # Find the maximum product for the i-th element in each list\n        product1 = max(nums1[i], nums2[i]) * nums1[i]\n        product2 = max(nums1[i], nums2[i]) * nums2[i]\n        if product1 > max_product:\n            max_product = product1\n            max_index1 = i\n        if product2 > max_product:\n            max_product = product2\n            max_index2 = i\n    \n    # Return the index of the maximum product in each list\n    return max_index1, max_index2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Find the minimum value from the two input lists\n    min_val = min(nums1[0], nums2[0])\n\n    # Initialize variables to keep track of the largest products\n    max_product1 = 0\n    max_product2 = 0\n\n    # Loop through the input lists\n    for i in range(N):\n        # Calculate the product of the next factor from each input list\n        factor1 = min_val * nums1[i]\n        factor2 = min_val * nums2[i]\n\n        # Update the largest products based on the calculated product\n        max_product1 = max(max_product1, factor1)\n        max_product2 = max(max_product2, factor2)\n\n    # Return the largest products\n    return max_product1, max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Check if the length of both lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n        return\n    \n    # Initialize the maximum product and the index of the maximum product\n    max_product = float('-inf')\n    max_index = 0\n    \n    # Initialize the products list with zeros\n    products = [0] * N\n    \n    # Loop through each element in the list\n    for i in range(len(nums1)):\n        # Calculate the product of the current element and the remaining elements in the list\n        product = nums1[i] * nums2[i]\n        \n        # If the current product is larger than the maximum product\n        if product > max_product:\n            # Update the maximum product and its index\n            max_product = product\n            max_index = i\n        \n        # Loop through the remaining elements and calculate the product of the current element and each element in the remaining list\n        for j in range(len(nums1)):\n            if j == i:\n                continue\n            \n            # Calculate the product of the current element and the remaining element\n            temp_product = nums1[i] * nums2[j]\n            \n            # If the current product is larger than the current product in the products list\n            if temp_product > products[j]:\n                # Update the current product in the products list\n                products[j] = temp_product\n        \n        # Print the products list\n        print(products)\n    \n    # Print the index of the maximum product\n    print(\"The index of the maximum product is:\", max_index)\n    \n    # Return the index of the maximum product\n    return max_index"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # iterate over the specified number of products to find\n    for i in range(N):\n        # multiply the largest factor of each list and add them together\n        product = nums1[0] * nums2[0]\n\n        # update the largest factor of each list\n        nums1[0] *= nums2[0]\n        nums2[0] *= nums1[0]\n\n    return product"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    This function finds the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of them.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of these two numbers.\n    \"\"\"\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a Python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize leftmost unset bit to -1\n    unset_bit = -1\n    # Iterate over the binary representation of n\n    for i in range(32):\n        # Check if the i-th bit is 1\n        if (n >> i) & 1 == 1:\n            # If it is 1, set unset_bit to i and break\n            unset_bit = i\n            break\n    # If unset_bit is still -1, n is all 1's, return 0\n    if unset_bit == -1:\n        return 0\n    # Set the leftmost unset bit of n to 1\n    n = n & ~(1 << unset_bit)\n    # Return the updated value of n\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the variable to store the unset bits\n    unset_bits = 0\n    # Iterate through the bits in the number\n    for i in range(32):\n        # If the current bit is set to 1, unset it\n        if (n >> i) & 1:\n            n = n & ~(1 << i)\n            # Increment the unset bits variable\n            unset_bits = unset_bits | (1 << i)\n    # Set the left most unset bit\n    n = n | (1 << 0)\n    return n, unset_bits"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the unset bit to 1\n    unset_bit = 1\n    \n    # While the leftmost unset bit is not set, set it to unset_bit\n    while (n & unset_bit) == 0:\n        unset_bit <<= 1\n    \n    # Set the leftmost unset bit to 1\n    n |= unset_bit\n    \n    # Return the updated number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:  # loop while n is even\n        n >>= 1  # right shift n by 1\n    n |= 1  # set the left most bit to 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Set all the bits to 1\n    n = n | (n - 1)\n    # Find the leftmost unset bit\n    i = 0\n    while n & 1 == 0:\n        i += 1\n        n = n >> 1\n    # Set the leftmost unset bit to 1\n    n = n | (1 << i)\n    # Return the updated value\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Find the index of the rightmost set bit \n    rightmost_set_bit = 0\n    while ((1 << rightmost_set_bit) & n) == 0: \n        rightmost_set_bit += 1\n\n    # Shift the number to the left by the index of the rightmost set bit and set the leftmost unset bit to 1 \n    n = (n << rightmost_set_bit) | (1 << rightmost_set_bit)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to keep track of the set bits\n    count = 0\n    \n    # Iterate through the binary representation of n\n    for i in range(32):\n        if (n >> i) & 1 == 1:\n            count += 1\n            \n    # Calculate the number of set bits that are less than the leftmost unset bit\n    unset_bits = 32 - count\n    \n    # Set the leftmost unset bit by shifting the binary representation of n to the left by the number of set bits\n    return (n << unset_bits) & 0xFFFFFFFF"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Convert integer to binary string\n    binary_str = bin(n)[2:]\n    # Initialize the unset bit counter\n    unset_bit_count = 0\n    # Iterate through the binary string from right to left\n    for i in range(len(binary_str) - 1, -1, -1):\n        # Check if the current bit is set\n        if binary_str[i] == '1':\n            # If the bit is set, check if it is the leftmost unset bit\n            if i == len(binary_str) - 1:\n                break\n            else:\n                # If the bit is not the leftmost unset bit, unset it\n                unset_bit_count += 1\n                binary_str[i] = '0'\n        else:\n            # If the bit is not set, check if the next bit is set\n            if i == len(binary_str) - 2:\n                break\n            elif binary_str[i + 1] == '1':\n                # If the next bit is set, unset it and increment the unset bit count\n                unset_bit_count += 1\n                binary_str[i] = '0'\n    # Convert the binary string back to an integer\n    result = int(binary_str, 2)\n    # Return the result\n    return result, unset_bit_count"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize variable to keep track of unset bits\n    unset_bits = 0\n    # Loop through each bit of the integer\n    for bit in bin(n)[2:]:\n        if bit == '1':\n            break\n        else:\n            unset_bits += 1\n    # Set the left most unset bit to 1\n    n |= (1 << (unset_bits - 1))\n    # Return the modified integer\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    v = math.pi * r**2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Formula for volume of cone\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (1/3)*math.pi*r**2*h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    # calculate the volume of the cone\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    # Calculate the volume using formula\n    volume = math.pi * r**2 * h\n\n    # Return the volume\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n\n    Args:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    '''\n\n    # Calculate the volume of the cone using the formula V = 1/3 * \u03c0 * r^2 * h\n    V = (1/3) * math.pi * r**2 * h\n\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone.\n    \"\"\"\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while n > 0:\n        n = n >> 1\n        power = power << 1\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # initialize the highest power of 2 as 1\n    highest_power_of_2 = 1\n\n    # loop through all the numbers from 2 to n\n    while n > 1:\n\n        # check if the number is a power of 2\n        if n % 2 == 0:\n            # if it is, update the highest power of 2\n            highest_power_of_2 = n\n\n            # divide n by 2 to reduce the number of iterations\n            n //= 2\n\n        else:\n            # if it's not, divide n by 2 and increment the highest power of 2\n            n //= 2\n            highest_power_of_2 += 1\n\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1: \n        n = n // 2\n        power += 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 0\n    while n > highest_power:\n        highest_power = highest_power * 2\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize power to 1\n    power = 1\n    # Loop through each power of 2\n    while power <= n:\n        # Check if power is less than or equal to n\n        if power <= n:\n            # Return power if it is\n            return power\n        # Increment power\n        power <<= 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # initialize the highest power of 2 found to be 0\n    highest_power_of_2 = 0\n\n    # loop until the highest power of 2 found is less than or equal to n\n    while highest_power_of_2 <= n:\n        # if the current power of 2 is less than or equal to n, set it as the highest power of 2 found\n        if highest_power_of_2 * 2 <= n:\n            highest_power_of_2 = highest_power_of_2 * 2\n        # otherwise, divide the current power of 2 by 2 and continue the loop\n        else:\n            highest_power_of_2 = highest_power_of_2 / 2\n\n    # return the highest power of 2 found\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1: \n        n = n >> 1 # divide by 2 \n        if n == 0: # if dividing by 2 does not produce a remainder, then n is a power of 2\n            return n\n    return 1 # if n is 1, then it is already a power of 2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Convert n to binary and count the number of 1's in it\n    count = sum(int(digit) for digit in bin(n)[2:])\n    # Find the highest power of 2 that is less than or equal to n\n    return 2**(count)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n\n    # Find the highest power of 2 less than or equal to n\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n\n    return power_of_2 // 2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    This function takes an integer n as input and returns the nth lucas number.\n    The nth lucas number is defined as the sum of the first two numbers in the \n    Fibonacci sequence.\n    '''\n    \n    # define the first two numbers in the Fibonacci sequence\n    a, b = 0, 1\n    \n    # iterate through the sequence until we reach the nth number\n    for i in range(2, n+1):\n        # calculate the nth number in the sequence\n        c = a + b\n        \n        # update the values of a and b for the next iteration\n        a = b\n        b = c\n        \n    return a"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    lucas_numbers = [2]\n    for i in range(1, n):\n        lucas_numbers.append(lucas_numbers[-1] + lucas_numbers[-2])\n    return lucas_numbers[-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1: \n        return n \n    else: \n        lucas_numbers = [0, 2] \n        for i in range(2, n): \n            lucas_numbers.append(lucas_numbers[i-1] + lucas_numbers[i-2]) \n        return lucas_numbers[n-1] "
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes an integer `n` and returns the n-th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        formatted_item = string.format(item)\n        result.append(formatted_item)\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, elem in enumerate(list_):\n        list_[i] = string.format(elem)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Convert the first list to dictionary\n    dict_1 = {key:value for key,value in enumerate(l1)}\n\n    # Convert the second list to dictionary\n    dict_2 = {key:value for key,value in enumerate(l2)}\n\n    # Convert the third list to dictionary\n    dict_3 = {key:value for key,value in enumerate(l3)}\n\n    # Combine the dictionaries into a single dictionary\n    result = dict_1\n    result.update(dict_2)\n    result.update(dict_3)\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i][j]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i*len(l2) + j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Convert first list to dictionary\n    dictionary1 = {}\n    for i in range(len(l1)):\n        dictionary1[l1[i]] = l2[i]\n    \n    # Convert second list to dictionary\n    dictionary2 = {}\n    for i in range(len(l1)):\n        dictionary2[l3[i]] = l2[i]\n    \n    # Convert both dictionaries to nested dictionary\n    nested_dict = {}\n    for key in dictionary1:\n        nested_dict[key] = dictionary1[key]\n        for sub_key in dictionary2:\n            if sub_key in nested_dict[key]:\n                nested_dict[key][sub_key].append(dictionary2[sub_key])\n            else:\n                nested_dict[key][sub_key] = [dictionary2[sub_key]]\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary\n    result = {}\n    \n    # Loop through each list\n    for i in range(len(l1)):\n        # Add the list to the result dictionary with the key as the index number\n        result[i] = l1[i]\n        result[i].update(l2[i])\n        result[i].update(l3[i])\n        \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \n    Parameters:\n    l1: list of integers\n    l2: list of strings\n    l3: list of dictionaries\n    \n    Returns:\n    nested_dict: nested dictionary\n    \"\"\"\n    # Convert the lists to dictionaries\n    d1 = {str(i): num for i, num in enumerate(l1)}\n    d2 = {str(i): word for i, word in enumerate(l2)}\n    d3 = {str(i): {j: value for j, value in enumerate(sublist)} for i, sublist in enumerate(l3)}\n    \n    # Combine the dictionaries into a single dictionary\n    nested_dict = {**d1, **d2, **d3}\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    result = {}\n    \n    # Loop through each list and add its elements to the dictionary\n    for i in range(len(l1)):\n        if i in l2:\n            result[l1[i]] = [l2[i], l3[i]]\n        else:\n            result[l1[i]] = l3[i]\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result_dict = {}\n    \n    # iterate over each list and add its elements to the dictionary\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        # if the key already exists in the dictionary, add the value to its list\n        if key in result_dict:\n            result_dict[key].append(value)\n        # otherwise, add the key and value as a new key-value pair to the dictionary\n        else:\n            result_dict[key] = [value]\n    \n    # iterate over each list and add its elements to the dictionary as sub-keys\n    for i in range(len(l3)):\n        sub_key = l3[i]\n        for key, value in result_dict.items():\n            # check if the sub-key exists as a key in the current dictionary\n            if sub_key in key:\n                # if it does, append the value to the sub-key's list\n                result_dict[key].append(value)\n    \n    # return the final dictionary\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n    l1: list - The first list to be converted.\n    l2: list - The second list to be converted.\n    l3: list - The third list to be converted.\n\n    Returns:\n    dict - A nested dictionary with three keys, where the first key is 'list1', the second key is 'list2', and the third key is 'list3'. The values of each key are lists that were passed as arguments.\n    \"\"\"\n\n    # Create a dictionary to store the lists as values for the three keys\n    dict_lists = {'list1': l1, 'list2': l2, 'list3': l3}\n\n    # Return the dictionary with the lists as values for the three keys\n    return dict_lists"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the final output\n    output = {}\n    \n    # Iterate through each list and add the elements to the output dictionary\n    for i in range(len(l1)):\n        output[l1[i]] = l2[i]\n        output[l1[i]][l3[i]] = l3[i]\n        \n    return output"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n\n    # Base case\n    if n == 2:\n        return 2\n\n    # Recursive case\n    else:\n        # Calculate the sum of the first 4 terms\n        sum_first_four = (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n\n        # Calculate the maximum sum of the given equation\n        max_sum_equation = n + get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n\n        # Return the maximum sum of the given equation\n        return max(max_sum_equation, sum_first_four)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        max_sum = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n        max_sum += n\n        return max(max_sum, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n <= 1:\n        return n\n    \n    elif n <= 4:\n        return (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)) + n\n    \n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(n):\n        if n < 2:\n            return 0\n        else:\n            return max(helper(n//2) + helper(n//3) + helper(n//4) + helper(n//5), n)\n    \n    return helper(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize max_length to the length of the first element in the input list\n    max_length = len(input_list[0])\n\n    # Loop through each element in the input list\n    for element in input_list:\n        # Calculate the length of the current element and update max_length if necessary\n        new_length = len(element)\n        if new_length > max_length:\n            max_length = new_length\n\n    # Return the list with the maximum length\n    return input_list[input_list.index(max(input_list))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # initialize the max_length variable with the first element of the input_list\n    max_length = len(input_list[0])\n    \n    # loop through the remaining elements of the input_list and compare their length to max_length\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    \n    # return the element of the input_list with the maximum length\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = [item]\n        elif len(item) == max_length:\n            result.append(item)\n    \n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    set_tup = set(test_tup)\n    if len(set_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set to store the values in the tuple\n    value_set = set(test_tup)\n\n    # check if the set has any elements\n    if len(value_set) == len(test_tup):\n        # if all elements are unique, return True\n        return True\n    else:\n        # otherwise, return False\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first character in the string that appears only once\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # If all characters in the string appear more than once, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    # find the first non-repeating character by looping through the dictionary and returning the first character with a frequency of 1\n    for char in freq:\n        if freq[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in the string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not already in the dictionary, add it with a frequency of 1\n        if char not in freq:\n            freq[char] = 1\n        # If the character is already in the dictionary, increment its frequency by 1\n        else:\n            freq[char] += 1\n    \n    # Find the first character with a frequency of 1 and return it\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # If no such character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the character count\n    char_count = {}\n\n    # iterate through the string and update the character count\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # iterate through the string again and find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store unique characters\n    char_count = {}\n\n    # Iterate through the string and count the frequency of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through the string again and find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in the string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # loop through the frequency dictionary to find the first non-repeated character\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    # Initialize an empty dictionary to store the frequency of each character in the string\n    freq = {}\n    # Loop through the string and update the frequency of each character\n    for char in str1:\n        if char in freq:\n            # If the character is already in the dictionary, increment its frequency\n            freq[char] += 1\n        else:\n            # If the character is not yet in the dictionary, add it with a frequency of 1\n            freq[char] = 1\n    # Find the first character with a frequency of 1 (this will be the first non-repeating character)\n    for char, count in freq.items():\n        if count == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #initialize a dictionary to store the frequency of each character\n    frequency = {}\n    #loop through the string and update the frequency of each character\n    for char in str1:\n        frequency[char] = frequency.get(char, 0) + 1\n    #loop through the string again and find the first character with a frequency of 1\n    for char in str1:\n        if frequency[char] == 1:\n            return char"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    This function takes a string as input and returns True if the string starts and ends with the same character.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Find the length of the sorted list\n    length = len(numbers)\n\n    # If the length of the list is odd, return the middle number\n    if length % 2 == 1:\n        return numbers[length // 2]\n\n    # If the length of the list is even, return the average of the two middle numbers\n    else:\n        return (numbers[length // 2 - 1] + numbers[length // 2]) / 2\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sort the numbers in ascending order\n    nums = sorted([a, b, c])\n    # calculate the middle index\n    mid_index = len(nums) // 2\n    # if the length of the list is odd, the median is the middle number\n    if len(nums) % 2 == 1:\n        return nums[mid_index]\n    # if the length of the list is even, the median is the average of the middle two numbers\n    else:\n        return (nums[mid_index - 1] + nums[mid_index]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Find the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2-1]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr)//2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\ndef median_numbers(a, b, c):\n    arr = [a, b, c]\n    sorted_arr = quicksort(arr)\n    n = len(sorted_arr)\n    if n % 2 == 0:\n        return (sorted_arr[n//2 - 1] + sorted_arr[n//2]) / 2\n    else:\n        return sorted_arr[n//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Find the middle index of the sorted list\n    mid_index = len(sorted_list) // 2\n\n    # If the length of the list is odd, the median is the middle number\n    if len(sorted_list) % 2 == 1:\n        return sorted_list[mid_index]\n\n    # If the length of the list is even, the median is the average of the middle two numbers\n    else:\n        return (sorted_list[mid_index - 1] + sorted_list[mid_index]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b < c:\n        return (a + c) / 2\n    elif a < c < b:\n        return (a + b) / 2\n    elif b < a < c:\n        return (b + c) / 2\n    else:\n        return (a + b) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as arguments and returns the median of the three numbers.\n\n    :param a: First number\n    :type a: int\n    :param b: Second number\n    :type b: int\n    :param c: Third number\n    :type c: int\n    :return: Median of the three numbers\n    :rtype: int\n    \"\"\"\n\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Find the median index\n    mid = len(numbers) // 2\n\n    # Return the median value\n    if len(numbers) % 2 == 0:\n        return (numbers[mid - 1] + numbers[mid]) // 2\n    else:\n        return numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    # Get the middle number\n    mid_num = sorted_nums[1]\n    # Calculate the median\n    if len(sorted_nums) % 2 == 0:\n        # If the length of the list is even, take the average of the two middle numbers\n        median = (sorted_nums[len(sorted_nums) // 2 - 1] + sorted_nums[len(sorted_nums) // 2]) / 2\n    else:\n        # If the length of the list is odd, take the middle number\n        median = sorted_nums[len(sorted_nums) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers\n    num_list = [a, b, c]\n    num_list.sort()\n\n    # find the median\n    if len(num_list) % 2 == 0:\n        # find the average of the two middle numbers\n        median = (num_list[len(num_list) // 2 - 1] + num_list[len(num_list) // 2]) / 2\n    else:\n        median = num_list[len(num_list) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n    \n    # Get the length of the list\n    n = len(nums)\n    \n    # If the length is odd, the median is the middle number\n    if n % 2 == 1:\n        return nums[n // 2]\n    \n    # If the length is even, the median is the average of the middle two numbers\n    else:\n        return (nums[n // 2 - 1] + nums[n // 2]) / 2"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(int(digit) for digit in str(num))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        sum_digits = sum(digits)\n        result.append(sum_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(int(digit) for digit in str(num))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(str(num)) for num in nums])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        num_str = str(num)\n        sum_digits += sum(int(d) for d in num_str)\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(digit) for num in nums for digit in str(num)])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(d) for d in str(n)) for n in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list where the sum of digits of each number is stored.\n    \"\"\"\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits = sum(int(digit) for digit in str(num))\n        sum_of_digits_list.append(sum_of_digits)\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        # convert the number to a string and iterate over its digits\n        for digit in str(num):\n            sum += int(digit)\n    return sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = test_tup1[0] ^ test_tup2[0]\n    \n    for i in range(1, len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    \n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Convert the tuples to lists to allow bitwise operations\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n\n    # Perform the bitwise xor operation on the lists\n    result = [x ^ y for x, y in zip(test_list1, test_list2)]\n\n    # Convert the result back to a tuple\n    result_tup = tuple(result)\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor = 0\n    for i in range(len(test_tup1)):\n        xor = xor ^ test_tup1[i] ^ test_tup2[i]\n    return xor"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_sum = 0\n    for i in range(len(test_tup1)):\n        xor_sum ^= test_tup1[i] ^ test_tup2[i]\n    return xor_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n\n    Args:\n        test_tup1: Tuple of integers.\n        test_tup2: Tuple of integers.\n\n    Returns:\n        A new tuple with the bitwise xor operation of the input tuples.\n    \"\"\"\n\n    # Find the length of the tuples\n    length = len(test_tup1)\n\n    # Initialize the result tuple with zeros\n    result_tup = [0] * length\n\n    # Perform the bitwise xor operation on each pair of elements in the tuples\n    for i in range(length):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n\n    freq_dict = {}\n\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 0\n        freq[item] += 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in test_list:\n        if i not in freq_dict:\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        freq_dict[tuple(item)] = freq_dict.get(tuple(item), 0) + 1\n    \n    return sum(1 for _ in freq_dict.values())"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list of tuples and returns the number of unique tuples in the list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        sub_result = []\n        for j in range(len(test_tup1[i])):\n            sub_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(sub_result))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # check if the input tuples are of the same size\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The input tuples should be of the same size.\"\n\n    # add the elements of the tuples at each index position\n    for i in range(len(test_tup1)):\n        test_tup1[i] += test_tup2[i]\n\n    # return the updated tuple\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Define two empty lists to store the sum of each tuple element\n    sum_list1 = []\n    sum_list2 = []\n    # Iterate through each element of both tuples\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            # Add the corresponding element of the two tuples and store the result in the corresponding list\n            sum_list1.append(test_tup1[i] + test_tup2[j])\n            sum_list2.append(test_tup2[j] + test_tup1[i])\n    # Return the tuple of sum of each tuple element\n    return tuple(sum_list1), tuple(sum_list2)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The number of elements in the two tuples are not equal.\"\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n                result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n            else:\n                result.append(test_tup1[i] + test_tup2[i])\n        return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        new_tuple = []\n        for j in range(len(test_tup2[i])):\n            new_tuple.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(new_tuple))\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Check if the length of both tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of both input tuples should be equal!\")\n        return None\n\n    # Initialize an empty list to store the result\n    result_list = []\n\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Add the elements of the first tuple and the second tuple at the current index\n        result_list.append(test_tup1[i] + test_tup2[i])\n\n    # Return the result list\n    return result_list"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # Loop through each element in tuple1\n    for item in tuple1:\n        # If element exists in tuple, return True\n        if item in tuplex:\n            return True\n    # If no element in tuple exists, return False\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuple1)): \n        if tuple1[i] in tuplex: \n            print(f\"The element '{tuple1[i]}' exists in the tuple.\")\n            return True\n    print(f\"The element '{tuple1[0]}' does not exist in the tuple.\")\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        print(\"The element {} exists in the tuple.\".format(tuplex))\n    else:\n        print(\"The element {} does not exist in the tuple.\".format(tuplex))"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes in two tuples, tuplex and tuple1, and returns True if the element in tuplex exists in tuple1, and False otherwise.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes in two tuples and returns True if an element exists in the first tuple and False otherwise.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # If x is even\n        return True\n    else: # If x is odd\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Check if the number is even or odd\n    if x % 2 == 0: \n        # If the number is even, its parity is even\n        return \"Even\"\n    else: \n        # If the number is odd, its parity is odd\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    if x % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2!= 0:\n        print(x, \"is an odd number.\")\n    else:\n        print(x, \"is an even number.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'The parity of the number is even'\n    else:\n        return 'The parity of the number is odd'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n\n    # Check if the number is odd or even\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a positive integer x as input and returns True if x is odd and False otherwise.\n    '''\n    if x%2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    \n    # Find the index of the largest digit\n    max_index = digits.index(max(digits))\n    \n    # Reverse the digits from the largest index to the first index\n    digits[max_index:] = digits[:max_index][::-1]\n    \n    # Convert the list of digits back into a number\n    next_bigger_num = int(''.join(str(digit) for digit in digits))\n    \n    # Return the next bigger number\n    return next_bigger_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    max_digit = max(digits)\n    digits = [digit for digit in digits if digit!= max_digit]\n    digits.append(max_digit + 1)\n    return int(''.join(str(digit) for digit in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_digits = len(str(n))\n    rearranged_digits = []\n    for digit in str(n):\n        if int(digit) == 0:\n            rearranged_digits.append('0')\n        else:\n            rearranged_digits.append(str(int(digit) + 1))\n    \n    rearranged_number = ''.join(rearranged_digits)\n    return int(rearranged_number)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # initialize variables\n    bigger = 1000000\n    prev_bigger = 0\n    \n    # loop through each digit in n\n    for digit in str(n):\n        # calculate the next bigger number\n        next_bigger = prev_bigger + int(digit)\n        \n        # update variables\n        if next_bigger > bigger:\n            bigger = next_bigger\n            prev_bigger = int(digit)\n    \n    # return the next bigger number\n    return bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    # Initialize the result to an empty string\n    result = \"\"\n    \n    # Reverse the digits of the input number\n    reversed_n = reversed(str(n))\n    \n    # Loop over the digits of the reversed number\n    for digit in reversed_n:\n        # If the digit is a 9, increment the digit by 1 and append it to the result\n        if digit == \"9\":\n            result += str(int(digit) + 1)\n        # Otherwise, append the original digit to the result\n        else:\n            result += digit\n    \n    # Convert the result back to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    # initialize the next number to the original number\n    next_bigger = n\n    \n    # loop through each digit in the original number\n    for i in str(n):\n        # loop through each digit in the number with the current digit removed\n        for j in str(n):\n            if j!= i:\n                # calculate the sum of the digits of both numbers\n                total = int(i) + int(j)\n                # if the total is greater than the original number, update the next number\n                if total > n:\n                    next_bigger = int(str(n)[0] + str(total)[1])\n                    break\n                \n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    # reverse the string\n    reversed_str = num_str[::-1]\n    # find the position of the largest digit\n    max_pos = reversed_str.find(max(reversed_str))\n    # create the next number by swapping digits at the largest position with digits to the left of the largest position\n    next_num = int(''.join(reversed_str[:max_pos] + reversed_str[max_pos+1:]))\n    return next_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    def rearrange_digits(num):\n        digits = [int(digit) for digit in str(num)]\n        digits.sort(reverse=True)\n        return int(''.join(map(str, digits)))\n\n    max_num = 9**len(str(n))\n    while True:\n        next_bigger = rearrange_digits(n)\n        if next_bigger > n and next_bigger <= max_num:\n            return next_bigger\n        n += 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    while n > 0:\n        n //= 10  # remove the last digit\n        n *= 100  # add a new digit\n\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    s = str(n)\n    # Initialize the variable to store the next bigger number\n    next_bigger = \"\"\n    # Iterate through each digit of the string from right to left\n    for i in range(len(s)-1, -1, -1):\n        # Check if the digit is even or odd\n        if int(s[i]) % 2 == 0:\n            # If it's even, add the digit to the next bigger number\n            next_bigger += str(int(s[i]) // 2)\n        else:\n            # If it's odd, add the digit to the next bigger number (in reverse order)\n            next_bigger += str(int(s[i]) // 2)\n            next_bigger += str((int(s[i]) // 2) * 2)\n    # Convert the next bigger number to an integer and return it\n    return int(next_bigger)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    result = []\n    while min_heap:\n        val, i, j = heapq.heappop(min_heap)\n        result.append((nums1[i], nums2[j]))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap1 = []\n    heap2 = []\n    for num in nums1:\n        if len(heap1) < k:\n            heapq.heappush(heap1, -num)\n        else:\n            heappushpop(heap1, num)\n    for num in nums2:\n        if len(heap2) < k:\n            heapq.heappush(heap2, -num)\n        else:\n            heappushpop(heap2, num)\n    result = []\n    while heap1 and heap2:\n        temp1 = -heapq.heappop(heap1)\n        temp2 = -heapq.heappop(heap2)\n        if temp1 > temp2:\n            result.append(temp1)\n            if len(heap1) < k:\n                heapq.heappush(heap1, -temp1)\n        else:\n            result.append(temp2)\n            if len(heap2) < k:\n                heapq.heappush(heap2, -temp2)\n    return result\n\ndef heappushpop(heap, item):\n    \"\"\"Add item to heap, then remove and return the smallest item from the heap.\"\"\"\n    heapq.heappush(heap, -item)\n    return -heapq.heappop(heap)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Use a min heap to keep track of the smallest k elements\n    heap = []\n    \n    # Initialize two pointers i and j to 0\n    i = 0\n    j = 0\n    \n    # Initialize the result list\n    result = []\n    \n    # While there are still k pairs to find\n    while k > 0:\n        \n        # Find the minimum of the remaining numbers in the first array\n        min1 = min(nums1[i], nums1[j])\n        \n        # If there are still k pairs to find, and the minimum is in the second array\n        if k > 0 and min1 in nums2:\n            \n            # Add the pair (min1, nums2[nums2.index(min1)]) to the result list\n            result.append((min1, nums2[nums2.index(min1)]))\n            \n            # If there are still k pairs to find, and the next smallest number in the first array is larger than the next smallest number in the second array\n            if k > 0 and min1 == nums1[i]:\n                i += 1\n            elif k > 0 and min1 == nums1[j]:\n                j += 1\n            \n            # Decrement k to account for the pair just added\n            k -= 1\n            \n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        while len(heap) < k and heap[0][0] > num1:\n            heapq.heappop(heap)\n        heapq.heappush(heap, (num1, float('inf')))\n        for num2 in nums2:\n            if heap[0][1] < num2:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (num1, num2))\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    min_heap = []\n    heapq.heapify(min_heap)\n\n    for num in nums1:\n        if k == 0:\n            break\n        if len(min_heap) == k:\n            heapq.heappop(min_heap)\n        heapq.heappush(min_heap, -num)\n\n    for num in nums2:\n        if k == 0:\n            break\n        if len(min_heap) == k:\n            heapq.heappop(min_heap)\n        heapq.heappush(min_heap, -num)\n\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = []\n    \n    # Create a dictionary to store the indices of elements from nums1 and nums2\n    index_dict = {}\n    for i in range(len(nums1)):\n        index_dict[nums1[i]] = i\n    \n    # Iterate through nums2\n    for j in range(len(nums2)):\n        # If there are k elements in the heap, remove the smallest element and add the current element to the heap\n        if len(min_heap) == k:\n            heapq.heappop(min_heap)\n            min_heap.append(nums2[j])\n        \n        # If the current element from nums2 is greater than or equal to the smallest element in the heap, add the index of the current element from nums2 to the heap\n        elif nums2[j] >= heapq.heappop(min_heap):\n            heapq.heappush(min_heap, nums2[j])\n    \n    # Create a list to store the k smallest pairs\n    k_smallest_pairs = []\n    \n    # Iterate through the indices of elements from nums1\n    for i in range(len(nums1)):\n        # If there are k elements in the heap, remove the smallest element and add the current element to the heap\n        if len(min_heap) == k:\n            heapq.heappop(min_heap)\n            min_heap.append(nums1[i])\n        \n        # If the current element from nums1 is greater than or equal to the smallest element in the heap, add the index of the current element from nums1 to the heap\n        elif nums1[i] >= heapq.heappop(min_heap):\n            heapq.heappush(min_heap, nums1[i])\n            \n        # If the heap contains k elements and the current element is smaller than the smallest element in the heap, add the current element to the k_smallest_pairs list\n        if len(min_heap) == k:\n            k_smallest_pairs.append((nums1[i], nums2[index_dict[heapq.heappop(min_heap)]]))\n    \n    # Return the k smallest pairs\n    return k_smallest_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if not heap or nums1[i] + nums2[j] > heap[0][0]:\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n                if len(heap) > k:\n                    heapq.heappop(heap)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heapq.heapify(pairs)\n\n    for num1 in nums1:\n        # remove all pairs with num1 greater than num1\n        heapq.heapify(pairs)\n        while pairs and pairs[0][0] > num1:\n            heapq.heappop(pairs)\n\n        # add pairs with num1 as first element\n        for num2 in nums2:\n            pair = (num1+num2, (num1, num2))\n            heapq.heappush(pairs, pair)\n            if len(pairs) == k:\n                break\n\n    return [p[1] for p in pairs]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    heapq.heapify(min_heap)\n    \n    for num in nums1:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, -num)\n        else:\n            if num + -heapq.heappop(min_heap) < -heapq.heappop(min_heap):\n                heapq.heappush(min_heap, -num)\n    \n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(min_heap))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    This function takes three arguments:\n    - nums1: a list of integers\n    - nums2: a list of integers\n    - k: an integer\n\n    This function finds the k smallest pairs of elements from the two lists which have one element from each list.\n    It returns a list of tuples containing the elements and their indices in the original lists.\n\n    The time complexity of this function is O(n * log(k)), where n is the length of the input lists.\n    The space complexity is also O(n * log(k)), since we use a max heap to store the pairs.\n    \"\"\"\n    # Sort the input lists in ascending order\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize an empty list to store the pairs\n    pairs = []\n\n    # Iterate through the first list\n    for i in range(len(nums1)):\n        # Initialize a variable to store the current pair\n        pair = (nums1[i], i)\n\n        # If the heap is not full, add the current pair to the heap\n        if len(pairs) < k:\n            heapq.heappush(pairs, pair)\n        else:\n            # If the heap is full, check if the current pair is smaller than the smallest pair in the heap\n            if pair[0] < pairs[0][0]:\n                # If the current pair is smaller, replace the smallest pair in the heap with the current pair\n                heapq.heappushpop(pairs, pair)\n\n    # Convert the heap into a list of tuples and return it\n    return [(pair[0], nums2.index(pair[1])) for pair in pairs]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sorting the list of tuples\n    list1.sort()\n\n    # Initializing the minimum product and the maximum product\n    min_product = list1[-1] * list1[-2]\n    max_product = list1[0] * list1[1]\n\n    # Looping through the list and updating the minimum product and maximum product\n    for i in range(1, len(list1)-1):\n        curr_product = list1[i] * list1[i+1]\n        min_product = min(min_product, curr_product)\n        max_product = max(max_product, curr_product)\n\n    # Returning the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return \"The list must have at least 2 elements.\"\n    elif len(list1) == 2:\n        return \"The list must have at least 3 elements.\"\n    \n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(reverse=True)\n    result = 1\n    for i in range(len(list1)):\n        result *= list1[i]\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    # initialize min product to be the first element of the first tuple\n    min_product = list1[0][0]\n    \n    # loop through all pairs of tuples within the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the tuples and compare to min product\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    \n    # return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # initialize variables to store minimum product and index of the minimum product tuple\n    min_prod = float('inf')\n    min_prod_idx = 0\n\n    # loop through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples and compare it to the current minimum product\n            prod = list1[i][0] * list1[j][1]\n            if prod < min_prod:\n                min_prod = prod\n                min_prod_idx = (i, j)\n\n    return min_prod_idx"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) % 2!= 0:\n        raise ValueError('List must have an even number of tuples.')\n    \n    # Sort the list of tuples\n    list1.sort(key=lambda x: x[0]*x[1])\n    \n    # Initialize variables to store the minimum product and its corresponding pair\n    min_product = list1[0][0]*list1[0][1]\n    min_pair = list1[0]\n    \n    # Loop through the remaining pairs of tuples\n    for i in range(1, len(list1)):\n        # Calculate the product of the pair and update the minimum product if it's smaller\n        product = list1[i][0]*list1[i][1]\n        if product < min_product:\n            min_product = product\n            min_pair = list1[i]\n    \n    return min_pair"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x: x[1])\n    result = 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result *= min(list1[i][0], list1[j][0])\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Find the minimum product of two tuples in a list of tuples.\n    '''\n    min_product = float('inf') # initialize minimum product to infinity\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of pairs of tuples.\n    \n    Example:\n    min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) # Output: 64\n    '''\n\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(lst):\n    \"\"\"\n    This function takes a list as input and returns the minimum value in the list.\n    \"\"\"\n    # Initialize a variable to store the minimum value\n    min_val = lst[0]\n    \n    # Iterate over the list and compare each value to the minimum value\n    for val in lst:\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(lst):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n\n    :param lst: A list of heterogeneous values\n    :type lst: list\n    :return: The minimum value in the list\n    :rtype: Any\n    \"\"\"\n    if not lst:\n        raise ValueError(\"List is empty\")\n\n    min_val = lst[0]\n    for val in lst:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0] # initialize minimum value as first element of list\n    for i in range(1, len(listval)):\n        if listval[i] < min_val: # check if current element is less than minimum\n            min_val = listval[i] # update minimum value if current element is smaller\n    return min_val # return minimum value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize a variable to store the minimum value\n    min_val = listval[0]\n\n    # Iterate through the list and update the minimum value if a smaller value is found\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for item in listval:\n        if min_val is None or item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if min_val > listval[i]:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if len(listval) == 0:\n        return \"Error: Empty list\"\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        minval = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < minval:\n                minval = listval[i]\n        return minval"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert the first letter of the word to lowercase\n    first_letter = word[0].lower()\n    # Remove the first letter from the word\n    word = word[1:]\n    # Convert the rest of the word to camel case\n    camel_case_word = re.sub(r'_(.)', lambda x: x.group(1).upper(), word)\n    # Return the camel case word\n    return first_letter + camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = re.sub(r'(_[a-z0-9])', lambda m: m.group(1).upper(), word)\n    # Capitalize the first letter\n    first_letter = camel_case[0].upper()\n    # Remove the first underscore\n    camel_case = camel_case[1:]\n    # Add the first letter to the result\n    return f'{first_letter}{camel_case}'"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # split the word into individual parts using underscores\n    parts = re.findall(r'([a-z]+)', word)\n\n    # capitalize the first letter of each part\n    parts = [part.capitalize() for part in parts]\n\n    # join the parts with camel case\n    camel_case = ''.join(parts)\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    prev_char = '_'\n    for char in word:\n        if char!= '_':\n            if prev_char == '_':\n                camel_case += char.upper()\n            else:\n                camel_case += char\n        prev_char = char\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake_case to CamelCase\n    return ''.join(x.capitalize() for x in word.split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_(.)', lambda m: m.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Splitting the word into words\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Converting each word to camel case\n    camel_words = []\n    for word in words:\n        camel_words.append(word.capitalize())\n    # Joining the camel words into a camel case string\n    camel_word = ''.join(camel_words)\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to lowercase\n    word = word.lower()\n    # Remove any non-alphanumeric characters from the word\n    word = re.sub(r'[^\\w\\s]', '', word)\n    # Split the word into words\n    words = word.split('_')\n    # Convert each word to camel case\n    camel_words = [word.capitalize() for word in words]\n    # Join the camel case words back into a single string\n    camel_case = ''.join(camel_words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert snake case to camel case\n    camel_case = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    camel_case = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', camel_case)\n    # remove leading and trailing underscores\n    camel_case = camel_case.lstrip('_').rstrip('_')\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert the snake case string to camel case string\n    camel_case = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2!= 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Convert the list of tuples to a list of lists\n    list2 = [tuple(i) for i in list1]\n\n    # Use slicing to extract the nth element from the list of lists\n    return list2[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # convert the list of tuples to a list of lists of tuples\n    list_of_lists = [list(x) for x in list1]\n    # extract the nth element from the list of lists\n    nth_element = list_of_lists[n-1]\n    # convert the list of lists to a list of tuples and return it\n    return tuple(tuple(x) for x in nth_element)"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if the list is empty\n    if not list1:\n        return \"List is empty.\"\n    \n    # check if the nth element is within the range of the list\n    if n > len(list1) or n <= 0:\n        return \"Invalid index.\"\n    \n    # extract the nth element from the list\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the list is empty or not\n    if not list1:\n        return None\n    # Extract the nth element from the list\n    if n > 0 and n <= len(list1):\n        return list1[n-1]\n    else:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the input list is of type list of tuples\n    if not all(isinstance(x, tuple) for x in list1):\n        raise TypeError(\"Input should be a list of tuples.\")\n\n    # Check if the input is valid\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input should be an integer greater than or equal to 1.\")\n\n    # Extract the nth element from the list\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n    list1 (list): A list of values.\n    list2 (list): A list of values.\n\n    Returns:\n    (bool): True if any value in list1 exists in list2, otherwise False.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function checks whether any value in a sequence exists in another sequence or not.\n    '''\n\n    # creating a set from the list1 and set of list2\n    set_list1 = set(list1)\n    set_list2 = set(list2)\n\n    # checking whether any element in set_list2 is present in set_list1 or not\n    for i in set_list2:\n        if i in set_list1:\n            return True\n\n    # if no overlapping values are found then return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there exists a value in the first list that exists in the second list, and False otherwise.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and checks whether any value in one sequence is also in the other.\n    The function returns a boolean value indicating whether there is at least one overlapping value or not.\n    '''\n\n    # check if the input sequences are of the same length\n    if len(list1)!= len(list2):\n        return False\n    \n    # iterate over the first sequence and check if each value is also in the second sequence\n    for val1 in list1:\n        if val1 in list2:\n            return True\n    \n    # if no overlapping values were found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            print(value, \"exists in both lists.\")\n        else:\n            print(value, \"does not exist in both lists.\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # loop through the first sequence\n    for item1 in list1:\n        # check if the item exists in the second sequence\n        if item1 in list2:\n            # if it does, return True\n            return True\n    # if no item was found in the second sequence, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as inputs and returns True if there is any value in the first list that is also present in the second list, and False otherwise.\n    \"\"\"\n    # check if any value in list1 is also present in list2\n    for value in list1:\n        if value in list2:\n            return True\n    # if no value is found in either list, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    # To store the maximum and minimum values of the array\n    max_val = arr[0]\n    min_val = arr[0]\n\n    # To store the product of the maximum and minimum values\n    max_product = min_product = arr[0]\n\n    # Loop through the array\n    for i in range(1, len(arr)): \n        # Update the maximum and minimum values\n        if arr[i] > max_val: \n            max_product = max_val * min_val\n            max_val = arr[i]\n            min_product = min_val * arr[i]\n        elif arr[i] < min_val: \n            min_product = max_val * min_val\n            min_val = arr[i]\n            max_product = max_val * arr[i]\n        else: \n            max_product = max(max_val * arr[i], min_val * arr[i])\n            min_product = min(max_val * arr[i], min_val * arr[i])\n\n    # Return the pair with the highest product\n    return max_product, min_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    min_product = float('inf')\n    for i in range(len(arr)):\n        if arr[i] < min_product:\n            min_product = arr[i]\n        if arr[i] > max_product:\n            max_product = arr[i]\n    return max_product * min_product\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = (float('-inf'), float('-inf'))\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            product = arr[i] * arr[j]\n            if product > max_pair[0]:\n                max_pair = (product, (arr[i], arr[j]))\n            elif product > max_pair[1]:\n                max_pair = (arr[i], arr[j])\n    return max_pair[1]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max(max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = []\n    min_product = float('inf')\n    min_pair = []\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            \n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n            \n            elif product < min_product:\n                min_product = product\n                min_pair = [arr[i], arr[j]]\n    \n    return max_pair, min_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return \"Array should have at least two elements.\"\n\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        current_product = arr[i] * arr[i - 1]\n        if current_product > max_product:\n            max_product = current_product\n            max_pair = (arr[i], arr[i - 1])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # sort the given array in ascending order\n    arr.sort()\n\n    # find the indices of the maximum and minimum values\n    max_idx = arr.index(arr[-1])\n    min_idx = arr.index(arr[0])\n\n    # find the maximum and minimum products\n    max_product = arr[max_idx] * arr[min_idx]\n    min_product = arr[max_idx] * arr[max_idx]\n\n    # find the indices of the second maximum and second minimum values\n    second_max_idx = max_idx - 1\n    second_min_idx = max_idx + 1\n\n    # if the second maximum index is negative, set it to zero\n    if second_max_idx < 0:\n        second_max_idx = 0\n\n    # if the second minimum index is equal to or greater than the length of the array, set it to the length of the array\n    if second_min_idx >= len(arr):\n        second_min_idx = len(arr) - 1\n\n    # find the second maximum and second minimum products\n    second_max_product = arr[second_max_idx] * arr[second_min_idx]\n    second_min_product = arr[second_min_idx] * arr[second_max_idx]\n\n    # return the pair with the highest product\n    if max_product > second_max_product:\n        return (arr[max_idx], arr[min_idx])\n    elif max_product < second_max_product:\n        return (arr[second_max_idx], arr[second_min_idx])\n    else:\n        return (arr[max_idx], arr[min_idx])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_so_far * arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return (max_so_far, max_ending_here)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples with the common first element.\n    '''\n\n    # Create a dictionary to store the count of each element in the input list\n    count_dict = {}\n    for i in range(len(Input)):\n        if Input[i][0] in count_dict:\n            count_dict[Input[i][0]] += 1\n        else:\n            count_dict[Input[i][0]] = 1\n\n    # Find the common first element in the input list\n    common_first = None\n    for i in range(len(Input)):\n        if count_dict[Input[i][0]] == len(Input):\n            common_first = Input[i][0]\n\n    # Create a new list to store the tuples with the common first element\n    output_list = []\n    for i in range(len(Input)):\n        if Input[i][0] == common_first:\n            output_list.append(Input[i])\n\n    return output_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    # create an empty dictionary to store common elements\n    common_dict = {}\n\n    # iterate over the input list of tuples\n    for tup in Input:\n        # get the first element of the tuple\n        first_elem = tup[0]\n\n        # if the first element is already in the dictionary, update the count\n        if first_elem in common_dict:\n            common_dict[first_elem] += 1\n        # otherwise, add the first element to the dictionary with a count of 1\n        else:\n            common_dict[first_elem] = 1\n\n    # create a list of tuples containing the common elements and their counts\n    common_list = [(key, value) for key, value in common_dict.items()]\n\n    # sort the list in descending order of count\n    common_list.sort(key=lambda x: x[1], reverse=True)\n\n    # return the first tuple in the sorted list, which is the common element\n    return common_list[0]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element = Input[0][0]\n    common_tuples = [t for t in Input if t[0] == first_element]\n    return common_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for tup in Input:\n        if tup[0] in common_elements:\n            common_elements.remove(tup[0])\n        else:\n            common_elements.append(tup[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element_list = []\n    for i in Input:\n        first_element = i[0]\n        if first_element not in first_element_list:\n            first_element_list.append(first_element)\n    return first_element_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # convert the input list to set to remove duplicates\n    unique_set = set(Input)\n    \n    # iterate over the unique set of tuples and check if the first element is in all the tuples\n    for tup in unique_set:\n        if tup[0] in Input:\n            return tup[0]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = []\n    for i in range(len(Input)):\n        first = Input[i][0]\n        if first not in common_first:\n            common_first.append(first)\n    return common_first\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n    for i in Input:\n        if i[0] in common_elements:\n            common_elements.append(i[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create a dictionary to store common first elements and their count\n    common_elements = {}\n\n    # Iterate through the list of tuples\n    for i in Input:\n        # Get the first element of the tuple\n        first_element = i[0]\n\n        # If the first element is not in the dictionary, add it with a count of 1\n        if first_element not in common_elements:\n            common_elements[first_element] = 1\n        # Otherwise, increment the count of the first element in the dictionary\n        else:\n            common_elements[first_element] += 1\n\n    # Find the maximum count and corresponding element\n    max_count = 0\n    max_element = None\n    for key in common_elements:\n        if common_elements[key] > max_count:\n            max_count = common_elements[key]\n            max_element = key\n\n    # Return the maximum count and element\n    return (max_count, max_element)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element = None\n    for item in Input:\n        if first_element is None:\n            first_element = item[0]\n        else:\n            if item[0] == first_element:\n                return first_element\n            elif item[0] < first_element:\n                first_element = item[0]\n    return first_element\n"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    for ele in lst:\n        if len(str(ele)) > max_len:\n            max_len = len(str(ele))\n            max_ele = ele\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # create an empty dictionary to store the length of each element\n    length_dict = {}\n\n    # loop through each element of the list\n    for element in lst:\n        # if the element has not been seen before, add it to the dictionary with length 1\n        if element not in length_dict:\n            length_dict[element] = 1\n        # if the element has already been seen before, increment its length in the dictionary\n        else:\n            length_dict[element] += 1\n\n    # find the element with maximum length\n    max_length = max(length_dict.values())\n    for element, length in length_dict.items():\n        if length == max_length:\n            return element\n\n    # if no element has maximum length, return None\n    return None"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as an argument and returns the element of the list \n    having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(word) for word in lst)\n    max_word = [word for word in lst if len(word) == max_len][0]\n    return max_word"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # Initialize variables to keep track of maximum and minimum lengths \n    max_len = 0 \n    max_elem = None \n\n    # Loop through each element of the list \n    for elem in lst: \n        \n        # Check if the length of the element is greater than the maximum length \n        if len(elem) > max_len: \n            \n            # Update the maximum length and corresponding element \n            max_len = len(elem) \n            max_elem = elem \n\n    # Return the maximum length and corresponding element \n    return max_len, max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Round every number in the list\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        \n    # Calculate the total sum\n    total_sum = sum(list1)\n    \n    # Print the result\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    total_sum *= len(list1)\n    print(\"The rounded and summed list is:\", total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes a list of numbers as input and rounds every number of the list.\n    It then prints the total sum of the rounded numbers multiplied by the length of the list.\n    '''\n    rounded_lst = [round(num) for num in lst]\n    total_sum = sum(rounded_lst)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    total *= len(list1)\n    print(total)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum(round(x) for x in list1)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum([round(num) for num in list1])\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += round(i)\n    print(sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0 \n    for i in range(1, n+1): \n        sum += i**3 \n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    even_nums = []\n    for i in range(1, n+1, 2):\n        even_nums.append(i)\n    return sum(even_nums)**3"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initializing sum to zero\n    sum = 0\n    # initializing a variable to store cube of even numbers\n    cube = 0\n    # loop from 0 to n-1\n    for i in range(0, n):\n        # checking if the number is even\n        if i%2 == 0:\n            # adding cube of even number to sum variable\n            sum += i**3\n            # adding cube of even number to cube variable\n            cube += i**3\n    # returning the cube sum\n    return sum - cube"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**3\n        i += 1\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    :param test_tup: The tuple to concatenate.\n    :param delimiter: The delimiter to use between the elements of the tuple.\n    :return: The concatenated string of the tuple.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    # Define the delimiter\n    delimiter = \",\"\n\n    # Initialize an empty string to store the concatenated string\n    concatenated_string = \"\"\n\n    # Loop through each element in the tuple\n    for element in test_tup:\n        # If the element is not the last element in the tuple, add the delimiter to the string\n        if element!= test_tup[-1]:\n            concatenated_string += str(element) + delimiter\n        else:\n            # If the element is the last element in the tuple, simply add it to the string\n            concatenated_string += str(element)\n\n    # Return the concatenated string\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_str = ''\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join([str(x) for x in test_tup])"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i])\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    This function takes a tuple of strings and concatenates each element of the tuple by a delimiter.\n    '''\n    concatenated_string = ''\n    for i in range(len(test_tup)):\n        concatenated_string += str(test_tup[i])\n        if i!= len(test_tup) - 1:\n            concatenated_string += delimiter\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    if n == 1:\n        return 1\n    else:\n        return (find_Average_Of_Cube(n-1) + (n-1)**3) / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(1, n+1):\n        sum_cube += i*i*i\n    average = sum_cube/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0  \n    for i in range(n):  \n        sum_of_cubes += i*i*i  \n    avg_of_cubes = sum_of_cubes / n  \n    return avg_of_cubes  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1,n+1):\n        sum_cubes += i*i*i\n    average = sum_cubes/float(n)\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    average = sum/count\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    count = 0\n\n    for i in range(1, n+1):\n        cube_sum += i**3\n        count += 1\n\n    average_of_cubes = cube_sum/count\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []  \n    for i in range(1, n+1):  \n        cubes.append(i ** 3)  \n    return sum(cubes) / len(cubes)  "
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i, j in enumerate(test_tuple):\n        rear_list.append(j[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if i % 2 == 1:\n            rear_list.append(test_tuple[i])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Create an empty list to store the rear index elements\n    rear_elements = []\n    \n    # Loop through each string in the tuple\n    for string in test_tuple:\n        # Get the rear index of the string\n        rear_index = len(string) - 1\n        \n        # Extract the rear index element of the string and append it to the list\n        rear_elements.append(string[rear_index])\n    \n    # Return the list of rear index elements\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[1])\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            if all(x in sublist for sublist in list1[i:j]):\n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for i in list1: \n        if x in i: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(lst, elem):\n    '''\n    Count the number of sublists in lst containing the element elem.\n    '''\n    count = 0\n    for sublist in lst:\n        if elem in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for lst in list1:\n        if x in lst:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0 \n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function filters odd numbers from a given list of numbers.\n    '''\n    odd_numbers = [num for num in nums if num % 2!= 0]\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert yyyy-mm-dd format to dd-mm-yyyy format\n    dt_format = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\2-\\1-\\3', dt)\n    return dt_format"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_date = f\"{day}-{month}-{year}\"\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern for date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # use the pattern to match the input date string\n    match = re.match(pattern, dt)\n\n    # check if the match was successful\n    if match:\n        # extract the year, month, and day from the match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # convert the day, month, and year to the desired format\n        new_date = f'{day}-{month}-{year}'\n\n        return new_date\n    else:\n        # if the input date string doesn't match the pattern, return the original string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Convert date to yyyy-mm-dd format\n    yyyy_mm_dd_format = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(yyyy_mm_dd_format, dt)\n    if match:\n        yyyy = match.group(1)\n        mm = match.group(2)\n        dd = match.group(3)\n\n        # Convert date to dd-mm-yyyy format\n        dd_mm_yyyy_format = r'(\\d{2})-(\\d{2})-(\\d{4})'\n        dd_mm_yyyy = dt.replace(yyyy, '').replace(mm, '').replace(dd, '')\n        return re.sub(dd_mm_yyyy_format, r'\\2-\\1-\\3', dd_mm_yyyy)\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the desired format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use re.sub to replace the pattern with a new string\n    new_dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    \n    return new_dt\n"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # use the regular expression search to match the pattern in the date string\n    match = re.search(pattern, dt)\n    \n    # if the pattern is found, use string formatting to convert the date to dd-mm-yyyy format\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # regex pattern to match yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # regex pattern to match dd-mm-yyyy format\n    pattern2 = r'\\d{2}-\\d{2}-\\d{4}'\n    \n    # find the first match of the yyyy-mm-dd pattern in the date string\n    match = re.search(pattern, dt)\n    \n    # if no match is found, return the original date string\n    if not match:\n        return dt\n    \n    # extract the year, month, and day from the matched pattern\n    year, month, day = match.group(0).split('-')\n    \n    # join the day, month, and year in the new format\n    new_format = day + '-' + month + '-' + year\n    \n    # return the new format\n    return new_format"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.sub() method to replace the pattern with the desired format\n    return re.sub(pattern, r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace hyphens with slashes\n    dt = re.sub(r'[-]', '/', dt)\n    # Convert to list\n    dt_list = list(map(int, dt.split('/')))\n    # Reverse the list\n    dt_list.reverse()\n    # Join the list with slashes and convert to string\n    dt_formatted = '/'.join(map(str, dt_list))\n    return dt_formatted"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Calculate the gap sequence\n    gap = n // 2\n\n    while gap > 0:\n        # Insertion sort for this gap size\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Sort the given array using Shell Sort algorithm.\n    '''\n    n = len(my_list)\n    # Calculate the largest gap\n    gap = n // 2\n    while gap > 0:\n        # Move the gap to the next position\n        for i in range(gap, n):\n            # Swap adjacent elements if they are in wrong order\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap by half\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the two tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same number of elements.\")\n        return\n    \n    # Extract the elementwise and tuples from the two input tuples\n    and_tup = tuple(elem1 and elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n    \n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        and_tup = tuple(x & y for x, y in zip(test_tup1, test_tup2))\n        return and_tup\n    else:\n        return \"Both tuples should have the same length.\""
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize a new tuple to store the elementwise and tuples\n    and_tup = ()\n\n    # Extract the elementwise and tuples from the given two tuples\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n\n    # Return the extracted and tuples\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple([x and y for x, y in zip(test_tup1, test_tup2)])\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup = and_tup + (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return None\n    x = -b/2a\n    if x == 0:\n        return None\n    return x\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta > 0:\n        root1 = (-b + math.sqrt(delta))/(2*a)\n        root2 = (-b - math.sqrt(delta))/(2*a)\n    else:\n        root1 = (-b)/(2*a)\n        root2 = (-b)/(2*a)\n    return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Defining the equation of the parabola \n    # y = ax^2 + bx + c \n    y = a*x**2 + b*x + c\n    \n    # Finding the directrix of the parabola \n    directrix = -b/(2*a)\n    \n    # Returning the value of the directrix\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        return (-b + discriminant**0.5)/(2*a)\n    elif discriminant == 0:\n        return (-b)/(2*a)\n    else:\n        return -b/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    x = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    return x"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Check if the quadratic equation has a solution.\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"There are no real solutions.\"\n    elif discriminant == 0:\n        return \"The directrix is x = \" + str((-b)/(2*a))\n    else:\n        return \"The directrix is x1 = \" + str((-b + discriminant**0.5)/(2*a)) + \", x2 = \" + str((-b - discriminant**0.5)/(2*a))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the two real roots\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        \n        # Sort the roots in increasing order\n        if x1 < x2:\n            x1, x2 = x2, x1\n        \n        return x1, x2\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        print(\"The parabola has no real root.\")\n    elif delta == 0:\n        print(\"The directrix is\", -b/(2*a))\n    else:\n        x1 = (-b + delta**0.5) / (2*a)\n        x2 = (-b - delta**0.5) / (2*a)\n        print(\"The directrix is\", -b/(2*a), \"and it is equal to\", x1, \"and\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        \n        return f\"The directrix of the parabola is {root1:.2f} or {root2:.2f} depending on which root is closer to the origin.\"\n    else:\n        return \"The parabola does not have a real solution because it has a complex root.\""
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2 and elem not in list1[:list1.index(elem)]:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # check if both lists have the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # create a set of all elements in list1\n    set1 = set(list1)\n\n    # loop through list2 and check if each element is in set1\n    for element in list2:\n        if element in set1:\n            return True\n\n    # if we make it here, there was no common element\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # creating a set to store the common elements\n    common_set = set()\n\n    # iterating over both lists and adding common elements to the set\n    for element in list1:\n        if element in list2 and element not in common_set:\n            common_set.add(element)\n\n    # checking if the set is not empty, indicating a common element\n    return bool(common_set)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    # Initialize a variable to store the common element\n    common = None\n    \n    # Iterate over each element of both lists\n    for i in list1:\n        if i in list2:\n            # If an element is found in both lists, update the common variable\n            common = i\n    \n    # If the common variable is still None after iterating over all elements, there is no common element\n    if common is None:\n        return False\n    else:\n        return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # convert both lists to sets to remove duplicates and check if they have any intersection\n    return len(set(list1) & set(list2)) > 0"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n    \n    # Calculate the median of the trapezium using the area formula\n    median = (base1 + base2 + height) / 2\n    \n    # Calculate the difference between the area and the median\n    diff = abs(area - median)\n    \n    # Return the median length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function takes the base1, base2, and height of a trapezium as inputs and\n    returns the median length of the trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n    \n    # Calculate the semi-perimeter of the trapezium\n    semi_perimeter = (base1 + base2 + height) / 2\n    \n    # Calculate the median length using the trapezium theorem\n    median = area / semi_perimeter\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2\n\n    # Calculate the height of the trapezium\n    area = area * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2\n\n    # Calculate the semi-perimeter of the trapezium\n    semi_perimeter = 0.5 * perimeter\n\n    # Calculate the diameter of the trapezium\n    diameter = 0.5 * semi_perimeter\n\n    # Calculate the difference between the area of the trapezium and its diameter\n    diff = area - diameter\n\n    # Return the median of the two base lengths\n    return (base1 + base2) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Calculate the median length of a trapezium using the trapezoidal rule.\n    '''\n\n    # Calculate the areas of the trapezium sides\n    side1 = base1 / 2\n    side2 = base2 / 2\n    side3 = height / 2\n\n    # Calculate the areas of the trapezium base and top\n    area_base = base1 * base2\n    area_top = base1 + base2 + height\n\n    # Calculate the area of the trapezium\n    area_trapezium = area_base + area_top\n\n    # Calculate the areas of the trapezium sides\n    area_side1 = side1 * side3\n    area_side2 = side2 * side3\n\n    # Calculate the areas of the trapezium diagonals\n    area_diagonal1 = side1 ** 2\n    area_diagonal2 = side2 ** 2\n\n    # Calculate the total area of the trapezium\n    total_area = area_trapezium - area_side1 - area_side2 - area_diagonal1 - area_diagonal2\n\n    # Calculate the area of the median side of the trapezium\n    median_area = (area_diagonal1 + area_diagonal2) / 2\n\n    # Calculate the length of the median side of the trapezium\n    median_side = (area_base * area_side1 + area_top * area_side2 + median_area) / total_area\n\n    # Calculate the length of the trapezium itself\n    trapezium_length = 2 * median_side\n\n    return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2 * height\n    median_length = area * 2\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n\n    # Calculate the lengths of the sides of the trapezium\n    side1 = 0.5 * base1\n    side2 = 0.5 * base2\n\n    # Calculate the height of the trapezium\n    trapezium_height = 2 * height\n\n    # Calculate the area of the trapezium\n    trapezium_area = area1 + area2\n\n    # Calculate the semi-perimeter of the trapezium\n    semi_perimeter = (side1 + side2) / 2\n\n    # Calculate the perimeter of the trapezium\n    perimeter = side1 + side2 + trapezium_height\n\n    # Calculate the area of the parallelogram made from the two base and the height of the trapezium\n    parallelogram_area = 0.5 * base1 * trapezium_height\n\n    # Calculate the length of the side of the parallelogram that is perpendicular to the trapezium\n    angle = (side1 + side2) / trapezium_height\n    paral_side = 0.5 * side1 * math.sin(math.pi / 4) / math.sin(math.pi / 4 + angle)\n\n    # Calculate the area of the parallelogram\n    paral_area = 0.5 * paral_side * trapezium_height\n\n    # Calculate the length of the other side of the parallelogram\n    paral_other_side = 0.5 * side1 * math.sin(math.pi / 4) / math.sin(math.pi / 4 - angle)\n\n    # Calculate the area of the other side of the parallelogram\n    paral_other_area = 0.5 * paral_other_side * trapezium_height\n\n    # Calculate the area of the triangle made from the parallelogram\n    triangle_area = 0.5 * paral_area * trapezium_height\n\n    # Calculate the area of the triangle made from the trapezium\n    tri_area = (area1 + area2) / 2\n\n    # Calculate the area of the trapezium that is not a part of the triangle\n    area_difference = trapezium_area - tri_area\n\n    # Calculate the area of the trapezium that is the difference between the trapezium and the triangle\n    area_inside_triangle = trapezium_area - area_difference\n\n    # Calculate the area of the trapezium that is inside the triangle\n    area_inside_triangle = area_inside_triangle - triangle_area\n\n    # Calculate the percentage of the trapezium area that is inside the triangle\n    percent_inside_triangle = area_inside_triangle / trapezium_area * 100\n\n    # Calculate the angle of the right triangle made from the parallelogram\n    angle_paral = math.degrees(math.acos((paral_area + triangle_area - trapezium_area) / (2 * paral_area * triangle_area)))\n\n    # Calculate the angle of the left triangle made from the parallelogram\n    angle_paral_left = math.degrees(math.acos((paral_other_area + triangle_area - trapezium_area) / (2 * paral_other_area * triangle_area)))\n\n    # Calculate the angle of the right triangle made from the trapezium\n    angle_tri = math.degrees(math.acos((area1 + area2 - area_inside_triangle) / (2 * area1 * area2)))\n\n    # Calculate the angle of the left triangle made from the trapezium\n    angle_tri_left = math.degrees(math.acos((area1 + area2 - area_inside_triangle) / (2 * area1 * area2)))\n\n    # Calculate the area of the trapezium that is outside the triangle\n    area_outside_triangle = trapezium_area - area_inside_triangle - area_difference\n\n    # Calculate the percentage of the trapezium area that is outside the triangle\n    percent_outside_triangle = area_outside_triangle / trapezium_area * 100\n\n    # Calculate the distance from the center of the trapezium to the center of the left parallelogram"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the length of the base and height\n    length_base = base1 + base2\n    length_height = height\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 * height + base2 * height)\n\n    # Find the lengths of the two halves of the trapezium\n    half_length_base = length_base / 2\n    half_length_height = length_height / 2\n\n    # Calculate the lengths of the left and right halves of the trapezium\n    left_length = half_length_height - half_length_base\n    right_length = half_length_base - half_length_height\n\n    # If the area is odd, the median is half the area\n    if area % 1!= 0:\n        median = area / 2\n    else:\n        # If the area is even, the median is the average of the two halves of the trapezium\n        median = (left_length + right_length) / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the height of the trapezium\n    trapezium_height = 2 * height\n\n    # Calculate the area of the trapezium\n    trapezium_area = (base1 + base2) * trapezium_height / 2\n\n    # Calculate the semi-perimeter of the trapezium\n    trapezium_semi_perimeter = (base1 + base2) / 2\n\n    # Calculate the height of the triangle with the semi-perimeter and area\n    triangle_height = trapezium_semi_perimeter ** 2\n\n    # Calculate the area of the triangle with the semi-perimeter and area\n    triangle_area = (triangle_height * base1 * base2) / 2\n\n    # Calculate the difference between the area of the trapezium and the area of the triangle\n    trapezium_area_difference = abs(trapezium_area - triangle_area)\n\n    # Find the median of the two areas\n    median_area = (trapezium_area + triangle_area) / 2\n\n    # Calculate the area of the triangle with the semi-perimeter and the median area\n    triangle_area_with_median = triangle_height * base1 * base2\n\n    # Calculate the median length of the trapezium\n    median_trapezium_length = (triangle_area_with_median - trapezium_area_difference) / 2\n\n    return median_trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n    \n    # Calculate the lengths of the sides of the trapezium\n    s1 = 0.5 * base1 * (height - 0.5 * base2)\n    s2 = 0.5 * base2 * (height - 0.5 * base1)\n    \n    # Calculate the lengths of the middle trapezium\n    m1 = 0.5 * base1 * (height - 0.5 * base2)\n    m2 = 0.5 * base2 * (height - 0.5 * base1)\n    \n    # Calculate the distance from the middle of the trapezium to the top and bottom\n    d1 = 0.5 * base1 + 0.5 * base2\n    d2 = 0.5 * base1 - 0.5 * base2\n    \n    # Calculate the height of the trapezium\n    h = 0.5 * height\n    \n    # Calculate the lengths of the three halves of the trapezium\n    a1 = s1 - m1 - d1\n    a2 = s2 - m2 - d2\n    a3 = a1 + a2\n    \n    # Find the median length of the trapezium using the formula:\n    # median = (area / 2) * (base1 + 0.5 * (base2 + height))\n    median = area * (0.5 * (base1 + 0.5 * (base2 + height)))\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium using the trapezoidal rule\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Calculate the length of the base1 using the trapezoidal rule\n    base1_length = (0.5 * base1 * height) ** 2 / area\n    # Calculate the length of the base2 using the trapezoidal rule\n    base2_length = (0.5 * base2 * height) ** 2 / area\n    # Calculate the length of the trapezium using the trapezoidal rule\n    trapezium_length = 0.5 * (base1_length + base2_length)\n    # Calculate the difference between the length of the trapezium and the length of the longest base\n    difference = abs(trapezium_length - max(base1_length, base2_length))\n    # Find the median using the difference\n    median_length = max(base1_length, base2_length) + difference\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(f\"The number {number} is greater than {num}.\")\n            break\n    else:\n        print(f\"The number {number} is not greater than any element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The entered number is greater than all elements in the array.\")\n            return\n    print(\"The entered number is less than or equal to all elements in the array.\")\n    return"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > max(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    if number > arr[0]:\n        print(\"The entered number is greater than the first element of the array.\")\n        return True\n    else:\n        print(\"The entered number is not greater than the first element of the array.\")\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > max(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater_than = False\n    for element in arr:\n        if element > number:\n            greater_than = True\n            break\n    return greater_than"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b){1,}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b)+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba(?P<num_b>[1-9][0-9]*)b\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]+')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba(?=\\w*b\\w*)\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Find the last digit of the number\n    last_digit = n % 10\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Initialize an empty list to store the negative numbers\n    neg_list = []\n\n    # Loop through each element in the list\n    for num in list1:\n        # If the element is negative, add it to the negative list\n        if num < 0:\n            neg_list.append(num)\n\n    # Return the negative list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(lst):\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as an argument and returns a new list with all negative numbers.\n    \"\"\"\n    neg_lst = []\n    for i in lst:\n        if i < 0:\n            neg_lst.append(i)\n    return neg_lst"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_chars = []\n    for char in str1:\n        if int(char) % 2 == 1:\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            if char.isupper():\n                if char % 2!= 0:\n                    new_str += char.lower()\n            else:\n                if char % 2!= 0:\n                    new_str += char.upper()\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is odd, add it to the result\n        if int(char) % 2 == 1:\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is odd, add it to the result string\n        if char % 2!= 0:\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # convert the string to a list of characters\n    char_list = list(str1)\n    # initialize an empty list to store the even characters\n    even_chars = []\n    # iterate over the characters in the list\n    for char in char_list:\n        # check if the character is odd (i.e., divisible by 2)\n        if char % 2!= 0:\n            # if it is, add it to the even_chars list\n            even_chars.append(char)\n    # convert the even_chars list back to a string and return it\n    return ''.join(even_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += str(char)\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if char.isalnum(): # checks if the character is alphanumeric (a letter or a digit)\n            if int(char) % 2 == 0: # checks if the digit is odd (divisible by 2)\n                result += char # adds the alphanumeric character to the result if it's odd\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit() or (char.isalpha() and ord(char) % 2!= 0)])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Create a new string to store the even characters\n    new_str = ''\n    # Loop through each character in the original string\n    for char in str1:\n        # If the character is even, append it to the new string\n        if char % 2 == 0:\n            new_str += char\n        # If the character is odd, skip it\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i+1:j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list or (test_list[j][0], test_list[i][1]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                bidirectional_count += 1\n    return bidirectional_count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]) or tuple(test_list[j]) == tuple(test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    # Initialize a dictionary to store the count of bidirectional pairs\n    count = {}\n\n    # Loop through the list and update the count dictionary\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if (test_list[i], test_list[j]) in count:\n                    count[(test_list[i], test_list[j])] += 1\n                else:\n                    count[(test_list[i], test_list[j])] = 1\n\n    # Return the count of bidirectional pairs\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n\n    :param test_list: A list of tuples.\n    :return: A tuple of two integers, where the first integer is the number of bidirectional tuple pairs in the list, and the second integer is the total number of tuple pairs in the list.\n    \"\"\"\n    count_bidir = 0\n    count_total = 0\n    for pair in test_list:\n        count_total += 1\n        for other_pair in test_list:\n            if pair!= other_pair and pair[::-1] == other_pair:\n                count_bidir += 1\n    return (count_bidir, count_total)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Count bidirectional tuple pairs in a list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Convert the list to a string using the join() method\n    result = ''.join(map(str, L))\n    # Convert the string to an integer and return it\n    return int(result)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # join all elements of the list into a single string\n    joined_str = ''.join([str(x) for x in L])\n    # convert the joined string to a single integer\n    single_num = int(joined_str)\n    # return the single integer\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for i in L:\n        total *= i\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result = result * num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # Initialize the sum to 0\n    total = 0\n    \n    # Iterate through each element in the list\n    for num in L:\n        \n        # Check if the number is divisible by 3 and 5\n        if num % 3 == 0 and num % 5 == 0:\n            \n            # If the number is divisible by both 3 and 5, add it to the total\n            total += num\n            \n    # Return the total\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Check if the input list only contains integers\n    if not all(isinstance(x, int) for x in L):\n        raise ValueError(\"Input list must contain only integers\")\n\n    # Convert the list to a single integer by multiplying all its elements together\n    result = 1\n    for x in L:\n        result *= x\n\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Use regular expressions to find the first adverb\n    adverb = re.search(r'\\b([a-z]+)s\\b', text)\n\n    # Check if the adverb was found\n    if adverb:\n        # Extract the adverb and its position from the text\n        adverb_text = adverb.group()\n        adverb_position = text.find(adverb_text)\n\n        # Return a dictionary with the adverb and its position\n        return {'adverb': adverb_text, 'position': adverb_position}\n    else:\n        # Return a dictionary with an empty string for both the adverb and position if the adverb was not found\n        return {'adverb': '', 'position': -1}"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the sentences in the text\n    sentences = re.findall(r'[.?!]+', text)\n    # Initialize an empty list for adverbs and positions\n    adverbs = []\n    positions = []\n    \n    # Iterate through each sentence in the list\n    for sentence in sentences:\n        # Find all the adverbs in the sentence\n        adverbs_in_sentence = re.findall(r'(?<![.?!])([a-zA-Z0-9]+)(?![a-zA-Z0-9])', sentence)\n        # Check if there are any adverbs in the sentence\n        if adverbs_in_sentence:\n            # Iterate through each adverb in the sentence\n            for i, adverb in enumerate(adverbs_in_sentence):\n                # Append the adverb and its position to the adverbs and positions lists\n                adverbs.append(adverb)\n                positions.append(i)\n    \n    # Sort the adverbs and positions lists in ascending order\n    adverbs.sort()\n    positions.sort()\n    \n    # Return the adverbs and positions lists\n    return adverbs, positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regex pattern to match an adverb\n    pattern = r'\\b(very|well|already|just|much|rather|quite|rarely|seldom|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rare"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*ed\\b', text)\n    \n    # Initialize an empty dictionary to store the positions of adverbs\n    adverb_positions = {}\n    \n    # Loop through the adverbs and store their positions in the dictionary\n    for i, adverb in enumerate(adverbs):\n        adverb_positions[adverb] = i\n    \n    # Return the positions of the adverbs\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern to match adverbs\n    pattern = r'(\\b[a-z]+\\b)(\\b[a-z]+\\b)(\\b[a-z]+\\b)(\\b[a-z]+\\b)'\n    # Use the re.findall() method to find all the matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n    # If there are no matches, return None\n    if not matches:\n        return None\n    # Loop through each match and extract the adverbs and their positions\n    adverbs = []\n    for match in matches:\n        adverb1, adverb2, adverb3, adverb4 = match\n        adverb1_pos = text.find(adverb1)\n        adverb2_pos = text.find(adverb2, adverb1_pos)\n        adverb3_pos = text.find(adverb3, adverb2_pos)\n        adverb4_pos = text.find(adverb4, adverb3_pos)\n        adverb = [adverb1, adverb2, adverb3, adverb4]\n        adverb_pos = [adverb1_pos, adverb2_pos, adverb3_pos, adverb4_pos]\n        adverbs.append([adverb, adverb_pos])\n    # Sort the adverbs by their positions in the text\n    adverbs.sort(key=lambda x: x[1][0])\n    # Return the first adverb and its position in the text\n    return adverbs[0]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b(?:a|an|the|that|these|those)\\b', text, re.IGNORECASE)\n\n    # Find the position of the adverbs in the sentence\n    positions = []\n    for i, adv in enumerate(adverbs):\n        positions.append((i, text.lower().find(adv.lower())))\n\n    # Sort the positions by their position in the sentence\n    positions.sort(key=lambda x: x[1])\n\n    # Find the first adverb and its position\n    first_adv = adverbs[0]\n    first_pos = positions[0][1]\n\n    return first_adv, first_pos"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find the adverbs using regular expressions\n    pattern = re.compile(r'\\b(a|an|the|these|some|more|most|least)\\b')\n    match = pattern.search(text)\n    \n    # If no adverbs are found, return None\n    if match is None:\n        return None\n    \n    # Find the adverb's position in the sentence\n    start_index = match.start()\n    end_index = match.end()\n    \n    # Return the adverb and its position\n    return text[start_index:end_index], start_index"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern for finding adverbs\n    pattern = r'\\b(\\w+)(ing|ed|edly|ly|ingly|lyly|ingly|enough|enoughly|too|too)(\\w+)\\b'\n\n    # Use the re.findall() function to find all matches of the pattern in the given sentence\n    matches = re.findall(pattern, text)\n\n    # If there are matches, print the adverb and its position in the sentence\n    if matches:\n        for match in matches:\n            print(f\"The adverb {match[0]} is at position {match[1]} in the sentence.\")\n\n    # If there are no matches, print a message\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b(a|an|the|some|such|any|every|most|little|several)\\b'\n\n    # Use the `re.findall()` function to find all the occurrences of adverbs in the sentence\n    matches = re.findall(pattern, text)\n\n    # Check if there are any adverbs in the sentence\n    if len(matches) == 0:\n        return \"No adverbs found in the sentence.\"\n\n    # Define a dictionary to store the adverb and its position in the sentence\n    adverbs_positions = {}\n\n    # Iterate through all the adverbs found in the sentence\n    for i, match in enumerate(matches):\n        adverbs_positions[match] = i\n\n    # Return the dictionary with the adverbs and their positions\n    return adverbs_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Extract all the adverbs from the text\n    adverbs = re.findall(r'\\b\\w*adverb\\b', text)\n    \n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n    \n    # Iterate over all the adverbs\n    for i, adverb in enumerate(adverbs):\n        # Add the position of the adverb to the list\n        adverb_positions.append(i)\n    \n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n\n    Args:\n    l (float): length of the cube's diagonal\n\n    Returns:\n    float: surface area of the cube\n    \"\"\"\n\n    # Calculate the surface area of the cube using Heron's formula\n    s = (l ** 2) * 6\n    \n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2 # formula to find surface area of a cube\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create a new array to store positive numbers\n    pos_nums = array('i')\n    # Iterate through the array\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            # Add it to the positive numbers array\n            pos_nums.append(num)\n    # Calculate the ration of positive numbers\n    pos_count = len(pos_nums)\n    total_count = len(nums)\n    pos_ratio = pos_count / total_count\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list of integers\n    nums_list = list(nums)\n\n    # Count the number of positive integers in the list\n    positive_count = sum([1 for num in nums_list if num > 0])\n\n    # Count the number of negative integers in the list\n    negative_count = sum([1 for num in nums_list if num < 0])\n\n    # Calculate the ratio of positive to negative integers\n    positive_ratio = positive_count / (positive_count + negative_count)\n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0])\n    for num in nums:\n        if num > 0:\n            count.append(1)\n        else:\n            count.append(0)\n    return count[1] / count[0]"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # create a new array to store the positive numbers\n    positives = array('i')\n\n    # iterate through the array and add positive numbers to the new array\n    for num in nums:\n        if num > 0:\n            positives.append(num)\n\n    # find the length of the new array\n    length = len(positives)\n\n    # find the sum of the positive numbers in the new array\n    sum_of_positives = sum(positives)\n\n    # find the ration of positive numbers in the new array\n    ration = sum_of_positives / length\n\n    # return the ration of positive numbers\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize an array to store the count of positive and negative numbers\n    positive_count_array = array('i', [0, 0])\n    # Iterate over the array of integers\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            # Increment the count of positive numbers\n            positive_count_array[0] += 1\n        else:\n            # Increment the count of negative numbers\n            positive_count_array[1] += 1\n    # Calculate the ration of positive numbers\n    positive_ratio = positive_count_array[0] / (positive_count_array[0] + positive_count_array[1])\n    # Return the ration as a float\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # initialize counters\n    positive = 0\n    negative = 0\n    zero = 0\n    \n    # loop over numbers in array\n    for num in nums:\n        # count positive numbers\n        if num > 0:\n            positive += 1\n        # count negative numbers\n        elif num < 0:\n            negative += 1\n        # count zero numbers\n        else:\n            zero += 1\n    \n    # calculate ration of positive numbers\n    ratio = float(positive) / (positive + negative + zero)\n    \n    # return ratio\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create a new array of integers to store positive numbers only\n    positive_nums = array('i')\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n    # Calculate the ration of positive numbers\n    num_positive = len(positive_nums)\n    num_all = len(nums)\n    if num_all == 0:\n        return 0.0\n    else:\n        return num_positive / num_all"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the input array to a list\n    nums_list = list(nums)\n\n    # initialize the positive count and total count\n    pos_count = 0\n    total_count = 0\n\n    # iterate through the list and count the positive numbers\n    for num in nums_list:\n        if num > 0:\n            pos_count += 1\n        total_count += 1\n\n    # calculate and return the ration of positive numbers\n    if total_count == 0:\n        return 0.0\n    else:\n        return pos_count / total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    This function takes an array of integers and returns the ration of positive numbers.\n    \"\"\"\n    pos_nums = array('i', [num for num in nums if num > 0])\n    pos_count = len(pos_nums)\n    total_count = len(nums)\n    return pos_count / total_count"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    if not lst:\n        return None\n    else:\n        max_neg = lst[0]\n        for num in lst:\n            if num < 0 and num > max_neg:\n                max_neg = num\n        return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1 # Initialize the maximum negative number variable to -1\n    \n    for num in list1: # Loop through each number in the list\n        if num < 0 and num > max_neg: # If the number is negative and greater than the current maximum negative number\n            max_neg = num # Update the maximum negative number variable\n    \n    return max_neg # Return the maximum negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    \"\"\"\n    # Initialize the largest negative number to be -inf\n    largest = -float('inf')\n\n    # Iterate through the list of integers\n    for num in lst:\n        # If the current number is less than 0, update the largest negative number\n        if num < 0:\n            largest = num\n\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The largest negative number in the list.\n\n    \"\"\"\n    max_num = lst[0]  # initialize the maximum number as the first element of the list\n    for num in lst:  # iterate through the list\n        if num < 0:  # check if the number is negative\n            if num > max_num:  # check if the number is greater than the current maximum number\n                max_num = num  # update the maximum number if it is greater\n    return max_num  # return the maximum negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    max_num
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])-K):\n            test_list[i] = test_list[i][j:j+K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[i:i+K]) for t in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = ()\n        for i in range(len(tup)):\n            if i % K == 0:\n                new_tup = tup[i:]\n                break\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+K, len(test_list)):\n            test_list[i] = test_list[i][:j] + (None,) * (K - (j - i)) + test_list[i][j:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # check if the length of the tuple is greater than K\n        if len(test_list[i]) > K:\n            # trim the tuple by K elements from the start\n            test_list[i] = test_list[i][K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # trim each tuple by k\n        test_list[i] = tuple([x for x in test_list[i] if x!= None])\n        # check if the trimmed tuple is valid\n        if not all(isinstance(x, int) for x in test_list[i]):\n            # if not valid, remove the tuple from the list\n            del test_list[i]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][j] for j in range(len(test_list[i])) if j % K!= 0)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][k:k+K])\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Iterate through each tuple in the list\n    for i, tup in enumerate(test_list):\n        # Trim the tuple by k and update the list\n        test_list[i] = tup[:K] + (tup[K:],)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # If the lengths of both tuples are not equal, return None\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    # Create an empty list to store the result of the multiplication\n    result_list = []\n    \n    # Iterate over each index of the two tuples\n    for i in range(len(test_tup1)):\n        # Multiply the elements at the respective indexes of the two tuples and append the result to the result list\n        result_list.append(test_tup1[i] * test_tup2[i])\n    \n    # Convert the result list to a tuple and return it\n    return tuple(result_list)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    # Check if the two tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples should have same length.\"\n    \n    # Initialize the result tuple with zeros\n    result_tup = [0] * len(test_tup1)\n    \n    # Perform index wise multiplication and store the result in the result tuple\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same length to perform index multiplication\")\n        return\n    \n    # Initialize a new tuple to store the result\n    result_tup = ()\n    \n    # Iterate over the indices of the two tuples\n    for i in range(len(test_tup1)):\n        # Multiply the corresponding elements of the two tuples and append the result to the result_tup\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    \n    # Return the result_tup\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Loop through each index in the two tuples\n    for i in range(len(test_tup1)):\n        # Multiply the corresponding elements\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n\n    # Multiply each pair of elements of the input tuples\n    result = [(a*b) for a, b in zip(test_tup1, test_tup2)]\n\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    \"\"\"\n    # count the frequency of each element in the list\n    freq = Counter(lst)\n\n    # count the number of occurrences of each element in the tuple\n    count = Counter(tup)\n\n    # calculate the intersection of the two counters\n    intersection = count.intersection(freq)\n\n    # find the total number of elements in the list\n    total = len(lst)\n\n    # count the number of occurrences of each element in the intersection\n    for elem, freq_elem in intersection.items():\n        count[elem] = freq[elem] * count[elem] / total\n\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Create a dictionary to store the count of each element of the list in the tuple\n    count_dict = Counter(tup)\n\n    # Iterate through the list of elements and update the count of each element in the dictionary\n    for i in lst:\n        count_dict[i] += 1\n\n    # Return the dictionary with the count of each element\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_dict.update(lst)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    count = []\n    for i in lst:\n        if i in c:\n            count.append(c[i])\n        else:\n            count.append(0)\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    count_list = []\n    for item in tup:\n        if item in count_dict:\n            count_list.append(count_dict[item])\n        else:\n            count_list.append(0)\n\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # use Counter function from collections module to count the occurrence of all elements of list in a tuple\n    count_dict = Counter(tup)\n\n    # use a for loop to iterate over each key in count_dict\n    for key in count_dict: \n        # print the key and the corresponding value\n        print(key, count_dict[key])"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    for item in lst:\n        if item in counter:\n            counter[item] += 1\n        else:\n            counter[item] = 1\n    return counter"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    # convert the tuple to a list for easier manipulation\n    tup_list = list(tup)\n    # use Counter to count the occurrences of each element in the list\n    count_dict = Counter(tup_list)\n    # convert the Counter object to a dictionary\n    count_dict_dict = dict(count_dict)\n    # count the occurrences of each element in the list\n    for element in lst:\n        count_dict_dict[element] += 1\n    # convert the dictionary back to a tuple\n    count_tup = tuple(count_dict_dict.items())\n    return count_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Using Counter module to count the occurrence of elements in the list\n    count = Counter(lst)\n    # Extracting the keys and values of the count dictionary\n    keys = count.keys()\n    values = count.values()\n    \n    # Initializing a new dictionary to store the count of occurrence of each element in the list\n    result = {}\n    \n    # Iterating through the keys and values of the count dictionary\n    for i in range(len(keys)):\n        # Checking if the value of the keys is equal to the value of the tup\n        if keys[i] == tup[1]:\n            # If the value of the keys is equal to the value of the tup, then adding the value of the keys in the result dictionary\n            result[tup[1]] = values[i]\n    \n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count = {}\n    for i in tup:\n        if i in count_dict:\n            count[i] = count_dict[i]\n        else:\n            count[i] = 0\n    return count"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    p = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    total = 0\n    for i in range(1, n+1):\n        for j in p:\n            if i % j == 0:\n                total += i\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i**2 + 1)/2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize variables\n    p = 1\n    total = 0\n\n    # Calculate sum of perrin numbers\n    while p <= n:\n        total += p\n        p += 2\n\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize variables\n    sum = 0\n    p = 2\n\n    # Calculate the sum of perrin numbers\n    while n > 0:\n        sum += (p*(p-1))\n        p += 2\n        n -= 1\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_sum = 0\n    for i in range(1,n+1):\n        perrin_sum += i**2 + 1\n    \n    return perrin_sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum_of_perrin_numbers = 0\n    for i in range(1, n+1):\n        if sum_of_perrin_numbers > 999999999:\n            break\n        sum_of_perrin_numbers += i\n    return sum_of_perrin_numbers"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    perrin = 1\n    for i in range(1, n+1):\n        sum += perrin\n        perrin += perrin - 2*i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    total_sum = 0\n    \n    for num in perrin_numbers:\n        total_sum += num\n        \n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_numbers = [0, 1]\n    for i in range(2, n):\n        perrin_numbers.append(2*perrin_numbers[i-1] + perrin_numbers[i-2])\n    return perrin_numbers[n-1]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a specified size as input\n    and returns a new list containing the specified size of strings from the input list.\n    '''\n    new_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            new_list.append(str_list[i])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    \n    Args:\n    str_list (list): A list of string values.\n    size (int): The size of the strings to be extracted.\n    \n    Returns:\n    A list of strings of the specified size extracted from the original list.\n    '''\n    return [str_list[i:i+size] for i in range(0, len(str_list), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].index(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            extracted_strings.append(str_list[i][:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n\n    extracted_list = []\n\n    for i in range(len(l)):\n        if len(str) <= l[i]:\n            extracted_list.append(str)\n            break\n        else:\n            extracted_list.append(str[:l[i]])\n            str = str[l[i]:]\n\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n\n    Args:\n        str_list (list of str): List of string values.\n        size (int): Size of each string to be extracted.\n\n    Returns:\n        list of str: List of extracted strings.\n    '''\n    return [str[i:i+size] for i in range(0, len(str), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) > size:\n            extracted_list.append(str_list[i][:size])\n        else:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and an integer value representing the size of string to be extracted.\n    It returns a list of the extracted strings.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_list = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_list.append(string)\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, length):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n\n    Args:\n    str_list: A list of strings.\n    length: The length of the string to be extracted.\n\n    Returns:\n    A list of extracted strings.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= length:\n            extracted_strings.append(string[:length])\n    return extracted_strings"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # Define a regular expression pattern for whitespace\n    pattern = r'\\s+'\n    # Use the re.sub() function to remove all occurrences of whitespace\n    return re.sub(pattern, '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regex\n    text2 = re.sub('\\s+','', text1)\n    # remove leading and trailing whitespaces\n    text3 = text2.strip()\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the given string using regular expressions\n    text = re.sub(r'\\s+','', text)\n    # Remove extra spaces\n    text = re.sub(r'\\s+','', text).strip()\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(text1)\n    \n    # Initialize an empty string to store the cleaned text\n    clean_text = \"\"\n    \n    # Loop through the list and remove whitespaces\n    for char in char_list:\n        if char.isspace() == False:\n            clean_text += char\n    \n    # Return the cleaned string\n    return clean_text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove whitespaces\n    text2 = re.sub('\\s+','', text1).strip()\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    #print the string without whitespaces\n    print(text2)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Convert the string to lowercase\n    text1 = text1.lower()\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    # Remove all single quotes from the string\n    text1 = text1.replace(\"'\", \"\")\n    # Remove all double quotes from the string\n    text1 = text1.replace('\"', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace(';', \"\")\n    # Remove all commas from the string\n    text1 = text1.replace(',', \"\")\n    # Remove all periods from the string\n    text1 = text1.replace('.', \"\")\n    # Remove all exclamation marks from the string\n    text1 = text1.replace('!', \"\")\n    # Remove all question marks from the string\n    text1 = text1.replace('?', \"\")\n    # Remove all colons from the string\n    text1 = text1.replace(':', \"\")\n    # Remove all colons from the string\n    text1 = text1.replace('\"', \"\")\n    # Remove all left parenthesis from the string\n    text1 = text1.replace('(', \"\")\n    # Remove all right parenthesis from the string\n    text1 = text1.replace(')', \"\")\n    # Remove all left square bracket from the string\n    text1 = text1.replace('[', \"\")\n    # Remove all right square bracket from the string\n    text1 = text1.replace(']', \"\")\n    # Remove all left curly bracket from the string\n    text1 = text1.replace('{', \"\")\n    # Remove all right curly bracket from the string\n    text1 = text1.replace('}', \"\")\n    # Remove all less than from the string\n    text1 = text1.replace('<', \"\")\n    # Remove all greater than from the string\n    text1 = text1.replace('>', \"\")\n    # Remove all ampersands from the string\n    text1 = text1.replace('&', \"\")\n    # Remove all asterisks from the string\n    text1 = text1.replace('*', \"\")\n    # Remove all slashes from the string\n    text1 = text1.replace('/', \"\")\n    # Remove all plus signs from the string\n    text1 = text1.replace('+', \"\")\n    # Remove all hyphens from the string\n    text1 = text1.replace('-', \"\")\n    # Remove all underscores from the string\n    text1 = text1.replace('_', \"\")\n    # Remove all backslashes from the string\n    text1 = text1.replace('\\\\', \"\")\n    # Remove all percent signs from the string\n    text1 = text1.replace('%', \"\")\n    # Remove all equal signs from the string\n    text1 = text1.replace('=', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace(';', \"\")\n    # Remove all dollar signs from the string\n    text1 = text1.replace('$', \"\")\n    # Remove all ampersands from the string\n    text1 = text1.replace('|', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace(',', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace('!', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace('?', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace(':', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace('\"', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace('(', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace(')', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace('[', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace(']', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace('{', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace('}', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace('<', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace('>', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace('&', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace('*', \"\")\n    # Remove all semicolons from the string\n    text1 = text1.replace('/', \"\")\n    # Remove all semicolons from"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = (actual_cost - sale_amount) / sale_amount\n    if loss_percentage > 0:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n\n    if sale_amount < actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount >= 0:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        loss = actual_cost - sale_amount \n        return loss \n    else: \n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        while n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            n //= i\n    if n > 1:\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Find all the even factors of the given number\n    evenFactors = []\n    for i in range(2, n+1, 2):\n        if n % i == 0:\n            evenFactors.append(i)\n\n    # Calculate the sum of even factors\n    sumOfFactors = 0\n    for factor in evenFactors:\n        sumOfFactors += factor\n\n    return sumOfFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (2*i) == 0:\n            even_factors += i + n // i\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of the even factors of the input number.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n\n    # loop through all odd numbers less than the square root of the input number\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # check if the input number is divisible by the odd number i\n        if n % i == 0:\n            # add i to the sum if the input number is evenly divisible by i\n            if n % 2 == 0:\n                sum += i\n\n    # return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                even_factors.append(i)\n                n = n // i\n    \n    if n > 1:\n        even_factors.append(n)\n    \n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum += i\n    if n > 1:\n        sum += n\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors.append(i)\n    sum_of_factors = sum(even_factors)\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    #initialize sum to 0 \n    sum = 0 \n\n    #iterate through all odd factors of n \n    for i in range(3, int(math.sqrt(n))+1, 2) : \n        #if i is even and divisible by n, add it to sum \n        if (n % i == 0) and (i % 2 == 0) : \n            sum += i \n\n    return sum "
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define the regular expression pattern\n    pattern = r'\\b(z)\\b'\n    \n    # Use the re.findall() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\bwordz\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]+z\\b'\n    match_obj = re.search(pattern, text, re.IGNORECASE)\n    if match_obj:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns a boolean value indicating whether the string contains a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]*z[a-z]*\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    # Define regular expression pattern for matching words containing 'z'\n    pattern = r'\\b(z)\\w+\\b'\n\n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If the pattern is found, print the word that matches\n    if match:\n        print(match.group(0))\n    else:\n        print('No word containing \"z\" found.')"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b(?=\\b[zZ]\\b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z[a-z]*)(?=[a-z]*\\b|\\s|$)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    elif monthnum2 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if len(monthnum2) == 2 and monthnum2[0] == '0' and monthnum2[1] in ('01', '03', '05', '07', '08', '10', '12'):\n        return True\n    elif len(monthnum2) == 1 and monthnum2[0] in ('01', '03', '05', '07', '08', '10', '12'):\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    This function takes in a month number as an input and returns whether it contains 31 days or not.\n    '''\n\n    # First, check if the month number is valid.\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number.\"\n\n    # If the month number is valid, check if it contains 31 days or not.\n    elif monthnum2 in [4, 6, 9, 11]:\n        return \"31 days.\"\n\n    else:\n        return \"30 days.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in days_in_month:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum % 2 == 0:\n        days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    else:\n        days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum in range(1, 13) and monthnum in days_in_month:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Check if the month number is valid\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number\"\n\n    # If the month number is valid, check if it contains 31 days\n    elif monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            if monthnum2 == 2 and day > 29:\n                return \"Invalid day number for February\"\n            else:\n                return \"31 days\"\n        else:\n            return \"28 days\"\n\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return \"30 days\"\n\n    else:\n        return \"31 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0 and monthnum2 % 3 == 0:\n        if monthnum2 in [2, 4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    elif monthnum2 % 2!= 0 and monthnum2 % 3!= 0:\n        if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        else:\n            return False\n    else:\n        print(\"Invalid input.\")\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # To store the minimum length sublist\n    min_sublist = []\n    \n    # Loop through all possible sublists of the given list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            # Append the sublist to the min_sublist if it is of minimum length\n            if j-i+1 < len(min_sublist):\n                continue\n            elif j-i+1 == len(min_sublist):\n                if lst[i:j] < min_sublist:\n                    min_sublist = lst[i:j]\n            \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as an input and returns the sublist with the minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_sublist = i\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    min_len = len(lst)\n    min_sublist = lst\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n\n    if len(lst) == 1:\n        return lst\n\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize a variable to store the minimum length\n    min_length = float('inf')\n\n    # Loop through all sublists in the list\n    for sublist in lst:\n        # Calculate the length of the sublist\n        length = len(sublist)\n\n        # Check if the length is less than the minimum length\n        if length < min_length:\n            # If it is, update the minimum length\n            min_length = length\n\n    # Create an empty list to store the sublists with the minimum length\n    min_sublists = []\n\n    # Loop through all sublists in the list again and append them to the min_sublists list if they have the minimum length\n    for sublist in lst:\n        if len(sublist) == min_length:\n            min_sublists.append(sublist)\n\n    # Return the min_sublists list\n    return min_sublists"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # initialize the minimum length of the sublist to infinity\n    min_len = float('inf')\n\n    # loop through each sublist in the list\n    for sublist in lst:\n\n        # check if the length of the sublist is less than the current minimum length\n        if len(sublist) < min_len:\n\n            # update the minimum length to the length of the sublist\n            min_len = len(sublist)\n\n    # create a new list to store the sublists with minimum length\n    min_lst = []\n\n    # loop through each sublist in the list again\n    for sublist in lst:\n\n        # check if the length of the sublist is equal to the current minimum length\n        if len(sublist) == min_len:\n\n            # add the sublist to the list of sublists with minimum length\n            min_lst.append(sublist)\n\n    # return the list of sublists with minimum length\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list as input and returns the sublist with minimum length.\n    \"\"\"\n    # initialize min_length to the length of the first sublist\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n\n    # loop through the remaining sublists and compare their lengths with min_length\n    for sublist in lst[1:]:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as an input and returns the sublist that has the minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n            min_sublist = i\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize variables\n    min_len = float('inf')\n    min_sublist = []\n\n    # Iterate over the list\n    for sublist in lst:\n        # Check if the length of the sublist is smaller than the current minimum length\n        if len(sublist) < min_len:\n            # Update the minimum length and sublist\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for matching uppercase substrings\n    pattern = r'[A-Z]+'\n\n    # Use the re.sub() function to replace uppercase substrings with an empty string\n    str2 = re.sub(pattern, '', str1)\n\n    # Return the modified string\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)[A-Z].*[A-Z]'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Find all matches of the pattern in the string and replace them with an empty string\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a pattern to match uppercase substrings\n    pattern = r'([A-Z][a-z]+)'\n\n    # Use re.findall() to find all uppercase substrings in the string\n    uppercase_substrings = re.findall(pattern, str1)\n\n    # Loop through the list of uppercase substrings and remove them from the string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]\\w+\\b'\n    return re.sub(pattern, '', str1, flags=re.IGNORECASE)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = r'(?<!\\w)[A-Z][A-Z]+(?!\\w)'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    pattern = re.compile(r'(?i)[A-Z]+') # Regex pattern to match uppercase substrings\n    return pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    This function takes a string as input and returns a new string with all uppercase substrings removed.\n    \"\"\"\n    pattern = r'(?i)[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    # Split the string into words\n    words = re.findall(r'\\b[a-z]+\\b', string)\n    # Join the words back into a string\n    result =''.join(words)\n    # Return the modified string\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            if len(sublist) == 1:\n                result.append(sublist[0])\n            else:\n                result.append(Extract(sublist)[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0] for lst in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Convert the list to a list of tuples, where each tuple contains the first element of a sublist\n    lst = [(lst[i][0]) for i in range(len(lst))]\n    return lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst: \n        result.append(sublist[0]) \n    return result "
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    return [lst[0]]*len(lst)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        if isinstance(i, list):\n            result.append(i[0])\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst: \n        result.append(sublist[0]) \n    return result "
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1_copy = list1[:] # make a copy of the original list\n    for i in range(len(list1_copy)): # loop through each element in the copy\n        for j in range(i+1, len(list1_copy)+1): # loop through each possible position to swap\n            list1_copy[i], list1_copy[j-1] = list1_copy[j-1], list1_copy[i] # swap the two elements\n    return list1_copy"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create an empty list to store all the combinations\n    combinations = []\n\n    # Function to recursively generate combinations\n    def generate_combinations(start, current_combination):\n        # Check if the current combination is valid\n        if start == len(list1):\n            # If it is valid, add it to the list of combinations\n            combinations.append(current_combination[:])\n        else:\n            # Otherwise, add the current element to the current combination\n            current_combination.append(list1[start])\n\n            # Recursively generate the remaining combinations\n            generate_combinations(start + 1, current_combination)\n\n            # Remove the current element from the current combination\n            current_combination.pop()\n\n    # Call the recursive function to generate the combinations\n    generate_combinations(0, [])\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 2:\n        return []\n    combinations = []\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            combinations.append(list1[j:j+i])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list as input and returns a list of all possible combinations of the elements of the list.\n    '''\n\n    # Initialize an empty list to store all possible combinations\n    combinations = []\n\n    # Initialize a list to store the current combination\n    current_combination = []\n\n    # Loop through the input list\n    for num in lst:\n\n        # Check if the current number is already in the current combination\n        if num in current_combination:\n            continue\n\n        # If not, add the current number to the current combination and append it to the combinations list\n        current_combination.append(num)\n        combinations.append(current_combination[:])\n        current_combination.pop()\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    \n    combinations_list = []\n    for i in range(1, len(list1)+1):\n        for combo in combinations(list1, i):\n            combinations_list.append(combo)\n    return combinations_list"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1) + 1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create an empty list to store all possible combinations\n    all_combinations = []\n\n    # Sort the list in ascending order\n    list1.sort()\n\n    # Iterate through all possible pairs of elements from the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # Append each combination to the all_combinations list\n            all_combinations.append(list1[i:j])\n\n    # Return the list of all possible combinations\n    return all_combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    max_ending_here = max(arr[0], max_ending_here * arr[0])\n    max_not_ending_here = float('-inf')\n    for num in arr[1:]:\n        max_ending_here = max(max_ending_here * num, num)\n        max_not_ending_here = max(max_not_ending_here, max_ending_here)\n    return max_not_ending_here"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables to keep track of maximum subarray and maximum subarray product\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    # Loop through the array and update variables accordingly\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function will find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    start = 0\n    \n    for i in range(len(arr)):\n        if arr[i] < 0:\n            current_product = 1\n        else:\n            current_product *= arr[i]\n            \n        if current_product > max_product:\n            max_product = current_product\n            start = i\n            \n        if current_product < 0:\n            current_product = 1\n            \n    return max_product, start"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            max_ending_here = 1\n            min_ending_here = 1\n        else:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n            min_ending_here = min(min_ending_here * arr[i], arr[i])\n\n        if max_product < max_ending_here:\n            max_product = max_ending_here\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        for i in range(1, n+1):\n            if dict[i]!= dict[0]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    \n    for value in dict.values():\n        if value!= dict[next(iter(dict))]:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Get all values from the dictionary\n    values = list(dict.values())\n    # Check if all values are same\n    if all(x == values[0] for x in values):\n        print(\"All values are same.\")\n    else:\n        print(\"Not all values are same.\")"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # iterate over all keys in the dictionary\n    for key in dict:\n        # check if all values are equal to the first value of the dictionary\n        if dict[key]!= dict[next(iter(dict))]:\n            return False\n    # if all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    else:\n        for key, value in dict.items():\n            if value!= dict[key]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for value in dict.values():\n        values.append(value)\n    return all(value == values[0] for value in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 1\n    for i in dict.values():\n        if i!= dict[n]:\n            count = 0\n            break\n    return count"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n not in dict.values():\n        return False\n    else:\n        return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n\n    Args:\n    dict1 (dict): The dictionary to be modified.\n\n    Returns:\n    None.\n\n    Example:\n    drop_empty({'a': 1, 'b': 2, 'c': None, 'd': 4})\n    # Output: {'a': 1, 'b': 2, 'd': 4}\n    '''\n\n    new_dict = {}\n    for key, value in dict1.items():\n        if value is not None:\n            new_dict[key] = value\n\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key:value for key,value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # create a new dictionary with the same keys as the original one\n    new_dict = {}\n    for key in dict1:\n        # check if the value of the key is not empty\n        if dict1[key]:\n            # add the key-value pair to the new dictionary\n            new_dict[key] = dict1[key]\n    # return the new dictionary\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # loop through the dictionary\n    for key, value in dict1.items():\n        # check if the value is an empty string\n        if not value:\n            # if it is, delete the key-value pair from the dictionary\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == '':\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_ending_here = max_so_far = arr[0]\n    min_ending_here = min_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            max_so_far = max_ending_here\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n            min_so_far = min_ending_here\n        else:\n            max_ending_here = max(max_ending_here*arr[i], arr[i])\n            min_ending_here = min(min_ending_here*arr[i], arr[i])\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_so_far:\n            max_so_far = arr[i]\n        elif arr[i] < min_so_far:\n            min_so_far = arr[i]\n        else:\n            max_so_far = max(max_so_far, arr[i] * min_so_far)\n            min_so_far = min(min_so_far, arr[i] * max_so_far)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Initialize the two pointers `left` and `right` to the first and last indices of the array respectively\n    left = 0\n    right = n - 1\n    \n    # Initialize the maximum product to be the product of the first and last elements of the array\n    max_product = arr[left] * arr[right]\n    \n    # Initialize the minimum element to be the first element of the array\n    min_element = arr[left]\n    \n    # Initialize the maximum element to be the last element of the array\n    max_element = arr[right]\n    \n    # Loop through the array and find the subsequence with the maximum product\n    for i in range(n):\n        # If the element at index `i` is smaller than the current minimum element, update the minimum element\n        if arr[i] < min_element:\n            min_element = arr[i]\n        \n        # If the product of the current minimum element and the element at index `i` is greater than the current maximum product, update the maximum product\n        if arr[i] * min_element > max_product:\n            max_product = arr[i] * min_element\n        \n        # If the element at index `i` is greater than the current maximum element, update the maximum element\n        if arr[i] > max_element:\n            max_element = arr[i]\n        \n        # If the product of the current maximum element and the element at index `i` is less than the current maximum product, update the maximum product\n        if arr[i] * max_element < max_product:\n            max_product = arr[i] * max_element\n        \n        # If the element at index `i` is larger than the current right pointer, update the right pointer\n        if arr[i] > arr[right]:\n            right = i\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_profit = 0\n    min_price = float('inf')\n\n    for i in range(len(arr)):\n        if arr[i] < min_price:\n            min_price = arr[i]\n        else:\n            profit = arr[i] - min_price\n            max_profit = max(max_profit, profit)\n\n    return max_profit"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if not arr:  # base case: empty array\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = min(min_ending_here, arr[i])\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n            max_ending_here = max(max_ending_here, arr[i])\n        else:\n            max_ending_here = max(max_ending_here, arr[i])\n            min_ending_here = min(min_ending_here, arr[i])\n        max_so_far = max(max_so_far, max_ending_here * min_ending_here)\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    def product(arr, i, j):\n        if j == len(arr):\n            return arr[i]\n        return max(arr[i] * product(arr, i+1, j), arr[j] * product(arr, i, j-1))\n\n    return max(product(arr, 0, len(arr)-1), product(arr, 0, len(arr)-2), product(arr, 1, len(arr)-1))"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    # initialize variables\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    # iterate through the array\n    for num in arr:\n        # update max_ending_here if the current number is greater\n        if num > max_ending_here:\n            max_ending_here = num\n        # update min_ending_here if the current number is lesser\n        else:\n            min_ending_here = num\n\n        # update max_so_far if the current max_ending_here is greater\n        max_so_far = max(max_so_far, max_ending_here * min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here * min_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here * max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        current_product = max(arr[i], arr[i] * min_product)\n        max_product = max(max_product, current_product)\n        min_product = min(min_product, arr[i] * max_product)\n    \n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n < 2:\n        return None\n    else:\n        return test_tup[0] + test_tup[-1]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize variables to store the sum of neighboring elements\n    sum_1 = 0\n    sum_2 = 0\n    \n    # loop through the tuple and calculate the sum of neighboring elements\n    for i in range(len(test_tup)-1):\n        sum_1 += test_tup[i]\n        sum_2 += test_tup[i+1]\n        \n    # return the pairwise sum of neighboring elements\n    return (sum_1 + sum_2)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    total = 0\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    \n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # check if the input is a tuple\n    if type(test_tup)!= tuple:\n        print(\"The input is not a tuple.\")\n        return\n\n    # check if the length of the tuple is less than 2\n    if len(test_tup) < 2:\n        print(\"The length of the tuple must be at least 2.\")\n        return\n\n    # loop through the tuple and calculate the sum of the neighboring elements\n    total_sum = 0\n    for i in range(len(test_tup)-1):\n        total_sum += test_tup[i] + test_tup[i+1]\n\n    # print the result\n    print(\"The pairwise sum of the elements in the tuple is:\", total_sum)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns the sum of the pairwise addition of its elements.\n    \"\"\"\n    return sum([a + b for a, b in zip(test_tup, test_tup[1:])])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"Tuple must contain at least two elements.\")\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        return test_tup[0] + test_tup[1] + add_pairwise(test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Check if the given tuple is of length greater than 1\n    if len(test_tup) > 1:\n        # Initialize two variables to store the sum of the first and second elements of the tuple\n        first_sum = test_tup[0] + test_tup[1]\n        # Initialize two variables to store the sum of the second and third elements of the tuple\n        second_sum = test_tup[1] + test_tup[2]\n        # Initialize two variables to store the sum of the third and fourth elements of the tuple\n        third_sum = test_tup[2] + test_tup[3]\n        # Initialize two variables to store the sum of the fourth and fifth elements of the tuple\n        fourth_sum = test_tup[3] + test_tup[4]\n        # Initialize two variables to store the sum of the fifth and sixth elements of the tuple\n        fifth_sum = test_tup[4] + test_tup[5]\n        # Initialize two variables to store the sum of the sixth and seventh elements of the tuple\n        sixth_sum = test_tup[5] + test_tup[6]\n        # Initialize two variables to store the sum of the seventh and eighth elements of the tuple\n        seventh_sum = test_tup[6] + test_tup[7]\n        # Initialize two variables to store the sum of the eighth and ninth elements of the tuple\n        eighth_sum = test_tup[7] + test_tup[8]\n        # Initialize two variables to store the sum of the ninth and tenth elements of the tuple\n        ninth_sum = test_tup[8] + test_tup[9]\n        # Initialize two variables to store the sum of the tenth and eleventh elements of the tuple\n        tenth_sum = test_tup[9] + test_tup[10]\n        # Initialize two variables to store the sum of the eleventh and twelfth elements of the tuple\n        eleventh_sum = test_tup[10] + test_tup[11]\n        # Initialize two variables to store the sum of the twelfth and thirteenth elements of the tuple\n        twelfth_sum = test_tup[11] + test_tup[12]\n        # Initialize two variables to store the sum of the thirteenth and fourteenth elements of the tuple\n        thirteenth_sum = test_tup[12] + test_tup[13]\n        # Initialize two variables to store the sum of the fourteenth and fifteenth elements of the tuple\n        fourteenth_sum = test_tup[13] + test_tup[14]\n        # Initialize two variables to store the sum of the fifteenth and sixteenth elements of the tuple\n        fifteenth_sum = test_tup[14] + test_tup[15]\n        # Initialize two variables to store the sum of the sixteenth and seventeenth elements of the tuple\n        sixteenth_sum = test_tup[15] + test_tup[16]\n        # Initialize two variables to store the sum of the seventeenth and eighteenth elements of the tuple\n        seventeenth_sum = test_tup[16] + test_tup[17]\n        # Initialize two variables to store the sum of the eighteenth and nineteenth elements of the tuple\n        eighteenth_sum = test_tup[17] + test_tup[18]\n        # Initialize two variables to store the sum of the nineteenth and twentieth elements of the tuple\n        nineteenth_sum = test_tup[18] + test_tup[19]\n        # Initialize two variables to store the sum of the twentieth and twenty-first elements of the tuple\n        twentieth_sum = test_tup[19] + test_tup[20]\n        # Initialize two variables to store the sum of the twenty-first and twenty-second elements of the tuple\n        twenty_sum = test_tup[20] + test_tup[21]\n        # Initialize two variables to store the sum of the twenty-second and twenty-third elements of the tuple\n        twenty_second_sum = test_tup[21] + test_tup[22]\n        # Initialize two variables to store the sum of the tw"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    add = 0\n    for i in range(len(test_tup)-1):\n        add += test_tup[i] + test_tup[i+1]\n    return add"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Find the length of the tuple\n    length = len(test_tup)\n    \n    # Initialize an empty list to store the pairwise additions\n    pairwise_additions = []\n    \n    # Iterate over all pairs of elements in the tuple\n    for i in range(length-1):\n        # Find the sum of the two elements in the current pair\n        current_sum = test_tup[i] + test_tup[i+1]\n        # Add this sum to the pairwise additions list\n        pairwise_additions.append(current_sum)\n    \n    # Return the pairwise additions list\n    return pairwise_additions"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(1, len(test_tup)):\n        result += test_tup[i-1] + test_tup[i]\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n\n    Parameters:\n    arr (list): list of integers\n    n (int): the modulo value\n\n    Returns:\n    int: the product of the array multiplication modulo n\n    '''\n\n    # multiply all the elements of the array\n    product = 1\n    for element in arr:\n        product = (product * element) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two lists as input: arr and n.\n    It finds the product of the elements in arr multiplied by the product of the array elements modulo n.\n    The result is returned as an integer.\n    '''\n\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    product = 1\n\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product*i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function finds the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    \"\"\"\n    Find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two parameters, arr, which is the list of integers, and n, which is the modulo.\n    It returns the remainder of the product of all the elements in arr multiplied modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n\n    Args:\n    arr (list): A list of integers.\n    n (int): An integer value.\n\n    Returns:\n    int: The product of the array multiplication modulo n.\n\n    \"\"\"\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, False otherwise.\n    '''\n    # check if the list is empty\n    if not l: \n        return False \n    # check if the list has only one element\n    elif len(l) == 1: \n        return False \n    # check if the first and last elements of the list are the same\n    elif l[0] == l[-1]: \n        return False \n    # check if the elements are consecutive\n    else: \n        for i in range(1, len(l)-1): \n            if l[i]!= l[i-1]+1: \n                return False \n        return True "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i]+1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # initialize variables\n    consecutive = True\n    current = 0\n\n    # loop through the list\n    for i in l: \n        # check if the current number is consecutive\n        if i-current == 1: \n            current = i\n        else: \n            consecutive = False\n            break\n\n    # return the result\n    return consecutive"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    # check if the list is empty\n    if len(l) == 0:\n        return \"The list is empty\"\n    # check if the list has only one element\n    elif len(l) == 1:\n        return True\n    # iterate over the list\n    for i in range(len(l)-1):\n        # check if the difference between two adjacent elements is 1\n        if l[i+1] - l[i]!= 1:\n            return False\n    # if we reach this point, the list contains consecutive numbers\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 1\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            count += 1\n        else:\n            count = 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as an argument and returns a boolean value indicating whether the list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    if n < 2: # if the list has less than 2 elements, it cannot contain consecutive numbers\n        return False\n    for i in range(n-1): # loop through the list to check for consecutive numbers\n        if l[i] == l[i+1] - 1: # if the current element is equal to the next element minus 1, it's a consecutive number\n            return True # return True if a consecutive number is found\n        elif l[i] == l[i+1] + 1: # if the current element is equal to the next element plus 1, it's a consecutive number\n            return True # return True if a consecutive number is found\n    return False # return False if no consecutive number is found\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return True\n    elif l[0] == l[1]:\n        return False\n    else:\n        for i in range(len(l)-1):\n            if l[i+1] - l[i] == 1:\n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, else False.\n    '''\n    n = len(l)\n    for i in range(n):\n        if l[i] == l[i+1]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create an empty list to store the tuple intersection\n    intersection = []\n    # Loop through each tuple in the first list\n    for tuple1 in test_list1:\n        # Loop through each tuple in the second list\n        for tuple2 in test_list2:\n            # If the two tuples have the same elements, add them to the intersection list\n            if tuple1 == tuple2:\n                intersection.append(tuple1)\n                # Exit the inner loop as we have found a match\n                break\n    # Return the tuple intersection list\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty set to store the intersection of the two lists\n    intersection_set = set()\n\n    # Iterate over each tuple in the first list and check if it exists in the second list\n    for tuple1 in test_list1:\n        if tuple1 in test_list2:\n            # If it does, add it to the set of intersection\n            intersection_set.add(tuple1)\n\n    # Convert the set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two tuple lists as input and returns a new list of their intersection.\n    \"\"\"\n    # Create a set of tuples from the first list\n    set1 = set(test_list1)\n\n    # Create a set of tuples from the second list\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Convert the given tuple lists to sets to remove duplicates\n    set_list1 = set(test_list1)\n    set_list2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set_list1.intersection(set_list2)\n\n    # Convert the intersection set back to a tuple list\n    result_list = tuple(intersection)\n\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set of all the elements in the first list\n    set1 = set(test_list1)\n    # create an empty set to store the common elements\n    common_set = set()\n    # iterate over the second list and check if each element is present in the set created above\n    for element in test_list2:\n        if element in set1:\n            common_set.add(element)\n    # convert the set back to a tuple and return it\n    return tuple(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set from test_list1 and then convert it to a list\n    unique_elements = list(set(test_list1))\n    intersection = []\n    # iterate through unique_elements and check if it is present in test_list2\n    for element in unique_elements:\n        if element in test_list2:\n            intersection.append(element)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    dict1 = {}\n    dict2 = {}\n\n    # Convert the lists to dictionaries\n    for item in test_list1:\n        dict1[item] = True\n    for item in test_list2:\n        dict2[item] = True\n\n    # Find the intersection of the dictionaries\n    result_dict = {key: dict1.get(key, False) and dict2.get(key, False) for key in dict1.keys() & dict2.keys()}\n\n    # Convert the result dictionary to a list of tuples\n    result_list = result_dict.items()\n\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find the intersection of the sets and convert back to tuples\n    intersection = tuple(set1.intersection(set2))\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Find the intersection of tuples in two given tuple lists.\n\n    Args:\n        test_list1: List of tuples\n        test_list2: List of tuples\n\n    Returns:\n        A new list containing all the tuples that are present in both test_list1 and test_list2,\n        irrespective of their order.\n    \"\"\"\n    result = []\n    for t in test_list1:\n        if t in test_list2:\n            result.append(t)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Get unique elements in test_list1 and test_list2\n    unique_elements = set(test_list1) & set(test_list2)\n\n    # Convert set to list and sort the list\n    sorted_unique_elements = sorted(list(unique_elements))\n\n    return sorted_unique_elements"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i == ch:\n            str2 += newch\n        else:\n            str2 += i\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # initialize an empty string to store the result\n    result = \"\"\n    # iterate over each character in the input string\n    for char in str1:\n        # if the character is not the character to be replaced\n        if char!= ch:\n            # add the current character to the result string\n            result += char\n        # if the character is the character to be replaced\n        else:\n            # add the new character to the result string\n            result += newch\n    # return the modified string\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace a character in a string with another character.\n\n    Args:\n        str1 (str): The string in which the character should be replaced.\n        ch (str): The character to be replaced.\n        newch (str): The new character to replace the old character.\n\n    Returns:\n        str: The modified string.\n    \"\"\"\n    newstr = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newstr += newch\n        else:\n            newstr += str1[i]\n    return newstr"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return Counter(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object to count the frequency of each value in the dictionary\n    counter = Counter(dict1.values())\n\n    # Sort the counter by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Create a dictionary with the sorted counter\n    sorted_dict = dict(sorted_counter)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n\n    Parameters:\n    dict1 (dict): a dictionary to be sorted.\n\n    Returns:\n    dict: a new dictionary sorted by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n\n    # Sort the counter by value\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1]))\n\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n\n    # Find the sum of the largest and smallest value\n    return nums[-1] + nums[0]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        return largest + smallest + big_sum(nums[nums.index(largest):])"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest and smallest value in the array\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # calculate the sum of the largest and smallest value\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n\n    if nums[0] > nums[1]:\n        smallest = nums[0]\n        largest = nums[1]\n    else:\n        smallest = nums[1]\n        largest = nums[0]\n\n    for i in range(2, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        elif nums[i] < smallest:\n            smallest = nums[i]\n\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of integers as input and returns the sum of the largest and smallest values in the array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Find the smallest value in the sorted array\n    smallest = nums[0]\n    \n    # Find the largest value in the sorted array\n    largest = nums[1]\n    \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Find the largest and smallest values in the array\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    # Calculate the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0, 0\n    \n    smallest = nums[0]\n    largest = nums[0]\n    \n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    \n    return smallest + largest, smallest + largest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case_string = string.lower()\n    return lower_case_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # convert the string to lower case\n    lower_string = string.lower()\n    # check if the resulting string is equal to the original string\n    if lower_string == string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'([a-z]+)', r'\\1', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # Use the re.sub() function to replace all the matches with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1.lower())"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove lowercase substrings using regular expressions\n    regex = re.compile(r'[a-z]+', re.IGNORECASE)\n    result = regex.sub('', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'(?<!\\w)[a-z]+(?!\\w)')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = re.sub('([a-z]+)', '', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase and split it into words\n    words = str1.lower().split()\n    # Initialize a new list to store the non-lowercase words\n    non_lowercase_words = []\n    # Loop through each word\n    for word in words:\n        # If the word is not lowercase, append it to the non-lowercase words list\n        if not word.islower():\n            non_lowercase_words.append(word)\n    # Join the non-lowercase words back into a string and return it\n    return''.join(non_lowercase_words)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = r'(?i)[a-z]+'\n    return re.sub(lowercase_pattern, '', string)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a positive integer n and returns the first digit of the number.\n    \"\"\"\n    # check if the input is a positive integer\n    if type(n)!= int or n < 0:\n        return \"Error: Input must be a positive integer.\"\n    # extract the first digit of the input number\n    first_dig = n // 10\n    return first_dig"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n) : \n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n // 10) + n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Initialize the variable first_digit with the first digit of n\n    first_digit = n % 10\n    # Return the value of first_digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    first_digit = n // 10**len(str(n))\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst): \n    return [num for num in lst if num % 2!= 0] "
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(x**3 for x in range(1, n+1))\n    sum_of_natural_numbers = sum(range(1, n+1))\n    difference = sum_of_cubes - sum_of_natural_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    sum_natural = sum(i for i in range(1, n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Finding the sum of cubes of the first n natural numbers\n    cube_sum = sum([i**3 for i in range(1, n+1)])\n    \n    # Finding the sum of the first n natural numbers\n    num_sum = sum(range(1, n+1))\n    \n    # Returning the difference between the two sums\n    return cube_sum - num_sum\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes_sum = 0\n    natural_numbers_sum = 0\n    \n    for i in range(1, n+1):\n        cubes_sum += i**3\n        natural_numbers_sum += i\n        \n    return abs(cubes_sum - natural_numbers_sum)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Calculate the sum of cubes of first n natural numbers\n    cubes_sum = sum([i**3 for i in range(1, n+1)])\n\n    # Calculate the sum of first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n\n    # Return the difference between the two sums\n    return cubes_sum - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    # calculate sum of first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n    # calculate difference between the two sums\n    difference = sum_of_cubes - sum_of_natural_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #initialize variables\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n\n    #calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n\n    #calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n\n    #return the difference between the two sums\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Function to calculate the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        return sum([i**3 for i in range(1,n+1)])\n\n    # Function to calculate the sum of the first n natural numbers\n    def sum_natural_numbers(n):\n        return sum(range(1,n+1))\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes_n = sum_cubes(n)\n\n    # Calculate the sum of the first n natural numbers\n    sum_natural_numbers_n = sum_natural_numbers(n)\n\n    # Find the difference between the two sums\n    difference = sum_cubes_n - sum_natural_numbers_n\n\n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # calculate the sum of cubes of the first n natural numbers\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n\n    # calculate the sum of the first n natural numbers\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n\n    # find the difference between the two sums\n    difference = cube_sum - sum_of_natural_numbers\n\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    # Count the number of pairs whose xor value is odd\n    count = 0\n\n    # Iterate through all possible pairs of elements in the array A\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = 0\n    count = 0\n\n    for i in range(len(A)):\n        xor_sum ^= A[i]\n\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum ^= A[j]\n            if xor_sum == 1:\n                count += 1\n            xor_sum ^= A[i]\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        xor_value = 0\n        for j in range(i,N):\n            xor_value ^= A[j]\n        if xor_value % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] in N:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes in a list A and an integer N and returns the number of pairs\n    whose xor value is odd.\n\n    Parameters:\n    A (list): A list of integers.\n    N (int): An integer.\n\n    Returns:\n    int: The number of pairs whose xor value is odd.\n    \"\"\"\n\n    # Initialize count to 0\n    count = 0\n\n    # Loop through the list A and for each element, loop through the list A again\n    # to check if the xor of the two elements is odd\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % N == 1:\n                count += 1\n\n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes in a list of integers A and an integer N and returns the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    # Initialize the count variable to zero\n    count = 0\n\n    # Iterate through the range of A\n    for i in range(N):\n        # Iterate through the range of A again\n        for j in range(i+1, N):\n            # Calculate the xor value of A[i] and A[j]\n            xor_val = A[i] ^ A[j]\n\n            # If the xor value is odd, increment the count variable\n            if xor_val % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to lowercase\n    string = string.lower()\n    # initialize an empty string to store the new string\n    new_string = ''\n    # iterate through each character in the original string\n    for char in string:\n        # if the character is a letter, toggle its case and append it to the new string\n        if char.isalpha():\n            new_char = char.upper() if char.islower() else char.lower()\n            new_string += new_char\n        # if the character is not a letter, append it as is to the new string\n        else:\n            new_string += char\n    # return the new string with all letters toggled case\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Initialize an empty string to store the new string with toggled case\n    new_string = ''\n    # Loop through each character in the original string\n    for char in string:\n        # If the character is a lowercase letter, convert it to uppercase\n        if char.islower():\n            new_string += char.upper()\n        # If the character is an uppercase letter, convert it to lowercase\n        elif char.isupper():\n            new_string += char.lower()\n        # If the character is neither a lowercase nor an uppercase letter, add it as is\n        else:\n            new_string += char\n    # Return the new string with toggled case\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isupper() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the input integers to strings to work with the built-in digits() method\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Initialize the sum variable to 0\n    sum_diff = 0\n\n    # Loop over the digits in both numbers and calculate the difference between them\n    for i in range(len(n1_str)):\n        diff = int(n1_str[i]) - int(n2_str[i])\n        sum_diff += diff**2\n\n    return sum_diff**0.5"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    total_sum = 0\n    while diff > 0:\n        total_sum += diff % 10\n        diff //= 10\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = 0\n    for i in range(len(str(n1))):\n        if str(n1)[i]!= str(n2)[i]:\n            difference += int(str(n1)[i]) - int(str(n2)[i])\n    return difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    for i in range(10):\n        diff = abs(n1 % 10 - n2 % 10)\n        distance += diff\n        n1 //= 10\n        n2 //= 10\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize variables to store the sum of per-digit difference\n    sum_diff = 0\n    # Loop through each digit of n1 and n2\n    for i in range(len(str(n1))):\n        # Get the digit of n1\n        digit1 = int(str(n1)[i])\n        # Get the digit of n2\n        digit2 = int(str(n2)[i])\n        # Calculate the absolute difference between the digits\n        diff = abs(digit1 - digit2)\n        # Add the difference to the sum\n        sum_diff += diff\n    # Return the sum of per-digit difference\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both integers to strings and split them into lists of digits\n    s1 = str(n1)\n    s2 = str(n2)\n    lst1 = list(s1)\n    lst2 = list(s2)\n    # Initialize the sum of differences to zero\n    sum_diff = 0\n    # Iterate through the digits of the two numbers\n    for i in range(len(lst1)):\n        # Convert each digit to an integer and calculate the difference between them\n        diff = abs(int(lst1[i]) - int(lst2[i]))\n        # Add the difference to the running sum of differences\n        sum_diff += diff\n    # Return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to lists of digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n\n    # calculate the sum of the per-digit differences\n    sum_diff = 0\n    for digit1, digit2 in zip(digits1, digits2):\n        diff = abs(digit1 - digit2)\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the numbers to strings to be able to compare them digit by digit\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    # Initialize the sum variable to 0\n    sum_diff = 0\n    \n    # Loop through each digit in both strings\n    for i in range(max(len(s1), len(s2))):\n        # Compare the current digits and add the difference to the sum variable\n        if s1[i]!= s2[i]:\n            diff = int(s1[i]) - int(s2[i])\n            sum_diff += diff\n            \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the input integers to strings\n    n1 = str(n1)\n    n2 = str(n2)\n\n    # Initialize the sum variable to 0\n    sum_diff = 0\n\n    # Loop through the digits of each number\n    for i in range(len(n1)):\n        # Subtract the corresponding digits of the two numbers\n        diff = int(n1[i]) - int(n2[i])\n\n        # Add the difference to the sum\n        sum_diff += diff\n\n    # Return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n    digit_sum = 0\n    \n    for i in range(10):\n        digit_diff = diff % 10\n        diff //= 10\n        digit_sum += abs(digit_diff)\n    \n    return digit_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function takes a list a and a size parameter. It finds the sum of the largest contiguous sublist in the list,\n    where the sublist has a length of size.\n    \n    Returns:\n    The sum of the largest contiguous sublist of length size in the given list.\n    \"\"\"\n    if size > len(a):\n        raise ValueError(\"The size parameter cannot be greater than the length of the list.\")\n    max_sum = float('-inf')  # Initialize max sum to negative infinity\n    curr_sum = 0  # Initialize current sum to 0\n    curr_start = 0  # Initialize current start index to 0\n    \n    # Iterate through the list and add the elements to the current sum\n    for i in range(size):\n        curr_sum += a[i]\n        \n        # If the current sum is greater than the max sum, update the max sum and its start index\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            curr_start = i\n            \n    # Iterate through the remaining elements of the list and update the current sum and end index\n    for i in range(size, len(a)):\n        curr_sum -= a[curr_start]\n        curr_sum += a[i]\n        \n        # If the current sum is greater than the max sum, update the max sum and its end index\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            curr_start = i\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n\n    # Initialize variables to store the maximum sum and the current subarray sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the list and update the current subarray sum\n    for i in range(size):\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum becomes negative, reset it to zero\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through the list and calculate the sum of the subarrays\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return max(a)\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        elif max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = 0\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set from each tuple\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the union of the sets\n    union_set = set1 | set2\n    # convert the set back to a list and sort it\n    union_list = sorted(list(union_set))\n    # print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a new set to store the union of the two sets\n    union_set = test_tup1.union(test_tup2)\n    \n    # convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    \n    # output the union list\n    print(\"Union of the elements of the two tuples is:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two lists\n    union_list = list(set(test_tup1) | set(test_tup2))\n    # Sort the union list in ascending order\n    union_list.sort()\n    # Return the union list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples using set union\n    union = set(test_tup1).union(set(test_tup2))\n    \n    # Convert the set back to a tuple and sort it using list\n    sorted_union = tuple(sorted(union))\n    \n    # Print the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # concatenate both tuples\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # convert the set back to list and sort it\n    sorted_union = sorted(list(union_set))\n\n    return sorted_union\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # union of two tuples is obtained by adding elements that are present in either tuple\n    union = test_tup1 + test_tup2\n    # sorting the union elements\n    union.sort()\n    # outputting the union in sorted order\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set from the two tuples and convert it to a list\n    union_set = list(set(test_tup1 + test_tup2))\n    # Sort the list in ascending order\n    union_set.sort()\n    # Return the sorted list\n    return union_set"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create an empty set to store the union of the two tuples\n    union_set = set()\n\n    # add all elements of the first tuple to the set\n    union_set.update(test_tup1)\n\n    # add all elements of the second tuple to the set\n    union_set.update(test_tup2)\n\n    # convert the set to a list and sort it in ascending order\n    sorted_list = sorted(list(union_set))\n\n    # print the union of the two tuples in sorted order\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Get the union of the elements of the two tuples using the + operator\n    union_set = set(test_tup1 + test_tup2)\n\n    # Convert the set to a list and sort it in ascending order\n    sorted_list = sorted(list(union_set))\n\n    # Print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples using set() and sorted()\n    union_set = sorted(set(test_tup1) | set(test_tup2))\n    # Convert the set back to a tuple and return it\n    return tuple(union_set)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize variables\n    max_length = 0\n    current_length = 0\n\n    # iterate through the list\n    for i in range(len(lst)):\n\n        # check if the current sublist is longer than the current maximum\n        if len(lst[i]) > current_length:\n            max_length = current_length\n            current_length = len(lst[i])\n\n        # if the current sublist is not longer than the current maximum, update the current length\n        else:\n            current_length = len(lst[i])\n\n    # return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables to keep track of current and maximum lengths\n    current_length = 1\n    max_length = 1\n\n    # Loop through the list and update the current and maximum lengths as needed\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i-1]:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 1\n\n    # Return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:\n        return 0\n    else:\n        max_length = 0\n        for i in range(len(lst)):\n            if i == 0:\n                max_length = 1\n            else:\n                max_length = max(max_length, Find_Max_Length(lst[:i]))\n            if max_length > len(lst[i]):\n                max_length = len(lst[i])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0 #initialize maxLength to 0\n    maxLength_index = 0 #initialize maxLength_index to 0\n\n    #iterate through each sublist in lst\n    for i in range(len(lst)):\n        sublist = lst[i] #get the current sublist\n\n        #find the length of the sublist\n        length = len(sublist)\n\n        #check if the length is greater than maxLength\n        if length > maxLength:\n            maxLength = length\n            maxLength_index = i #update maxLength_index to the current index\n    \n    #return maxLength\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    for i in range(len(lst)):\n        tempLength = 0\n        for j in range(i, len(lst)):\n            tempLength += 1\n            if maxLength < tempLength:\n                maxLength = tempLength\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if max_length < len(lst[i:j+1]):\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if j - i + 1 > max_len:\n                max_len = j - i + 1\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_len = max(max_len, len(lst[i:j+1]))\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list of sublists and returns the length of the longest sublist.\n    '''\n    longest = 0\n    for sublist in lst:\n        if len(sublist) > longest:\n            longest = len(sublist)\n    return longest"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match values between quotation marks\n    pattern = r'(?<=\")\\w+(?=\")'\n\n    # Use the re.findall() function to find all the matches in the text\n    matches = re.findall(pattern, text)\n\n    # Return the list of matches as a string\n    return ', '.join(matches)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and returns a list of values that are between quotation marks.\n    '''\n    # Use regular expression to extract values between quotation marks\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    # Return the list of extracted values\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(?<=\\w|\\d)\"([^\"]+)\"(?=\\W|$)')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(?:[^\\\\\"]|\\\\.)*\"'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        value = match[1:-1]  # Remove quotes and any backslashes inside the value\n        if value!= '':\n            values.append(value)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = re.compile(r'(?<=\\\")[A-Za-z0-9]+(?=\\\")')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(?<=\")(?=.*?)(\")')\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define the regular expression pattern to match values between quotation marks\n    pattern = r'\"(.*?)\"'\n    # Use the re.findall() method to find all values between quotation marks in the text\n    values = re.findall(pattern, text)\n    # Return a list of extracted values\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += arr[i] * arr[j]\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n): \n    # Initialize a dictionary to store the count of pairs\n    count_dict = {}\n    # Iterate through the array and add the elements to the dictionary\n    for i in range(n):\n        count_dict[arr[i]] = count_dict.get(arr[i], 0) + 1\n    # Initialize a counter to store the count of pairs\n    count = 0\n    # Iterate through the dictionary and check if the difference between the keys is less than or equal to n-1\n    for key, value in count_dict.items():\n        if key > 0 and key <= n - 1:\n            # If it is, increment the counter\n            count += value\n    # Return the count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count "
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) "
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the input number to string\n    num = str(n)\n    \n    # initialize the sum variable\n    sum = 0\n    \n    # loop through each digit in the string and add it to the sum\n    for digit in num:\n        sum += int(digit)\n        \n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize the sum variable to 0\n    sum_val = 0\n    # Loop through each character in the string and add its value to the sum\n    for digit in num_str:\n        sum_val += int(digit)\n    # Return the sum of the digits\n    return sum_val"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # Loop through each digit of the integer\n    while n > 0:\n        # Get the last digit of the integer\n        digit = n % 10\n        \n        # Add the digit to the sum of digits\n        sum_of_digits += digit\n        \n        # Remove the last digit from the integer\n        n = n // 10\n    \n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and then convert each character to a number\n    # and add them up\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string\n    num_str = str(n)\n    # initialize a variable to store the sum of the digits\n    sum_digits = 0\n    # iterate over each digit in the string\n    for digit in num_str:\n        # convert the digit to an integer and add it to the sum\n        sum_digits += int(digit)\n    return sum_digits"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] <= list1[1]:\n            return issort_list(list1[1:])\n        else:\n            return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    elif list1[0] <= list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] <= list1[1]:\n            return False\n        else:\n            return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(lst):\n    '''\n    This function checks whether a specified list is sorted or not.\n    '''\n    n = len(lst)\n    for i in range(n-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Sort the sublist using the sorted() function\n        sublist.sort()\n        # Print the sorted sublist\n        print(sublist)"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Sort the sublist in alphabetical order\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates\n    unique_sets = [set(num) for num in nums]\n    # Convert the sets back to lists\n    return [list(set) for set in unique_sets]"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a set to store unique numbers\n    unique_nums = set()\n\n    # Iterate through each list and add unique numbers to the set\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Args:\n        nums: A list of lists, each containing unique numbers.\n\n    Returns:\n        A list of lists, each containing unique numbers, without any duplicates.\n\n    \"\"\"\n\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Given a list of lists, return a new list with all the duplicate numbers removed.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Remove duplicate numbers from each list using set\n    nums_set = set()\n    for num_list in nums:\n        nums_set.update(num_list)\n    # Convert the set back to a list\n    unique_nums = list(nums_set)\n    # Return the list of unique numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Given a list of lists, return a list with all the duplicate numbers removed.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    unique_numbers = set(list_data)  # create a set of unique numbers from the input list\n    unique_product = 1  # initialize the product to 1\n\n    # iterate over the unique numbers in the set and multiply their product by the original product\n    for num in unique_numbers:\n        unique_product *= num\n\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    unique_product = 1\n    \n    for number in unique_numbers:\n        unique_product *= number\n        \n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_set = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return 1 if not unique_nums else unique_nums[0]"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Removing duplicates from the list\n    unique_list = list(set(list_data))\n\n    # Calculating the product of the unique numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    # Create a set of unique numbers from the list\n    unique_nums = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # convert the list to a set to get unique numbers\n    unique_product = 1  # initialize the product to 1\n    for number in unique_numbers:  # iterate over the unique numbers\n        unique_product *= number  # multiply the product by the number\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # sort the list in ascending order\n    list_data.sort()\n\n    # initialize an empty set to keep track of unique numbers\n    unique_numbers = set()\n\n    # iterate over the list\n    for num in list_data:\n        # if the number is not already in the set, add it\n        if num not in unique_numbers:\n            unique_numbers.add(num)\n        # if the number is already in the set, multiply the number and the product of the unique numbers\n        else:\n            result = num * (unique_numbers.difference({num}).pop())\n\n    return result"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n        \n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function calculates the surface area of a cylinder.\n    '''\n    # Calculate the surface area of a cylinder using the formula:\n    #   A = \u03c0r\u00b2 + 2\u03c0rh\n    # where \u03c0 is 3.14159265.\n    #\n    # Note: The variable \"r\" is the radius of the cylinder, and \"h\" is its height.\n    #\n    # Input:\n    #   r: a scalar or a list of scalars, the radius of the cylinder(s).\n    #   h: a scalar or a list of scalars, the height of the cylinder(s).\n    #\n    # Output:\n    #   A: a scalar or a list of scalars, the surface area(s) of the cylinder(s).\n    #\n    # Example:\n    #   surfacearea_cylinder(1, 2)\n    #   # Output: 37.5\n    #\n    #   surfacearea_cylinder([1, 2], [3, 4])\n    #   # Output: [37.5, 42.5]\n    #\n    import math\n    \n    if isinstance(r, list):\n        A = [3.14159265 * r[i]**2 + 2 * 3.14159265 * r[i] * h[i] for i in range(len(r))]\n    else:\n        A = 3.14159265 * r**2 + 2 * 3.14159265 * r * h\n    \n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * math.pi * r * h\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2)+(2*3.14159*r*h)+(2*3.14159*h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = math.pi\n    area = (2*pi*r**2 + 2*pi*r*h + 2*pi*h**2) / 3\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14159*r**2 # formula for area of a cylinder\n    surface_area = area + 2*3.14159*r*h # formula for surface area of a cylinder\n    print(\"The surface area of the cylinder is: \", surface_area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # pi is a built-in Python constant that represents the mathematical constant pi\n    pi = 3.14159265359\n    \n    # surface area of the cylinder is:\n    # area = 2 * pi * r * h\n    area = 2 * pi * r * h\n    \n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    surface_area = pi * (r**2 + h**2)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area using the formula for a circle and a triangle\n    area = math.pi * r ** 2 # Formula for area of a circle\n    area += 2 * math.pi * r * h # Formula for area of a triangle\n    return area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes two lists A and B as inputs and returns True if all the elements of list B are present in list A.\n    If not, it returns False.\n    \"\"\"\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    # Check if B is present in A \n    if all(B in A): \n        return True \n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    if len(A) > len(B): \n        return \"False\"\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B): \n        if A[i] == B[j]: \n            i += 1\n            j += 1\n        else: \n            i = i - j + 1\n            j = 0\n    if j == len(B): \n        return \"True\"\n    else: \n        return \"False\"\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while i<len(A) and j<len(B):\n        if A[i] == B[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Convert B to a set to remove any duplicate elements \n    B_set = set(B)\n\n    # Traverse A and check if all the elements are present in the set B_set \n    for i in range(len(A)): \n        if A[i] in B_set: \n            return True\n\n    # If all the elements of A are present in B_set, then it is a sublist of B \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not B:\n        return True\n    elif A[0] in B and is_Sub_Array(A[1:],B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return B in A"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B):\n        for i in range(len(B)-len(A)+1):\n            if A==B[i:i+len(A)]:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    i,j = 0,0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    elif len(B) == len(A):\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return False\n        return True\n    else:\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # check if the number is a positive integer\n    if type(n)!= int or n < 0:\n        return \"Error: Please enter a positive integer.\"\n    # initialize factorial variable\n    factorial = 1\n    # loop through the numbers from 1 to n and multiply by the factorial\n    for i in range(1, n+1):\n        factorial *= i\n    # extract the last digit from the factorial and return it\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = 0\n    factorial = 1\n    while factorial <= n:\n        factorial *= i\n        last_digit = int(last_digit + factorial / 10 ** i)\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Initialize variable to store the last digit of the factorial\n    last_digit = 0\n\n    # Loop through the digits of the factorial\n    while n > 0:\n        # Get the last digit of the number\n        last_digit = n % 10\n\n        # Remove the last digit from the number\n        n = n // 10\n\n        # Increment the last digit by 1 (to account for the original factorial)\n        last_digit += 1\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of the factorial of n.\n    \"\"\"\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    last_digit = fact % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n\n    # initialize a variable to store the last digit of the factorial\n    last_digit = 0\n\n    # loop through each digit in the factorial and store it in the last_digit variable\n    while n >= 10:\n        last_digit = n % 10\n        n = n // 10\n\n    # return the last_digit variable as the result\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n and returns the last digit in the factorial of n.\n    \"\"\"\n    # Initialize the factorial variable\n    factorial = 1\n\n    # Check if the given number is greater than 0\n    if n > 0:\n        # Loop through all the digits in the number\n        for i in str(n):\n            # Multiply the current digit with the factorial\n            factorial *= int(i)\n\n        # Get the last digit of the factorial\n        last_digit = factorial % 10\n    else:\n        # If the given number is less than or equal to 0, return 0\n        last_digit = 0\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize variable to store the last digit of the factorial\n    last_digit = 0\n    \n    # loop through each digit of the factorial and add it to the last_digit variable\n    while n > 0:\n        last_digit += n % 10\n        n //= 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to a string\n    num = str(n)\n    # Calculate the factorial of the number\n    factorial = 1\n    for i in range(1, int(num) + 1):\n        factorial *= i\n    # Find the last digit of the factorial\n    last_digit = str(factorial)[-1]\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # finding the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # finding the last digit in the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Get the lengths of the lists\n    n1 = len(list1)\n    n2 = len(list2)\n    n3 = len(list3)\n\n    # Create an empty list to hold the final interleaved list\n    result = []\n\n    # Loop through the 3 lists, adding each element to the result list\n    for i in range(max(n1, n2, n3)):\n        if i < n1:\n            result.append(list1[i])\n        if i < n2:\n            result.append(list2[i])\n        if i < n3:\n            result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes 3 lists and returns a single flat list\n    that contains all the elements of all the input lists.\n    \"\"\"\n    # Find the maximum length of the lists\n    max_len = max(len(list1), len(list2), len(list3))\n    # Create an empty list to hold the interleaved elements\n    interleaved_list = []\n    # Loop through the maximum length of the lists\n    for i in range(max_len):\n        # If there are elements in list1 and list3, interleave them\n        if i < len(list1) and i < len(list3):\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list3[i])\n        # If there are elements in list1 and list2, interleave them\n        elif i < len(list1) and i < len(list2):\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[i])\n        # If there are elements in list2 and list3, interleave them\n        elif i < len(list2) and i < len(list3):\n            interleaved_list.append(list2[i])\n            interleaved_list.append(list3[i])\n        # If there are no more elements in any list, break out of the loop\n        else:\n            break\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # get the length of the lists\n    n1 = len(list1)\n    n2 = len(list2)\n    n3 = len(list3)\n\n    # initialize an empty list\n    interleaved_list = []\n\n    # iterate over the lists and add their elements to the interleaved list\n    for i in range(n1):\n        interleaved_list.append(list1[i])\n    for i in range(n2):\n        interleaved_list.append(list2[i])\n    for i in range(n3):\n        interleaved_list.append(list3[i])\n\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i, j, k = 0, 0, 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    if i < len(list1):\n        result.extend(list1[i:])\n    if j < len(list2):\n        result.extend(list2[j:])\n    if k < len(list3):\n        result.extend(list3[k:])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(max(len(list1), len(list2), len(list3))):\n        result.append(list1[i % len(list1)] if i < len(list1) else None)\n        result.append(list2[i % len(list2)] if i < len(list2) else None)\n        result.append(list3[i % len(list3)] if i < len(list3) else None)\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    index = 0\n    while index < len(list1) + len(list2) + len(list3):\n        if index < len(list1):\n            result.append(list1[index])\n            index += 1\n        elif index < len(list1) + len(list2):\n            result.append(list2[index-len(list1)])\n            index += 1\n        else:\n            result.append(list3[index-len(list1)-len(list2)])\n            index += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): The first list of the same length.\n        list2 (list): The second list of the same length.\n        list3 (list): The third list of the same length.\n\n    Returns:\n        list: The interleaved list of the 3 input lists.\n    \"\"\"\n\n    # Check that all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n\n    # Initialize an empty list to store the interleaved list\n    interleaved = []\n\n    # Loop through the lists and add each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n\n    return interleaved"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set of unique elements in both tuples\n    unique_elements = set(test_tup1 + test_tup2)\n\n    # Compare each element in the two tuples to see if they are dissimilar\n    dissimilar_elements = []\n    for element in unique_elements:\n        if element not in test_tup1 and element not in test_tup2:\n            dissimilar_elements.append(element)\n\n    # Return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar.append(element)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of the dissimilar elements in the two tuples.\n    \"\"\"\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_elements = []\n    # Loop through each element in the first tuple\n    for elem in test_tup1:\n        # Check if the element is present in the second tuple\n        if elem not in test_tup2:\n            # If not, append it to the dissimilar_elements list\n            dissimilar_elements.append(elem)\n    # Return the dissimilar_elements list\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of elements that are different between the two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize a dictionary to store the count of each element in the first tuple\n    count1 = {}\n    # Initialize a dictionary to store the count of each element in the second tuple\n    count2 = {}\n    # Loop through each element in the first tuple\n    for element in test_tup1:\n        # If the element is already in the dictionary, increment its count\n        if element in count1:\n            count1[element] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            count1[element] = 1\n    # Loop through each element in the second tuple\n    for element in test_tup2:\n        # If the element is already in the dictionary, increment its count\n        if element in count2:\n            count2[element] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            count2[element] = 1\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar = []\n    # Loop through each element in the first tuple\n    for element in test_tup1:\n        # If the element is not in the second tuple and its count in the first tuple is 1, append it to the list of dissimilar elements\n        if element not in test_tup2 and count1[element] == 1:\n            dissimilar.append(element)\n    # Loop through each element in the second tuple\n    for element in test_tup2:\n        # If the element is not in the first tuple and its count in the second tuple is 1, append it to the list of dissimilar elements\n        if element not in test_tup1 and count2[element] == 1:\n            dissimilar.append(element)\n    # Return the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element at the current index in both tuples is equal\n        if test_tup1[i]!= test_tup2[i]:\n            # If they are not equal, add the element to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Find the dissimilar elements in two tuples.\n\n    Args:\n        test_tup1: tuple of integers\n        test_tup2: tuple of integers\n\n    Returns:\n        list of integers: list of dissimilar elements in the two tuples\n    \"\"\"\n    dissimilar = []\n    # loop over the elements of the tuples\n    for i in range(len(test_tup1)):\n        # if the elements are different, add them to the dissimilar list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # check if the input is a tuple or not\n    if isinstance(test_tuple, tuple):\n\n        # initialize an empty list to store even elements\n        even_list = []\n\n        # iterate over each element in the tuple\n        for item in test_tuple:\n\n            # check if the item is a tuple or not\n            if isinstance(item, tuple):\n\n                # call the even_fnc function on each nested tuple\n                even_list.extend(even_fnc(item))\n\n            else:\n\n                # check if the item is even or not\n                if even_fnc(item):\n\n                    # add the even item to the even_list\n                    even_list.append(item)\n\n        # return the even_list\n        return even_list\n\n    else:\n        return \"Input is not a tuple\""
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_lst = []\n    odd_lst = []\n    for elem in test_tuple:\n        if even_fnc(elem):\n            even_lst.append(elem)\n        else:\n            odd_lst.append(elem)\n    return (even_lst, odd_lst)\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def check_even(x): \n        '''\n        Helper function to check if a given element is even or odd.\n        '''\n        return even_fnc(x)\n\n    def remove_uneven_elements(nested_tuple): \n        '''\n        Recursive function to remove uneven elements from the nested mixed tuple.\n        '''\n        new_list = []\n        for x in nested_tuple: \n            if isinstance(x, tuple): \n                new_list.extend(remove_uneven_elements(x))\n            elif check_even(x): \n                new_list.append(x)\n        return new_list\n\n    new_tuple = remove_uneven_elements(test_tuple)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(item):\n        return even_fnc(item)\n    \n    # Find the length of the longest tuple in the test_tuple\n    longest_len = max([len(sub_tuple) for sub_tuple in test_tuple])\n    \n    # Create a list to store the even elements\n    even_list = []\n    \n    # Loop through each sub-tuple in the test_tuple and append the even elements to the even_list\n    for sub_tuple in test_tuple:\n        for item in sub_tuple:\n            if is_even(item):\n                even_list.append(item)\n    \n    # Return a list of the even elements from the test_tuple\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_list.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # initialize an empty list to store the even elements of the tuple\n    even_list = []\n    # loop through each element of the tuple\n    for elem in test_tuple:\n        # check if the element is an even number\n        if even_fnc(elem):\n            # if the element is even, append it to the even_list\n            even_list.append(elem)\n    # return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Convert the tuple to a list to access its elements\n    test_list = list(test_tuple)\n    # Remove uneven elements from the list using the given function\n    test_list = [x for x in test_list if even_fnc(x)]\n    # Convert the list back to a tuple\n    return tuple(test_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for elem in test_tuple:\n        if type(elem) == tuple:\n            new_tuple.append(even_ele(elem, even_fnc))\n        else:\n            if even_fnc(elem):\n                new_tuple.append(elem)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Define a function to check if the element is even or odd\n    def is_even(x):\n        if x % 2 == 0:\n            return True\n        else:\n            return False\n\n    # Filter out the even elements from the nested mixed tuple\n    even_tuple = tuple(filter(lambda x: is_even(even_fnc(x)), test_tuple))\n\n    return even_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for elem in test_tuple:\n        if even_fnc(elem):\n            even_list.append(elem)\n    return even_list\n\ndef is_odd(x):\n    return x % 2 == 1\n\ndef is_even(x):\n    return x % 2 == 0"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2 * (b * s) + 2 * b * (b * s) + b**2 * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the base area\n    base_area = b * b\n\n    # Calculate the surface area of the pyramid\n    surface_area = 2 * base_area + 6 * b * s\n\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2 * b * s) + (2 * s * s) - (b * b)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # Calculate the surface area of the base\n    base_area = b*s\n    \n    # Calculate the surface area of the top half of the pyramid\n    top_area = 4*s*b\n    \n    # Calculate the surface area of the bottom half of the pyramid\n    bottom_area = 4*b*s\n    \n    # Calculate the total surface area of the pyramid\n    total_area = base_area + top_area + bottom_area\n    \n    # Return the total surface area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s/2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)**2 + (2*b*s)**2 + (b*s)**2 + (b*s)**2 + (2*b*s)**2 + (b*s)**2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    area = 0.5 * b * s ** 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the pyramid\n    surface_area = 6*b*s + 2*b*b + 2*s*s\n    # Print the surface area\n    print(\"The surface area of the square pyramid is:\", surface_area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*(s+b+s)\n    print(\"The surface area of the pyramid is: \",area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Formula for surface area of square pyramid\n    surface_area = (b*s) * 2\n    \n    # Return surface area\n    return surface_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as input and checks if it is empty or not.\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return num * catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (2 * num - 1) * catalan_number(num - 1) // num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise ValueError(\"The number should be non-negative.\")\n    catalan = 1\n    for i in range(1, num + 1):\n        catalan *= 2 * i\n    for i in range(1, num + 1):\n        catalan //= i\n        catalan //= i\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) * (num/2) * catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)*n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * catalan_number(n-1)) + (catalan_number(n-2) * catalan_number(n-1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n\n    Parameters:\n    n (integer): The index of the Catalan number to be returned.\n\n    Returns:\n    float: The nth Catalan number.\n    \"\"\"\n    # Define the terms of the series\n    a = 1\n    b = 1\n    c = 2\n    d = 1\n\n    # Initialize the Catalan number to 1\n    catalan = 1\n\n    # Calculate the nth term of the series\n    for i in range(2, n + 1):\n        catalan = (a * b) // c\n        a = b\n        b = c\n        c = d\n        d = catalan\n\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Base case: if n is 0 or 1, return 1\n    if num in [0, 1]:\n        return 1\n    \n    # Initialize the catalan numbers\n    catalan = [1, 1]\n    \n    # Calculate the catalan numbers using dynamic programming\n    for i in range(2, num+1):\n        catalan.append(sum([c[i-j]*(j+1) for j in range(i)]))\n    \n    # Return the nth catalan number\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Check if the input is a positive integer\n    if not isinstance(num, int) or num <= 0:\n        raise ValueError(\"Input should be a positive integer.\")\n\n    # Initialize the factorial function\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    # Calculate the nth catalan number\n    catalan = factorial(2*num)/(factorial(num)*factorial(num+1))\n\n    return catalan"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all the words with the \"ly\" ending using regular expression\n    words = re.findall(r'\\b[A-Z][a-z]*ly\\b', text.lower())\n    # Initialize an empty dictionary to store the positions of the adverbs\n    adverbs_positions = {}\n    # Iterate through the list of words and extract the positions of the adverbs ending with \"ly\"\n    for i in range(len(words)):\n        if words[i][-3:] == 'ly':\n            adverbs_positions[words[i]] = (words[i].lower().find('ly'), words[i].lower().rfind('ly'))\n    return adverbs_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.findall(adverb_pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define a regular expression pattern for adverbs ending with ly\n    pattern = r'\\bly\\b'\n    \n    # use the re.findall() function to find all the matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n    \n    # initialize an empty list to store the positions of the matches\n    positions = []\n    \n    # iterate through the matches and append their positions to the positions list\n    for i, match in enumerate(matches):\n        positions.append((i, match.start()))\n    \n    # return a tuple of the positions list and the matches list\n    return positions, matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\bly\\b', text)\n    positions = [m.start() for m in re.finditer(r'\\bly\\b', text)]\n\n    return adverbs, positions\n\ntext = \"This is a sample text. There are many different types of adverbs ending with ly. One of them is: slowly.\"\nprint(find_adverbs(text))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = re.compile(r'ly$')\n    \n    # Find all the matches of the pattern in the given string\n    matches = re.findall(pattern, text)\n    \n    # Iterate over the matches and extract the positions of the matches\n    positions = []\n    for match in matches:\n        positions.append(text.index(match))\n        \n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b([a-z]+ly)\\b'\n    # Use re.finditer to find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # Iterate over the matches and extract the adverb and its positions\n    for match in matches:\n        adverb = match.group(1)\n        start = match.start()\n        end = match.end()\n        print(f\"Adverb found: {adverb}, starting at position {start} and ending at position {end}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b([A-Z][a-z]+ly)\\b'\n    # Use the re.findall() function to find all the matches in the given string\n    matches = re.findall(pattern, text)\n    # Return a list of tuples containing the adverb and its positions in the string\n    return [(match, text[match.start():match.end()]) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Compile a regular expression pattern to find adverbs ending with ly\n    pattern = re.compile(r'\\b[a-zA-Z]+ly\\b', re.IGNORECASE)\n    \n    # Find all occurrences of the pattern in the text and store their positions in a list\n    matches = pattern.finditer(text)\n    \n    # Iterate over the matches and store the positions and adverb in a list of tuples\n    adverbs = []\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        adverb = text[start:end]\n        adverbs.append((start, adverb))\n    \n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regex pattern for adverbs ending with \"ly\"\n    pattern = r'\\b([a-z]+)ly\\b'\n\n    # Find all matches of the pattern in the input string\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # Return a list of tuples containing the matched adverb and its position in the input string\n    return [(match, text.lower().index(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(ly)\\b'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        for i, match in enumerate(matches):\n            pos = text.find(match)\n            print(f'{match}: {pos}')\n    else:\n        print('No adverbs found.')"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as inputs and returns a list of the n most expensive items in the dataset.\n    '''\n    # Use a min heap to find the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Convert the heap to a list of the n most expensive items\n    return [-heap[i] for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes in a dataset of items and a positive integer n and\n    returns the n most expensive items. The function first sorts the dataset\n    in descending order of their values. Then, it uses a min-heap to find the\n    n most expensive items.\n\n    Args:\n        items (list): A list of items.\n        n (int): The number of items to find the most expensive.\n\n    Returns:\n        list: The n most expensive items.\n    \"\"\"\n\n    # Sort the dataset in descending order of values\n    items.sort(reverse=True)\n\n    # Initialize a min-heap with the first n items\n    min_heap = items[:n]\n\n    # For each remaining item, remove the smallest item from the min-heap\n    for item in items[n:]:\n        heapq.heappop(min_heap)\n        heapq.heappush(min_heap, item)\n\n    # Return the min-heap as the result\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappushpop(heap, item)\n\n    return [heap[0]] + heap[1:]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    :param items: a list of items\n    :param n: the number of most expensive items to return\n    :return: a list of the n most expensive items\n    \"\"\"\n\n    # Create a max heap of n items and fill it with the items from the dataset\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            # Remove the least expensive item from the heap\n            heapq.heappop(heap)\n\n    # Extract the n most expensive items from the heap and return them as a list\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Create a heap of size n to store the n most expensive items\n    heap = []\n\n    # Iterate over the items and add them to the heap, maintaining the heap property\n    for item in items:\n        heapq.heappush(heap, item)\n\n        # If the heap is larger than n, remove the smallest item\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the heap of the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, items[i])\n    \n    # Iterate through the dataset and remove the smallest element from the min heap\n    for i in range(n, len(items)):\n        if items[i] < heapq.heappop(min_heap):\n            heapq.heappush(min_heap, items[i])\n    \n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and a number n representing the number of items to be returned.\n    It uses the heapq module to create a min heap and populates it with the items in decreasing order of price.\n    The function then returns the n most expensive items from the heap.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item['name']))\n    return [item[1] for item in heapq.nsmallest(n, heap)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heap[i] for i in range(n)]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth eelment\n    part1 = l[:n]\n    part2 = l[n:]\n\n    # Concatenate the parts\n    result = part1 + part2\n\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # create a list to store the new elements\n    new_list = []\n\n    # iterate over the original list\n    for i in range(len(l)):\n        # if we reached the nth element, add the first part to the end of the new list and break out of the loop\n        if i == n:\n            new_list = l[:n] + l[n:]\n            break\n\n        # if we haven't reached the nth element, add the element to the new list\n        else:\n            new_list.append(l[i])\n\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[-n:] + l[:-n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n >= len(l):\n        return l\n    \n    first_part = l[:n]\n    last_part = l[n:]\n    \n    return first_part + last_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Error: n should be less than or equal to the length of the list\")\n        return None\n    else:\n        split_list = l[:n]\n        first_part = l[n:]\n        return [first_part] + split_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        print(\"Error: Index out of range!\")\n    else:\n        part1 = l[:n]\n        part2 = l[n:]\n        l = part1 + part2\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    mid = len(l) // 2\n    if n > mid:\n        l1 = l[:n]\n        l2 = l[n:]\n    else:\n        l1 = l[n:]\n        l2 = l[:n]\n    l1.extend(l2)\n    return l1"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the list is empty\n    if len(l) == 0:\n        return []\n\n    # Check if the length of list is less than the given index\n    elif n >= len(l):\n        return l\n\n    # Check if the length of list is equal to the given index\n    elif n == len(l) - 1:\n        return [l[n]] + l[0:n]\n\n    # Split the list at the given index\n    else:\n        return l[n] + split_Arr(l[0:n], n+1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Error: n is greater than the length of the list.\"\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0:\n        return []\n    elif n == len(l):\n        return [l[0]] + l\n    else:\n        mid = len(l) // 2\n        left_part = split_Arr(l[:mid], n-1)\n        right_part = split_Arr(l[mid:], n-1)\n        return left_part + [l[mid]] + right_part"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n    # Find the difference between largest and smallest values in the list\n    diff = nums[-1] - nums[0]\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n\n    min_val = nums[0]\n    max_val = nums[0]\n\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    # finding the largest and smallest values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    # calculating the difference between the largest and smallest values\n    diff = max_num - min_num\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Sort the list in ascending order\n    nums.sort()\n    # Get the largest and smallest value in the list\n    largest = nums[-1]\n    smallest = nums[0]\n    # Calculate the difference between the largest and smallest value\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Finding the smallest and largest value in the list\n    smallest = min(nums)\n    largest = max(nums)\n    \n    # Calculating the difference between largest and smallest values\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize the largest and smallest values to the first element of the list\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # iterate through the list and update largest and smallest if a number is larger than current largest and smaller than current smallest\n    for num in nums[1:]:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # return the difference between largest and smallest\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) == 1:\n        return 0\n    \n    max_val = max(nums)\n    min_val = min(nums)\n    \n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize an empty list to store the perfect squares\n    perfect_squares_list = []\n\n    # loop through the range of numbers between a and b\n    for i in range(a, b+1):\n        # loop through the range of numbers between 1 and the square root of i\n        for j in range(1, int(i**0.5)+1):\n            # check if the square root of i is divisible by j\n            if i % j == 0:\n                # if it is, then add the square root of i to the list of perfect squares\n                perfect_squares_list.append(int(i**0.5))\n\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Loop through all numbers between a and b\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        square = i**0.5\n        if i == int(square) ** 2:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(int(a), int(b)+1):\n        if num**2 == num:\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares\n    perfect_squares_list = []\n\n    # loop through the range of a to b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        j = i * i\n        if j == i and j == i * i:\n            perfect_squares_list.append(i)\n\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Iterate through the range of numbers between a and b\n    for i in range(a, b+1):\n        # Check if the square of i is equal to i\n        if i ** 2 == i:\n            # If it is, return i as the perfect square\n            return i"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # loop through all possible square roots between a and b\n    for i in range(int(a**0.5)+1, int(b**0.5)+1):\n        # check if the square root is a perfect square\n        if i*i == a:\n            return True\n    return False"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares\n    perfect_squares_list = []\n    # loop through the range of numbers between a and b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i**2 == a or i**2 == b:\n            perfect_squares_list.append(i)\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i * i\n        if i == square:\n            print(i)\n        elif i < square:\n            print(i)\n            break"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): The radius of the circle.\n    theta (float): The angle in radians.\n    \n    Returns:\n    (x, y) (tuple): The rectangular coordinates of the point (r*cos(theta), r*sin(theta)).\n    \"\"\"\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y)\n    where theta is in radians and x and y are real numbers.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert polar coordinates to rectangular coordinates\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n\n    # Convert angle to degrees and round to 2 decimal places\n    theta = round(theta*180/cmath.pi, 2)\n    \n    return (r, theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): The radius of the point.\n    theta (float): The angle of the point, in radians.\n\n    Returns:\n    tuple: A tuple containing the x and y components of the point in rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r * cmath.cos(theta), r * cmath.sin(theta))\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius.\n    theta (float): The angle in radians.\n\n    Returns:\n    x (float): The rectangular x coordinate.\n    y (float): The rectangular y coordinate.\n\n    \"\"\"\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    return r * cmath.exp(1j*theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n        r: radius of the point\n        theta: angle of the point in radians\n\n    Returns:\n        x: x-coordinate of the point\n        y: y-coordinate of the point\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <= 1:\n        return newList\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least two elements!\")\n        return None\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    n = len(newList)\n    # Check if the list has at least two elements\n    if n < 2:\n        return None\n    # Interchange the first and last elements\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the length of the list is less than 2\n    if len(newList) < 2:\n        return \"Error: List must have at least 2 elements.\"\n\n    # Store the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n\n    # Update the list by swapping the first and last elements\n    newList[0] = last\n    newList[-1] = first\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list is empty\n    if len(newList) == 0:\n        return newList\n    \n    # swap the first and last elements\n    first = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = first\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    first = newList[0]\n    last = newList[length-1]\n    newList[0] = last\n    newList[length-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the input list has at least 2 elements\n    if len(newList) < 2:\n        print(\"Error: The list must have at least 2 elements\")\n        return None\n    \n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two arguments, n and k, which are the values of n and k for which \n    we want to find the binomial co-efficient. \n    The function returns the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if n < k or k < 0:\n        return 0\n\n    if k == 0 or k == n:\n        return 1\n\n    if k > n // 2:\n        k = n - k\n\n    binomial_coeff = 1\n\n    for i in range(1, k+1):\n        binomial_coeff *= (n-i+1) // i\n\n    return binomial_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if k > n:\n        return 0\n\n    if k == 0:\n        return 1\n\n    if k == 1:\n        return n\n\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0 or k == 0 or k > n:\n        return 0\n    if k == 1 or k == n:\n        return 1\n    if n == 1:\n        return 0\n    if k % 2 == 0:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n    else:\n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n\n    result = binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if k > n:\n        return 0\n\n    if k == 0 or k == n:\n        return 1\n\n    if k == 1 or k == n-1:\n        return n\n\n    sum_bin_coef = 0\n\n    for i in range(k, n+1):\n        sum_bin_coef += binomial_Coeff(n-1, i-1) * binomial_Coeff(n-1, k-1)\n\n    return sum_bin_coef"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    sum_binomial = 0\n\n    for i in range(1, k+1):\n        binomial = 1\n        for j in range(1, i+1):\n            binomial *= (n-j+1) / j\n        sum_binomial += binomial\n\n    return sum_binomial"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # If k is greater than n, return 0\n    if k > n:\n        return 0\n    \n    # Calculate the product of consecutive binomial coefficients\n    prod = 1\n    for i in range(k, n+1):\n        prod *= (n-i+1)/i\n    \n    # Calculate the sum of the product of consecutive binomial coefficients\n    sum_prod = 0\n    for i in range(n-k+1):\n        sum_prod += prod\n        prod *= (n-i)/i\n    \n    return sum_prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum\n    sum = 0\n\n    # Calculate the product of consecutive binomial co-efficients\n    for i in range(k):\n        sum += (n - i) * (i + 1) // 2\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize sum variable\n    sum_product = 0\n\n    # Calculate first binomial coefficient\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        # Calculate sum of product of consecutive binomial co-efficients\n        for i in range(k, n+1):\n            sum_product += i * binomial_Coeff(n, i-1)\n        return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    if n < k or k < 0 or n < 0:\n        return None\n\n    result = 0\n\n    # Compute the binomial coefficient for k=0 and k=n\n    binomial_coefficient_k0 = 1\n    binomial_coefficient_kn = 1\n\n    # Compute the product of the first k binomial coefficients\n    for i in range(k):\n        binomial_coefficient_k0 *= i + 1\n        binomial_coefficient_kn *= n - i\n\n    result += binomial_coefficient_k0\n\n    # Compute the product of the remaining binomial coefficients\n    for i in range(2, n + 1):\n        binomial_coefficient_i = i * binomial_coefficient_kn // (i - k)\n        result += binomial_coefficient_i\n        binomial_coefficient_kn = binomial_coefficient_i\n\n    return result"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove all leading zeros from the ip address\n    ip = re.sub('^0+','',ip)\n    # Check if the ip address is still valid\n    if re.match(r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$',ip):\n        return ip\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(\\d{1,3}\\.){3}\\d{1,3}$'\n    match = re.match(pattern, ip)\n    if match:\n        return re.sub(r'^(0){3,}', '', ip)\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'(\\.0+)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regular expressions to remove leading zeroes from an IP address\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\D+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b)', r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+([0-9A-Fa-f]{1,4}:)+0+$', r'', ip)\n    ip = re.sub(r'0+([0-9A-Fa-f]{1,4})$', r'\\1', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            break\n    if even_count > 0 and odd_count > 0:\n        diff = list1[0] + list1[1] - list1[2] - list1[3]\n        return diff\n    else:\n        return \"List does not have even and odd numbers\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    \n    # iterate through the list and check for the first even and first odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            elif first_even == num:\n                # if two even numbers are the same, keep the first one\n                pass\n            else:\n                # if two even numbers are different, update the first_even variable\n                first_even = num\n        else:\n            if first_odd is None:\n                first_odd = num\n            elif first_odd == num:\n                # if two odd numbers are the same, keep the first one\n                pass\n            else:\n                # if two odd numbers are different, update the first_odd variable\n                first_odd = num\n    \n    # if there are no even numbers, return None\n    if first_even is None:\n        return None\n    \n    # calculate the difference between the first even and first odd numbers\n    diff = first_odd - first_even\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = 0\n    first_odd = 0\n\n    for num in list1:\n        if num % 2 == 0 and first_even == 0:\n            first_even = num\n        elif num % 2!= 0 and first_odd == 0:\n            first_odd = num\n\n    if first_even!= 0 and first_odd!= 0:\n        return first_even - first_odd\n    else:\n        return 'No even or odd numbers found in the list'"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n            \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables to store even and odd numbers\n    even = None\n    odd = None\n    \n    # Loop through the list\n    for num in list1:\n        # If the number is even\n        if num % 2 == 0:\n            # If the even number has not been found yet\n            if even is None:\n                even = num\n            # If the even number has been found and is less than the current even number\n            elif even > num:\n                even = num\n        # If the number is odd\n        else:\n            # If the odd number has not been found yet\n            if odd is None:\n                odd = num\n            # If the odd number has been found and is less than the current odd number\n            elif odd > num:\n                odd = num\n    \n    # If both even and odd numbers have been found\n    if even is not None and odd is not None:\n        # Return the difference between the even and odd numbers\n        return odd - even\n    # If only even numbers have been found\n    elif even is not None:\n        # Return the difference between the even and the last odd number\n        return list1[-1] - even\n    # If only odd numbers have been found\n    elif odd is not None:\n        # Return the difference between the first even number and the odd number\n        return even - odd\n    # If no even or odd numbers have been found\n    else:\n        # Return None\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    \n    if even_num % 2 == 0:\n        even_num_index = 0\n    else:\n        even_num_index = 1\n    \n    if odd_num % 2 == 0:\n        odd_num_index = 1\n    else:\n        odd_num_index = 0\n    \n    return list1[even_num_index] - list1[odd_num_index]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        print(\"The list should have at least two elements.\")\n    else:\n        # check if first element is even or odd\n        if list1[0] % 2 == 0:\n            # first even number\n            first_even = list1[0]\n        else:\n            # first odd number\n            first_odd = list1[0]\n\n        # check if second element is even or odd\n        if list1[1] % 2 == 0:\n            # second even number\n            second_even = list1[1]\n        else:\n            # second odd number\n            second_odd = list1[1]\n\n        # calculate the difference between the first even and first odd and the second even and second odd\n        diff_even = first_even - first_odd\n        diff_odd = second_even - second_odd\n\n        # print the difference between the first even and first odd and the second even and second odd\n        print(\"The difference between the first even number and the first odd number and the second even number and the second odd number are:\", diff_even, diff_odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0 and i == 0:\n            return abs(list1[i])\n        elif list1[i] % 2 == 1 and i == 0:\n            return abs(list1[i])\n        elif list1[i] % 2 == 0 and i!= 0:\n            return abs(list1[i] - list1[i-1])\n        elif list1[i] % 2 == 1 and i!= 0:\n            return abs(list1[i] - list1[i-1])"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    # find the first even number\n    even_idx = None\n    for i, num in enumerate(list1):\n        if num % 2 == 0:\n            even_idx = i\n            break\n    if even_idx is None:\n        raise ValueError(\"No even number in the list\")\n    \n    # find the first odd number\n    odd_idx = None\n    for i in range(len(list1)-1, even_idx-1, -1):\n        if list1[i] % 2!= 0:\n            odd_idx = i\n            break\n    if odd_idx is None:\n        raise ValueError(\"No odd number in the list\")\n    \n    # find the difference\n    diff = list1[odd_idx] - list1[even_idx]\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    diff = even - odd\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2):\n    # Initialize a dictionary to store the count of characters in both strings\n    count_dict = {}\n\n    # Loop through the strings and update the count dictionary\n    for char in str1 + str2:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    # Initialize the minimum number of swaps\n    min_swaps = float('inf')\n\n    # Loop through the characters in the count dictionary\n    for char, count in count_dict.items():\n        # Check if the count of characters in the current string is equal to the count of characters in the other string\n        if count == str1.count(char) == str2.count(char):\n            # If the count of characters in the current string is greater than the count of characters in the other string,\n            # calculate the minimum number of swaps to convert the current string to the other string\n            if count > str1.count(char):\n                min_swaps = min(min_swaps, count - str1.count(char))\n            # If the count of characters in the current string is less than or equal to the count of characters in the other string,\n            # calculate the minimum number of swaps to convert the other string to the current string\n            else:\n                min_swaps = min(min_swaps, count - str2.count(char))\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize two arrays to store the binary numbers of str1 and str2\n    binary_str1 = [int(i) for i in str1]\n    binary_str2 = [int(i) for i in str2]\n\n    # Initialize a variable to store the result\n    min_swaps = float('inf')\n\n    # Loop through all possible combinations of the first binary number\n    for i in range(len(binary_str1)):\n        # Initialize a variable to store the new binary number after swapping the i-th bit\n        new_binary = binary_str1[i]\n        for j in range(i+1, len(binary_str1)):\n            if binary_str1[j]!= new_binary:\n                new_binary = new_binary ^ binary_str1[j] ^ (1 << j)\n                break\n\n        # Calculate the number of swaps required to convert the i-th bit to the new binary number\n        swaps = 0\n        for bit in range(len(binary_str1)):\n            if binary_str1[bit] == new_binary[bit]:\n                swaps += 0\n            elif binary_str1[bit] > new_binary[bit]:\n                swaps += 1\n            elif binary_str1[bit] < new_binary[bit]:\n                swaps -= 1\n\n        # Check if the number of swaps is less than the current minimum number of swaps\n        if swaps < min_swaps:\n            min_swaps = swaps\n\n    # Return the minimum number of swaps required to convert the two binary numbers\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    # Convert the given binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # Initialize the count of swaps to zero\n    count = 0\n    # While num1 and num2 are not equal\n    while num1!= num2:\n        # If num1 is greater than num2, swap num1 with num1-num2 and increment the count of swaps\n        if num1 > num2:\n            num1 = num1 - num2\n            count += 1\n        # If num2 is greater than num1, swap num2 with num2-num1 and decrement the count of swaps\n        else:\n            num2 = num2 - num1\n            count -= 1\n    # Return the count of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the two binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the count of swaps\n    count = 0\n\n    # Iterate through the binary numbers from left to right\n    for i in range(len(str1)):\n        # If the binary digits are not equal, swap them\n        if num1 & (1 << i)!= num2 & (1 << i):\n            count += 1\n            # XOR the two binary digits and assign to num1 and num2\n            num1 = num1 ^ (1 << i)\n            num2 = num2 ^ (1 << i)\n\n    # Return the count of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables\n    min_swaps = 0\n    swap_count = 0\n\n    # Iterate through all bits in binary strings\n    while num1!= num2:\n        # If num1 has more bits set than num2, swap bits from num1 to num2\n        if num1 > num2:\n            swap_count += 1\n            num1 = (num1 << 1) & ((1 << (len(str1))) - 1)\n            num2 = (num2 << 1) & ((1 << (len(str2))) - 1)\n        # If num2 has more bits set than num1, swap bits from num2 to num1\n        else:\n            swap_count += 1\n            num2 = (num2 << 1) & ((1 << (len(str2))) - 1)\n            num1 = (num1 << 1) & ((1 << (len(str1))) - 1)\n\n        # Update minimum number of swaps\n        min_swaps = min(min_swaps, swap_count)\n\n    # Return minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n\n    return dp[n][n]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # converting the binary strings into lists\n    bin1 = list(bin(int(str1,2))[2:])\n    bin2 = list(bin(int(str2,2))[2:])\n    # calculating the length of the shorter binary string\n    length = len(bin1) if len(bin1) < len(bin2) else len(bin2)\n    # initializing the minimum number of swaps\n    min_swaps = length\n    # iterating through the lists from the end to the beginning\n    for i in range(length-1, -1, -1):\n        # swapping the characters at the current position if they are not equal\n        if bin1[i]!= bin2[i]:\n            # decrementing the minimum number of swaps if the characters are not equal\n            min_swaps -= 1\n            # swapping the characters\n            bin1[i], bin2[i] = bin2[i], bin1[i]\n    # returning the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both binary strings to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n\n    # Initialize two variables to keep track of the count of swaps required\n    swapCount1 = 0\n    swapCount2 = 0\n\n    # Iterate through the digits of the binary numbers in reverse order\n    for i in range(len(str1)-1, -1, -1):\n        # Check if the digits are different\n        if int1 % 2!= int2 % 2:\n            # If they are not, then they need swapping\n            swapCount1 += 1\n            int1 = int(str1, 2)  # Update the first binary string with swapped digits\n            int2 = int(str2, 2)  # Update the second binary string with swapped digits\n            swapCount2 += 1\n        # If the digits are the same, then we can skip swapping them\n        else:\n            int1 //= 2  # Divide the first binary string by 2\n            int2 //= 2  # Divide the second binary string by 2\n\n    # Return the minimum number of swaps required to convert the binary strings\n    if swapCount1 < swapCount2:\n        return swapCount1\n    elif swapCount2 < swapCount1:\n        return swapCount2\n    else:\n        return swapCount1"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            str1[i], str2[i] = str2[i], str1[i]\n            swaps += 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Check if the numbers have the same length\n    if len(str1)!= len(str2):\n        return \"Error: The binary strings have different lengths\"\n    \n    # Use bitwise operations to count the number of swaps required\n    num_swaps = 0\n    for i in range(len(str1)):\n        if (num1 & (1 << i))!= (num2 & (1 << i)):\n            num_swaps += 1\n    \n    # Return the minimum number of swaps required\n    return num_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list[i])):\n            size += sys.getsizeof(tuple_list[i][j])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.setcheckinterval(1)\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize the size variable to 0\n    size = 0\n    \n    # Iterate through each tuple in the list\n    for tup in tuple_list:\n        # Add the size of the tuple to the size variable\n        size += sys.getsizeof(tup)\n        \n    # Return the size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # initialize variables to keep track of the size of the tuple\n    size = 0\n    num_bytes = 1\n    \n    # iterate over the elements of the tuple\n    for element in tuple_list:\n        # calculate the size of the element in bytes\n        element_size = sys.getsizeof(element)\n        \n        # update the total size of the tuple\n        size += num_bytes * element_size\n        \n        # update the number of bytes in this element\n        num_bytes = element_size\n    \n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples and returns the size in bytes of the tuples.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        size = sys.getsizeof(tuple_list[i])\n        total_size += size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_in_bytes = 0\n    for item in tuple_list:\n        if sys.getsizeof(item) < 0:\n            raise ValueError(\"Item is too large to fit in a tuple.\")\n        size_in_bytes += sys.getsizeof(item)\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size\n\nif __name__ == \"__main__\":\n    print(tuple_size((1, 2, 3, 4, 5)))"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    if i == len(arr1) and j < k:\n        return find_kth(arr2, arr1, k - j)\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    kth = -1\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 0:\n                kth = arr1[i]\n                break\n            else:\n                i += 1\n                k -= 1\n        elif arr1[i] > arr2[j]:\n            if k == 0:\n                kth = arr2[j]\n                break\n            else:\n                j += 1\n                k -= 1\n        else:\n            if k == 0:\n                kth = arr1[i]\n                break\n            else:\n                i += 1\n                j += 1\n                k -= 1\n\n    return kth"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1  # swap the arrays so that arr1 is the smaller one\n\n    n1, n2 = len(arr1), len(arr2)\n\n    i = n1 - 1\n    j = 0\n    while j < n2:\n        if arr1[i] > arr2[j]:\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i -= 1\n        else:\n            return arr1[i]  # found kth element, return it\n        if i < 0:\n            i = n1 - 1\n            j += 1\n        elif j == n2:\n            i -= 1\n\n    # not enough elements in arr2, check arr1\n    while i >= 0:\n        if arr1[i] == arr2[j]:\n            j += 1\n            i -= 1\n        elif arr1[i] < arr2[j]:\n            i -= 1\n        else:\n            return arr1[i]\n\n    # not enough elements in arr1, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Merge the two arrays\n    merged_arr = arr1 + arr2\n\n    # Find the kth element from the merged array\n    kth_element = merged_arr[k-1]\n\n    # Return the kth element\n    return kth_element"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n            j += 1\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\n\ndef find_kth(arr1, arr2, k):\n    sorted_arr = merge_sort(arr1 + arr2)\n    return sorted_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Merge the two arrays into a single sorted array\n    merged_arr = arr1 + arr2\n    \n    # Initialize two pointers i and j to the beginning of the array\n    i, j = 0, 0\n    \n    # Initialize a variable kth_element to None\n    kth_element = None\n    \n    # Loop until we find the kth element\n    while i < len(merged_arr) and j < len(merged_arr):\n        if merged_arr[i] < merged_arr[j]:\n            if k == 1:\n                kth_element = merged_arr[i]\n                break\n            i += 1\n        else:\n            if k == len(merged_arr) - i:\n                kth_element = merged_arr[j]\n                break\n            j += 1\n            k -= len(merged_arr) - i\n    \n    # If we did not find the kth element, return None\n    if kth_element is None:\n        return None\n    \n    # Otherwise, return the kth element\n    else:\n        return kth_element"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    i, j = 0, len(arr2)\n\n    while i < len(arr1) and j > 0:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j -= 1\n\n        if i == k - 1:\n            return arr1[i]\n\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Helper function to check whether a number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(number)\n    digit_sum = 0\n\n    for digit in num_str:\n        digit_sum += int(digit) ** len(num_str)\n\n    return number == digit_sum\n\ndef main():\n    \"\"\"\n    Main function to test the is_armstrong function.\n    \"\"\"\n    num = int(input(\"Enter a number: \"))\n    if is_armstrong(num):\n        print(f\"{num} is an Armstrong number.\")\n    else:\n        print(f\"{num} is not an Armstrong number.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n\n    # Initialize variables to keep track of the number's digits and the sum of its digits raised to the power of the number of digits\n    digits = [int(d) for d in str(number)]\n    total = sum([d ** len(digits) for d in digits])\n\n    # Check if the total is equal to the original number\n    if number == total:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong_number(num):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n\n    :param num: A positive integer number.\n    :return: True if the given number is an Armstrong number, otherwise False.\n    \"\"\"\n\n    # Convert the number to a string.\n    num_str = str(num)\n\n    # Initialize a variable to store the sum of the digits raised to the power of the number of digits.\n    sum_digits = 0\n\n    # Iterate over the digits of the number.\n    for digit in num_str:\n        # Add the digit raised to the power of the number of digits to the sum.\n        sum_digits += int(digit) ** len(num_str)\n\n    # Compare the sum of the digits with the original number.\n    if sum_digits == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    Checks whether a given number is an Armstrong number or not.\n    \"\"\"\n    if n < 10:\n        return False\n    else:\n        total = 0\n        temp = n\n        while temp > 0:\n            digit = temp % 10\n            total += digit**3\n            temp //= 10\n        return n == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes a number as an argument and checks whether it is an Armstrong number or not.\n    \"\"\"\n    number = int(number)\n    if number < 10:\n        return False\n    else:\n        sum_of_digits = 0\n        temp_num = number\n        while temp_num > 0:\n            digit = temp_num % 10\n            sum_of_digits += digit ** 3\n            temp_num //= 10\n        return sum_of_digits == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Convert the number to a string and remove any non-numeric characters\n    number_str = ''.join(filter(str.isdigit, str(number)))\n\n    # Calculate the sum of the cubes of each digit in the number\n    cube_sum = sum(int(digit)**3 for digit in number_str)\n\n    # Compare the calculated sum to the original number\n    if int(number_str) == cube_sum:\n        print(f\"{number} is an armstrong number.\")\n    else:\n        print(f\"{number} is not an armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string\n    number_string = str(number)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each digit of the number\n    for digit in number_string:\n        # Multiply the digit by the number of digits of the number\n        digit_power = len(number_string)\n        sum += int(digit) ** digit_power\n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # calculate the sum of the cubes of each digit in the number\n    sum_of_cubes = 0\n    while number > 0:\n        digit = number % 10\n        sum_of_cubes += digit ** 3\n        number //= 10\n    # check if the sum of the cubes is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong_number(number):\n    num = number\n    sum = 0\n    power = len(str(num))\n    while num > 0:\n        digit = num % 10\n        sum += digit ** power\n        num //= 10\n    return sum == number"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(n):\n        num = int(input(\"Enter a natural number: \"))\n        sum += num\n        count += 1\n    avg = sum / count\n    print(\"The sum of the first\", n, \"natural numbers is:\", sum)\n    print(\"The average of the first\", n, \"natural numbers is:\", avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find the sum and average of the first n natural numbers.\n    \"\"\"\n    sum_n = 0\n    for i in range(1, n+1):\n        sum_n += i\n    avg = sum_n / n\n    return sum_n, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # find the sum of the first n natural numbers\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n\n    # calculate the average of the first n natural numbers\n    average = sum / number\n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"Sum of first {} natural numbers: {}\".format(number, sum))\n    print(\"Average of first {} natural numbers: {}\".format(number, average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count variables\n    sum_ = 0\n    count = 0\n\n    # loop through first n natural numbers\n    for i in range(1, number+1):\n        sum_ += i\n        count += 1\n\n    # calculate average\n    average = sum_/count\n\n    # return results as a tuple\n    return (sum_, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < number:\n        count += 1\n        sum += count\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n\n    average = total / count\n\n    return total, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(n, \"is even.\")\n    else:\n        print(n, \"is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer input and returns True if the number is even, False otherwise.\n    \"\"\"\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a Python function to find the first repeated character in a given string.\n    \"\"\"\n    # convert the string to a list of characters\n    str_list = list(str1)\n    \n    # loop through the list of characters\n    for i in range(len(str_list)):\n        # if the character has already been found, return its index\n        if str_list.count(str_list[i]) > 1:\n            return i\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Loop through each character in the string again to find the first repeated character\n    for char in str1:\n        # If the character is in the dictionary but its count is greater than 1, return the character\n        if char in char_count and char_count[char] > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store character counts\n    char_counts = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count by 1\n        if char in char_counts:\n            char_counts[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_counts[char] = 1\n    \n    # Find the character with the highest count and return its index\n    max_count = 0\n    first_repeated = \"\"\n    for char, count in char_counts.items():\n        if count > max_count:\n            max_count = count\n            first_repeated = char\n    \n    # If no repeated characters were found, return an empty string\n    if max_count == 0:\n        return \"\"\n    \n    # Return the index of the first repeated character\n    else:\n        return first_repeated"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[char] = 1\n\n    # Initialize the first repeated character as None\n    first_repeated = None\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the frequency of the character is greater than 1, update the first repeated character\n        if freq_dict[char] > 1 and first_repeated is None:\n            first_repeated = char\n        # If the frequency of the character is greater than 1, but the current character is not the first repeated character, update it\n        elif freq_dict[char] > 1 and char!= first_repeated:\n            first_repeated = char\n\n    # Return the first repeated character\n    return first_repeated"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    # Create a dictionary to store the frequency of characters in the string\n    freq_dict = {}\n    \n    # Iterate over each character in the string and update its frequency in the dictionary\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n            \n    # Iterate over the dictionary and return the first character whose frequency is greater than 1\n    for char, freq in freq_dict.items():\n        if freq > 1:\n            return char\n            \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    first_repeated = None\n    for char, count in char_count.items():\n        if count > 1:\n            first_repeated = char\n            break\n    \n    return first_repeated"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    If no character is repeated in the string, it returns None.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # if no character is repeated, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_list = list(str1)\n    char_dict = {}\n    for char in char_list:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return 'There is no repeated character in the string.'"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for num in range(1, n+1):\n        if num == 1:\n            lucid_numbers.append(num)\n        else:\n            for i in range(2, num):\n                if num % i == 0:\n                    break\n            else:\n                lucid_numbers.append(num)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    i = 1\n    while True:\n        if i*i > n:\n            break\n        if i*i*i >= n:\n            ludic_numbers.append(i*i*i)\n        i += 1\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i == 1:\n            ludic_numbers.append(1)\n        elif i % 2 == 0:\n            ludic_numbers.append(2*ludic_numbers[i//2-1]+1)\n        else:\n            ludic_numbers.append(ludic_numbers[i//2]+1)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize a list of boolean values of size n+1 to mark all numbers as prime\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    \n    # Iterate over all numbers less than the square root of n\n    for i in range(2, int(n**0.5)+1):\n        # If the number is prime\n        if primes[i]:\n            # Mark all multiples of i as not prime\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    \n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n    \n    # Iterate over all numbers less than n\n    for i in range(2, n+1):\n        # If the number is prime and its square is less than or equal to n\n        if primes[i] and i**2 <= n:\n            # Add the number to the list of lucid numbers\n            lucid_numbers.append(i)\n    \n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        lucid_numbers.append(i)\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                lucid_numbers.append(i)\n                break\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        lucid_numbers.append(i)\n        while i > 1:\n            if i % 2 == 0:\n                i //= 2\n            else:\n                i = 3*i + 1\n        lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            lucids.append(2*i)\n        else:\n            lucids.append(3*i-1)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    i = 2\n    while i <= n:\n        lucid.append(i)\n        i += 1\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(2, n + 1):\n        ludic_numbers.append(i * (i + 1))\n    return ludic_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string = \" \".join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string by space\n    words = s.split()\n\n    # Reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n\n    # Join the words back into a string\n    reversed_s = \" \".join(words)\n\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into words\n    reversed_words = words[::-1]  # reverse the order of words\n    reversed_string =''.join(reversed_words)  # join the words back together with spaces\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()  # split the string into words\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])  # reverse each word\n    return \" \".join(reversed_words)  # join the reversed words back together into a string with spaces in between"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string = \" \".join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the words back into a string\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    '''\n    This function checks if the given integer is a prime number.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    '''\n    This function checks if a given integer is a prime number or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    This function checks if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks if a given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if is_prime(num):\n        return True\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by any number less than 2\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # If the above two conditions are not satisfied, then the number is prime\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi/180 * degree"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi/180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes in a degree value and returns the corresponding value in radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    \n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literals.append((match.group(), match.start(), match.end()))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        literal = text[start:end]\n        print(f\"{literal} ({start}, {end})\")\n    return"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    else:\n        start, end = matches[0].span()\n        return matches[0], start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    else:\n        start_index = text.index(matches[0])\n        end_index = start_index + len(matches[0]) - 1\n        return matches[0], start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literals.append((match.group(), match.start(), match.end()))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group(0)\n        start_index = match.start()\n        end_index = match.end()\n        print(f\"Found literal: {literal}, start index: {start_index}, end index: {end_index}\")\n        return literal, start_index, end_index\n    return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell_num = 0\n        for i in range(2, n+1):\n            bell_num += (i*i)\n        return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function returns the nth Bell number using recursion.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nn = int(input(\"Enter a number: \"))\nprint(bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    This function calculates the nth Bell number.\n    '''\n    if n < 0: \n        return \"Invalid input.\"\n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        for i in range(2, n+1): \n            bell_number = ((2 * i) - 1) / i\n            return bell_number"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return n * (2 * n - 1) // (2 * n)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    This function finds the nth bell number. \n    The nth Bell number is the number of numbers less than or equal to n that can be written as the sum of two smaller primes, \n    where the primes are the first five prime numbers.\n    '''\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    bell_number = 0\n    \n    for prime in prime_numbers:\n        if prime > n:\n            break\n        elif prime*prime > n:\n            bell_number = prime*prime - n\n            break\n        else:\n            bell_number += prime\n    \n    return bell_number"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    This function takes an integer n as input and returns the nth bell number.\n    The nth bell number is the number of permutations of n objects chosen from the set of n distinct positive integers.\n    '''\n    bell_dict = {0: 1, 1: 1} # Initialize the dictionary with the first two bell numbers\n    \n    for i in range(2, n+1):\n        bell_dict[i] = sum(bell_dict[k] * (n-k+1) for k in range(i))\n    \n    return bell_dict[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return (n*n - 1) // 2"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and the value of k and returns a list with the same elements, \n    but the k'th element removed.\n    '''\n    # find the index of kth element\n    kth_element = list1[L-1]\n    kth_index = -1\n    for i in range(len(list1)):\n        if list1[i] == kth_element:\n            kth_index = i\n            break\n    # remove the kth element\n    del list1[kth_index]\n    # return the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a new list with the kth element removed.\n    '''\n    if L == 1:\n        return list1[1:]\n    else:\n        k = L\n        list1.pop(k-1)\n        return remove_kth_element(list1, L-1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    return [x for i, x in enumerate(list1) if i!= k]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and a number k and returns a new list with all elements except the kth element.\n    \"\"\"\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1) # Remove the k'th element from the list\n    return list1 # Return the modified list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    while k < len(list1)-1:\n        list1[k] = list1[k+1]\n        k += 1\n    return list1[:-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1  # k is the index of the kth element to be removed from the list\n    list2 = list1.copy()  # create a copy of the original list\n    list2.pop(k)  # remove the kth element from the list\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # convert the list to a set to avoid duplicates\n    list2 = set(list1)\n    # if k is greater than the length of the list, return an empty list\n    if k > len(list2):\n        return []\n    # convert the set back to a list to preserve the order of the elements\n    list3 = list(list2)\n    # remove the kth element from the list\n    del list3[k-1]\n    # convert the list back to a set to avoid duplicates and return it\n    return set(list3)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements,\n    but the k'th element removed.\n    '''\n    list2 = list1.copy()\n    k = L-1\n    if k < 0 or k >= len(list1):\n        return \"Invalid input. Please enter a valid index.\"\n    list2.pop(k)\n    return list2"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize the max value to negative infinity\n    max_val = -float('inf')\n    # iterate over the rows of the matrix\n    for row in test_list:\n        # if the current row has then'th column, update the max value\n        if N-1 < len(row) and row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_value = max(max_value, max(test_list[i]))\n        elif max_value < test_list[i][N-1]:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    n_th_col = 0\n\n    for i in range(len(test_list)):\n        if i == 0:\n            n_th_col = test_list[i][N-1]\n        elif test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n            n_th_col = test_list[i][N-1]\n\n    return n_th_col"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(max_val, max(test_list[i]))\n        else:\n            max_val = max(max_val, max(test_list[i][N-1]))\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list[0])\n    max_col = []\n    for i in range(n):\n        max_val = test_list[0][i]\n        for j in range(1, len(test_list)):\n            if test_list[j][i] > max_val:\n                max_val = test_list[j][i]\n        max_col.append(max_val)\n    return max_col"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_list = []\n    for i in range(len(test_list)):\n        max_list.append(max(test_list[i][N-1], key=test_list[i][N-1].index))\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize a list to store the maximum value of then'th column\n    max_list = []\n    # Iterate through each row of the matrix\n    for row in test_list:\n        # Find then'th column of the current row\n        nth_col = row[N-1]\n        # Add the nth column to the max_list if it's greater than the current max\n        if nth_col > max_list[-1] if max_list else nth_col:\n            max_list.append(nth_col)\n    # Return the maximum value of then'th column\n    return max(max_list)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the length of the first list (the number of rows)\n    num_rows = len(test_list)\n    \n    # create a new list to store the max values\n    max_values = []\n    \n    # iterate through each row of the matrix\n    for i in range(num_rows):\n        # get the value of then'th column\n        value = test_list[i][N-1]\n        \n        # if the value is not already in the list, add it\n        if value not in max_values:\n            max_values.append(value)\n    \n    # return the maximum value\n    return max(max_values)"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        first_element = sublist[0]\n        second_element = sublist[1]\n        merged_list = [first_element, second_element]\n        result.append(merged_list)\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    result = []\n    for i in range(len(lst)):\n        first_elem = lst[i][0]\n        second_elem = lst[i][1]\n        result.append([first_elem, second_elem])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    merged_list = []  \n\n    for sublist in lst:  \n        merged_list.append([sublist[0], sublist[1]])  \n\n    return merged_list  "
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for sublist in lst:\n        first = sublist[0]\n        second = sublist[1]\n        merged_list.append([first, second])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):  \n    result = []\n    for sublist in lst:\n        first = sublist[0]\n        second = sublist[1]\n        result.append([first, second])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a variable to store the cumulative sum\n    cumulative_sum = 0\n    \n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # add the value of the current tuple to the cumulative sum\n        cumulative_sum += test_list[i][1]\n    \n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n    \n    # Loop through the tuple list and add each value to the cumulative sum\n    for value in test_list:\n        cum_sum += value\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # initialize the cumulative sum to 0\n    cum_sum = 0\n    \n    # loop through the list and add each value to the cumulative sum\n    for value in test_list:\n        cum_sum += value\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cum_sum += val\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i][1]\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        averages.append(sum(tup) / len(tup))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(sum(nums[i]) / len(nums[i]))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        sum = sum(num)\n        average = sum / len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in range(len(nums)):\n        tuple_sum = sum(nums[i])\n        tuple_len = len(nums[i])\n        average = tuple_sum / tuple_len\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for t in nums:\n        sum_t = sum(t)\n        averages.append(sum_t / len(t))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    \n    for num in nums:\n        total += sum(num)\n        count += 1\n        \n    return [total/count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize empty list to store averages\n    averages = []\n\n    # Iterate through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the sum of all the elements in the current tuple\n        total = sum(tup)\n        # Calculate the length of the current tuple\n        length = len(tup)\n        # Calculate the average of the current tuple\n        avg = total / length\n        # Add the average to the list of averages\n        averages.append(avg)\n\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_set in nums:\n        average = sum(num_set) / len(num_set)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    avg_list = []\n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the sum of all the values in the tuple\n        total = sum(tup)\n        # Divide the sum by the number of values in the tuple to get the average\n        avg = total/len(tup)\n        # Append the average value to the average list\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    return tuple([i % j for i, j in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples are not of the same length.\")\n        return\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes two arguments: steps and d. \n    steps is the number of steps required to reach the point (d, 0) from origin. \n    d is the distance between two consecutive points on the 2d plane.\n\n    The function returns the minimum number of jumps required to reach the point (d, 0) from origin.\n\n    Algorithm:\n    - Initialize variables: \n    - Initialize a counter variable count to 0.\n    - Initialize two variables i and j to 0.\n    - Initialize a boolean variable is_possible to True.\n    - Initialize a boolean variable reached_d to False.\n\n    - Loop till i is less than steps:\n        - Check if is_possible is True.\n            - If it is True, then check if (j+d, 0) is within the range of (0, steps). \n                - If it is True, then increase the counter count by 1. \n                - Set is_possible to False.\n        - Increment i by 1.\n        - Increment j by 1.\n\n    - Return count.\n\n    Complexity Analysis:\n    - Time Complexity: O(n) where n is the number of steps.\n    - Space Complexity: O(1).\n    '''\n\n    count = 0\n    i = 0\n    j = 0\n    is_possible = True\n    reached_d = False\n\n    while i < steps:\n        if is_possible:\n            if (j+d, 0) >= 0 and (j+d, 0) < steps:\n                count += 1\n                is_possible = False\n        i += 1\n        j += 1\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Initialize variables\n    steps = steps - 1 # Steps are one less than the number of steps needed to reach the desired point\n    i = 0\n    j = 0\n    count = 0\n    \n    # Loop while steps are greater than zero\n    while steps > 0:\n        # Move up\n        if j == 0:\n            steps -= 1\n            i += 1\n            j = i # Set j to i to move upward\n            count += 1\n        # Move left\n        elif j == steps:\n            steps -= 1\n            j -= 1\n            count += 1\n        # Move diagonally up and left\n        else:\n            steps -= 1\n            i += 1\n            j -= 1\n            count += 1\n            \n    # Check if the desired point was reached\n    if i == d and j == 0:\n        return count\n    else:\n        return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    steps = steps[::-1]\n    current_location = 0\n    jumps = 0\n    while current_location < len(steps) and steps[current_location] < d:\n        jumps += 1\n        current_location += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_x = 0\n    current_y = 0\n    next_x = d\n    next_y = 0\n\n    while True:\n        current_x = next_x\n        current_y = next_y\n\n        if current_x == 0 and current_y == 0:\n            return jumps\n\n        if current_x < 0 or current_x >= steps:\n            return -1\n\n        if current_y == 0:\n            next_x = current_x + 1\n            next_y = current_y + 1\n            jumps += 1\n        elif current_y < 0:\n            next_x = current_x\n            next_y = current_y + 1\n            jumps += 1\n        elif current_x == steps:\n            next_x = current_x - 1\n            next_y = current_y + 1\n            jumps += 1\n        elif current_y == steps:\n            next_x = current_x\n            next_y = current_y - 1\n            jumps += 1\n        else:\n            return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    # Find the maximum distance that can be reached from origin in the 2d plane\n    max_distance = steps // d\n\n    # Initialize variables\n    current_distance = 0\n    current_jumps = 0\n\n    # Iterate through all possible distances from origin to (max_distance, 0)\n    for i in range(1, max_distance + 1):\n        # Check if it's possible to reach (max_distance - i, 0)\n        if max_distance - i >= 0:\n            # If it is, update the current distance and jumps\n            current_distance = max_distance - i\n            current_jumps = i\n\n    # Return the number of jumps required to reach the target\n    return current_jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    jumps = 0\n    i = 0\n    while i <= steps:\n        i += 1\n        if i % 2 == 0:\n            d -= 1\n            jumps += 1\n            if d < 0:\n                d = 0\n        else:\n            d += 1\n            jumps += 1\n            if d > 0:\n                d = 0\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    current_pos = (0, 0)\n    current_level = 1\n    jump_count = 0\n\n    # Loop through each step\n    for i in range(steps):\n\n        # If the current position is (d, 0), we're done!\n        if current_pos == (d, 0):\n            return jump_count\n\n        # If we're already at the end of the current level, move to the next level\n        if current_level >= len(current_pos):\n            current_level += 1\n            current_pos = (0, current_level)\n\n        # Otherwise, move one step to the right\n        current_pos = (current_pos[0] + 1, current_pos[1])\n        jump_count += 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize a variable to store the minimum number of jumps required\n    min_jumps = 0\n\n    # Loop through the number of steps\n    for i in range(1, steps+1): \n        # Calculate the number of jumps required\n        jumps = (d // i) * (i-1)\n\n        # Update the minimum number of jumps if the current jumps count is lesser\n        if jumps < min_jumps: \n            min_jumps = jumps\n\n    # Return the minimum number of jumps\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    jumps = [[0 for _ in range(steps+1)] for _ in range(steps+1)]\n    for i in range(1, steps+1):\n        for j in range(1, steps+1):\n            if (i, j) == (steps, 0):\n                jumps[i][j] = steps\n            elif abs(i-d) < abs(j-d):\n                jumps[i][j] = 1 + min(jumps[i][j-1], jumps[i][j+1])\n            else:\n                jumps[i][j] = 1 + jumps[i][j-1] + jumps[i][j+1]\n    return jumps[steps][steps]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 0\n    \n    while i < steps:\n        if i + d >= steps:\n            break\n        i += d\n        jumps += 1\n        \n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should have same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return None\n    \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have same length\")\n        return\n    \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return 'Both lists must have the same length.'\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return 'Lists must be of equal length'\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]/nums2[i])\n        return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    test_str = ''.join(num_list)\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if num_list:\n        return test_str[:-len(num_list)] + ''.join(num_list)\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initializing empty lists for numbers and non-numbers\n    nums = []\n    non_nums = []\n    \n    # iterating over each character in the string\n    for char in test_str:\n        # checking if the character is a number\n        if char.isdigit():\n            # adding the number to the list of numbers\n            nums.append(char)\n        else:\n            # adding the non-number to the list of non-numbers\n            non_nums.append(char)\n    \n    # concatenating the lists of numbers and non-numbers\n    result = nums + non_nums\n    \n    # returning the concatenated string\n    return ''.join(result)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty string to store the numbers\n    numbers = ''\n    # Iterate through each character in the input string\n    for char in test_str:\n        # If the character is a number, append it to the numbers string\n        if char.isdigit():\n            numbers += char\n        # If the character is not a number, append it to the end of the output string\n        else:\n            test_str += char\n    # Return the final string with the numbers moved to the end\n    return numbers + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # split the string into a list of words\n    words = test_str.split()\n    \n    # initialize a variable to store the number words\n    nums = []\n    \n    # iterate through the words and check if each word is a number\n    for word in words:\n        if word.isdigit():\n            nums.append(word)\n    \n    # join the number words to the end of the list of words\n    words.extend(nums)\n    \n    # join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n    num_str = ''.join(num_list)\n    test_str = test_str.replace(num_str, '')\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_list.reverse()\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return ''.join(num_list) + test_str[num_list[-1]:]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    # Remove all non-numeric characters from the string\n    num_str = ''.join(filter(str.isdigit, test_str))\n\n    # Check if the string contains any digits\n    if num_str == '':\n        return test_str\n    else:\n        # Split the string into two parts based on the first non-numeric character\n        num_part, rest_str = num_str.split(num_str[0])\n        # Reverse the number part and the rest of the string\n        num_part = num_part[::-1]\n        rest_str = rest_str[::-1]\n        # Concatenate the number part and the rest of the string\n        result_str = num_part + rest_str\n        return result_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    # create an empty string to store numbers\n    number_str = \"\"\n    # loop through each character in the input string\n    for char in test_str:\n        # if the character is a number, add it to the number_str\n        if char.isdigit():\n            number_str += char\n        # if the character is not a number, add it to the end of the original string\n        else:\n            test_str += char\n    # replace the original string with the number_str\n    test_str = number_str\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in descending order\n    a.sort(reverse=True)\n    # initialize variables to keep track of the largest subset found and the size\n    largest_set = 0\n    subset_size = 0\n    # loop through the list and check if every pair is divisible by the current number\n    for num in a:\n        if num % subset_size == 0:\n            # if the current number is divisible by the current subset size, add it to the largest subset\n            largest_set += num\n            # increment the subset size and check if it's still larger than the current largest subset\n            subset_size += 1\n            if largest_set > largest_set:\n                largest_set = subset_size\n    return largest_set"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    # sort the list in ascending order\n    a.sort()\n    n = len(a)\n    # initialize variables\n    max_length = 0\n    max_start = 0\n    # loop through each element in the list\n    for i in range(n):\n        # calculate the difference between the current element and the previous element\n        diff = a[i] - a[i-1]\n        # if the difference is less than or equal to 0, the current element cannot be a subset of the previous one\n        if diff <= 0:\n            # if the current element is greater than the previous element, update max_length and max_start\n            if a[i] > a[max_start]:\n                max_length = a[i] - a[max_start] + 1\n                max_start = i\n        # if the difference is greater than 0, the current element can be a subset of the previous one\n        else:\n            # if the current element is greater than the previous element, update max_length and max_start\n            if a[i] > a[max_start]:\n                max_length = a[i] - a[max_start] + 1\n                max_start = i\n    # return the size of the largest subset\n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n\n    for i in range(1, n):\n        if a[i] % a[i - 1] == 0:\n            dp[i] = dp[i - 1] + 1\n        else:\n            for j in range(i):\n                if a[i] % a[j] == 0:\n                    dp[i] = max(dp[i], dp[j] + 1)\n                    break\n\n    return dp[-1]"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list of numbers\n    a.sort()\n\n    # Initialize variables\n    prev_sum = 0\n    size = 0\n    current_sum = 0\n\n    # Iterate over the sorted list of numbers\n    for num in a:\n        current_sum += num\n\n        # Check if the current sum is divisible by the previous sum\n        if current_sum % prev_sum == 0:\n            size += 1\n\n        # Update the previous sum\n        prev_sum = current_sum\n\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Create a dictionary to store the sum of all numbers in the set\n    set_sum = {}\n    for num in a:\n        if num not in set_sum:\n            set_sum[num] = num\n\n    # Initialize the largest subset size to 0\n    max_size = 0\n\n    # Iterate through the list of numbers\n    for i in range(len(a)):\n        # Initialize the current subset size to 1\n        subset_size = 1\n\n        # Iterate through the remaining numbers in the list\n        for j in range(i + 1, len(a)):\n            # Check if the pair of numbers is divisible\n            if a[i] + a[j] in set_sum:\n                # If it is, update the current subset size\n                subset_size += 1\n\n        # Update the largest subset size if needed\n        max_size = max(max_size, subset_size)\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    largest_size = 0\n    largest_set = []\n    min_diff = float('inf')\n    min_set = []\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(a[i] - a[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_set = [a[i], a[j]]\n            if diff == min_diff:\n                min_set.append(a[j])\n            if all(diff % d == 0 for d in a):\n                largest_size = max(largest_size, len(min_set))\n                largest_set = min_set\n                min_set = []\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a dictionary to store the frequency of each number in the list\n    freq = {}\n    for num in a:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # find the maximum frequency in the dictionary\n    max_freq = max(freq.values())\n    \n    # create a list to store the subsets of numbers with the maximum frequency\n    max_subset = []\n    \n    # loop through each number in the list\n    for num in a:\n        # check if the number is divisible by the maximum frequency\n        if freq[num] % max_freq == 0:\n            # if it is, add it to the subset list\n            max_subset.append(num)\n        # if the number is not divisible by the maximum frequency, decrement its frequency\n        else:\n            freq[num] -= 1\n    \n    # find the size of the largest subset\n    subset_size = len(max_subset)\n    \n    return subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    max_size = 0\n    curr_size = 1\n\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            curr_size += 1\n        else:\n            max_size = max(max_size, curr_size)\n            curr_size = 1\n\n    max_size = max(max_size, curr_size)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize two pointers, one for the start of the subset and the other for the end of the subset\n    start, end = 0, len(a) - 1\n\n    # Initialize the maximum size of the subset\n    max_size = 0\n\n    # Iterate through the list and find the largest subset that satisfies the condition\n    for i in range(len(a)):\n        while a[i] % a[start]!= 0:\n            # If the current element is not divisible by the start element, move the start pointer\n            start += 1\n\n        # Update the maximum size if the current subset is larger\n        if i - start + 1 > max_size:\n            max_size = i - start + 1\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n    \n    # Sort the concatenated array\n    arr.sort()\n    \n    # Calculate the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (arr[mid-1] + arr[mid]) / 2\n    else:\n        median = arr[mid]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two lists and return the median\n    merged_list = arr1 + arr2\n    sorted_list = sorted(merged_list)\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[len(sorted_list)//2 - 1] + sorted_list[len(sorted_list)//2]) / 2\n    else:\n        return sorted_list[len(sorted_list)//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    # Check if the lists are of same size\n    if len(arr1)!= len(arr2):\n        return \"Lists are not of the same size.\"\n\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    merged_list.sort()\n\n    # Find the median index\n    median_index = n // 2\n\n    # Check if the length of the merged list is odd or even\n    if n % 2 == 0:\n        # If even, return the average of the two middle elements\n        return (merged_list[median_index - 1] + merged_list[median_index]) / 2\n    else:\n        # If odd, return the middle element\n        return merged_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two sorted lists\n    arr = arr1 + arr2\n\n    # Sort the concatenated list\n    arr.sort()\n\n    # Calculate the median\n    if n % 2 == 0:\n        # If the number of elements is odd, the median is the average of the two middle elements\n        median = (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        # If the number of elements is even, the median is the middle element\n        median = arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two sorted lists\n    arr = arr1 + arr2\n    \n    # Sort the concatenated list\n    arr.sort()\n    \n    # Calculate the median\n    if n % 2 == 0:\n        # If the length of the list is even, return the average of the middle two numbers\n        return (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        # If the length of the list is odd, return the middle number\n        return arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Sort the two lists\n    arr1.sort()\n    arr2.sort()\n\n    # Find the middle elements of both lists\n    mid1 = arr1[n // 2]\n    mid2 = arr2[n // 2]\n\n    # Return the median\n    return (mid1 + mid2) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n\n    Parameters:\n    arr1 (list): List of integers.\n    arr2 (list): List of integers.\n    n (int): Number of integers in the two lists.\n\n    Returns:\n    float: The median of the two lists.\n    \"\"\"\n\n    arr1_index = 0\n    arr2_index = 0\n\n    while arr1_index < n and arr2_index < n:\n        if arr1[arr1_index] < arr2[arr2_index]:\n            if arr1_index == n-1:\n                return arr2[arr2_index]\n            else:\n                arr1_index += 1\n        elif arr1[arr1_index] > arr2[arr2_index]:\n            if arr2_index == n-1:\n                return arr1[arr1_index]\n            else:\n                arr2_index += 1\n        else:\n            arr1_index += 1\n            arr2_index += 1\n\n    if n % 2 == 0:\n        return (arr1[arr1_index-1] + arr2[arr2_index-1])/2.0\n    else:\n        return arr1[arr1_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    merged = arr1 + arr2\n    sorted_merged = sorted(merged)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_merged[mid - 1] + sorted_merged[mid]) / 2\n    else:\n        return sorted_merged[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Sort the two input arrays\n    arr1.sort()\n    arr2.sort()\n\n    # Calculate the median based on the number of elements n\n    if n % 2 == 0:\n        # Find the median of two elements\n        median = (arr1[n//2] + arr2[n//2])/2\n    else:\n        # Find the median of one element and one element\n        median = arr1[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function finds the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    merged_list.sort()\n\n    # Calculate the length of the list\n    length = len(merged_list)\n\n    # Check if the length is odd or even\n    if length % 2 == 0:\n        # Return the average of the two middle elements\n        return (merged_list[length//2 - 1] + merged_list[length//2]) / 2\n    else:\n        # Return the middle element\n        return merged_list[length//2]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = 1\n    for num in nums:\n        power = power * num ** n\n    return power"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n and returns a list of the nth power of each number in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): An integer representing the power to compute.\n\n    Returns:\n        list: A list of the n-th powers of the numbers in nums.\n    \"\"\"\n    n_powers = []\n    for num in nums:\n        n_powers.append(num ** n)\n    return n_powers"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power_nums = []\n    for num in nums:\n        power_num = num**n\n        power_nums.append(power_num)\n    return power_nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is in uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an argument and converts it to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is in uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check whether a given string is uppercase or not.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    uppercase_string = string.upper()\n    return uppercase_string"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Check if the list has less than two elements\n    if len(newList) < 2:\n        return \"List must have at least two elements to swap.\"\n\n    # Swap the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_last = newList[0] + newList[-1]\n    newList[0] = newList[-1]\n    newList[-1] = first_last\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"The given list should contain at least two elements to swap.\")\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        print(\"The swapped list is:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # find the index of the last element of the list\n        lastIndex = len(newList) - 1\n        # find the index of the first element of the list\n        firstIndex = 0\n        # swap the first and last elements of the list\n        newList[firstIndex], newList[lastIndex] = newList[lastIndex], newList[firstIndex]\n        # print the modified list\n        print(newList)\n    else:\n        print(\"The given list has less than two elements.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # using slicing to swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) >= 2:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        return None"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) <= 1: \n        return newList \n    else: \n        first = newList[0] \n        last = newList[-1] \n        newList[0] = last \n        newList[-1] = first \n        return newList "
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] # swapping first and last element\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159265359\n    a = (r**2) / pi\n    b = (r**2) / pi\n    c = (r**2) / pi\n    area = (a + b + c) / 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Use Heron's formula to find the area of a triangle inscribed in a semicircle with radius r\n    area = (3 * r**2) / (4 * (r**2 + 1))\n    \n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    s = 2*math.pi*r\n    \n    # Calculate the area of the triangle using Heron's formula\n    a = (math.sqrt(3)*r**2)/s\n    \n    # Calculate the area of the largest triangle\n    max_area = a\n    \n    # Calculate the area of the other two triangles\n    min_radius = 0.5*(max_area/3)\n    area_1 = math.pi*min_radius**2\n    area_2 = math.pi*r**2\n    \n    # Find the larger of the two triangles\n    if area_1 > area_2:\n        max_area = area_1\n    else:\n        max_area = area_2\n    \n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r # calculate area of base of triangle\n    height = 0.5 * r # calculate height of triangle\n    while abs(height) < r: # loop until height is less than radius\n        area = area + height * height # add area of triangle to total area\n        height = height + 0.5 # increase height of triangle by 0.5\n    return area # return total area of all triangles"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    # Find the semi-circle's diameter\n    d = 2 * r\n    \n    # Find the triangle's area\n    A = (3 * r * r) / (4 * math.tan(math.pi / 3))\n    \n    # Find the semi-circle's area\n    area = math.pi * r * r\n    \n    # Find the largest triangle's area that can be inscribed in the semicircle\n    max_area = 0\n    \n    for i in range(1, 4):\n        s = 1 / (2 * i)\n        h = d / s\n        \n        # Find the semi-circle's triangle area\n        t_area = (3 * r * r) / (4 * math.tan(math.pi / i))\n        \n        # Find the triangle's height\n        ht = h / math.sin(math.pi / i)\n        \n        # Find the triangle's width\n        w = (ht * r) / math.cos(math.pi / i)\n        \n        # Find the triangle's area\n        area = (ht * w) / 2\n        \n        # Check if the triangle's area is greater than the current maximum\n        if area > max_area:\n            max_area = area\n    \n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculate the area of the smallest triangle that can be inscribed in the semicircle\n    a = (r**2) / (3.0 * math.sqrt(5.0))\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    b = math.sqrt(r**2 - a**2)\n    \n    # Calculate the area of the largest triangle\n    area = (a * b) / 2.0\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Define the semicircle using radius r\n    a, b = 2*r, r\n    # Calculate the areas of the triangles using Heron's formula\n    area1 = 0.5*a*a + 0.5*b*b\n    area2 = 0.5*r*r + 0.5*a*a\n    area3 = 0.5*r*r + 0.5*b*b\n    # Find the largest area\n    largest_area = max(area1, area2, area3)\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the area of the smallest triangle inscribed in a semicircle with radius r\n    a = 2 * r\n\n    # Find the area of the largest triangle that can be inscribed in a semicircle with radius r\n    b = 4 * r * r\n    c = 3 * r ** 2\n\n    # Use Heron's formula to find the area of the largest triangle\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # calculate the semi-perimeter of the semicircle\n    s = 2*math.pi*r\n    \n    # calculate the area of the largest triangle\n    max_area = 0\n    for i in range(1, 6):\n        a = (i-1)/2\n        area = math.acos((1-2*a/r)**2)\n        if area > max_area:\n            max_area = area\n            \n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-circle radius\n    semi_circle_radius = r * math.sin(math.pi/3)\n    \n    # Calculate the area of the largest triangle\n    area = semi_circle_radius * (semi_circle_radius - r) * (semi_circle_radius - r) / 2\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = max(array)\n\n    for num in range(start, end+1):\n        if num not in array:\n            return num\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i + 1 not in array:\n            return i + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i] + 1!= array[i+1]:\n            return array[i] + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of integers and returns the smallest missing number in the array.\n\n    Args:\n        array (list): A sorted list of integers.\n        start (int, optional): The starting index of the array. Defaults to 0.\n        end (int, optional): The ending index of the array. Defaults to None, which means to find the missing number up to the end of the array.\n\n    Returns:\n        int: The smallest missing number in the array.\n    \"\"\"\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if i == array[i]:\n            return i\n\n    return end"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    \n    return end + 1 + start\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i] + 1!= array[i + 1]:\n            return array[i] + 1\n\n    return array[end] + 1 + end"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if the array is sorted in ascending order\n    if not all(array[i] < array[i + 1] for i in range(len(array) - 1)):\n        raise ValueError('The array must be sorted in ascending order')\n\n    # Find the first missing number\n    if end is None:\n        end = max(array)\n\n    for i in range(start, end + 1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the first missing number.\n    \"\"\"\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if i+1 not in array:\n            return i+1\n    return end+1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a list of even numbers.\n    '''\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list: \n        if number % 2 == 0: \n            even_numbers.append(number) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list: \n        if number % 2 == 0: \n            even_numbers.append(number) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as an argument and returns a new list containing only the even numbers.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    # Finding even numbers from the list\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x-1 in sub:\n        sub.append((x-1, y))\n    if x+1 in sub:\n        sub.append((x+1, y))\n    if y-1 in sub:\n        sub.append((x, y-1))\n    if y+1 in sub:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=None):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n    Parameters:\n    -----------\n    ele: tuple\n        A coordinate tuple with x, y, and z values.\n    sub: list, optional\n        A list of adjacent coordinates to the given coordinate tuple.\n\n    Returns:\n    --------\n    list\n        A list of adjacent coordinates.\n    \"\"\"\n\n    if sub is None:\n        sub = []\n\n    x, y, z = ele\n    sub.append((x+1, y, z))\n    sub.append((x-1, y, z))\n    sub.append((x, y+1, z))\n    sub.append((x, y-1, z))\n    sub.append((x, y, z+1))\n    sub.append((x, y, z-1))\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    neighbors = []\n    \n    # add to sub if it's not already there\n    if (x, y) not in sub:\n        sub.append((x, y))\n    \n    # add adjacent coordinates to neighbors list\n    if x > 0:\n        neighbors.append((x-1, y))\n    if x < 3:\n        neighbors.append((x+1, y))\n    if y > 0:\n        neighbors.append((x, y-1))\n    if y < 3:\n        neighbors.append((x, y+1))\n    \n    return neighbors"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    # get the adjacent coordinates for the given coordinate tuple\n    x, y = ele\n    adj = [(x, y-1), (x, y+1), (x-1, y), (x+1, y)]\n    adj = [(x+dx, y+dy) for dx, dy in adj if 0 <= x+dx < 10 and 0 <= y+dy < 10]\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # unpacking the given coordinate tuple\n    x, y = ele\n    \n    # creating a list to store the adjacent coordinates\n    adj = []\n    \n    # adding the adjacent coordinates to the list\n    if x - 1 >= 0:\n        adj.append((x - 1, y))\n    if x + 1 < len(sub):\n        adj.append((x + 1, y))\n    if y - 1 >= 0:\n        adj.append((x, y - 1))\n    if y + 1 < len(sub[0]):\n        adj.append((x, y + 1))\n    \n    # returning the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    sub.append(adj)\n    if adj not in sub:\n        return adjac(adj, sub)\n    else:\n        return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if sub is None:\n        sub = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    else:\n        sub = sub + [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x+1 not in sub:\n        sub.append((x+1, y))\n    if y-1 not in sub:\n        sub.append((x, y-1))\n    if x-1 not in sub:\n        sub.append((x-1, y))\n    if y+1 not in sub:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x - 1 >= 0:\n        sub.append((x - 1, y))\n    if x + 1 < 10:\n        sub.append((x + 1, y))\n    if y - 1 >= 0:\n        sub.append((x, y - 1))\n    if y + 1 < 10:\n        sub.append((x, y + 1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacents = []\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if dx == 0 and dy == 0:\n                continue\n            nx = x + dx\n            ny = y + dy\n            if (nx, ny) not in sub:\n                adjacents.append((nx, ny))\n    return adjacents"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # initialize an empty list to store the transformed text\n    transformed_text = []\n\n    # iterate over each character in the input text\n    for char in text:\n        # check if the character is a space\n        if char =='':\n            # add an underscore to the transformed text\n            transformed_text.append('_')\n        else:\n            # add the original character to the transformed text\n            transformed_text.append(char)\n\n    # join the transformed text into a single string and return it\n    return ''.join(transformed_text)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Convert the string to lowercase\n    text = text.lower()\n\n    # Iterate over each character in the string\n    for i in range(len(text)):\n\n        # If the character is a space, replace it with an underscore\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n\n        # If the character is an underscore, replace it with a space\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n\n    # Return the modified string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # create a list of characters to replace spaces with underscores\n    space_chars = [' ', '\\t', '\\n', '\\r']\n    # create a list of characters to replace underscores with spaces\n    underscore_chars = ['_', '\\t', '\\n', '\\r']\n    # iterate through the text string\n    for char in text:\n        # check if the character is a space or underscore and replace it accordingly\n        if char in space_chars:\n            text = text.replace(char, '_')\n        elif char in underscore_chars:\n            text = text.replace(char,'')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Define a dictionary to store the mapping of spaces and underscores\n    mapping = {' ': '_', '_':''}\n    # Iterate over each character in the string\n    for char in text:\n        # If the character is a space, replace it with an underscore\n        if char =='':\n            text = text.replace(char, mapping[char])\n        # If the character is an underscore, replace it with a space\n        elif char == '_':\n            text = text.replace(char, mapping[char])\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # convert the input string to a list of characters\n    text_list = list(text)\n    \n    # loop through each character in the list\n    for i in range(len(text_list)):\n        \n        # if the current character is a space, replace it with an underscore\n        if text_list[i] =='':\n            text_list[i] = '_'\n        \n        # if the current character is an underscore, replace it with a space\n        elif text_list[i] == '_':\n            text_list[i] =''\n    \n    # convert the list of characters back to a string and return it\n    return ''.join(text_list)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # initialize a variable to store the new string with replaced spaces\n    new_text = \"\"\n    \n    # iterate through each character in the input string\n    for char in text:\n        \n        # check if the character is a space\n        if char == \" \":\n            \n            # replace the space with an underscore\n            new_text += \"_\"\n            \n        # if the character is not a space\n        else:\n            \n            # append the character to the new string\n            new_text += char\n            \n    # return the new string with replaced spaces\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n    if zero_count > 0:\n        num_list.append(zero_count)\n    else:\n        num_list.reverse()\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list.pop(zero_index)\n        num_list.extend([0] * (len(num_list) - zero_index - 1))\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list  # all non-zero values were already at the end of the list\n    else:\n        return num_list[:zero_index] + num_list[zero_index+1:]"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_indices = []\n    for i, num in enumerate(num_list):\n        if num == 0:\n            zero_indices.append(i)\n    \n    zero_indices.sort(reverse=True)\n    \n    for i in zero_indices:\n        num_list.pop(i)\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all zeroes to the end of the list.\n    \"\"\"\n    # Initialize a variable to keep track of the index of the last non-zero number\n    last_non_zero_index = 0\n    \n    # Iterate through the list and move all non-zero numbers to the end of the list\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[last_non_zero_index], num_list[i] = num_list[i], num_list[last_non_zero_index]\n            last_non_zero_index += 1\n    \n    # Move all zeroes to the end of the list\n    while last_non_zero_index < len(num_list):\n        num_list[last_non_zero_index], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[last_non_zero_index]\n        last_non_zero_index += 1\n    \n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize the index of the first non-zero value\n    i = 0\n    \n    # Iterate over the list\n    for num in num_list:\n        # If the current value is non-zero, move it to the new position\n        if num!= 0:\n            num_list[i], num_list[num_list.index(num)] = num, num_list[i]\n            i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n        else:\n            zero_count += 1\n    for i in range(zero_count):\n        new_list.append(0)\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    zero_indices = [i for i, x in enumerate(num_list) if x == 0]\n    for i in reversed(zero_indices):\n        num_list.pop(i)\n        num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_indices = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_indices.append(i)\n    if len(zero_indices) > 0:\n        num_list[len(num_list)-1], num_list[max(zero_indices)] = num_list[max(zero_indices)], num_list[len(num_list)-1]\n        for i in range(len(num_list)-1, max(zero_indices)-1, -1):\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n\n    for i in range(len(num_list)-1, -1, -1):\n        if i not in zero_index:\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list and a number n as input.\n    It returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and the number of elements in the list and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    # Calculate the xor of all pairs of numbers in the list\n    xor_sum = sum([a ^ b for a, b in zip(arr, arr[1:])])\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            total += xor\n    return total"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all elements in the list\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n\n    # XOR of all pairs of elements\n    xor_pair = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_pair = xor_pair ^ arr[i] ^ arr[j]\n\n    # Calculate the sum of xor of all pairs of elements and xor of all elements in the list\n    return xor + xor_pair"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heapsort algorithm.\n    '''\n    # Convert the list to a min heap\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n\n    # Convert the heap back to a list and return it\n    return [heapq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the list to a list of tuples with the elements as keys and their indices as values\n    keys_and_indices = [(key, i) for i, key in enumerate(iterable)]\n\n    # Build a max heap from the list of tuples\n    hq.heapify(keys_and_indices)\n\n    # Extract and remove the elements from the heap in sorted order\n    result = []\n    while keys_and_indices:\n        max_key, max_index = hq.heappop(keys_and_indices)\n        result.append(max_key)\n\n        # If the heap is not empty and the maximum element is greater than the next element, swap them\n        if keys_and_indices and keys_and_indices[0][0] > max_key:\n            hq.heappush(keys_and_indices, max_key)\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # Convert the given list to a max heap\n    hq.heapify(iterable)\n    # Remove the maximum element from the heap and append it to the sorted list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def heap_sort(iterable):\n    '''\n    Sorts the given iterable in ascending order using the heap sort algorithm.\n    '''\n    # Create a max heap from the given iterable\n    hq.heapify(iterable)\n    \n    # Extract elements from the heap and insert them into a new list in ascending order\n    sorted_list = []\n    while hq.heapify(iterable):\n        sorted_list.append(hq.heappop(iterable))\n    \n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heapsort algorithm.\n    '''\n    # Convert the list to a heap\n    hq.heapify(iterable)\n\n    # Extract each element from the heap in sorted order\n    result = []\n    while iterable:\n        result.append(iterable.pop())\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heapsort algorithm.\n    '''\n    # Create a min-heap of the given list\n    heap = list(iterable)\n    hq.heapify(heap)\n\n    # Iterate through the list and pop the smallest element each time\n    for _ in range(len(heap)):\n        # Extract the smallest element and append it to the end of the list\n        heapq.heappush(heap, hq.heappop(heap))\n\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a min-heap from the given iterable\n    heap = hq.nsmallest(len(iterable), iterable)\n    # Iterate through the heap and append elements to the result list\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n\n    # convert the iterable to a list\n    lst = list(iterable)\n\n    # build the min heap from the list\n    hq.heapify(lst)\n\n    # extract the elements from the heap and add them to the sorted list\n    while lst:\n        sorted_lst.append(hq.heappop(lst))\n\n    # return the sorted list\n    return sorted_lst"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    if profit < 0 or sale_amount == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    \"\"\"\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if profit is positive and loss is negative or zero\n    if profit > 0 and (loss < 0 or loss == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profits and losses\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if profits and losses are zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost (float): Actual cost of the sale\n    sale_amount (float): Amount the customer has spent for the sale\n    \n    Returns:\n    bool: True if there is no loss and no profit, False otherwise\n    '''\n\n    # check for no profit\n    if actual_cost > sale_amount:\n        return False\n\n    # check for no loss\n    if sale_amount > actual_cost:\n        return False\n\n    return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # If sale amount is greater than actual cost\n    if sale_amount > actual_cost:\n        print(\"No profit and no loss\")\n    else:\n        print(\"Profit and loss\")\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        print(\"The given amount has no profit and no loss.\")\n        return True\n    else:\n        print(\"The given amount does not have no profit and no loss.\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss\n    \"\"\"\n    profit = actual_cost - sale_amount\n    \n    if profit > 0 and profit / sale_amount > 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # check if the actual cost is greater than the sale amount\n    if actual_cost > sale_amount:\n        # if yes, check if the sale amount is greater than or equal to 0\n        if sale_amount >= 0:\n            # if yes, check if the actual cost is greater than or equal to the sale amount\n            if actual_cost >= sale_amount:\n                # if yes, the given amount has no profit and no loss\n                return True\n            else:\n                # if no, the given amount has no profit but loss\n                return False\n        else:\n            # if no, the given amount has no profit and no loss\n            return True\n    else:\n        # if no, the given amount has no loss\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    if profit <= 0 and loss <= 0:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        print(\"The given amount has a profit or loss\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Calculate the wind chill temperature\n    wind_chill_temp = math.floor(23.7 + 0.6215*v + 11.37*t - 0.3965*t**2)\n    \n    # Calculate the heat index\n    heat_index = math.floor(0.5*(v+t)+((13.12 + 0.6215*v + 11.37*t - 0.3965*t**2)*5/9))\n    \n    # Calculate the wind chill index\n    wind_chill_index = math.floor(13.12 + 0.6215*v + 11.37*t - 0.3965*t**2)\n    \n    # Check the wind chill index against the heat index and return the appropriate value\n    if wind_chill_index < heat_index:\n        return wind_chill_index\n    else:\n        return heat_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the nearest integer.\n\n    :param v: wind velocity in km/h\n    :param t: temperature in celsius\n    :return: wind chill index as an integer\n    \"\"\"\n\n    # convert temperature from Celsius to Fahrenheit\n    t_f = (t * 1.8) + 32\n\n    # calculate wind chill index\n    wci = (13.12 + 0.6215 * v - 11.37 * math.exp((t_f - 32) / 1.8)) / 0.0068\n\n    # round wind chill index to the nearest integer\n    wci = int(wci + 0.5)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 0.0611 # cloud cover constant\n    h = 213.0 # reference height for wind speed calculation\n    t = t + 273.15 # convert temperature to Kelvin\n    wind_speed = math.sqrt(v**2 + 0.0065*t**1.5) # calculate wind speed in m/s\n    if wind_speed < 1.0: # if wind speed is below 1 km/h\n        c_value = 1.0 # cloud cover is 100%\n    else:\n        c_value = c*math.exp(17.625*math.log(wind_speed/(h*0.0065))) # calculate cloud cover value\n    if c_value > 0.34: # if cloud cover is above 34%\n        wind_chill_value = math.floor((13.12 + (0.6215*t) - (11.37*math.exp(-0.133*t)))/c_value + 22.37) # calculate wind chill index\n    else:\n        wind_chill_value = math.floor((13.12 + (0.6215*t) - (13.04*math.exp(-0.146*t)))/c_value + 24.29) # calculate wind chill index\n    return wind_chill_value"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": ""
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_value = 0\n\n    if v < 0.1:\n        wind_chill_value = 0\n    elif 0.1 <= v <= 2.5:\n        wind_chill_value = 13.12 + 0.6215*t - 11.37*math.log(t) + 0.3965*t**2 + 5.27*math.log(t)\n    elif 2.5 < v <= 10:\n        wind_chill_value = 11.37 + 0.4687*t - 8.12*math.log(t) + 0.34*t**2\n    elif 10 < v <= 18:\n        wind_chill_value = 8.50 + 0.3448*t - 5.95*math.log(t) + 0.275*t**2\n    elif 18 < v <= 25:\n        wind_chill_value = 6.11 + 0.25*t - 4.25*math.log(t) + 0.22*t**2\n    else:\n        wind_chill_value = 3.9 + 0.18*t - 2.15*math.log(t) + 0.15*t**2\n\n    if wind_chill_value < -40:\n        wind_chill_value = -40\n    elif wind_chill_value > 120:\n        wind_chill_value = 120\n\n    return int(wind_chill_value)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    return round(max(32 + (0.6215 * t) - 11.37 * v**0.16, 0))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill in celsius\n    wchill = 35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * math.log(v) - 0.14 * (t**2) + 1.85 * (t**2) * math.log(v)\n    # Convert the wind chill from celsius to Fahrenheit\n    wchill_fahrenheit = (wchill * 1.8) + 32\n    # Round the wind chill index to the nearest integer and return it\n    return round(wchill_fahrenheit)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature to Fahrenheit\n    t = (t * 9/5) + 32\n    \n    # Calculate wind chill index\n    wind_chill_index = 35.74 + 0.6215 * v - 35.75 * math.exp((17.625 * t) / (t + 243.125))\n    \n    # Round to the nearest integer\n    wind_chill_rounded = round(wind_chill_index)\n    \n    # Return the wind chill index rounded to the next integer\n    return wind_chill_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -5:\n        return 'Invalid temperature: Temperature must be between -5 and 5 degrees Celsius.'\n    \n    if v < 0:\n        return 'Invalid wind velocity: Wind velocity must be non-negative.'\n    \n    # Calculate the dewpoint temperature\n    R = 8.314 # Ideal gas constant\n    c = 100 # Speed of sound in air (m/s)\n    T = t + 273.15 # Temperature in Kelvin\n    P = math.exp(17.625 * (T - 273.15) / (T + 237.3)) # Pressure in Pascals\n    s = math.sqrt(17.625 * T / (T + 237.3)) # Speed of sound in water (m/s)\n    \n    # Calculate the dewpoint\n    dewpoint = T - 0.0065 * (v ** 2) * math.exp(17.625 * (T - 273.15) / (T + 237.3))\n    \n    # Calculate the wind chill index\n    wind_chill_index = (13.12 + 0.6215 * (dewpoint - 21.2) ** 0.16) * math.exp(17.625 * (T - 273.15) / (T + 237.3)) / s\n    \n    # Round the wind chill index to the nearest integer\n    wind_chill_rounded = round(wind_chill_index)\n    \n    return wind_chill_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    celsius = t - 273.15 # convert temperature from celsius to kelvin\n    wind_speed = v * 1.609344 # convert wind speed from km/h to m/s\n    \n    if wind_speed >= 0 and wind_speed <= 2.5: # low wind speed\n        return int(math.ceil((2.08 * celsius) - 468.6))\n    elif 2.5 < wind_speed <= 6.5: # moderate wind speed\n        return int(math.ceil((13.12 * celsius) - 3.37))\n    elif 6.5 < wind_speed <= 11.5: # high wind speed\n        return int(math.ceil((-0.77 * celsius) + 32.7))\n    elif 11.5 < wind_speed <= 16.5: # very high wind speed\n        return int(math.ceil((0.62 * celsius) - 21.26))\n    elif wind_speed > 16.5: # extreme wind speed\n        return int(math.ceil((13.12 * celsius) - 3.37))\n    else:\n        return None"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_with_lowercase = [name for name in sample_names if name[0].isupper()] # filter out names that start with a lowercase letter\n    lengths = [len(name) for name in names_with_lowercase] # get the length of each name\n    total_length = sum(lengths) # add up the lengths of the names\n    return total_length # return the total length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Create an empty list to store the valid names\n    valid_names = []\n\n    # Iterate through each name in the sample_names list\n    for name in sample_names:\n\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n\n            # If the name starts with a lowercase letter, skip it\n            continue\n\n        # If the name doesn't start with a lowercase letter, add it to the valid_names list\n        valid_names.append(name)\n\n    # Initialize a variable to store the sum of the lengths of the valid names\n    name_length_sum = 0\n\n    # Iterate through each valid name in the valid_names list\n    for name in valid_names:\n\n        # Add the length of the name to the name_length_sum\n        name_length_sum += len(name)\n\n    # Return the name_length_sum\n    return name_length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():  # check if the name starts with a capital letter\n            continue  # skip this name if it does\n        total_length += len(name)  # add the length of the non-uppercase name to the total\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum to 0\n    sum_length = 0\n\n    # Iterate over the names in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it\n            continue\n        # If the name doesn't start with a lowercase letter, add its length to the sum\n        else:\n            sum_length += len(name)\n\n    # Return the sum of the lengths of the names\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            length += len(name)\n    return length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of the names that meet the criteria\n    sum_length = 0\n    \n    # Loop through the list of names and add the length of the name if it starts with a letter that is not lowercase\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    \n    # Return the sum of the lengths of the names that meet the criteria\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():  # check if the name starts with uppercase letter\n            count += len(name)  # add the length of the name to the count\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if name.isupper():\n            names.append(name)\n    sum_length = sum([len(name) for name in names])\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Remove the parenthesis and what's inbetween them from a string.\n    \"\"\"\n    pattern = r\"\\((.*?)\\)\"\n    matches = re.findall(pattern, items)\n    for match in matches:\n        items = items.replace(match, match[1:-1])\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'([^\\(\\)]+)')\n    new_items = pattern.findall(items)\n    return new_items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\((.*)\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    result = re.sub(pattern, r'\\1', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove parenthesis\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # Remove any spaces inside parenthesis\n    items = re.sub(r'\\([^)]*\\s*\\)', '', items)\n    # Remove any spaces outside parenthesis\n    items = re.sub(r'\\s*\\([^)]*\\)', '', items)\n    # Remove any consecutive spaces\n    items = re.sub(r'\\s+','', items)\n    # Remove any non-alphanumeric characters\n    items = re.sub(r'[^a-zA-Z0-9\\s]+', '', items)\n    # Remove any extra spaces\n    items = re.sub(r'\\s+','', items)\n    return items.strip()"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the first two nonagonal numbers\n    nonagonal_numbers = [1, 2]\n\n    # Check if the number of nonagonal numbers to generate is less than n\n    if len(nonagonal_numbers) < n:\n        # Generate n nonagonal numbers\n        for i in range(len(nonagonal_numbers), n):\n            # Add the sum of the previous two nonagonal numbers to the list\n            nonagonal_numbers.append(nonagonal_numbers[i-1] + nonagonal_numbers[i-2])\n\n    # Return the nth nonagonal number\n    return nonagonal_numbers[n-1]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        raise ValueError('n must be greater than or equal to 1')\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return (is_nonagonal(n-1) + is_nonagonal(n-2)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n - 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Check if the number of rows is odd\n    if n % 2!= 0:\n        # Calculate the number of rows\n        rows = n // 2\n        # Initialize the first row with 1\n        row1 = [1]\n        # Initialize the second row with 1\n        row2 = [1]\n        # Loop through the remaining rows\n        for i in range(1, rows):\n            # Initialize a new row with the sum of the two previous rows\n            new_row = [row1[-1] + row2[-1]]\n            # Add the new row to the list of rows\n            row1 = row2\n            row2 = new_row\n        # Add the last row to the list of rows\n        row1 = row2 + row1\n        # Return the nth nonagonal number\n        return row1[-1]\n    else:\n        # The number of rows is even\n        # Return 0\n        return 0"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    triangular_sum = 0\n    pentagonal_sum = 0\n\n    for i in range(1, n+1):\n        triangular_sum += i\n        pentagonal_sum += (3*i*i - 1) // 2\n\n    return triangular_sum + pentagonal_sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        count = count + i**2\n    return count\n\ndef nth_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return is_nonagonal(n) + is_nonagonal(n-1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n**2 + (n-1)**2) / 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    This function takes an integer as input and returns the nth nonagonal number.\n    '''\n    # Initialize the first and second terms of the sequence\n    a = 1\n    b = 2\n\n    # Loop through each term in the sequence\n    for i in range(1, n): \n        # Calculate the next term in the sequence\n        c = a + b\n\n        # Update the values of a and b\n        a = b\n        b = c\n\n    # Return the nth term in the sequence\n    return b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    side_length = int(n**0.5) + 1\n    i = 1\n    while i <= side_length:\n        j = 1\n        while j <= side_length:\n            if j**2 + i**2 == n:\n                return True\n            j += 1\n        i += 1\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1) * (2 * n + 1)) // 6"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?:z(?!.*\\b))\\w+\\b'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r\"(?<=\\w)z(?=\\w)\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Using a regular expression to find all words in the input text\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Loop through each word and check if it starts or ends with 'z'\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return True\n\n    # If no word starts or ends with 'z', return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # remove leading and trailing whitespace\n    text = text.strip()\n\n    # match 'z' at the start and end of a word except at the beginning and end of the string\n    pattern = r'(?<![a-zA-Z])[zZ](?![a-zA-Z])'\n\n    # find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # check if there are any matches at all\n    if len(list(matches)) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words using whitespace as the delimiter\n    words = re.split(r'\\s+', text)\n    \n    # Loop through each word and check if it starts or ends with 'z'\n    for word in words:\n        # Check if the word starts with 'z'\n        if word.startswith('z'):\n            # Check if the word ends with 'z'\n            if word.endswith('z'):\n                # If both conditions are true, return True\n                return True\n    \n    # If no 'z' found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    matches = pattern.findall(text)\n    return len(matches)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![\\w\\s])(z)(?![\\w\\s])'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<![a-zA-Z])[zZ](?![a-zA-Z])'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes in two arguments:\n    input - the list of integers to be reversed\n    k - the position at which the array is to be reversed\n    \n    This function reverses the array upto the given position, and returns the reversed array.\n    '''\n    for i in range(k):\n        input[i], input[len(input) - i - 1] = input[len(input) - i - 1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, -1, -1):\n        input[i], input[k-i-1] = input[k-i-1], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k-1, -1, -1):\n        if i >= n:\n            break\n        input[i], input[n-1] = input[n-1], input[i]\n        n -= 1\n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input) - i - 1] = input[len(input) - i - 1], input[i]\n    # Reverse the array from k to end\n    for i in range(k, len(input) // 2):\n        input[i], input[len(input) - i - 1] = input[len(input) - i - 1], input[i]\n    # Reverse the array from end to 0\n    for i in range(len(input) // 2, len(input)):\n        input[i], input[len(input) - i - 1] = input[len(input) - i - 1], input[i]\n    # Print the reversed array\n    print(\"The reversed array is:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from the beginning to the k-th element\n    input[:k] = input[:k][::-1]\n\n    # Reverse the array from the k-th element to the end\n    input[k:] = input[k:][::-1]\n\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # Reverse the array upto k-1\n    input[:k] = input[:k][::-1]\n\n    # Reverse the array from k to end\n    input[k:] = input[k:][::-1]\n\n    # Print the reversed array\n    print(input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Finding the length of the array\n    n = len(input)\n\n    # If k is greater than the length of the array, swap the values of k and length of the array\n    if k > n:\n        k = n\n\n    # Initializing two pointers: i and j. i will start from the beginning of the array and j will start from k\n    i = 0\n    j = k - 1\n\n    # Looping through the array\n    while i < j:\n\n        # Swapping the values of the array at the i and j positions\n        input[i], input[j] = input[j], input[i]\n\n        # Incrementing i and decrementing j\n        i += 1\n        j -= 1\n\n    # Printing the reversed array\n    print(\"Reversed array:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k > n:\n        return \"Invalid input. k should be less than or equal to the length of the array.\"\n\n    reversed_array = input[:k][::-1]\n    output = input[:k] + reversed_array + input[k:]\n\n    return output"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the array from the start to k-1\n    for i in range(k-1, len(input)-1, -1):\n        temp = input[i]\n        input[i] = input[len(input)-1]\n        input[len(input)-1] = temp\n\n    # Reverse the array from k to the end\n    for i in range(k, len(input)//2):\n        temp = input[i]\n        input[i] = input[len(input)-1-i]\n        input[len(input)-1-i] = temp\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Calculate the length of the array\n    n = len(input)\n    # Check if k is valid\n    if k > n or k < 1:\n        return \"Invalid k value\"\n    # Reverse the array from index 0 to k-1\n    for i in range(k-1, -1, -1):\n        # Swap the elements at index i and i+1\n        input[i], input[i+1] = input[i+1], input[i]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n\n    for key in test_dict:\n        test_tup = test_tup + (test_dict[key],)\n\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tup += (key, value)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = tuple(test_tup) + tuple(test_dict.items())\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add the dictionary to the tuple\n    updated_tup = test_tup + (test_dict,)\n    \n    return updated_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = test_tup + (test_dict,)\n    return new_tuple\n"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n\n    # Initialize variables for maximum average and total cells visited\n    max_avg = 0\n    total_cells = 0\n\n    # Initialize variables for starting and ending indices for the paths\n    start_indices = [0]*N\n    end_indices = [0]*N\n\n    # Initialize variables for current path and path cost\n    current_path = [0]*N\n    current_cost = 0\n\n    # Calculate total cells visited for each row\n    for i in range(N):\n        total_cells += sum(cost[i])\n\n    # Initialize variables for visited cells in each row\n    visited_cells = [0]*total_cells\n\n    # Fill visited_cells array with 1s to indicate that each cell has been visited\n    for i in range(N):\n        visited_cells[start_indices[i]] = 1\n        visited_cells[end_indices[i]] = 1\n\n    # Initialize variables for visited cells in each column\n    for j in range(N):\n        visited_cells[j*N] = 1\n\n    # Initialize variables for visited cells in each diagonal\n    diagonal_left = [0]*(N*N+1)\n    diagonal_right = [0]*(N*N+1)\n\n    # Fill diagonal_left and diagonal_right arrays with 1s to indicate that each cell has been visited\n    diagonal_left[0] = 1\n    diagonal_right[N*N] = 1\n\n    # Find maximum average of all paths\n    for i in range(N):\n        for j in range(N):\n            # Check if we can move in the current cell and if we have not visited it already\n            if i < j and visited_cells[i*N+j] == 0:\n                # Mark the current cell as visited\n                visited_cells[i*N+j] = 1\n\n                # Update current path and current cost\n                current_path[i] = j\n                current_cost = cost[i][j]\n\n                # Recursively find the maximum average of the subproblems\n                sub_max_avg = maxAverageOfPath(cost)\n\n                # Revert the changes made to the current path and current cost\n                current_path[i] = 0\n                visited_cells[i*N+j] = 0\n\n                # Update the maximum average if necessary\n                if sub_max_avg > max_avg:\n                    max_avg = sub_max_avg\n\n            # Check if we can move in the diagonal and if we have not visited it already\n            if visited_cells[i*N+i] == 0 and visited_cells[j*N+j] == 0:\n                # Mark the current cell as visited\n                visited_cells[i*N+i] = 1\n                visited_cells[j*N+j] = 1\n\n                # Update current path and current cost\n                current_path[i] = i\n                current_path[j] = j\n                current_cost = diagonal_left[i*N] + diagonal_right[j*N] + cost[i][j]\n\n                # Recursively find the maximum average of the subproblems\n                sub_max_avg = maxAverageOfPath(cost)\n\n                # Revert the changes made to the current path and current cost\n                current_path[i] = 0\n                current_path[j] = 0\n                visited_cells[i*N+i] = 0\n                visited_cells[j*N+j] = 0\n\n                # Update the maximum average if necessary\n                if sub_max_avg > max_avg:\n                    max_avg = sub_max_avg\n\n    # Return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Find the dimensions of the matrix\n    N = len(cost)\n    \n    # Initialize variables\n    max_avg = 0\n    path_cost = 0\n    visited_cells = []\n    \n    # Iterate over all possible paths\n    for i in range(N):\n        for j in range(N):\n            # Check if current cell is a valid target for a path\n            if i == N-1 and j == N-1:\n                path_cost += cost[i][j]\n                visited_cells.append((i, j))\n            else:\n                # Check if moving right is a valid option\n                if j < N-1 and cost[i][j+1] > cost[i][j]:\n                    path_cost += cost[i][j+1]\n                    visited_cells.append((i, j+1))\n                # Check if moving down is a valid option\n                elif i < N-1 and cost[i+1][j] > cost[i][j]:\n                    path_cost += cost[i+1][j]\n                    visited_cells.append((i+1, j))\n                    \n            # Update max_avg if necessary\n            if i == N-1 and j == N-1:\n                new_avg = path_cost / len(visited_cells)\n                if new_avg > max_avg:\n                    max_avg = new_avg\n            else:\n                new_avg = path_cost / len(visited_cells)\n                if new_avg > max_avg:\n                    max_avg = new_avg\n                    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    visited = [[0]*N for _ in range(N)]\n    visited[0][0] = 1\n    path = [0]\n    while True:\n        max_row = -1\n        max_col = -1\n        max_val = float('-inf')\n        for row in range(N):\n            for col in range(N):\n                if visited[row][col] == 0 and cost[row][col] > max_val:\n                    max_row = row\n                    max_col = col\n                    max_val = cost[row][col]\n        if max_row == N-1 and max_col == N-1:\n            break\n        visited[max_row][max_col] = 1\n        path.append(max_row*N+max_col)\n\n    # Compute average\n    total_cost = 0\n    for cell in path:\n        total_cost += cost[cell // N][cell % N]\n    return total_cost / len(path)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    max_avg = float('-inf') # initialize max average to negative infinity\n    path_sum = 0 # initialize sum of path cost to 0\n    num_cells = 0 # initialize number of cells visited to 0\n    \n    # Create a helper function to check if a given cell is accessible\n    def is_accessible(i, j, visited):\n        return i >= 0 and j >= 0 and i < len(cost) and j < len(cost[0]) and (i, j) not in visited\n    \n    # Helper function to find the maximum average of a path starting from a given cell\n    def find_max_avg(i, j, visited):\n        nonlocal max_avg, path_sum, num_cells\n        if is_accessible(i, j, visited):\n            if i == len(cost) - 1 and j == len(cost[0]) - 1:\n                avg = path_sum / num_cells\n                if avg > max_avg:\n                    max_avg = avg\n            else:\n                visited.add((i, j))\n                find_max_avg(i + 1, j, visited)\n                find_max_avg(i, j + 1, visited)\n                visited.remove((i, j))\n    \n    # Initialize visited set to empty set\n    visited = set()\n    \n    # Iterate over all cells in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            find_max_avg(i, j, visited)\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = float('-inf')\n    \n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        dp[i][0] = cost[i][0]\n        max_avg = max(max_avg, cost[i][i])\n    \n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n    \n    return max_avg/N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = float('-inf')\n    \n    # Fill dp table using dynamic programming\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            \n            # Update max_avg if current path average is greater than max_avg\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n    \n    # Return max_avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    m = len(cost[0])\n    dp = [[0]*m for _ in range(n)]\n    \n    # Initialize the first row and column with the cost\n    for i in range(m):\n        dp[0][i] = cost[0][i]\n        \n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        \n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # Find the maximum average in the matrix\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(m):\n            if i == n-1 and j == m-1:\n                continue\n            avg = dp[i][j]/(i+j+1)\n            if avg > max_avg:\n                max_avg = avg\n                \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    max_avg = float('-inf')\n    current_avg = 0\n    visited = set()\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            if i == 0 or j == 0:\n                paths.append((i, j))\n            elif j == 0:\n                paths.append((i, j))\n                paths.append((i, j + 1))\n            elif i == 0:\n                paths.append((i, j))\n                paths.append((i + 1, j))\n\n    # Iterate over all possible paths and compute the average cost\n    for path in paths:\n        current_cost = 0\n        current_visited = set()\n        current_path = [(path[0], path[1])]\n\n        # Traverse the path and compute the cost and visited cells\n        while current_path[-1]!= (len(cost) - 1, len(cost[0]) - 1):\n            current_cell = current_path[-1]\n            current_cost += cost[current_cell[0]][current_cell[1]]\n            current_visited.add(current_cell)\n\n            # Add neighboring cells to the path\n            if current_cell[0]!= len(cost) - 1:\n                current_path.append((current_cell[0] + 1, current_cell[1]))\n            if current_cell[1]!= len(cost[0]) - 1:\n                current_path.append((current_cell[0], current_cell[1] + 1))\n\n        # Compute the average cost and update the maximum average\n        current_avg = current_cost / len(current_visited)\n        if current_avg > max_avg:\n            max_avg = current_avg\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[float('-inf')] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    max_avg = dp[N-1][N-1]\n    for i in range(N-2, -1, -1):\n        for j in range(N-2, -1, -1):\n            max_avg = max(max_avg, dp[i][j])\n            \n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = 0\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n                max_avg = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n                if dp[i][j] > max_avg:\n                    max_avg = dp[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n                if dp[i][j] > max_avg:\n                    max_avg = dp[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n                if dp[i][j] > max_avg:\n                    max_avg = dp[i][j]\n                    \n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        student_height, student_weight = students[student]\n        if student_height > h and student_weight > w:\n            filtered_students[student] = students[student]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for name,data in students.items():\n        if data[0] > h and data[1] > w:\n            new_students[name] = data\n    return new_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, info in students.items():\n        if info[0] > h and info[1] > w:\n            filtered_students[student] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            result[key] = value\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, details in students.items():\n        if details[0] > h and details[1] > w:\n            filtered_students[name] = details\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, student in students.items():\n        if student[0] > h and student[1] > w:\n            filtered_students[name] = student\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(nums1[i] == nums2[i] for i in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string and split into a list of digits\n    base_str = str(base)\n    base_digits = list(base_str)\n\n    # Calculate the sum of all digits raised to the specified power\n    power_sum = 0\n    for digit in base_digits:\n        power_sum += int(digit) ** power\n\n    # Return the sum of all digits raised to the specified power\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    num = base\n    while power > 0:\n        digit = num % 10\n        sum += digit\n        power -= 1\n        num //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string to make it easier to work with\n    base_str = str(base)\n    # Initialize a variable to store the sum\n    total_sum = 0\n    # Iterate over each digit in the base string\n    for digit in base_str:\n        # Convert each digit to an integer and add it to the total sum\n        total_sum += int(digit) ** power\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base_str = str(base)\n    for i in range(power):\n        sum += int(base_str[-i-1])\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize sum variable\n    sum = 0\n    # convert base to integer\n    base = int(base)\n    # calculate power of base\n    power_base = base ** power\n    # loop through each digit of power_base and add it to sum variable\n    while power_base > 0:\n        digit = power_base % 10\n        sum += digit\n        power_base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    # Initialize the sum to 0\n    sum = 0\n    \n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Loop through each digit in the base\n    for digit in base_str:\n        \n        # Convert the digit to an integer\n        digit_int = int(digit)\n        \n        # Calculate the digit raised to the power\n        digit_pow = digit_int ** power\n        \n        # Add the digit raised to the power to the sum\n        sum += digit_pow\n        \n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string and split it into digits\n    digits = list(str(base))\n\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Iterate through the digits and calculate the sum of the digits raised to the power\n    for digit in digits:\n        total_sum += int(digit) ** power\n\n    # Return the sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    base_int = int(base_str)\n    base_sum = 0\n    \n    while power > 0:\n        digit = base_int % 10\n        base_sum += digit\n        power -= 1\n        base_int //= 10\n        \n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of the base to the specified power.\n\n    Args:\n        base (int): the number to base the sum on\n        power (int): the power to raise the base to\n\n    Returns:\n        int: the sum of all digits of the base raised to the specified power\n    \"\"\"\n    # convert the base to a string so we can work with its digits\n    base_str = str(base)\n    # initialize the sum to 0\n    sum = 0\n    # iterate over the digits of the base string and calculate the sum raised to the power\n    for digit in base_str:\n        digit = int(digit)\n        sum += digit ** power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and convert each digit to its integer value\n    base_str = str(base)\n    base_int = [int(digit) for digit in base_str]\n    \n    # Calculate the sum of all digits raised to the power\n    result = 0\n    for digit in base_int:\n        result += digit ** power\n    \n    # Return the result as an integer\n    return int(result)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'(?<=\")(.*?)(?=\")')\n    return pattern.findall(text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    # search for pattern in text1 and get all the matches\n    matches = re.findall(pattern, text1)\n    # return the list of matches\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\\b)\"(.*?)\"(?=\\b)'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of all quotations within the string.\n    '''\n    # Define a regular expression pattern to match quotation marks.\n    pattern = r'\"([^\"]*)\"'\n\n    # Use the re.findall() method to extract all matches of the pattern in the input string.\n    matches = re.findall(pattern, text1)\n\n    # Return a list of all extracted quotations.\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"' # regex pattern to extract values between quotation marks\n    matches = re.findall(pattern, text1) # find all occurrences of pattern in text1\n    return matches # return the list of extracted values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Using regular expressions to extract values between quotation marks\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n\n    # Returning the list of values between quotation marks\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"(\\\\.|[^\"])*\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    N = len(test_tup) - 1\n    result = [test_tup[i] * test_tup[i+1] for i in range(N)]\n    result.append(test_tup[-1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = [0] * N\n    for i in range(N):\n        result_tup[i] = test_tup[i] * test_tup[i+1]\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = tuple(test_tup[0] * test_tup[i+1] for i in range(N))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Define the length of the tuple\n    N = len(test_tup)\n\n    # Create an empty list to store the result\n    result_list = []\n\n    # Loop through the tuple and multiply each element with the next element\n    for i in range(N-1):\n        result = test_tup[i] * test_tup[i+1]\n        result_list.append(result)\n\n    # Return the final result as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input [a_1,...,a_n] and [b_1,...,b_n] and returns a new list [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(enumerate(nums), lambda x: x[0] - x[1]))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n        else:\n            result.append(num)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(set([x for x, y in groupby(nums) if not (y or (x, y))] or [nums[0]]))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        yield from (key,) * (1 + len(list(group)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create a list of groups of consecutive duplicates\n    groups = [list(group) for key, group in groupby(enumerate(nums), lambda x: x[1] == x[0])]\n    # flatten the list of groups to get a list of consecutive duplicates\n    duplicates = [num for group in groups for num in group]\n    # remove duplicates from the original list\n    return [num for num in nums if num not in duplicates]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    unique_nums = list(set(nums))\n    grouped_nums = groupby(unique_nums)\n    result = []\n    for key, group in grouped_nums:\n        if len(list(group)) > 1:\n            result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    # Remove consecutive duplicates using itertools.groupby()\n    return list(map(list, groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if not k:\n            continue\n        if len(list(g)) == 1:\n            result.extend(list(g))\n    return result"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r**2 * h\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculate the lateral surface area using the Law of Cosines\n    lateral_area = math.pi * r**2 * h\n\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the surface area of the cone using the formula A = pi * r^2 * h\n    A = math.pi * r**2 * h\n    \n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    lateral_surface_area = math.pi * r ** 2 * h / 3 # formula for lateral surface area of a cone\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # Formula for lateral surface area of a cone\n    # area = pi * r^2 * h / 3\n    area = math.pi * r**2 * h / 3\n    \n    # Print the lateral surface area\n    print(\"Lateral Surface Area:\", area)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r * r * h / 3\n    print(\"The lateral surface area of the cone is:\", area)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * (r**2 + h**2) / 3\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2)*h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r ** 2 * h"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace spaces with colons\n    text = re.sub(r' ', ':', text)\n    # replace commas with colons\n    text = re.sub(r',', ':', text)\n    # replace dots with colons\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the pattern to match the special characters\n    pattern = re.compile(r'[\\s,\\.]')\n    # replace the special characters with a colon\n    text = pattern.sub(':', text)\n    # return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern for replacing special characters\n    pattern = re.compile(r'\\s+|,+|\\.+')\n    # Use the replace() method to replace all occurrences of the pattern with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s+|,|\\.')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = r'[,\\. ]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    text = text.replace(' ','')\n    text = text.replace(',','')\n    text = text.replace('.','')\n    text = text.replace(':',':')\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n\n    Args:\n        text: The text to replace special characters in.\n\n    Returns:\n        The text with special characters replaced with colons.\n    \"\"\"\n    # Define the regular expression pattern to match special characters\n    pattern = re.compile(r'[,\\. ]')\n    \n    # Replace all occurrences of special characters in the text with colons\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[^a-zA-Z0-9\\s,\\.]'\n    text = re.sub(pattern, '', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array A and a number x as inputs and returns the index of the first occurrence of x in the array.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        A (list): A sorted array of integers.\n        x (int): A number to search for in the array.\n\n    Returns:\n        int: The index of the first occurrence of `x` in `A`, or -1 if `x` is not found.\n    \"\"\"\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n\n    while i < n and A[i] <= x:\n        i += 1\n\n    if i == n or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize the left and right pointers to the first and last indices of the array\n    left = 0\n    right = len(A) - 1\n\n    # iterate through the array while the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # calculate the middle index\n        middle = (left + right) // 2\n\n        # if the middle element is equal to the target element, return the index\n        if A[middle] == x:\n            return middle\n\n        # if the middle element is less than the target element, update the right pointer to the middle index\n        elif A[middle] < x:\n            left = middle + 1\n\n        # if the middle element is greater than the target element, update the left pointer to the middle index\n        else:\n            right = middle - 1\n\n    # if the target element is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function takes a sorted array A and a number x as input, and returns the index of the first occurrence of x in A. If x is not present in A, the function should return -1.\n    \n    The time complexity of this function is O(log n), where n is the length of A. This is because the binary search algorithm used in this function has a time complexity of O(log n).\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1  # x is not present in A"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the first occurrence index to None\n    first_occurrence_index = None\n    \n    # Initialize the left and right pointers\n    left = 0\n    right = len(A) - 1\n    \n    # Iterate until the left pointer is greater than or equal to the right pointer\n    while left <= right:\n        # Calculate the midpoint index\n        mid = (left + right) // 2\n        \n        # Check if the midpoint element is equal to the target element\n        if A[mid] == x:\n            # If it is, set the first occurrence index to the midpoint index\n            first_occurrence_index = mid\n            \n            # If the midpoint element is the last element, check if it matches the target element\n            if mid == len(A) - 1 and A[mid] == x:\n                first_occurrence_index = mid\n            \n            # If the midpoint element is the first element, check if it matches the target element\n            if mid == 0 and A[mid] == x:\n                first_occurrence_index = mid\n            \n            # If the midpoint element is not the last or first element, check if it matches the target element\n            if mid > 0 and mid < len(A) - 1 and A[mid] == x:\n                first_occurrence_index = mid\n            \n            # Check if the target element is greater than the midpoint element\n            if x > A[mid]:\n                # If it is, set the left pointer to mid + 1\n                left = mid + 1\n            else:\n                # If it is not, set the right pointer to mid - 1\n                right = mid - 1\n                \n    # Return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first_index = 0\n    last_index = len(A) - 1\n\n    while first_index <= last_index:\n        mid_index = (first_index + last_index) // 2\n\n        if A[mid_index] == x:\n            last_index = mid_index\n        elif A[mid_index] < x:\n            first_index = mid_index + 1\n        else:\n            last_index = mid_index - 1\n\n    return first_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array A and a number x as inputs and returns the index of the first occurrence of x in A.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # find the maximum subarray sum\n    max_sum = max(arr)\n    \n    # initialize the subarray product array\n    subarray_product = [1] * max_sum\n    \n    # calculate the product of each element in the array\n    for i in range(len(arr)):\n        subarray_product[arr[i]] = subarray_product[arr[i]] * i + 1\n        \n    # initialize the sum of subarray products\n    subarray_sum = 0\n    \n    # calculate the sum of subarray products for all possible subarrays of the given array\n    for i in range(1, max_sum+1):\n        for j in range(i):\n            subarray_sum = subarray_sum + subarray_product[i] * subarray_product[j]\n            \n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize result array with zeros\n    result = [0] * n\n    \n    # Calculate product of first element of each sublist\n    for i in range(n):\n        result[i] = arr[i]\n    \n    # Calculate product of all sublists and sum of products\n    for i in range(1, n):\n        result[i] = result[i] * arr[i]\n    \n    # Calculate product of all sublists and sum of products\n    for i in range(1, n):\n        for j in range(i):\n            result[i] = result[i] + result[j] * result[i-j-1]\n    \n    # Return the sum of products\n    return result[-1]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Find length of the list\n    n = len(arr)\n    \n    # Initialize variables for sum and product of subarrays\n    sum_prod = 0\n    prod = 1\n    \n    # Loop through the list and calculate the sum of products of subarrays\n    for i in range(n):\n        # Calculate the product of the current subarray\n        prod *= arr[i]\n        # Calculate the sum of the products of all previous subarrays\n        sum_prod += prod\n        \n        # If the current subarray has length 1, set the sum to the product and break out of the loop\n        if i == n-1:\n            sum_prod *= prod\n            break\n    \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # we can optimize this to O(n log n) using merge sort\n    # but for simplicity we will use a simple merge sort\n    # to sort the array in ascending order\n    arr.sort()\n    total_sum = 0\n    # for each sublist from the sorted array\n    for i in range(n-1):\n        # we can optimize this to O(n) using prefix sum\n        # but for simplicity we will use a simple prefix sum\n        # to calculate the sum of the sublist\n        prefix_sum = 0\n        for j in range(i, n):\n            prefix_sum += arr[j]\n            # calculate the product of the sublist and the prefix sum\n            product = arr[j] * prefix_sum\n            # update the total sum\n            total_sum += product\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_product = 0\n    subarrays = [[]]\n    for num in arr:\n        subarrays[-1].append(num)\n        if not subarrays[-1] in subarrays:\n            subarrays.append(subarrays[-1])\n    for subarray in subarrays:\n        subarray.sort()\n        product = 1\n        for num in subarray:\n            product *= num\n        sum_product += product\n    return sum_product"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n+1)\n\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + arr[i-1] * arr[i]\n\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            prod = dp[j] - dp[i-1]\n            if prod > 0:\n                ans += prod\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Initialize variables\n    sub_arr = []\n    prod = 1\n    prod_sum = 0\n    \n    # Calculate sum of products of subarrays\n    for i in range(len(arr)):\n        sub_arr.append(arr[i])\n        prod *= arr[i]\n        prod_sum += prod\n        \n        if i > 0:\n            prod *= sub_arr[i-1]\n        else:\n            prod *= sub_arr[0]\n            \n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Create a 2D table to store the products of sublists of size i\n    table = [[0]*(n-i+1) for i in range(1, n+1)]\n    # Fill the table\n    for i in range(n):\n        for j in range(n-i):\n            table[i+1][j] = arr[j] * table[i+1][j+1]\n    # Initialize the sum of products to 0\n    result = 0\n    # Calculate the sum of products of all sublists of size i\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            k = n-i\n            result += table[k][j] * table[k-1][j+1]\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = arr[0]\n\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] * arr[i-1]\n\n    subarray_prods = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray_prods += dp[j+1] - dp[i] * dp[j]\n\n    return subarray_prods"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize variables\n    prod = 1\n    # Initialize an empty list to store products of sublists\n    sublist_prod = []\n    \n    # Calculate product of each element of the given list\n    for i in range(n):\n        prod *= arr[i]\n        \n    # Calculate sum of products of sublists\n    for i in range(n):\n        sublist_prod.append(prod // arr[i])\n        prod %= arr[i]\n        \n    # Calculate sum of products of sublists using a rolling window approach\n    # Using a loop to calculate sum of products of sublists of length n\n    for i in range(n):\n        left_sum = 0\n        right_sum = 0\n        for j in range(i, n):\n            left_sum += arr[j]\n            right_sum += arr[j]\n            sublist_prod[j] *= left_sum * right_sum\n    \n    # Return the sum of products of sublists\n    return sum(sublist_prod)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n & (-n))  # toggle the middle bits except the first and last bit\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    # Toggle the middle bit of the number except the first and the last bit.\n    bit_middle = (n & 1) ^ 1  # Toggle the middle bit.\n    n = n ^ bit_middle  # XOR the middle bit with the other bits.\n    n = n ^ bit_middle  # XOR the middle bit with the other bits again.\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Remove the first and last bits from the number\n    first_bit = bin(n & ~(1 << (n.bit_length() - 1)))[2:]\n    last_bit = bin(n & ~(1 << 0))[2:]\n\n    # Toggle the middle bits\n    for i in range(len(first_bit) - 1):\n        if first_bit[i]!= last_bit[i]:\n            first_bit = first_bit[:i] + first_bit[i] + first_bit[i+1:]\n            last_bit = last_bit[:i] + last_bit[i] + last_bit[i+1:]\n\n    # Combine the first and last bits with the middle bits\n    combined_bits = first_bit + last_bit + first_bit\n\n    # Convert the combined bits back to an integer and return it\n    return int(combined_bits, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Convert decimal number to binary number\n    bin_num = bin(n)[2:]\n\n    # Get the length of binary number\n    length = len(bin_num)\n\n    # Find the first and last bit positions\n    first_bit = 0\n    for i in range(length):\n        if bin_num[i] == '1':\n            first_bit = i\n            break\n\n    last_bit = length - 1\n    for i in range(length-1, -1, -1):\n        if bin_num[i] == '1':\n            last_bit = i\n            break\n\n    # Toggle the bits of the number except the first and last bit\n    toggle_num = 0\n    for i in range(first_bit):\n        toggle_num = (toggle_num << 1) | int(bin_num[i])\n    for i in range(first_bit+1, last_bit):\n        toggle_num = (toggle_num << 1) | (int(bin_num[i]) ^ 1)\n    for i in range(last_bit+1, length):\n        toggle_num = (toggle_num << 1) | int(bin_num[i])\n\n    # Convert binary number to decimal number\n    return int(toggle_num, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the position of the first and last bits\n    first_bit = bin(n)[2:].index('1')\n    last_bit = len(bin(n)[2:]) - bin(n)[2:].rfind('1') - 1\n\n    # Toggle bits except first and last bits\n    for i in range(first_bit, last_bit):\n        if bin(n)[2:].index(str(i)) % 2 == 0:\n            n = n ^ (1 << i)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    \"\"\"\n    This function toggles bits of the number except the first and last bit. \n    \"\"\"\n    first_bit = n & 1  # first bit is 1 if n is odd, otherwise 0\n    last_bit = n >> 31  # last bit is 1 if n is negative, otherwise 0\n    n = n ^ (first_bit ^ last_bit)  # XORing the first bit with the last bit\n    n = n ^ (1 << 31)  # XORing the first bit with 1 (to toggle the last bit)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and last bit.\n    \"\"\"\n    # XORing with 1111111111111111111111111111111111111111111111111111111111111110010 will toggle the first and last bits\n    n = n ^ 0xAAAAAAAAAAAAAAAAB\n    # XORing with 11111111111111111111111111111111111111111111111111111111111110100 will toggle the second to last bit\n    n = n ^ 0x55555555555555555555555555555555555555555555555555555555555555\n    # returning the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    # Define the bit positions of the first and last bits\n    first_bit_pos = 0\n    last_bit_pos = 31\n\n    # Find the index of the bit where the first and last bits are located\n    index_of_first_bit = n.bit_length() - 1 - first_bit_pos\n    index_of_last_bit = n.bit_length() - 1 - last_bit_pos\n\n    # Extract the first and last bits\n    first_bit = n & (1 << index_of_first_bit)\n    last_bit = n & (1 << index_of_last_bit)\n\n    # Toggle the first and last bits\n    toggled_bit = first_bit ^ last_bit\n\n    # Combine the first and last bits with the toggled bit\n    return toggled_bit | first_bit | last_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    mask = ~(1 << 1) # set the last bit to 1\n    n = n & mask # clear the last bit\n    mask = ~(1 << 0) # set the first bit to 1\n    n = n | mask # set the first bit to 1\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # convert the number to binary string\n    binary = bin(n)[2:]\n    # initialize the first and last bit as 0\n    first_bit = 0\n    last_bit = binary[-1]\n\n    # iterate over the binary string and toggle the middle bits\n    for i in range(len(binary) - 2):\n        if first_bit == 1:\n            binary[i] = '1' if binary[i] == '0' else '0'\n            first_bit = 0\n        else:\n            binary[i] = '1' if binary[i] == '1' else '0'\n            first_bit = 1\n\n    # convert the binary string to integer and return the result\n    return int(binary, 2)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # bisect_left function is used to locate the insertion point of the value x in the sorted list a\n    index = bisect.bisect_left(a, x)\n    \n    # If x is already present in the list, return the index where it has to be inserted\n    if a[index] == x:\n        return index\n    \n    # If x is greater than the element at index, it has to be inserted at the index after the index\n    elif x > a[index]:\n        return index + 1\n    \n    # If x is less than the element at index, it has to be inserted at the index itself\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use the binary search algorithm to find the insertion point for x in a.\n    index = bisect.bisect_left(a, x)\n    \n    # If x is already in the list, return the index.\n    if a[index] == x:\n        return index\n    \n    # If x is greater than all elements in the list, return len(a).\n    elif index == len(a):\n        return len(a)\n    \n    # Otherwise, return the leftmost index that is greater than x.\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index-1] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    left = bisect.bisect_left(a, x)\n    if left == len(a):\n        return len(a)\n    elif left == 0 or a[left - 1]!= x:\n        return left\n    else:\n        return left - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    :param a: sorted list of integers\n    :type a: list\n    :param x: integer to be inserted\n    :type x: int\n    :return: left insertion point\n    :rtype: int\n    \"\"\"\n\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    if a[index] == x:\n        return index\n    if a[index] > x:\n        return index - 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    This function takes two arguments: the sorted list a and the value x.\n    It returns the left insertion point for the value x in the sorted list a.\n\n    >>> left_insertion([1, 2, 3, 4, 5], 3)\n    2\n    >>> left_insertion([1, 2, 3, 4, 5], 6)\n    5\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        index = bisect.bisect_right(a, x) - 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return (1/n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/(n-1))*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def is_prime(num): \n        '''\n        Function to check if a number is prime or not.\n        '''\n        if num < 2: \n            return False\n        for i in range(2, int(math.sqrt(num))+1): \n            if num % i == 0: \n                return False\n        return True\n\n    def triangular_number(n): \n        '''\n        Function to generate the nth triangular number.\n        '''\n        return int(n * (n+1) / 2)\n\n    tri_num = triangular_number(n)\n    tri_num_str = str(tri_num)\n    index = 0\n    while index < len(tri_num_str): \n        if is_prime(int(tri_num_str[index])): \n            return index\n        index += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # The smallest triangular number with n digits is 10^(n-1)*10^n\n    smallest_triangular = 10**(n-1)*10**n\n    # Calculate the number of digits in smallest_triangular\n    num_digits = len(str(smallest_triangular))\n    # Calculate the number of triangular numbers with n digits\n    num_triangular = 10**num_digits - 1\n    # Calculate the minimum number of digits required for triangular numbers\n    min_num_digits = int(math.log10(num_triangular))\n    # Initialize the minimum number of digits found\n    min_index = n - min_num_digits - 1\n    # Initialize the current number of digits\n    current_digits = 0\n    # Initialize the current triangular number\n    current_triangular = 0\n    # Initialize the index of the smallest triangular number found\n    min_index_digits = 0\n    # Iterate through the digits of smallest_triangular\n    for digit in str(smallest_triangular):\n        # Increment current_triangular by 10^(current_digits+1) and update current_digits\n        current_triangular += int(digit)*10**(current_digits+1)\n        current_digits += 1\n        # Check if the current triangular number has the required number of digits\n        if current_digits == min_num_digits:\n            # If it has, update the minimum number of digits found and the index of the smallest triangular number found\n            if current_triangular < smallest_triangular:\n                smallest_triangular = current_triangular\n                min_index_digits = min_index\n                min_index = current_digits\n            # Reset current_triangular and current_digits\n            current_triangular = 0\n            current_digits = 0\n    # If the smallest triangular number was not found, return 0\n    if smallest_triangular == 10**(n-1)*10**n:\n        return 0\n    # Otherwise, return the index of the smallest triangular number found\n    return min_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    # calculate the number of digits in the number n\n    num_digits = len(str(n))\n    \n    # calculate the largest number that can be formed using only triangular numbers\n    max_num = (2 * n - 1) * math.factorial(n - 1) // math.factorial(2)\n    \n    # start with the largest possible triangular number and reduce it until it has n digits\n    for i in range(max_num, 1, -1):\n        triangular_num = i * (i - 1) // 2\n        \n        # check if triangular_num has n digits\n        if len(str(triangular_num)) == n:\n            return triangular_num\n    \n    return None"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    # First, we calculate the smallest triangular number with n digits\n    # by generating a list of all triangular numbers with n digits and\n    # finding the smallest one\n    triangulars = []\n    i = 1\n    while len(str(i)) < n:\n        triangulars.append(i)\n        i += 1\n    triangulars.sort()\n    smallest_triangular = triangulars[0]\n\n    # Next, we calculate the smallest triangular number with n digits\n    # by generating a list of all triangular numbers with n digits and\n    # finding the smallest one\n    index = 1\n    i = 1\n    while True:\n        triangular = i * (i + 1) // 2\n        if len(str(triangular)) < n:\n            index += 1\n            if index == smallest_triangular:\n                return i\n        else:\n            return index\n        i += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the variables\n    triangular_num = 0\n    smallest_num = math.pow(10, n-1)\n    index = n - 1\n    \n    # Calculate the smallest triangular number with n digits\n    while index > 0:\n        triangular_num = smallest_num + index\n        if triangular_num >= math.pow(10, n-index):\n            smallest_num = triangular_num\n            index -= 1\n        else:\n            index -= 1\n            \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n\n    # Find the number of digits in n \n    count = 0 \n    while n: \n        n //= 10 \n        count += 1 \n\n    # Initialize variables \n    index = 0 \n    triangular = 1 \n\n    # Iterate through the first n-1 digits \n    for i in range(1, count): \n        # Find the next triangular number \n        triangular = 4 * triangular ** 2 - 1 \n\n        # If triangular has n digits, update the index \n        if triangular < (10 ** (count-1-i)): \n            index = (triangular // (10 ** (count-1-i))) * (10 ** (i+1)) + 1 \n\n            # Check if triangular is equal to n-1 digits of n \n            if triangular == (10 ** (count-1)): \n                break \n\n    # Return the index of the smallest triangular number with n digits \n    return index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = []\n    for i in range(10**n):\n        triangular_numbers.append(math.factorial(i))\n\n    triangular_numbers.sort()\n    return triangular_numbers.index(math.factorial(0))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n\n    # Function to check if a number is a triangular number\n    def is_triangular(num):\n        if num == 0:\n            return False\n        elif num == 1:\n            return True\n        else:\n            for i in range(2, int(math.sqrt(num))+1):\n                if num % i == 0:\n                    return False\n            return True\n\n    # Function to find the first triangular number with n digits\n    def find_first_triangular(n):\n        num = 1\n        while not is_triangular(num):\n            num += 1\n        return num\n\n    # Function to find the index of the smallest triangular number with n digits\n    def find_Index(n):\n        triangular = find_first_triangular(n)\n        count = 1\n        while not is_triangular(triangular + count):\n            count += 1\n        return count\n\n    # Call the function to find the index of the smallest triangular number with n digits\n    return find_Index(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num = 1\n    for i in range(n):\n        num = num * 10 + i + 1\n    return int(math.log10(num) + 1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    def is_valid_triangular_number(num):\n        return sum(int(digit) ** 2 for digit in str(num)) == num ** 2\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def smallest_triangular_number(n):\n        triangular_numbers = []\n        num = 0\n        while len(str(num)) < n:\n            triangular_numbers.append(num)\n            num += 1\n        return triangular_numbers\n\n    def find_triangular_numbers_with_n_digits(n):\n        triangular_numbers = smallest_triangular_number(n)\n        for triangular_number in triangular_numbers:\n            if is_prime(triangular_number):\n                return triangular_number\n        return None\n\n    return find_triangular_numbers_with_n_digits(n)"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        d[key] = value\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    # initialize an empty dictionary\n    test_dict = {}\n    # loop through the tuple\n    for i in range(len(test_tup)-1):\n        # add the key-value pair to the dictionary\n        test_dict[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # create an empty dictionary\n    dictionary = {}\n    # loop through the tuple\n    for i in range(len(test_tup)-1):\n        # add the key-value pair to the dictionary\n        dictionary[i] = test_tup[i+1]\n    # return the dictionary\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary\n    result_dict = {}\n\n    # Iterate over the given tuple\n    for i in range(len(test_tup)):\n        # Add the current element to the dictionary as a key with the adjacent element as the value\n        result_dict[test_tup[i]] = test_tup[i + 1]\n\n    # Return the final dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"Error: Length of the tuple must be even.\")\n        return\n    \n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    \n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    dict_obj = {}\n    \n    # Traverse through the tuple elements\n    for i in range(0, len(test_tup), 2):\n        # Append the key-value pair to the dictionary\n        dict_obj[test_tup[i]] = test_tup[i+1]\n        \n    return dict_obj"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    \n    first_char = s[0]\n    for char in s[1:]:\n        if char!= first_char:\n            return False\n    \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # converting string to lowercase\n    s = s.lower()\n    # checking length of the string\n    if len(s) == 0:\n        return True\n    # comparing first and last character of the string\n    if s[0] == s[-1]:\n        # recursively calling function with the rest of the string\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and checks whether all the characters are same or not.\n    \"\"\"\n    # converting the string into a list of characters\n    char_list = list(s)\n\n    # checking if the length of the list is 1\n    if len(char_list) == 1:\n        return True\n\n    # iterating over the list of characters\n    for i in range(len(char_list)-1):\n        # if any character is not equal to the next character\n        if char_list[i]!= char_list[i+1]:\n            # returning False since all the characters are not same\n            return False\n\n    # if the loop completes without returning False, it means all the characters are same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # converting the string to a list of characters\n    s_list = list(s)\n    # comparing the first and last character in the list\n    if s_list[0] == s_list[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list of characters\n    lst = list(s)\n    # Check if the length of the list is 1\n    if len(lst) == 1:\n        return True\n    # Check if all the elements in the list are the same\n    else:\n        return lst[0] == lst[1] and all_Characters_Same(lst[2:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are same, and False otherwise.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters are same or not in a string.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        for i in range(len(s)):\n            if s[i]!= s[0]:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for i in s:\n        count += s.count(i)\n        if count!= len(s):\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to lowercase to make it case-insensitive\n    s = s.lower()\n    # Convert the string to a list to make it easier to compare characters\n    s_list = list(s)\n    # Check if the length of the list is 1, which means all characters are the same\n    if len(s_list) == 1:\n        return True\n    # If the length is greater than 1, check if all characters are the same as the first character\n    for char in s_list:\n        if char!= s_list[0]:\n            return False\n    # If all characters are the same, return True\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side\n    c = side\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Formula for the area of a tetrahedron\n    s = 1/3 * side ** 3\n\n    # Return the calculated area\n    return s"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Convert the side length to its corresponding area\n    side_area = (1/3) * (side**2)\n    \n    return side_area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 12\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    area = (1 / 6) * s * (s + math.sqrt(24 * s**2 - 48 * s * math.cos(math.pi/3) + 64))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2  # side length\n    area = 1 / 6 * s * (1 - s) ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1 + math.sqrt(5)) / 2\n    area = 0.5 * side * side * side / s\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron with given base length `side`.\n    '''\n    # calculate the length of a side\n    length = 2*side\n\n    # calculate the area of the tetrahedron\n    area = math.sqrt(3)*length**2\n\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Find the length of the list\n    n = len(list)\n    # Check if m is less than or equal to zero\n    if m <= 0:\n        return list\n    # Check if m is greater than or equal to n\n    if m >= n:\n        m = m % n\n    # Reverse the first m elements of the list\n    list = list[n-m:][::-1]\n    # Reverse the entire list\n    list = list[::-1]\n    # Reverse the first m elements of the reversed list\n    list = list[:m][::-1]\n    # Concatenate the two lists\n    list = list + list[m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # initialize the index and length of the list\n    index = 0\n    length = len(list)\n\n    # if m is greater than the length of the list, swap the values of m and length\n    if m > length:\n        m, length = length, m\n\n    # iterate over the list until m items have been rotated\n    for i in range(m):\n        # shift the items to the right by 1\n        list[index], list[index + 1] = list[index + 1], list[index]\n        # update the index and length of the list\n        index = (index + 1) % length\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n # handle negative m\n    list[:m], list[m:] = list[m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    This function rotates the given list by specified number of items to the right direction.\n    '''\n    # get the length of the list\n    n = len(list)\n    \n    # if m is greater than n, return the original list\n    if m > n:\n        return list\n    \n    # get the starting index of the first m items to be rotated\n    starting_index = n - m\n    \n    # rotate the list by swapping the first m items with the last m items\n    for i in range(starting_index, n):\n        list[i], list[i-starting_index] = list[i-starting_index], list[i]\n    \n    # return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(lst, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(lst)\n    m = m % n\n    if m == 0:\n        return lst\n    lst = lst[-n:] + lst[:-n]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m %= n\n    list[:] = list[m:] + list[:m]\n    return list\n\ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    n = len(list)\n    m %= n\n    list[:] = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotates a given list by n items to the right direction.\n    \"\"\"\n    # length of the list\n    length = len(lst)\n    # check if n is positive or negative\n    if n >= length:\n        # if n is greater than or equal to the length of the list, rotate n % length items to the left\n        for i in range(n % length):\n            lst.append(lst.pop(0))\n    elif n < 0:\n        # if n is negative, rotate n % length items to the right and append the first n % length items to the end\n        n = n % length\n        for i in range(n):\n            lst.append(lst.pop(0))\n        for i in range(n):\n            lst.insert(0, lst.pop())\n    else:\n        # if n is zero or a positive integer, just return the list as is\n        return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[:m], list[n-m:] = list[n-m:], list[:m]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_values = (None, '', 0, 0.0, [], (), {})\n    for value in test_tup:\n        if value in none_values:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        for digit in str(num):\n            if num % int(digit)!= 0:\n                return False\n        return True\n\n    return list(filter(is_divisible, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digit_list = []\n    for i in range(10):\n        digit_list.append(str(i))\n    digit_list = list(set(digit_list)) # Remove duplicates and convert to list\n    \n    # Function to check if a number is divisible by every digit\n    check_divisible_by_digits = lambda x: all(int(d) in x for d in digit_list)\n    \n    # Filter numbers within given range and apply lambda function to check if divisible by every digit\n    divisible_numbers = list(filter(lambda x: check_divisible_by_digits(x), range(startnum, endnum+1)))\n    \n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\n    Parameters:\n    startnum (int): the starting number in the range to search for divisible numbers\n    endnum (int): the ending number in the range to search for divisible numbers\n\n    Returns:\n    list: a list of divisible numbers found in the range\n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        Check if a given number is divisible by every digit it contains.\n\n        Parameters:\n        num (int): the number to check\n\n        Returns:\n        bool: True if the number is divisible by every digit it contains, False otherwise\n        \"\"\"\n        return all(num % digit == 0 for digit in range(1, 10))\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digit(num):\n        digits = [int(digit) for digit in str(num)]\n        return all(digit in digits for digit in digits)\n    \n    return list(filter(is_divisible_by_digit, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = set(str(num))\n        return all(num % int(digit) == 0 for digit in digits)\n\n    result = []\n    for num in range(startnum, endnum+1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    return result\n\nstartnum = 100\nendnum = 999\nprint(divisible_by_digits(startnum, endnum))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    \"\"\"\n    # Define a lambda function to check if a number is divisible by a specific digit\n    check_divisor = lambda x, digit: x % digit == 0\n    \n    # Define a list of all digits from 0 to 9\n    digits = [int(digit) for digit in range(10)]\n    \n    # Define a list to store the numbers that are divisible by every digit\n    divisible_nums = []\n    \n    # Loop through each number in the range\n    for num in range(startnum, endnum+1):\n        # Loop through each digit in the number\n        for digit in digits:\n            # Check if the number is divisible by the current digit\n            if check_divisor(num, digit):\n                # Append the number to the divisible_nums list\n                divisible_nums.append(num)\n                break\n    \n    # Return the divisible_nums list\n    return divisible_nums\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits_set = set(str(i) for i in range(10))\n    return list(filter(lambda x: all(int(digit) in digits_set for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        This function checks if a number is divisible by every digit it contains.\n        \"\"\"\n        return all(num % digit == 0 for digit in str(num))\n\n    return filter(is_divisible_by_digits, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(digit % int(x[i]) == 0 for i, digit in enumerate(str(x)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))\n\nprint(divisible_by_digits(100, 999))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    area = math.pi*(r**2)*a/360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi*(r**2)*a/360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * (r**2)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is valid\n    if a > 360:\n        return None\n\n    # Convert angle to radians\n    a = math.radians(a)\n\n    # Calculate area of sector\n    area = math.pi * r ** 2 * a\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Convert angle to radians\n    a = a * (math.pi/180)\n    \n    # Check if angle is larger than 360 degrees\n    if a > math.pi:\n        print(\"Angle is greater than 360 degrees.\")\n        return None\n    \n    # Calculate area of sector\n    area = r * r * math.sin(a)\n    \n    # Return area of sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = a * math.pi / 180\n    if angle > 360:\n        return None\n\n    h = 2 * math.sin(angle / 2)\n\n    return r * h"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a table to store lengths of LCS for substrings\n    L = [[[0 for j in range(o+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # fill the table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # backtrack to find the LCS\n    i = m\n    j = n\n    k = o\n    lcs = ''\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i][j-1][k] == L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n    Parameters: \n    X, Y, Z: three string sequences\n\n    Returns: \n    The length of the longest common subsequence\n    '''\n\n    # create a 2D table to store the lengths of LCS for all prefixes of X, Y and Z\n    table = [[0 for i in range(len(Y)+1)] for j in range(len(X)+1)] \n\n    # fill the table in bottom up manner\n    for i in range(len(X)+1): \n        for j in range(len(Y)+1): \n            if i == 0 or j == 0: \n                table[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                table[i][j] = table[i-1][j-1] + 1\n            else: \n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # print the table for verification\n    for i in range(len(X)+1): \n        for j in range(len(Y)+1): \n            print(table[i][j], end=\" \")\n        print()\n\n    # find the length of the longest common subsequence\n    n = len(X)\n    m = len(Y)\n    result = table[n][m]\n    return result"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n = len(X), len(Y)\n    dp = [[0 for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    lcs = \"\"\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Step 1: Create a 3D table to store lengths of LCS of subproblems\n    T = [[[0 for j in range(o+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # Step 2: Fill the table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    T[i][j][k] = T[i-1][j-1][k-1] + 1\n                else:\n                    T[i][j][k] = max(T[i-1][j][k], T[i][j-1][k], T[i][j][k-1])\n\n    # Step 3: The length of LCS will be stored in the last element of the last row\n    lcs_length = T[m][n][o]\n\n    # Step 4: Create a list to store the LCS of the subproblems\n    lcs = []\n\n    # Step 5: Starting from the last element, construct the LCS\n    i = m\n    j = n\n    k = o\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif T[i-1][j][k] == T[i][j-1][k]:\n            i -= 1\n        elif T[i][j-1][k] == T[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Step 6: Reverse the LCS to get the actual LCS\n    lcs = lcs[::-1]\n\n    return lcs, lcs_length"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    def longest_common_subsequence(X, Y): \n        m = len(X) \n        n = len(Y) \n        dp = [[0] * (n+1) for i in range(m+1)] \n        for i in range(m): \n            for j in range(n): \n                if X[i] == Y[j]: \n                    dp[i+1][j+1] = dp[i][j] + 1 \n                else: \n                    dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j]) \n        return dp[m][n]\n    \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    X = ['#'] * m + X + ['#'] * m \n    Y = ['#'] * n + Y + ['#'] * n \n    Z = ['#'] * o + Z + ['#'] * o \n    \n    lcs = longest_common_subsequence(X, Y) \n    \n    def backtrack(i, j, k): \n        if i == 0 and j == 0 and k == 0: \n            return [Z[k]] \n        elif i == 0 or j == 0: \n            return [] \n        elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            return [Z[k-1]] + backtrack(i-1, j-1, k-1) \n        else: \n            return max(backtrack(i-1, j, k), backtrack(i, j-1, k)) \n    \n    return ''.join(backtrack(m, n, lcs)) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 2D table to store lengths of LCS for subproblems\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Z[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # print the length of LCS for each subproblem\n    # for i in range(m, -1, -1):\n    #     for j in range(p, -1, -1):\n    #         if X[i] == Z[j]:\n    #             print(L[i][j], end='')\n    #             if i == m or j == p:\n    #                 print()\n\n    # print the LCS\n    i, j = m, p\n    lcs = \"\"\n    while i > 0 and j > 0:\n        if X[i-1] == Z[j-1]:\n            lcs = Z[j-1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    print(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    dp = [[[0 for j in range(o+1)] for i in range(m+1)] for k in range(n+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    return dp[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    table = [[0 for j in range(o+1)] for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, o+1):\n            if X[i-1] == Y[j-1] and Y[j-1] == Z[i-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            elif X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j]\n            elif X[i-1] == Z[j-1]:\n                table[i][j] = table[i][j-1]\n            elif Y[j-1] == Z[j-1]:\n                table[i][j] = table[i][j-1]\n\n    result = []\n    i, j = m, o\n    while i > 0 and j > 0:\n        if table[i][j] == table[i-1][j]:\n            i -= 1\n        elif table[i][j] == table[i][j-1]:\n            j -= 1\n        else:\n            if X[i-1] == Y[j-1] and Y[j-1] == Z[i-1]:\n                result.append(X[i-1])\n                i -= 1\n                j -= 1\n            elif X[i-1] == Y[j-1]:\n                i -= 1\n            elif X[i-1] == Z[j-1]:\n                j -= 1\n            elif Y[j-1] == Z[j-1]:\n                j -= 1\n\n    return ''.join(result[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    n, m, p = len(X), len(Y), len(Z)\n    dp = [[0] * (p + 1) for _ in range(n + 1)]\n\n    # Build the table\n    for i in range(n + 1):\n        for j in range(m + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    # Return the LCS\n    lcs = []\n    i, j, k = n, m, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i - 1][j][k] == dp[i][j][k - 1]:\n            i -= 1\n        elif dp[i][j - 1][k] == dp[i - 1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                p[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n    lcs = \"\"\n    i = n\n    j = m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern for finding words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    \n    # Find all the matches of the pattern in the given string\n    matches = re.findall(pattern, str1)\n    \n    # Use a list comprehension to add spaces between words starting with capital letters\n    result =''.join(match.capitalize() for match in matches)\n    \n    # Return the modified string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expression\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Capitalize the first word and join the words with spaces\n    result =''.join([word.capitalize() for word in words])\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # create a regular expression pattern to match words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z]\\w+\\b')\n\n    # iterate over each match in the string\n    matches = re.finditer(pattern, str1)\n\n    # create a list of the words with spaces inserted between them\n    words = []\n    for match in matches:\n        # extract the word from the match object\n        word = match.group()\n        # check if the first letter is capitalized\n        if word[0].isupper():\n            # if so, insert a space between the first letter and the rest of the word\n            words.append(word[0] +'' + word[1:])\n        else:\n            # otherwise, just append the word as is\n            words.append(word)\n\n    # join the list of words into a single string, with no extra spaces between words\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Replace all non-alphanumeric characters with a space\n    str1 = re.sub(r'[^\\w\\s]','', str1)\n    # Split the string into words\n    words = str1.split()\n    # Loop through each word\n    for i in range(len(words)):\n        # If the word starts with a capital letter\n        if words[i][0].isupper():\n            # Add a space before the word\n            words[i] ='' + words[i]\n    # Join the words with spaces\n    str1 =''.join(words)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    new_str =''.join(words)\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Use regex to find all capital words in the string\n    matches = re.findall(r'[A-Z][a-z]+', str1)\n\n    # Loop through each match and replace it with a space\n    for match in matches:\n        str1 = str1.replace(match,'' + match +'')\n\n    # Remove extra space from the beginning and end of the string\n    str1 = str1.strip()\n\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # replace all words with capital letters followed by a space with a single space\n    str1 = re.sub(r'\\b[A-Z]([A-Z]+)\\b', r'\\1 ', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Split the string into a list of words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n\n    # Capitalize the first letter of each word and join them back into a string\n    result =''.join([word.capitalize() for word in words])\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'(?<=[a-z])(?=[A-Z])', r' ', str1)\n    return str1"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to floats and sort them numerically\n    nums_float = sorted(list(map(float, nums_str)))\n    return nums_float"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Define a function to check if a string is a numeric string\n    def is_numeric(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n    \n    # Filter out non-numeric strings and convert them to numbers\n    nums = [float(s) for s in nums_str if is_numeric(s)]\n    \n    # Sort the numbers in ascending order\n    nums.sort()\n    \n    # Convert the sorted numbers back to strings and return them as a list\n    return [str(n) for n in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all the strings to integers and sort them\n    nums_int = [int(x) for x in nums_str]\n    nums_int.sort()\n\n    # Convert the sorted integers back to strings and return the list\n    return [str(x) for x in nums_int]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            nums.append(num)\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings of numbers, and returns the sorted list of strings in ascending order of numbers.\n    '''\n    nums = []\n    for num in nums_str:\n        try:\n            nums.append(float(num))\n        except ValueError:\n            continue\n    \n    nums.sort()\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings as input and sorts them numerically in ascending order.\n    \"\"\"\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            pass  # ignore strings that cannot be converted to numbers\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    # convert all the numeric strings to float\n    nums_float = [float(num) for num in nums_str if num.isdigit()]\n    # sort the float list in ascending order\n    nums_float.sort()\n    # convert the sorted float list back to string\n    nums_str_sorted = [str(num) for num in nums_float]\n    # return the sorted string list\n    return nums_str_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert all numbers in the list to numeric values\n    nums = [float(num) for num in nums_str]\n    # Sort the list in numeric order\n    nums.sort()\n    # Convert the sorted list back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Append the tuple to the list\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # add the tuple to the list\n    test_list.append(test_tup)\n    # print the updated list\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # get the length of the list\n    length = len(test_list)\n\n    # loop through the list and add the tuple to the list\n    for i in range(length):\n        test_list[i] += test_tup[i]\n\n    # print the updated list\n    print(\"Updated list:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        for tup_item in test_tup:\n            if tup_item in item:\n                if isinstance(item, list):\n                    test_list.append(tup_item)\n                else:\n                    test_list = [item, tup_item]\n                break"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # check if the root is greater than or equal to its children\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    # check if the root is greater than or equal to its children and the left child\n    if i*2+1 < len(arr) and arr[i] < arr[i*2+1]:\n        return False\n    # check if the root is greater than or equal to its children and the right child\n    if i*2+2 < len(arr) and arr[i] < arr[i*2+2]:\n        return False\n    # if none of the above conditions are true, it means the array is a valid min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    # Check if the index i is within the range of the array\n    if i >= len(arr):\n        return True\n    \n    # Check if the left child of the node at index i exists and is less than the node at index i\n    if i*2+1 < len(arr) and arr[i*2+1] < arr[i]:\n        return False\n    \n    # Check if the right child of the node at index i exists and is less than the node at index i\n    if i*2+2 < len(arr) and arr[i*2+2] < arr[i]:\n        return False\n    \n    # If the left and right children do not exist, the node at index i is the smallest element in the heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    # check if the array is empty or not\n    if len(arr) <= 1:\n        return True\n\n    # check if the first element of the array is greater than the last element\n    if arr[0] > arr[-1]:\n        return False\n\n    # check if the array is a min heap by iterating over the array from the second element to the last element\n    for i in range(1, len(arr)-1):\n        # check if the left child of the current element is greater than the current element\n        if arr[i] > arr[2*i]:\n            return False\n\n    # check if the array is a min heap by iterating over the array from the second element to the last element\n    for i in range(1, len(arr)-1):\n        # check if the parent of the current element is greater than the current element\n        if arr[i] > arr[i//2]:\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    for i in range(1, len(arr)):\n        if arr[i] < arr[0]:\n            return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    if len(arr) == 0 or len(arr) == 1:\n        return True\n    return is_min_heap(arr) and check_min_heap_helper(arr, len(arr) // 2)\n\ndef check_min_heap_helper(arr, i):\n    '''\n    This helper function checks if the given array represents a min heap or not.\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[0]:\n        return False\n    return check_min_heap_helper(arr, (i - 1) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    if i < 1:\n        return True\n\n    if arr[i] < arr[i//2]:\n        return False\n\n    return check_min_heap_helper(arr, i//2)\n\n\ndef is_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap or not.\n    \"\"\"\n    return check_min_heap_helper(arr, len(arr)//2)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # If the index is greater than the length of the array, return True (i.e. empty heap)\n    if i > len(arr):\n        return True\n\n    # If the left child of the index is greater than the current index, return False (i.e. not a min heap)\n    if i * 2 <= len(arr) and arr[i] > arr[i * 2]:\n        return False\n\n    # If the right child of the index is greater than the current index, return False (i.e. not a min heap)\n    if i * 2 + 1 <= len(arr) and arr[i] > arr[i * 2 + 1]:\n        return False\n\n    # If both the left and right children are less than or equal to the current index, return True (i.e. a min heap)\n    return check_min_heap_helper(arr, i * 2) and check_min_heap_helper(arr, i * 2 + 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] >= arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    This function takes an array and an index i, which represents the current node to be checked.\n    It returns a boolean value indicating whether the given array represents a min heap or not.\n    \"\"\"\n    if i == 0:\n        return True\n    elif i % 2 == 0:\n        return arr[i//2] >= arr[i]\n    else:\n        return arr[i//2] <= arr[i]\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    This function takes an array and checks if it represents a min heap or not.\n    \"\"\"\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Get the left child of the current node\n    left_child = 2 * i + 1\n    \n    # Get the right child of the current node\n    right_child = 2 * i + 2\n    \n    # If the left child is greater than or equal to the array length, then the current node is a leaf node.\n    if left_child >= len(arr):\n        # If the current node is greater than or equal to the array length, then the array represents a min heap.\n        return True\n    \n    # If the left child is less than the array length, then check if the current node is greater than or equal to its left child.\n    if arr[left_child] >= arr[i]:\n        # If the current node is less than the left child, then the array does not represent a min heap.\n        return False\n    \n    # If the right child is less than the array length, then check if the current node is greater than or equal to its right child.\n    if right_child < len(arr) and arr[right_child] >= arr[i]:\n        # If the current node is less than the right child, then the array does not represent a min heap.\n        return False\n    \n    # The current node is greater than or equal to its left and right children, so it represents a min heap.\n    return True\n\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the array is empty.\n    if len(arr) == 0:\n        # If the array is empty, then it does not represent a min heap.\n        return False\n    \n    # Call the helper function to check if the array represents a min heap.\n    for i in range(len(arr)//2 - 1, -1, -1):\n        # Call the helper function for each node in the array.\n        if not check_min_heap_helper(arr, i):\n            # If the helper function returns False, then the array does not represent a min heap.\n            return False\n    \n    # If the array represents a min heap, then all nodes in the array have their children greater than or equal to their parents.\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_num_list = [0, 1]\n    for i in range(2, n + 1):\n        jacobsthal_num_list.append(jacobsthal_num_list[-1] + jacobsthal_num_list[-2])\n    return jacobsthal_num_list[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob_list = [0, 1, 1]  # initialize list with first two terms of jacobsthal sequence\n        for i in range(2, n + 1):\n            jacob_list.append(jacob_list[i-1] + jacob_list[i-2])\n        return jacob_list[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (n * (n - 1)) // 2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        num = 1\n        for i in range(n - 1):\n            num *= (4 * i + 3)\n        return num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    a = 0\n    b = 1\n    c = 1\n    for i in range(n):\n        if i % 2 == 0:\n            a, b = b, a + b\n        else:\n            c, a = b, a + b + c\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize variables\n    jacobsthal_num = 0\n    lucas_num = 1\n    count = 0\n    \n    # Iterate till the nth jacobsthal number is found\n    while count < n:\n        jacobsthal_num = (jacobsthal_num * lucas_num) % 1000000\n        lucas_num = (lucas_num * (lucas_num + 1)) % 1000000\n        count += 1\n        \n    return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n - 1)) // (2 * (n - 1))\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2**n - 1) // (2 * n)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # Sort the list in descending order based on the length of the tuple\n    test_list.sort(key=lambda x: len(x), reverse=True)\n\n    # Initialize minimum count\n    min_count = 0\n\n    # Initialize the count of the minimum tuple\n    count = 0\n\n    # Iterate through the sorted list\n    for tup in test_list:\n        # If the length of the tuple is equal to or less than the K, increment the count\n        if len(tup) <= K:\n            count += 1\n            # If the count is greater than the minimum count, update the minimum count\n            if count > min_count:\n                min_count = count\n\n    # Return the minimum count\n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    # create a dictionary to store the frequency of each element in the test list\n    freq = {}\n    for elem in test_list:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    \n    # sort the dictionary by frequency in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    \n    # iterate through the sorted dictionary to find the minimum k records\n    result = []\n    for i in range(min(K, len(sorted_freq))):\n        result.append(sorted_freq[i][0])\n    \n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples based on the second element (i.e., the value in the second tuple)\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize a variable to keep track of the minimum value seen so far\n    min_val = float('inf')\n    \n    # Iterate over the first K elements of the sorted list to find the minimum k records\n    for i in range(K):\n        # Check if the current element (i.e., the ith tuple) is smaller than the current minimum value\n        if test_list[i][1] < min_val:\n            # If yes, update the minimum value and the first K elements of the sorted list\n            min_val = test_list[i][1]\n            # Update the first K elements of the sorted list to have the ith tuple at the end\n            test_list = test_list[:i] + [test_list[i]] + test_list[i+1:]\n    \n    return test_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    min_list = []\n    for record in test_list:\n        if len(min_list) < K:\n            min_list.append(record)\n        else:\n            min_list[min_list.index(min(min_list))-1] = record\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n\n    Input:\n        test_list: a list of tuples, where each tuple represents a record\n        K: an integer, which is the number of records to be returned\n\n    Output:\n        a list of tuples, where each tuple represents a record and the length of the list is at most K\n    '''\n\n    # Sort the list of tuples by the first element in each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize a list to hold the minimum k records\n    min_k_records = []\n\n    # Iterate through the sorted list and add records to min_k_records\n    for i in range(len(sorted_list)):\n        if len(min_k_records) < K:\n            min_k_records.append(sorted_list[i])\n        else:\n            break\n\n    return min_k_records\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the list of tuples based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize an empty list to store the minimum k records\n    min_k_list = []\n\n    # Traverse through the sorted list\n    for i in range(len(test_list)):\n\n        # If the length of the list is less than K, append the current record to the min_k_list\n        if len(min_k_list) < K:\n            min_k_list.append(test_list[i])\n\n        # If the length of the list is greater than or equal to K, compare the current record with the minimum record in the min_k_list\n        elif len(min_k_list) >= K:\n\n            # If the current record is greater than the minimum record in the min_k_list, remove the minimum record and append the current record to the min_k_list\n            if test_list[i][1] > min_k_list[0][1]:\n                min_k_list.pop(0)\n                min_k_list.append(test_list[i])\n\n    # Return the list of minimum k records\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a dictionary to store the frequency of each key\n    freq_dict = {}\n    \n    # Loop through each tuple in the list\n    for i in test_list:\n        # If the key is already in the dictionary, increment its count\n        if i[0] in freq_dict:\n            freq_dict[i[0]] += 1\n        # If the key is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[i[0]] = 1\n    \n    # Find the minimum frequency among the keys in the dictionary\n    min_freq = float('inf')\n    min_key = None\n    \n    for key, value in freq_dict.items():\n        if value < min_freq:\n            min_freq = value\n            min_key = key\n    \n    # Filter the list of tuples based on the minimum frequency\n    min_list = [i for i in test_list if i[0] == min_key]\n    \n    # Return the list of tuples with the minimum frequency\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n\n    # create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # sort the dictionary by frequency in decreasing order\n    sorted_dict = dict(sorted(freq_dict.items(), key=lambda item: item[1], reverse=True))\n\n    # initialize a variable to store the minimum k elements\n    min_k_dict = {}\n\n    # add the first K elements from the dictionary to the min_k_dict\n    for i in range(K):\n        min_k_dict[sorted_dict.keys()[i]] = sorted_dict[sorted_dict.keys()[i]]\n\n    # add the remaining elements to the min_k_dict based on their frequency in the dictionary\n    for item in sorted_dict:\n        if item not in min_k_dict:\n            min_k_dict[item] = sorted_dict[item]\n\n    # return the minimum k elements in the min_k_dict\n    return min_k_dict"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    n = len(test_list)\n    count = [0] * (n + 1)\n    min_count = min(K, n)\n\n    for i, tup in enumerate(test_list):\n        count[tup[1]] += 1\n        if count[tup[1]] == min_count:\n            count[tup[0]] -= 1\n            if count[tup[0]] == min_count - 1:\n                return tup\n\n    return None"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Args:\n    test_list: A tuple list containing multiple records. Each record is a tuple with two elements.\n    K: An integer value representing the number of records to be returned.\n    \n    Returns:\n    A list containing the k smallest records from the tuple list.\n    '''\n    # Sort the tuple list in ascending order of the first element of the tuple\n    sorted_list = sorted(test_list)\n    # Initialize the list to store the k smallest records\n    k_smallest_records = []\n    # Iterate through the sorted tuple list and add k smallest records to the list\n    for i in range(K):\n        k_smallest_records.append(sorted_list[i])\n    # Return the list containing k smallest records\n    return k_smallest_records"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            result.append(l1[i])\n    return result"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    # Loop through each element in the first list\n    for i in range(len(l1)):\n        # Check if the element is in the second list and third list\n        if l1[i] in l2 and l1[i] in l3:\n            # If it is, add it to the common_elements list\n            common_elements.append(l1[i])\n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common.append(i)\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            if l1[i] not in common_list:\n                common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    smallest = None\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest > num and num < second_smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        print(\"The list must contain at least two elements\")\n        return None\n    \n    # sort the list in ascending order\n    numbers.sort()\n    \n    # return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # check if the list has at least two elements\n    if len(numbers) < 2:\n        return None\n\n    # sort the list in ascending order\n    numbers.sort()\n\n    # return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for num in numbers[2:]:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return numbers[1]\n    else:\n        min1 = min(numbers[0], numbers[1])\n        max1 = max(numbers[0], numbers[1])\n        return min1 + max1"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a(?=.*b)\"\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    result = re.findall(pattern, text)\n    return result\n\ntext = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*?)'\n    match = re.search(pattern, text)\n    if match:\n        print(\"Match found:\", match.group())\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    pattern = r'ab*'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    pattern = r'a(b)+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b.*'\n    return re.findall(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and i < j:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    # Create a dictionary to store the count of reverse pairs\n    count_dict = {}\n\n    # Loop through the list of strings\n    for i in range(len(test_list)):\n        # Check if the current string is a reverse of any other string\n        for j in range(i+1, len(test_list)):\n            # Check if the current and reverse string are equal\n            if test_list[i] == test_list[j][::-1]:\n                # If they are, add a count to the dictionary\n                if (test_list[i], test_list[j]) in count_dict:\n                    count_dict[(test_list[i], test_list[j])] += 1\n                else:\n                    count_dict[(test_list[i], test_list[j])] = 1\n\n    # Return the count of reverse pairs\n    return count_dict"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j] or test_list[j][::-1] == test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and (test_list[i][::-1] == test_list[j][::-1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Create a dictionary to store the count of reverse pairs for each string in the list\n    reverse_pair_count = {}\n    \n    # Iterate over each string in the list\n    for string in test_list:\n        # Convert the string to a list of characters\n        char_list = list(string)\n        # Sort the characters of the string in reverse order\n        char_list.sort(reverse=True)\n        # Convert the sorted list back to a string\n        sorted_string = ''.join(char_list)\n        \n        # If the sorted string is already in the dictionary, increment the count of the reverse pair\n        if sorted_string in reverse_pair_count:\n            reverse_pair_count[sorted_string] += 1\n        # If the sorted string is not in the dictionary, add it with a count of 1\n        else:\n            reverse_pair_count[sorted_string] = 1\n    \n    # Iterate over each pair of strings in the dictionary and count the reverse pairs\n    reverse_pair_count = {k: v for k, v in reverse_pair_count.items() if v % 2 == 1}\n    \n    # Return the count of reverse pairs\n    return len(reverse_pair_count)"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Initialize an empty dictionary to store the counts of sublists\n    counts = {}\n    \n    # Loop through the elements of the original list\n    for i in range(len(list1)):\n        # Convert each element to a tuple and check if it is already a key in the counts dictionary\n        if tuple(list1[i]) in counts:\n            # Increment the count for the tuple\n            counts[tuple(list1[i])] += 1\n        else:\n            # If the tuple is not a key, add it to the dictionary with a count of 1\n            counts[tuple(list1[i])] = 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublists = {}\n    for item in list1:\n        tuple_item = tuple(item)\n        if tuple_item in unique_sublists:\n            unique_sublists[tuple_item] += 1\n        else:\n            unique_sublists[tuple_item] = 1\n    return unique_sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # initialize an empty dictionary\n    sublist_counts = {}\n    # loop through the original list\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # if the tuple already exists in the dictionary, increment its value\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        # otherwise, add the tuple to the dictionary with a value of 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    # return the dictionary\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists[tuple(list1[i:j])] = sublists.get(tuple(list1[i:j]), 0) + 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts of unique sublists\n    unique_sublist_counts = {}\n    \n    # Iterate over each element in the original list\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Convert the list to a tuple and check if it's already in the dictionary\n            if tuple(element) in unique_sublist_counts:\n                # Increment the count for this tuple\n                unique_sublist_counts[tuple(element)] += 1\n            else:\n                # Add the tuple to the dictionary with a count of 1\n                unique_sublist_counts[tuple(element)] = 1\n                \n    return unique_sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_list = set(list1)\n    \n    # Create a dictionary to store the count of each tuple of elements from the unique list\n    count_dict = {}\n    \n    # Iterate over the unique list\n    for i in unique_list:\n        # Convert the list to a tuple to create a tuple of elements\n        tuple_i = tuple(i)\n        \n        # Check if the tuple already exists in the dictionary\n        if tuple_i in count_dict:\n            # Increment the count for the tuple\n            count_dict[tuple_i] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[tuple_i] = 1\n    \n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Loop through each list in the original list\n    for lst in list1:\n        # Convert the list to a tuple and add it to the dictionary\n        counts[tuple(lst)] = counts.get(tuple(lst), 0) + 1\n\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the count of tuples for each list\n    count_dict = {}\n\n    # Loop through each list in the original list\n    for sublist in list1:\n        # Convert the list to a tuple and check if it is already in the count_dict\n        if tuple(sublist) in count_dict:\n            count_dict[tuple(sublist)] += 1\n        else:\n            # If the tuple is not in the count_dict, add it with a count of 1\n            count_dict[tuple(sublist)] = 1\n\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for item in list1:\n        if type(item) == tuple:\n            if item in count:\n                count[item] += 1\n            else:\n                count[item] = 1\n        else:\n            count[tuple(item)] = 1\n    return count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n    for part in parts:\n        if not part.isdigit() or len(part) > 2:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # check if the string is a number\n    try:\n        float(num)\n        # check if the number contains a decimal point\n        if '.' in num:\n            # split the string into integer and decimal parts\n            int_part, dec_part = num.split('.')\n            # check if the decimal part has a precision of 2\n            if len(dec_part) > 2:\n                return False\n            # convert the decimal part to float\n            dec_part = float(dec_part)\n            # multiply the integer and decimal parts together and round down\n            combined = int(int_part) * 10 ** len(dec_part)\n            # check if the rounded down value is equal to the original number\n            if combined == float(num):\n                return True\n    except ValueError:\n        pass\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    num_list = list(num)\n    if len(num_list) > 1 and num_list[0] == '.' and num_list[-1] == '0':\n        return False\n    for i in range(1, len(num_list) - 1):\n        if num_list[i] not in '0123456789':\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n\n    try:\n        num = float(num)\n    except ValueError:\n        return False\n\n    return num.is_integer() and abs(num - int(num)) < 0.01"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    if '.' not in num or not num.replace('.', '', 1).isdigit():\n        return False\n    precision = len(num.split('.')[1])\n    return precision <= 2"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' not in num:\n            return False\n        if len(num.split('.')[-1]) > 2:\n            return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        if len(num.split('.')[1]) == 2:\n            return True\n    else:\n        if len(str(num)) == 2:\n            return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_pattern = r'^[-+]?\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(decimal_pattern, num))"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n        if '.' in num:\n            if num.split('.')[-1].startswith('0'):\n                return False\n            elif len(num.split('.')[-1]) > 2:\n                return False\n            else:\n                return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        if '.' in num:\n            num_list = list(num)\n            decimal_count = 0\n            for i in num_list:\n                if i == '.':\n                    decimal_count += 1\n                elif decimal_count > 1:\n                    raise ValueError('Invalid number')\n                elif i == '0' and not decimal_count:\n                    raise ValueError('Invalid number')\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_elements = set(arr)  # create a set of unique elements\n    if len(unique_elements) == 1:  # check if there is only one unique element\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    # create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    # check if there is only one element in the dictionary\n    if len(freq) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if all the elements in the list are distinct,\n    else returns False.\n    \"\"\"\n\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n\n    # Check if the length of the set is 1 or not. If it is 1, all the elements are distinct.\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = set(arr)\n    if len(unique) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    # converting the list to a set to remove any duplicates\n    unique_set = set(arr)\n    # checking if the length of the set is equal to 1, which means all the elements in the list are distinct\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"30 days\"\n    else:\n        return \"not 30 days\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            days_in_month[1] = 29\n        else:\n            days_in_month[1] = 28\n    return days_in_month[monthnum-1]"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # Check if the month number is valid\n    if not (1 <= monthnum3 <= 12):\n        print(\"Invalid month number.\")\n        return\n    \n    # Check if the month number has 30 days\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"The month number contains 30 days.\")\n    else:\n        print(\"The month number does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Dictionary to store the month number and its days\n    months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    # Check if the month number is valid\n    if monthnum3 in months:\n        # If the month number is valid, check if the month contains 30 days\n        if months[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            if monthnum3 == 2 and day_in_month(year, monthnum3) == 29:\n                return True\n            else:\n                return False\n        else:\n            if monthnum3 == 2 and day_in_month(year, monthnum3) == 28:\n                return True\n            else:\n                return False\n    elif 3 <= monthnum3 <= 12:\n        if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            if day_in_month(year, monthnum3) == 30:\n                return True\n            else:\n                return False\n        else:\n            if day_in_month(year, monthnum3) == 31:\n                return True\n            else:\n                return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        print(monthnum3, \"contains 30 days.\")\n    elif monthnum3 in [4, 6, 9, 11]:\n        print(monthnum3, \"contains 31 days.\")\n    else:\n        print(monthnum3, \"does not contain 30 or 31 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        if monthnum3 % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            days_in_month[1] = 29\n        else:\n            days_in_month[1] = 28\n    if monthnum3 in days_in_month:\n        print(f\"{monthnum3} contains 30 days.\")\n    else:\n        print(f\"{monthnum3} does not contain 30 days.\")"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n):\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the minimum difference and the first element in the array\n    min_diff = arr[1]-arr[0]\n    # Initialize the minimum difference index\n    min_diff_index = 1\n    # Loop through the array and find the minimum difference\n    for i in range(2,n):\n        diff = arr[i]-arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n    # Return the minimum difference and the index of the minimum difference\n    return min_diff, min_diff_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Calculate the absolute difference between each element in the array\n    diff_arr = [abs(x - y) for x in arr for y in arr]\n    # Sort the absolute difference array in ascending order\n    diff_arr.sort()\n    # Initialize the minimum difference to the first element\n    min_diff = diff_arr[0]\n    # Check if the last element is present in the array\n    if diff_arr[-1] in arr:\n        # Calculate the minimum difference between the last element and the remaining elements\n        min_diff = min(min_diff, diff_arr[-1] + min(arr[diff_arr.index(diff_arr[-1]):]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and its length n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array\n    arr.sort()\n\n    # Initialize two variables to store the minimum and maximum difference\n    min_diff = arr[1] - arr[0]\n    max_diff = arr[-1] - arr[-2]\n\n    # Iterate over the array and check for the minimum difference\n    for i in range(1, n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        raise ValueError(\"Array should have at least 2 elements\")\n\n    arr.sort()\n    min_diff = float('inf')\n    min_elem = arr[0]\n    for i in range(1, n):\n        diff = arr[i] - min_elem\n        if diff < min_diff:\n            min_diff = diff\n        min_elem = arr[i]\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    arr.sort() # sort the array \n    diff = abs(arr[1]-arr[0]) # initialize the difference as the absolute difference between the first two elements \n    for i in range(1,n-1): \n        if arr[i]-arr[i-1]!= arr[i]-arr[i+1]: # if the difference between the current element and the previous and next element is not equal, then update the difference \n            diff = min(diff, abs(arr[i]-arr[i-1])) # if the difference is less than the previous minimum, update it \n    return diff # return the minimum difference "
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize minimum difference to be positive infinity\n    min_diff = float('inf')\n\n    # loop through all possible pairs of elements\n    for i in range(n):\n        for j in range(i + 1, n):\n            # calculate the difference between the two elements\n            diff = arr[j] - arr[i]\n\n            # update the minimum difference if the current difference is smaller\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference and the current difference\n    min_diff = arr[n-1] - arr[0]\n    curr_diff = arr[1] - arr[0]\n\n    # Traverse the sorted array and update the minimum difference and current difference accordingly\n    for i in range(1, n-1):\n        curr_diff = curr_diff - arr[i] + arr[i+1]\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array of integers and its size n.\n    It returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')  # initialize the minimum difference as infinity\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n\n    Args:\n        arr (list): The list of integers to find the minimum difference in.\n        n (int): The length of the array.\n\n    Returns:\n        int: The minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize the minimum difference to be positive infinity\n    min_diff = float('inf')\n\n    # Iterate through the array and calculate the difference between each pair of elements\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(string):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    # initialize count variable to zero\n    count = 0\n    # loop through each character in the string\n    for char in string:\n        # if the character is a digit, increment the count\n        if char.isdigit():\n            count += 1\n    # return the final count\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the polite number counter\n    count = 0\n    # Initialize the number of digits in the input number\n    num_digits = len(str(n))\n    # Initialize the current digit count and digit sum\n    cur_digit_count = 0\n    cur_digit_sum = 0\n    # Iterate through the number\n    for i in range(num_digits):\n        # Get the current digit\n        digit = int(str(n)[i])\n        # If the digit is even, increment the counter and add the digit to the sum\n        if digit % 2 == 0:\n            count += 1\n            cur_digit_sum += digit\n            # If the digit count is less than the input number, update the current digit count and sum\n            if cur_digit_count < num_digits:\n                cur_digit_count += 1\n    # Calculate the remaining digits and add them to the sum\n    remaining_digits = num_digits - cur_digit_count\n    for i in range(remaining_digits):\n        cur_digit_sum += (i + 1)\n    # If the sum is odd, increment the counter\n    if cur_digit_sum % 2 == 1:\n        count += 1\n    # Return the polite number counter\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = []\n    for i in range(1, n+1):\n        if i % 15 == 0:\n            polite_numbers.append(i)\n    return polite_numbers\n\ndef nth_polite_number(n):\n    polite_numbers = is_polite(n)\n    if polite_numbers:\n        return polite_numbers[0]\n    else:\n        return -1\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is:\", nth_polite_number(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # First we find the sum of squares of odd digits\n    num = n * 10 # let's assume that nth polite number is n times 10\n    squares = sum([int(digit)**2 for digit in str(num)])\n\n    # Now we check if the sum of squares of odd digits is odd or even\n    # If it is odd, we increment the value of n by 1\n    if squares % 2 == 1:\n        n += 1\n    \n    # Finally we find the nth polite number using the formula\n    polite_number = num + n\n    \n    # We return the polite number\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n < 1:\n        return None\n    \n    # Initialize some variables\n    a = 0\n    b = 1\n    c = 1\n    \n    # Start iterating\n    for i in range(2, n+1):\n        # Calculate next term\n        next_term = (b**2 - 4*a*c) / (2*a)\n        \n        # Update variables\n        a = b\n        b = c\n        c = next_term\n    \n    # Check if result is valid\n    if next_term > 0:\n        return int(math.sqrt(next_term))\n    else:\n        return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # initialize variables\n    count = 1\n    num = 1\n\n    # loop until the nth polite number is found\n    while count < n:\n        # increment the count and multiply the number by 2\n        count += 1\n        num *= 2\n\n        # check if the number is polite\n        if num > 1 and math.log(num, 2) % 1 == 0:\n            return True\n\n    # if the loop completes without finding the nth polite number, return False\n    return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 1\n    else: \n        return 2 + math.floor(math.log2(n + 1))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n and returns the nth polite number.\n    A polite number is a number that is divisible by 5, and is greater than 2.\n    A divisible by 5 number is a number that is a multiple of 5 and not equal to 25.\n    A greater than 2 number is a number that is greater than 2 and not divisible by 5.\n    '''\n    polite_number = 0\n    for i in range(1, n+1):\n        if i % 5 == 0 and i!= 25:\n            polite_number = i\n            break\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n and returns the nth polite number.\n    A polite number is defined as a positive integer greater than or equal to 10.\n    '''\n    if n < 10:\n        return n\n    else:\n        return 10 + is_polite(n - 1)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_factors(num):\n    factors = []\n    while num % 2 == 0:\n        factors.append(2)\n        num //= 2\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        while num % i == 0:\n            factors.append(i)\n            num //= i\n    if num > 2:\n        factors.append(num)\n    return factors\n\ndef nth_polite(n):\n    if n < 1:\n        return -1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 7\n\n    p = 0\n    i = 1\n    while i <= n:\n        p += 1\n        i += 1\n    primes = []\n    while len(primes) < p:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    primes.sort(reverse=True)\n    factor_count = 0\n    for prime in primes:\n        factors = prime_factors(prime)\n        factor_count += 1\n        if factor_count == p:\n            break\n        elif factor_count > p:\n            break\n\n    if len(factors) == 1:\n        return factors[0]\n    else:\n        return -1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is a polite number,\n    otherwise it returns False.\n    \"\"\"\n    if n < 1:\n        return False\n\n    # Check if the number is an integer\n    if not n.is_integer():\n        return False\n\n    # Initialize variables\n    prev_num = 1\n    cur_num = 2\n\n    # Check if the number is a prime number\n    if is_prime(n):\n        return True\n\n    # Check if the number is a palindrome\n    palindrome = int(str(n)[::-1])\n    if palindrome == n:\n        return True\n\n    # Check if the number is a geometric sequence\n    geometric = 1\n    for i in range(1, int(math.log(n, cur_num)) + 1):\n        geometric *= cur_num\n\n    if geometric == n:\n        return True\n\n    # Check if the number is an arithmetic sequence\n    for i in range(1, int(math.log(n, prev_num)) + 1):\n        cur_num *= prev_num\n        if cur_num == n:\n            return True\n\n    # If the number is neither a prime, a palindrome, a geometric sequence, nor an arithmetic sequence,\n    # it is not a polite number\n    return False\n\ndef is_prime(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is a prime number,\n    otherwise it returns False.\n    \"\"\"\n    if n <= 1:\n        return False\n\n    # Check if the number is divisible by any number between 2 and the square root of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\ndef nth_polite(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth polite number.\n    \"\"\"\n    if n < 1:\n        return None\n\n    count = 0\n    polite_num = 0\n\n    while count < n:\n        if is_polite(polite_num):\n            count += 1\n        polite_num += 1\n\n    return polite_num"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    if len(l1) < 2:\n        return []\n    else:\n        result = []\n        for i in range(len(l1)):\n            for j in range(i+1, len(l1)):\n                result.append((l1[i], l1[j]))\n        return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(lst)-1):\n        pairs.append((lst[i],lst[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append([l1[i], l1[i+1]])\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(lst):\n    return [lst[i:i+2] for i in range(len(lst)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to'sum'.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as inputs and returns the count of pairs whose sum is equal to sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes in two lists as input, and returns a new list containing the elements in `li1` that are not in `li2`. The order of the elements in the new list is the same as that in `li1`.\n\n    For example, if `li1 = [1, 2, 3, 4]` and `li2 = [2, 4, 6]`, then the output of `Diff(li1,li2)` will be `[1, 3]`.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # initialize an empty list to store the difference\n    diff_list = []\n    # iterate through each element of the first list\n    for item in li1:\n        # check if the item is in the second list\n        if item not in li2:\n            # if not, add it to the difference list\n            diff_list.append(item)\n    # return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # initializing the set to store the unique elements of li2\n    set2 = set(li2)\n    # initializing an empty list to store the elements that are present in li1 but not in li2\n    diff_list = []\n    # iterating over each element of li1\n    for i in li1:\n        # if the element is not present in set2, it means it is present in li1 but not in li2, so we append it to diff_list\n        if i not in set2:\n            diff_list.append(i)\n    # returning the list of difference\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements in li1 but not in li2.\n    '''\n    diff_list = [i for i in li1 if i not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    # Initialize an empty list to store the difference\n    diff_list = []\n    # Iterate through the first list\n    for i in li1:\n        # If the element is not present in the second list, append it to the diff_list\n        if i not in li2:\n            diff_list.append(i)\n    # Return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff_list.append(li1[i])\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    return sum(i**4 for i in range(1, n+1, 2))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**4\n        i += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 1:\n            sum += i ** 4\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    # initializing the sum variable\n    sum = 0\n\n    # iterating from 1 to n\n    for i in range(1, n+1):\n\n        # checking if the number is odd\n        if i % 2 == 1:\n\n            # finding the fourth power of the number\n            fourth_power = i**4\n\n            # adding the fourth power to the sum\n            sum += fourth_power\n\n    # returning the sum of fourth power\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n, 0, -2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n\n    while i <= n:\n        if i % 2 == 1:\n            sum += i ** 4\n        i += 1\n\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if i in ['(', '{', '[']:\n                if i!= top:\n                    return False\n            elif i in [')', '}', ']']:\n                if i == top:\n                    continue\n                else:\n                    return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n    for i in exp:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        elif i in [')', ']', '}']:\n            if len(stack) == 0 or (i == ')' and stack[-1] == '(') or (i == ']' and stack[-1] == '[') or (i == '}' and stack[-1] == '{'):\n                stack.pop()\n            else:\n                return False\n        else:\n            continue\n\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isspace():\n            continue\n        elif char == '(':\n            stack.append('(')\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_brackets = {'(', '[', '{'}\n    closing_brackets = {')', ']', '}'}\n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or stack.pop() not in opening_brackets.values():\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n    for i in exp:\n        if i.isdigit():\n            continue\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n\n    if stack:\n        return False\n\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char == ')' and top_char!= '(':\n                return False\n            elif char == '}' and top_char!= '{':\n                return False\n            elif char == ']' and top_char!= '[':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if not (char in ['(', '[', '{'] and last_char in [')', ']', '}']):\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    # create a stack to keep track of opening and closing parentheses\n    stack = deque()\n\n    # iterate over the characters in the expression\n    for char in exp:\n\n        # if the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n\n        # if the character is a closing parenthesis, pop the top element from the stack and check if the parentheses are balanced\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n\n    # if the stack is not empty, then the expression is not balanced\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Remove words with k length\n    result = [word for word in words if len(word)!= K]\n\n    # Join the result back into a string\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n\n    # initialize a list to store the words with k length\n    new_words = []\n\n    # loop through the words and remove the ones with k length\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n\n    # join the remaining words into a string\n    result =''.join(new_words)\n\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(0), match.end(0))\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        # group() returns the substring matched by the pattern\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            index = text.find(match)\n            return match, index\n        return None\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Search for pattern in text and return the result\n    match = re.search(pattern, text)\n    if match:\n        # Get the position of the match\n        pos = match.start()\n        # Get the occurrence of the match\n        occurrence = match.group()\n        # Return the occurrence and position\n        return occurrence, pos\n    else:\n        # If no match is found, return None\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n\n    odd_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            odd_count += 1\n            if odd_count == 2:\n                return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if not all(nums[i:i+2][j] % 2 == 0 for j in range(len(nums[i:i+2]))):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:  # if index is even, it doesn't contain any odd numbers\n            continue\n        else:  # if index is odd, check if it contains odd numbers\n            if not any(num % 2 == 0 for num in nums[i:i+2]):\n                return False  # if it doesn't contain odd numbers, return False\n    return True  # if all indexes contain odd numbers, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            print(f\"The odd number at index {i} is: {nums[i]}\")\n            break\n    else:\n        print(\"Every odd index contains odd numbers.\")"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0: # checking if the current index is even\n            if nums[i] % 2 == 0: # checking if the number at the current index is even\n                return False # if the current index is even but the number is even, return False\n    return True # if no odd numbers were found, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        if not any(nums[i] % 2 == 0 for j in range(len(nums) - i)):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0: # check if index is even\n            continue\n        if not any(nums[i] % 2 == 0 for j in range(i+1, len(nums))): # check if even number exists in the odd indices after the current index\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    # Iterate through each character in the string\n    for i in range(len(test_str)-1):\n\n        # If the current character is a vowel, and the next character is also a vowel, increment the count\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    # Define a set of vowels\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\n    # Initialize a counter for vowel neighbors\n    vowel_neighbors = 0\n\n    # Iterate over the characters in the string\n    for i in range(len(test_str)):\n        # Check if the previous character is a vowel\n        prev_char = test_str[i-1] if i > 0 else None\n        if prev_char in vowels:\n            # Check if the next character is a vowel\n            next_char = test_str[i+1] if i < len(test_str)-1 else None\n            if next_char in vowels:\n                # Increment the vowel neighbor counter\n                vowel_neighbors += 1\n\n    # Return the count of vowel neighbors\n    return vowel_neighbors"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str)):\n        if (i == 0 or i == len(test_str) - 1) or (test_str[i-1] in vowels and test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowel_count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            vowel_count += 1\n\n    return vowel_count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        \n        if test_str[i] in vowels and test_str[i - 1] not in vowels and test_str[i + 1] not in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # loop through the list and update the frequency count for each element\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # create a list of non-repeated elements and calculate the sum of those elements\n    non_repeated = []\n    for i, j in freq.items():\n        if j == 1:\n            non_repeated.append(i)\n\n    # calculate the sum of the non-repeated elements\n    total_sum = 0\n    for i in non_repeated:\n        total_sum += i\n\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements of the array\n    unique_elements = set(arr)\n\n    # initialize a variable to store the sum of the unique elements\n    sum_of_unique = 0\n\n    # iterate through the unique elements and add their sum to the sum_of_unique variable\n    for element in unique_elements:\n        sum_of_unique += element\n\n    # return the sum_of_unique variable\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the elements and their frequency\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Create a new list to store the unique elements\n    unique_list = []\n    for num in freq:\n        if freq[num] == 1:\n            unique_list.append(num)\n\n    # Calculate the sum of the unique elements\n    total_sum = 0\n    for num in unique_list:\n        total_sum += num\n\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # initialize the sum of unique elements to zero\n    sum_unique = 0\n    # iterate through the unique elements\n    for element in unique_elements:\n        # add the element to the sum of unique elements\n        sum_unique += element\n    # return the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the elements of the list\n    freq_dict = {}\n    for num in arr:\n        # If the element is already in the dictionary, increment its count\n        if num in freq_dict:\n            freq_dict[num] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[num] = 1\n\n    # Initialize the sum variable to 0\n    total_sum = 0\n\n    # Iterate through the dictionary to add up the sum of non-repeated elements\n    for num, count in freq_dict.items():\n        if count == 1:\n            total_sum += num\n\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # convert list to set to remove duplicates\n    unique_set = set(arr)\n\n    # convert set to list to get the order of elements\n    unique_list = list(unique_set)\n\n    # initialize sum variable\n    sum_value = 0\n\n    # iterate over unique list to calculate sum\n    for num in unique_list:\n        sum_value += num\n\n    return sum_value"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    return sum(unique_elements)\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize an empty dictionary to store the elements and their counts\n    element_count = {}\n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n    # Iterate through the list of elements\n    for element in arr:\n        # If the element is already in the dictionary, increment its count by 1\n        if element in element_count:\n            element_count[element] += 1\n        # Otherwise, add the element to the dictionary and set its count to 1\n        else:\n            element_count[element] = 1\n    # Iterate through the dictionary to find the sum of non-repeated elements\n    for element, count in element_count.items():\n        # If the count is 1, the element is a non-repeated element\n        if count == 1:\n            non_repeated_sum += element\n    # Return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the elements of the list\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    # find the sum of the non-repeated elements\n    non_repeated_sum = 0\n    for i in arr:\n        if freq[i] == 1:\n            non_repeated_sum += i\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # creating a set to store unique elements of the list\n    unique_set = set(arr)\n    # finding the sum of unique elements\n    return sum(unique_set)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # create an iterator of consecutive duplicates\n    group_iter = groupby(list1)\n    # initialize an empty list to store sublists\n    result = []\n    # loop through the iterator and append each group to the result list\n    for group in group_iter:\n        # convert the group to a list and append it to the result list\n        result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if len(list(group)) > 1:\n            yield list(group)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Create a list of tuples containing the elements and their count\n    grouped = groupby(list1)\n    # Iterate through the grouped list\n    result = []\n    for key, group in grouped:\n        # If the key is the same as the previous key and the count is greater than 1, append the group as a sublist\n        if key == next(group)[0] and len(list(group)) > 1:\n            result.append(list(group))\n        else:\n            result.append(group)\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key == key():\n            group = list(group)\n            group.sort()\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    counts = {}\n    for elem in list1:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    \n    # Use groupby to group the elements based on their counts\n    grouped_counts = {k: list(g) for k, g in groupby(counts.items(), lambda x: x[1])}\n    \n    # Iterate over the grouped counts dictionary and pack the elements into sublists\n    packed_list = []\n    for k, v in grouped_counts.items():\n        if len(v) == 1:\n            packed_list.append(v[0])\n        else:\n            for i in range(len(v)):\n                packed_list.append(v[i])\n    \n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as input and returns a list of sublists\n    containing consecutive duplicates of the input list.\n    '''\n    grouped = sorted(list(set(lst)), key=lambda x: (-len(str(x)), x))\n    return [list(g) for k, g in groupby(grouped, lambda x: x) if k == x]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(list1) if key and key[-1] == list1[key[-1] + 1]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Group the list elements based on their frequency\n    grouped_list = groupby(list1)\n\n    # Create an empty list to store sublists\n    sublists = []\n\n    # Iterate over the grouped list and extract consecutive duplicates\n    for key, group in grouped_list:\n        if len(list(group)) > 1:\n            # Create a sublist from the consecutive duplicates\n            sublist = list(group)\n\n            # If the sublist has more than one element, add it to the sublists list\n            if len(sublist) > 1:\n                sublists.append(sublist)\n\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list elements by their keys\n    grouped = groupby(list1)\n    # Iterate over the grouped keys\n    for key, group in grouped:\n        # Check if there are any consecutive duplicates\n        if key == next(group)[0] - 1:\n            # If there are, add the sublist containing the consecutive duplicates to the result list\n            for i in group:\n                sublist = [i]\n                for j in group:\n                    if j - i == 1:\n                        sublist.append(j)\n                if sublist:\n                    result.append(sublist)\n        else:\n            # If there are no consecutive duplicates, add the sublist containing the last element to the result list\n            sublist = [key]\n            for i in group:\n                sublist.append(i)\n            result.append(sublist)\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counts = {}\n\n    for item in list1:\n        if isinstance(item, list):\n            sublist_tuple = tuple(item)\n            if sublist_tuple not in sublist_counts:\n                sublist_counts[sublist_tuple] = 1\n            else:\n                sublist_counts[sublist_tuple] += 1\n\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Loop through the list of lists\n    for sublist in list1:\n        # Turn the sublist into a tuple and check if it already exists in the dictionary\n        if tuple(sublist) in counts:\n            # If it does, increment its count by 1\n            counts[tuple(sublist)] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for lst in list1:\n        if lst in count:\n            count[lst] += 1\n        else:\n            count[lst] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create a set of unique lists\n    unique_lists = set()\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                unique_lists.add(tuple(subitem))\n        else:\n            unique_lists.add(item)\n\n    # Count the number of occurrences of each unique list\n    count_dict = {}\n    for item in unique_lists:\n        count_dict[item] = list1.count(item)\n\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Loop through each list in the input list\n    for lst in list1:\n        # Convert the list to a tuple and check if it is already in the dictionary\n        if (tuple(lst),) in counts:\n            # If it is, increment its count by 1\n            counts[(tuple(lst),)] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            counts[(tuple(lst),)] = 1\n\n    # Return the dictionary with the counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for lst in list1:\n        if isinstance(lst, list):\n            lst_tup = tuple(sorted(lst))\n            count[lst_tup] = count.get(lst_tup, 0) + 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the count of each sublist\n    sublist_count = {}\n    \n    # loop through each element in the list1\n    for element in list1:\n        # if the element is a list, turn it into a tuple and add it to the sublist_count dictionary\n        if isinstance(element, list):\n            sublist_count[tuple(element)] = sublist_count.get(tuple(element), 0) + 1\n            \n    # return the sublist_count dictionary\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_list = list(set(list1))\n    \n    # Initialize an empty dictionary\n    count_dict = {}\n    \n    # Loop through the unique list and count the number of occurrences\n    for sublist in unique_list:\n        count_dict[sublist] = list1.count(sublist)\n    \n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the unique sublists and their counts\n    count_dict = {}\n\n    # Loop through each list in the original list\n    for sublist in list1:\n        # Turn the list into a tuple and check if it is already in the dictionary\n        if tuple(sublist) in count_dict:\n            # If it is, increment its count by 1\n            count_dict[tuple(sublist)] += 1\n        else:\n            # If it isn't, add it to the dictionary with a count of 1\n            count_dict[tuple(sublist)] = 1\n\n    # Return the dictionary with the unique sublists as keys and their counts as values\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # loop through each tuple in the list\n    for t in test_list:\n        # loop through each combination of the tuple with tuples in the list\n        for c in combinations(t, len(t)):\n            # add the tuple to the list of combinations\n            combinations_list.append(tuple(c))\n    # return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list, len(test_list))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Use the itertools function to find all possible combinations of sums\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Find the sum of the tuples\n            sum_of_tuple = sum(test_list[i]) + sum(test_list[j])\n            \n            # Find all combinations of tuples that sum to the sum of the current combination\n            for combo in combinations(test_list[i], j-i):\n                # Check if the sum of the current combination is equal to the sum of the tuples\n                if sum_of_tuple == sum(combo):\n                    # Print the current combination\n                    print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Using itertools.combinations to generate combinations\n    for comb in combinations(test_list, len(test_list)):\n        # Check if all the elements of the combination are equal to each other\n        if all(comb[0] == comb[i] for i in range(1, len(comb))):\n            # If all elements are equal, print the combination\n            print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    # initialize the combination list with an empty tuple\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            # combine the current two tuples into a single tuple\n            combo = tuple(test_list[i]+test_list[k] for k in range(i, j))\n            # check if the combination is already in the list\n            if combo not in result:\n                result.append(combo)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # using itertools to find all combinations of sums with tuples in the list\n    combinations_sum = list(combinations(test_list, r=2))\n    return combinations_sum"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Find the set of unique tuples in the given list\n    unique_tuples = set(tuple(sorted(i)) for i in test_list)\n\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n\n    # Iterate through all unique tuples in the list\n    for i in unique_tuples:\n        # Calculate the sum of the tuples\n        sum_of_tuples = sum(i)\n\n        # Check if the sum of the tuples is present in the test_list\n        if sum_of_tuples in test_list:\n            # Calculate the number of tuples with the given sum\n            count = test_list.count(sum_of_tuples)\n\n            # Generate all combinations of the given tuple and the count of tuples with the given sum\n            for j in combinations(i, count):\n                # Add the combination to the combinations_list\n                combinations_list.append(j)\n\n    # Return the combinations_list\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def get_sum(combination):\n        return sum(combination)\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    print(tuple(sorted(test_list[i])))\n                    print(tuple(sorted(test_list[j])))\n                    print(tuple(sorted(test_list[k])))\n                    print(tuple(sorted(test_list[l])))\n                    print()\n                    for combo in combinations(sorted(test_list[i]), 4):\n                        if get_sum(combo) == test_list[i][0] + test_list[j][0] + test_list[k][0] + test_list[l][0]:\n                            print(tuple(sorted(combo)))\n                            print()"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            combo = tuple(sorted(test_list[i][:j]))\n            if combo not in result:\n                result.append(combo)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    def sum_combinations(lst):\n        lst.sort()\n        result = []\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)+1):\n                result.append((lst[i], lst[j]))\n        return result\n\n    def find_combinations_helper(lst, target_sum):\n        lst.sort()\n        comb_sum = 0\n        for i in range(len(lst)):\n            comb_sum += lst[i]\n            if comb_sum == target_sum:\n                return True\n            elif comb_sum < target_sum:\n                comb_sum = 0\n        return False\n\n    sum_lst = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            sum_lst.append((test_list[i], test_list[j]))\n\n    for target_sum in range(len(sum_lst), len(test_list)+1):\n        if find_combinations_helper(sum_lst, target_sum):\n            print(\"Sum combinations with tuples:\", sum_lst)\n            return\n\n    print(\"No combinations found.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes a number n as input and returns True if the count of its divisors is even, and False otherwise.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    count = len(divisors)\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if n > 1 and n % 2 == 0:\n        count -= 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    divisor = 2\n\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            count += 1\n            n = n / divisor\n        else:\n            divisor += 1\n    \n    if n > 1:\n        count += 1\n    \n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer n and returns True if the count of its divisors is even, otherwise it returns False.\n    If the integer n has no divisors, then it returns True.\n    '''\n    count = 0\n    if n <= 1:\n        return True\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count == 2:\n                return True\n            elif count > 2:\n                return False\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return True\n    divisors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    divisors.append(n)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors = [1]\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            divisors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    if n > 1:\n        divisors.append(n)\n    count_divisors = sum(divisors)\n    if count_divisors % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Count the number of divisors of a given number.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even\")\n    else:\n        print(\"The count of divisors is odd\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n    if n > 1: \n        count += 1 \n    return count\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize the sum of odd length subarrays as 0\n    odd_sum = 0\n\n    for i in range(n-2):\n        # Check if the current subarray has odd length\n        if i == n-3 or i == n-4:\n            odd_sum += arr[i] + arr[i+2]\n        elif i == n-2:\n            odd_sum += arr[i] + arr[i+1] + arr[i+3]\n        else:\n            odd_sum += arr[i] + arr[i+1] + arr[i+2] + arr[i+3]\n\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    subarray_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            subarray_sum += arr[i]\n        else:\n            subarray_sum = 0\n            for j in range(i, len(arr), 2):\n                subarray_sum += arr[j]\n        if subarray_sum % 2 == 1:\n            return subarray_sum\n    return 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    start = 0\n    \n    for i in range(n):\n        if i == n-1 or i == n-2:\n            if i == n-1:\n                end = i\n            else:\n                end = i + 1\n            temp_sum = arr[start:end].sum()\n            total_sum += temp_sum\n            start = i + 1\n            \n    return total_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n-2):\n        for j in range(i+2, n):\n            sub_arr = arr[i:j+1]\n            if sum(sub_arr) % 2 == 1:\n                res += sum(sub_arr)\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        if i > 0 and i % 2 == 0:\n            sum -= arr[i-1]\n        for j in range(i+1, min(2*i+2, n)+1, 2):\n            sum += arr[j-1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    # Initialize a variable to store the sum of odd length subarrays\n    sum = 0\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Check if the current element is odd length\n        if i % 2 == 1:\n            # Initialize a variable to store the sum of the current odd length subarray\n            curr_sum = 0\n\n            # Loop through each element in the current odd length subarray\n            for j in range(i, len(arr), 2):\n                # Add the current element to the sum of the current odd length subarray\n                curr_sum += arr[j]\n\n            # Add the sum of the current odd length subarray to the sum of all odd length subarrays\n            sum += curr_sum\n\n    # Return the sum of all odd length subarrays\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if (j-i+1) % 2!= 0:\n                sum += sum_array(arr[i:j+1])\n    return sum\n\ndef sum_array(arr):\n    '''\n    Helper function to calculate the sum of an array.\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    total_sum = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i] % 2!= 0:\n            left_sum = 0\n            right_sum = 0\n            for j in range(i, len(arr)):\n                if j == len(arr) - 1 or arr[j] % 2!= 0:\n                    right_sum = sum(arr[i:j+1])\n                    total_sum += left_sum + right_sum\n                else:\n                    right_sum += arr[j]\n                if arr[j] % 2!= 0:\n                    left_sum += arr[j]\n    return total_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_len = 0\n    n = len(arr)\n    for i in range(1, n):\n        for j in range(i, n):\n            if j-i+1 % 2 == 1:\n                sum_odd_len += arr[j] - arr[i-1]\n    return sum_odd_len"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum = 0\n    for i in range(n):\n        if i < n-1:\n            if arr[i] % 2!= 0 and arr[i+1] % 2!= 0:\n                count += 1\n                sum += arr[i] + arr[i+1]\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \n    r, g, b: int, int, int\n            RGB color components (0-255)\n    \n    Returns:\n    h, s, v: float, float, float\n             Hue (0-360), Saturation (0-1), Value (0-1)\n    \"\"\"\n\n    # Convert to floats and ensure range 0-1\n    r, g, b = [float(x) / 255 for x in [r, g, b]]\n\n    # Find the minimum and maximum values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Calculate the delta value\n    delta = max_val - min_val\n\n    # Calculate the hue\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = 60 * ((g - b) / delta)\n    elif max_val == g:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n\n    # Calculate the saturation\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    # Calculate the value\n    v = max_val\n\n    # Convert to hsv values\n    h = h % 360\n    s = s if s > 0 else 0.000001\n    v = v if v > 0 else 0.000001\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes RGB values as input and returns HSV values in the form of tuples.\n    \"\"\"\n    \n    # calculate maximum and minimum values of RGB and HSV\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    \n    # calculate delta between maximum and minimum values\n    delta = max_rgb - min_rgb\n    \n    # calculate value of HSV based on delta value\n    if delta == 0:\n        h = 0\n        s = 0\n    elif max_rgb == r:\n        h = (g - b) / delta\n    elif max_rgb == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    # normalize HSV values\n    h = h / 6\n    \n    # calculate value of S and V based on HSV and delta values\n    if delta == 0:\n        s = 0\n        v = max_rgb\n    else:\n        s = delta / max_rgb\n        v = max_rgb\n    \n    # return HSV values as tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val\n    d = max_val - min_val\n    if max_val!= 0:\n        s = d / max_val\n    if max_val == r:\n        h = (g - b) / d + (g < b) * 6\n    elif max_val == g:\n        h = (b - r) / d + 2\n    else:\n        h = (r - g) / d + 4\n    h /= 6\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    Parameters:\n    r (int): Red color component.\n    g (int): Green color component.\n    b (int): Blue color component.\n\n    Returns:\n    h (float): Hue value in degrees.\n    s (float): Saturation value in percentage.\n    v (float): Value value in percentage.\n    \"\"\"\n\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    delta = max_c - min_c\n\n    if max_c == min_c:\n        h = 0.0\n        s = 0.0\n    else:\n        if max_c == r:\n            h = (g - b) / delta\n        elif max_c == g:\n            h = 2.0 + (b - r) / delta\n        elif max_c == b:\n            h = 4.0 + (r - g) / delta\n\n        h *= 60.0\n\n        if h < 0.0:\n            h += 360.0\n\n        if delta == 0.0:\n            s = 0.0\n        else:\n            s = delta / max_c\n\n    v = max_c * 100.0\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts an RGB color to HSV color model\n    \n    Args:\n        r (int): Red value of the color (0-255)\n        g (int): Green value of the color (0-255)\n        b (int): Blue value of the color (0-255)\n        \n    Returns:\n        h (float): Hue value of the color (0-360)\n        s (float): Saturation value of the color (0-1)\n        v (float): Value of the color (0-1)\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    cmin = min(r, g, b)\n    cmax = max(r, g, b)\n    delta = cmax - cmin\n    \n    h = 0\n    s = 0\n    \n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = 60 * ((g - b) / delta)\n    elif cmax == g:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n    \n    if h < 0:\n        h += 360\n    \n    v = cmax\n    \n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * cmin - 1))\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Calculate the minimum and maximum values\n    min_value = min(r, g, b)\n    max_value = max(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    delta = max_value - min_value\n\n    # Calculate the value of the hue\n    if delta == 0:\n        hue = 0\n    elif max_value == r:\n        hue = ((g - b) / delta) % 6\n    elif max_value == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    # Calculate the value of the saturation\n    if max_value == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_value\n\n    # Calculate the value of the value\n    value = max_value\n\n    # Calculate the value of the brightness\n    brightness = int(value * 255)\n\n    return (hue, saturation, value, brightness)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Normalize the values to 0-1 range\n    r = r/255\n    g = g/255\n    b = b/255\n\n    # Find the max and min values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the difference between max and min values\n    delta = max_val - min_val\n\n    # Calculate the hue and saturation\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    hue = hue % 6\n\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    # Convert the values to the range 0-1\n    hue = hue / 6\n    saturation = saturation / max_val\n\n    return hue, saturation, max_val"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to floating point values\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Find the greatest color component\n    max_color = max(r, g, b)\n\n    # Find the second greatest color component\n    if max_color == r:\n        second_max = g\n    elif max_color == g:\n        second_max = b\n    else:\n        second_max = r\n\n    # Find the delta between the greatest and second greatest color component\n    delta = max_color - second_max\n\n    # Calculate the hue value\n    if delta == 0:\n        hue = 0\n    elif max_color == r:\n        hue = 60 * (((g - b) / delta) % 6)\n    elif max_color == g:\n        hue = 60 * (((b - r) / delta) + 2)\n    else:\n        hue = 60 * (((r - g) / delta) + 4)\n\n    # Calculate the saturation and value values\n    if max_color == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_color\n\n    value = max_color\n\n    # Convert the hue value to degrees\n    hue = hue if hue < 0 else hue\n    hue = hue if hue > 360 else hue\n\n    # Convert the hue value to degrees\n    saturation = saturation if saturation < 0 else saturation\n    saturation = saturation if saturation > 1 else saturation\n    value = value if value < 0 else value\n    value = value if value > 1 else value\n\n    # Return the hsv values in a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r,g,b to float values between 0 and 1\n    r, g, b = float(r)/255, float(g)/255, float(b)/255\n\n    # Calculate the maximum and minimum values in the rgb color\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the chroma value\n    chroma = max_value - min_value\n\n    # Calculate the hue value\n    if chroma == 0:\n        hue = 0\n    elif max_value == r:\n        hue = (g - b) / chroma\n    elif max_value == g:\n        hue = 2 + (b - r) / chroma\n    else:\n        hue = 4 + (r - g) / chroma\n\n    hue = hue * 60\n\n    # Calculate the saturation value\n    if chroma == 0:\n        saturation = 0\n    elif chroma == max_value:\n        saturation = 0\n    else:\n        saturation = chroma / max_value\n\n    # Calculate the value value\n    value = max_value\n\n    # Convert hue and saturation to degrees and percentages\n    hue, saturation, value = hue, saturation * 100, value * 100\n\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to fractions\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    # Find the greatest and smallest color values\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n\n    # Calculate the hue, saturation, and value\n    if max_color == min_color:\n        hue = 0\n        saturation = 0\n    else:\n        if r == max_color:\n            hue = (g - b) / (max_color - min_color)\n        elif g == max_color:\n            hue = 2 + (b - r) / (max_color - min_color)\n        elif b == max_color:\n            hue = 4 + (r - g) / (max_color - min_color)\n\n        hue = hue / 6\n\n        if hue < 0:\n            hue = hue + 1\n\n        saturation = (max_color - min_color) / max_color\n\n    value = max_color\n\n    # Convert HSV values to hexadecimal format\n    hsv = [(hue*255)%256, saturation*255, value*255]\n    return hsv"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if even_count!= 0 and odd_count!= 0:\n        return list1[0] * list1[-1]\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n            \n    if even_count > 0 and odd_count > 0:\n        result = even_product * odd_product\n        return result\n    else:\n        return \"There are no even and odd numbers in the list.\""
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n            \n    product = even_num * odd_num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            product *= num\n            even_count = 0\n            odd_count = 0\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n\n    # Initialize variables to store even and odd numbers\n    even_num = 0\n    odd_num = 0\n\n    # Iterate through the list and find the first even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n\n    # Calculate and return the product of even and odd numbers\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list of integers as input and returns the product of the first even and odd numbers of the list.\n    '''\n    count = 0\n    for num in lst:\n        if num % 2 == 0:\n            count += 1\n            if count == 2:\n                break\n        else:\n            count = 0\n    return num * (2 - count)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if even_count > 0 and odd_count > 0:\n        product = list1[0] * list1[1]\n        return product\n    else:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert string to list of integers\n    lst = [int(i) for i in test_str.split()]\n    # convert list of integers to tuple\n    int_tuple = tuple(lst)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of substrings\n    substrings = [s.strip() for s in test_str.split(',')]\n    # Initialize an empty list to store the converted integers\n    converted_ints = []\n    # Loop through the substrings and convert each substring to an integer\n    for substring in substrings:\n        # Check if the substring is an integer\n        try:\n            # Convert the substring to an integer and append it to the list of converted integers\n            converted_ints.append(int(substring))\n        except ValueError:\n            # If the substring is not an integer, ignore it and move on to the next substring\n            continue\n    # Return the list of converted integers\n    return tuple(converted_ints)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    split_str = test_str.split(',')\n\n    # Create a list to store the converted integers\n    int_list = []\n\n    # Iterate through the list of strings\n    for i in split_str:\n        # Convert the string to an integer\n        int_num = int(i)\n        # Add the integer to the list of integers\n        int_list.append(int_num)\n\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    # Return the tuple of integers\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_tuple = test_str.split(',')\n    int_tuple = tuple(map(int, str_tuple))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for char in test_str:\n        if char.isdigit():\n            int_tuple += (int(char),)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    int_tuple = ()\n    for item in test_str:\n        try:\n            int_tuple += (int(item),)\n        except ValueError:\n            pass\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for value in test_str:\n        if isinstance(value, str):\n            try:\n                result.append(int(value))\n            except ValueError:\n                continue\n        else:\n            try:\n                result.append(float(value))\n            except ValueError:\n                continue\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # Split the tuple string by comma\n        test_tuple = tuple(map(int, test_str.split(',')))\n        # Return the integer tuple\n        return test_tuple\n    except ValueError:\n        # If there is any ValueError, return None\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the tuple string to a list of strings\n    str_list = list(test_str)\n\n    # Initialize an empty integer tuple\n    int_tuple = ()\n\n    # Loop through each character in the list\n    for char in str_list:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Convert the character to an integer and append it to the integer tuple\n            int_tuple += (int(char),)\n\n    # Return the integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma and space and then convert each element to integer\n    test_tuple = tuple(int(x) for x in test_str.split(','))\n    return test_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    if idx < len(a) and a[idx] == x:\n        return idx\n    else:\n        return -1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index, None\n    elif index == 0:\n        return 0, None\n    else:\n        return index - 1, a[index - 1]"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    # Find the position of the rightmost element greater than or equal to x\n    i = bisect.bisect_left(a, x)\n    # If x is already in the list, return its index\n    if i!= len(a) and a[i] == x:\n        return i\n    # Otherwise, insert x at the position of the rightmost element greater than or equal to x\n    j = bisect.bisect_right(a, x)\n    return j"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): a sorted list of integers\n    x (int): an integer to be searched for in the sorted list\n\n    Returns:\n    int: the right insertion point for the given value x in the sorted list a.\n\n    \"\"\"\n    idx = bisect.bisect_right(a, x)\n    return idx"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # use bisect_right to find the index of the rightmost element greater than or equal to x\n    index = bisect.bisect_right(a, x)\n    # if x is greater than or equal to the last element in the list, return the index\n    if index == len(a):\n        return index\n    # if x is smaller than the last element in the list, return the index of the next element\n    elif a[index-1] < x:\n        return index\n    # otherwise, we need to find the index of the smallest element greater than or equal to x\n    else:\n        # loop through the list starting from the right until we find the index of the smallest element greater than or equal to x\n        for i in range(index-1, -1, -1):\n            if a[i] >= x:\n                return i\n        # if we don't find the index of the smallest element greater than or equal to x, return None\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\s*b{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'[ab][a]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b{3})'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    matches = re.findall(pattern, text, re.DOTALL)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=b{3})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"ab{3}\"\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_list, test_str)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list + (test_str,))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_list = tuple(test_list)\n    # Convert the string to a tuple\n    new_str = tuple(test_str)\n    # Combine the two tuples using the + operator\n    new_tuple = new_list + new_str\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the given list to a tuple\n    new_list = tuple(test_list)\n    # Concatenate the given string with the list as a tuple\n    new_tuple = test_str + new_list\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # concatenate the two tuples\n    new_tuple = test_tuple + (test_str,)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists and strings\n    combined_list = test_list + [test_str]\n\n    # Convert the combined list to a tuple\n    new_tuple = tuple(combined_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + str(num) for num in test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # combine the two lists into a single list using the + operator\n    combined_list = test_list + [test_str]\n    # convert the combined list into a tuple using the tuple() function\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a single list\n    combined_list = test_list + [test_str]\n    # Create a new tuple from the combined list\n    new_tuple = tuple(combined_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    \n    if even_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for num in nums[i:]:\n                if num % 2 == 0:\n                    count += 1\n                if count > len(nums) // 2:\n                    return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        count += nums[i] // 2  # Check whether the number of even numbers in the even index is even\n        if count % 2 == 1:  # If the count is odd, the even index contains odd numbers\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if not any(nums[i:i+2] % 2 == 0 for j in range(i, len(nums), 2)):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count > 2:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_index = 0\n    even_count = 0\n    \n    for num in nums:\n        if num % 2 == 0:\n            if even_index % 2 == 0:\n                even_count += 1\n        else:\n            even_index += 1\n    \n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(remove_nested(item) for item in test_tup)\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if type(item) not in [list, tuple]:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    flattened_list = [item for sublist in test_tup for item in sublist]\n    return tuple(flattened_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                result.append(subitem)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize empty list to store the tuples\n    new_list = []\n    # Iterate through the list of tuples\n    for i in range(len(test_tup)):\n        # Check if the current tuple is a tuple or not\n        if isinstance(test_tup[i], tuple):\n            # If it is a tuple, recursively call the function\n            new_list += remove_nested(test_tup[i])\n        # If it's not a tuple, add it to the new list\n        else:\n            new_list.append(test_tup[i])\n    # Return the new list without the tuples\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_tup += remove_nested(item)\n        else:\n            flat_tup.append(item)\n    return flat_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Create a new list to store the flattened tuples\n    flattened = []\n    # Loop through the tuples in the input tuple\n    for tup in test_tup:\n        # If the nested tuple is not empty, recursively call the function on it\n        if isinstance(tup, tuple):\n            flattened.extend(remove_nested(tup))\n        else:\n            # If the nested tuple is empty, add the value to the flattened list\n            flattened.append(tup)\n    # Return the flattened list\n    return flattened"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list as input and returns the number of lists in the list.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_lists(n):\n    count = 0\n    for i in range(n):\n        if isinstance(input_list[i], list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=len(arr)\n    for i in range(l-1,-1,-1):\n        if arr[i]==x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the index of the first element greater than x\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > x:\n            right = mid\n        else:\n            left = mid + 1\n\n    # If the element is not found, return -1\n    if arr[left]!= x:\n        return -1\n\n    # If the element is found, return its index\n    for i in range(len(arr)):\n        if arr[i] == x and i!= left:\n            return i\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr)-1\n    while left <= right:\n        mid = (left+right)//2\n        if arr[mid] == x:\n            while mid+1 < len(arr) and arr[mid+1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] > x:\n            right = mid-1\n        else:\n            left = mid+1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Finding the index of the last occurrence of the element in the array\n    index = arr.index(x)\n    # Finding the last position of the element in the array\n    while arr[index-1]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if arr[0] == x:\n        return 0\n    i = 1\n    while i < len(arr):\n        if arr[i] == x:\n            return i\n        elif arr[i] < x:\n            i += 1\n        else:\n            return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr == []:\n        return -1\n    \n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid == len(arr) - 1 or arr[mid + 1]!= x:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while arr[i] > x and i >= 0:\n        i -= 1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # initialize the last position to -1\n    last_position = -1\n    \n    # loop through the array\n    for i in range(len(arr)):\n        # if the current element is equal to the searched element\n        if arr[i] == x:\n            # set the last position to the current index\n            last_position = i\n    \n    # return the last position\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the first and last index to the first and last indices of the array\n    first = 0\n    last = len(arr) - 1\n\n    # Find the middle index of the array\n    mid = (first + last) // 2\n\n    # Compare the middle element of the array with the element to be searched\n    if arr[mid] == x:\n        # If the middle element is equal to the element to be searched,\n        # then return the middle index as the last position\n        return mid\n\n    # If the middle element is less than the element to be searched,\n    # then the element must be in the right half of the array\n    elif arr[mid] < x:\n        # If the first element of the right half of the array is equal to the element to be searched,\n        # then the element must be at the last position in the array\n        if arr[first] == x:\n            return len(arr) - 1\n\n        # If the first element of the right half of the array is greater than the element to be searched,\n        # then the element must be in the left half of the array\n        else:\n            # Set the first index to the middle index plus 1\n            first = mid + 1\n\n            # Recursively find the last position of the element in the left half of the array\n            return last(arr, x, first)\n\n    # If the middle element is greater than the element to be searched,\n    # then the element must be in the left half of the array\n    else:\n        # If the last element of the left half of the array is equal to the element to be searched,\n        # then the element must be at the first position in the array\n        if arr[last] == x:\n            return 0\n\n        # If the last element of the left half of the array is less than the element to be searched,\n        # then the element must be in the right half of the array\n        else:\n            # Set the last index to the middle index minus 1\n            last = mid - 1\n\n            # Recursively find the last position of the element in the right half of the array\n            return last(arr, x, last)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?i)a.*?b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    result = re.match(pattern, text)\n    if result:\n        print(\"Match found!\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a).*?(?=b)'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a.+b'\n    match = re.search(pattern, text)\n    \n    if match:\n        print(\"The pattern '{}' matches in the text '{}'\".format(pattern, text))\n        print(\"The matched substring is '{}'.\".format(match.group()))\n    else:\n        print(\"The pattern '{}' does not match in the text '{}'\".format(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=a)([^\\n]*)b(?=\\n)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'\\ba[^\\s\\n]*b\\b')\n    match = pattern.search(text)\n    \n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    This function takes a dictionary as input and returns the sum of all the items in the dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range 1 to n.\n    '''\n    # initialize the sum to zero\n    total = 0\n    \n    # loop through the range 1 to n\n    for i in range(1, n+1):\n        # check if i is odd\n        if i % 2!= 0:\n            # add i to the sum\n            total += i\n    \n    # return the sum\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0 \n    for i in range(1, n+1, 2): \n        sum += i \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if l < 1 or r < 1:\n        return \"Error: l and r must be positive integers.\"\n    elif l > r:\n        return \"Error: l must be less than or equal to r.\"\n    else:\n        return sum([x for x in range(l, r+1) if x % 2!= 0])"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # input the lower and upper limit of the range\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n\n    # initialize the sum variable\n    total = 0\n\n    # loop through the range from l to r and add the odd numbers to the sum\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n\n    # return the sum of all odd numbers in the range\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    s = 0\n    while l <= r:\n        if l % 2!= 0:\n            s += l\n        l += 1\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Get the value of l and r from user\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n\n    # Initialize a variable to store the sum of odd numbers within the range\n    sum_odd = 0\n\n    # Loop through all odd numbers within the range and add them to the sum\n    for i in range(l, r+1, 2):\n        sum_odd += i\n\n    # Return the sum of odd numbers\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n # Set the initial range as 1 to n\n    sum_odd = 0 # Initialize the sum of odd natural numbers as 0\n    while l <= r: # Loop while the range is within the range of l to r\n        if l % 2!= 0: # If l is odd\n            sum_odd += l # Add l to the sum of odd natural numbers\n        l += 1 # Increment the loop variable to the next natural number\n    return sum_odd # Return the sum of odd natural numbers"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr, index=0, sum=0):\n    '''\n    This is a recursive function to find the sum of an array.\n\n    Args:\n        arr (list): The list of numbers to be summed.\n        index (int): The current index of the list to be summed.\n        sum (int): The current sum of the list being summed.\n\n    Returns:\n        int: The sum of the array.\n    '''\n    if index == len(arr):\n        return sum\n    else:\n        return _sum(arr, index + 1, sum + arr[index])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0  \n    for num in arr:  \n        total += num  \n    return total  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all its elements.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr, index=0, sum=0):\n    if index == len(arr):\n        return sum\n    else:\n        return _sum(arr, index+1, sum+arr[index])\n\ndef find_sum(arr):\n    return _sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to rotate by\n    num_bits = 32\n    while (d > num_bits):\n        d -= num_bits\n\n    # Calculate the number of bits to rotate the number to the right by\n    num_bits = d\n\n    # Calculate the number of bits to rotate the number to the left by\n    rotate_bits = num_bits - d\n\n    # Rotate the number to the right by rotate_bits bits\n    n_right = n >> rotate_bits\n\n    # Rotate the number to the left by d bits\n    n_left = (n << d) & ((1 << num_bits) - 1)\n\n    # Combine the rotated numbers\n    return n_right | n_left"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Extract the least significant d bits and the remaining bits\n    least_significant_bits = (n & ((1 << d) - 1))\n    remaining_bits = n >> d\n\n    # Shift the remaining bits to the left by d bits\n    rotated_bits = remaining_bits << d\n\n    # Combine the least significant bits with the rotated bits\n    rotated_number = least_significant_bits | rotated_bits\n\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function takes two arguments, n (the number to be rotated) and d (the number of bits to rotate left).\n    It returns the rotated number.\n    \"\"\"\n    # Convert the given number to binary\n    num_binary = bin(n)[2:]\n    # Pad the binary number with zeros to make it 32 bits long\n    num_binary = '0'*(32-len(num_binary)) + num_binary\n    # Extract the last d bits (starting from the right)\n    rotated_bits = num_binary[-d:]\n    # Shift the bits to the left by d and append the rotated bits to the left\n    rotated_num = num_binary[:len(num_binary)-d] + rotated_bits\n    # Convert the rotated number back to integer\n    rotated_num = int(rotated_num, 2)\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 31) - 1  # 32 bit mask\n    d = d % 32             # d is in range [0,31]\n    return (n << d) | (n >> (32 - d))  # use bitwise operations to rotate bits\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # calculate the number of bits to shift\n    shift = 32 - d\n    # shift the number to the left by the number of bits to shift\n    result = n << shift\n    # set the most significant bit of the result to the least significant bit of the original number\n    result |= (n >> d) & ((1 << d) - 1)\n    return result\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function rotates the bits of a given number to the left by the specified number of bits.\n    \n    Parameters:\n    n (int): the number whose bits are to be rotated.\n    d (int): the number of bits to rotate the bits by.\n    \n    Returns:\n    int: the rotated number.\n    \"\"\"\n    \n    # Bitwise left shift operator\n    return ((n << d) & 0xFFFFFFFF) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the binary representation of the number\n    n_bin = bin(n)[2:]\n    # Pad the binary representation with zeros to make it of length d\n    n_bin = '0' * (d - len(n_bin)) + n_bin\n    # Convert the binary representation back to an integer\n    n = int(n_bin, 2)\n    # Perform the left rotation\n    n = n << d | n >> (32 - d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # check if d is non-negative and less than the width of the number (4 bytes)\n    if d >= 32 or d < 0:\n        raise ValueError(\"Invalid input. d must be non-negative and less than the width of the number.\")\n    # shift the bits to the left by d bits\n    shifted = n << d\n    # shift the remaining bits to the right by the width of the number (4 bytes) - d bits\n    shifted_right = n >> (32 - d)\n    # add the shifted right bits to the shifted bits\n    result = shifted | shifted_right\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # mask = 0xffffffff    # 0xffffffff is used to get the last 32 bits of the number\n    mask = 0xffffffff    # 0xffffffff is used to get the last 32 bits of the number\n    mask_shifted = mask << d\n    result = (n << d) | (n >> (32 - d))\n    result = result & mask_shifted    # Mask the result with the shifted mask\n    return result"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expression to remove all whitespace characters\n    text = re.sub(r'\\s+','', text)\n    # remove leading and trailing spaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all whitespaces with an empty string\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    # Replace all whitespaces with a single space\n    text = re.sub('\\s+','', text)\n    # Remove leading and trailing spaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text).strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    # create a set to store the numbers\n    numbers = set()\n    # add the input numbers to the set\n    numbers.add(x)\n    numbers.add(y)\n    numbers.add(z)\n    # count the number of equal numbers in the set\n    count = len(numbers)\n    # return the count\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(max(x, y, z), min(x, y, z) - 1, -1):\n        if x == i or y == i or z == i:\n            count += 1\n            if count == 2:\n                return i\n    return None"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(3):\n        for j in range(3):\n            if i!= j:\n                for k in range(3):\n                    if k!= i and k!= j:\n                        if x == y == z:\n                            count += 1\n                            break\n                        elif x == y!= z or x!= y == z:\n                            count += 1\n                            break\n                        elif x!= y!= z and x!= y!= z:\n                            count += 1\n                            break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Calculate the median of the array\n    mid = n // 2\n    if n % 2 == 0:\n        median = (arr[mid-1] + arr[mid]) / 2\n    else:\n        median = arr[mid]\n    # Calculate the number of rotations required\n    rotations = 0\n    while median > arr[0]:\n        rotations += 1\n        median = arr[0]\n        for i in range(1, n):\n            if arr[i] > median:\n                median = arr[i]\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        # find the largest element on the left side of the current element\n        left = i\n        while left > 0 and arr[left-1] > arr[left]:\n            left -= 1\n        # find the largest element on the right side of the current element\n        right = i\n        while right < n-1 and arr[right+1] > arr[right]:\n            right += 1\n        # if the left and right pointers cross, then the array is sorted and we don't need to rotate\n        if left > right:\n            return count\n        # rotate the array\n        arr[left], arr[right] = arr[right], arr[left]\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    # First element is sorted\n    if arr[0] <= arr[n-1]:\n        return 0\n\n    # Count the number of rotations\n    for i in range(1, n-1):\n        if arr[i] <= arr[i-1] and arr[i] <= arr[i+1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Find the largest element in the array\n    max_element = max(arr)\n    # If all elements are equal, there is no rotation required\n    if max_element == min(arr):\n        return 0\n    \n    # If the array is already sorted, there is no rotation required\n    if all(arr[i] <= arr[i+1] for i in range(n-1)):\n        return 0\n    \n    # Initialize variables to keep track of the number of rotations and the smallest element\n    rotations = 0\n    min_element = min(arr)\n    # Loop through the array from the end to the beginning\n    for i in range(n-1, -1, -1):\n        # If the current element is greater than the smallest element, there is a rotation\n        if arr[i] > min_element:\n            rotations += 1\n            # Update the smallest element\n            min_element = arr[i]\n    \n    # Return the number of rotations\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Calculate the difference between the maximum and minimum elements in the array\n    diff = max(arr) - min(arr)\n\n    # If the difference is greater than 1, the array is not sorted and we need to rotate it\n    if diff > 1:\n        return n - 1\n\n    # If the difference is equal to or less than 1, we can use a sorting algorithm to sort the array\n    else:\n        # Convert the array to a list to make it mutable\n        arr = list(arr)\n\n        # Use the insertion sort algorithm to sort the array in ascending order\n        for i in range(1, len(arr)):\n            j = i\n            while j > 0 and arr[j-1] > arr[j]:\n                arr[j-1], arr[j] = arr[j], arr[j-1]\n                j -= 1\n\n        # Return the number of rotations required to generate the sorted array\n        return len(arr) - n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Counting inversions in the first half\n    left = 0\n    right = n // 2\n    inversion_count = 0\n    while left < right:\n        i = left\n        j = right\n        temp = arr[left]\n        while i < j:\n            while i < j and arr[j] >= temp:\n                j -= 1\n            arr[i] = arr[j]\n            while i < j and arr[i] <= temp:\n                i += 1\n            arr[j] = arr[i]\n        inversion_count += (j - left)\n        left += 1\n        right -= 1\n\n    # Counting inversions in the second half\n    left = n // 2\n    right = n - 1\n    while left < right:\n        i = left\n        j = right\n        temp = arr[left]\n        while i < j:\n            while i < j and arr[j] >= temp:\n                j -= 1\n            arr[i] = arr[j]\n            while i < j and arr[i] <= temp:\n                i += 1\n            arr[j] = arr[i]\n        inversion_count += (j - left + 1)\n        left += 1\n        right -= 1\n\n    return inversion_count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    # Traverse the array from the end to the beginning\n    for i in range(n-1, -1, -1):\n        # Compare each element with its adjacent element\n        if arr[i] < arr[i+1]:\n            return count + 1\n        count += 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    # find the smallest element\n    smallest = arr[0]\n    for i in range(1, n):\n        if arr[i] < smallest:\n            smallest = arr[i]\n    # find the largest element\n    largest = arr[0]\n    for i in range(1, n):\n        if arr[i] > largest:\n            largest = arr[i]\n    # find the mid index\n    mid = n // 2\n    # check if the array is already sorted\n    if smallest == largest:\n        return 0\n    # check if the array is already sorted in reverse\n    if smallest == arr[n-1] and largest == arr[0]:\n        return 0\n    # check if the array is already sorted in reverse\n    if smallest == arr[0] and largest == arr[n-1]:\n        return 0\n    # check if the array is already sorted in reverse\n    if arr[mid-1] <= arr[mid] <= arr[mid+1]:\n        return 0\n    # rotate the array\n    if smallest < arr[mid]:\n        # rotate the array to the right\n        for i in range(mid, n):\n            arr[i-mid], arr[i] = arr[i], arr[i-mid]\n        # check if the array is sorted\n        if arr[mid] <= arr[mid+1]:\n            return 0\n        else:\n            return 1\n    else:\n        # rotate the array to the left\n        for i in range(mid):\n            arr[i], arr[i+mid] = arr[i+mid], arr[i]\n        # check if the array is sorted\n        if arr[mid] >= arr[mid-1]:\n            return 0\n        else:\n            return 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    # check if the array is already sorted\n    if sorted(arr) == arr:\n        return 0\n    \n    # calculate the difference between the largest and smallest element\n    diff = max(arr) - min(arr)\n    \n    # initialize the count of rotations to 0\n    count = 0\n    \n    # iterate over the array and find the first element that is greater than the difference\n    for i in range(len(arr)):\n        if arr[i] > diff:\n            count += 1\n            break\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                return j - i"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n\n    # Convert the number to a floating-point value and store it in x\n    x = float(n)\n\n    # Check if x is an integer using the modulo operator (%)\n    if x % 1 == 0:\n        # x is an integer\n        # Calculate the square root of x using the formula for square roots in Python\n        sqrt_x = x ** 0.5\n\n        # Check if the square root of x is an integer using the modulo operator again\n        if sqrt_x % 1 == 0:\n            # x is a perfect square\n            return True\n        else:\n            # x is not a perfect square\n            return False\n    else:\n        # x is not an integer\n        # x is not a perfect square\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 0\n    j = n\n    while i <= j:\n        mid = (i + j) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            i = mid + 1\n        else:\n            j = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a perfect square, False otherwise.\n    \"\"\"\n    root = int(n ** 0.5)\n    if n == root ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Find the square root of the given number\n    square_root = int(n ** 0.5)\n\n    # Check whether the square root is an integer or not\n    if square_root ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Find the square root of n using the Newton-Raphson method.\n    x = n / 2\n    y = n / x\n    while abs(x - y) > 1e-6:\n        x = y\n        y = (x + n / x) / 2\n    \n    # Check if the square root is an integer or not.\n    if y == int(y):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks if the given number is a perfect square or not. \n    It returns True if it is and False otherwise.\n    '''\n    if n < 0:\n        return False\n    # Check if the number is a square number\n    for i in range(int(n**0.5)+1):\n        if n == i**2:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Find the square root of n using the Babylonian method\n    x = n\n    y = x\n    while x!= y:\n        x = (x + n/x) / 2\n        y = x\n\n    # Check if the square root is an integer\n    if int(x) * int(x) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    left = 1\n    right = n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks whether the given number is a perfect square or not.\n    '''\n    root = int(n**0.5)\n    if root**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes a number and returns True if it is a perfect square, else False.\n    \"\"\"\n    import math\n    \n    # Check if n is less than 2\n    if n < 2:\n        return False\n    \n    # Use the formula to check if n is a perfect square or not\n    d = math.sqrt(n)\n    if d.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of integers as input and returns True if the product of all the integers in the list is even,\n    and False otherwise.\n    '''\n\n    # Initialize a variable to store the product of all numbers in the list\n    product = 1\n\n    # Loop through each number in the list\n    for num in arr: \n        # Multiply the current number with the product variable\n        product *= num\n\n    # Check if the product is even or odd using the modulo operator\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # Initialize the product variable\n    product = 1\n\n    # Iterate through the list\n    for num in arr:\n        \n        # Multiply the current number with the product\n        product *= num\n\n    # Check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i == 0 and j == 0:\n                max_sum = lists[i][j]\n                max_list = [lists[i][j]]\n            else:\n                temp_sum = max_sum + lists[i][j]\n                if temp_sum > max_sum:\n                    max_sum = temp_sum\n                    max_list = [[lists[i][j]], max_list]\n                elif temp_sum == max_sum:\n                    max_list[0].append(lists[i][j])\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for l in lists:\n        sum_ = 0\n        for num in l:\n            sum_ += num\n        if sum_ > max_sum:\n            max_sum = sum_\n            max_list = l\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as an input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = 0\n    max_list = []\n    \n    # Loop through each list in the input list of lists\n    for i in range(len(lists)):\n        # Initialize variables\n        current_sum = 0\n        current_list = []\n        \n        # Loop through each element in the current list\n        for j in range(len(lists[i])):\n            # Add the current element to the running sum\n            current_sum += lists[i][j]\n            \n            # Add the current element to the current list\n            current_list.append(lists[i][j])\n        \n        # If the current sum is greater than the current maximum sum, update the variables\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = current_list\n    \n    # Return the list in a list of lists whose sum of elements is the highest\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_lists = []\n    \n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            current_sum = sum(lists[i]) + sum(lists[j])\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_lists = [lists[i], lists[j]]\n    \n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    result = []\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = [sublist]\n        elif current_sum == max_sum:\n            result.append(sublist)\n    \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > 0:\n                total = sum(lists[k][j] for k in range(len(lists)))\n                if total > max_sum:\n                    max_sum = total\n                    max_list = [lists[i][j]]\n                elif total == max_sum:\n                    max_list.append(lists[i][j])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        sum_list = sum(lists[i])\n        if sum_list > max_sum:\n            max_sum = sum_list\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    best_combination = None\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            for k in range(len(lists[i][j])):\n                subset_sum = sum(lists[i][j][k])\n                if subset_sum > max_sum:\n                    max_sum = subset_sum\n                    best_combination = [(i, j, k)]\n                elif subset_sum == max_sum:\n                    best_combination.append((i, j, k))\n    return best_combination"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Create a list of lists of lists\n    nested_list = [list(sublist) for sublist in lists]\n    # Flatten the nested list\n    flattened_list = [item for sublist in nested_list for item in sublist]\n    # Calculate the sum of all elements in the flattened list\n    total_sum = sum(flattened_list)\n    # Create a dictionary to store the sum and the index of the list\n    index_dict = {}\n    # Iterate over the flattened list and calculate the sum for each index\n    for i, item in enumerate(flattened_list):\n        if i not in index_dict:\n            index_dict[i] = {\n               'sum': item,\n                'indices': [i]\n            }\n        else:\n            index_dict[i]['sum'] += item\n            index_dict[i]['indices'].append(i)\n    # Find the list with the highest sum\n    highest_sum = max(index_dict.values(), key=lambda x: x['sum'])\n    # Return the list with the highest sum\n    return highest_sum['indices']"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    curr_count = 0\n    start = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_count += 1\n        else:\n            if curr_count > max_count:\n                max_count = curr_count\n                count = curr_count\n            curr_count = 0\n        if curr_count == 0:\n            start = i + 1\n\n    if max_count > 0:\n        return test_str[start-max_count:start], max_count\n    else:\n        return test_str, 0"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Convert all characters in the string to lowercase\n    test_str = test_str.lower()\n    # Initialize variables to store maximum run and current run\n    max_run = 0\n    curr_run = 0\n    # Iterate over each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run and check if it is longer than the maximum run so far\n        if char.isupper():\n            curr_run += 1\n            if curr_run > max_run:\n                max_run = curr_run\n        # If the character is not uppercase, reset the current run\n        else:\n            curr_run = 0\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    curr_run = 0\n    # Iterate through the string\n    for char in test_str:\n        # If the character is uppercase, increment the run counter\n        if char.isupper():\n            curr_run += 1\n            # If the current run is greater than the maximum run, update the maximum run\n            if curr_run > max_run:\n                max_run = curr_run\n        else:\n            # If the character is not uppercase, reset the run counter\n            curr_run = 0\n    # Return the maximum run\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # initialize variables\n    max_run = 0\n    current_run = 0\n\n    # loop through each character in the string\n    for char in test_str:\n\n        # check if the character is uppercase\n        if char.isupper():\n\n            # if it is, check if the current run is longer\n            if current_run + 1 > max_run:\n                max_run = current_run + 1\n\n            # update the current run\n            current_run += 1\n\n        else:\n\n            # if the character is not uppercase, reset the current run\n            current_run = 0\n\n    # check if the current run is longer\n    if current_run + 1 > max_run:\n        max_run = current_run + 1\n\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_length = 1\n    current_length = 1\n    start_index = 0\n\n    # loop through each character in the string\n    for index, char in enumerate(test_str):\n        # if the current character is uppercase\n        if char.isupper():\n            # increment current_length and check if it is longer than max_length\n            if current_length + 1 > max_length:\n                max_length = current_length\n                start_index = index - max_length + 1\n            current_length += 1\n        else:\n            # if the current character is not uppercase\n            current_length = 1\n\n    # return the maximum run of uppercase characters\n    return test_str[start_index:start_index + max_length]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize max_run and current_run to 0\n    max_run = 0\n    current_run = 0\n\n    # iterate through the string\n    for char in test_str:\n        # check if the character is uppercase\n        if char.isupper():\n            # increment current_run by 1\n            current_run += 1\n            # if current_run is greater than max_run, update max_run\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            # if the character is not uppercase, reset current_run to 0\n            current_run = 0\n\n    # return max_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables to keep track of current run and maximum run\n    current_run = 0\n    max_run = 0\n    \n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is uppercase\n        if char.isupper():\n            # increment the current run\n            current_run += 1\n        else:\n            # reset the current run to 0 if the character is not uppercase\n            current_run = 0\n        \n        # update the maximum run if the current run is greater than the maximum run\n        if current_run > max_run:\n            max_run = current_run\n    \n    # return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    curr_run = 0\n    prev_char = None\n    curr_char = None\n    \n    # Iterate through the string\n    for i, char in enumerate(test_str):\n        # Check if current character is uppercase\n        if char.isupper():\n            # Check if current run is greater than the current maximum run\n            if curr_run > max_run:\n                # Update the maximum run\n                max_run = curr_run\n                # Reset the current run\n                curr_run = 1\n                # Update the previous and current characters\n                prev_char = char\n                curr_char = char\n            else:\n                # Update the current run\n                curr_run += 1\n                # Update the current character\n                curr_char = char\n        else:\n            # Reset the previous and current characters\n            prev_char = None\n            curr_char = None\n    \n    # Check if the last character was uppercase\n    if prev_char is not None and curr_char is None:\n        curr_run += 1\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    max_count = 0\n    start = 0\n    end = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            end = i\n        else:\n            count = 0\n\n        if count > max_count:\n            max_count = count\n            start = i\n\n    return test_str[start:end+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Given a list of numbers, returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Returns the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if len(tup) == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    for i in test_tup:\n        if K in i:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and returns a boolean value indicating whether each element of the second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Error: First tuple cannot have elements that are smaller than their corresponding elements in the second tuple.\")\n            return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The tuples must have the same length\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(\"The element at index\", i, \"of the first tuple is greater than or equal to the corresponding element in the second tuple\")\n            return\n    \n    print(\"All elements of the first tuple are smaller than their corresponding element in the second tuple\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two tuples is not the same.\")\n        return\n    \n    # iterate over each element in the first tuple\n    for i in range(len(test_tup1)):\n        # check if the second tuple element is smaller than the first tuple element\n        if test_tup2[i] < test_tup1[i]:\n            # if so, print a message and return False\n            print(f\"The element at index {i} of the second tuple is smaller than the element at index {i} of the first tuple.\")\n            return False\n    \n    # if no element in the second tuple is smaller than the corresponding element in the first tuple, return True\n    print(\"All elements in the second tuple are smaller than or equal to their corresponding elements in the first tuple.\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of the tuples should be same\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples should have the same length\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(f\"{test_tup2[i]} is not smaller than {test_tup1[i]}\")\n            return"
    }
]