[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Checking if both lists have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both lists should have the same length!\")\n        return\n\n    # Initializing empty set to store shared elements\n    shared_elements = set()\n\n    # Checking each element from both lists\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.add(test_tup1[i])\n\n    # Printing the shared elements\n    print(\"Shared elements:\", shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Convert the input tuples to lists and remove duplicates\n    list1 = list(set(test_tup1))\n    list2 = list(set(test_tup2))\n\n    # Compare the lists and find the shared elements\n    shared_elements = []\n    for element in list1:\n        if element in list2 and element not in shared_elements:\n            shared_elements.append(element)\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elements.add(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the intersection of the two sets\n    shared = set1.intersection(set2)\n    return list(shared)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_set = set1 & set2\n    return sorted(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_list = []\n    for item1 in test_tup1:\n        for item2 in test_tup2:\n            if item1 == item2:\n                shared_list.append(item1)\n                break\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the common elements.\n    \"\"\"\n    # Define two empty lists to store common elements\n    common_list1 = []\n    common_list2 = []\n\n    # Loop through each element of the input tuples\n    for elem in test_tup1:\n        # Check if the element is in the second tuple\n        if elem in test_tup2:\n            # If it is, add it to the common list\n            common_list1.append(elem)\n\n    for elem in test_tup2:\n        # Check if the element is in the first tuple\n        if elem in test_tup1:\n            # If it is, add it to the common list\n            common_list2.append(elem)\n\n    # Return the common elements\n    return set(common_list1) & set(common_list2)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples to sets to get unique elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the intersection of the sets\n    common_set = set1.intersection(set2)\n    # convert the intersection set back to a list and return it\n    return list(common_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup2[i] in test_tup1:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the integer is not prime, False otherwise.\n\n    A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself.\n\n    For example, 2 is a prime number, since it is greater than 1 and has no positive integer divisors other than 1 and itself.\n\n    1 is not a prime number, since it is equal to 1.\n\n    A number greater than 2 is not a prime number if it has any positive integer divisors other than 1 and itself.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    elif n == 3:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not prime,\n    and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers into a min heap\n    heap = [-num for num in nums]\n    hq.heapify(heap)\n    \n    # Pop the smallest n elements from the heap and return them as a list in descending order\n    return [-num for num in hq.nsmallest(n, heap)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Convert the list to a min heap\n    hq.heapify(nums)\n\n    # Pop the largest n numbers from the heap and reverse the order\n    largest_nums = [hq.heappop(nums) for i in range(n)]\n    largest_nums.reverse()\n\n    # Return the reversed list of largest n numbers\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    h = []\n    for num in nums:\n        if len(h) < n:\n            hq.heappush(h, num)\n        else:\n            if num > h[0]:\n                hq.heappop(h)\n                hq.heappush(h, num)\n    return h"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a heap\n    heap = hq.nlargest(n, nums)\n    # Extract the largest elements and convert them back to a list\n    return [hq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = hq.nlargest(n, nums)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap of size n\n    heap = [-num for num in nums[:n]]\n    hq.heapify(heap)\n\n    # Traverse the list of numbers, updating the min heap\n    for num in nums[n:]:\n        if num > -heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -num)\n\n    # Return the n largest numbers in descending order\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    if n > len(nums):\n        return []\n\n    # create max heap with initial numbers\n    max_heap = hq.nlargest(n, nums)\n\n    # return max heap\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max-heap of size n\n    max_heap = [-x for x in nums]\n    hq.heapify(max_heap)\n    \n    # Extract and return the n largest integers\n    return [x for x in hq.nlargest(n, max_heap)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Build a max heap of size n\n    max_heap = nums[:n]\n    hq.heapify(max_heap)\n\n    # Pop off the largest element from the heap\n    for i in range(n, len(nums)):\n        if nums[i] > max_heap[0]:\n            hq.heapreplace(max_heap, nums[i])\n\n    # Return the max heap\n    return max_heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = x ^ (x-1)\n    return diff == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Check if x is a power of two\n    if x <= 0:\n        return \"The number must be a positive integer.\"\n    \n    # If x is a power of two, check if x is a power of two in binary\n    binary_representation = bin(x)[2:] # Ignore the \"0b\" prefix\n    \n    # If binary_representation is empty, it means x is a power of two\n    if binary_representation == \"\":\n        return True\n    \n    # If binary_representation is not empty, check if the last bit of binary_representation is 1\n    if binary_representation[-1] == \"1\":\n        return False\n    \n    # If none of the above conditions are met, then x is not a power of two in binary\n    return \"The number is not a power of two in binary.\""
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    # Check if x is a power of 2\n    if x == 0 or (x & (x - 1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if x is a power of 2, False otherwise.\n    '''\n    # If the binary representation of x has only one '1', then x is a power of 2\n    if bin(x).count('1') == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1:\n        if x % 2 == 1:\n            return False\n        x //= 2\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Initialize the result variable\n    result = False\n\n    # Loop through the bits of the first number\n    for i in range(32):\n\n        # Get the first bit of the first number\n        bit1 = (x >> i) & 1\n\n        # Get the first bit of the second number\n        bit2 = (y >> i) & 1\n\n        # Compare the two bits\n        if bit1!= bit2:\n\n            # If the bits are different, set the result variable to True\n            result = True\n\n            # Break out of the loop\n            break\n\n    # Return the result variable\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    \n    count = 0\n    while x > 0:\n        count += 1\n        x = x >> 1\n        \n    if x!= 1:\n        return False\n    \n    if count > 1:\n        return True\n    \n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Use XOR operator to check whether the two numbers differ at one bit position only or not.\n    if x ^ (x >> 1)!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # convert x to binary format\n    binary_x = bin(x)[2:]\n    # check if x and binary_x have different number of bits\n    if len(binary_x)!= len(bin(x)[2:].lstrip('0')):\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('\\b\\w+\\b', text)\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words that are at least 4 characters long.\n    '''\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    \n    # Find all non-overlapping matches of the pattern in the input text\n    matches = re.finditer(pattern, text)\n    \n    # Create an empty list to store the words that meet the criteria\n    result = []\n    \n    # Iterate through the matches and append each matching word to the result list\n    for match in matches:\n        result.append(match.group())\n    \n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words which are at least 4 characters long.\n    '''\n    # Split the text into words\n    words = text.split()\n\n    # Initialize an empty list to store the long words\n    long_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is at least 4 characters long\n        if len(word) >= 4:\n            long_words.append(word)\n\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Find the squares of all the numbers in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    # Initialize two pointers, one for the starting and one for the ending of the string\n    start = 0\n    end = n-1\n    \n    # If the string is already a palindrome, then there is no rotation required\n    if str == str[::-1]:\n        return 0\n    \n    # Find the length of the longest palindrome substring that can be formed\n    max_len = 1\n    while start <= end:\n        mid = (start+end)//2\n        if str[mid-1:mid+2] == str[mid:mid+2][::-1]:\n            start = mid+1\n            max_len = max(max_len, end-start+1)\n        else:\n            end = mid-1\n            \n    # Check if the length of the longest palindrome substring is equal to the length of the original string\n    if max_len == n:\n        return 0\n    \n    # Calculate the minimum number of rotations required to get the same string\n    rotations = 0\n    while max_len > 1:\n        start = 0\n        end = max_len-1\n        max_len = 1\n        while start <= end:\n            mid = (start+end)//2\n            if str[mid-1:mid+2] == str[mid:mid+2][::-1]:\n                start = mid+1\n                max_len = max(max_len, end-start+1)\n            else:\n                end = mid-1\n        rotations += 1\n        max_len = 1\n        \n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    n = len(str)  # length of the string\n    min_rotations = 0  # minimum number of rotations required\n    \n    for i in range(1, n):  # for each character in the string\n        if str[i]!= str[0]:  # if the character is not the first character\n            for j in range(i):  # for each character in the substring starting from i\n                if str[j]!= str[0]:  # if the character is not the first character\n                    min_rotations = max(min_rotations, abs(i-j))  # update the minimum number of rotations required\n            min_rotations += 1  # increment the minimum number of rotations required\n            \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        for j in range(n-i-1):\n            if str[j] > str[j+1]:\n                str[j], str[j+1] = str[j+1], str[j]\n    return n-1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    \n    # Initialize the first character as the middle of the string\n    mid = n // 2\n    prev_mid = mid\n\n    # Initialize the count to 0\n    count = 0\n\n    # While there are enough characters to form a rotation\n    while prev_mid >= 0:\n        # Check if the substring starting from the previous mid is equal to the original string\n        if str[:prev_mid] == str[prev_mid:]:\n            # Increment the count\n            count += 1\n            # Calculate the new mid\n            prev_mid = mid - (mid - prev_mid)\n            # If the new mid is greater than or equal to the previous mid, it means that the substring\n            # starting from the new mid will form a rotation\n            if prev_mid >= 0:\n                mid = prev_mid\n        # If the substring starting from the previous mid is not equal to the original string,\n        # the current substring will not form a rotation\n        else:\n            prev_mid -= 1\n\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    # create a list of characters in the string\n    char_list = list(str)\n\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in char_list:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # create a list of tuples to store the character and its count\n    char_count_list = [(char, count) for char, count in char_count.items()]\n\n    # sort the list by the count of the character\n    char_count_list.sort(key=lambda x: x[1], reverse=True)\n\n    # create a list of characters with their counts in sorted order\n    sorted_char_count_list = [char_count_list[i][0] for i in range(len(char_count_list))]\n\n    # initialize the minimum number of rotations to 0\n    min_rotations = 0\n\n    # loop through the sorted character count list\n    for i in range(len(sorted_char_count_list)):\n        # if the character is the last character, no rotations are required\n        if i == len(sorted_char_count_list) - 1:\n            break\n\n        # if the character is the second to last character, rotate the first character to get the second character\n        if i == len(sorted_char_count_list) - 2:\n            if sorted_char_count_list[i] == sorted_char_count_list[0]:\n                min_rotations += 1\n                sorted_char_count_list[i], sorted_char_count_list[0] = sorted_char_count_list[0], sorted_char_count_list[i]\n            else:\n                break\n\n        # if the character is the third to last character, rotate the second character to get the third character\n        if i == len(sorted_char_count_list) - 3:\n            if sorted_char_count_list[i] == sorted_char_count_list[1]:\n                min_rotations += 1\n                sorted_char_count_list[i], sorted_char_count_list[1] = sorted_char_count_list[1], sorted_char_count_list[i]\n            elif sorted_char_count_list[i] == sorted_char_count_list[0]:\n                min_rotations += 1\n                sorted_char_count_list[i], sorted_char_count_list[0] = sorted_char_count_list[0], sorted_char_count_list[i]\n            else:\n                break\n\n        # if the character is the fourth to last character, rotate the third character to get the fourth character\n        if i == len(sorted_char_count_list) - 4:\n            if sorted_char_count_list[i] == sorted_char_count_list[2]:\n                min_rotations += 1\n                sorted_char_count_list[i], sorted_char_count_list[2] = sorted_char_count_list[2], sorted_char_count_list[i]\n            elif sorted_char_count_list[i] == sorted_char_count_list[1]:\n                min_rotations += 1\n                sorted_char_count_list[i], sorted_char_count_list[1] = sorted_char_count_list[1], sorted_char_count_list[i]\n            elif sorted_char_count_list[i] == sorted_char_count_list[0]:\n                min_rotations += 1\n                sorted_char_count_list[i], sorted_char_count_list[0] = sorted_char_count_list[0], sorted_char_count_list[i]\n            else:\n                break\n\n        # if the character is the fifth to last character, rotate the fourth character to get the fifth character\n        if i == len(sorted_char_count_list) - 5:\n            if sorted_char_count_list[i] == sorted_char_count_list[3]:\n                min_rotations += 1\n                sorted_char_count_list[i], sorted_char_count_list[3] = sorted_char_count_list[3], sorted_char_count_list[i]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    mod = 10**9 + 7\n\n    # Counting the frequency of each character\n    freq = [0] * 26\n    for c in str:\n        freq[ord(c) - ord('a')] += 1\n\n    # Calculate the maximum frequency\n    max_freq = 0\n    for i in range(26):\n        max_freq = max(max_freq, freq[i])\n\n    # Calculate the prime numbers between 2 and 26\n    primes = [True] * 26\n    for i in range(2, 26):\n        if primes[i]:\n            for j in range(i*i, 26, i):\n                primes[j] = False\n\n    # Create a matrix with 26 rows and n columns\n    matrix = [[0] * n for _ in range(26)]\n\n    # Initialize the matrix with the frequency of each character\n    for i in range(26):\n        for j in range(n):\n            matrix[i][j] = freq[i]\n\n    # Check for the rotations\n    rotations = 0\n    for i in range(2, 26):\n        if primes[i]:\n            if max_freq % i == 0:\n                for j in range(26):\n                    if matrix[j][0] > 0:\n                        matrix[j][0] -= 1\n                    else:\n                        matrix = rotate(matrix, i)\n                        rotations += 1\n\n    return rotations\n\ndef rotate(matrix, k):\n    n = len(matrix)\n    for _ in range(k):\n        for i in range(1, n - 1):\n            matrix[i][0], matrix[i][n - 1] = matrix[i][n - 1], matrix[i][0]\n        for j in range(1, n):\n            matrix[0][j], matrix[n - 1][j] = matrix[n - 1][j], matrix[0][j]\n        for i in range(n - 2, 0, -1):\n            matrix[i][0], matrix[i][n - 1] = matrix[i][n - 1], matrix[i][0]\n        for j in range(n - 2, 0, -1):\n            matrix[0][j], matrix[n - 1][j] = matrix[n - 1][j], matrix[0][j]\n    return matrix"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    # Create a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n\n    # Calculate the total number of distinct characters\n    total = sum(freq.values())\n\n    # If the total number of characters is even, there is no need for rotations\n    if total % 2 == 0:\n        return 0\n\n    # Find the maximum frequency of characters that can be formed by rotating the characters\n    max_freq = min(freq.values())\n\n    # If the maximum frequency is 1, there is only one rotation required\n    if max_freq == 1:\n        return 1\n\n    # Calculate the minimum number of rotations required to get the string with all characters rotated\n    rotations = 0\n    for freq_char in range(max_freq, 1, -1):\n        rotations += total // freq_char\n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    # Find the longest common prefix\n    i = 0\n    while i < n and str[i] == str[0]:\n        i += 1\n    # Check if the first i characters are the same\n    if i == n:\n        return 0\n    # Find the next character that is different\n    j = 0\n    while j < n and str[j] == str[i]:\n        j += 1\n    # The next character that is different is the pivot\n    pivot = j\n    # Make a copy of the string\n    string = str\n    # Rotate the string\n    for k in range(pivot):\n        string = string[-1] + string[:-1]\n    # Compare the rotated string with the original string\n    for k in range(i, n):\n        if string[k]!= str[k]:\n            return k - i + 1\n    return n - i + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # initialize a counter variable to keep track of number of rotations\n    count = 0\n\n    # loop through each character in the string\n    for i in range(len(str)):\n        # find the index of the character at the end of the string\n        index = len(str) - 1\n        # loop through each character in the string\n        while index >= 0:\n            # if the current character matches the character at the index, we found a rotation\n            if str[i] == str[index]:\n                break\n            # decrement the index\n            index -= 1\n        # if we found a rotation, increment the counter and break out of the loop\n        if index >= 0:\n            count += 1\n            break\n\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    if n < 2:\n        return 0\n\n    # Initialize a hash table to store the characters of the string\n    freq = {}\n    for i in range(n):\n        if str[i] not in freq:\n            freq[str[i]] = 0\n        freq[str[i]] += 1\n\n    # Traverse the string and count the frequency of each character\n    for i in range(n):\n        if freq[str[i]] > 1:\n            return 1\n\n    # If the frequency of each character is 1, then the string is already the same\n    return 0"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1) + s.replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    if len(s) < 2:\n        return s\n    else:\n        s = list(s)\n        for i in range(len(s)):\n            if s[i] == ch:\n                if i == 0:\n                    s.pop(i)\n                elif i == len(s)-1:\n                    s.pop(i)\n        return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Initialize variables\n    first_occ = 0\n    last_occ = len(s) - 1\n\n    # Find the index of the first occurrence of the character\n    while first_occ < last_occ:\n        if s[first_occ] == ch:\n            first_occ += 1\n        else:\n            break\n\n    # Find the index of the last occurrence of the character\n    while first_occ < last_occ:\n        if s[last_occ] == ch:\n            last_occ -= 1\n        else:\n            break\n\n    # If the character is not found, return the original string\n    if first_occ == last_occ:\n        return s\n\n    # Remove the first and last occurrence of the character\n    return s[:first_occ] + s[first_occ + 1:last_occ] + s[last_occ + 1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    return s[s.find(ch)+len(ch):][:-len(ch)]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Remove the first occurrence of the character from the string\n    while s.startswith(ch):\n        s = s[1:]\n    # Remove the last occurrence of the character from the string\n    while s.endswith(ch):\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes in a string and a character to remove the first and last occurrence of.\n    It returns the modified string without the first and last occurrence of the given character.\n    '''\n    # Check if the character exists in the string\n    if ch not in s:\n        return s\n    \n    # Find the indices of the first and last occurrence of the character\n    i = s.find(ch)\n    j = s.rfind(ch)\n    \n    # If the character is not found in the string, return the original string\n    if i == -1 and j == -1:\n        return s\n    \n    # Remove the first occurrence of the character\n    if i!= 0:\n        s = s[:i-1] + s[i:]\n    \n    # Remove the last occurrence of the character\n    if j!= -1 and j!= len(s)-1:\n        s = s[:j] + s[j+1:]\n    \n    # Return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        s = s[:s.index(ch)] + s[s.index(ch)+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if the character is present in the string\n    if ch in s:\n        # Split the string into a list of characters\n        lst = list(s)\n        # Remove the first occurrence of the character\n        lst.remove(ch)\n        # Remove the last occurrence of the character\n        lst.remove(ch)\n        # Join the characters back into a string and return it\n        return ''.join(lst)\n    else:\n        # Return the original string if the character is not present in the string\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence of character\n    if s.find(ch) == 0:\n        return s.replace(ch, '', 1)\n    # remove last occurrence of character\n    if s.find(ch) == len(s)-1:\n        return s.replace(ch, '', -1)\n    # remove all occurrences of character\n    else:\n        return s.replace(ch, '')"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Initialize a list to store the sorted matrix\n    sorted_M = []\n    \n    # Initialize variables to keep track of the current row and minimum sum\n    row = 0\n    min_sum = float('inf')\n    \n    # Loop through each row of the matrix\n    while row < len(M):\n        \n        # Initialize variables to keep track of the current minimum sum and its row index\n        curr_min_sum = float('inf')\n        curr_min_row = -1\n        \n        # Loop through each column in the current row\n        for col in range(len(M[row])):\n            \n            # Add the value at the current column to the sum of the current row\n            curr_sum = 0\n            for i in range(len(M[row])):\n                curr_sum += M[row][i]\n            \n            # If the sum is less than the current minimum sum, update the variables\n            if curr_sum < curr_min_sum:\n                curr_min_sum = curr_sum\n                curr_min_row = row\n        \n        # If the current minimum sum is less than the minimum sum, update the minimum sum and row index\n        if curr_min_sum < min_sum:\n            min_sum = curr_min_sum\n            row = curr_min_row\n        \n        # Add the current row to the sorted matrix\n        sorted_M.append(M[row])\n        \n        # Remove the current row from the matrix\n        del M[row]\n    \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize a variable to store the sum of each row\n    row_sums = [sum(row) for row in M]\n    # sort the row_sums in ascending order\n    row_sums.sort()\n    # use the sorted row_sums to construct the sorted matrix\n    sorted_matrix = [[0 for j in range(len(M[0]))] for i in range(len(M))]\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            sorted_matrix[i][j] = M[i][j]\n            # loop through each element in the sorted matrix and add up the sum of its row\n            for k in range(len(row_sums)):\n                if k < i:\n                    sorted_matrix[i][j] += row_sums[k]\n    # return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n\n    # Create a list to store the sorted matrix\n    sorted_M = []\n\n    # Loop through each row and column of the matrix\n    for i in range(rows):\n        for j in range(cols):\n\n            # Initialize the sum of the current row and column to zero\n            row_sum = 0\n            col_sum = 0\n\n            # Loop through the current row and column and add up the values\n            for k in range(rows):\n                row_sum += M[k][i]\n            for l in range(cols):\n                col_sum += M[i][l]\n\n            # If the sum of the current row and column is greater than or equal to the sum of all rows and columns,\n            # add the current row and column to the sorted matrix\n            if row_sum >= col_sum:\n                sorted_M.append(M[i][j])\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    n = rows*cols\n    min_sum = float('inf')\n\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i+1, rows):\n                for l in range(j+1, cols):\n                    row_sum = sum(M[i][j:l+1]) + sum(M[k][j:l+1])\n                    col_sum = sum(M[j][i:k+1]) + sum(M[j][k+1:l+1])\n                    if row_sum + col_sum < min_sum:\n                        min_sum = row_sum + col_sum\n\n    sorted_M = []\n    for i in range(rows):\n        row = []\n        for j in range(cols):\n            for k in range(i+1, rows):\n                for l in range(j+1, cols):\n                    if M[i][j] > M[k][l]:\n                        M[i], M[k] = M[k], M[i]\n                    if M[j][i] > M[j][l]:\n                        M[j], M[l] = M[l], M[j]\n        sorted_M.append(M[i])\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # sort the rows in ascending order\n    sorted_rows = sorted(zip(row_sums, M), reverse=True)\n    # extract the sorted rows and their sums\n    sorted_sums = [sum for _, row in sorted_rows]\n    sorted_M = [[row[i] for row in M] for i in range(len(M[0]))]\n    # sort the columns in ascending order\n    for i in range(len(sorted_M[0])):\n        sorted_cols = sorted(zip(sorted_sums, sorted_M), key=lambda x: x[1][i], reverse=True)\n        sorted_sums = [sum for _, row in sorted_cols]\n        sorted_M = [[row[j] for j in range(len(row))] for row in sorted_M]\n    # return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(cols):\n            if i > 0:\n                M[i][j] += M[i-1][j]\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(i+1, rows):\n                if M[i][j] > M[k][j]:\n                    M[i], M[k] = M[k], M[i]\n    for i in range(rows):\n        for j in range(cols):\n            if j > 0:\n                M[i][j] += M[i][j-1]\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(cols-1, -1, -1):\n                if M[i][k] > M[i][j]:\n                    M[i][k], M[i][j] = M[i][j], M[i][k]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    for i in range(len(M)):\n        # Find the sum of the current row\n        row_sum = sum(M[i])\n        # Sort the current row in ascending order\n        M[i].sort()\n        # Add the sorted row to the matrix\n        M[i] = [row_sum] + M[i]\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        # Sort each row in ascending order\n        for j in range(cols - 1):\n            if M[i][j] > M[i][j + 1]:\n                M[i][j], M[i][j + 1] = M[i][j + 1], M[i][j]\n        # Calculate the sum of the row\n        row_sum = sum(M[i])\n        # Sort the row in descending order\n        for j in range(cols - 1):\n            if row_sum - M[i][j] > row_sum - M[i][j + 1]:\n                M[i][j], M[i][j + 1] = M[i][j + 1], M[i][j]\n        # Sort the row in ascending order again\n        for j in range(cols - 1):\n            if M[i][j] > M[i][j + 1]:\n                M[i][j], M[i][j + 1] = M[i][j + 1], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Sort each row of the matrix in ascending order\n    for i in range(n):\n        for j in range(1, n-i):\n            if M[j][i] > M[j+1][i]:\n                M[j], M[j+1] = M[j+1], M[j]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Loop through each row in the matrix\n    for i in range(len(M)):\n        # Initialize the sum of the current row\n        row_sum = 0\n        # Loop through each element in the current row\n        for j in range(len(M[i])):\n            # Add the element to the sum\n            row_sum += M[i][j]\n        # Sort the elements in the current row in ascending order\n        M[i] = sorted(M[i])\n        # Add the sum of the current row to the sum of the remaining rows\n        total_sum += row_sum\n    # Sort the entire matrix in ascending order based on the sum of its rows\n    return sorted(M, key=lambda x: sum(x))"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    V = l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the volume of the prism\n    volume = 0.5 * l * b * h\n    \n    # return the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l * b * h / 6"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h\n    print(\"The volume of the triangular prism is:\", V)\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculating the area of the prism\n    area = 0.5 * l * b\n    # calculating the volume of the prism\n    volume = area * h\n    # returning the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    V = (l*b*h)/3 # formula for volume of triangular prism\n\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h / 3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return bool(pattern.match(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # define the pattern to match lowercase letters\n    pattern = r'([a-z])'\n\n    # use the pattern to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # loop through each match and check if it contains an underscore\n    for match in matches:\n        if '_' in match:\n            return True\n\n    # if no matches are found or all matches contain underscores, return False\n    return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z][a-z]+_[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]*)(?=[a-z]|$)'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'(?<=[a-z])(?=[A-Z])|_(?=[A-Z])'\n\n    # Use the re.search() method to search for the pattern in the input string\n    result = re.search(pattern, text)\n\n    # Return True if the pattern is found and False otherwise\n    return result is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])[A-Z]+(?=[a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(regex, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z](?![a-z])_'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]*_[a-z]*$'\n    return re.match(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<![a-z])([a-z]+)([A-Z]+)'\n    match = re.match(pattern, text)\n    if match:\n        return all(c.islower() for c in match.group(0))\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string, blacklist_chars): \n    '''\n    Remove characters from the first string which are present in the second string.\n\n    Args:\n    string (str): The first string to process.\n    blacklist_chars (str): The second string containing the characters to remove from the first string.\n\n    Returns:\n    str: The first string with the characters from the blacklist removed.\n    '''\n    blacklist = set(blacklist_chars)\n    cleaned_string = ''.join(char for char in string if char not in blacklist)\n    return cleaned_string\n\nNO_OF_CHARS = 256\nblacklist = ''.join(chr(i) for i in range(NO_OF_CHARS))[:NO_OF_CHARS//2]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string, remove_chars): \n    '''\n    This function takes two arguments: string and remove_chars.\n    The function removes the characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list\n    str_list = list(string)\n    # Remove the characters from the first list which are present in the second list\n    for char in remove_chars:\n        if char in str_list:\n            str_list.remove(char)\n    # Convert the list back to a string\n    string = ''.join(str_list)\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    \"\"\"\n    This function takes a string as input and returns a new string that contains all the characters in the input string that are not present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    for char in string:\n        if char in char_set:\n            char_set.remove(char)\n    return ''.join(char_set)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for char in string:\n        if char not in remove_chars:\n            result.append(char)\n    return ''.join(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) > NO_OF_CHARS:\n        raise ValueError(\"The given string is too long to process.\")\n    first_set = set(string)\n    second_set = set(string.lower())\n    return [char for char in string if char not in first_set and char not in second_set]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    list_of_chars = [chr(i) for i in range(NO_OF_CHARS)]\n    list_of_chars.remove(string[0])\n    result = ''.join(list_of_chars)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    for char in string_list:\n        if char in string:\n            string_list.remove(char)\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string, n):\n    '''\n    Remove the first n characters from the string\n    '''\n    return string[n:]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    char_list = list(string)\n    for i in range(NO_OF_CHARS):\n        if char_list.count(chr(i)) > 0:\n            char_list.remove(chr(i))\n    for char in char_list:\n        if string_list.count(char) > 0:\n            string_list.remove(char)\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n    \n    # Create a new list to store the unique characters\n    unique_char_list = []\n    \n    # Iterate over each character in the first string\n    for char in char_list:\n        \n        # If the character is not present in the second string, add it to the new list\n        if char not in unique_char_list:\n            unique_char_list.append(char)\n    \n    # Convert the new list to a string\n    result_string = ''.join(unique_char_list)\n    \n    return result_string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store the unique elements in the array\n    unique_elements = set(arraynums)\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_elements) == len(arraynums):\n        print(\"The array does not contain any duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Initialize a dictionary to keep track of the count of each element in the array\n    count = {}\n    for num in arraynums:\n        # If the number is already in the dictionary, increment its count\n        if num in count:\n            count[num] += 1\n        # If the number is not in the dictionary, add it with a count of 1\n        else:\n            count[num] = 1\n    # Loop through the dictionary to see if any element has a count greater than 1\n    for num in count:\n        if count[num] > 1:\n            return True\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # create a set to store unique numbers\n    unique_nums = set()\n\n    # iterate through the array and add each number to the set\n    for num in arraynums:\n        unique_nums.add(num)\n\n    # check if the length of the set is equal to the length of the array\n    if len(unique_nums) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n\n    # create a dictionary to store the number of occurrences of each element in the array\n    counts = {}\n    for num in arraynums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # iterate through the counts dictionary and check if any element appears more than once\n    for count in counts.values():\n        if count > 1:\n            return True\n\n    # if no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    hash_map = {}\n    for num in arraynums:\n        if num in hash_map:\n            return True\n        hash_map[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes in an array of integers and returns a boolean value indicating whether there is any duplicate element in the array or not.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = []\n    for num in arraynums:\n        if num in duplicates:\n            return True\n        duplicates.append(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = set(arraynums)\n    return len(unique_nums) < len(arraynums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%5 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 2 or x == 3 or x == 5:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 12 or x == 18 or x == 30 or x == 42:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 3 == 0 and x % 5 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0: \n        return False \n    elif x == 1 or x == 3 or x == 5 or x == 7 or x == 9: \n        return True \n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    woodall = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n    if x in woodall:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    woodball_numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n    for num in woodball_numbers:\n        if num == x:\n            return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 100000000000000000000:\n        return 'Woodall number'\n    else:\n        return 'Not a Woodall number'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [1, 3, 5, 7, 9]:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    # Reverse the number\n    num_str = str(num)\n    num_str = num_str[::-1]\n\n    # Convert the reverse number back to integer\n    num_rev = int(num_str)\n\n    # Check if the original number is one less than twice its reverse\n    if num - num_rev == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num == 2 * (rev_num + 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return num == rev_num and (num!= 1 or (num == 1 and rev_num!= 21))"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse == 2 * reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    num_str = str(num)\n    reverse_num_str = num_str[::-1]\n    if int(num) == int(reverse_num_str) + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n    reverse = abs(reverse)\n    print(\"Reverse of\", num, \"is\", reverse)\n    if num - reverse == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and reverse it\n    num_str = str(num)\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Check if the original number minus the reversed number is one less than the reversed number\n    return num - rev_num == 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    while num!= 0:\n        reverse_num = reverse_num*10 + num % 10\n        num //= 10\n    \n    if reverse_num < 100:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp //= 10\n    return num - reverse * 2"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def is_valid(num, arr):\n        if len(num) > len(arr):\n            return False\n        for digit in num:\n            if digit not in arr:\n                return False\n        return True\n\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            for num in range(10**(j - i - 1), 10**j + 1):\n                if is_valid(str(num), arr):\n                    if num > max_num:\n                        max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    '''\n    # Sorting the list of digits in decreasing order\n    arr.sort(reverse=True)\n    # Initializing the maximum number as zero\n    max_num = 0\n    # Looping through the list of digits\n    for digit in arr:\n        # Initializing the power of the digit as 1\n        power = 1\n        # Looping through the list of digits again to calculate the power of the digit\n        for i in range(arr.index(digit)+1):\n            power *= i+1\n        # Updating the maximum number\n        max_num = max(max_num, digit*power)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] * 10**(len(arr)-i-1)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes in a list of digits and returns the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)-1, -1, -1):\n        max_num += int(arr[i]) * (10**i)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] > max_num:\n                max_num = arr[i]+arr[j]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Helper function to check if a given number is palindrome or not\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    # Initialize variables\n    max_num = 0\n    curr_num = 0\n    \n    # Loop through the list of digits and form the largest possible number\n    for digit in arr:\n        if digit == '9':\n            # If the digit is 9, add 9 to the current number and continue\n            curr_num += digit\n        else:\n            # If the digit is not 9, add the power of 10 to the current number and continue\n            curr_num += int(digit) * (10 ** (len(arr) - arr.index(digit)))\n    \n    # If the current number is a palindrome, update the max_num variable\n    if is_palindrome(curr_num):\n        max_num = curr_num\n    \n    # Return the maximum number that can be formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)  # get the length of the array\n    \n    # create a dictionary to store the maximum number formed by each set of digits\n    max_dict = {}\n    \n    # loop through all possible combinations of digits\n    for i in range(2**n):\n        digits = []  # create a list to store the digits of the current combination\n        \n        # loop through all the bits in the integer i\n        for j in range(n):\n            if i & (1 << j):  # if the jth bit of i is 1, add the j-th digit to digits\n                digits.append(arr[j])\n        \n        # sort the digits in ascending order\n        digits.sort()\n        \n        # check if the current combination has a larger value than the previous maximum\n        if digits in max_dict:\n            if int(''.join(digits)) > max_dict[digits]:\n                max_dict[digits] = int(''.join(digits))\n        else:\n            max_dict[digits] = int(''.join(digits))\n    \n    # find the maximum number formed with the given digits\n    max_num = 0\n    for digits in max_dict:\n        if int(''.join(digits)) > max_num:\n            max_num = int(''.join(digits))\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits and returns the maximum number that can be formed from those digits.\n    '''\n    # Find the maximum digit\n    max_digit = max(arr)\n    \n    # Calculate the length of the maximum digit\n    max_digit_length = len(str(max_digit))\n    \n    # Initialize the maximum number to 0\n    max_num = 0\n    \n    # Iterate through each digit in the list\n    for num in arr:\n        \n        # Calculate the number of digits in the current number\n        num_length = len(str(num))\n        \n        # Check if the current number is greater than the maximum number\n        if num_length > max_digit_length:\n            max_num = num\n    \n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes an array of digits as input and returns the largest number that can be formed from the digits.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize a variable to store the maximum number formed from the digits\n    max_num = 0\n\n    # Traverse through the sorted array\n    for i in range(len(arr)):\n\n        # Calculate the number formed from the digits in the current index\n        curr_num = 0\n        for j in range(i, len(arr)):\n            curr_num += arr[j] * (len(arr) - j)\n\n        # Update the maximum number formed from the digits if the current number is greater\n        if curr_num > max_num:\n            max_num = curr_num\n\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0 and y >= 0) or (x < 0 and y < 0):\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    # check if x and y have the same sign\n    if x*y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y > 0:\n        return \"Both numbers have positive signs.\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have negative signs.\"\n    elif x < 0 and y > 0:\n        return \"x has a negative sign, and y has a positive sign.\"\n    elif x > 0 and y < 0:\n        return \"x has a positive sign, and y has a negative sign.\"\n    elif x == 0 and y == 0:\n        return \"Both numbers are zero.\"\n    else:\n        return \"Neither number has a different sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    If the signs are opposite, the function returns True. Otherwise, it returns False.\n    '''\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return \"Both are positive integers\"\n    elif x < 0 and y < 0:\n        return \"Both are negative integers\"\n    elif x == 0 and y == 0:\n        return \"Both are zero\"\n    else:\n        return \"One is positive and the other is negative\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0 and y >= 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0 and y >= 0) or (x < 0 and y < 0):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Use the XOR operator to check whether the XOR of x and y is 0 or not.\n    if (x ^ y) == 0:\n        # If XOR is 0, the signs are the same.\n        return True\n    else:\n        # If XOR is not 0, the signs are different.\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n\n    if x == y:\n        return \"Both numbers are equal.\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have opposite signs.\"\n    elif x < 0 and y > 0:\n        return \"First number has opposite sign and second number has positive sign.\"\n    elif x > 0 and y < 0:\n        return \"First number has positive sign and second number has opposite sign.\"\n    else:\n        return \"Neither of the numbers have opposite signs.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function will check whether two integers have opposite signs or not.\n\n    Args:\n        x (int): First integer to be checked.\n        y (int): Second integer to be checked.\n\n    Returns:\n        bool: True if the two integers have opposite signs, else False.\n    \"\"\"\n    if (x < 0) ^ (y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        return is_octagonal(n - 2) + is_octagonal(n - 3)\n\nn = int(input(\"Enter the value of n: \"))\nresult = is_octagonal(n)\nif result is None:\n    print(\"Invalid input. Please enter a positive integer.\")\nelse:\n    print(\"The\", n, \"th octagonal number is\", result)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagon_count = 0\n    octagon_number = 1\n    while octagon_count < n:\n        if octagon_number**2 == 8*n:\n            return octagon_number\n        octagon_count += 1\n        octagon_number += 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    This function takes an integer n as input and returns True if n is an octagonal number, otherwise False.\n    An octagonal number is a positive integer such that the sum of the cubes of its digits is equal to the cube of the number itself.\n    For example, 15 is an octagonal number because 1^3 + 5^3 = 15^3.\n    '''\n    # Helper function to find the sum of cubes of digits of a given number\n    def digit_sum(num):\n        return sum(int(digit) ** 3 for digit in str(num))\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 1:\n        return False\n\n    # Find the cube of the number\n    cube = n ** 3\n\n    # Check if the sum of cubes of digits of the cube is equal to the cube of the number\n    return digit_sum(cube) == cube"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Initialize variables\n    octagonal_number = 0\n    current_digit = 0\n\n    # Loop through each digit of the octagonal number\n    while octagonal_number <= n:\n        # Calculate the current digit of the octagonal number\n        current_digit = int(octagonal_number ** 0.5)\n\n        # Check if the current digit is a power of 2\n        if current_digit ** 2 == octagonal_number:\n            return True\n        else:\n            # Increment the octagonal number by 1\n            octagonal_number += 1\n\n    # If the loop completes without finding an octagonal number, return False\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function will return True if the given number is an octagonal number, and False otherwise.\n    \"\"\"\n    return n % 8 == 0\n\n\ndef nth_octagonal(n):\n    \"\"\"\n    This function will return the nth octagonal number.\n    \"\"\"\n    return (2 * n) ** 2 - 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    if n % 2 == 0:\n        return False\n\n    # Calculate the square of the number of rows (n/2)\n    row_square = n // 2\n\n    # Calculate the sum of the squares of each row (row_square + 1)\n    octagonal_sum = 0\n    for i in range(1, row_square + 1):\n        octagonal_sum += i ** 2\n\n    # Add the squares of the remaining rows (n - row_square)\n    for i in range(row_square + 1, n):\n        octagonal_sum += i ** 2\n\n    return octagonal_sum == n ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    def sum_of_squares(n):\n        \"\"\"\n        Calculate the sum of the squares of the integers from 1 to n.\n        \"\"\"\n        return sum([i**2 for i in range(1, n+1)])\n\n    def difference_of_squares(n):\n        \"\"\"\n        Calculate the difference of the squares of the integers from 1 to n.\n        \"\"\"\n        return sum_of_squares(2*n) - sum_of_squares(n)\n\n    return difference_of_squares(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0: \n        print(\"Input must be non-negative.\") \n        return \n    for i in range(1, n+1): \n        print(2*i*i-1) "
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def get_square_root(num):\n        \"\"\"\n        Calculate the square root of a number using binary search.\n        \"\"\"\n        low = 1\n        high = num\n        while low <= high:\n            mid = (low + high) // 2\n            if mid * mid == num:\n                return mid\n            elif mid * mid < num:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return None\n\n    def get_sqrt_sum_octagonals(n):\n        \"\"\"\n        Calculate the sum of the squares of the nth octagonal number.\n        \"\"\"\n        num = 1\n        octagonal_sum = 0\n        i = 0\n        while i < n:\n            octagonal_sum += num * num\n            num += 1\n            i += 1\n        return octagonal_sum\n\n    sqrt_of_n = get_square_root(n)\n    if sqrt_of_n is None:\n        return None\n    else:\n        octagonal_sum = get_sqrt_sum_octagonals(sqrt_of_n)\n        return octagonal_sum * sqrt_of_n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is an octagonal number, False otherwise.\n    An octagonal number is a positive integer whose square has an odd number of digits.\n    \"\"\"\n    # check if n is odd\n    if n % 2 == 1:\n        # convert n to a string and count its digits\n        digits = len(str(n))\n        # check if the square of n has an odd number of digits\n        square_digits = len(str(n * n))\n        if square_digits % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Count the number of digits in each string\n    digit_count = defaultdict(int)\n    for c in s:\n        if c.isdigit():\n            digit_count[len(c)] += 1\n\n    # Count the number of substrings with the sum of digits equal to their length\n    total_count = 0\n    for key in digit_count:\n        count = 0\n        for i in range(key):\n            for j in range(key, len(s) + 1):\n                count += digit_count[j] - digit_count[i]\n        total_count += count\n\n    return total_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_digit_sum(string):\n        \"\"\"\n        Count the digit sum of a string.\n        \"\"\"\n        digit_sum = 0\n        for digit in string:\n            digit_sum += int(digit)\n        return digit_sum\n\n    def count_substrings(s, start, end, digit_sum):\n        \"\"\"\n        Count the number of substrings from start to end with the digit_sum.\n        \"\"\"\n        count = 0\n        for i in range(start, end+1):\n            if digit_sum == count_digit_sum(s[i:i+digit_sum]):\n                count += 1\n        return count\n\n    def count_substrings_with_sum(s, n):\n        \"\"\"\n        Count the number of substrings with the digit_sum equal to n.\n        \"\"\"\n        count = 0\n        for length in range(1, n+1):\n            count += count_substrings(s, 0, len(s)-1, length)\n        return count\n\n    # Input string\n    s = \"abcde12345\"\n\n    # Output count\n    count = count_substrings_with_sum(s, 5)\n\n    # Print the output\n    print(\"Number of substrings with sum equal to 5:\", count)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a defaultdict to store the count of substrings with the sum of digits equal to their length\n    count = defaultdict(int)\n    n = len(s)\n    \n    # Loop through all substrings of s\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Check if the sum of digits in the substring is equal to its length\n            if sum(int(c) for c in s[i:j]) == j-i:\n                # If yes, increment the count in the defaultdict\n                count[j-i] += 1\n                \n    # Return the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the frequency of each digit in the string\n    digit_freq = defaultdict(int)\n    for char in s:\n        digit_freq[char] += 1\n\n    # iterate through each substring of the string\n    substring_count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the substring has the sum of digits equal to its length\n            substring_sum = sum([digit_freq[char] for char in s[i:j]])\n            if substring_sum == len(s):\n                substring_count += 1\n\n    return substring_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[s[i]] += 1\n    \n    result = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(x) for x in s[i:j]) == len(s[i:j]):\n                result += 1\n    \n    return result"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [0]*(n+1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, n+1):\n        digits = set(str(s[i-1]))\n        if sum(digits) == i:\n            dp[i] = dp[i-1] + dp[i-2]\n\n    return dp[n]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a dictionary to store the count of substrings with given sum\n    count_dict = defaultdict(int)\n    \n    # loop through each character in the string\n    for i in range(len(s)):\n        # create a substring of length equal to the current character\n        sub_str = s[i:i+1]\n        # loop through each character in the substring and calculate the sum of digits\n        for j in range(i, len(s)):\n            digit_sum = int(sub_str)\n            # if the sum of digits is equal to the length of the substring, increment the count in the dictionary\n            if digit_sum == len(sub_str):\n                count_dict[len(sub_str)] += 1\n    \n    # return the count of substrings with given sum\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # create a dictionary to store the count of substrings for each length\n    count = defaultdict(int)\n\n    # loop through the string and check for substrings with sum of digits equal to their length\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # check if the sum of digits is equal to the length of the substring\n            if sum(int(c) for c in s[i:j+1]) == len(s[i:j+1]):\n                # increment the count of substrings for this length\n                count[len(s[i:j+1])] += 1\n\n    # return the count of substrings\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            digits = set(str(int(digit)) for digit in substring)\n            if len(digits) == len(substring) and sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # create a dictionary to store the count of substrings with the sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # loop through the string\n    for i in range(len(s)):\n        # create a list of the digits in the substring\n        sub_digits = [int(digit) for digit in s[i:i+len(s[i])]]\n\n        # sort the list of digits\n        sub_digits.sort()\n\n        # compute the sum of the digits in the substring\n        sub_sum = sum(sub_digits)\n\n        # increment the count of substrings with the sum of digits equal to their length\n        count_dict[sub_sum] += 1\n\n    # return the count of substrings with the sum of digits equal to their length\n    return count_dict"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    # Find the smallest number in the list using a loop\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n\n    Args:\n    - xs: a list of numbers\n\n    Returns:\n    - the smallest number in the list or None if the list is empty.\n    \"\"\"\n    if not xs:\n        return None\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        return min(xs)\n    else:\n        return None"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    This function finds the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list xs as input and returns the smallest number in the list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize variables to keep track of the minimum and maximum values in the list\n    min_val = test_list[0][0]\n    max_val = test_list[0][1]\n    # loop through the list and compare each pair of values\n    for i in range(1, len(test_list)):\n        if test_list[i][0] < min_val:\n            min_val = test_list[i][0]\n        elif test_list[i][0] > max_val:\n            max_val = test_list[i][0]\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n        elif test_list[i][1] > max_val:\n            max_val = test_list[i][1]\n    # calculate the difference between the maximum and minimum values\n    difference = max_val - min_val\n    return difference"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n    pairs.sort()\n    return pairs[-1][0] - pairs[0][0]"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize max_diff to the minimum possible value\n    max_diff = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the pairs and compare it to max_diff\n            diff = test_list[j][1] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list in ascending order\n    test_list.sort()\n    \n    # Initialize the maximum difference to be the first element in the list\n    max_diff = test_list[0]\n    \n    # Iterate through the remaining elements in the list\n    for i in range(1, len(test_list)):\n        # If the current element is greater than the previous maximum difference, update the maximum difference\n        if test_list[i] > max_diff:\n            max_diff = test_list[i]\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples based on the first element in each tuple\n    sorted_list = sorted(test_list)\n\n    # Initialize the maximum difference variable\n    max_diff = 0\n\n    # Iterate over the sorted list of tuples\n    for i in range(len(sorted_list) - 1):\n        # Calculate the difference between the first element of the current tuple and the first element of the next tuple\n        diff = sorted_list[i+1][0] - sorted_list[i][0]\n\n        # If the current difference is greater than the maximum difference, update the maximum difference\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples\n    sorted_list = sorted(test_list)\n\n    # Initialize the maximum difference variable\n    max_diff = 0\n\n    # Iterate through the sorted list and find the maximum difference\n    for i in range(len(sorted_list)):\n        for j in range(i+1, len(sorted_list)):\n            diff = abs(sorted_list[i][1] - sorted_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Check if the list is empty or has only one element\n    if len(test_list) < 2:\n        return None\n\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize the maximum difference variable\n    max_diff = 0\n\n    # Iterate through the list\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the current pair and the next pair\n        diff = abs(test_list[i][0] - test_list[i+1][1])\n\n        # Update the maximum difference if the new difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the list in ascending order\n    test_list.sort()\n    # initialize variables\n    max_diff = 0\n    prev_val = test_list[0]\n    # loop through the list\n    for i in range(1, len(test_list)):\n        curr_val = test_list[i]\n        # find the maximum difference between the current and previous values\n        diff = curr_val - prev_val\n        if diff > max_diff:\n            max_diff = diff\n        prev_val = curr_val\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n    return max(pairs, key=lambda x: abs(x[0] - x[1]))[1] - min(pairs, key=lambda x: abs(x[0] - x[1]))[1]"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n\n    Args:\n        subjectmarks (list): A list of tuples representing the marks of students for a particular subject.\n\n    Returns:\n        list: A list of tuples representing the sorted marks of students for a particular subject.\n    \"\"\"\n\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function sorts a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    # Return the sorted list of tuples\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples in ascending order based on the second value\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Define a recursive function to flatten the list recursively\n    def flatten_list(data_list):\n        # Base case: if the list is empty, return an empty list\n        if not data_list:\n            return []\n        # Recursive case: if the list has at least one element, append it to the result of flattening the first element and the rest of the list\n        else:\n            return flatten_list(data_list[1:]) + [data_list[0]]\n\n    # Flatten the list recursively\n    flattened_list = flatten_list(data_list)\n\n    # Sum the flattened list\n    total = sum(flattened_list)\n\n    # Return the total\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # recursive case: add the first element of the list to the result of calling this function with the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list, index=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            recursive_list_sum(item)\n    elif isinstance(data_list, int) or isinstance(data_list, float):\n        return data_list\n    else:\n        raise TypeError('Invalid input type.')\n    \n    return sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten_list(lst):\n        \"\"\"\n        Recursive function to flatten a list.\n        \"\"\"\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    for item in data_list:\n        if isinstance(item, list):\n            flattened_list += recursive_list_sum(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: empty list, return 0\n    if not data_list:\n        return 0\n    # recursive case: flatten the list and add the sum of its elements to the result\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # If the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Otherwise, recursively add the first element to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list, list):\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(item)\n            else:\n                flat_list.append(item)\n        return recursive_list_sum(flat_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: If the list contains only one element, return it\n    if len(data_list) == 1:\n        return data_list[0]\n    \n    # Recursive case: Flatten the list and add the sum of its elements\n    else:\n        flattened_list = []\n        for item in data_list:\n            if type(item) == list:\n                flattened_list.extend(recursive_list_sum(item))\n            else:\n                flattened_list.append(item)\n        return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a Python function to count the number of positive numbers in a list.\n\n    Args:\n    lst (list): List of integers.\n\n    Returns:\n    int: Number of positive integers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # Base case: n=0, 1, 2 are Bell numbers\n    if n <= 0 or n == 1 or n == 2:\n        return 1\n    \n    # If n is odd, calculate the number of ways to partition the set with n/2 elements\n    if n % 2!= 0:\n        num_ways = 0\n        for i in range(n//2+1):\n            num_ways += bell_number(i)\n        num_ways += bell_number(n//2)\n        return num_ways\n    \n    # If n is even, calculate the number of ways to partition the set with n/2+1 elements\n    else:\n        num_ways = 0\n        for i in range(n//2+1):\n            num_ways += bell_number(i)\n        return num_ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    def count_partitions(n, num_partitions):\n        if n == 1:\n            return num_partitions\n        elif n == 2:\n            return num_partitions + 1\n        else:\n            return count_partitions(n-1, num_partitions) + count_partitions(n-2, num_partitions)\n\n    return count_partitions(n, 0)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the list of Bell numbers\n    bell = [0]*(n+1)\n    # Initialize the list of partitions\n    partitions = [0]*(n+1)\n\n    # Initialize the first partition as 1\n    partitions[0] = 1\n\n    # Iterate through the range of Bell numbers up to n\n    for i in range(1, n+1):\n        # Calculate the number of ways to partition the Bell numbers up to i\n        for j in range(1, i+1):\n            # Add the number of partitions for j and i-j to the total number of partitions for i\n            partitions[i] += partitions[j] * partitions[i-j]\n        # The number of ways to partition the Bell numbers up to i is the total number of partitions for i\n        partitions[i] %= (10**9 + 7)\n\n    # Return the number of partitions for the final Bell number\n    return partitions[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Base case: if n is 0, there are 0 ways to partition\n    if n == 0:\n        return 1\n\n    # Initialize the number of ways to partition as 1\n    ways = 1\n\n    # Loop through the first n Bell numbers\n    for i in range(n):\n        # For each Bell number, multiply the number of ways to partition by (n-i)\n        ways *= (n - i)\n\n    # Return the number of ways to partition\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    # Base cases\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    \n    # Initialize variables\n    prev_prev = 0\n    prev = 1\n    curr = 1\n    count = 0\n    \n    # Iterate through the sequence\n    for i in range(2, n+1):\n        curr = prev + prev_prev\n        prev_prev = prev\n        prev = curr\n        count += 1\n    \n    # Return the final count\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    def partition(n, k):\n        if k == 1:\n            return n\n        else:\n            return partition(n-1, k) + partition(n-1, k-1)\n    \n    return partition(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case\n    if n == 0 or n == 1:\n        return 1\n    \n    # Recursive case\n    return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * n + bell_number(n - 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        count = 0\n        for i in range(3, n+1):\n            count += bell_number(i-1)\n        return count"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    n = len(A) \n    # Check if the array is monotonic in ascending order \n    for i in range(n-1): \n        if A[i] > A[i+1]: \n            return False \n    # Check if the array is monotonic in descending order \n    for i in range(n-1): \n        if A[i] < A[i+1]: \n            return False \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    if A[1] == A[0]: \n        for i in range(2, len(A)): \n            if A[i]!= A[i-1]: \n                return False\n        return True\n    elif A[1] < A[0]: \n        for i in range(1, len(A)): \n            if A[i] >= A[i-1]: \n                return False\n        return True\n    else: \n        for i in range(1, len(A)): \n            if A[i] <= A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i-1] or A[i] >= A[i+1]:\n                return False\n        return True\n\n    if A[0] >= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i-1] or A[i] <= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n\n    # Check if all elements are equal\n    if A[0] == A[-1]:\n        return True\n\n    # Check if the array is monotonic\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 3: \n        return False\n    \n    # check if array is monotonic\n    if (A[0] < A[1] and A[1] < A[2]) or (A[0] > A[1] and A[1] > A[2]):\n        return True\n    \n    # check if array is strictly increasing or decreasing\n    elif (A[0] < A[1] and A[1] < A[2]) or (A[0] > A[1] and A[1] > A[2]):\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1] or A[i] > A[i+1]:\n                return False\n        return True\n    \n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check if the array is empty or contains only one element\n    if len(A) == 1:\n        return True\n\n    # check if the array is monotonic increasing\n    if A[0] < A[1] and all(A[i] >= A[i-1] for i in range(1, len(A))):\n        return True\n\n    # check if the array is monotonic decreasing\n    if A[0] > A[1] and all(A[i] <= A[i-1] for i in range(1, len(A))):\n        return True\n\n    # if none of the above conditions are true, then the array is not monotonic\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n        elif A[i] > A[i-1] and A[i-1] > A[i-2]:\n            return True\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check for increasing or decreasing sequence\n    increasing = all(A[i] <= A[i+1] for i in range(len(A)-1))\n    decreasing = all(A[i] >= A[i+1] for i in range(len(A)-1))\n\n    # if both sequences are true, return True\n    if increasing and decreasing:\n        return True\n\n    # if only one sequence is true, return False\n    elif increasing or decreasing:\n        return False\n\n    # if neither sequence is true, return None\n    else:\n        return None"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    # Check if the array is monotonic in ascending order\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n    \n    # Check if the array is monotonic in descending order\n    elif A[0] >= A[1]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n    \n    # If all the elements in the array are equal, then it is not monotonic\n    else:\n        return False\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n    if s[0] in l:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # check if s is empty\n    if not s:\n        return True\n    # check if l is empty\n    if not l:\n        return False\n    # check if the first element of s is equal to the first element of l\n    if s[0] == l[0]:\n        # check if the sublist s is a sublist of l\n        if is_sublist(l[1:], s[1:]):\n            return True\n    # check if the sublist s is a sublist of l\n    return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n\n    if not s:\n        return True\n    elif s[0] in l:\n        return is_sublist(l, s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Create a list of lists to store the sublists\n    sublists = []\n    # Loop through the list of lists\n    for sub in s:\n        # Create a list of the elements in the sublist\n        sublist = [x for x in sub]\n        # Append the sublist to the list of sublists\n        sublists.append(sublist)\n    # Loop through the list of lists\n    for lst in l:\n        # Create a list of the elements in the list\n        list_ = [x for x in lst]\n        # Loop through the list of sublists\n        for sub in sublists:\n            # Check if the current list is a sublist of any of the sublists in the list of sublists\n            if list_ in sub:\n                # Return True if it is, otherwise return False\n                return True\n    # If none of the sublists in the list of sublists match any of the lists in the list of lists, return False\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(x) for x in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple in Input:\n        if len(tuple)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tuple_ in Input:\n        if len(tuple_)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Check if all the tuples have the same length\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, False otherwise.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    count = 0\n    for i in range(len(Input)):\n        if len(Input[i]) == len(Input[0]):\n            count += 1\n\n    if count == len(Input):\n        print(\"All the given tuples have equal length.\")\n    else:\n        print(\"Not all the given tuples have equal length.\")"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    This function sorts a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    \n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n                \n        gap = (gap * 13) // 10\n        \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # define parameters\n    gap = len(nums)\n    swapped = True\n\n    # while swapped is True\n    while swapped:\n        swapped = False\n\n        # for each i in range(gap, len(nums)):\n        for i in range(gap, len(nums) - gap):\n            # if nums[i] is greater than nums[i+gap]\n            if nums[i] > nums[i + gap]:\n                # swap nums[i] and nums[i+gap]\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # define variables\n    n = len(nums)\n    gap = n\n    swapped = True\n    start = 0\n    end = n\n\n    # sort the list using the comb sort algorithm\n    while swapped:\n        swapped = False\n        for i in range(start, end):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        start = end\n        end = n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    \n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n        \n        if not swapped:\n            break\n        \n        gap = (gap * 10) // 10"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n\n    while gap > 1 or nums[0] > nums[-1]:\n        if gap == n:\n            gap = 1\n        else:\n            gap = int((gap * 10) / 13)\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n\n        n -= gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        for i in range(0, gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        i = 0\n        while i < n - gap:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    # Define the swap function\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Define the comparison function\n    def comparison(nums, i, j):\n        if nums[i] > nums[j]:\n            return 1\n        elif nums[i] < nums[j]:\n            return -1\n        else:\n            return 0\n\n    # Define the swap limit\n    def swap_limit(nums, gap):\n        # Calculate the maximum swapping times\n        max_swaps = len(nums) // gap\n        # Calculate the swapping limit\n        swapping_limit = max_swaps // 2\n        # Add the swapping limit to the swapping times\n        return max_swaps + swapping_limit\n\n    # Initialize the variables\n    gap = len(nums) // 2\n    swapping_times = 0\n\n    # Sort the list using the comb sort algorithm\n    while gap > 1:\n        swapping_times = 0\n        for i in range(len(nums) - gap):\n            if comparison(nums, i, i + gap) == -1:\n                swap(nums, i, i + gap)\n                swapping_times += 1\n        gap //= 2\n\n    return nums, swapping_times"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    \n    Args:\n    nums: A list of integers to be sorted.\n    \n    Returns:\n    A sorted list of integers.\n    '''\n    \n    # Define the maximum number of swaps allowed.\n    max_swaps = len(nums) // 2\n    \n    # Initialize the swaps counter.\n    swaps = 0\n    \n    # Initialize the gap size.\n    gap = len(nums)\n    \n    while gap > 1 or swaps < max_swaps:\n        \n        # Find the smallest gap value.\n        for i in range(gap):\n            \n            # If the gap value is greater than the gap between adjacent elements, swap them.\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swaps += 1\n        \n        # Decrease the gap size.\n        gap //= 1\n        \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    # initialize gap and swapping variables\n    gap = n\n    swapped = True\n    # iterate until gap is 1\n    while gap!= 1 or swapped:\n        swapped = False\n        # iterate through the list, swapping adjacent elements if they are in the wrong order\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        # reduce the gap size\n        gap = int(gap / 1.3)\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number can be expressed as the difference of two squares\n    square_root = int(n ** 0.5)\n    if n % square_root!= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Taking input of the number\n    n = int(input(\"Enter a number: \"))\n\n    # Finding the square of the number\n    square = n ** 2\n\n    # Checking if the number can be represented as the difference of two squares or not\n    if square >= 1:\n        print(\"Cannot be represented as the difference of two squares.\")\n    else:\n        # Finding the difference of the square and 1\n        diff = square - 1\n\n        # Checking if the difference can be represented as a square or not\n        if diff ** 2 == 1:\n            print(\"The number can be represented as the difference of two squares.\")\n        else:\n            print(\"Cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = n**0.5\n    b = (n - a**2)**0.5\n    if a*a + b*b == n:\n        print(f\"{n} can be represented as the difference of two squares: {a} and {b}.\")\n    else:\n        print(f\"{n} cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    # Check if n can be represented as the sum of two squares\n    for i in range(int(n/2)+1):\n        for j in range(i+1, int(n**(0.5))+1):\n            if n == i**2 + j**2:\n                return True\n    # If n cannot be represented as the sum of two squares, check if it can be represented as the difference of two squares\n    for i in range(int(n/2)+1):\n        for j in range(i+1, int(n**(0.5))+1):\n            if n == i**2 - j**2:\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            for j in range(i, int(n**0.5)+1):\n                if n % j == 0:\n                    if i**2 + j**2 == n:\n                        return True\n                    elif i**2 + (n-j)**2 == n:\n                        return True\n            return False\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n == i*i + i**2:\n            return True\n        elif n == i**2 - i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # calculate the difference of squares of n and 1\n    square_diff = (n*n) - (1*1)\n    # check if the square_diff is divisible by 10\n    if square_diff % 10 == 0:\n        print(n, \"can be represented as the difference of two squares\")\n    else:\n        print(n, \"cannot be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Convert the input number to a string\n    num = str(n)\n    \n    # Initialize the count of digits in the input number\n    count = 0\n    \n    # Iterate through each character of the input number\n    for char in num:\n        # If the character is a digit, increment the count\n        if char.isdigit():\n            count += 1\n    \n    # If the count of digits is less than or equal to 1, return False\n    if count <= 1:\n        return False\n    \n    # Initialize the count of digits in the input number\n    count = 0\n    \n    # Iterate through each character of the input number from left to right\n    for char in num:\n        # If the character is a digit, increment the count\n        if char.isdigit():\n            count += 1\n    \n    # Calculate the square of the input number\n    square = int(num)**2\n    \n    # Initialize the count of digits in the square\n    count = 0\n    \n    # Iterate through each character of the square\n    for char in str(square):\n        # If the character is a digit, increment the count\n        if char.isdigit():\n            count += 1\n    \n    # If the count of digits is equal to the count of digits in the input number, return True\n    if count == count:\n        return True\n    \n    # If the count of digits is greater than the count of digits in the input number, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt_n = n ** 0.5\n    if int(sqrt_n) * int(sqrt_n) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    sqrt_n = int(n ** 0.5)\n    for i in range(1, sqrt_n + 1):\n        if n - i ** 2 == i ** 2:\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a set of colors to compare against the patterns\n    pattern_colors = set(colors)\n    # Initialize a boolean variable to keep track of whether the patterns are the same\n    same_patterns = True\n    # Loop through the patterns array\n    for pattern in patterns:\n        # Check if the pattern has the same number of colors as the colors in the set\n        if len(pattern)!= len(pattern_colors):\n            same_patterns = False\n            break\n        # Remove the colors in the pattern from the set of colors to compare against\n        pattern_colors -= set(pattern)\n    # Return the boolean variable indicating whether the patterns are the same\n    return same_patterns"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the length of colors and patterns are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Initialize a variable to keep track of the pattern index\n    pattern_index = 0\n\n    # Loop through the colors list\n    for color in colors:\n        # Check if the current color matches the next pattern in the patterns list\n        if color == patterns[pattern_index]:\n            # If the color matches, increment the pattern index\n            pattern_index += 1\n            # If the pattern index is equal to the length of patterns, return True\n            if pattern_index == len(patterns):\n                return True\n\n    # If the function reaches here, it means the colors list does not follow the patterns list\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the length of colors is equal to the length of patterns\n    if len(colors)!= len(patterns):\n        return False\n\n    # Check if the patterns are in the same order\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_count = {}\n\n    for color in colors:\n        color_count[color] = color_count.get(color, 0) + 1\n\n    prev_pattern = ''\n    for pattern in patterns:\n        if prev_pattern!= pattern:\n            return False\n        prev_pattern = pattern\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    # Define the sequence of colors in the patterns array\n    pattern_colors = [\"red\", \"blue\", \"green\", \"yellow\", \"orange\", \"purple\"]\n\n    # Check if the length of patterns is equal to the length of pattern_colors\n    if len(patterns)!= len(pattern_colors):\n        return False\n\n    # Check if the colors in patterns are present in pattern_colors\n    for pattern in patterns:\n        if pattern not in pattern_colors:\n            return False\n\n    # Check if all patterns are in sequence\n    for i in range(len(patterns) - 1):\n        if patterns[i] + 1!= patterns[i + 1]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    # Define variables for the pattern sequence and the current color\n    pattern_seq = 0\n    curr_color = colors[0]\n\n    # Loop through the colors list\n    for color in colors:\n        # If the current color is the same as the previous color, increment the pattern_seq\n        if color == curr_color:\n            pattern_seq += 1\n            # If the pattern_seq exceeds the length of the patterns array, return False\n            if pattern_seq > len(patterns):\n                return False\n        else:\n            # If the current color is different than the previous color, reset the pattern_seq to 1\n            pattern_seq = 1\n            # If the current color is not in the patterns array, return False\n            if curr_color not in patterns:\n                return False\n        # Update the current color to be the current color being checked\n        curr_color = color\n\n    # If the loop completes without returning False, it means the pattern sequence is valid\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    n = len(colors)\n    if n!= len(patterns):\n        return False\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    # Create a dictionary to store the current pattern of colors\n    current_pattern = {}\n\n    # Iterate over the colors and patterns arrays\n    for color, pattern in zip(colors, patterns):\n        # If the current pattern does not contain the current color, add it to the dictionary\n        if color not in current_pattern:\n            current_pattern[color] = 1\n\n        # If the current pattern does contain the current color, increment the count for that color\n        else:\n            current_pattern[color] += 1\n\n        # If the pattern does not match the current pattern, return False\n        if pattern!= current_pattern:\n            return False\n\n    # If we made it through the entire loop without returning False, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    if len(patterns)!= len(colors):\n        return False\n\n    pattern_index = 0\n    for color in colors:\n        if color == patterns[pattern_index]:\n            pattern_index += 1\n        else:\n            return False\n\n    return pattern_index == len(patterns)"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_list = [tuple(filter(lambda x: x%K==0, tup)) for tup in test_list]\n    return filtered_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K!= 0:\n                count += 1\n            if count == len(tup):\n                result.append(tup)\n                break\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty list to store the valid tuples\n    valid_tuples = []\n    # loop through each tuple in the list of tuples\n    for i in range(len(test_list)):\n        # loop through each element in the tuple\n        for j in range(len(test_list[i])):\n            # check if the current element is divisible by k\n            if test_list[i][j] % K == 0:\n                # if the current element is divisible by k, check if all other elements are also divisible by k\n                found = True\n                for x in range(len(test_list[i])):\n                    if x!= j and test_list[i][x] % K!= 0:\n                        found = False\n                        break\n                # if all elements are divisible by k, add the tuple to the valid_tuples list\n                if found:\n                    valid_tuples.append(test_list[i])\n                    break\n    # return the valid_tuples list\n    return valid_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            tuples_list.append(tup)\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(j % K == 0 for j in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # create an empty list to store the result\n    result = []\n    \n    # loop through each tuple in the list\n    for tuple_1 in test_list:\n        \n        # loop through each tuple in the list\n        for tuple_2 in test_list:\n            \n            # if the two tuples have the same elements and are divisible by K, add the pair to the result list\n            if tuple_1 == tuple_2 and all(True if i % K == 0 else False for i in tuple_1):\n                result.append((tuple_1, tuple_2))\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]):\n                tuples_list.append((test_list[i], test_list[j]))\n    return tuples_list"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    return n % 11 == 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, \"is odd length\")\n        else:\n            print(word, \"is even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and returns True if the length of the word is odd, and False otherwise.\n    \"\"\"\n    # splitting the string into words\n    words = s.split()\n    # iterating over each word and checking its length\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    # if no odd length is found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # split the string into words using the split() method\n    words = s.split()\n\n    # iterate over each word in the list\n    for word in words:\n\n        # check if the length of the word is odd\n        if len(word) % 2 == 1:\n\n            # if the length is odd, return True\n            return True\n\n        # if the length is even, continue to the next word\n        else:\n            continue\n\n    # if the loop completes without finding an odd word, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for i in range(len(s)):\n        if len(s[i]) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} has an even length\")\n        else:\n            print(f\"{word} has an odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2 == 0:\n            print(word, \"is even length\")\n        else:\n            print(word, \"is odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the variable for the tetrahedral number\n    tetra = 0\n    \n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Initialize the variable for the count of even tetrahedra\n        count = 0\n        \n        # Loop through the numbers from 1 to i\n        for j in range(1, i+1):\n            # Check if i is a power of 2\n            if i == 2**j:\n                # Increment the count of even tetrahedra\n                count += 1\n        \n        # Multiply the count by 4 to get the nth tetrahedral number\n        tetra += count*4\n    \n    # Return the value of the nth tetrahedral number\n    return tetra"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return 0\n    \n    return (4*n**2 - 1)/3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        return (3 * tetrahedral_number(n-1) + 1) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 4\n    c = 6\n    d = 8\n\n    tetrahedral_numbers = []\n\n    while a + b + c + d <= n:\n        tetrahedral_numbers.append(a + b + c + d)\n        a += 1\n        b -= 2\n        c -= 2\n        d -= 2\n\n    return tetrahedral_numbers[n - 1]\n\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # We need to find the number of n-th triangular number \n    # which is equal to the nth tetrahedral number \n    triangular_num = (n * (n + 1) * (2 * n + 1)) // 6 \n    # Now we need to find the number of n-th hexagonal number \n    # which is equal to the nth tetrahedral number \n    hexagonal_num = (n * (3 * n - 1)) // 2 \n    # Finally, we need to find the number of n-th octagonal number \n    # which is equal to the nth tetrahedral number \n    octagonal_num = (n * (5 * n - 3)) // 2\n    # Return the sum of the triangular, hexagonal and octagonal numbers \n    return triangular_num + hexagonal_num + octagonal_num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 4 * tetrahedral_number(n - 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return (10 ** n) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4 * (n-1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n < 1 or n > 50:\n        return None\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 5\n    \n    if n == 3:\n        return 10\n    \n    if n == 4:\n        return 15\n    \n    if n == 5:\n        return 20\n    \n    if n == 6:\n        return 25\n    \n    if n == 7:\n        return 30\n    \n    if n == 8:\n        return 35\n    \n    if n == 9:\n        return 40\n    \n    if n == 10:\n        return 45\n    \n    if n == 11:\n        return 50\n    \n    if n == 12:\n        return 55\n    \n    if n == 13:\n        return 60\n    \n    if n == 14:\n        return 65\n    \n    if n == 15:\n        return 70\n    \n    if n == 16:\n        return 75\n    \n    if n == 17:\n        return 80\n    \n    if n == 18:\n        return 85\n    \n    if n == 19:\n        return 90\n    \n    if n == 20:\n        return 95\n    \n    if n == 21:\n        return 100\n    \n    if n == 22:\n        return 105\n    \n    if n == 23:\n        return 110\n    \n    if n == 24:\n        return 115\n    \n    if n == 25:\n        return 120\n    \n    if n == 26:\n        return 125\n    \n    if n == 27:\n        return 130\n    \n    if n == 28:\n        return 135\n    \n    if n == 29:\n        return 140\n    \n    if n == 30:\n        return 145\n    \n    if n == 31:\n        return 150\n    \n    if n == 32:\n        return 155\n    \n    if n == 33:\n        return 160\n    \n    if n == 34:\n        return 165\n    \n    if n == 35:\n        return 170\n    \n    if n == 36:\n        return 175\n    \n    if n == 37:\n        return 180\n    \n    if n == 38:\n        return 185\n    \n    if n == 39:\n        return 190\n    \n    if n == 40:\n        return 195\n    \n    if n == 41:\n        return 200\n    \n    if n == 42:\n        return 205\n    \n    if n == 43:\n        return 210\n    \n    if n == 44:\n        return 215\n    \n    if n == 45:\n        return 220\n    \n    if n == 46:\n        return 225\n    \n    if n == 47:\n        return 230\n    \n    if n == 48:\n        return 235\n    \n    if n == 49:\n        return 240\n    \n    if n == 50:\n        return 245"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius as input and returns the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    pi = math.pi\n    return (4/3) * pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    \n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize a variable to hold the character\n    char = ''\n    # Loop through each character in the string\n    for i in strr:\n        # Convert the character to its ASCII value and add it to the variable\n        char += chr(ord(i) + 13)\n    # Return the final character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for char_i in strr:\n        char += ord(char_i)\n    return chr((char % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize variables\n    ascii_value = 0\n    char = \"\"\n    count = 0\n    # Loop through each character of the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        ascii_value += ord(char)\n        # Increment the count of characters\n        count += 1\n    # Find the character by taking the sum modulo 26\n    char = chr((ascii_value % 26) + 65)\n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = \"\"\n    for i in strr:\n        char += chr((ord(i) - 65) % 26 + 65)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    # Convert the string to list of characters\n    lst = list(strr)\n\n    # Initialize a variable to store the character\n    char = \"\"\n\n    # Loop through each character in the list\n    for i in range(len(lst)):\n        # Convert the ASCII value of the character to integer and add to the char variable\n        char += chr((ord(lst[i])+13)%26 + ord('a'))\n\n    # Return the final character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Initialize an empty string to store the result\n    result = ''\n\n    # Loop through each character in the string\n    for char in strr:\n\n        # Convert the character to its ASCII value\n        ascii_val = ord(char)\n\n        # Calculate the value of the character by adding its ASCII value to the ASCII value of 'a' (65)\n        val = ascii_val + 65\n\n        # Convert the value to a character and append it to the result string\n        result += chr(val)\n\n    # Return the result string\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # initialize variable for the sum of ASCII values of characters\n    sum_ASCII = 0\n    # iterate through each character of the string\n    for char in strr:\n        # add the ASCII value of the character to the sum\n        sum_ASCII += ord(char)\n    # find the character made by adding the ASCII value of all characters modulo 26\n    char_result = chr((sum_ASCII % 26) + ord('A'))\n    # return the character made by adding ASCII values\n    return char_result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize an empty string to store the encrypted character\n    encrypted_char = \"\"\n    # Traverse through each character of the given string\n    for char in strr:\n        # Calculate the ASCII value of the current character\n        ascii_val = ord(char)\n        # Add the ASCII value modulo 26 to the encrypted character string\n        encrypted_char += chr(((ascii_val + 26) % 26) + 65)\n    # Return the encrypted character string\n    return encrypted_char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize an empty string to store the characters\n    char = \"\"\n    # Iterate through each character in the string\n    for i in strr:\n        # Convert the character to its ASCII value\n        ascii_val = ord(i)\n        # Add the ASCII value to the current character\n        char = chr((ascii_val + ord(char)) % 26)\n    # Return the final character\n    return char"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "The nth number in the sequence is simply the nth number in the sequence, where n is the desired value for the desired number. Therefore, the function sequence(n) should simply return the nth number in the sequence."
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0] * (n + 1)\n    sequence[0] = 1\n    sequence[1] = 1\n    for i in range(2, n + 1):\n        sequence[i] = sequence[i - 1] + sequence[i - 2]\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # initialize the sequence with 0\n    seq = [0]\n    # loop through the sequence until we reach the nth number\n    for i in range(n): \n        # calculate the next number in the sequence\n        next_num = seq[i] + seq[i+1]\n        # add the next number to the sequence\n        seq.append(next_num)\n    # return the nth number in the sequence\n    return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # Initialize the sequence with the first term\n    sequence = [1]\n\n    # Loop through each subsequent term\n    for i in range(2, n+1):\n        # Calculate the nth term by summing the previous two terms\n        sequence.append(sequence[i-1] + sequence[i-2])\n\n    # Return the nth term in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n):\n        next_term = (sequence[i-1] + sequence[i-2]) % 2\n        sequence.append(next_term)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]  # initialize the sequence with 0 and 1\n    for i in range(2, n+1):  # iterate through the sequence n+1 times\n        sequence.append(sequence[i-1] + sequence[i-2])  # calculate the next number in the sequence\n    return sequence[n]  # return the nth number in the sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence with the first 5 numbers\n    sequence = [1, 1, 2, 3, 10]\n    # Iterate n-1 times and calculate each number in the sequence\n    for i in range(n-1):\n        # Calculate the next number in the sequence\n        next_num = (sequence[i] + sequence[i+1]) % 11\n        # Append the next number to the sequence\n        sequence.append(next_num)\n    # Return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area\n\nprint(surfacearea_sphere(5))"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    # Use the formula: surface area = 4*pi*r^2\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r**3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula for surface area of a sphere\n    # Area = 4 * pi * r^2\n    # where pi is the mathematical constant pi\n    \n    # Use the formula to find the surface area of the sphere\n    surface_area = 4 * math.pi * r**2\n    \n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n\n    # Define the function to calculate the centered hexagonal number\n    def centered_hexagonal_helper(n):\n        \"\"\"\n        Helper function to calculate the centered hexagonal number.\n        \"\"\"\n        if n == 1:\n            return 1\n        else:\n            return centered_hexagonal_helper(n-1) + centered_hexagonal_helper(n-2)\n\n    # Return the centered hexagonal number\n    return centered_hexagonal_helper(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize variables\n    a = 1\n    b = 6\n    s = 0\n    # loop through n times\n    for i in range(n):\n        # calculate the centered hexagonal number\n        s += a * 2 + b\n        # update the values of a and b\n        a += 2\n        b += 1\n    # return the centered hexagonal number\n    return s"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Centered hexagonal numbers are the same as centered pentagonal numbers\n    # except that each hexagon is centered around its corresponding odd numbered side\n    # (instead of the center of the triangle)\n    #\n    # Thus, the nth centered hexagonal number is:\n    #\n    #     1      2      3      4      5      6      7      8      9     10\n    #     1     11     21     31     41     51     61     71     81     91     101\n    #    11    121    131    141    151    161    171    181    191    201\n    #   121   1221   1231   1241   1251   1261   1271   1281   1291   1301\n    #  131  1321  1331  1341  1351  1361  1371  1381  1391  1401  1411\n    # 1411 14221 14321 14421 14521 14621 14721 14821 14921 15021 15121\n    #\n    # For example, the 10th centered hexagonal number is 14221.\n    \n    if n <= 10:\n        return n * 15\n    else:\n        return (n - 10) * 14 + 14221"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Finding the number of rows and columns\n    rows = 1\n    while rows*rows + 1 <= n:\n        rows += 1\n    \n    cols = 2*rows - 1\n    \n    # Finding the central hexagon\n    central_hexagon = rows*rows + 1\n    \n    # Finding the offset\n    offset = n - central_hexagon\n    \n    # Finding the first row\n    first_row = [1]\n    \n    # Looping through the remaining rows\n    for i in range(offset):\n        # If the number of columns is odd, add a -1 to get centered\n        if cols % 2 == 1:\n            first_row.append(-1)\n        else:\n            first_row.append(1)\n        \n        # Updating the number of columns and rows\n        cols += 1\n        rows -= 1\n    \n    # Returning the centered hexagon number\n    return sum(first_row)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return 0\n    else:\n        num = 1\n        for i in range(1, n+1):\n            num = 6 * num + 1\n        return num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The centered hexagonal number is:\", centered_hexagonal_number(n))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1) * (2 * n + 1)) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find the nth centered hexagonal number.\n    '''\n    return ((n + 1) * (2 * n + 1)) // 3"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    base = 1.0 / 3.0\n    return int((n - 1) * base ** (n + 1))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find the nth centered hexagonal number.\n\n    Returns:\n    The nth centered hexagonal number.\n    '''\n\n    # First centered hexagonal number is 1\n    if n == 1:\n        return 1\n\n    # Calculate the (n-1)th centered hexagonal number\n    centered_hexagonal_number_minus_one = centered_hexagonal_number(n-1)\n\n    # If n is even, the (n-1)th centered hexagonal number is odd\n    if n % 2 == 0:\n        return centered_hexagonal_number_minus_one + 1\n\n    # If n is odd, the (n-1)th centered hexagonal number is even\n    else:\n        return centered_hexagonal_number_minus_one"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (3 * n - 1) // 2)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as inputs and returns a new dictionary that combines all the key-value pairs from the three dictionaries.\n    '''\n    # create a new empty dictionary to store the merged key-value pairs\n    merged_dict = {}\n    \n    # iterate through the dictionaries and add all their key-value pairs to the merged dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    \n    # return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n\n    :param dict1: The first dictionary to merge.\n    :type dict1: dict\n    :param dict2: The second dictionary to merge.\n    :type dict2: dict\n    :param dict3: The third dictionary to merge.\n    :type dict3: dict\n    :return: A single merged dictionary.\n    :rtype: dict\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and returns a single dictionary\n    that contains all the keys and values from all three dictionaries.\n    \"\"\"\n    # Merge the first two dictionaries\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n\n    # Merge the merged dictionary with the third dictionary\n    final_dict = merged_dict.copy()\n    final_dict.update(dict3)\n\n    return final_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key in merged_dict:\n            merged_dict[key].update(dict2[key])\n        else:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key in merged_dict:\n            merged_dict[key].update(dict3[key])\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(lambda: None)\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = collections.defaultdict(int)\n    \n    # iterate through the list and update the frequency of each element in the dictionary\n    for element in list1:\n        freq_dict[element] += 1\n    \n    # return the dictionary containing the frequency of each element\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    min_num = None\n    for num in range(N, 0, -1):\n        diff = num - N\n        if diff < min_diff:\n            min_diff = diff\n            min_num = num\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    max_num = N\n    for i in range(1, N):\n        if N - i < min_num:\n            min_num = N - i\n        if i < max_num:\n            max_num = i\n    return min(min_num, max_num)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    small_nums = []\n    for i in range(1, N):\n        if i < N/2:\n            small_nums.append(2*i)\n        else:\n            small_nums.append(2*i - 2)\n    \n    closest_num = float('inf')\n    for num in small_nums:\n        if abs(num - N) < closest_num:\n            closest_num = abs(num - N)\n    \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    # initialize variables\n    min_num = 0\n    max_num = 100000000000000\n    closest_num = max_num\n\n    # iterate through the numbers in the range\n    for num in range(min_num, max_num + 1):\n        # calculate the absolute difference between the current number and n\n        diff = abs(num - N)\n\n        # if the current number is closer than the previous closest number, update the variables\n        if diff < abs(closest_num - N):\n            closest_num = num\n\n    # return the closest smaller number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    for num in range(N, 0, -1):\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = 0\n    max_num = N\n\n    while True:\n        mid = (min_num + max_num) // 2\n\n        if mid < min_num:\n            max_num = mid - 1\n        elif mid > max_num:\n            min_num = mid + 1\n        else:\n            return mid"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n_list = [x for x in range(N+1)]\n    min_diff = float('inf')\n    closest_num = None\n    for i in range(len(n_list)-1):\n        diff = abs(n_list[i] - N)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = n_list[i]\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    else:\n        return closest_num(N//10)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    for i in range(N+1):\n        if smallest > i:\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for i in range(1, N):\n        if i < smallest:\n            smallest = i\n    return smallest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # initialize max_len to 0\n    max_len = 0\n\n    # loop through each word in list1\n    for word in list1:\n\n        # find the length of the current word\n        len_word = len(word)\n\n        # update max_len if current word is longer\n        if len_word > max_len:\n            max_len = len_word\n\n    # return the value of max_len\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(lst):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n    longest = 0\n    for word in lst:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    longest_word = \"\"\n\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # Initialize max length variable\n    max_length = 0\n\n    # Iterate through each word in the list\n    for word in list1:\n        # Check if the length of the word is greater than the current max length\n        if len(word) > max_length:\n            # If so, update the max length variable\n            max_length = len(word)\n\n    # Return the max length\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n    max_length = 0\n    for word in list1:\n        length = len(word)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    longest_word = \"\"\n\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    \n    # initialize variables to store length of longest word\n    longest = 0\n    word = \"\"\n    \n    # loop through the list and find the length of the longest word\n    for i in list1:\n        if len(i) > longest:\n            longest = len(i)\n            word = i\n    \n    # return the length of the longest word\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in str1 for str1 in values)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list or type(sub_str)!= str:\n        return \"Invalid input. Please provide a list of string values.\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i + len(sub_str)] == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if isinstance(str1, str) and isinstance(sub_str, str):\n        if sub_str in str1:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # create a list of all the strings in the input list\n    str_list = [str1] + sub_str\n    \n    # loop through the input list and check if the substring is present in each string\n    for string in str_list:\n        if sub_str in string:\n            return True\n    \n    # if the loop completes without returning True, the substring was not found\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str_list, sub_str):\n    \"\"\"\n    Returns a list of string values that are present as a substring in the input list `str_list`\n    \"\"\"\n    result = []\n    for str_val in str_list:\n        if sub_str in str_val:\n            result.append(str_val)\n    return result"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n < 100:\n        return False\n    elif n >= 100 and n < 1000:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Returns True if the given number is undulating, False otherwise.\n\n    A number is undulating if it has at least one even digit and all odd digits are greater than 0.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Iterate over the characters in the string\n    for char in num_str:\n        # If the character is an even digit, return True\n        if int(char) % 2 == 0:\n            return True\n\n        # If the character is an odd digit and greater than 0, return True\n        if int(char) > 0 and int(char) % 2 == 1:\n            return True\n\n    # If no even digits were found, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the given number is greater than or equal to 10\n    if n >= 10:\n        # Check if the remainder of dividing the number by 2 is 0\n        if n % 2 == 0:\n            # If the remainder is 0, then the number is undulating\n            return True\n        else:\n            # If the remainder is not 0, then the number is not undulating\n            return False\n    else:\n        # If the given number is less than 10, then it cannot be undulating\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # create a list of all possible values for the first n digits of the decimal representation of n\n    all_values = [int(digit) for digit in str(n)]\n    # sort the list of values in increasing order\n    sorted_values = sorted(all_values)\n    # check if the first value of the list is greater than or equal to the sum of the last n-1 values\n    if sorted_values[0] >= sum(sorted_values[-n+1:]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return True if n % 2 == 0 else False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Initialize variables\n    direction = 1\n    steps = 0\n    total_steps = 0\n\n    # Loop through the numbers until the total number of steps reaches n\n    while steps < n:\n        # Update the direction and total number of steps\n        if direction == 1:\n            direction = -1\n            steps += 1\n            total_steps += 1\n        elif direction == -1:\n            direction = 1\n            steps += 1\n            total_steps += 1\n        else:\n            direction = 0\n            steps += 1\n\n    # Check if the total number of steps is equal to n\n    if total_steps == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        if n % 4 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n > 0:\n        return \"The number is undulating.\"\n    else:\n        return \"The number is not undulating.\""
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        a = 1/a\n        b = -b\n    result = a\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n\nprint(power(2, 3))"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Args:\n    a: A number\n    b: An integer\n\n    Returns:\n    The value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # sort the list in ascending order based on the second element of each tuple\n    test_list.sort(key=itemgetter(1))\n    # return the index of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    minimum_index = 0\n    minimum_item = test_list[0]\n\n    for i, item in enumerate(test_list):\n        if item[1] < minimum_item[1]:\n            minimum_index = i\n            minimum_item = item\n\n    return minimum_index, minimum_item[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value in ascending order\n    test_list.sort(key=itemgetter(1))\n    # Return the first element of the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples by the second value of the tuple (using the itemgetter function)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple (first element of the sorted list)\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000000 # initialize minimum length to a very large number\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 100000  \n    for i in lst:  \n        if len(i) < min_length:  \n            min_length = len(i)  \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize min_length to positive infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Find the length of the smallest list in the given list of lists\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    # Return the length of the smallest list\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n\n    Args:\n        n: An integer\n\n    Returns:\n        int: The number of divisors of the input integer n\n    \"\"\"\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through all numbers from 1 to n-1\n    for i in range(1, n+1):\n\n        # If n is divisible by i, increment count\n        if n % i == 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return None\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    divisor_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through each element in the flattened list\n    for item in list1:\n        # Check if the element is already in the dictionary, and if it is, increment its frequency by 1\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[item] = 1\n    # Return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # flatten the list\n    flat_list = [item for sublist in list1 for item in sublist]\n    # create a dictionary to store the frequency of each element\n    freq_dict = {}\n    # iterate over the flattened list and update the frequency of each element in the dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # return the dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for elem in sublist:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                if sub_item in freq_dict:\n                    freq_dict[sub_item] += 1\n                else:\n                    freq_dict[sub_item] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Define an empty dictionary to hold the frequency of each element\n    freq_dict = {}\n\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Iterate over the flattened list\n    for item in flattened_list:\n        # If the item is not in the frequency dictionary, add it with a count of 1\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        # If the item is already in the dictionary, increment its count by 1\n        else:\n            freq_dict[item] += 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n\n    # loop through each item in the list\n    for item in list1:\n\n        # if the item is a list, flatten it and loop through each item in the flattened list\n        if type(item) == list:\n            for subitem in item:\n                # if the subitem is not in the frequency dictionary, add it and set its value to 1\n                if subitem not in freq:\n                    freq[subitem] = 1\n                # if the subitem is already in the dictionary, increment its value by 1\n                else:\n                    freq[subitem] += 1\n        # if the item is not a list, add it to the frequency dictionary and set its value to 1\n        else:\n            if item not in freq:\n                freq[item] = 1\n            else:\n                freq[item] += 1\n\n    # return the frequency dictionary\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(item)\n        else:\n            flattened_list.append(item)\n    # Create a dictionary to store frequency of each element\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in frequency_dict:\n                    frequency_dict[subitem] += 1\n                else:\n                    frequency_dict[subitem] = 1\n        else:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    product //= len(numbers)\n    return product"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # multiply all the numbers in the list\n    total = 1\n    for num in numbers:\n        total *= num\n    \n    # divide the total by the length of the list\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"\"\n    elif n % 2 == 0:\n        return decimal_to_binary(n // 2) + \"0\"\n    else:\n        return decimal_to_binary(n // 2) + \"1\"\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    # Convert decimal to binary using recursion \n    def decimal_to_binary_helper(n, binary_string=''): \n        # Base case: if n is 0, return binary_string \n        if n == 0: \n            return binary_string \n\n        # Recursive case: add the last digit of n to binary_string \n        binary_string = str(n % 2) + binary_string \n        n //= 2 \n\n        # Recursively call the function for n \n        return decimal_to_binary_helper(n, binary_string) \n\n    # Call the helper function to convert decimal to binary \n    binary_string = decimal_to_binary_helper(n) \n\n    # Remove leading zeros \n    while binary_string[0] == '0': \n        binary_string = binary_string[1:] \n\n    return binary_string "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while n > 0:\n            remainder = n % 2\n            binary = str(remainder) + binary\n            n = n // 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_num = ''\n    while n > 0: \n        remainder = n % 2\n        binary_num = str(remainder) + binary_num\n        n //= 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_string = \"\"\n    while n > 0:\n        binary_digit = n % 2\n        binary_string = str(binary_digit) + binary_string\n        n //= 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    # Initialize an empty list to store the binary digits\n    binary_digits = []\n\n    # Convert the decimal number to binary using a while loop\n    while n > 0:\n        # Get the last digit of the binary number\n        digit = n % 2\n\n        # Add the last digit to the binary_digits list\n        binary_digits.append(str(digit))\n\n        # Remove the last digit from the decimal number\n        n = n // 2\n\n    # Reverse the binary_digits list to get the binary equivalent\n    binary_digits = binary_digits[::-1]\n\n    # Convert the binary_digits list to a string and return it\n    return ''.join(binary_digits)\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the input number to a string and reverse it\n    num_str = str(num)[::-1]\n\n    # Convert the reversed number to an integer and check if it's a palindrome\n    palindrome = int(num_str)\n\n    # If it's a palindrome, find the next smallest palindrome greater than it\n    for i in range(10**(len(num_str)-1), -1, -1):\n        if str(i)[::-1] == str(i+palindrome)[::-1]:\n            return i + palindrome\n\n    # If no palindrome was found, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Check if the number is negative\n    if num < 0:\n        num = -num\n        return next_smallest_palindrome(num)\n\n    # Check if the number is even\n    if num % 2 == 0:\n        num += 1\n        return next_smallest_palindrome(num)\n\n    # Check if the number is odd and has more than 2 digits\n    if len(str(num)) > 2:\n        num += 1\n        return next_smallest_palindrome(num)\n\n    # Check if the number has 1 digit\n    if len(str(num)) == 1:\n        num += 1\n        return next_smallest_palindrome(num)\n\n    # Check if the number has 2 digits\n    if len(str(num)) == 2:\n        num = 10 * num\n        return next_smallest_palindrome(num)\n\n    # Check if the number is a palindrome\n    if str(num) == str(num)[::-1]:\n        return num\n\n    # Check if the number is greater than 999\n    if num > 999:\n        return sys.maxsize\n\n    # Find the largest palindrome less than the input number\n    prev = num - 1\n    while prev >= 100:\n        prev -= 100\n        if is_palindrome(prev):\n            return prev\n\n    # If none of the above conditions are met, return the smallest palindrome greater than the input number\n    return num + 1\n\ndef is_palindrome(num):\n    '''\n    Write a function to check if a specified integer is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(num)\n\n    # Check if the input integer is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, return the next smallest palindrome\n        for i in range(999, 100, -1):\n            if str(i*10 + num) == str(i*10 + num)[::-1]:\n                return i*10 + num\n        # If there is no next smallest palindrome, return None\n        return None\n    else:\n        # If not, check if the input integer has a corresponding palindrome with a different integer value\n        for i in range(10, 100, -1):\n            # Check if the input integer has a corresponding palindrome with a different integer value\n            if (num + i*10) % 10 == 0:\n                # If it does, return the next smallest palindrome with the same integer value\n                for j in range(999, 100, -1):\n                    if str(j*10 + num) == str(j*10 + num)[::-1]:\n                        return j*10 + num\n                # If there is no next smallest palindrome with the same integer value, return None\n                return None\n        # If there is no palindrome with a different integer value, return None\n        return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is palindrome or not.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Finds the next smallest palindrome of a specified integer.\n    \"\"\"\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        # If the number is a palindrome, increment it by 1 and check if it is a palindrome\n        next_num = num + 1\n        while not is_palindrome(next_num):\n            next_num += 1\n        return next_num\n\n    # Check if the number is odd or even and increment the appropriate digit\n    while num % 10 == 0:\n        num //= 10\n    if num % 2 == 0:\n        num += 1\n    else:\n        num -= 1\n\n    # Check if the number is odd or even and increment the appropriate digit\n    while num % 10 == 0:\n        num //= 10\n    if num % 2 == 0:\n        num += 1\n    else:\n        num -= 1\n\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_smallest_palindrome(num):\n    if num < 10:\n        return 10\n    for i in range(10, 0, -1):\n        if is_palindrome(num // i):\n            return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    is_palindrome = True\n    while is_palindrome:\n        num += 1\n        num_str = str(num)\n        reversed_num_str = num_str[::-1]\n        if int(reversed_num_str) == int(num_str):\n            is_palindrome = True\n            break\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Given an integer, returns the next smallest palindrome that can be formed by concatenating the digits of the original number.\n    \"\"\"\n    digits = list(str(num))\n    length = len(digits)\n    for i in range(length):\n        for j in range(i + 1, length):\n            if digits[i] + digits[j] == '10':\n                digits[i], digits[j] = digits[j], digits[i]\n                digits[i] += '1'\n                break\n    result = int(''.join(digits))\n    return result"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_smallest_palindrome(num):\n    # check if the number is less than 10\n    if num < 10:\n        return 10 - num\n\n    # check if the number is already a palindrome\n    if num == str(num)[::-1]:\n        return num\n\n    # reverse the number and check if it is a palindrome\n    reversed_num = int(str(num)[::-1])\n    if reversed_num == num:\n        return reversed_num\n\n    # check the digits in the number\n    for i in range(len(str(num))):\n        if int(str(num)[i]) + 1!= int(str(num)[i+1]):\n            return str(num)[0:i+1] + str(num)[i+1] + str(num)[i] + str(num)[i+1] + str(num)[i+2]\n\n    # if no palindrome found, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    def is_palindrome(n):\n        \"\"\"\n        Helper function to check if a number is a palindrome.\n        \"\"\"\n        return str(n) == str(n)[::-1]\n\n    def next_palindrome(n):\n        \"\"\"\n        Helper function to find the next palindrome.\n        \"\"\"\n        while True:\n            n += 1\n            if is_palindrome(n):\n                return n\n\n    next_num = num + 1\n    if next_num <= 9:\n        return next_num\n    else:\n        while not is_palindrome(next_num):\n            next_num = next_palindrome(next_num)\n\n        return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(n):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Finds the next smallest palindrome of a specified integer.\n    \"\"\"\n    while True:\n        if is_palindrome(num):\n            return num + 1\n        num += 1\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    next_palindrome = next_smallest_palindrome(num)\n    print(\"The next smallest palindrome of\", num, \"is\", next_palindrome)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == k:\n            return mid\n        elif arr[mid] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        raise ValueError(\"k must be a positive integer less than or equal to the length of the array\")\n    for i in range(1, n+1):\n        if i == k:\n            return arr[i-1]\n        elif i > k:\n            return arr[i-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if len(arr) < k:\n        return \"Array length is less than k.\"\n    elif k == 1:\n        return arr[0]\n    else:\n        for i in range(1, len(arr)):\n            arr[i] = arr[i] - arr[0]\n        return arr[k-1] + arr[0]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    left = 1\n    right = n\n    while left <= right:\n        pivot = (left + right) // 2\n        if k == pivot:\n            return arr[k-1]\n        elif k < pivot:\n            right = pivot - 1\n        else:\n            left = pivot + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return \"Invalid input\"\n    \n    if k == 1:\n        return arr[0]\n    \n    if k == n:\n        return arr[-1]\n    \n    if k % 2 == 0:\n        mid = k // 2\n        return kth_element(arr[:mid], k)\n    else:\n        mid = (k - 1) // 2\n        return kth_element(arr[mid+1:], k - mid - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    return word[0].lower() + word[1:].replace('_', '')"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = []\n    for i in range(len(word)):\n        if i == 0:\n            camel_case.append(word[i].lower())\n        else:\n            if word[i] == '_' or word[i].isupper():\n                camel_case.append(word[i])\n            else:\n                camel_case.append(word[i].upper())\n    return ''.join(camel_case)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    prev_char = \"\"\n    for char in word:\n        if char == \"_\":\n            camel_case += prev_char.upper()\n            prev_char = \"\"\n        else:\n            prev_char = char\n            camel_case += char.lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words based on underscores\n    words = word.split('_')\n    # Initialize a new camel case string\n    camel_case = ''\n    # Iterate over the words and convert each word to camel case\n    for i, word in enumerate(words):\n        # If the word is the first word in the list, it's already capitalized, so we don't need to capitalize it\n        if i == 0:\n            camel_case += word\n        # Otherwise, capitalize the first letter of the word and add the rest of the word to the camel case string\n        else:\n            camel_case += word.capitalize()\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i == 0 or char!= \"_\":\n            camel_case += char.upper()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), *word[1:].lower().split('_')])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    if len(word) == 0:\n        return word\n    result = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            result += char.upper()\n        elif char.isupper() and word[i-1].islower():\n            result += \"_\"\n        result += char.lower()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i > 0 and char.isupper():\n            camel_case += '_'\n        camel_case += char.lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower() + w.upper() if i == 0 else w.lower() for i, w in enumerate(word.split('_'))])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into words\n    words = word.split(\"_\")\n    # Join the words with a capital letter at the beginning\n    camel_case = words[0] + \"\".join([word.capitalize() for word in words[1:]])\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if m == 0:\n        return n\n    else:\n        return eulerian_num(n + m - 1, m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Function to find the Eulerian number a(n, m) as a function of n and m.\n    \n    Input:\n    n: int, the number of days in a week.\n    m: int, the maximum number of appointments per day.\n    \n    Output:\n    The Eulerian number a(n, m).\n    '''\n\n    # Initialize the list of appointments\n    appointments = []\n    # Initialize the list of days\n    days = []\n    \n    # Generate the list of appointments\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            appointments.append((i, j))\n    \n    # Generate the list of days\n    for i in range(1, n+1):\n        days.append(sum(j for j in range(1, m+1) if (i, j) in appointments))\n    \n    # Return the Eulerian number\n    return max(days)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the Eulerian number\n    a = 0\n    \n    # Loop over all pairs of vertices (i, j)\n    for i in range(n):\n        for j in range(m):\n            # Check if the pair is a corner of a triangle\n            if (i + j) % 2 == 0:\n                # If so, increment the Eulerian number\n                a += 1\n    \n    # Return the Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize a list to store the factors of n\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n\n    # Initialize a list to store the factors of m\n    factors2 = []\n    for i in range(1, m+1):\n        if m % i == 0:\n            factors2.append(i)\n\n    # Check if there is a common factor in the two lists\n    if len(set(factors) & set(factors2)) > 0:\n        return -1\n    \n    # Initialize a list to store the factors of the sum of n and m\n    factors3 = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i + j == n + m:\n                factors3.append(i)\n                factors3.append(j)\n    \n    # Check if there are any common factors in the sum of factors\n    if len(set(factors3) & set(factors)) > 0:\n        return -1\n    \n    # Initialize the sum of the factors of n and m to 0\n    sum_factors = 0\n\n    # Loop through the list of factors and calculate the sum\n    for i in factors:\n        sum_factors += i\n\n    # Calculate the Eulerian number by dividing n and m by the sum of factors\n    eulerian = n / sum_factors + m / sum_factors\n    \n    # Return the Eulerian number\n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [[0] * (m+1) for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 or j == 1 or (i == n and j == m):\n                a[i][j] = 1\n            else:\n                a[i][j] = a[i-1][j] + a[i][j-1] - a[i-1][j-1]\n\n    return a[-1][-1]\n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * (n - 1) // 2 * m * (m - 1) // 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m\n    elif n == 2:\n        return m * m\n    else:\n        return (eulerian_num(n-1, m) + eulerian_num(n-1, m-1)) // 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a(1,1) and a(2,1) to 1\n    a11 = 1\n    a21 = 1\n    \n    # Initialize a(1,m) and a(2,m) to 0\n    a1m = 0\n    a2m = 0\n    \n    # Initialize a(n,2) and a(n,1) to 0\n    an2 = 0\n    an1 = 0\n    \n    # Initialize a(n,n) to 1\n    ann = 1\n    \n    # Iterate through the first n-2 rows\n    for i in range(2, n-1): \n        # Compute a(i+1,j) and a(i+1,j+1) using the recurrence relation\n        aij = (a11*a21 + a1m*a2m)*ann \n        aijm1 = (a11*a2m + a1m*a21)*ann \n        aijp1 = (a11*a21 + a1m*a2m)*annn\n        \n        # Update a(i,j), a(i,j+1), a(i+1,j), and a(i+1,j+1) using the recurrence relation\n        a11 = a21\n        a21 = aij\n        a1m = a2m\n        a2m = aijm1\n        an2 = an1\n        an1 = an2\n        ann = ann*n\n        ann = annn\n        \n    # Compute a(n,n) using the recurrence relation\n    annp1 = a11*a21 + a1m*a2m*ann*n\n    annp2 = a11*a2m + a1m*a21*ann*n\n    \n    # Return the final values of a(n,n) and a(n,1)\n    return annp2, annp1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [0] * (n + 1)\n    a[1] = 1\n    \n    for i in range(2, n + 1):\n        a[i] = a[i - 1] * (i - m) // i\n    \n    return a[n]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # check if n and m are even\n    if n % 2 == 0 or m % 2 == 0:\n        print(\"Eulerian numbers can only be odd.\")\n        return\n\n    # find the number of even numbers\n    num_even = 0\n    for i in range(1, n + 1, 2):\n        if i % m == 0:\n            num_even += 1\n\n    # find the number of odd numbers\n    num_odd = 0\n    for i in range(2, n + 1, 2):\n        if i % m == 0:\n            num_odd += 1\n\n    # calculate the Eulerian number\n    eulerian = (num_even * num_odd) % n\n\n    return eulerian"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    print(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuple\n    test_tup = test_tup + test_list\n    \n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the given list to the given tuples\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuples to lists\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n\n    # Append the list to the tuple\n    test_tup.extend(test_list)\n\n    # Convert the list back to a tuple\n    test_tup = tuple(test_tup)\n\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list + test_tup\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the test_list to the test_tup\n    test_tup += test_list\n\n    # Return the modified test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert list to tuple\n    test_list = tuple(test_list)\n    \n    # Append list to tuple\n    test_tup += test_list\n    \n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuples to lists\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n\n    # Append the list to the tuple\n    test_tup.append(test_list)\n\n    # Convert the list back to a tuple\n    test_tup = tuple(test_tup)\n\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three lists as input and returns a single sorted list.\n    '''\n    # merge all three lists into one list\n    merged_list = sorted(num1 + num2 + num3)\n    \n    # remove duplicates using heapq\n    unique_list = []\n    for num in merged_list:\n        if num not in unique_list:\n            heapq.heappush(unique_list, num)\n    \n    return unique_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Merge the first two lists\n    sorted_list = num1 + num2\n    heapq.heapify(sorted_list)\n    \n    # Merge the third list with the sorted list\n    sorted_list += num3\n    heapq.heapify(sorted_list)\n    \n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n    num1 (list): A list of integers.\n    num2 (list): A list of integers.\n    num3 (list): A list of integers.\n\n    Returns:\n    list: A single sorted list of integers.\n    \"\"\"\n\n    # Merge the first two lists.\n    merged1 = heapq.merge(num1, num2)\n\n    # Merge the first two and third lists.\n    merged2 = heapq.merge(merged1, num3)\n\n    # Return the merged list.\n    return merged2"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge the three lists into one sorted list\n    merged_list = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists as input and returns a single sorted list.\n    '''\n    # convert all input lists to lists of tuples\n    num1_tuple = [(x,i) for i,x in enumerate(num1)]\n    num2_tuple = [(x,i) for i,x in enumerate(num2)]\n    num3_tuple = [(x,i) for i,x in enumerate(num3)]\n\n    # merge the three lists\n    merged_tuple = num1_tuple + num2_tuple + num3_tuple\n\n    # sort the merged list by the first element of each tuple\n    merged_sorted = sorted(merged_tuple, key=lambda x: x[0])\n\n    # create a list of the merged values\n    merged_list = [x for x in merged_sorted]\n\n    # return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single list\n    merge_list = num1 + num2 + num3\n    \n    # Sort the merged list using heapq\n    heapq.heapify(merge_list)\n    \n    # Remove duplicates from the sorted list\n    unique_list = []\n    while merge_list:\n        unique_list.append(heapq.heappop(merge_list))\n    \n    return unique_list\n"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into one sorted list\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    # merge two sorted lists\n    merged_list = []\n    i = j = 0\n    \n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n            \n    # add the remaining elements to the merged list\n    merged_list.extend(num1[i:])\n    merged_list.extend(num2[j:])\n    \n    # merge the merged list with the third list\n    merged_list.extend(num3)\n    merged_list.sort()\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Sort the combined list in ascending order\n    heapq.heapify(combined_list)\n    \n    # Merge the sorted list into a single sorted list\n    merged_list = []\n    while combined_list:\n        merged_list.append(heapq.heappop(combined_list))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three sorted lists and merges them into a single sorted list.\n    \"\"\"\n    # initialize an empty list to hold the final sorted list\n    merged_list = []\n    # merge the three lists into one using heapq\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    # while there are still elements in the three lists\n    while num1 and num2 and num3:\n        # compare the first element of each list and add the smaller one to the merged list\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    # append any remaining elements of the first list to the merged list\n    while num1:\n        merged_list.append(heapq.heappop(num1))\n    # append any remaining elements of the second list to the merged list\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n    # append any remaining elements of the third list to the merged list\n    while num3:\n        merged_list.append(heapq.heappop(num3))\n    # return the merged list\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s) % 2 == 0:\n        return 0\n    elif n == 1:\n        return sum([1 if s[i] == '0' else 0 for i in range(len(s))])\n    else:\n        num_even = odd_Equivalent(s, n-1)\n        num_odd = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                num_odd += 1\n            else:\n                num_even += 1\n        return num_odd + num_even"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize variables to keep track of odd equivalent values and count\n    count = 0\n    odd_equivalent = 0\n    # Initialize variable to keep track of the rotated string\n    rotated_string = s\n    # Loop through the number of times specified by the user\n    for i in range(n):\n        # Initialize variable to keep track of the original string\n        original_string = rotated_string\n        # Rotate the string by appending the first character to the end of the string\n        rotated_string += original_string[0]\n        # Check if the rotated string contains an odd value\n        if rotated_string.count('1') % 2 == 1:\n            # Increment the count and update the odd equivalent value\n            count += 1\n            odd_equivalent = int(rotated_string, 2)\n    # Return the number of odd equivalent values and the count of those values\n    return odd_equivalent, count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # Convert the binary string to a list of integers\n    binary_list = [int(x) for x in s]\n    \n    # Calculate the number of rotations\n    rotations = n % len(binary_list)\n    \n    # Create a list to store the odd values\n    odd_list = []\n    \n    # Iterate through the binary list and add odd values to the odd_list\n    for i in range(len(binary_list)):\n        if binary_list[i] % 2!= 0:\n            odd_list.append(binary_list[i])\n    \n    # Iterate through the odd list and return the number of odd values when rotated the given number of times\n    count = 0\n    for i in range(rotations):\n        odd_list.append(odd_list.pop(0))\n        count += 1\n    for i in range(rotations, len(odd_list)):\n        odd_list.append(odd_list.pop(-1))\n        count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # converting binary string to a list of digits\n    l = [int(i) for i in s]\n\n    # initializing count variable to 0\n    count = 0\n\n    # rotating the binary string n times\n    for i in range(n):\n        # taking the last digit of the list and adding it to the beginning of the list\n        l.insert(0,l.pop())\n\n    # iterating over the rotated binary string and checking if each digit is odd\n    for i in l:\n        if i % 2!= 0:\n            count += 1\n\n    # returning the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    :param s: binary string to rotate\n    :param n: number of times to rotate\n    :return: number of odd numbers in the rotated string\n    \"\"\"\n\n    # convert the binary string to a list of characters\n    s_list = list(s)\n\n    # initialize the count to 0\n    count = 0\n\n    # rotate the list n times\n    for i in range(n):\n        # get the middle character of the list and append it to the end\n        s_list.append(s_list.pop(len(s_list)//2))\n\n    # iterate over the list of characters and count the odd numbers\n    for char in s_list:\n        if char % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Converting the binary string to list of binary digits\n    l = [int(i) for i in s]\n    # Initializing the count variable to 0\n    count = 0\n    # Looping through the number of rotations n times\n    for i in range(n):\n        # Rotating the list of binary digits by 1 position to the right\n        l = [l[-1]] + l[:-1]\n        # Looping through the list of binary digits\n        for j in range(len(l)):\n            # If the binary digit is odd, increment the count variable\n            if l[j] == 1:\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    # initialize variables\n    result = 0\n    k = len(s) // 2\n    # rotate the binary string n times\n    for i in range(n):\n        # convert the binary string to list\n        s_list = list(s)\n        # reverse the list\n        s_list.reverse()\n        # convert the list back to string\n        s = ''.join(s_list)\n    # iterate over the binary string and count odd values\n    for i in s:\n        if int(i) % 2!= 0:\n            result += 1\n    # return the count of odd values\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    # Initialize the count variable\n    count = 0\n\n    # Convert the input string to a list of characters\n    s_list = list(s)\n\n    # Rotate the list n times\n    for _ in range(n):\n        s_list.append(s_list.pop(0))\n\n    # Count the number of odd numbers in the rotated list\n    for num in s_list:\n        if int(num) % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    This function takes a binary string s and an integer n as input and returns the number of odd numbers in s after rotating the string n times.\n    '''\n    # Convert string to list of digits\n    s = list(s)\n    # Initialize count variable to 0\n    count = 0\n    # Initialize length of binary string\n    length = len(s)\n    # Loop through each digit in the string\n    for i in range(length):\n        # If the current digit is odd, increment the count\n        if int(s[i]) % 2!= 0:\n            count += 1\n    # Rotate the string n times\n    s.extend(s[:length-1])\n    # Return the count of odd numbers after rotating\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # function to rotate a binary string n times\n    def rotate(s):\n        return s[::-1]\n    \n    # initialize the count variable\n    count = 0\n    \n    # loop n times\n    for i in range(n):\n        # rotate the binary string\n        rotated_s = rotate(s)\n        \n        # loop through the rotated binary string\n        for j in range(len(rotated_s)):\n            # if the character at the current index is odd, increment the count\n            if rotated_s[j] == '1':\n                count += 1\n    \n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                continue\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for sublist in nestedlist:\n        for item in sublist:\n            common.add(item)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n                common_elements.append(nestedlist[j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for lst in nestedlist:\n        common += lst\n    return list(set(common))"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty dictionary to store the common elements\n    common_dict = {}\n    # Iterate through the nested lists\n    for sublist in nestedlist:\n        # Iterate through the current sublist and check if each element is already in the common_dict\n        for elem in sublist:\n            if elem in common_dict:\n                # If the element is already in the dictionary, increment its count\n                common_dict[elem] += 1\n            else:\n                # If the element is not in the dictionary, add it to the dictionary and set its count to 1\n                common_dict[elem] = 1\n    # Initialize an empty set to store the common elements\n    common_set = set()\n    # Iterate through the keys of the common_dict and add them to the common_set\n    for key in common_dict:\n        if common_dict[key] == len(nestedlist):\n            common_set.add(key)\n    # Return the common elements as a list\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty set to store the common elements\n    common_set = set()\n    \n    # loop through each element in the nested list\n    for element in nestedlist:\n        # if the element is a list, then recursively call the function on it\n        if isinstance(element, list):\n            # call the function recursively on the nested list\n            common_set |= common_in_nested_lists(element)\n        # if the element is not a list, then add it to the set of common elements\n        else:\n            common_set.add(element)\n    \n    # return the set of common elements\n    return common_set"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for item in nestedlist:\n        for elem in item:\n            if elem not in common_list and elem not in item:\n                common_list.append(elem)\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist)):\n                if nestedlist[i][j] in nestedlist[k]:\n                    common_elements.append((i, j, k))\n                    break\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function takes in a nested list and returns a list containing all common elements.\n    \"\"\"\n    common = []\n    for sublist in nestedlist:\n        common.extend(set(sublist).intersection(set(common)))\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # remove spaces and convert to lowercase\n    text = text.replace(' ', '')\n    text = text.lower()\n\n    # check if the string is an integer\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if not dictionary:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    for item in list1:\n        if not item:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if not d:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert tuple to list\n    nums_list = list(nums)\n    # Initialize sum variable to 0\n    sum_num = 0\n    # Iterate through the list and add each number to the sum variable\n    for num in nums_list:\n        sum_num += num\n    # Return the sum variable\n    return sum_num"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty integer to store the sum of the numbers in the tuple\n    result = 0\n\n    # Loop through each number in the tuple and add it to the result variable\n    for num in nums:\n        result += num\n\n    # Return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert tuple to list\n    nums_list = list(nums)\n    \n    # initialize result to 0\n    result = 0\n    \n    # loop through list\n    for num in nums_list:\n        # add current number to result\n        result += num\n        \n    # return result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                pass\n            else:\n                sublist[test_list.index(sublist)] = float(element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [int, float, complex]:\n                test_list[i][j] = float(test_list[i][j])\n            elif type(test_list[i][j]) == str:\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    test_list[i][j] = None\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                continue\n            else:\n                sublist[test_list.index(sublist)] = float(item)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float_list.append(float(element))\n            except ValueError:\n                pass\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # convert the string to a list of characters\n    chars = list(string)\n    \n    # initialize an empty list to store the substrings\n    substrings = []\n    \n    # loop through the characters and add the substrings to the list\n    for i in range(len(chars)):\n        if i == 0 or chars[i]!='':\n            substrings.append(chars[i:])\n    \n    # return the list of substrings\n    return substrings"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on space character and return a list of the strings\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on the space character\n    words = string.split()\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = string.split()\n    return string_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    n = len(arr)\n    # Initialize a variable to keep track of the number of occurrences of the element we are searching for\n    count = 0\n    # Initialize the variable to store the index of the first occurrence of the element we are searching for\n    first_occurrence = -1\n    # Loop through the array\n    for i in range(n):\n        # Check if the current element is equal to the element we are searching for\n        if arr[i] == arr[first_occurrence]:\n            # If it is, increment the count of occurrences\n            count += 1\n            # If the count of occurrences is 1, update the first_occurrence variable\n            if count == 1:\n                first_occurrence = i\n        # If the current element is not equal to the element we are searching for, reset the count and first_occurrence variables\n        else:\n            count = 1\n            first_occurrence = i\n    # Check if we have found the element we are searching for\n    if count == 1:\n        return arr[first_occurrence]\n    else:\n        return \"Element not found\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the indices of each element\n    indices = {}\n\n    # Traverse the array and store the indices of each element in the dictionary\n    for i, num in enumerate(arr):\n        if num in indices:\n            indices[num].append(i)\n        else:\n            indices[num] = [i]\n\n    # Traverse the array again and check if each element appears only once\n    for num in arr:\n        if len(indices[num]) == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Find the number of occurrences of each element in the array\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Find the element that appears only once\n    for key, value in count.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize two variables to keep track of the first and last elements in the array\n    first = 0\n    last = len(arr) - 1\n\n    # Iterate through the array until the first and last pointers meet in the middle\n    while first < last:\n        # Calculate the midpoint of the array\n        mid = (first + last) // 2\n\n        # Check if the midpoint element is the only one that appears only once\n        if arr[mid] == arr[first]:\n            # If it is, return the midpoint element as the only element\n            return arr[mid]\n\n        # If the midpoint element appears more than once, update the last pointer to mid\n        elif arr[mid] < arr[first]:\n            last = mid\n        else:\n            first = mid\n\n    # If the array is exhausted and the last element does not appear only once, return None\n    if arr[last] == arr[first]:\n        return None\n    else:\n        return arr[last]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # loop through the array\n    for i in range(len(arr)):\n        # if the current element is the same as the next element, it appears only once\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    # initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # loop through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # loop through the array again and check if each element appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num\n\n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate through the array and update the frequency count in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary and find the key with frequency count 1\n    for key, value in freq.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                return arr[i]\n    return \"Element not found\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i!= arr[i]:\n            return arr[i]\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i]*list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = max(list1[i][0]*list1[j][1], list1[i][1]*list1[j][0])\n            max_product = max(max_product, abs(product))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    :param lst: a list of tuples of numbers\n    :return: the maximum absolute product between numbers in pairs of tuples within the list\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            pair = lst[i], lst[j]\n            product = abs(pair[0] * pair[1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(lst):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    def abs_product(a, b):\n        return abs(a) * abs(b)\n\n    max_product = float('-inf')\n\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = abs_product(lst[i][1], lst[j][1])\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    max_tuple = None\n    \n    for tuple1 in list1:\n        product = 1\n        for num in tuple1:\n            if num < 0:\n                num = -num\n            product *= num\n        if product > max_product:\n            max_product = product\n            max_tuple = tuple1\n            \n    return max_tuple, max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize variables\n    max_product = float('-inf')\n    max_product_pair = []\n\n    # Iterate over the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute difference between the first and second elements of the pair\n            diff = abs(list1[i][0] - list1[j][0])\n            # Update the maximum absolute product and its corresponding pair if necessary\n            if diff > max_product:\n                max_product = diff\n                max_product_pair = [(list1[i][0], list1[j][0])]\n            elif diff == max_product:\n                # If the absolute difference is equal to the maximum, add the pair to the list if it's not already there\n                if (list1[i][0], list1[j][0]) not in max_product_pair:\n                    max_product_pair.append((list1[i][0], list1[j][0]))\n\n    # Return the maximum absolute product and its corresponding pair\n    return max_product, max_product_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            diff = abs(list1[i][1] - list1[j][1])\n            product = list1[i][0] * list1[j][0]\n            if diff * product > max_product:\n                max_product = diff * product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num in amicable_numbers:\n            continue\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    if num < 10:\n        return False\n    for i in range(1, int(num/2)+1):\n        if num % i == 0:\n            return False\n    return True\n\nlimit = 10000\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is\", amicable_numbers_sum(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    This function takes a limit as input and returns the sum of all amicable numbers from 1 to that limit.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    This function takes a number as input and returns True if it is an amicable number, else False.\n    '''\n    if num < 12:\n        return False\n    sum_of_divisors = sum([i for i in range(1, int(num**0.5)+1) if (num % i == 0) and (num // i == i)])\n    return num == sum_of_divisors\n\nlimit = 10000\nprint(sum_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit):\n        if i not in amicable_numbers:\n            for j in range(2, limit):\n                if j not in amicable_numbers and i + j == limit:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(j)\n                    if i == j:\n                        continue\n                    break\n\n    amicable_numbers.sort()\n    amicable_sum = 0\n    for i in range(len(amicable_numbers)):\n        for j in range(i + 1, len(amicable_numbers)):\n            amicable_sum += amicable_numbers[i] + amicable_numbers[j]\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if num == sum_of_proper_divisors(num):\n            amicable_sum += num\n    return amicable_sum\n\ndef sum_of_proper_divisors(num):\n    '''\n    Write a function to find the sum of all proper divisors of a given number.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            sum_of_divisors += i + num//i\n    return sum_of_divisors"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_amicable(n):\n    \"\"\"\n    Check if a given number is amicable or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    a, b = 0, 1\n    while b <= n:\n        if b == n:\n            return True\n        elif n % b == 0:\n            return False\n        else:\n            a, b = b, a + b\n    return True\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i) and is_amicable(limit - i):\n            sum += i + limit - i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_amicable_pair(num):\n    \"\"\"\n    A helper function to check if a given number is amicable.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_of_amicable = 0\n    for num in range(1, limit + 1):\n        if is_amicable_pair(num) and is_amicable_pair(num - 2):\n            sum_of_amicable += num\n    return sum_of_amicable\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(2, limit+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(n):\n    \"\"\"\n    Check if a number is amicable or not.\n    \"\"\"\n    a = 1\n    b = n\n    while b > 1:\n        a, b = b, a % b\n    return a == n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # initialize a dictionary to store the sum of each pair of numbers\n    amicable_sum_dict = {}\n    \n    # iterate over numbers from 1 to limit\n    for i in range(1, limit+1):\n        # calculate the sum of the pair of numbers\n        pair_sum = i + sum_of_proper_divisors(i)\n        # check if the sum is a proper divisor of the pair of numbers\n        if is_proper_divisor(pair_sum, i):\n            # if the sum is a proper divisor, add the pair to the dictionary\n            amicable_sum_dict[i] = pair_sum\n            amicable_sum_dict[pair_sum] = i\n    \n    # iterate over the keys of the dictionary and add the values to a list\n    amicable_sums = [value for key, value in amicable_sum_dict.items()]\n    \n    # return the sum of all amicable numbers\n    return sum(amicable_sums)\n\n\ndef sum_of_proper_divisors(num):\n    \"\"\"\n    Write a function to calculate the sum of proper divisors of a number.\n    \"\"\"\n    # initialize a dictionary to store the sum of each proper divisor of num\n    proper_divisor_dict = {}\n    \n    # iterate over the numbers from 1 to the square root of num\n    for i in range(1, int(num**0.5)+1):\n        # check if num is divisible by i\n        if num % i == 0:\n            # if it is, calculate the sum of all divisors of num\n            divisors_sum = (i**2 + num//i**2) * i\n            # add the sum to the dictionary\n            proper_divisor_dict[divisors_sum] = i\n    \n    # iterate over the keys of the dictionary and add the values to a list\n    proper_divisor_sums = [value for key, value in proper_divisor_dict.items()]\n    \n    # return the sum of all proper divisors\n    return sum(proper_divisor_sums)\n\n\ndef is_proper_divisor(num, div_by):\n    \"\"\"\n    Write a function to check if a number is a proper divisor of another number.\n    \"\"\"\n    # calculate the sum of all divisors of div_by\n    divisors_sum = (div_by**2 + num//div_by**2) * div_by\n    # check if num is a proper divisor of div_by\n    if divisors_sum == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function takes a limit and calculates the sum of all amicable numbers from 1 to the limit.\n    \"\"\"\n    a = 1\n    b = 2\n    amicable_sum = 0\n    while b <= limit:\n        if b == 1:\n            a += 1\n            b = a\n            continue\n        if b % 2 == 0:\n            if is_prime(b):\n                a += b\n                b += a\n                amicable_sum += b\n            else:\n                b += 1\n        else:\n            if is_prime(b):\n                a += b\n                b += a\n                amicable_sum += b\n            else:\n                b += 1\n    return amicable_sum\n\n\ndef is_prime(n):\n    \"\"\"\n    This function checks if a given number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_amicable(n):\n    \"\"\"\n    Check if a number is amicable or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable(limit):\n    \"\"\"\n    Find the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if is_amicable(i) and is_amicable(i+2):\n            amicable_sum += i+2\n    return amicable_sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a*b)\n    return float(angle)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    This function takes two complex numbers as inputs and returns their angle.\n    '''\n    complex_num = a + bj*cmath.sqrt(a**2 + b**2)\n    angle = cmath.phase(complex_num)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Calculate the angle of a complex number a + bi.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return round(angle.imag, 4)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle*180/cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    count = [0] * 2\n    max_diff = 0\n    \n    for char in string:\n        if char == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n        \n        diff = abs(count[0] - count[1])\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n    count = [0] * 2\n    \n    for i in range(n):\n        if string[i] == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n        \n        diff = abs(count[0] - count[1])\n        max_diff = max(max_diff, diff)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        count_zeros = 0\n        count_ones = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_zeros += 1\n            else:\n                count_ones += 1\n            diff = abs(count_zeros - count_ones)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    zeros = 0\n    ones = 0\n    result = 0\n    \n    for i in range(n):\n        if string[i] == '0':\n            zeros += 1\n            ones = 0\n        elif string[i] == '1':\n            ones += 1\n            zeros = 0\n        \n        diff = abs(ones - zeros)\n        \n        if diff > result:\n            result = diff\n    \n    return result"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    binary_string = \"\"\n    for char in string:\n        if char == \"0\":\n            binary_string += \"0\"\n        elif char == \"1\":\n            binary_string += \"1\"\n    max_diff = 0\n    for i in range(len(binary_string)):\n        for j in range(i+1, len(binary_string)+1):\n            sub_str = binary_string[i:j]\n            zero_count = sub_str.count(\"0\")\n            one_count = sub_str.count(\"1\")\n            if zero_count > one_count:\n                diff = zero_count - one_count\n            else:\n                diff = one_count - zero_count\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    max_diff = 0\n    length = len(string)\n\n    for i in range(length):\n        count = 0\n        for j in range(i+1, length+1):\n            if string[j] == '0':\n                count += 1\n            else:\n                break\n        if count > 0:\n            for j in range(i+1, length+1):\n                if string[j] == '1':\n                    count += 1\n                else:\n                    break\n            diff = count - 1\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # create a dictionary to store the count of 0s and 1s in each substring of the given binary string\n    count = {}\n    for i in range(len(string)):\n        if string[i] == '0':\n            if i-1 in count:\n                count[i-1] += 1\n            else:\n                count[i-1] = 1\n        else:\n            if i-1 in count:\n                count[i-1] += 1\n            else:\n                count[i-1] = 0\n\n    # calculate the maximum difference between the count of 0s and count of 1s in each substring\n    max_diff = 0\n    for i in range(len(string)):\n        if i-1 in count:\n            diff = count[i-1] - count[i]\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Create a dictionary to store the count of 0s and 1s in each substring\n    substrings = {}\n\n    # Iterate through each substring of the string\n    for i in range(len(string)):\n        # Calculate the current substring\n        substring = string[i:i+len(string)//2+1]\n\n        # If the substring is not already in the dictionary, add it and set its count to 1\n        if substring not in substrings:\n            substrings[substring] = 1\n        # Otherwise, increment its count\n        else:\n            substrings[substring] += 1\n\n    # Initialize the maximum difference to be a large number\n    max_diff = 0\n\n    # Iterate through each substring in the dictionary\n    for substring in substrings:\n        # Calculate the difference between the count of 0s and 1s in the substring\n        diff = sum(substrings[substring]) - 2 * len(substrings[substring])\n\n        # Update the maximum difference if the current difference is larger\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # create a binary version of the string\n    binary_string = bin(int(string, 2))[2:]\n    \n    # initialize variables\n    max_diff = 0\n    current_diff = 0\n    \n    # iterate over the binary string\n    for i in range(len(binary_string)):\n        \n        # check if the current digit is 0\n        if binary_string[i] == '0':\n            \n            # if it is, check the next digit\n            if i+1 < len(binary_string) and binary_string[i+1] == '0':\n                current_diff += 1\n            elif i+1 < len(binary_string) and binary_string[i+1] == '1':\n                current_diff = 0\n            else:\n                current_diff = 1\n        \n        # check if the current digit is 1\n        elif binary_string[i] == '1':\n            \n            # if it is, check the next digit\n            if i+1 < len(binary_string) and binary_string[i+1] == '0':\n                current_diff = 0\n            elif i+1 < len(binary_string) and binary_string[i+1] == '1':\n                current_diff += 1\n            else:\n                current_diff = 1\n        \n        # if the current digit is a 0 or a 1, check if it is the end of a sub-string\n        if i+1 >= len(binary_string) or (i+1 < len(binary_string) and binary_string[i+1] in ['0', '1']):\n            \n            # update the maximum difference if necessary\n            if current_diff > max_diff:\n                max_diff = current_diff\n    \n    # return the maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    count_0s = 0\n    count_1s = 0\n\n    for bit in string:\n        if bit == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n\n    max_diff = max(count_0s, count_1s)\n\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Calculate the sum of common divisors using the Euclidean algorithm\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Calculate the sum of common divisors\n    common_divisors = set()\n    for i in range(1, a):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n\n    # Find the sum of the common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_common_divisors(num1, num2):\n    \"\"\"\n    Finds the sum of common divisors of two given numbers using the Euclidean algorithm.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        Finds the greatest common divisor of two numbers using the Euclidean algorithm.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        \"\"\"\n        Finds the lowest common multiple of two numbers using the GCD formula.\n        \"\"\"\n        return (a * b) // gcd(a, b)\n\n    def common_divisors(num1, num2):\n        \"\"\"\n        Finds the common divisors of two numbers using the Euclidean algorithm.\n        \"\"\"\n        lcm_num = lcm(num1, num2)\n        return [lcm_num // div for div in range(1, lcm_num + 1) if lcm_num % div == 0]\n\n    divisors1 = common_divisors(num1, num2)\n    divisors2 = common_divisors(num2, num1)\n\n    return sum(divisors1, divisors2)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # find the gcd of a and b\n    gcd = gcd(a, b)\n    # initialize a variable to hold the sum of common divisors of a and b\n    common_divisor_sum = 0\n    # loop through all possible divisors of a and b (from 1 to the smaller of a and b)\n    for divisor in range(1, min(a, b) + 1):\n        # if the divisor is a common divisor of a and b, add it to the common_divisor_sum\n        if gcd == divisor:\n            common_divisor_sum += divisor\n    return common_divisor_sum\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # function to find common divisors of two numbers\n    def common_divisors(a, b):\n        divisors = []\n        for i in range(1, min(a, b) + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    # find common divisors of given numbers\n    div_a = common_divisors(a, b)\n    div_b = common_divisors(b, a)\n    \n    # find the sum of common divisors\n    sum_div = sum(div_a + div_b)\n    \n    return sum_div"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the largest common divisor of a and b\n    gcd = max(a, b)\n    # Initialize a variable to store the sum of common divisors\n    sum_of_common_divisors = 0\n    # Loop through the numbers from 1 to the largest common divisor\n    for i in range(1, gcd+1):\n        # If i is a divisor of a and b, add it to the sum of common divisors\n        if (a % i == 0) and (b % i == 0):\n            sum_of_common_divisors += i\n    # Return the sum of common divisors\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # find the largest common divisor of a and b\n    while b!= 0:\n        temp = b\n        b = a % b\n        a = temp\n\n    # find the sum of all common divisors of a and b\n    sum = 0\n    i = 1\n    while a % i == 0 and b % i == 0:\n        sum += i\n        i += 1\n\n    return sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Function to check if a number is divisible by any number in a list\n    def is_divisible(number, divisors):\n        return any(number % divisor == 0 for divisor in divisors)\n\n    # Function to find the common divisors of two numbers\n    def find_common_divisors(a, b):\n        divisors = [i for i in range(1, min(a, b) + 1) if a % i == 0 or b % i == 0]\n        return divisors\n\n    # Find the common divisors of a and b\n    common_divisors = find_common_divisors(a, b)\n\n    # Check if a is divisible by any common divisor of b\n    if is_divisible(a, common_divisors):\n        return sum(a, b) - a\n    else:\n        return sum(a, b) - b\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n\n    Parameters:\n    a (int): the first number\n    b (int): the second number\n\n    Returns:\n    int: the sum of the common divisors of a and b\n    \"\"\"\n    # Find the set of divisors of a\n    divisors_of_a = set()\n    for i in range(1, a + 1):\n        if a % i == 0:\n            divisors_of_a.add(i)\n\n    # Find the set of divisors of b\n    divisors_of_b = set()\n    for i in range(1, b + 1):\n        if b % i == 0:\n            divisors_of_b.add(i)\n\n    # Find the common divisors of a and b\n    common_divisors = divisors_of_a & divisors_of_b\n\n    # Calculate the sum of common divisors\n    result = sum(common_divisors)\n\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function takes two integers as input and returns the sum of their common divisors.\n    '''\n    # Finding the set of divisors of a and b\n    divisors_a = set(set(divisors(a)) - {1})\n    divisors_b = set(set(divisors(b)) - {1})\n\n    # Finding the common divisors\n    common_divisors = divisors_a.intersection(divisors_b)\n\n    # Returning the sum of common divisors\n    return sum(common_divisors)\n\ndef divisors(n):\n    '''\n    This function returns a list of all the divisors of a given integer n.\n    '''\n    # Base case\n    if n <= 1:\n        return [1]\n\n    # Finding the set of divisors of n\n    divisors_set = set()\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisors_set.add(i)\n    if n > 1:\n        divisors_set.add(n)\n\n    # Converting the set of divisors to a list\n    return sorted(list(divisors_set))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Initialize variables to store sum of common divisors\n    common_divisor_sum = 0\n\n    # Find the common divisors of the given numbers\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisor_sum += i\n\n    # Return the sum of common divisors\n    return common_divisor_sum"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    for i in range(y):\n        product += x\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    product = 0\n    carry = 0\n    \n    while y!= 0:\n        temp = x & y\n        x = (x ^ y) << 1\n        y = temp << 1\n        product += temp << 1\n        carry = x >> 31\n        \n    if carry == 1:\n        product += 1\n    \n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        carry = x & y\n        result = result + carry\n        x = x ^ y\n        y = carry << 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        # get the last bit of y\n        last_bit = y & 1\n        \n        # if the last bit is 1, add x to the result\n        if last_bit == 1:\n            result += x\n            \n        # shift y one bit to the right\n        y >>= 1\n        \n        # add the carry if necessary\n        if y & 1 == 1:\n            result += x\n            \n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    words = []\n    for word in str:\n        if len(word) > n:\n            words.append(word)\n    return words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize the sum of the diagonal elements as 0\n    diagonal_sum = 0\n\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of the diagonal elements\n    for i in range(len(my_matrix)):\n        diagonal_sum += my_matrix[i][i]\n\n    # Check if the sum of the diagonal elements is equal to the sum of the elements in the matrix\n    if diagonal_sum!= sum(sum(row) for row in my_matrix):\n        return False\n\n    # Initialize a variable to store the sum of the sub-matrices\n    sub_matrix_sum = 0\n\n    # Check if each sub-matrix has the same sum\n    for i in range(3):\n        for j in range(3):\n            sub_matrix_sum += my_matrix[i][j]\n            sub_matrix_sum += my_matrix[j][i]\n\n    if sub_matrix_sum!= len(my_matrix) * 3:\n        return False\n\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Calculate the sum of each row, column and diagonal\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix[0]))) for j in range(len(my_matrix[0]))]\n    diag_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n\n    # Check if the row and column sums are equal to the diagonal sum\n    if row_sums == col_sums == diag_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    \n    # check for square dimensions\n    if rows!= cols:\n        return False\n    \n    # check for numbers in each row and column\n    for i in range(rows):\n        for j in range(cols):\n            if not (1 <= my_matrix[i][j] <= cols * rows):\n                return False\n    \n    # check for numbers in the main diagonal\n    for i in range(rows):\n        if not (1 <= my_matrix[i][i] <= cols * rows):\n            return False\n    \n    # check for numbers in the secondary diagonal\n    for i in range(rows):\n        if not (1 <= my_matrix[i][rows-i-1] <= cols * rows):\n            return False\n    \n    # all checks passed\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    magic_sum = 0\n\n    for i in range(rows):\n        for j in range(cols):\n            magic_sum += my_matrix[i][j]\n\n    if magic_sum == 0:\n        return True\n\n    magic_sum = 0\n    for i in range(rows):\n        magic_sum += my_matrix[i][0] + my_matrix[i][cols-1]\n\n    if magic_sum == 0:\n        return True\n\n    magic_sum = 0\n    for j in range(cols):\n        magic_sum += my_matrix[0][j] + my_matrix[rows-1][j]\n\n    if magic_sum == 0:\n        return True\n\n    for i in range(rows-1):\n        for j in range(cols-1):\n            magic_sum += my_matrix[i][j]\n\n    if magic_sum == 0:\n        return True\n\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    magic_sum = 0\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] == 0:\n                magic_sum += 1\n                for k in range(rows):\n                    for l in range(cols):\n                        if (i!= k) and (j!= l) and (my_matrix[k][l] == 0):\n                            my_matrix[k][l] = magic_sum\n                            magic_sum += 1\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] == magic_sum:\n                continue\n            else:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if all the rows and columns have the same sum\n    row_sum = sum(row)\n    col_sum = sum(col)\n    for i in range(len(my_matrix)):\n        if my_matrix[i][0]!= my_matrix[i][1]!= my_matrix[i][2]!= row_sum:\n            return False\n\n    # Check if the matrix has the properties of a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if i == j:\n                for k in range(len(my_matrix)):\n                    if my_matrix[i][k] == my_matrix[k][j]!= row_sum - col_sum:\n                        return False\n            elif j == k:\n                for l in range(len(my_matrix)):\n                    if my_matrix[l][j] == my_matrix[i][l]!= col_sum - row_sum:\n                        return False\n            elif k == l:\n                for m in range(len(my_matrix)):\n                    if my_matrix[m][k] == my_matrix[l][m]!= row_sum - col_sum:\n                        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix contains all the same numbers\n    for i in range(len(my_matrix)):\n        if len(set(my_matrix[i]))!= 1:\n            return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j] for j in range(len(my_matrix)))\n        diag_sum = sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix)))\n        if row_sum == col_sum == diag_sum:\n            return True\n    \n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # check if all rows have the same length\n    for row in my_matrix:\n        if len(row)!= n:\n            return False\n    # check if all columns have the same length\n    for col in zip(*my_matrix):\n        if len(col)!= n:\n            return False\n    # check if the matrix is a magic square\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= (i+j+1) % n + 1:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    # check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # check if all rows are the same\n    for i in range(len(my_matrix)):\n        if my_matrix[i]!= my_matrix[0]:\n            return False\n\n    # check if all columns are the same\n    for j in range(len(my_matrix[0])):\n        col = [row[j] for row in my_matrix]\n        if col!= col[0]:\n            return False\n\n    # check if there is a sub-square that sums to the product of the matrix's diagonal elements\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # get the sub-square of size (i+1) x (j+1)\n            sub_matrix = []\n            for k in range(i, i+i+1):\n                for l in range(j, j+j+1):\n                    sub_matrix.append(my_matrix[k][l])\n            # check if the sub-square sums to the product of the diagonal elements\n            sub_sum = sum(sub_matrix)\n            if sub_sum!= sum(my_matrix[i][i] for i in range(len(my_matrix))):\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    for i in range(size):\n        row_sum = 0\n        col_sum = 0\n        for j in range(size):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum!= size * (size - 1) // 2 or col_sum!= size * (size - 1) // 2:\n            return False\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        frequency[num] += 1\n        if frequency[num] > max_freq:\n            max_freq = frequency[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the count of each item in the list\n    freq = defaultdict(int)\n\n    # Iterate through the list and update the count in the defaultdict\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_item = None\n    max_count = 0\n    for item, count in freq.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with maximum frequency and return its value\n    return max(freq, key=freq.get)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    # create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_map[num] += 1\n        if freq_map[num] > max_freq:\n            max_freq = freq_map[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        frequency[num] += 1\n\n    for item, count in frequency.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_count = max(freq.values())\n    result = None\n    for key, value in freq.items():\n        if value == max_count:\n            result = key\n    return result"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        \n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a defaultdict to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq_dict.values())\n    max_num = [num for num, freq in freq_dict.items() if freq == max_freq][0]\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = -1\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''\n    for char in str1:\n        if char in vowels:\n            result = char + result\n        else:\n            result = result + char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    vowel_str = ''\n    for char in str1:\n        if char in vowels:\n            vowel_count += 1\n            if vowel_count % 2 == 0:\n                vowel_str += char\n    return vowel_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            new_str = new_str + str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = \"\"\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in string:\n        if char.lower() not in vowels:\n            result.append(char)\n    result = ''.join(result[::-1])\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"AEIOUaeiou\"\n    reverse_str = \"\"\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            reverse_str += str1[i]\n    return reverse_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_count = 0\n    result = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            vowel_count += 1\n            result = char + result\n        else:\n            result = char + result\n    if vowel_count % 2 == 0:\n        return result[::-1]\n    else:\n        return result[::-1][:-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char not in vowels:\n            new_str += char\n    new_str = new_str[::-1]\n    return new_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for item in tup1:\n        string += str(item) + \" \"\n    return string[:-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Convert a tuple to a string.\n\n    :param tup1: the tuple to convert to a string\n    :type tup1: tuple\n\n    :return: the string representation of the input tuple\n    :rtype: str\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return''.join(str(x) for x in tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_nums = [num for num in nums if num < 0]\n    return sum(neg_nums)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negatives = [num for num in nums if num < 0]\n    return sum(negatives)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Calculate the first two hexagonal numbers and store them\n    a = 1\n    b = 6\n\n    # Calculate the nth hexagonal number and store it\n    while n > 0:\n        c = a + b\n        print(f\"a = {a}, b = {b}, c = {c}\")\n        a = b\n        b = c\n        n -= 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n    c = a + b\n    while n > 0:\n        print(c, end=\" \")\n        a, b = b, a + b\n        n -= 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (2 * (n**2) + 1) * (n + 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    a, b, c = 1, 1, 2\n    for _ in range(2, n+1):\n        a, b, c = b, c, a+b+c\n    return a"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 2 * n * (n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # initialize the first two hexagonal numbers\n    a = 1\n    b = 6\n    \n    # loop through the remaining hexagonal numbers and add each to the running sum\n    for i in range(2, n+1):\n        c = (a+b)//2\n        print(f'{i} hexagonal number is {c}')\n        a, b = b, c"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the initial values\n    a = 1\n    b = 1\n    c = 0\n    \n    # Loop through the nth hexagon\n    for i in range(1, n+1):\n        # Calculate the next hexagon\n        c = (a + b) * (3**0.5)\n        \n        # Print the next hexagon\n        print(\"Hexagon\", i, \":\", a, b, c)\n        \n        # Update the values for the next iteration\n        a = b\n        b = c"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num = 6*num + i\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # The formula for nth hexagonal number is H = 2 * (n * (n - 1) + 1)\n    return 2 * (n * (n - 1) + 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create an array of boolean values to store the result\n    result = array('B', [0]*len(nums))\n\n    # iterate over the array and set the corresponding value in the result array to True if the number is zero\n    for num in nums:\n        if num == 0:\n            result[nums.index(num)] = True\n\n    # iterate over the result array and calculate the ratio of zeroes to non-zeroes\n    count_zero = 0\n    count_non_zero = 0\n    for b in result:\n        if b == 1:\n            count_non_zero += 1\n        else:\n            count_zero += 1\n\n    ratio = count_zero / count_non_zero\n\n    # return the ratio as a float rounded to 2 decimal places\n    return round(ratio, 2)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    ratio = non_zero_count / zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zero = array('i')\n    num_non_zero = array('i')\n    for num in nums:\n        if num == 0:\n            num_zero.append(1)\n        else:\n            num_non_zero.append(1)\n    ratio = float(num_zero[0]) / float(num_non_zero[0])\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums)) # create an array to store the count of zeroes\n    non_zero_count = array('i', [0]*len(nums)) # create an array to store the count of non-zeroes\n    \n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n        else:\n            non_zero_count[nums.index(num)] += 1\n    \n    # calculate the ratio of zeroes to non-zeroes\n    if sum(zero_count) == 0: # if there are no zeroes, return 0\n        return 0\n    \n    return sum(non_zero_count) / sum(zero_count)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Initialize an array to store the number of zeroes and non-zeroes\n    zero_count_arr = array('i', [0, 0])\n\n    # Iterate through the array and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zero_count_arr[0] += 1\n        else:\n            zero_count_arr[1] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_count_ratio = zero_count_arr[0] / zero_count_arr[1]\n\n    return zero_count_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    \n    non_zero_count = array('i', [0] * len(nums))\n    for i in range(len(nums)):\n        non_zero_count[i] = len(nums) - zero_count[i]\n    \n    non_zero_ratio = [non_zero_count[i] / (i + 1) for i in range(len(non_zero_count))]\n    \n    return non_zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeroes = sum(1 for num in nums if num!= 0)\n    zeroes = len(nums) - non_zeroes\n    ratio = zeroes / non_zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = len(nums) - sum(zero_count)\n    ratio = non_zero_count / zero_count[zero_count.index(max(zero_count))]\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_ones = 0\n    \n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_ones += 1\n            \n    ratio = num_zeroes / num_ones\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n\n    return zeros / non_zeros"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize a variable to keep track of the sum of powers of 2\n    power_sum = 0\n    # Check if the given number is less than 2\n    if n < 2:\n        return \"Number should be greater than or equal to 2\"\n    # Iterate through the odd numbers starting from 3\n    for i in range(3, n+1, 2):\n        # Check if the given number can be represented as sum of powers of 2\n        if power_sum == 0:\n            power_sum = i\n        elif i == 2**i:\n            power_sum += i\n        else:\n            return \"The given number can't be represented as sum of non-zero powers of 2\"\n    # If the number is divisible by 4, then it can be represented as sum of powers of 2\n    if n % 4 == 0:\n        return True\n    else:\n        return \"The given number can't be represented as sum of non-zero powers of 2\""
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # First, check if n is even\n    if n % 2 == 0:\n        print(\"The number cannot be represented as sum of non-zero powers of 2.\")\n        return\n    \n    # Second, check if n is a power of 2\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            print(\"The number cannot be represented as sum of non-zero powers of 2.\")\n            return\n    \n    # Third, check if n is equal to 1\n    if n == 1:\n        print(\"The number can be represented as sum of non-zero powers of 2.\")"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return False\n    \n    for i in range(5, n+1):\n        if (i % 2 == 0) and (i >= 4):\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize the sum of powers of 2 to 0\n    power = 0\n    \n    # Loop through each bit in the binary representation of n\n    for i in range(8):\n        # If the current bit is 1, add 2^power to the sum of powers of 2\n        if n & (1 << i):\n            power += 2**i\n        \n        # If the sum of powers of 2 becomes greater than or equal to n, then the number cannot be represented as sum of powers of 2\n        if power >= n:\n            return False\n    \n    # If the loop completes without returning False, then the number can be represented as sum of powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n = n & (n - 1)\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_Power_Of_Two(x):\n        '''\n        Write a python function to check whether a given number is a power of 2 or not.\n        '''\n        if x == 1:\n            return True\n        elif x == 0:\n            return False\n        else:\n            return (x & (x-1)) == 0\n\n    def is_Sum_Of_Non_Zero_Powers_Of_Two(n, power):\n        '''\n        Write a python function to check whether a given number is a sum of non-zero powers of 2 or not.\n        '''\n        if n < power:\n            return False\n        else:\n            return is_Power_Of_Two(n - power)\n\n    count = 0\n    power = 1\n\n    while power <= n:\n        if is_Sum_Of_Non_Zero_Powers_Of_Two(n, power):\n            return True\n        count += 1\n        power <<= 1\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # convert the given number to binary\n    binary = bin(n)[2:]\n    # count the number of non-zero digits in the binary representation\n    count = len([x for x in binary if x == '1'])\n    # check if the count is odd or even\n    if count % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0:\n        return False\n\n    power_of_two = 1\n    power_sum = 0\n\n    while power_sum < n:\n        power_sum += power_of_two\n        power_of_two *= 2\n\n    if power_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    \n    count = 0\n    temp = n\n    \n    while temp!= 0:\n        count += 1\n        temp //= 2\n    \n    # Check if the number can be represented as sum of non-zero powers of 2\n    if count == 1:\n        return True\n    elif count % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n!= 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count == 1"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # use formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r #formula to find circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of the circle with radius\", r, \"is\", circumference, \"units.\")"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r #pi = 3.14"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n\n    Parameters:\n    r (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten_helper(lst):\n        res = []\n        for item in lst:\n            if isinstance(item, list):\n                res += flatten_helper(item)\n            else:\n                res.append(item)\n        return res\n    \n    flattened_list = flatten_helper(test_list)\n    flattened_set = set(flattened_list)\n    return flattened_set"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for subitem in item:\n            flattened_list.append(subitem)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for sub_item in item:\n            flattened_list.append(sub_item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    unique_list = list(set(flattened_list))\n    return unique_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty list to store the flattened numbers\n    flattened = []\n    \n    # Iterate over each sublist in the original list\n    for sublist in test_list:\n        # Iterate over each number in the sublist\n        for num in sublist:\n            # Append each number to the flattened list\n            flattened.append(num)\n    \n    # Return the flattened list\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flatten_list.append(item)\n    return flatten_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(sum(test_list, []))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, list):\n                flat_list.extend(item)\n            elif isinstance(item, (int, float)):\n                flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Choose the largest unsorted element as pivot\n        pivot = nums[i]\n        # Find the index of the smallest element greater than pivot\n        j = i\n        while j < n:\n            if nums[j] < pivot:\n                j += 1\n            else:\n                break\n        # Swap the pivot with the smallest element greater than pivot\n        nums[i], nums[j] = nums[j], nums[i]\n        # Reverse the remaining unsorted part of the array from i+1 to n-1\n        for k in range(i+1, n):\n            if nums[k] < nums[i]:\n                nums[k], nums[i] = nums[i], nums[k]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Use Bubble Sort algorithm to sort the list\n    for i in range(n):\n        for j in range(0, n-i-1):\n            # Swap adjacent elements if they are in the wrong order\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Start with the largest element\n    start = len(nums) - 1\n    while start > 0:\n        # Find the index of the next element to swap with\n        max_index = start\n        for i in range(start):\n            if nums[i] < nums[max_index]:\n                max_index = i\n        \n        # Swap the elements\n        nums[start], nums[max_index] = nums[max_index], nums[start]\n        \n        # Decrement the start index and repeat the process\n        start -= 1\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def helper(arr, k):\n        if k == 1:\n            return\n\n        helper(arr, k-1)\n\n        # Find the maximum element in the unsorted part\n        max_idx = 0\n        for i in range(1, k):\n            if arr[i] > arr[max_idx]:\n                max_idx = i\n\n        # Swap the maximum element with the end element\n        arr[k-1], arr[max_idx] = arr[max_idx], arr[k-1]\n\n    n = len(nums)\n\n    # Sort the array using a variation of the \"pancake sort\" algorithm\n    for k in range(n, 1, -1):\n        helper(nums, k)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Get the length of the list\n    n = len(nums)\n\n    # Iterate over the length of the list\n    for i in range(n):\n\n        # Find the largest element in the unsorted part of the list\n        largest = nums[i]\n        j = i\n        while j < n - 1:\n            if nums[j] > largest:\n                largest = nums[j]\n            j += 1\n\n        # Swap the largest element with the first element of the unsorted part of the list\n        if largest!= nums[i]:\n            nums[i], nums[j] = nums[j], nums[i]\n\n        # Reverse the unsorted part of the list\n        j = n - 1\n        while i < j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    def pancake_sort_helper(nums, start, end):\n        while start < end:\n            # Find the maximum element in the subarray ending at end\n            max_index = start\n            for i in range(start, end):\n                if nums[i] > nums[max_index]:\n                    max_index = i\n            # Swap the maximum element with the last element in the subarray\n            nums[start], nums[max_index] = nums[max_index], nums[start]\n            # Move the start pointer to the next unsorted element\n            start += 1\n            end -= 1\n\n    # Apply the pancake sort algorithm to the list\n    for i in range(len(nums) - 1, 0, -1):\n        pancake_sort_helper(nums, 0, i)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Swap the maximum element with the i-th element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n        # Reverse the list from the i-th element to the end\n        for j in range(i, n-1, -1):\n            nums[i], nums[j] = nums[j], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # swap the maximum element with the last element in the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # reverse the sequence from the current element to the last element\n        if i!= n-1:\n            for j in range(i, n-1, -1):\n                nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list\n    n = len(nums)\n    # Traverse through all elements of the list\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the i-th element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    # Print the sorted list\n    print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def helper(nums, n):\n        # Base case: If the list contains only one element, it is already sorted.\n        if n == 1:\n            return nums\n\n        # Find the maximum element in the unsorted part of the list.\n        max_idx = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n\n        # Swap the maximum element with the last element.\n        nums[max_idx], nums[n-1] = nums[n-1], nums[max_idx]\n\n        # Recursively sort the unsorted part of the list.\n        helper(nums[:max_idx], max_idx)\n        helper(nums[max_idx+1:], n-max_idx-1)\n\n    # Call the helper function to sort the list.\n    helper(nums, len(nums))\n\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Iterate through each item in the list1\n    for item1 in list1:\n        # Check if the item is in the list2 and list3\n        if item1 in list2 and item1 in list3:\n            # Increment the count variable if the item is present in both lists\n            count += 1\n            \n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n\n    :param list1: List of integers\n    :param list2: List of integers\n    :param list3: List of integers\n    :return: Number of items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    # create a dictionary to store the frequency of each item in the lists\n    freq = {}\n\n    # loop through the lists\n    for item in list1:\n        freq[item] = freq.get(item, 0) + 1\n\n    for item in list2:\n        freq[item] = freq.get(item, 0) + 1\n\n    for item in list3:\n        freq[item] = freq.get(item, 0) + 1\n\n    # count number of identical items in the same position\n    count = 0\n    for item in freq:\n        if freq[item] > 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Count number of items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for element in Input: \n        if type(element) == list: \n            count += 1 \n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    # Initialize the minimum and maximum values of the array\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # Loop through the array and update the minimum and maximum values\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    # Return the maximum absolute difference between any two elements in the array\n    return max(abs(arr[i] - arr[j]) for i in range(len(arr)) for j in range(i+1, len(arr)))"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize max_diff to the smallest possible integer value\n    max_diff = float('-inf')\n\n    # Loop through the array\n    for i in range(len(arr)): \n        # Loop through the array starting from the next index\n        for j in range(i+1, len(arr)): \n            # Calculate the absolute difference between the two elements\n            diff = abs(arr[i] - arr[j])\n            \n            # Update max_diff if the current difference is greater than max_diff\n            if diff > max_diff: \n                max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    arr.sort() # Sort the array in ascending order\n    return abs(arr[-1] - arr[0])"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort() # Sort the array in ascending order\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort() # sort the array in ascending order\n    return arr[-1] - arr[0] # return the difference between the last element and the first element"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return (x, x)\n    else:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        if a*x + b*n == n:\n            return (x, n//x)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # calculate the discriminant\n    d = b**2 - 4*a*n\n\n    # check if the discriminant is zero, in which case there is only one solution\n    if d == 0:\n        x = (-b) / (2*a)\n        y = (-b) / (2*a)\n        return (x, y)\n\n    # check if the discriminant is positive, which means there are two solutions\n    elif d > 0:\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        y1 = (x1**2 + n) / x1\n        y2 = (x2**2 + n) / x2\n        return (x1, y1), (x2, y2)\n\n    # check if the discriminant is negative, which means there are no solutions\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are non-zero, and a and n are not both zero\n    if a == 0 or b == 0 or (a == 0 and n == 0):\n        return None\n\n    # If a is non-zero, check if there exists an integer x such that ax = n\n    if a!= 0:\n        x = -b // a\n        if x * a!= n:\n            return None\n\n    # If a is zero, check if there exists an integer y such that y = n\n    if a == 0:\n        y = n // b\n        if n % b!= 0:\n            return None\n\n    # If a and b are both non-zero, check if there exists an integer x and an integer y such that ax + by = n\n    if a!= 0 and b!= 0:\n        x = (-n + b**2 - 4*a*b) // (2*a)\n        y = (-n + b**2 + 4*a*b) // (2*a)\n        if x * a + y * b!= n:\n            return None\n\n    # Return the solution as a tuple (x, y)\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    if b == 0:  # If b is 0, x = -n/a and y = 0\n        if n % a == 0:\n            return (a * n // a, 0)\n        else:\n            return None\n    else:  # If b is not 0, x = (n - b * d * d // 4) / a and y = (d * d - 4 * b * d + n) / (2 * a)\n        d = (n - b * b) // (8 * a)\n        x = (n - b * d * d // 4) // a\n        y = (d * d - 4 * b * d + n) // (2 * a)\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0:\n        return None\n    \n    x = int((-n + b) / a)\n    y = int((-n - b) / a)\n    \n    if x >= 0 and y >= 0:\n        return (x, y)\n    elif x >= 0 and y < 0:\n        return (x, -y)\n    elif x < 0 and y >= 0:\n        return (-x, y)\n    elif x < 0 and y < 0:\n        return (-x, -y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # create a set of all possible values of x and y\n    x_set = set()\n    y_set = set()\n\n    # calculate the values of x and y that satisfy the equation\n    for x in range(-n, n + 1):\n        y = a * x + b * n\n        if a * x + b * n == n:\n            x_set.add(x)\n            y_set.add(y)\n\n    # check if there is at least one solution\n    if len(x_set) == 0 or len(y_set) == 0:\n        return None\n\n    # return the first solution found\n    return (x_set.pop(), y_set.pop())"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a, b are integers\n    if not (isinstance(a, int) and isinstance(b, int)):\n        return None\n\n    # Check if n is an integer\n    if not isinstance(n, int):\n        return None\n\n    # Check if a, b, and n are positive\n    if a <= 0 or b <= 0 or n <= 0:\n        return None\n\n    # Check if a, b, and n are not zero\n    if a == 0 or b == 0 or n == 0:\n        return None\n\n    # Initialize variables\n    x = 0\n    y = 0\n\n    # Check if x is within range of (-n/a, n/a)\n    while a * x ** 2 <= n and x >= -n / a:\n        # Check if y is within range of (-n/b, n/b)\n        while b * y ** 2 <= n and y >= -n / b:\n            if a * x + b * y == n:\n                return (x, y)\n            y += 1\n        x += 1\n        y = 0\n\n    # No solution exists\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Check if a and b are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        return None\n    \n    # Check if n is an integer\n    if not isinstance(n, int):\n        return None\n    \n    # Check if a, b, and n are not equal to each other\n    if a == b == n:\n        return (n, n)\n    \n    # Check if a is zero\n    if a == 0:\n        return None\n    \n    # Check if b is zero\n    if b == 0:\n        return None\n    \n    # Check if n is zero\n    if n == 0:\n        return None\n    \n    # Calculate the discriminant\n    disc = b**2 - 4*a*n\n    \n    # Check if the discriminant is negative\n    if disc < 0:\n        return None\n    \n    # Calculate the first and second roots of the discriminant\n    root1 = (-b + math.sqrt(disc))/(2*a)\n    root2 = (-b - math.sqrt(disc))/(2*a)\n    \n    # Check if the first and second roots are real numbers and are integers\n    if not isinstance(root1, (int, float)) or not isinstance(root2, (int, float)):\n        return None\n    \n    # Check if the first root is greater than or equal to the second root\n    if root1 >= root2:\n        return None\n    \n    # Check if the first root satisfies ax + by = n\n    if a*root1 + b*root2 == n:\n        return (int(root1), int(root2))\n    \n    # Otherwise, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize the set of integers that are solutions to a quadratic equation.\n    solutions = set()\n    # Loop until the set of solutions has 10 elements (which is sufficient for any practical purpose).\n    while len(solutions) < 10:\n        # Generate random integers x and y such that x^2 + y^2 <= 1.\n        x = 2 * (random.randint(0, 100) / 100) - 1\n        y = 2 * (random.randint(0, 100) / 100) - 1\n        # Check if the equation ax + by = n holds for the given x and y values.\n        if a * x + b * y == n:\n            # Add the solution to the set of solutions.\n            solutions.add((x, y))\n    # Check if there is at least one solution.\n    if not solutions:\n        return None\n    # Return one of the solutions.\n    return random.choice(list(solutions))"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            list1.remove(list2[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list which contains all elements present in the first list but not present in the second list.\n    \"\"\"\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Initialize an empty list to store the unique elements\n    unique_list = []\n    \n    # Loop through each element in the first list\n    for element in list1:\n        # Check if the element is not present in the second list\n        if element not in list2:\n            # If it's not present, add it to the unique list\n            unique_list.append(element)\n    \n    # Return the unique list\n    return unique_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    :param list1: A list to be checked for elements to be removed.\n    :param list2: A list of elements to be removed.\n    :return: A new list without the specified elements from the first list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Using set() to remove duplicates from list1 and list2\n    list1 = set(list1)\n    list2 = set(list2)\n    # Using set difference to remove elements from list1 present in list2\n    list1 = list1.difference(list2)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_ = 0\n    for i in range(n // 2):\n        sum_ += (n - 2 * i)\n    return sum_"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    result = 0\n    i = 0\n    while n - 2 * i >= 0:\n        result += n - 2 * i\n        i += 1\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        s = n - n // 2 * (n // 2 - 1) + (n // 2 - 1) * (n // 2 - 1) // 2\n    else:\n        s = n - n // 2 * (n // 2) + (n // 2 - 1) * (n // 2) // 2\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize variables\n    sum = 0\n    i = 0\n    # Calculate the sum until n-x =< 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while i <= n // 2:\n        total += (n - 2 * i)\n        i += 1\n    return total"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2 * math.pi / l * i\n        area += s * (tan(angle / 2))**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the area using the formula for a regular polygon\n    area = (s*(l**2) + l*s + s**2)/2\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2*pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += s * tan((2*pi*i)/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the area using Heron's formula\n    area = (s*(s-l)*(s-2*l)) ** 0.5\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of a regular polygon using Heron's formula\n    a = l / s\n    area = (s * (s - 2 * tan(pi / s) + tan(pi)) + l * tan(pi / s) ** 2) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter (half the perimeter)\n    p = (s * l) / 2\n\n    # Use the formula for the area of a regular polygon\n    area = (p * (math.tan(math.pi / l)))\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s * (tan((i*2*pi)/l)))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon using the formula A = \u2211s * (s - 2) / (2 * pi)\n    area = 0\n    for i in range(l):\n        area += s * (s - 2 * i) / (2 * pi)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_divisors(num):\n        return sum(divisors(num))\n\n    def divisors(num):\n        div = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                div.append(i)\n                if i!= num//i:\n                    div.append(num//i)\n        return div\n\n    # check if sum of divisors is the same for n and n+1\n    if sum_divisors(n) == sum_divisors(n+1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_list.append(i)\n            if i!= n // i:\n                div_list.append(n // i)\n    if len(div_list) == 0:\n        return False\n    else:\n        return sum(div_list) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n        if n % (i+2) == 0:\n            return False\n    return True\n\nprint(div_sum(5)) # Output: True\nprint(div_sum(10)) # Output: False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Initialize variables for divisor sum and divisor count\n    div_sum = 0\n    div_count = 0\n    \n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # Check if the number is a divisor of n\n        if n % i == 0:\n            \n            # Add the divisor to the sum and increment the count\n            div_sum += i\n            \n            # Increment the count\n            div_count += 1\n    \n    # Check if the sum of divisors is equal to n\n    if div_sum == n:\n        print(\"The sum of the divisors of {} is {} and they are all the same.\".format(n, div_sum))\n    else:\n        print(\"The sum of the divisors of {} is {} and they are not all the same.\".format(n, div_sum))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Calculate the sum of the divisors of n\n    div_sum = sum(range(1, int(math.sqrt(n))+1))\n    # Calculate the sum of the divisors of n+1\n    div_sum += sum(range(1, int(math.sqrt(n+1))+1))\n    # Check if the two sums are equal\n    if div_sum == n:\n        print(\"The sum of the divisors of\", n, \"and\", n+1, \"are equal.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"and\", n+1, \"are not equal.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n\n    # calculate the sum of divisors of n \n    sum_div = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]) \n\n    # calculate the sum of divisors of n+1 \n    sum_div1 = sum([i for i in range(1, int(math.sqrt(n+1))+1) if (n+1) % i == 0]) \n\n    # check if sum_div is equal to sum_div1 \n    if sum_div == sum_div1: \n        print(n, \"and\", n+1, \"have the same sum of divisors.\") \n    else: \n        print(n, \"and\", n+1, \"do not have the same sum of divisors.\") "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Calculate the sum of the divisors of n \n    div_sum = sum(range(1, int(math.sqrt(n))+1)) \n    # Calculate the sum of the divisors of n-1 \n    divisor = 1 \n    div_sum_n_minus_1 = 0 \n    while divisor <= n-1: \n        if n % divisor == 0: \n            div_sum_n_minus_1 += divisor \n        divisor += 1 \n    # Check if the two sums are equal \n    if div_sum == div_sum_n_minus_1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    def divisor_sum(num):\n        '''\n        Helper function to calculate the sum of divisors of a number.\n        '''\n        div_sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                div_sum += i\n        return div_sum\n\n    div1 = math.sqrt(n)\n    div2 = n - div1\n\n    div1_sum = divisor_sum(div1)\n    div2_sum = divisor_sum(div2)\n\n    return div1_sum == div2_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n    \n    return sum(div_list) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            div_sum += i\n            if i!= n // i:\n                div_sum += n // i\n\n    return div_sum"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n    \n    # Initialize an empty dictionary to store the character counts\n    char_count = {}\n    \n    # Iterate through the string and count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Iterate through the dictionary and count the number of occurrences of each character at the same position in the English alphabet\n    count = 0\n    for char in char_count:\n        if char.isalpha() and ord(char.upper()) == ord('a') + count:\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        count += str1.lower().count(chr(ord('a') + i))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char.lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize an empty dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n\n    # Iterate through the string\n    for i in range(26):\n        # Get the character at the current position in the alphabet\n        char = chr(i + 97)\n\n        # If the character exists in the dictionary, increment the count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through the input string and count the number of occurrences of each character in the alphabet\n    count = 0\n    for char in str1:\n        # Convert the character to lowercase for case insensitivity\n        char = char.lower()\n\n        # If the character exists in the dictionary, increment the count\n        if char in char_count:\n            count += char_count[char]\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n\n    for char in str1:\n        if char.lower() in english_alphabet:\n            index = english_alphabet.lower().index(char.lower())\n            if index == 0:\n                count += 1\n            elif index == 25:\n                count += 1\n            else:\n                count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # initialize a dictionary to store the counts\n    char_dict = {}\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is in the English alphabet (case insensitive)\n        if char.isalpha():\n            # if it is, check if it is already in the dictionary\n            if char in char_dict:\n                # if it is, increment the count by 1\n                char_dict[char] += 1\n            else:\n                # if not, add it to the dictionary with a count of 1\n                char_dict[char] = 1\n    # print the counts\n    for char in char_dict:\n        print(char, char_dict[char])"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Initialize a dictionary to store the frequency of characters\n    char_freq = {}\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Loop through the string and update the frequency dictionary\n    for i, char in enumerate(str1):\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    # Loop through the English alphabet and count the frequency of each character\n    for i in range(ord('a'), ord('z')+1):\n        char = chr(i)\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    # Count the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n    for freq in char_freq.values():\n        if freq == 26:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase to make it case insensitive\n    str1 = str1.lower()\n    \n    # initialize variables for the count of each character\n    count_lowercase = 0\n    count_uppercase = 0\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is lowercase, increment the count for lowercase characters\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            count_lowercase += 1\n        # if the character is uppercase, increment the count for uppercase characters\n        elif char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            count_uppercase += 1\n    \n    # return the sum of the counts for lowercase and uppercase characters\n    return count_lowercase + count_uppercase"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    count = 0\n    \n    for i in range(26):\n        char = chr(i+65)\n        if str1.lower().count(char.lower()) > 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Initialize an empty dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Convert the character to its position in the alphabet and check if it already exists in the dictionary\n            if char.lower() in char_count:\n                # Increment the count of characters at the current position in the dictionary\n                char_count[char.lower()] += 1\n            else:\n                # Add the character to the dictionary with a count of 1\n                char_count[char.lower()] = 1\n    # Return the dictionary containing the count of characters at each position in the alphabet\n    return char_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[j] ^ A[i] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i]!= A[j]:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the binary representation of n\n    binary = bin(n)[2:]\n\n    # Calculate the length of the binary representation\n    length = len(binary)\n\n    # Create a list of integers from the binary representation with 0s and 1s\n    binary_list = [int(x) for x in binary]\n\n    # Reverse the binary_list\n    binary_list.reverse()\n\n    # Find the index of the first 1 in the binary_list\n    index = binary_list.index(1)\n\n    # Create a new binary string with 0s and 1s of length index+1\n    new_binary = '0' * (index + 1)\n\n    # Add 1 to the power of 2 of the new binary string\n    power_of_2 = 2 ** index\n\n    # Return the next power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2 ** (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary and count the number of '1' bits\n    binary = bin(n)[2:]\n    count = len(binary)\n\n    # Calculate the exponent of 2 raised to the power of the number of '1' bits\n    exponent = count.bit_length() - 1\n\n    # Return n * 2^exponent\n    return n * (2 ** exponent)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n\n    :param n: The number to find the next power of 2 for.\n    :return: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # If n is already a power of 2, return n.\n    if n & (n - 1) == 0:\n        return n\n\n    # Find the smallest power of 2 greater than or equal to n.\n    i = 1\n    while i < n:\n        i <<= 1\n\n    return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2**(int(n.bit_length()-1)+1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2:\n        return n\n    else:\n        return 2**((n-1).bit_length() + 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # find the least power of 2 greater than or equal to n\n    while n & (n-1):\n        n &= (n-1)\n    # return the next power of 2\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # convert n to an integer\n    n = int(n)\n    # initialize a variable to keep track of the smallest power of 2\n    power = 1\n    # loop until the power is greater than or equal to 2^32\n    while power < 2**32:\n        # check if the current power is greater than or equal to n\n        if power >= n:\n            # if it is, return the current power\n            return power\n        # increment the power by 1\n        power = power << 1"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(lst, x):\n    '''\n    This function takes a list and a number x as input and returns the number of occurrences of x in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n > len(list1) or m > n:\n        return 'Invalid indices.'\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i]\n        return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # initialize a variable to store the sum of numbers\n    sum_range = 0\n    \n    # loop through the list from the first index to the second index (inclusive)\n    for i in range(m, n+1):\n        # add the number at the current index to the sum\n        sum_range += list1[i-1]\n    \n    # return the sum of numbers within the specified range\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return \"Error: First index should be less than or equal to the second index.\"\n    else:\n        total = 0\n        for i in range(m, n+1):\n            if i in list1:\n                total += i\n        return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    sum_value = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        sum_value += list1[i]\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = []\n    for i in range(m, n+1):\n        if i in list1:\n            sum_list.append(i)\n    return sum(sum_list)"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Get the length of the list\n    length = len(list1)\n\n    # Check if the indices are valid\n    if m < 0 or m >= length or n < 0 or n >= length:\n        print(\"Invalid indices!\")\n        return\n\n    # Check if the range is valid\n    if m > n:\n        print(\"Invalid range!\")\n        return\n\n    # Calculate the sum\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-m]\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter of the pentagon using the formula:\n    # P = 5a/2 (sin(50) - 1)\n    s = (5 * a / 2) * math.sin(math.pi / 10)\n    \n    # Calculate the perimeter using the formula:\n    # P = 2*sqrt(5)*a + s\n    p = 2 * math.sqrt(5) * a + s\n    \n    # Return the perimeter of the pentagon\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # Formula for perimeter of pentagon\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a * math.sin(math.pi / 5)\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the circumference of a circle with radius of a/2\n    circumference = 2*math.pi*a/5\n    # Multiply the circumference by 5 to get the perimeter of the pentagon\n    return circumference*5"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula to find the perimeter of a regular pentagon\n    perimeter = 5*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the hypotenuse of the right triangle\n    hypotenuse = math.sqrt(5) * a\n\n    # Return the perimeter of the pentagon\n    return 5 * a + 5 * hypotenuse"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for word in s.split():\n        if word =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    \n    count = 0\n    i = 0\n    \n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    \n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s' and s[count:].startswith('td'):\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # get the data type of the first element in the tuple\n    first_element = type(test_tuple[0])\n    # iterate over the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # check if the element has the same data type as the first element\n        if type(element)!= first_element:\n            # return False if any element has a different data type\n            return False\n    # return True if all elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return \"Empty tuple\"\n    \n    # Initialize variables to store the data type of first and last element of the tuple\n    first_type = type(test_tuple[0])\n    last_type = type(test_tuple[-1])\n    \n    # Check if all elements in tuple have same data type\n    for item in test_tuple:\n        if type(item)!= first_type:\n            return False\n    \n    # If all elements in tuple have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Get the first element in the tuple\n    first_element = test_tuple[0]\n    # Loop through the rest of the tuple elements\n    for element in test_tuple[1:]:\n        # If the element data type is not the same as the first element, return False\n        if type(element)!= type(first_element):\n            return False\n    # If all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the tuple is empty or not\n    if not test_tuple:\n        return True\n\n    # Get the first element in the tuple\n    first_element = type(test_tuple[0])\n\n    # Loop through the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # Check if the element is of a different data type\n        if type(element)!= first_element:\n            return False\n\n    # All the elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the type of the first element of the tuple\n    data_type = type(test_tuple[0])\n    \n    # Loop through all the elements of the tuple\n    for element in test_tuple:\n        # If the element is not of the same data type as the first element, return False\n        if type(element)!= data_type:\n            return False\n    \n    # If all the elements are of the same data type as the first element, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the tuple is empty\n    if len(test_tuple) == 0:\n        return True\n    \n    # Get the first element of the tuple\n    first_elem = test_tuple[0]\n    \n    # Check if all the elements in the tuple have the same data type\n    for elem in test_tuple:\n        if type(elem)!= type(first_elem):\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if all elements are of same data type or not\n    if len(set(type(i) for i in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize count and candidate\n    count = 0\n    candidate = x\n    \n    # Traverse the array and count the occurrences of the candidate\n    for i in range(n):\n        if arr[i] == candidate:\n            count += 1\n            \n    # Check if the count is greater than n/2\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Calculate the frequency of the x in the array\n    frequency = 0\n    for i in range(n):\n        if arr[i] == x:\n            frequency += 1\n    \n    # Check if the frequency is more than n/2\n    if frequency > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n\n    # Convert the given number to binary using the built-in bin() function\n    binary_str = bin(n)[2:]\n\n    # Initialize a counter variable to keep track of the number of set bits\n    count = 0\n\n    # Iterate through each character in the binary string and count the number of set bits\n    for char in binary_str:\n        if char == '1':\n            count += 1\n\n    # Return the count of set bits\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes a positive integer n as input and returns the number of set bits in n.\n    A set bit is a binary digit with a value of 1. The function returns the number of set bits in n.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_string = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_string += str[i]\n    return odd_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Create an empty list to store the odd values of the string\n    odd_list = []\n    # Loop through each character in the string\n    for char in str:\n        # Check if the index of the character is odd\n        if ord(char) % 2!= 0:\n            # If the character is odd, add it to the odd_list\n            odd_list.append(char)\n    # Join the odd_list into a string\n    return ''.join(odd_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_index_values = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_index_values.append(str[i])\n    return ''.join(odd_index_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:  # check if the index is odd\n            new_str += str[i]  # add the character to the new string\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # convert the string to list\n    str_list = list(str)\n    # create a new list to store the odd values of the string\n    odd_list = []\n    # loop through the list and add the odd values to the new list\n    for i in range(len(str_list)):\n        if i % 2!= 0:\n            odd_list.append(str_list[i])\n    # convert the odd_list to a string and return it\n    return ''.join(odd_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_str += str[i]\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2!= 0:\n            result += string[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # sorting the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # finding the minimum number\n    return sorted_numbers[0]"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a <= b <= c:\n        return a\n    elif b <= a <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum number.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    This function takes three numbers as input and returns the minimum of those numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Get the binary representation of n\n    binary_str = bin(n)[2:]\n    # Get the length of binary string\n    length = len(binary_str)\n\n    # Check whether all the bits are set in the given range or not\n    if all(binary_str[i] == '1' for i in range(l, r+1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i = l\n    while i <= r:\n        if n & (1 << i) == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three parameters:\n    n - The number whose bits need to be checked.\n    l - The lower bound of the range.\n    r - The upper bound of the range.\n    \n    The function returns True if all the bits are set in the given range and False otherwise.\n    '''\n    for i in range(l, r+1):\n        if (n & (1 << i))!= (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # convert the given range to binary\n    lower_binary = bin(l)[2:]\n    upper_binary = bin(r)[2:]\n\n    # initialize a variable to store the binary form of the given number\n    num_binary = bin(n)[2:]\n\n    # compare the binary forms of the given number and range\n    for i in range(len(num_binary)):\n        if num_binary[i] == '0' and lower_binary[i] == '0':\n            return False\n        if num_binary[i] == '1' and lower_binary[i] == '1':\n            continue\n        return False\n\n    # if the loop completes without returning False, then all bits are set in the given range\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Bitwise AND of n with l and r\n    result = n & (l | r)\n    # Check whether all the bits are unset or not\n    if result == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function will check whether all the bits are set or unset in the given range or not.\n    It will return True if all the bits are set and False if all the bits are unset.\n    '''\n    # If the range is not within the valid range, return False\n    if l < 0 or l >= n or r < 0 or r >= n:\n        return False\n    # Convert the integer into binary\n    binary_num = bin(n)[2:].zfill(n.bit_length())\n    # Iterate through the binary number and check if all the bits are set or unset\n    for i in range(l, r+1):\n        if binary_num[i] == '0':\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Bitwise AND of all the bits in the range\n    range_bits = n & ((1 << r) - 1)\n\n    # Check if all the bits are unset\n    if range_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Check if the range is valid\n    if l >= r:\n        return True\n\n    # Initialize a mask for the range\n    mask = 0\n\n    # Iterate through the range\n    for i in range(l, r+1):\n        mask |= 1 << i\n\n    # Check if all bits in the mask are unset\n    return (mask & n) == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    if n == 0:\n        return True\n\n    if l == 0 and r == 0:\n        return True\n\n    while l <= r:\n        if n & 1 == 1:\n            return False\n        n >>= 1\n        l >>= 1\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the given range to a set of bits to check for unset bits\n    bits = set([bin(i)[2:].zfill(8) for i in range(l, r+1)])\n    # Check if all the bits are unset in the given range\n    if all(bits.issubset(set(bin(i)[2:].zfill(8) for i in range(2**8)))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    sorted_negatives = sorted(negatives)\n    sorted_positives = sorted(positives)\n    result = sorted_negatives + sorted_positives\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    # First, filter out negative elements and sort them in ascending order\n    neg_sorted = sorted([x for x in arr if x < 0], reverse=False)\n\n    # Next, filter out positive elements and sort them in descending order\n    pos_sorted = sorted([x for x in arr if x >= 0], reverse=True)\n\n    # Now, re-arrange the positive elements in the original order\n    rearranged_arr = neg_sorted + pos_sorted\n\n    # Finally, truncate the list to the first n elements\n    return rearranged_arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    negative.sort(reverse=True)\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    return negative + positive"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize variables\n    neg = []\n    pos = []\n    # Loop through the array\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    # Re-arrange the negative and positive elements\n    for i in range(len(neg)):\n        arr[i] = neg.pop(0)\n        arr[i+n] = pos.pop(0)\n    # Print the re-arranged array\n    print(\"Re-arranged array:\", arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # check if n is valid\n    if n > len(arr):\n        print(\"Error: n cannot be greater than the length of the array\")\n        return\n    \n    # initialize variables\n    negative = []\n    positive = []\n    count = 0\n    \n    # iterate through the array\n    for i in range(n):\n        # check if the current element is negative\n        if arr[i] < 0:\n            # add the current element to negative list\n            negative.append(arr[i])\n        else:\n            # add the current element to positive list\n            positive.append(arr[i])\n    \n    # add the remaining elements to the negative list\n    for i in range(n, len(arr)):\n        negative.append(arr[i])\n    \n    # sort negative list in descending order\n    negative.sort(reverse=True)\n    \n    # combine negative and positive list and sort them in ascending order\n    combined = negative + positive\n    combined.sort()\n    \n    # assign the sorted list to the array\n    for i in range(n):\n        arr[i] = combined[i]\n    \n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes an array and an integer n as input and re-arranges the first n elements of the array such that all negative elements appear before positive ones, while preserving the relative order among negative and positive elements.\n    '''\n    \n    # Initialize two pointers, one for positive elements and one for negative elements\n    pos = 0\n    neg = n - 1\n    \n    # Traverse the array from the first to the last element\n    for i in range(n):\n        # If the current element is positive, then move the positive pointer one position forward\n        if arr[i] > 0:\n            pos += 1\n            arr[pos], arr[i] = arr[i], arr[pos]\n        # If the current element is negative, then move the negative pointer one position backward\n        elif arr[i] < 0:\n            neg -= 1\n            arr[neg], arr[i] = arr[i], arr[neg]\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize two pointers\n    i = 0\n    j = n - 1\n\n    # swap the first n elements with negative elements and positive elements\n    while i < j:\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        else:\n            j -= 1\n\n    # sort the remaining elements in non-decreasing order\n    arr[i:] = sorted(arr[i:])\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Initialize three empty lists to store negative, positive, and intermediate values\n    negative = []\n    positive = []\n    intermediate = []\n\n    # Iterate over the array and add elements to the appropriate lists\n    for element in arr:\n        if element < 0:\n            negative.append(element)\n        elif element > 0:\n            positive.append(element)\n        else:\n            intermediate.append(element)\n\n    # Concatenate the negative, positive, and intermediate lists into a single list\n    re_arr = negative + positive + intermediate\n\n    # Shuffle the re-arranged list randomly to ensure randomness\n    import random\n    random.shuffle(re_arr)\n\n    # Return the re-arranged list\n    return re_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    # Create a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Iterate through the array and count the occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Create a list of tuples containing the element and its count\n    sorted_list = sorted(count_dict.items(), key=lambda x: (-x[1], x[0]))\n\n    # Initialize the re-arranged array\n    rearranged_arr = []\n\n    # Iterate through the sorted list and add elements to the re-arranged array\n    i = 0\n    while i < n:\n        for _ in range(sorted_list[i][1]):\n            rearranged_arr.append(sorted_list[i][0])\n            i += 1\n\n    # Add the remaining elements to the re-arranged array\n    for num in arr[n:]:\n        if num in rearranged_arr:\n            continue\n        rearranged_arr.append(num)\n\n    return rearranged_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # initialize two empty arrays to store negative and positive elements\n    neg_arr = []\n    pos_arr = []\n\n    # iterate through the input array and add negative elements to neg_arr and positive elements to pos_arr\n    for num in arr:\n        if num < 0:\n            neg_arr.append(num)\n        else:\n            pos_arr.append(num)\n\n    # sort the neg_arr in ascending order\n    neg_arr.sort()\n\n    # initialize an empty array to store the final re-arranged array\n    re_arr = []\n\n    # iterate through the neg_arr and add the elements to the re_arr\n    for num in neg_arr:\n        re_arr.append(num)\n\n    # add the elements of the pos_arr to the re_arr in their original order\n    re_arr += pos_arr\n\n    # return the final re-arranged array\n    return re_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # replace blank spaces with the character\n    str2 = str1.replace(\" \",char)\n    # return the string with replaced blank spaces\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Split the string into individual characters\n    str_list = list(str1)\n    # Loop through each character and replace blank spaces with the character\n    for i in range(len(str_list)):\n        if str_list[i] =='':\n            str_list[i] = char\n    # Convert the list back to a string and return it\n    return ''.join(str_list)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # replace blank spaces with the given character\n    str1 = str1.replace(\" \",char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # convert string to list of characters\n    str_list = list(str1)\n    # loop through list of characters and replace blank spaces with the character\n    for i in range(len(str_list)):\n        if str_list[i] =='':\n            str_list[i] = char\n    # convert list of characters back to string and return it\n    return ''.join(str_list)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n>len(list1):\n        return None\n    else:\n        return heapq.nlargest(n,list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return []\n    else:\n        heap = []\n        for num in list1:\n            heapq.heappush(heap, num)\n        return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    # Convert the input list to a min-heap\n    min_heap = []\n    for num in list1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Extract the n largest items from the heap\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        elif num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi*(r**2 + h**2)\n    return lateral_surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * math.pi * r * h\n    print(\"The lateral surface area of a cylinder is:\", lateral_surface_area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2 * r * h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula to find the lateral surface area of a cylinder\n    lateral_surface = 2 * r * h\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    # Formula for lateral surface area of a cylinder\n    lateral_surface_area = 2*r*h\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Calculate lateral surface area of cylinder\n    lateral_surface_area = 2*(3.14*r**2) + 2*(3.14*r*h) + 2*(3.14*h**2) + 2*(3.14*r**2*h)\n    \n    return lateral_surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2 * r * h) + (2 * r ** 2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = math.pi * r**2 * h\n    return lateral_area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*math.pi*r**2)*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of the cylinder\n    lateral_surface_area = (2 * r * h) / 3\n    \n    # return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3 # calculate the volume\n    return volume # return the volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l**3\n    return vol"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # iterate over each bit in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # set the corresponding bit of the binary representation of n to 1\n        if n & (1 << i):\n            n |= (1 << i)\n\n    # return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n & 0x55555555)\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Iterate through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set it to 1\n        if int(bit) % 2 == 0:\n            result += int(bit) * (2**len(bin(n)[2:]))\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the result of setting even bits\n    result = 0\n    \n    # Iterate through the bits of the input number and set the corresponding even bits to 1\n    while n > 0:\n        if n % 2 == 0:\n            result |= n\n        n >>= 1\n    \n    # Return the result after setting even bits to 1\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = bin(n)[2:] # convert integer to binary string\n    for i in range(len(n)):\n        if int(n[i]) == 0: # check if the current bit is 0\n            n = n[:i] + '1' + n[i+1:] # set the current bit to 1\n    return int(n, 2) # convert binary string to integer"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n = n ^ 1 << count\n        count += 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n & 1 == 0:\n            n = n - 2**count\n        else:\n            count += 1\n        n = n >> 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits of the number\n    even_bits = []\n    # Iterate over the bits of the number\n    for i in range(32):\n        # If the i-th bit is even, append it to the even_bits list\n        if n & (1 << i):\n            even_bits.append(i)\n    # Return the number with all even bits set to 1\n    return (1 << 32) | (1 << even_bits[0]) | (1 << even_bits[1]) | (1 << even_bits[2]) | (1 << even_bits[3])"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize a new number with the same number of bits as the input number\n    new_num = 0\n    # iterate through each bit position of the input number\n    for i in range(32):\n        # extract the i-th bit from the input number\n        bit = (n >> i) & 1\n        # if the bit is even, set the corresponding bit in the new number to 1\n        if bit == 0:\n            new_num = new_num | (1 << i)\n    # return the new number with all even bits set to 1\n    return new_num"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary\n    count_dict = {}\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if the tuple is already a key in the dictionary\n        if tup in count_dict:\n            # If it is, increment its value by 1\n            count_dict[tup] += 1\n        else:\n            # If it's not, add it as a new key with a value of 1\n            count_dict[tup] = 1\n    # Return the final dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    test_set = set(test_list)\n    # Use Counter to count the number of occurrences of each tuple in the set\n    count_dict = Counter(test_set)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # loop through each tuple in the list\n    for tup in test_list:\n        # check if the tuple is already in the count_dict\n        if tup in count_dict:\n            # if it is, increment the count\n            count_dict[tup] += 1\n        else:\n            # if it isn't, add it with a count of 1\n            count_dict[tup] = 1\n    \n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # create a Counter object to count the occurrences of each tuple\n    counter = Counter(test_list)\n    # convert the counter to a dictionary and return it\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter function from collections to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # iterate over the list of tuples\n    for item in test_list:\n        # if the tuple is already in the dictionary, increment its count\n        if item in count_dict:\n            count_dict[item] += 1\n        # if the tuple is not in the dictionary, add it to the dictionary with a count of 1\n        else:\n            count_dict[item] = 1\n    \n    # return the dictionary with the count of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = str[i:j]\n            if substring!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize variables for storing the number of substrings and the count of non-empty substrings\n    substrings_count = 0\n    non_empty_substrings = 0\n\n    # Loop through all possible substrings of the string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            # Check if the substring is non-empty\n            if str[i:j]!= '':\n                # If it is, increment the count of non-empty substrings and update the total number of substrings\n                non_empty_substrings += 1\n                substrings_count += 1\n    \n    # Return the total count of non-empty substrings\n    return non_empty_substrings"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    n = len(str) \n    count = 0 \n    for i in range(n): \n        for j in range(i+1, n+1): \n            count += 1\n    return count "
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    # initialize a set to store unique substrings\n    unique_substrings = set()\n    # loop through each character in the string\n    for i in range(len(str)):\n        # loop through each possible substring that starts at the current index\n        for j in range(i, len(str)):\n            # add the substring to the set of unique substrings\n            unique_substrings.add(str[i:j+1])\n    # return the length of the set of unique substrings\n    return len(unique_substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, m+1):\n        if i % 2 == 0 and i >= 2*i-1 and i <= m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize the count of sequences to 0\n    count = 0\n    # initialize the list of sequences to an empty list\n    sequences = []\n\n    # loop through the range of integers from 2 to m\n    for i in range(2, m + 1):\n        # initialize the current sequence to an empty list\n        current_sequence = []\n        # loop through the range of integers from 1 to n\n        for j in range(1, n + 1):\n            # add the current element to the current sequence\n            current_sequence.append(i)\n            # check if the current element satisfies the given condition\n            if i >= 2 * current_sequence[-2] and i <= m:\n                # add the current sequence to the list of sequences\n                sequences.append(current_sequence)\n        # update the count of sequences\n        count += len(sequences)\n    # return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_number_of_sequences = 0\n    for i in range(n):\n        prev_element = float('-inf')\n        for j in range(i + 1):\n            current_element = j + 2\n            if current_element <= m:\n                total_number_of_sequences += 1\n    return total_number_of_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    prev = 1\n\n    for i in range(1,m+1):\n        if i >= prev*2 and i <= m:\n            count += 1\n        prev = i\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(n):\n        prev = 0\n        for j in range(i+1):\n            if j > 0:\n                if j == 1:\n                    curr = 2*prev\n                else:\n                    curr = 2*prev + 2\n                if curr <= m:\n                    count += 1\n            prev = curr\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n):\n    # initialize the count of sequences to zero\n    count = 0\n\n    # loop through all possible subarrays of length n\n    for i in range(1,m+1):\n        for j in range(1,i+1):\n            if j >= 2*i:\n                # if the sum of the subarray is less than or equal to m, then add to the count\n                count += 1\n\n    # return the final count of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    # initialize variables\n    current_seq = 0\n    total_sequences = 0\n\n    # generate all possible sequences of length n\n    for i in range(2, m + 1):\n        for j in range(i + 2, min(i * i + 2, m + 1) + 1):\n            if i * j <= 2 * j:\n                current_seq += 1\n            else:\n                break\n\n    # count the number of sequences that satisfy the condition\n    for i in range(2, m + 1):\n        for j in range(i + 2, min(i * i + 2, m + 1) + 1):\n            if i * j >= 2 * j and i * j <= m:\n                total_sequences += current_seq\n                current_seq = 0\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Initialize the counter\n    count = 0\n    \n    # Loop through all possible sequences of length n\n    for i in range(n, 0, -1):\n        # Calculate the number of possible sequences of length i\n        num_sequences = m // i + 1\n        \n        # Multiply by the number of possible sequences of length i-1\n        count += num_sequences * get_total_number_of_sequences(m, i-1)\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the counter to 0\n    count = 0\n\n    # Loop through all possible sequences of length n\n    for i in range(2, m+1):\n        for j in range(1, n+1):\n            # Check if the current sequence satisfies the given condition\n            if i >= 2*j <= m:\n                count += 1\n\n    # Return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(2, m+1):\n        if i >= 2*m:\n            count += 1\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the list1\n    length1 = len(list1)\n    # Get the length of the list2\n    length2 = len(list2)\n    # Loop through the list1 and add the elements from list2 to the end of the list1\n    for i in range(length1 - 1, -1, -1):\n        list1[i] += list2[length2 - 1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        list1.append(list2.pop())\n    else:\n        for i in range(len(list1)-1, -1, -1):\n            list1[i] = list2.pop()"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list2) > len(list1):\n        return \"Error: list2 is longer than list1\"\n    else:\n        for i in range(len(list1)-1, -1, -1):\n            list1[i] = list2[i]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Ensure that the two lists have the same length\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < 1:\n        return \"Error: The first list is empty.\"\n    if len(list2) < 1:\n        return \"Error: The second list is empty.\"\n    if len(list1) == len(list2):\n        return \"Error: The two lists must have different lengths.\"\n    if len(list2) > len(list1):\n        return \"Error: The second list must be longer than the first list.\"\n    list1[-1] = list2[::-1]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_characters(string):\n    \"\"\"\n    Count the total number of characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # first, calculate the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # next, check if the square root is an integer or not\n    if sqrt_N % 1 == 0:\n        sqrt_N += 1\n\n    # finally, return the next perfect square greater than N\n    return int(sqrt_N ** 2)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    sqrtN = int(math.sqrt(N))\n    sqrtN += 1\n    sqrtN = sqrtN ** 2\n    return sqrtN"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # initialize variables\n    N_sqrt = int(math.sqrt(N)) + 1\n    N_sqrt_2 = int(math.sqrt(N_sqrt))\n    \n    # check if the given number is already a perfect square\n    if N_sqrt_2*N_sqrt_2 == N:\n        # if it is, find the next larger perfect square\n        while True:\n            N_sqrt += 1\n            if N_sqrt*N_sqrt > N:\n                break\n    \n    # if the given number is not a perfect square, find the next larger perfect square greater than the square root of N\n    else:\n        while True:\n            N_sqrt += 1\n            N_sqrt_2 = int(math.sqrt(N_sqrt))\n            if N_sqrt_2*N_sqrt_2 < N:\n                break\n    \n    # return the next perfect square greater than the given number\n    return N_sqrt*N_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N as input and returns the next perfect square greater than N.\n    '''\n    # Convert N to a string\n    N = str(N)\n    # Initialize a variable to keep track of the last digit of the number\n    last_digit = 0\n    # Initialize a variable to keep track of the remaining digits of the number\n    remaining_digits = []\n    # Loop through each digit of the number and add them to a list\n    for digit in N:\n        remaining_digits.append(int(digit))\n    # Reverse the list of remaining digits and join them back into a string\n    remaining_digits.reverse()\n    reversed_N = ''.join(str(digit) for digit in remaining_digits)\n    # Convert the reversed_N to an integer\n    reversed_N = int(reversed_N)\n    # Add 1 to the reversed_N and check if it is a perfect square\n    while True:\n        reversed_N += 1\n        if math.isqrt(reversed_N) ** 2 == reversed_N:\n            break\n    # Convert the reversed_N to a string\n    next_square = str(reversed_N)\n    # Convert the next_square to an integer and return it\n    return int(next_square)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # find the largest prime factor of N\n    prime_factors = []\n    factor = 2\n    while N % factor == 0:\n        prime_factors.append(factor)\n        N = N / factor\n        factor += 1\n    \n    # find the next prime factor after the last prime factor\n    factor = prime_factors[-1] + 1\n    while factor <= N:\n        if factor not in prime_factors:\n            break\n        factor += 1\n    \n    # calculate the next perfect square\n    next_psq = int(math.sqrt(factor)) * factor**2\n    \n    return next_psq"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N as input and returns the next perfect square greater than N.\n    '''\n    sqrt_N = int(math.sqrt(N)) + 1\n    while True:\n        if is_perfect_square(sqrt_N):\n            return sqrt_N\n        sqrt_N += 1\n\ndef is_perfect_square(num):\n    '''\n    This function checks if a given number is a perfect square or not.\n    '''\n    return int(math.sqrt(num)) ** 2 == num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # calculate the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # check if sqrt_N is a perfect square or not\n    if sqrt_N**2 == N:\n        # if sqrt_N is a perfect square, find the next number greater than sqrt_N\n        return sqrt_N + 1\n    else:\n        # if sqrt_N is not a perfect square, find the next perfect square greater than sqrt_N\n        sqrt_N += 1\n        while sqrt_N**2 < N:\n            sqrt_N += 1\n        return sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_perfect_square(num):\n        return int(math.sqrt(num))**2 == num\n\n    def is_greater_than_sqrt_N(num):\n        sqrt_N = int(math.sqrt(N))\n        return sqrt_N**2 > num\n\n    def is_valid_next_square(next_square):\n        return is_perfect_square(next_square) and is_greater_than_sqrt_N(next_square)\n\n    i = 1\n    while True:\n        next_square = i*i\n        if is_valid_next_square(next_square):\n            return next_square\n        i += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # take the square root of N\n    root = math.sqrt(N)\n    # if root is odd, increment it by 1\n    if root.is_integer():\n        root += 1\n    # if root is even, decrement it by 1\n    else:\n        root -= 1\n    # return the square of the root\n    return root ** 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # find the square root of N\n    root = math.sqrt(N)\n\n    # find the integer part of the square root\n    root_int = math.floor(root)\n\n    # add 1 to the integer part to get the next perfect square\n    next_root = root_int + 1\n\n    # find the integer part of the square of the next perfect square\n    next_root_squared = math.floor(next_root ** 2)\n\n    # subtract the integer part of N from the square of the next perfect square\n    difference = next_root_squared - N\n\n    # if the difference is positive, return the next perfect square\n    if difference > 0:\n        return next_root_squared\n\n    # otherwise, subtract 1 from the integer part of the square root and return the result\n    else:\n        return next_root_squared - 1"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    left = [0] * n\n    right = [0] * n\n\n    for i in range(n):\n        left[i] = arr[i] if i == 0 else max(left[i - 1], arr[i])\n\n    for i in range(n - 2, -1, -1):\n        right[i] = arr[i] if i == n - 1 else max(right[i + 1], arr[i])\n\n    max_sum_left = 0\n    max_sum_right = 0\n    for i in range(n):\n        max_sum_left = max(max_sum_left, left[i] + right[i])\n        max_sum_right = max(max_sum_right, left[i] - right[i])\n\n    return max(max_sum_left, max_sum_right)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] < arr[1]:\n            return arr[0] + arr[1]\n        else:\n            return arr[1] + arr[0]\n    else:\n        dp = [0] * n\n        dp[0] = arr[0]\n        dp[1] = max(arr[0], arr[1])\n        for i in range(2, n):\n            dp[i] = max(dp[i - 1] + arr[i], dp[i - 2] + arr[i])\n        return dp[n - 1]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # initialize variables to store the maximum sum and the subsequence length\n    max_sum = float('-inf')\n    max_len = 0\n    # loop through the array and check if each subsequence is bitonic\n    for i in range(n):\n        for j in range(i+1, min(i+3, n)+1):\n            # check if the subsequence is increasing and decreasing\n            if (arr[i] <= arr[j] and arr[j] >= arr[i+1]) or (arr[i] >= arr[j] and arr[j] <= arr[i+1]):\n                # calculate the sum of the subsequence and update the maximum sum and subsequence length if necessary\n                cur_sum = sum(arr[i:j+1])\n                if cur_sum > max_sum:\n                    max_sum = cur_sum\n                    max_len = j - i + 1\n    return max_sum, max_len"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n\n    # If the array is empty, return 0\n    if n == 0:\n        return 0\n\n    # Initialize the left and right pointers\n    left = 0\n    right = n - 1\n\n    # Initialize the maximum sum\n    max_sum = float('-inf')\n\n    # Traverse through the array\n    while left < right:\n        # Check if the left subsequence is increasing and the right subsequence is decreasing\n        if arr[left] < arr[right]:\n            # Calculate the maximum sum of the left subsequence\n            left_sum = 0\n            while left < right and arr[left] < arr[right]:\n                left_sum += arr[left]\n                left += 1\n\n            # Update the maximum sum if the current subsequence is greater\n            max_sum = max(max_sum, left_sum)\n\n        else:\n            # Calculate the maximum sum of the right subsequence\n            right_sum = 0\n            while left < right and arr[left] > arr[right]:\n                right_sum += arr[right]\n                right -= 1\n\n            # Update the maximum sum if the current subsequence is greater\n            max_sum = max(max_sum, right_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    # Initialize variables to keep track of the maximum sum and the current maximum subsequence sum\n    max_so_far = float('-inf')\n    curr_sum = 0\n\n    # Iterate through the array and find the maximum subsequence sum that is a bitonic sequence\n    for i in range(len(arr)):\n        if arr[i] < arr[i + 1]:\n            # If the current element is less than the next element, add the current element to the sum\n            curr_sum += arr[i]\n        elif arr[i] > arr[i + 1]:\n            # If the current element is greater than the next element, subtract the current element from the sum\n            curr_sum -= arr[i + 1]\n        else:\n            # If the current element is equal to the next element, add the current element to the sum twice to get the maximum sum\n            curr_sum += arr[i] + arr[i]\n\n        # Update the maximum sum if the current sum is greater than the current maximum sum\n        if curr_sum > max_so_far:\n            max_so_far = curr_sum\n\n    # Return the maximum sum\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Check if array is empty or not\n    if len(arr) < 2:\n        return 0\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    increasing_count = 1\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]: # if next element is greater, count as increasing\n            increasing_count += 1\n        else: # if next element is lesser, count as decreasing\n            increasing_count -= 1\n        \n        # Calculate the sum of the current subsequence\n        current_sum = increasing_count * arr[i]\n        \n        # Update the maximum sum if the current subsequence is greater than the previous maximum subsequence\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize variables for the maximum sum of a decreasing subsequence and maximum sum of an increasing subsequence\n    max_sum_decreasing = 0\n    max_sum_increasing = 0\n\n    # Initialize variables for the minimum value of a decreasing subsequence and minimum value of an increasing subsequence\n    min_val_decreasing = float('inf')\n    min_val_increasing = float('inf')\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # If the element is decreasing and the minimum value of a decreasing subsequence is greater than the current element, update the minimum value of a decreasing subsequence\n        if arr[i] < min_val_decreasing and arr[i] > min_val_increasing:\n            min_val_decreasing = arr[i]\n        # If the element is decreasing and the maximum sum of a decreasing subsequence is less than the current element plus the minimum value of a decreasing subsequence, update the maximum sum of a decreasing subsequence\n        elif arr[i] < min_val_decreasing:\n            max_sum_decreasing = arr[i] + min_val_decreasing\n        # If the element is increasing and the minimum value of an increasing subsequence is greater than the current element, update the minimum value of an increasing subsequence\n        elif arr[i] > min_val_increasing and arr[i] < min_val_decreasing:\n            min_val_increasing = arr[i]\n        # If the element is increasing and the maximum sum of an increasing subsequence is less than the current element plus the minimum value of an increasing subsequence, update the maximum sum of an increasing subsequence\n        elif arr[i] > min_val_increasing:\n            max_sum_increasing = arr[i] + min_val_increasing\n\n    # Return the maximum sum of a bitonic subsequence\n    return max(max_sum_increasing, max_sum_decreasing)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    if n == 1:\n        return arr[0]\n    \n    max1 = arr[0]\n    max2 = max(arr[0], arr[1])\n    \n    for i in range(2, n):\n        temp1 = max1\n        max1 = max(max1 + arr[i], max2)\n        max2 = max(temp1, max2)\n        \n    return max(max1, max2)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Initialize variables to store the maximum sum, maximum increasing subsequence, and maximum decreasing subsequence\n    max_sum = arr[0]\n    max_increasing = [arr[0]]\n    max_decreasing = [arr[0]]\n    \n    # Loop through the array and find the maximum sum, maximum increasing subsequence, and maximum decreasing subsequence\n    for i in range(1, n):\n        if arr[i] < max_decreasing[i-1]:\n            max_decreasing.append(arr[i])\n        else:\n            max_decreasing.append(max_decreasing[i-1])\n            \n        if arr[i] > max_increasing[i-1]:\n            max_increasing.append(arr[i])\n        else:\n            max_increasing.append(max_increasing[i-1])\n            \n        if arr[i] > max_sum:\n            max_sum = arr[i]\n            \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    # Helper function to find the sum of the subarray from index i to j\n    def subarray_sum(arr, i, j):\n        return sum(arr[i:j+1])\n\n    # Initialize variables to keep track of the maximum sum seen so far and the current subarray sum\n    max_sum_seen = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array and update the current subarray sum based on whether the current element is increasing or decreasing\n    for i in range(len(arr)):\n        if arr[i] >= arr[i+1]:\n            current_sum += arr[i]\n        else:\n            current_sum -= arr[i]\n\n        # Update the maximum sum seen so far if the current subarray sum is greater than the maximum seen so far\n        if current_sum > max_sum_seen:\n            max_sum_seen = current_sum\n\n    return max_sum_seen"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a given number using the babylonian method.\n\n    Args:\n        number (float): The number whose square root is to be computed.\n\n    Returns:\n        float: The square root of the input number using the babylonian method.\n    \"\"\"\n\n    # Babylonian method\n    x = number / 2.0\n    y = (x + number / x) / 2.0\n\n    while abs(x - y) >= 0.00001:\n        x = y\n        y = (x + number / x) / 2.0\n\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2\n    while abs(x*x - number) >= 0.00001:\n        x = (x + number/x) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + number / x) / 2.0\n    while abs(y - x) > 0.0001:\n        x = y\n        y = (x + number / x) / 2.0\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    low = 0.0\n    high = number\n    while abs(high - low) > 1e-12:\n        mid = (high + low) / 2\n        square = mid * mid\n        if square == number:\n            return mid\n        elif square < number:\n            low = mid\n        else:\n            high = mid\n    return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize variables\n    a = number/2\n    b = number/2\n    i = 0\n    \n    # loop until a and b have the same value\n    while a!= b:\n        # compute new values of a and b\n        c = a - (number/a)\n        a = b\n        b = c\n        \n        # increment iteration counter\n        i += 1\n    \n    # return square root\n    return b"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    x = 1\n    y = number/x\n    i = 0\n    while abs(x-y) > 1e-6:\n        x = y\n        y = (number/x + x)/2\n        i += 1\n    return i, x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    previous_guess = guess\n    tolerance = 0.0001\n    max_iterations = 100\n\n    for i in range(max_iterations):\n        square = guess * guess\n        if abs(square - number) < tolerance:\n            return guess\n        else:\n            previous_guess = guess\n            guess = (number / square) + (guess / square)\n\n    return \"Convergence not achieved within the specified number of iterations.\""
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x1 = 0\n    x0 = 1\n    y = 0\n    n = 1\n    while abs(x1 - x0) > 0.0000001:\n        y = (x1 + x0) / 2\n        x1 = x0\n        x0 = y\n        n += 1\n    return y, n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes square root of a number using the babylonian method.\n    \"\"\"\n\n    # Starting with an initial guess of 1, we repeatedly calculate\n    # the next guess until we find a root of the desired square.\n    guess = 1\n\n    while True:\n        # Calculate the next guess using the babylonian method.\n        next_guess = (guess + number / guess) / 2\n\n        # Check if the difference between the current guess and the\n        # desired square is less than a tolerance, and if so, stop.\n        if abs(next_guess * next_guess - number) < 10**-15:\n            break\n\n        # Update the guess to the next iteration.\n        guess = next_guess\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Set initial values\n    guess = number / 2\n    prev_guess = 0\n\n    # Loop until we reach the desired accuracy\n    while abs(guess**2 - number) > 0.0001:\n\n        # Calculate the new guess\n        new_guess = (prev_guess + number / guess) / 2\n\n        # Update the previous guess\n        prev_guess = guess\n\n        # Update the guess\n        guess = new_guess\n\n    # Return the final guess\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2:\n        return len(str)\n\n    # Create a 2D table to store the lengths of palindromic subsequences\n    table = [[0 for _ in range(len(str) + 1)] for _ in range(len(str) + 1)]\n\n    # Initialize the first row and column with 1\n    for i in range(1, len(str) + 1):\n        table[i][0] = 1\n        table[0][i] = 1\n\n    # Fill the table in bottom-up manner\n    for i in range(1, len(str) + 1):\n        for j in range(1, len(str) + 1):\n            if str[i - 1] == str[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[len(str)][len(str)]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of longest palindromic subsequence for all prefixes of length i \n    table = [[0] * n for _ in range(n)] \n    # Initialize the base case of all prefixes of length 1\n    for i in range(n): \n        table[i][i] = 1 \n    # Find the length of longest palindromic subsequence for all prefixes of length 2 to n \n    for i in range(2, n): \n        # Check for palindromes of length 2 to i \n        for j in range(i): \n            # Check if the current substring is a palindrome and update the table entry if it is \n            if str[j] == str[i] and (i-j <= 2 or table[j+1][i-1]): \n                table[j][i] = table[j+1][i-1] + 2 \n            # Update the table entry if the current substring is not a palindrome \n            else: \n                table[j][i] = max(table[j][i-1], table[j+1][i]) \n    # Return the length of the longest palindromic subsequence for the entire string \n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Create a 2D table to store the lengths of palindromic subsequences\n    # of all possible lengths\n    table = [[0] * n for _ in range(n)]\n\n    # Base case: all characters are of equal length, so the length of palindromic subsequence is 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for i in range(1, n):\n        for j in range(i):\n            # If the characters at the current position are equal, then\n            # the length of palindromic subsequence is 2 + the length of\n            # the longest palindromic subsequence ending at the previous position\n            if str[i] == str[j]:\n                table[i][j] = 2 + table[i-1][j-1]\n            # If the characters at the current position are not equal, then\n            # the length of palindromic subsequence is the maximum of the length of\n            # the longest palindromic subsequence ending at the previous position\n            # and the longest palindromic subsequence ending at the next position\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a 2D array to store the lengths of subsequences ending at each index\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize LPS length and start index\n    max_len = 1\n    start = 0\n\n    # Fill the 2D array in bottom-up manner\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j]:\n                # If the characters are same, check if the subsequence ending at i can be extended to\n                # the subsequence ending at j with a single more character (i.e., s[i] + s[j])\n                dp[i][j] = dp[j] + 2\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n                    start = j\n            else:\n                # If the characters are not same, check if the subsequence ending at i can be extended\n                # to the subsequence ending at j without any additional characters\n                dp[i][j] = max(dp[j], dp[i - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    lps_array = [1] * n\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            lps_array[i] = lps_array[i-1] + 1\n        else:\n            lps_array[i] = 1\n    return lps_array[-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    n = len(str)\n    lps_array = [0] * n\n    max_length = 1\n    start = 0\n\n    for i in range(1, n):\n        if str[i] == str[i - 1]:\n            lps_array[i] = lps_array[i - 1] + 2\n            start = i - lps_array[i] + 1\n            max_length = max(max_length, lps_array[i])\n        else:\n            lps_array[i] = 1\n            start = i - 1\n            max_length = max(max_length, lps_array[i])\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def longest_palindrome_subseq(s):\n    n = len(s)\n    lps = [1] * n  # initialize lps array with length 1\n    \n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            lps[i] = lps[i-1] + 1  # check if the current character is same as previous character\n        else:\n            lps[i] = max(lps[i-1], lps[i])  # find maximum of previous two characters\n    \n    return lps[n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(s):\n    if len(s) < 2:\n        return len(s)\n\n    n = len(s)\n    # Initialize the table to store the length of the longest palindromic subsequence ending at i-th character\n    table = [[0] * n for _ in range(n)]\n\n    # Base case: if the string is a palindrome, its length is 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Check all possible pairs of characters to form a palindrome\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i][j - 1], table[i + 1][j])\n\n    return table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D table to store the length of the longest palindromic subsequence ending at each index\n    table = [[0] * n for _ in range(n)]\n    # initialize the first row and first column of the table\n    for i in range(n):\n        table[i][i] = 1\n    # fill in the rest of the table\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n    # return the length of the longest palindromic subsequence ending at index n-1\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for i in range(n)]\n    max_length = 1\n    \n    # Fill the first row and column\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            dp[i][i] = 1\n        else:\n            if str[i] == str[i-1]:\n                dp[i][i] = 2\n            else:\n                dp[i][i] = 1\n                \n    # Fill the rest of the matrix\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n                \n    return dp[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # Initialize the sum of harmonic numbers to 0\n    harmonic_sum = 0\n    # Calculate the harmonic sum of each integer between 1 and n-1\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # If n is less than 2, the harmonic sum is zero\n    if n < 2:\n        return 0\n    \n    # Calculate the harmonic sum using the formula:\n    # (1/n) + (1/n-1) +... + (1/1)\n    sum = (1/n)\n    for i in range(2, n):\n        sum += (1/i)\n    \n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) * (1/n - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) * (1/2) * (1/3) * (1/4) * (1/5) * (1/6) * (1/7) * (1/8) * (1/9) * (1/10) * (1/11) * (1/12) * (1/13) * (1/14) * (1/15) * (1/16) * (1/17) * (1/18) * (1/19) * (1/20) * (1/21) * (1/22) * (1/23) * (1/24) * (1/25) * (1/26) * (1/27) * (1/28) * (1/29) * (1/30) * (1/31) * (1/32) * (1/33) * (1/34) * (1/35) * (1/36) * (1/37) * (1/38) * (1/39) * (1/40) * (1/41) * (1/42) * (1/43) * (1/44) * (1/45) * (1/46) * (1/47) * (1/48) * (1/49) * (1/50) * (1/51) * (1/52) * (1/53) * (1/54) * (1/55) * (1/56) * (1/57) * (1/58) * (1/59) * (1/60) * (1/61) * (1/62) * (1/63) * (1/64) * (1/65) * (1/66) * (1/67) * (1/68) * (1/69) * (1/70) * (1/71) * (1/72) * (1/73) * (1/74) * (1/75) * (1/76) * (1/77) * (1/78) * (1/79) * (1/80) * (1/81) * (1/82) * (1/83) * (1/84) * (1/85) * (1/86) * (1/87) * (1/88) * (1/89) * (1/90) * (1/91) * (1/92) * (1/93) * (1/94) * (1/95) * (1/96) * (1/97) * (1/98) * (1/99) * (1/100) * (1/101) * (1/102) * (1/103) * (1/104) * (1/105) * (1/106) * (1/107) * (1/108) * (1/109) * (1/110) * (1/111) * (1/112) * (1/113) * (1/114) * (1/115) * (1/116) * (1/117) * (1/118) * (1/119) * (1/120) * (1/121) * (1/122) * (1/123) * (1/124) * (1/125) * (1/126) * (1/127) * (1/128) * (1/129) * (1/130) * (1/131) * (1/132) * (1/133) * (1/134) * (1/135) * (1/136) * (1/137) * ("
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize variables to keep track of the sum and the current number\n    sum = 0\n    num = 1\n    # Loop through each number up to n-1\n    for i in range(1, n):\n        # Add the current number to the sum and divide by the current number\n        sum += 1/num\n        # Update the current number to be the previous number\n        num = i\n    # Return the final sum\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        # Calculate harmonic sum of n-1 and n-2\n        harmonic_sum_of_n_minus_1 = harmonic_sum(n-1)\n        harmonic_sum_of_n_minus_2 = harmonic_sum(n-2)\n        \n        # Calculate harmonic sum of n\n        return 2*harmonic_sum_of_n_minus_2 - harmonic_sum_of_n_minus_1"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n-1) // 2"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a dictionary to store the frequency of each number in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Create an empty list to store the common numbers\n    common_nums = []\n    \n    # Iterate over array_nums2 and check if the frequency of each number is in the dictionary\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            common_nums.append(num)\n            freq_dict[num] -= 1\n    \n    # Return the common numbers as a list\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set from array_nums2 and store it in set_nums2\n    set_nums2 = set(array_nums2)\n    # Loop through array_nums1 and check if each element is in set_nums2\n    for num in array_nums1:\n        if num in set_nums2:\n            # If it is, add it to a new list and remove it from set_nums2\n            intersection_list.append(num)\n            set_nums2.remove(num)\n    # Return the new list of intersection elements\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Initialize an empty set to store the intersection\n    intersection = set()\n\n    # Loop through the first array\n    for num in array_nums1:\n        # If the number is in the second array, add it to the set of intersection\n        if num in array_nums2:\n            intersection.add(num)\n\n    # Convert the set of intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    :param array_nums1: list of integers\n    :param array_nums2: list of integers\n    :return: list of integers\n    \"\"\"\n    # Create a set of all unique elements in the first array\n    unique_nums1 = set(array_nums1)\n    # Create a set of all unique elements in the second array\n    unique_nums2 = set(array_nums2)\n    # Find the intersection of the two sets\n    intersection = unique_nums1.intersection(unique_nums2)\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Initialize an empty list to store the intersection\n    intersection = []\n    # Iterate through the elements of the first array\n    for num1 in array_nums1:\n        # Check if the element is also present in the second array\n        if num1 in array_nums2:\n            # If yes, add it to the intersection list\n            intersection.append(num1)\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_set = set(array_nums1) & set(array_nums2)\n    return list(intersection_set)\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a dictionary to store the frequency of each number in array1\n    freq_dict1 = {}\n    for num in array_nums1:\n        if num in freq_dict1:\n            freq_dict1[num] += 1\n        else:\n            freq_dict1[num] = 1\n    \n    # create another dictionary to store the frequency of each number in array2\n    freq_dict2 = {}\n    for num in array_nums2:\n        if num in freq_dict2:\n            freq_dict2[num] += 1\n        else:\n            freq_dict2[num] = 1\n    \n    # find the intersection of the two dictionaries\n    intersection = {}\n    for num in freq_dict1:\n        if num in freq_dict2 and freq_dict1[num] > 0 and freq_dict2[num] > 0:\n            intersection[num] = freq_dict1[num]\n    \n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        else:\n            result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    # Create an empty list to store the new list with the element inserted before each element in the original list\n    result = []\n    # Iterate through each element in the original list and append it to the result list\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Insert an element before each element in the list.\n    \"\"\"\n    # Create a new list with the same length as the original list\n    new_lst = [None] * len(lst)\n    # Loop over the elements of the original list\n    for i, elem_i in enumerate(lst):\n        # Insert the element before the current element in the new list\n        new_lst[i] = elem_i\n    # Append the element to the end of the new list\n    new_lst.append(elem)\n    # Return the new list\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    # Initialize a list to store the resulting list\n    result = []\n\n    # Iterate through the input list\n    for i in range(len(list)):\n        # Insert the element before each element in the list\n        result.append(element)\n        result.append(list[i])\n\n    # Return the resulting list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.insert(i, element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Insert the given element before each element in the list.\n\n    Parameters:\n    -----------\n    lst : list\n        The list to insert the element before.\n    element : any\n        The element to insert before each element in the list.\n\n    Returns:\n    --------\n    list\n        The resulting list with the element inserted before each element in the original list.\n    \"\"\"\n    # Create a new list with the element inserted before each element in the original list.\n    new_lst = [element] + lst\n\n    # Return the new list.\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = cmath.rect(number)\n        polar_number = (real**2 + imag**2)**0.5\n        print(f\"{number} in polar coordinates: {polar_number:.2f}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        try:\n            r, theta = cmath.polar(num)\n            print(f'r = {r:.2f}, theta = {theta:.2f}')\n        except TypeError:\n            print('Invalid input.')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        print(f'({real:.2f}, {imag:.2f})')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # Convert the complex number to polar coordinates using the cmath module\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        # Add the polar coordinates to the result list\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    # Initialize variables for radius and angle\n    r = 0\n    theta = 0\n\n    # Loop through each complex number in the input list\n    for number in numbers:\n        # Calculate the magnitude and angle of the complex number\n        magnitude = cmath.abs(number)\n        angle = cmath.phase(number)\n\n        # Update the variables with the new values\n        r = magnitude\n        theta = angle\n\n    # Return the converted complex numbers as a list of tuples\n    return [(r, theta)]"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = number\n        angle = cmath.phase(number)\n        magnitude = abs(number)\n        print(f'Polar Coordinates: {magnitude} at an angle of {angle*180/cmath.pi} degrees')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Convert each complex number in the list to polar coordinates\n    polar_coordinates = []\n    for number in numbers:\n        magnitude = cmath.sqrt(number.real**2 + number.imag**2)\n        angle = cmath.phase(number)\n        polar_coordinates.append((magnitude, angle))\n    \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''  \n    # create a list to store the polar coordinates of the complex numbers  \n    polar_list = []  \n  \n    # iterate through each complex number in the list  \n    for num in numbers:  \n        # extract the real and imaginary parts of the complex number  \n        real = num.real  \n        imag = num.imag  \n  \n        # calculate the magnitude of the complex number  \n        magnitude = cmath.sqrt(real**2 + imag**2)  \n  \n        # calculate the angle of the complex number in radians  \n        angle = cmath.phase(num)  \n  \n        # create a tuple with the magnitude and angle of the complex number  \n        polar_tuple = (magnitude, angle)  \n  \n        # append the polar tuple to the polar list  \n        polar_list.append(polar_tuple)  \n  \n    # return the polar list of complex numbers converted to polar coordinates  \n    return polar_list  "
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        x, y = cmath.polar(num)\n        print(\"({}, {})\".format(x, y))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            # extract the real and imaginary parts of the complex number\n            real = abs(num.real)\n            imag = abs(num.imag)\n            \n            # compute the polar angle in radians and convert to degrees\n            angle = cmath.phase(num) * 180 / cmath.pi\n            \n            # print the complex number in polar coordinates\n            print(f\"{real} + {imag}j in polar coordinates: {real}\u00b0, {angle}\u00b0\")\n        else:\n            print(f\"{num} is not a complex number.\")"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Using combinations_with_replacement function from itertools module\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all combinations of length n with replacement\n    all_combinations = combinations_with_replacement(l, n)\n\n    # Convert the generator to a list and return it\n    return list(all_combinations)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            comb.append((l[i], l[j]))\n    return comb"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    combos = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[i:], n):\n            combos.append((i, *j))\n    return combos"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[i:], n-1):\n            combination = (i,) + tuple(j)\n            combinations.append(combination)\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    result = []\n    for c in comb:\n        result.append(tuple(c))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    # Create a list of all numbers from 2 to n-1\n    nums = [True] * (n-1)\n    # Set all numbers less than 2 as non-prime\n    nums[:2] = [False] * 2\n    \n    # Iterate over the numbers from 3 to n-1\n    for i in range(3, n):\n        # Check if i is prime\n        if nums[i-3]:\n            # Mark all multiples of i as non-prime\n            for j in range(i*i, n, i):\n                nums[j-3] = False\n    \n    # Count the number of prime numbers in the list\n    count = 0\n    for num in nums:\n        if num:\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Initialize variables to store the maximum values\n    max1 = max2 = float('-inf')\n    # Loop through the elements of the tuples\n    for num in test_tup1:\n        # Compare the current number with the maximum value\n        if num > max1:\n            # Update the maximum value\n            max1 = num\n        elif num < max2 and num!= max1:\n            # Update the second maximum value if the current number is less than the maximum value\n            max2 = num\n    # Return the maximum value(s)\n    return max1, max2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Use the max() function to find the maximum value in each tuple\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n\n    # Use a conditional statement to compare the two maximum values\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = test_tup1\n        else:\n            max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # First, we need to make sure that the given tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The given tuples must have the same length.\")\n\n    # We can then iterate over the elements of both tuples and compare them\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Check if both tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must be of same length.\")\n    # Find the maximum element of each tuple\n    max1, max2 = max(test_tup1), max(test_tup2)\n    # Compare the maximum elements of the two tuples and return the tuple with maximum element\n    return tuple([max1 if max1 == max2 else max2])"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    # Initialize variables to store the maximum elements\n    max1 = max2 = None\n    # Iterate over the tuples\n    for i in range(len(test_tup1)):\n        # Check if the current element of the first tuple is greater than the second tuple\n        if test_tup1[i] > test_tup2[i]:\n            # If so, update the maximum element\n            if max1 is None or test_tup1[i] > max1:\n                max1 = test_tup1[i]\n            # If not, compare the current element with the maximum element of the second tuple\n            if max2 is None or test_tup1[i] > max2:\n                max2 = test_tup1[i]\n        else:\n            # If not, compare the current element with the maximum element of the first tuple\n            if max1 is None or test_tup2[i] > max1:\n                max1 = test_tup2[i]\n            # If not, compare the current element with the maximum element of the second tuple\n            if max2 is None or test_tup2[i] > max2:\n                max2 = test_tup2[i]\n    # Return the maximum elements\n    return (max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    # create a list to store the maximum values\n    max_values = []\n\n    # loop through the tuples and compare the values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_values.append(test_tup1[i])\n        else:\n            max_values.append(test_tup2[i])\n\n    # return the maximum values as a tuple\n    return tuple(max_values)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # initializing the maximum value as the first tuple element\n    max_val = test_tup1[0]\n    \n    # iterating over the elements of the second tuple\n    for i in range(1, len(test_tup2)):\n        # checking if the current element is greater than the current maximum\n        if test_tup2[i] > max_val:\n            # updating the maximum value\n            max_val = test_tup2[i]\n    \n    return max_val"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize the count and prime numbers to 0\n    count = 0\n    primes = []\n\n    # Loop n times and check if each number is a newman prime\n    for i in range(2, n):\n        # Check if i is a newman prime\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If i is a newman prime, add it to the prime list and increment the count\n        if is_prime:\n            primes.append(i)\n            count += 1\n\n    # Check if there are enough primes to find the nth newman prime\n    if count < n:\n        raise ValueError(\"Not enough primes found to find the nth newman prime\")\n\n    # Return the nth newman prime\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    i = 2\n    while count < n:\n        if i % 2!= 0:\n            flag = True\n            for j in range(3, int(i**0.5) + 1, 2):\n                if i % j == 0:\n                    flag = False\n                    break\n            if flag:\n                count += 1\n        i += 1\n    return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a variable to keep track of the number of primes found so far\n    count = 0\n    # Initialize a variable to keep track of the largest prime found so far\n    largest_prime = 1\n    # Initialize a variable to keep track of the largest prime found so far\n    candidate = 2\n    \n    while count < n:\n        # If the candidate is prime, check if it is larger than the current largest prime\n        if is_prime(candidate):\n            largest_prime = candidate\n            count += 1\n        \n        # If the candidate is not prime, increment it and continue iterating\n        candidate += 1\n\n    return largest_prime\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    for i in range(1, n):\n        if i % 2 == 0 and i % 3 == 0:\n            count += 1\n        elif i % 2!= 0 and i % 3!= 0:\n            count += 1\n    if count == 0:\n        return n\n    else:\n        return newman_prime(n + 1)\n\nprint(newman_prime(20)) # Output: 7"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    # Initialize variables for the loop\n    count = 3\n    current_prime = 3\n    # Loop through the odd numbers starting from 3\n    while count <= n:\n        # Check if the current number is prime\n        is_prime = True\n        for i in range(2, int(current_prime ** 0.5) + 1):\n            if current_prime % i == 0:\n                is_prime = False\n                break\n        # If the number is prime, add it to the list of primes\n        if is_prime:\n            primes.append(current_prime)\n        # Update the count and increment the current number\n        count += 2\n        current_prime += 2\n    # Return the nth prime in the list of primes\n    return primes[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a list to store the primes\n    primes = []\n\n    # Define the function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Define the function to generate newman-shanks-williams primes\n    def generate_newman_shanks_williams_primes():\n        count = 1\n        while len(primes) < n:\n            if is_prime(count):\n                primes.append(count)\n            count += 1\n\n    # Call the function to generate newman-shanks-williams primes\n    generate_newman_shanks_williams_primes()\n\n    # Return the nth prime in the list\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize variables\n    is_prime = [True] * (n+1)\n    is_prime[0] = False\n    is_prime[1] = False\n    prime_count = 2\n    \n    # Loop through all numbers from 2 to n\n    while prime_count <= n:\n        # Check if the number is prime\n        if is_prime[prime_count]:\n            # Mark all multiples of the prime as composite\n            for i in range(prime_count*prime_count, n+1, prime_count):\n                is_prime[i] = False\n        # Increment the count of prime numbers\n        prime_count += 1\n    \n    # Return the nth prime number\n    return prime_count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize the counter variable\n    count = 0\n\n    # Initialize the current prime number to 2\n    p = 2\n\n    # Loop through all prime numbers up to the square root of n\n    while p**2 <= n:\n        # Check if the current prime number is divisible by n\n        if n % p == 0:\n            # If it is, increment the counter and move on to the next prime number\n            count += 1\n            break\n        else:\n            # If it's not, move on to the next prime number\n            p += 1\n\n    # If the counter is equal to n, then n is not a newman\u2013shanks\u2013williams prime number\n    if count == n:\n        return False\n    else:\n        return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    count = 0\n    i = 2\n    while count < n:\n        if is_newman_prime(i):\n            count += 1\n        i += 1\n    return count\n\ndef is_newman_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a counter variable\n    count = 0\n    \n    # Iterate until n is reached\n    while count < n:\n        # Initialize a boolean variable to keep track of whether the current number is prime or not\n        is_prime = True\n        \n        # Iterate from 2 to the square root of the current number\n        for i in range(2, int(n ** 0.5) + 1):\n            # If the current number is divisible by i, it is not prime\n            if n % i == 0:\n                is_prime = False\n                break\n        \n        # If the number is prime, increment the counter variable\n        if is_prime:\n            count += 1\n    \n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return count"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples have different lengths.\")\n        return\n\n    # initialize an empty list to store the result\n    result = []\n\n    # loop through each element in the input tuples\n    for i in range(len(test_tup1)):\n        try:\n            # perform element-wise division of the i-th elements of the input tuples\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            print(f\"Error: The {i}-th element of the input tuples cannot be divided by zero.\")\n            return\n\n    # return the result tuple\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples should have same length\")\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        try:\n            result = test_tup1[i] / test_tup2[i]\n            print(f\"Element {i+1}: {result}\")\n        except ZeroDivisionError:\n            print(f\"Element {i+1} cannot be divided by zero.\")"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths.\")\n        return\n\n    # Perform element-wise division\n    result = tuple(a/b for a, b in zip(test_tup1, test_tup2))\n\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == type(test_tup2[i]):\n            result_tup += (test_tup1[i]/test_tup2[i],)\n        else:\n            print(\"Type Error: Cannot perform division between tuples of different types.\")\n            return\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] // test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # If the length of the list is less than or equal to L, split it into two parts with length L\n    if len(list1) <= L:\n        return (list1, [])\n    \n    # Otherwise, split the list into two parts with length L and the remaining length as 1\n    half = int(len(list1) / 2)\n    first_part = list1[:half]\n    second_part = list1[half+1:]\n    \n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    '''\n    if len(lst) < L:\n        return lst, []\n    else:\n        return lst[:L], lst[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # calculate the length of the first part\n    L_first_part = L\n    \n    # calculate the length of the second part\n    L_second_part = len(list1) - L_first_part\n    \n    # split the list into two parts and return the results in a tuple\n    return (list1[:L_first_part], list1[L_first_part:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Finding the length of the first part of the list\n    length = len(list1) // 2\n    # Splitting the list into two parts\n    first_part = list1[:length]\n    second_part = list1[length:]\n    # Returning the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Split a list into two parts with the given length.\n    \"\"\"\n    # check if L is positive and less than or equal to the length of list1\n    if not (0 < L <= len(list1)):\n        raise ValueError(\"L should be a positive integer less than or equal to the length of list1\")\n    # split the list into two parts and return a tuple containing them\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"The length of the input list must be greater than or equal to L.\")\n    mid = len(list1) // 2\n    return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Using slicing to create a new list with the desired length\n    first_part = list1[:L]\n    second_part = list1[L:]\n    # Return the resulting lists as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = L // 2\n    first_part = list1[:half]\n    second_part = list1[half:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return None\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 + 3 * h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Calculate the dog's age in dog years\n    dog_years = 7 * h_age\n\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's years based on height\n    years = h_age / 12\n    # Return the result as an integer\n    return int(years)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = (7 * 12) + (2 * h_age)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert the dog's height in inches to centimeters\n    h_cm = h_age * 2.54\n    \n    # Calculate the dog's age in dog's years\n    dog_age = h_cm / 150\n    \n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7\n    dog_months = 0\n    dog_days = 0\n\n    if h_age < 1:\n        h_age = 1\n    elif h_age > 12:\n        h_age = 12\n\n    while h_age > 0:\n        days_in_month = 30\n        if h_age % 12 == 0:\n            days_in_month = 365\n        elif h_age % 12 == 6:\n            days_in_month = 365\n        elif h_age % 12 == 1:\n            days_in_month = 366\n\n        h_age -= 1\n        days_in_month -= 1\n\n        if days_in_month > 0:\n            dog_months += 1\n            dog_days += days_in_month\n        else:\n            h_age -= 1\n\n    return dog_months, dog_days"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * (h_age / 12)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = len(S)\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        raise ValueError(\"Step must be greater than 0.\")\n    if len(S) % step!= 0:\n        raise ValueError(\"The length of the list must be a multiple of the step value.\")\n    \n    # Initialize an empty list to store the resulting lists\n    result = []\n    \n    # Split the input list into sublists every n-th element\n    for i in range(0, len(S), step):\n        # Initialize an empty list to store the current sublist\n        current = []\n        # Add each nth element to the current sublist\n        for j in range(i, min(i+step, len(S))):\n            current.append(S[j])\n        # Add the current sublist to the result list\n        result.append(current)\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Use list comprehension to split S into sublists of length step\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        sublist = S[i:i+step]\n        result.append(sublist)\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize empty list to store resulting lists\n    result = []\n    # loop through list S and split it for every nth element\n    for i in range(0, len(S), step):\n        # append current list to result list\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize empty list to store resulting lists\n    result = []\n    # loop through list and split it every nth element\n    for i in range(0, len(S), step):\n        # append the split list to the result list\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2 # side length times the square of the length of the diagonal"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the area of the cube using the formula:\n    #   s = 6 * l^2\n    s = 6 * l**2\n    # Return the lateral surface area\n    return s"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateral_surface_area_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    # Initialize a variable to store the sum of squares\n    sum = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is odd\n        if i % 2!= 0:\n            # Add the square of the current number to the sum\n            sum += i*i\n\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0  \n    for i in range(1, n+1, 2):  \n        sum_of_squares += i*i  \n    return sum_of_squares  \n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n+1, 2):\n            sum += i*i\n        return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initializing sum variable to 0\n    sum_squares = 0\n    # initializing counter variable to 1\n    counter = 1\n\n    # loop runs n times\n    for i in range(n):\n        # adding the square of the counter to the sum_squares variable\n        sum_squares += counter * counter\n        # incrementing counter by 2\n        counter += 2\n\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current number to the sum variable\n        sum += i**2\n        \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    for i in range(1, n+1, 2):\n        odd_sum += i**2\n    return odd_sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the value of n\n    num = 1\n    \n    # Loop until n is equal to 1\n    while num <= n:\n        # Print the current number of stars\n        print(\"*\" * num)\n        \n        # Increment the value of n\n        num += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize a string to store the star numbers\n    star_numbers = ''\n\n    # Loop through the range of 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Calculate the number of spaces needed to reach the i-th star\n        num_spaces = 2 * i - 1\n\n        # Loop through the range of i to 1 (inclusive) and add stars to the string\n        for j in range(i, 0, -1):\n            # Add a star to the string\n            star_numbers += '*'\n\n            # Add enough spaces to reach the i-th star\n            for k in range(num_spaces):\n                # Add a space to the string\n                star_numbers +=''\n\n        # Add a newline character to separate each set of stars\n        star_numbers += '\\n'\n\n    # Return the star numbers string\n    return star_numbers"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the variable to store the star number\n    star_num = 0\n    \n    # Loop through the range of numbers from 1 to n\n    for i in range(1, n+1): \n        # Multiply the current number by 5 (to get the number of stars)\n        num_stars = i * 5\n        \n        # Add the number of stars to the variable\n        star_num += num_stars\n        \n    # Return the final value of the variable\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the string with spaces\n    star_num ='' * (n - 1)\n    # Add a star to the string\n    star_num += '*'\n    # Return the string\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the variable to 1\n    num = 1\n    # loop through n-1 times and add the previous number to it\n    for i in range(n-1):\n        num = num + num\n    # return the result\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize a string variable to store the result\n    result = \"\"\n    \n    # Loop n number of times\n    for i in range(n):\n        # Add n-i spaces to the left of the result\n        result += \" \"*(n-i)\n        \n        # Add an asterisk to the right of the result\n        result += \"*\"\n        \n        # Add n-i spaces to the right of the result\n        result += \" \"*(n-i)\n        \n        # Add a newline character to separate each row\n        result += \"\\n\"\n    \n    # Return the result string\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 + 4 * find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    num = 1\n\n    for i in range(1, n+1):\n        num = num + count\n        count = 2 * count - 1\n\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    result = \"\"\n    for i in range(1, n+1):\n        result += \"*\"\n    print(result)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize a variable to store the star number\n    star_num = 0\n\n    # Loop through the number of starrs\n    for i in range(n):\n        # Increment the star number by 1\n        star_num += 1\n\n        # Print the star number\n        print(\"*\" * star_num)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k)!= str:\n        return \"Invalid input. Please provide a string.\"\n    elif len(k)!= 1:\n        return \"Invalid input. Please provide a single character.\"\n    else:\n        return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # ASCII values of all characters from 'a' to 'z'\n    ascii_vals = [97 + i for i in range(26)]\n    # ASCII value of the given character\n    ascii_val = ascii_vals[ord(k) - 97]\n    # Return the ascii value of the character\n    return ascii_val"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    ascii_val = ord(k)\n    return ascii_val"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {\n        'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104,\n        'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112,\n        'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120,\n        'y': 121, 'z': 122, 'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71,\n        'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80,\n        'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89,\n        'Z': 90, '0': 48, '1': 49, '2': 50, '3': 51, '4': 52, '5': 53, '6': 54, '7': 55,\n        '8': 56, '9': 57\n    }\n\n    if k in ascii_dict:\n        return ascii_dict[k]\n    else:\n        return None"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    # Initialize the sum variable to zero\n    even_sum = 0\n\n    # Loop through each element of the list\n    for i in range(len(arr)):\n\n        # If the element is even and at an even position, add it to the sum\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n\n    # Return the final sum\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:  # check if current element is even\n            if i % 2 == 0:  # check if current position is even\n                sum_even += arr[i]  # add even number to sum\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n            even_index += 1\n        elif arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum, even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index_sum = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index_sum += i\n    \n    return even_sum, even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = None\n    \n    # loop through the list and find the even numbers and their even positions\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            even_sum += num\n            even_index = i\n            if even_index % 2 == 0:\n                break\n    \n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum += arr[i]\n\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n\n    sum_even = 0\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n            sum_even_index += i\n\n    return sum_even, sum_even_index"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    total = 0\n    for i in range(n):\n        total += i * i * i * i * i\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i ** 5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_power = 0\n    for i in range(2, n+1, 2):\n        sum_even_power += i ** 5\n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum_even_power = 0\n    for i in range(2, n+1, 2):\n        sum_even_power += i**5\n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            even_numbers.append(i)\n    sum_even_numbers = 0\n    for i in even_numbers:\n        sum_even_numbers += i ** 5\n    return sum_even_numbers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_ = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_ += i ** 5\n    return sum_"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes in an integer n and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2): \n        # Raise the even natural number to the fifth power and add it to the sum variable\n        sum += i**5\n    \n    # Return the sum variable\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # initializing an empty list to store the rear elements of each tuple\n    rear_list = []\n    # iterating over each tuple in the list\n    for tup in test_list:\n        # extracting the rear element of the tuple and appending it to the rear_list\n        rear_list.append(tup[-1])\n    # returning the rear_list\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the number of elements in the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"The number of elements in the two tuples must be equal.\"\n    \n    # Loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n        \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Loop through the first tuple and subtract the corresponding element from the second tuple\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # subtract the corresponding elements of the second tuple\n        test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for index in range(len(test_tup1)):\n        result.append(test_tup1[index] - test_tup2[index])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # loop through the tuple and check if the index is the same as in the second tuple\n    for i in range(len(test_tup1)):\n        # check if the element is in the second tuple and subtract the element of the first tuple from it\n        if test_tup2[i] in test_tup1:\n            test_tup1[i] -= test_tup2[i]\n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and calculates the sum of even index binomial coefficients using matrix exponentiation.\n\n    Returns:\n    The sum of even index binomial coefficients using matrix exponentiation.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Initialize the matrix to 1\n    matrix = [[1,1],[1,0]]\n    # Iterate over even indices\n    for i in range(0, n, 2):\n        # Calculate the next power of the matrix\n        power_matrix = matrix\n        for j in range(1, i):\n            power_matrix = power_matrix @ matrix\n        # Add the next term to the sum\n        sum += power_matrix[0][1]\n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i-2)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # Calculate the sum of even index binomial coefficients\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i-1)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum += coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial_coeffs = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_even_binomial_coeffs += math.comb(n, i)\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        coeff_sum = 0\n        for i in range(1,n+1):\n            coeff_sum += math.comb(n,i)\n        return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum += coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Define the binomial coefficients as a list of lists\n    binomial_coeffs = [[1],[1,1]]\n    \n    # Iterate over the index and add up the even coefficients\n    sum_even_coeffs = 0\n    for i in range(2,n+1):\n        if i % 2 == 0:\n            sum_even_coeffs += binomial_coeffs[i-2][0]\n    \n    return sum_even_coeffs"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r * r * h / 3"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r**2*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * (3.14 * r * r * h)\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * r * r * h # volume of the cylinder\n    return vol # returning the volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14*(r**2)*h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume of the cylinder using the formula V=1/3 * \u03c0 * r^2 * h\n    volume = (1 / 3) * 3.14159 * (r ** 2) * h\n    \n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    vol = 3.14159 * r * r * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * r * r * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes a dictionary and an integer n as inputs and returns a filtered dictionary.\n    The filtered dictionary contains only the key-value pairs where the value is greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Create an empty list to store the filtered items\n    filtered_list = []\n    \n    # Loop through the dictionary and add items to the filtered list if their value is greater than or equal to n\n    for key, value in dict.items():\n        if value >= n:\n            filtered_list.append(dict[key])\n    \n    # Return the filtered dictionary\n    return filtered_list"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) // 2:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i]!= test_tup[i+1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i > 0 and test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    if n < 1 or n > 100:\n        return \"Please enter a number between 1 and 100.\"\n\n    decagonal_numbers = [1, 12, 36, 100, 300, 900, 2520, 8200, 22000, 66000, 196000, 590000, 1720000, 5180000, 14960000, 44200000, 126400000, 368000000, 937500000]\n\n    if n <= len(decagonal_numbers):\n        return decagonal_numbers[n-1]\n    else:\n        return \"Please enter a number between 1 and 100.\"\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    This function takes an integer n as input and returns True if n is a decagonal number, else it returns False.\n    A decagonal number is a number which is equal to the sum of the squares of its corresponding odd positive integers.\n    For example, 12 is a decagonal number because 1^2 + 2^2 = 5^2 + 6^2 = 22 + 36 = 58.\n    '''\n    # initialize variables to hold the sum of squares of odd positive integers\n    odd_sum = 0\n    decagonal_sum = 0\n\n    # loop through odd positive integers from 1 to n\n    for i in range(1, n+1):\n        # if i is odd, add i^2 to the sum of squares of odd positive integers\n        if i % 2!= 0:\n            odd_sum += i**2\n\n    # if the sum of squares of odd positive integers is greater than or equal to the square of n, then n is a decagonal number\n    if odd_sum >= n**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    def decagonal_helper(n):\n        \"\"\"\n        Helper function to find the nth decagonal number.\n        \"\"\"\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 5\n        elif n == 3:\n            return 12\n        else:\n            return decagonal_helper(n - 1) + decagonal_helper(n - 2)\n\n    return decagonal_helper(n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1, n+1):\n        j = n - i + 1\n        if i == j:\n            print(i)\n        elif i!= j:\n            print(i, j)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return is_num_decagonal(n // 2) + n\n    else:\n        return is_num_decagonal(n // 2) + n - 1\n\nn = int(input(\"Enter a number: \"))\nresult = is_num_decagonal(n)\nprint(\"The nth decagonal number is:\", result)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n\n\nn = int(input(\"Enter the number for which you want to find the decagonal number: \"))\n\nif n < 1:\n    print(\"Invalid input.\")\nelse:\n    decagonal = is_num_decagonal(n)\n    print(f\"The {n}th decagonal number is: {decagonal}\")"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_nums = []\n    for i in range(1, n+1):\n        decagonal_nums.append(i*4)\n    return decagonal_nums[n-1]\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    i = 1\n    \n    while i <= n:\n        decagonal += i\n        i += 2\n        \n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 1\n    for i in range(1, n+1):\n        decagonal_num += 4*i\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Base case: n=0, return 0\n    if n == 0:\n        return 0\n    # Base case: n=1, return 1\n    elif n == 1:\n        return 1\n    # Base case: n=2, return 5\n    elif n == 2:\n        return 5\n    # Recursive case: calculate nth decagonal number\n    else:\n        return 5*is_num_decagonal(n-1) + 1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, val in enumerate(dlist):\n        if val == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, val in enumerate(dlist):\n        if val == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all its elements are unique, and False otherwise.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # converting the list to set to remove duplicates\n    unique_set = set(test_list)\n\n    # checking if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Use a set to check if all the elements of the list are unique or not\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n    # Loop through each element in the list\n    for element in test_list:\n        # Check if the element is already in the set\n        if element in unique_set:\n            # If it is, return False because the list contains duplicates\n            return False\n        else:\n            # If it's not, add it to the set\n            unique_set.add(element)\n    # If all elements are unique, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if all the elements in a given list are unique or not.\n\n    Args:\n    test_list (list): The list to be checked for uniqueness.\n\n    Returns:\n    bool: True if all the elements in the list are unique, False otherwise.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements in a list are unique.\n\n    Args:\n    test_list (list): A list of elements to check.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # convert the list to a set so that duplicates are automatically removed\n    unique_set = set(test_list)\n    # check if the length of the set is equal to the length of the original list\n    return len(unique_set) == len(test_list)"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the lists are of the same length\n    if len(nums1)!= len(nums2):\n        return \"Error: The lists must have the same length.\"\n    \n    # create an empty list to store the result\n    result = []\n    \n    # iterate over each element of the lists\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists must have same length\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n\n    Args:\n    nums1 (list): A list of integers.\n    nums2 (list): A list of integers.\n\n    Returns:\n    list: A list of integers representing the difference between nums1 and nums2.\n    '''\n    # Check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    # Subtract each element of the lists element-wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    # create an empty list to store the result\n    result = []\n    # loop through each element in the first list\n    for num1 in nums1:\n        # loop through each element in the second list\n        for num2 in nums2:\n            # calculate the difference between the two elements\n            diff = num1 - num2\n            # append the difference to the result list\n            result.append(diff)\n    # return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    # Subtract each element of the lists element-wise\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Convert the integer to a string\n    num_str = str(n)\n    # Create a dictionary to store the frequency of each digit\n    freq_dict = {}\n    # Iterate through each character in the string\n    for char in num_str:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[char] = 1\n    # Iterate through each digit in the string\n    for digit in freq_dict:\n        # If the frequency of the digit is greater than or equal to the digit itself, return False\n        if freq_dict[digit] >= int(digit):\n            return False\n    # If all digits have a frequency less than or equal to their value, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0] * 10 # initialize a list to store the count of each digit\n    for i in str(n): # iterate through each digit in the integer\n        count[int(i)] += 1 # increment the count of that digit in the list\n    for i in count: # iterate through each digit in the list\n        if i > n // i: # if the count is greater than the integer divided by that digit\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # initialize the frequency dictionary\n    freq = {}\n    # loop through each digit in the integer and count its frequency in the dictionary\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # loop through each digit in the integer and check if the frequency is greater than the digit itself\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    \n    # if all digits have a frequency less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    This function takes an integer as input and returns True if the frequency of each digit in the integer is less than or equal to the digit itself,\n    and False otherwise.\n    '''\n    freq = [0] * 10\n    \n    # Count the frequency of each digit in the integer\n    for digit in str(n):\n        freq[int(digit)] += 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > n % 10:\n            return False\n    \n    # If all the conditions are satisfied, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize a dictionary to store the frequency of each digit in the integer\n    freq_dict = {}\n    \n    # loop through each digit in the integer\n    for digit in str(n):\n        # update the frequency of the digit in the dictionary\n        freq_dict[digit] = freq_dict.get(digit, 0) + 1\n    \n    # loop through each digit in the dictionary\n    for digit in freq_dict:\n        # check if the frequency of the digit is less than or equal to the digit itself\n        if freq_dict[digit] > digit:\n            return False\n    \n    # if all digits have frequency less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    digits = [int(d) for d in str(n)]\n    freq = [0] * 10\n\n    for d in digits:\n        freq[d] += 1\n\n    for f in freq:\n        if f > 0 and f > n % 10:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = [0] * 10 # initialize frequency list with 0 for each digit\n    \n    # calculate frequency of each digit\n    for digit in digits:\n        freq[digit] += 1\n    \n    # check if frequency of each digit is less than or equal to the digit itself\n    for digit in digits:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize the dictionary to store the frequency of digits\n    freq_dict = {}\n    # loop through each digit in the integer and update the frequency dictionary\n    for digit in str(n):\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n    \n    # loop through each digit in the frequency dictionary and check if the frequency is less than or equal to the digit itself\n    for digit in freq_dict:\n        if freq_dict[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer as input and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digit_freq = [0] * 10 # initialize the digit frequency list with 0 for all digits\n    \n    # loop through each digit in the integer and increment its frequency in the digit_freq list\n    for digit in str(n):\n        digit_freq[int(digit)] += 1\n    \n    # loop through each digit in the digit_freq list and check if its frequency is greater than or equal to the digit itself\n    for digit_freq_i in digit_freq:\n        if digit_freq_i < digit_freq_i:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # convert the integer to a string\n    n = str(n)\n\n    # create a dictionary to store the frequency of each digit in the integer\n    freq = {}\n\n    # iterate over each digit in the integer and update the frequency dictionary\n    for digit in n:\n        freq[digit] = freq.get(digit, 0) + 1\n\n    # iterate over each digit in the integer and check if its frequency is greater than or equal to the digit itself\n    for digit in n:\n        if freq[digit] < digit:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    \n    if list[0] == element:\n        return True\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        if list[0] == element:\n            return check_element(list[1:], element)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    \n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) > 0:\n        for item in list:\n            if item!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(elem == element for elem in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    \n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a.*[b]{2,3}')\n    if pattern.match(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a\\s*(?:b){2,3}')\n    match = pattern.search(text)\n    return bool(match)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab[bB]{2,}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b){2,3}')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<![a-zA-Z])a(?!.*b)(?<!.*b){2,3}(b)(?!.*a)(?<!.*a){2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a{1}b{2,3}')\n    match = pattern.search(text)\n    if match:\n        print(\"The string contains the pattern 'a{1}b{2,3}'\".format(match.group()))\n    else:\n        print(\"The string does not contain the pattern 'a{1}b{2,3}'\".format(match.group()))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b){2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Get the maximum sum of a contiguous subarray\n    max_sum = max(a)\n    max_sum_index = a.index(max_sum)\n\n    # Loop through the array and find the maximum sum of a contiguous subarray formed by repeating the given array k times\n    for i in range(n, max_sum_index, -1):\n        current_sum = a[i-n:i+1]\n        current_sum.extend([0] * k)\n        current_sum = sum(current_sum)\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_index = i\n\n    # Find the maximum sum of a contiguous subarray formed by repeating the given array k times\n    max_sub_array = a[max_sum_index-n:max_sum_index+1]\n    max_sub_array.extend([0] * k)\n    max_sub_array = sum(max_sub_array)\n\n    return max_sub_array"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize variables to keep track of the maximum sum and the sum of the current subarray\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate through the array and repeat each element k times to create the modified array\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if i < k-1:\n            curr_sum -= a[i]\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize the maximum sum of a contiguous array\n    max_sum = float('-inf')\n\n    # Initialize the sum of the first k elements\n    sum_first_k = sum(a[:k])\n\n    # Initialize the sum of the last k elements\n    sum_last_k = sum(a[-k:])\n\n    # Initialize the maximum sum of the first k elements\n    max_sum_first_k = max_sum_last_k = max(sum_first_k, sum_last_k)\n\n    # Initialize the maximum sum of the modified array\n    max_sum_modified = 0\n\n    # Iterate through the modified array\n    for i in range(n - k + 1):\n        # Compute the sum of the first k elements\n        sum_first_k = sum_first_k - a[i] + a[i + k]\n\n        # Compute the sum of the last k elements\n        sum_last_k = a[-1]\n\n        # Update the maximum sum of the first k elements\n        max_sum_first_k = max(max_sum_first_k, sum_first_k)\n\n        # Update the maximum sum of the modified array\n        max_sum_modified = max(max_sum_modified, max_sum_first_k + sum_last_k)\n\n    return max_sum_modified"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    This function takes in an array a, its length n and the number of times to repeat the array.\n    It returns the maximum sum of a contiguous array that can be formed by repeating the array k times.\n    \"\"\"\n    # create the modified array by repeating the original array k times\n    modified_array = a * k\n\n    # calculate the sum of the modified array\n    sum_of_modified_array = sum(modified_array)\n\n    # initialize the maximum sum and its index\n    max_sum = float('-inf')\n    max_sum_index = 0\n\n    # loop through the original array\n    for i in range(n):\n        # calculate the sum of the current subarray\n        current_sum = a[i] + modified_array[i]\n\n        # if the current sum is greater than the current maximum sum, update the maximum sum and its index\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_index = i\n\n    # return the maximum sum of a contiguous array that can be formed by repeating the array k times\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a copy of the original array\n    modified_array = a.copy()\n    \n    # Initialize the maximum subarray sum to the first element of the array\n    max_sum = a[0]\n    \n    # Repeat the array k times\n    for i in range(k):\n        # Append the first element of the modified array to the end of the modified array\n        modified_array.append(modified_array[0])\n        \n        # Calculate the maximum subarray sum of the modified array\n        max_sum = max(max_sum, modified_array[-1])\n        \n        # Remove the first element of the modified array\n        modified_array.pop(0)\n        \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Create the modified array by repeating the given array k times\n    modified_array = []\n    for i in range(k):\n        modified_array.extend(a)\n        \n    # Sort the modified array in descending order\n    modified_array.sort(reverse=True)\n    \n    # Initialize the maximum sum to the first element of the modified array\n    max_sum = modified_array[0]\n    \n    # Loop over the elements of the modified array\n    for i in range(1, n):\n        # If the current element is greater than the current maximum sum, update the maximum sum\n        if modified_array[i] > max_sum:\n            max_sum = modified_array[i]\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_a = a * k\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(n):\n        curr_sum += a[i]\n        mod_sum = curr_sum % mod_a\n        \n        if mod_sum > max_sum:\n            max_sum = mod_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    temp = []\n    \n    # Loop through the array and repeat it k times\n    for i in range(k):\n        temp.extend(a)\n    \n    # Calculate the sum of the original array and the repeated array\n    original_sum = sum(a)\n    repeated_sum = sum(temp)\n    \n    # Loop through the array again and calculate the sum of the max subarray\n    for i in range(n):\n        current_sum = original_sum + temp[i] - temp[i-n]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the result variable to store the largest sum\n    max_sum = float('-inf')\n    \n    # Initialize a dictionary to store the subarray sum and its index in the original array\n    subarray_sum_index = {}\n    \n    # Traverse through the original array\n    for i in range(n):\n        # Initialize the current subarray sum\n        curr_subarray_sum = 0\n        \n        # Initialize the start index of the current subarray\n        start_index = i\n        \n        # Traverse through the current subarray k times\n        for j in range(k):\n            # Calculate the index of the element in the original array\n            current_index = (i + j) % n\n            \n            # Add the current element to the current subarray sum\n            curr_subarray_sum += a[current_index]\n            \n            # Update the start index of the next subarray\n            start_index = current_index\n            \n            # Add the current subarray sum and its index to the dictionary\n            subarray_sum_index[(curr_subarray_sum, start_index)] = 1\n            \n        # Calculate the maximum sum of the current subarray\n        curr_max_sum = curr_subarray_sum\n        \n        # Traverse through the next k-1 elements of the current subarray\n        for j in range(1, k):\n            # Calculate the index of the element in the original array\n            current_index = (i + j) % n\n            \n            # Calculate the sum of the current subarray and the next element\n            next_elem = a[(current_index + 1) % n]\n            curr_subarray_sum += next_elem\n            \n            # Update the maximum sum of the current subarray\n            curr_max_sum = max(curr_max_sum, curr_subarray_sum)\n        \n        # Update the maximum sum of the current subarray\n        max_sum = max(max_sum, curr_max_sum)\n    \n    # Return the maximum sum of the original array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the maximum sum of the first k elements\n    max_sum = float('-inf')\n    curr_sum = sum(a[:k])\n    \n    # Iterate over the remaining elements\n    for i in range(n-k+1):\n        # Add the first k elements of the modified array\n        for j in range(k):\n            curr_sum += a[i+j]\n        \n        # Update the maximum sum if necessary\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        # Remove the first element of the modified array\n        curr_sum -= a[i]\n        \n        # Remove the last element of the modified array\n        curr_sum -= a[n-1-i]\n    \n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_squares = 0\n    for i in range(2, n+1, 2):\n        even_squares += i**2\n    return even_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    i = 2\n    while count < n:\n        if i % 2 == 0:\n            sum += i**2\n            count += 1\n        i += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_numbers = list(range(2, 2 * n + 1, 2))\n    sum_squares = 0\n    for num in even_numbers:\n        sum_squares += num**2\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 2\n        count += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # iterate from 0 to n-1\n    for i in range(n):\n        # check if i is even\n        if i % 2 == 0:\n            # add the square of i to the sum variable\n            sum += i**2\n    \n    # return the sum of squares\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        max_length_list.append(len(list1[i]))\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns the list of maximum length in the list.\n    \"\"\"\n    max_list = []\n    for lst in list1:\n        if len(lst) > len(max_list):\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for item in list1:\n        lengths.append(len(item))\n    max_length_index = lengths.index(max(lengths))\n    return list1[max_length_index]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        lengths = [len(sublist) for sublist in list1[i]]\n        max_lengths.append(max(lengths))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length = []\n    for lst in list1:\n        if len(lst) > len(max_length):\n            max_length = lst\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or (len(sublist) == len(max_lengths) and sublist[-1] > max_lengths[-1]):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        max_length = len(max(sublist, key=len))\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum length lists\n    max_lengths = []\n    # Iterate over each sublist in the input list\n    for sublist in list1:\n        # Find the length of each sublist and add it to the max_lengths list\n        lengths = [len(sublist)]\n        for item in sublist:\n            if isinstance(item, list):\n                lengths.append(max_length(item))\n            else:\n                lengths.append(1)\n        # If the length of any sublist is greater than any previous maximum length, update max_lengths\n        if max(lengths) > max(max_lengths):\n            max_lengths = lengths\n    # Return the list of maximum length sublists\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a dictionary to store the count of ways for each number of colors\n    ways = {1: 1}\n    \n    # Loop through all the possible numbers of colors\n    for colors in range(2, k+1):\n        # For each number of colors, calculate the number of ways to paint the fence\n        ways[colors] = sum(ways[colors-1] for _ in range(colors))\n    \n    # Find the count of ways for the given number of posts and colors\n    count = ways[k]\n    \n    # For the number of posts, find the count of ways for each adjacent pair of posts\n    for i in range(n):\n        count *= ways[2]\n    \n    # Return the final count of ways\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    fence = [0] * (k + 1) #initialize an array of length k+1 to store the frequency of each color\n    \n    for i in range(2, n+1): #iterate over all the adjacent pairs of posts\n        if fence[i-1] == fence[i-2]: #if the frequency of the color of the previous post is equal to the frequency of the color of the second previous post\n            fence[i] = fence[i-1] #then the frequency of the color of the current post is same as that of the previous post\n        else: #if the frequency of the color of the previous post is different from the frequency of the color of the second previous post\n            fence[i] = fence[i-1] + 1 #then the frequency of the color of the current post is incremented by 1\n            \n    return fence[n] #return the frequency of the last post\n    \n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # initialize a 2D array to store the number of ways of painting the fence\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # base case: when there is only one post, there is only one way of painting the fence\n    dp[1][1] = 1\n\n    # fill the rest of the array using dynamic programming\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            # if the color of the post is equal to the color of the adjacent post, there is only one way to paint the fence\n            if j == dp[i - 1][j]:\n                dp[i][j] = dp[i - 1][j]\n            # if the color of the post is different from the color of the adjacent post, there are two ways to paint the fence\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n\n    # return the number of ways of painting the fence\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "Now, let's write the Python script to solve this problem."
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case: if there are only 1 or 0 colors, there is only 1 way to paint the fence\n    if k <= 0 or n == 0:\n        return 1\n    \n    # base case: if there are more than 2 colors, there is no way to paint the fence\n    if k > 2:\n        return 0\n    \n    # dynamic programming approach: we can use a 2D array to store the number of ways to paint the fence for k colors and n-k colors\n    # we will initialize the first row and column to 1 (since we cannot paint the first or last posts with any color)\n    ways = [[1]*(n-k+1) for i in range(k+1)]\n    \n    # fill the rest of the rows and columns using the following recurrence relation:\n    # ways[i][j] = ways[i-1][j] + ways[i][j-1] (if the two adjacent posts have different colors)\n    # ways[i][j] = ways[i][j] (if the two adjacent posts have the same color)\n    \n    for i in range(2, k+1):\n        for j in range(1, n-k+1):\n            if ways[i-1][j] + ways[i][j-1] == ways[i][j]:\n                ways[i][j] = ways[i-1][j]\n            else:\n                ways[i][j] = ways[i][j] + ways[i-1][j] + ways[i][j-1]\n    \n    return ways[k][n-k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Initialize the table to store the number of ways\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    \n    # Base cases\n    dp[0][0] = 1\n    dp[0][1] = 1\n    \n    # Fill the table\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j % 2 == 0:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    \n    # Return the number of ways\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    # check if the number of colors is less than or equal to 1\n    if k <= 1:\n        return 0\n    \n    # check if the number of posts is less than or equal to 0\n    if n <= 0:\n        return 1\n    \n    # create a 2D array to store the count of ways for different colors and adjacent posts\n    ways = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    \n    # initialize the first row and column of the array with the count of ways for one color and adjacent post\n    ways[0][0] = 1\n    ways[0][1] = 1\n    \n    # fill in the rest of the array using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            ways[i][j] = ways[i-1][j] + ways[i][j-1]\n    \n    # return the value in the bottom-right corner of the array\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    dp = [0] * (n+1)\n    dp[0] = 1\n\n    for i in range(1, n+1):\n        dp[i] = 1\n\n        for j in range(1, k+1):\n            if j >= dp[i-1]:\n                dp[i] += dp[i-j]\n            else:\n                break\n\n    return dp[-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a boolean matrix to store the number of ways of painting the fence with n posts and k colors\n    # The first row and column of the matrix are initialized as 1, as they have only one way of painting the fence\n    fence = [[1] * (k + 1) for _ in range(n + 1)]\n\n    # Fill in the matrix using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            # If the current post has the same color as the previous two posts, then there is only one way of painting the fence\n            if j >= 3:\n                fence[i][j] = fence[i - 1][j]\n\n            # If the current post has the same color as the previous post and the previous two posts have different colors, then there are two ways of painting the fence\n            elif j == 2:\n                fence[i][j] = fence[i - 1][j] + fence[i - 1][j - 1]\n            else:\n                fence[i][j] = fence[i - 1][j]\n\n    # Return the final answer\n    return fence[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # Create a 2D array with n+1 rows and k+1 columns\n    f = [[1]*(k+1) for _ in range(n+1)]\n\n    # Initialize the first row and column\n    for i in range(1, n+1):\n        f[i][0] = 1\n    for j in range(1, k+1):\n        f[0][j] = 1\n\n    # Fill the remaining rows and columns\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == j:  # adjacent posts have the same color\n                f[i][j] = f[i-1][j] + f[i][j-1]\n            else:\n                f[i][j] = f[i-1][j] + f[i][j]\n\n    # Return the value of f[n][k] which will give the number of ways to paint the fence\n    return f[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    if quotient * m!= n:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Find the quotient of two numbers (rounded down to the nearest integer)\n\n    :param n: The numerator\n    :type n: int or float\n    :param m: The denominator\n    :type m: int or float\n    :return: The quotient of n and m\n    :rtype: int\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    This function finds the quotient of two numbers rounded down to the nearest integer.\n\n    Args:\n    n: The first number.\n    m: The second number.\n\n    Returns:\n    The quotient of n and m, rounded down to the nearest integer.\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # Use integer division to avoid floating point errors\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter of the triangle using Heron's formula\n    s = (w+h)/2\n    # calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s*(s-w)*(s-h)*(s-w))\n    # calculate the hypotenuse using Pythagoras' theorem\n    hypotenuse = math.sqrt(w*w + h*h)\n    # find the angle of the triangle using the law of cosines\n    angle = math.acos((area/hypotenuse)*((w**2)+(h**2))/(2*hypotenuse*(w**2+h**2)))\n    # calculate the third side of the triangle using the formula\n    third_side = hypotenuse * math.sin(angle)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Using the formula for the hypotenuse\n    c = math.sqrt(w**2 + h**2)\n\n    # Returning the third side of the right angled triangle\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Use the Pythagorean theorem to calculate the length of the hypotenuse\n    hypotenuse = math.sqrt(w**2 + h**2)\n    \n    # Use the Law of Cosines to calculate the opposite side\n    opposite = math.sqrt(w**2 + hypotenuse**2)\n    \n    # Use the Law of Cosines to calculate the adjacent side\n    adjacent = math.sqrt((w/2)**2 + hypotenuse**2)\n    \n    # Use the Law of Cosines to calculate the angle formed by the three sides\n    angle = math.acos((opposite**2 + adjacent**2 - hypotenuse**2)/(2*opposite*adjacent))\n    \n    # Return the third side of the right angled triangle\n    return hypotenuse*math.sin(angle)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #calculate the length of the hypotenuse\n    c = math.sqrt((w**2)+h**2)\n    #calculate the length of the other side\n    a = math.sqrt((w**2)+(h**2)-(c**2))\n    #return the third side\n    return a"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    area = (w * h) / 2\n    c = math.sqrt(area)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # calculate the length of the other two sides\n    a = math.sqrt(s**2 - w**2)\n    b = math.sqrt(s**2 - h**2)\n\n    # calculate the third side of the triangle\n    c = w * h / (w + h)\n\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function will find the third side of a right angled triangle using Heron's formula.\n    \"\"\"\n    s = (w**2 + h**2) ** 0.5\n    area = math.sqrt(s * (s - w) * (s - h))\n    return area"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize the maximum value to None\n    max_val = None\n    \n    # iterate through each element in the list\n    for val in listval:\n        # if the current value is greater than the current maximum value, update the maximum value\n        if val > max_val:\n            max_val = val\n    \n    # return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize maximum value\n    max_val = None\n    # Loop through the list and find the maximum value\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf') # initialize max value to negative infinity\n    for value in listval:\n        if value > max_val: # check if current value is greater than max value\n            max_val = value # update max value if current value is greater than max value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for num in listval:\n        if max_num is None or num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = float('-inf')\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_value = float('-inf')\n    for item in listval:\n        if isinstance(item, float):\n            if item > max_value:\n                max_value = item\n        elif isinstance(item, int):\n            if item > max_value:\n                max_value = item\n        elif isinstance(item, str):\n            if len(item) > len(max_value):\n                max_value = item\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = float('-inf')\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(lst):\n    '''\n    This function takes a list as input and returns the maximum value present in it.\n    '''\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize maxval to the first value in the list\n    maxval = listval[0]\n    # Loop through the rest of the list and update maxval if a larger value is found\n    for i in range(1, len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    divisor = 1\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        # Partition the array into two parts based on arr[i]\n        left = 0\n        right = i - 1\n        while left <= right:\n            if arr[left] > arr[i]:\n                left += 1\n            elif arr[left] < arr[i]:\n                right -= 1\n            else:\n                left += 1\n                right -= 1\n\n        # Calculate the number of inversions in the left partition\n        if left < i:\n            inv_count += i - left\n\n        # Move the pivot element to its correct position\n        arr[left], arr[i] = arr[i], arr[left]\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    # count the inversions by comparing each element with every other element\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j-i)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize variables for counting inversions\n    i = 0\n    inv_count = 0\n\n    # Use a two-pointer approach to count inversions\n    left = 0\n    right = n - 1\n    while i <= right:\n        if arr[i] <= arr[left]:\n            i += 1\n        elif arr[i] > arr[left]:\n            inv_count += right - i + 1\n            left += 1\n        else:\n            inv_count += right - i + 1\n            i += 1\n            left += 1\n\n    # Return the count of inversions\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            \n    result += left[i:]\n    result += right[j:]\n    \n    return result\n\n\ndef get_Inv_Count(arr):\n    inv_count = 0\n    \n    arr = merge_sort(arr)\n    \n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                \n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Divide the array into two halves recursively\n    if n > 1: \n        mid = n // 2 \n        left_inv = get_Inv_Count(arr[:mid]) \n        right_inv = get_Inv_Count(arr[mid:]) \n        # Count the inversions in each half recursively\n        left_count = 0 \n        right_count = 0 \n        for i in range(mid): \n            if arr[i] > arr[mid]: \n                left_count += 1 \n        for i in range(mid, n): \n            if arr[mid] > arr[i]: \n                right_count += 1 \n        # Count the total number of inversions in the entire array\n        total_inv = left_count + right_count + left_inv + right_inv \n        return total_inv\n    else:\n        # Base case for the recursive function\n        return 0"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n\n    # If the array has one element or less, it's sorted, so no inversions needed\n    if n <= 1:\n        return 0\n\n    # Divide the array into two halves\n    mid = n // 2\n    left_inv = get_Inv_Count(arr[:mid])\n    right_inv = get_Inv_Count(arr[mid:])\n\n    # Compute the inversions in the two halves\n    left_sum = sum_inversions(arr[:mid])\n    right_sum = sum_inversions(arr[mid:])\n\n    # Merge the two inversions counts\n    return left_inv + left_sum + right_inv + right_sum\n\n\ndef sum_inversions(arr):\n    \"\"\"\n    Write a python function to count the sum of inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n\n    # Traverse the array from 0 to n-1, comparing each element with its adjacent elements\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    def merge_sort(arr): \n        if len(arr) <= 1: \n            return arr \n\n        mid = len(arr) // 2 \n        left = arr[:mid] \n        right = arr[mid:] \n\n        left = merge_sort(left) \n        right = merge_sort(right) \n\n        return merge(left, right) \n\n    def merge(left, right): \n        result = [] \n        i = j = 0 \n\n        while i < len(left) and j < len(right): \n            if left[i] < right[j]: \n                result.append(left[i]) \n                i += 1 \n            else: \n                result.append(right[j]) \n                j += 1 \n\n        result += left[i:] \n        result += right[j:] \n\n        return result \n\n    inv_count = 0 \n    left = 0 \n    right = len(arr) - 1 \n\n    while left < right: \n        pivot = arr[left] \n        i = left + 1 \n        j = right \n\n        while i <= j: \n            if arr[i] < pivot: \n                i += 1 \n                inv_count += j - i + 1 \n            elif arr[j] > pivot: \n                j -= 1 \n                inv_count += j - i + 1 \n            else: \n                i += 1 \n                j -= 1 \n\n        if left < j: \n            arr[left], arr[j] = arr[j], arr[left] \n            inv_count += len(arr) - (j - left) + 1 \n\n        left += 1 \n        right -= 1 \n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the count of inversions in the array. \n    Inversion count is the number of pairs of elements that have different values but are in the same order. \n    Inversion count is a measure of the relative efficiency of sorting algorithms.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Count the inversions\n    left = 0\n    right = len(arr) - 1\n    inv_count = 0\n\n    while left < right:\n        if arr[left] <= arr[right]:\n            left += 1\n        else:\n            # To get the inversion count, we need to compare the elements from both ends of the array\n            inv_count += (right - left)\n            right -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    # Divide the array into two halves recursively\n    if n > 1:\n        mid = n // 2\n        left_inv_count = get_Inv_Count(arr[:mid])\n        right_inv_count = get_Inv_Count(arr[mid:])\n\n        # Count inversions between the two halves\n        for i in range(mid):\n            for j in range(mid, n):\n                if arr[i] > arr[j]:\n                    inv_count += n - j\n        for i in range(mid, n):\n            for j in range(mid, i + 1):\n                if arr[i] > arr[j]:\n                    inv_count += n - j\n\n        # Merge the two halves and count the inversions in the merged array\n        merge_arr = merge(arr[:mid], arr[mid:])\n        for i in range(n):\n            for j in range(n):\n                if merge_arr[i] > merge_arr[j]:\n                    inv_count += n - i\n        return left_inv_count + right_inv_count + inv_count\n    else:\n        return 0\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            inv_count += len(left) - i\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n\n    # Traverse through all possible subarrays of size 2\n    for i in range(n-1):\n        # Find the two smallest elements in the subarray\n        min_1 = min(arr[i], arr[i+1])\n        min_2 = min(arr[i+1], arr[n-1])\n\n        # Swap the smallest element with the first element of the subarray\n        arr[i], arr[i+1] = min_1, min_2\n\n        # Count the inversions in the current subarray\n        inv_count += n - i - 2\n\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list and returns a flattened list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for element in list1:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    This function takes a nested list and returns a flattened list.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    max_profit = defaultdict(int)\n    for transaction in stdata:\n        if transaction[0] == 'buy':\n            max_profit[transaction[1]] = max(max_profit[transaction[1]], transaction[2])\n        elif transaction[0] =='sell':\n            max_profit[transaction[1]] = max(max_profit[transaction[1]], -transaction[2])\n        else:\n            raise ValueError('Invalid transaction type')\n        max_sum = max(max_sum, max(max_profit.values()))\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate\n    max_agg = defaultdict(int)\n\n    # Loop through the list of tuples\n    for name, dept, salary in stdata:\n        # Check if the maximum aggregate for the department is greater than the current salary\n        if max_agg[dept] < salary:\n            max_agg[dept] = salary\n\n    # Return the maximum aggregate from the defaultdict\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each transaction\n    max_agg = defaultdict(int)\n    \n    # Loop through the list of tuples\n    for transaction in stdata:\n        # Calculate the aggregate of the transaction\n        agg = sum(transaction)\n        \n        # Update the maximum aggregate for the transaction\n        max_agg[transaction[0]] = max(max_agg[transaction[0]], agg)\n        \n    # Find the maximum aggregate from all transactions\n    max_agg_total = max(max_agg.values())\n    \n    # Return the maximum aggregate total\n    return max_agg_total"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for i in range(len(stdata)):\n        for j in range(i+1, len(stdata)):\n            max_agg[stdata[i][0] - stdata[j][0]] += stdata[j][1]\n    return max(max_agg.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and calculates the maximum aggregate using a defaultdict.\n    The defaultdict is used to keep track of the maximum value seen so far for each stock symbol.\n    '''\n    max_dict = defaultdict(int) # Create a defaultdict to keep track of max values for each stock symbol\n    \n    # Iterate through the list of tuples\n    for stock, price in stdata:\n        # Add the price to the max value for the stock symbol\n        max_dict[stock] += price\n    \n    # Find the maximum value from the defaultdict\n    max_value = max(max_dict.values())\n    \n    return max_value"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples representing the sales data and returns the maximum aggregate.\n    The list of tuples should contain two elements, the first element representing the sale date and the second element representing the total sale amount.\n    '''\n    # Create a dictionary to store the maximum aggregate for each sale date\n    max_aggs = defaultdict(int)\n\n    # Loop through the list of tuples\n    for sale_date, sale_amount in stdata:\n        # Add the sale amount to the corresponding maximum aggregate\n        max_aggs[sale_date] += sale_amount\n\n    # Find the maximum aggregate\n    max_agg = max(max_aggs.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate of all the transactions.\n\n    Args:\n        stdata: list of tuples of the form (date, amount)\n\n    Returns:\n        max_aggregate: maximum aggregate of all the transactions\n    '''\n    # Initialize a dictionary to store the transaction count for each day\n    transaction_count = defaultdict(int)\n\n    # Iterate through the list of tuples and update the transaction count for each day\n    for date, amount in stdata:\n        transaction_count[date] += 1\n\n    # Find the maximum aggregate of all the transactions\n    max_aggregate = 0\n    for count in transaction_count.values():\n        max_aggregate = max(max_aggregate, count)\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        max_dict[item[1]] += item[0]\n    max_aggregate = max(max_dict.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    agg_dict = defaultdict(int)\n    for transaction in stdata:\n        for item, price in transaction:\n            agg_dict[item] += price\n            if agg_dict[item] > max_agg:\n                max_agg = agg_dict[item]\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for i in stdata:\n        max_dict[i[0]] += i[1]\n    max_aggregate = max(max_dict.values())\n    return max_aggregate"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        current_sum = sum([int(digit) for digit in bin(i)[2:]])\n        if current_sum == (2**n - 1) - (2**n - 1) + current_sum - i:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize the count variable and loop variable\n    count = 0\n    i = 0\n\n    # Loop till the power of 2\n    while 2**i < 2**n:\n        # If the sum of the first n bits and the last n bits is same, increment the count\n        if sum(bin(i)[2:].zfill(n)) == sum(bin(2**i - 1)[2:].zfill(n)):\n            count += 1\n        i += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extract the first n bits from the sequence\n        first_n_bits = bin(i)[2:].zfill(n)\n        # Extract the last n bits from the sequence\n        last_n_bits = bin(i+2**n-1)[2:].zfill(n)\n        # Check if the sum of first n bits and last n bits is same\n        if int(first_n_bits, 2) == int(last_n_bits, 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(n)\n        sum_first = int(binary_str[:n])\n        sum_last = int(binary_str[-n:])\n        if sum_first == sum_last:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        first_n = i // 2**n\n        last_n = i % 2**n\n        if sum(bin(first_n)[2:].zfill(n)) == sum(bin(last_n)[2:].zfill(n)):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    def is_valid(seq):\n        first = sum([int(bit) for bit in seq[:n]])\n        last = sum([int(bit) for bit in seq[-n:]])\n        return first == last\n\n    count = 0\n    for i in range(2**n):\n        bin_seq = bin(i)[2:].zfill(2*n)\n        if is_valid(bin_seq):\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(2*n)):\n        first_sum = sum(int(digit) for digit in bin(i)[2:])\n        last_sum = sum(int(digit) for digit in bin(i)[-2:])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**2*n+1):\n        seq = bin(i)[2:].zfill(2*n)\n        sum_first = int(seq[:n])\n        sum_last = int(seq[-n:])\n        if sum_first == sum_last:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize variables for count and sum\n    count = 0\n    sum_first = 0\n    sum_last = 0\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert binary sequence to integer\n        seq = bin(i)[2:]\n\n        # Check if the sum of first n bits is same as sum of last n bits\n        if seq[:n] == seq[n:]:\n            # Increment count\n            count += 1\n\n        # Update sum_first and sum_last\n        sum_first = sum_first + int(seq[:n])\n        sum_last = sum_last + int(seq[n:])\n\n    # Return count\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    # count of binary sequences of length 2n where sum of first n bits is same as sum of last n bits\n    count = 0\n    # maximum possible sum of first n bits\n    max_sum = 2 ** (n - 1)\n    # maximum possible sum of last n bits\n    max_sum_last = 2 ** n - 1\n    # start with 0 and 2^n - 1 as the first two binary sequences\n    for i in range(2 ** n):\n        count += 1\n        # if the sum of first n bits is equal to the sum of last n bits, increment the count\n        if (i & 1) * (i >> 1) <= max_sum * max_sum_last:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for v in d.values())\n    else:\n        depth = 0\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for _ in d.values():\n        depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n            depth = max(depth, dict_depth(value))\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1 + dict_depth(value)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a counter variable to keep track of the depth\n    depth = 0\n    # Recursively check each key in the dictionary\n    for key in d:\n        # If the value is a dictionary, recursively call the function on it\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key])+1)\n        # If the value is not a dictionary, increment the counter variable\n        else:\n            depth += 1\n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = [(d, 1)]\n    while stack:\n        node, depth = stack.pop()\n        if isinstance(node, dict):\n            for key, value in node.items():\n                stack.append((value, depth+1))\n        else:\n            return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            max_depth = max(max_depth, depth)\n        else:\n            max_depth += 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for v in d.values())\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    rotated_arr = arr[0:index]\n    for i in range(1, rotations):\n        rotated_arr.append(arr[i])\n        rotated_arr.append(arr[0])\n        rotated_arr = rotated_arr[1:]\n\n    for i in range(rotations, len(arr)):\n        rotated_arr.append(arr[i])\n\n    for i in range(index):\n        rotated_arr.append(arr[i])\n\n    for i in range(index):\n        rotated_arr.pop(0)\n\n    return rotated_arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, ranges, rotations, and an index as input and returns the element at the given index after rotating the array a certain number of times.\n\n    Parameters:\n        arr (list): A list of integers\n        ranges (list): A list of tuples representing the range of values that can appear in the array.\n        rotations (int): The number of rotations required to find the element at the given index.\n        index (int): The index at which the element is to be found.\n\n    Returns:\n        The element at the given index after rotating the array a certain number of times.\n    '''\n\n    # Initialize the current index\n    curr_index = index\n\n    # Initialize the range of values\n    range_values = [range_tup[0] for range_tup in ranges]\n\n    # Loop for the required number of rotations\n    for i in range(rotations):\n        # Initialize the new range of values\n        new_range_values = []\n\n        # Loop for each range\n        for j in range(len(range_values)):\n            # Get the current range values\n            curr_range_values = range_values[j]\n\n            # Initialize the start and end values\n            start_value = curr_range_values[0]\n            end_value = curr_range_values[1]\n\n            # Loop for each value in the current range\n            for k in range(start_value, end_value + 1):\n                # Check if the value is in the new range values\n                if k in curr_range_values:\n                    # If it's in the new range values, add it to the list of new values\n                    new_range_values.append(k)\n\n            # Update the range values\n            range_values[j] = (min(new_range_values), max(new_range_values))\n\n        # Update the current index\n        curr_index = range_values[curr_index][1]\n\n    # Return the element at the final index\n    return arr[curr_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, a list of ranges, the number of rotations, and an index.\n    It calculates the index of the element after rotations, and returns the element.\n    '''\n    for i in range(rotations):\n        arr = arr[ranges[i]:] + arr[:ranges[i]]\n\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Convert rotations to dictionary\n    rot_dict = {}\n    for rotation in rotations:\n        rot_dict[rotation] = rot_dict.get(rotation, 0) + 1\n\n    # Find the number of rotations to apply to get the index\n    num_rot = 0\n    for range_start, range_end in ranges:\n        if index < range_start:\n            break\n        elif index >= range_start and index < range_end:\n            num_rot += rot_dict[range_end - range_start]\n            index = index - range_start\n\n    # Apply the required rotations to the array\n    for _ in range(num_rot):\n        arr = rotate_array(arr)\n\n    # Return the element at the final index\n    return arr[index]\n\n\ndef rotate_array(arr):\n    '''\n    Rotate an array in-place using the left rotation method.\n    '''\n    n = len(arr)\n    for i in range(n // 2):\n        # swap arr[i] with arr[n-i-1]\n        arr[i], arr[n-i-1] = arr[n-i-1], arr[i]\n\n    return arr"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    :param arr: list of integers\n    :param ranges: list of tuples, each containing a range of rotations (start, end)\n    :param rotations: number of rotations to perform\n    :param index: index of the element to be found\n    :return: element at the given index after rotations\n    \"\"\"\n    # initialize a dictionary to store the indices of elements after rotations\n    indices = {}\n\n    # loop through each range of rotations\n    for start, end in ranges:\n        # check if the rotation range contains the given index\n        if index >= start and index <= end:\n            # calculate the index after the rotation\n            rotation_index = index - start + 1\n            # check if the rotation has already been computed\n            if rotation_index in indices:\n                # return the element at the computed index\n                return arr[indices[rotation_index]]\n            # compute the index after the rotation and store it in the dictionary\n            indices[rotation_index] = arr.index(arr[rotation_index], start, end)\n\n    # if the element was not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import random\n\ndef find_Element(arr, ranges, rotations, index):\n    # Create a new array with the given ranges and rotations applied\n    new_arr = []\n    for i in range(len(arr)):\n        new_arr.append(arr[i])\n        for j in range(rotations):\n            new_arr.append(arr[(i + j) % len(arr)])\n\n    # Find the element at the given index in the new array\n    result = None\n    for i in range(len(new_arr)):\n        if i == index:\n            result = new_arr[i]\n            break\n\n    # If the element was not found, return None\n    if result is None:\n        return None\n\n    # Find the corresponding range and rotation that was used to obtain the result\n    used_ranges = []\n    used_rotations = []\n    for i in range(len(new_arr)):\n        if new_arr[i] == result:\n            used_ranges.append(ranges[i])\n            used_rotations.append(rotations[i])\n    used_ranges.reverse()\n    used_rotations.reverse()\n\n    # Calculate the final index of the result\n    final_index = 0\n    for i in range(len(used_ranges)):\n        final_index += used_ranges[i] * used_rotations[i]\n\n    return arr[final_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges and a number of rotations, and an index\n    as input. It returns the element at the given index after the number of rotations.\n    \"\"\"\n    # find the original element at the given index\n    original_element = arr[index]\n\n    # rotate the array by the specified number of rotations\n    for _ in range(rotations):\n        left, right = 0, len(arr) - 1\n        while left < right:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n\n    # find the element at the new index\n    new_index = index + rotations\n    new_element = arr[new_index]\n\n    # rotate the array back to its original position\n    for _ in range(rotations):\n        left, right = 0, len(arr) - 1\n        while left < right:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n\n    # return the original element\n    return original_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # get the length of the array\n    n = len(arr)\n\n    # get the number of rotations\n    k = rotations\n\n    # initialize the result element to None\n    result = None\n\n    # initialize the current index\n    curr_index = index\n\n    # loop through all the elements of the array\n    for i in range(k):\n        # get the current element\n        curr_element = arr[curr_index]\n\n        # get the range that includes the current element\n        range_index = ranges[curr_index]\n\n        # calculate the next index after rotating by 1\n        next_index = (curr_index + range_index) % n\n\n        # get the corresponding element after rotating by 1\n        next_element = arr[next_index]\n\n        # if the next element is not None, then we have found the element after rotating by 1\n        if next_element is not None:\n            # set the result to the next element\n            result = next_element\n\n            # break out of the loop\n            break\n\n        # update the current index to the next one\n        curr_index = next_index\n\n    # return the result element\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges and a number of rotations,\n    and an index as input and returns the element at that index after rotating the array.\n\n    Args:\n        arr (list): the array to be rotated\n        ranges (list): a list of tuples representing the range of indices to rotate\n        rotations (int): the number of rotations to perform\n        index (int): the index at which we want to find the element after rotating\n\n    Returns:\n        The element at the given index after rotating the array by the given number of rotations.\n\n    \"\"\"\n\n    # Convert the ranges list to a set to remove duplicates\n    unique_ranges = set(ranges)\n\n    # Calculate the number of rotations needed to reach the desired index\n    rotation_count = 0\n    current_index = index\n    for range_ in unique_ranges:\n        if current_index >= range_[0] and current_index < range_[1]:\n            rotation_count += 1\n            current_index = current_index - (range_[1] - range_[0]) + 1\n            if current_index == index:\n                break\n\n    # Calculate the final index after rotating the array\n    final_index = (index + rotations) % len(arr)\n    if final_index >= len(arr):\n        final_index = final_index - len(arr)\n\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Calculate the sum of all elements in the array\n    sum_arr = sum(arr)\n    # Initialize the current element as the first element in the array\n    current_element = arr[0]\n    # Initialize the sum of the previous elements as 0\n    previous_sum = 0\n    # Initialize the sum of the remaining elements as the sum of the array\n    remaining_sum = sum_arr\n    # Loop through the rotations\n    for i in range(rotations):\n        # Calculate the sum of the previous elements\n        previous_sum = sum_arr - previous_sum\n        # Calculate the sum of the remaining elements\n        remaining_sum = sum_arr - remaining_sum\n        # Calculate the new current element\n        current_element = (current_element * (previous_sum // remaining_sum)) % sum_arr\n        # Update the index\n        index = (index + 1) % len(arr)\n        # Update the sum of the remaining elements\n        remaining_sum = sum(arr[:index]) + sum(arr[index+1:])\n        # Update the sum of the previous elements\n        previous_sum = sum(arr[:index])\n    # Calculate the new current element\n    new_current_element = (current_element * (previous_sum // remaining_sum)) % sum_arr\n    # Return the new current element\n    return new_current_element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+', re.IGNORECASE)\n    for word in words:\n        match = pattern.search(word)\n        if match:\n            return match.group()"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    if len(p_words) < 2:\n        return \"There are less than two words starting with 'p'.\"\n    else:\n        return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define a regular expression pattern to match words starting with 'p'\n    pattern = r'\\b[Pp]?\\w+\\b'\n    \n    # Use the re.search() method to find all matches of the pattern in the list of words\n    matches = re.findall(pattern,''.join(words), re.IGNORECASE)\n    \n    # Return the first two matches if there are any, otherwise return None\n    if matches:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = r'\\b(p)\\w+\\b'\n    result = re.findall(pattern,''.join(words), re.IGNORECASE)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^\\w+p\\w+$'\n    for i in range(len(words)):\n        if re.match(pattern, words[i]):\n            return words[i], words[i+1]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    for i in range(len(words)):\n        if re.match(\"^p\", words[i]):\n            return words[i], words[i+1]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.*'\n    pattern = re.compile(pattern)\n    \n    result = []\n    for word in words:\n        if pattern.match(word):\n            if len(result) == 0:\n                result.append(word)\n            else:\n                break\n    \n    if len(result) == 2:\n        return result\n    else:\n        return 'No two words starting with \"p\" are available in the list.'"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    match = re.search(pattern, words)\n    if match:\n        return match.group(), words[match.end():]\n    else:\n        return None, words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    pattern = re.compile(r'^p[a-zA-Z]*')\n    result = re.findall(pattern, words)\n\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Regular expression pattern for 'p' at the beginning of a word\n    pattern = re.compile(r'^\\w*p\\w*$')\n    \n    # Find the first two words in the list that start with 'p'\n    for i in range(2):\n        word = words[i]\n        if pattern.match(word):\n            return word\n    \n    # If no words start with 'p', return None\n    return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == n:  # base case\n        return 0\n\n    if a[index] < a[k] or a[index] == a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Create a list to store the sum of increasing subsequences for each prefix ending at index\n    sum_list = [0] * n\n\n    # Initialize the maximum sum to 0\n    max_sum = 0\n\n    # Traverse the array starting from index i and update the sum_list and max_sum\n    for i in range(index, n):\n        # If the current element is greater than k, then set it to the maximum sum of all the subsequences ending at index i and k\n        if a[i] > k:\n            sum_list[i] = sum_list[i-1]\n        else:\n            # Find the index of the kth smallest element in the array\n            kth_smallest = kth_smallest_index(a, i)\n            # Add the sum of all the subsequences ending at index i to sum_list\n            sum_list[i] = sum_list[i-1] + a[i]\n\n            # Update the max_sum if the sum is greater than the previous max_sum\n            if sum_list[i] > max_sum:\n                max_sum = sum_list[i]\n\n    # Return the maximum sum of increasing subsequences\n    return max_sum\n\ndef kth_smallest_index(arr, i):\n    '''\n    Write a function to find the index of the kth smallest element in the array arr starting from index i.\n    '''\n    n = len(arr)\n    left = i - 1\n    right = n - 1\n    k = i - 1\n\n    while left >= 0 and right < n:\n        if arr[left] <= arr[right]:\n            left = left - 1\n        else:\n            right = right + 1\n\n        if left == k:\n            k = right\n        if right == k:\n            k = left\n\n    return k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        return 0\n    \n    dp = [[0] * (n+1) for i in range(index+1)]\n    \n    for i in range(1, index+1):\n        for j in range(k):\n            if j == 0:\n                dp[i][j+1] = max(dp[i-1][j+1], a[j])\n            else:\n                dp[i][j+1] = max(dp[i-1][j], dp[i-1][j+1], a[j]+dp[i-1][j+1])\n    \n    return dp[index][k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    if index == n:\n        return 0\n    \n    if a[index] < a[k]:\n        return max_sum_increasing_subseq(a, n, index + 1, k) + a[index]\n    \n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k) + a[k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > n:\n        return 0\n\n    if index == k:\n        return a[index]\n\n    dp = [0] * n\n    max_sum = float('-inf')\n\n    for i in range(index, n):\n        if i == k:\n            dp[i] = max(dp[i], a[i] + max_sum_increasing_subseq(a, n, index, k - 1))\n        elif i < k:\n            dp[i] = max(dp[i], a[i] + max_sum_increasing_subseq(a, n, i + 1, k))\n        else:\n            dp[i] = max(dp[i], max_sum_increasing_subseq(a, n, i + 1, k) + a[i] - a[k])\n\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize maximum sum and current sum to zero\n    max_sum = 0\n    current_sum = 0\n    \n    # Iterate through the array from index to n-1\n    for i in range(index, n):\n        \n        # If the element at index i is greater than or equal to k, add it to the current sum and include it in the subsequence\n        if a[i] >= k:\n            current_sum += a[i]\n        else:\n            # If the element at index i is less than k, subtract the minimum element from the current sum to include it in the subsequence\n            current_sum -= a[i]\n            \n        # Update maximum sum if the current sum is greater\n        max_sum = max(max_sum, current_sum)\n        \n    # Return maximum sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    prefix_sum = 0\n\n    # Traverse through the array from 0 to n\n    for i in range(n):\n        # If the current element is greater than k, then update the current sum to k*a[i]\n        if a[i] > k:\n            current_sum = k * a[i]\n\n        # If the current element is greater than or equal to a[i-1] then add a[i-1] to the current sum\n        elif a[i] >= a[index]:\n            current_sum += a[i]\n\n        # If the current element is less than or equal to a[i-1], then update the prefix sum and current sum\n        else:\n            prefix_sum = current_sum + a[i]\n            current_sum = a[i]\n\n        # Update the maximum sum if the current sum is greater than the previous maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum is equal to the previous maximum sum and the sum of the remaining elements is greater than the previous maximum sum, then update the maximum sum\n        if current_sum == max_sum and prefix_sum > max_sum:\n            max_sum = prefix_sum\n\n    # Return the maximum sum\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    max_sum = float('-inf')\n    curr_sum = 0\n    prev_index = -1\n    \n    # Initialize the prefix sum with the first element\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[1] = a[0]\n    \n    for i in range(2, n + 1):\n        # Calculate the sum of the increasing subsequence including the current element\n        curr_sum = max(prefix_sum[i-1] + a[i], a[i])\n        \n        # Update the prefix sum if the current sum is greater than the previous sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            prev_index = i\n        \n        # Update the prefix sum with the current element\n        prefix_sum[i] = curr_sum\n    \n    # Find the maximum sum of increasing subsequence until kth element\n    max_sum_k = float('-inf')\n    curr_sum_k = 0\n    \n    # Traverse the prefix sum from kth index to n to find the maximum sum of increasing subsequence until kth element\n    for i in range(k, n + 1):\n        curr_sum_k = max(curr_sum_k + prefix_sum[i], prefix_sum[i])\n        if curr_sum_k > max_sum_k:\n            max_sum_k = curr_sum_k\n    \n    return max_sum_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k == n:\n        return a[index]\n    \n    if k > n:\n        return 0\n    \n    if index == 0:\n        if a[k] > a[0]:\n            return max_sum_increasing_subseq(a, n, index + 1, k)\n        else:\n            return 0\n    \n    if a[k] > a[index]:\n        return max_sum_increasing_subseq(a, n, index, k - 1) + a[index]\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # initialize max_sum as 0\n    max_sum = 0\n    \n    # initialize dp as 0 for all indices\n    dp = [0] * n\n    \n    # initialize dp[i] as the maximum sum of increasing subsequence from prefix until i\n    for i in range(index, n):\n        dp[i] = max(a[i], dp[i-1])\n        \n        # update max_sum if current dp value is greater\n        if dp[i] + a[i] > max_sum and i < k:\n            max_sum = dp[i] + a[i]\n    \n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Get the length of the tuple\n    length = len(tuplex_copy)\n    \n    # Check if the length is greater than the desired length\n    if length > m:\n        # If it is, split the tuple into two parts\n        half = length // 2\n        first_half = tuplex_copy[:half]\n        second_half = tuplex_copy[half:]\n        \n        # If the desired length is less than the length of the first half,\n        # fill the first half with None values\n        if n < length:\n            first_half += (m - n) * (None,)\n        \n        # If the desired length is greater than the length of the first half,\n        # fill the second half with None values\n        if n > length:\n            second_half += (n - length) * (None,)\n        \n        # Return the concatenated tuple\n        return first_half + tuple(second_half)\n    # If the length is less than or equal to the desired length,\n    # return the tuple as is\n    else:\n        return tuplex_copy"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # make a deep copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # get the length of the tuple\n    tuplex_length = len(tuplex_copy)\n    # check if the length is less than or equal to the number of columns\n    if tuplex_length <= m:\n        # if the length is less than or equal to the number of columns,\n        # return the original tuple as it is\n        return tuplex_copy\n    # check if the length is greater than the number of columns\n    elif tuplex_length > m:\n        # if the length is greater than the number of columns,\n        # append a new tuple with zeros at the end\n        colon = (0,) * (n - tuplex_length % n)\n        # concatenate the original tuple and the colon tuple\n        colon_tuplex_copy = tuplex_copy + colon\n        # return the colon tuple\n        return colon_tuplex_copy"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n        tuplex: Tuple of length m\n        m: The number of rows in the colon\n        n: The number of columns in the colon\n\n    Returns:\n        A tuple of length n containing the elements of the colon.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append(tuplex[i])\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # deep copy of the input tuple\n    colontuple = deepcopy(tuplex)\n    # get the length of the tuple\n    length = len(tuplex)\n    # get the number of rows in the colon\n    rows = length // (m + 1)\n    # get the number of columns in the colon\n    cols = m\n    # get the number of elements in the colon\n    elements = rows * cols\n    # if the length of the colon is less than m * n, add zeroes\n    if length < elements:\n        for i in range(elements - length):\n            colontuple.append(0)\n    # get the index of the first element of the colon\n    start_index = 0\n    # set the index of the last element of the colon\n    end_index = length - 1\n    # set the index of the current element of the colon\n    current_index = start_index\n    # while there are elements in the colon\n    while current_index <= end_index:\n        # set the index of the next element of the colon\n        next_index = current_index + 1\n        # if the next element is not out of bounds, add it to the colon\n        if next_index <= end_index:\n            colontuple[current_index] += tuplex[next_index]\n        # move to the next element of the colon\n        current_index += 1\n    # return the colon tuple\n    return colontuple"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m < n:\n        return deepcopy(tuplex[:m])\n    elif m > n:\n        return deepcopy(tuplex[m:])\n    else:\n        return deepcopy(tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > len(tuplex):\n        return 'Error: Invalid length'\n    col = []\n    for i in range(m):\n        if n > len(tuplex[i]):\n            return 'Error: Invalid length'\n        col.append(deepcopy(tuplex[i][n-1]))\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(new_tuplex)\n    # Get the number of rows\n    rows = length//m\n    # Get the number of columns\n    cols = length//n\n    # Create a new list to store the colon\n    colon = []\n    # Loop through the rows\n    for i in range(rows):\n        # Create a new list to store the current row\n        row = []\n        # Loop through the columns\n        for j in range(cols):\n            # Calculate the index of the element in the new tuple\n            index = i*m + j\n            # Add the element to the row list\n            row.append(new_tuplex[index])\n        # Add the row list to the colon list\n        colon.append(row)\n    # Return the colon list\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = deepcopy(tuplex[m-1])\n    for i in range(n-1):\n        col.append(tuplex[m+i][n-1])\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Args:\n        tuplex (tuple): The tuple to get a colon from.\n        m (int): The number of elements to include in the colon.\n        n (int): The number of elements to leave out of the colon.\n\n    Returns:\n        tuple: A tuple containing the elements of the original tuple, but with elements removed.\n    \"\"\"\n    # Create a copy of the tuple so that we don't modify the original\n    tuplex_copy = deepcopy(tuplex)\n\n    # Remove elements from the copy of the tuple, starting with the first m elements\n    for _ in range(m):\n        tuplex_copy = tuplex_copy[1:]\n\n    # Remove elements from the copy of the tuple, starting with the first n elements\n    for _ in range(n):\n        tuplex_copy = tuplex_copy[:1]\n\n    # Return the copy of the tuple containing the colon\n    return tuple(tuplex_copy)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # make a copy of the input tuple\n    temp = deepcopy(tuplex)\n    # create a new list of tuples of length m\n    colon = []\n    # loop through each element in the input tuple\n    for i in range(len(temp)):\n        # extract the current element from the tuple\n        elem = temp[i]\n        # loop through each index in the colon list\n        for j in range(len(colon)):\n            # extract the current element from the colon list\n            col_elem = colon[j]\n            # if the current index is less than the mth index, add the element to the colon list\n            if j < m:\n                col_elem.append(elem)\n                # if the current index is equal to the mth index, add the colon list to the colon list\n                if j == m-1:\n                    colon.append(col_elem)\n    # create a new list of the elements in the tuple\n    new_tuplex = []\n    # loop through each colon list and append its elements to the new_tuplex list\n    for i in range(len(colon)):\n        for j in range(len(colon[i])):\n            new_tuplex.append(colon[i][j])\n    # return the new_tuplex list\n    return new_tuplex"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    largest_products = []\n\n    # Iterate through the lists and calculate the product of the two largest factors\n    for i in range(N):\n        max_num1 = max(nums1[i], nums2[i])\n        max_num2 = min(nums1[i], nums2[i])\n        product = max_num1 * max_num2\n        if product > max_product:\n            max_product = product\n            largest_products = [max_num1, max_num2]\n\n    # Return the largest products\n    return max_product, largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = [0] * N\n    for i in range(N):\n        max_products[i] = max(nums1[i] * nums2[i], nums1[i] * max_products[i-1], nums2[i] * max_products[i-1])\n\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the maximum product of each factor\n    max_product1 = float('-inf')\n    max_product2 = float('-inf')\n    \n    # Initialize variables to store the current product of each factor\n    product1 = 1\n    product2 = 1\n    \n    # Iterate over the first list\n    for i in range(N):\n        # Calculate the current product of the first factor\n        product1 *= nums1[i]\n        \n        # If the current product is larger than the maximum product, update the maximum\n        if product1 > max_product1:\n            max_product1 = product1\n            \n        # Calculate the current product of the second factor\n        product2 *= nums2[i]\n        \n        # If the current product is larger than the maximum product, update the maximum\n        if product2 > max_product2:\n            max_product2 = product2\n            \n    # Return the maximum product\n    return max_product1, max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the input lists in decreasing order\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    \n    # Initialize the variables to store the largest products and their indices\n    largest_products = []\n    indices = []\n    \n    # Iterate through the first N elements of the sorted lists\n    for i in range(N):\n        # Calculate the product of the current element of nums1 and nums2\n        product = nums1[i] * nums2[i]\n        \n        # Check if the product is greater than the largest product found so far\n        if product > largest_products[0] or (product == largest_products[0] and i > indices[0]):\n            # If it is, update the largest products and their indices\n            largest_products = [product]\n            indices = [i]\n        elif product == largest_products[0] and i == indices[0]:\n            # If the product is the same as the largest product found so far and the index is the same, append the index to the indices list\n            indices.append(i)\n        else:\n            # If the product is smaller than the largest product found so far, ignore it\n            continue\n    \n    # Return the largest products found\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 0\n    for i in range(N):\n        if nums1[i] > nums2[i]:\n            max_product = max(max_product, nums1[i] * nums2[i])\n        else:\n            max_product = max(max_product, nums2[i] * nums1[i])\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the largest products\n    largest_product1 = 0\n    largest_product2 = 0\n\n    # Loop through the specified number of times\n    for i in range(N):\n        # Calculate the product of the i-th element of each list\n        product1 = nums1[i] * nums2[i]\n        product2 = nums2[i] * nums1[i]\n\n        # Update the largest products if the current product is greater\n        if product1 > largest_product1:\n            largest_product2 = largest_product1\n            largest_product1 = product1\n        elif product2 > largest_product2:\n            largest_product2 = product2\n\n    # Return the largest products\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    largest_products = []\n    for i in range(N):\n        largest_products.append(nums1[i] * nums2[i])\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    if N > len(nums1) * len(nums2):\n        raise ValueError(\"N must be less than or equal to the product of the lengths of the two lists\")\n    largest_products = []\n    for i in range(N):\n        product = 1\n        for j in range(len(nums1)):\n            if j < i:\n                product *= nums1[j]\n            elif j > i:\n                product *= nums2[j-i-1]\n        largest_products.append(product)\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    max_product1 = max_product2 = float('-inf')\n    max_product1_index = max_product2_index = -1\n    \n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)):\n            product1 = nums1[i] * nums1[j]\n            product2 = nums2[i] * nums2[j]\n            \n            if product1 > max_product1:\n                max_product1 = product1\n                max_product1_index = i\n            elif product1 == max_product1:\n                max_product1_index = -1\n            \n            if product2 > max_product2:\n                max_product2 = product2\n                max_product2_index = j\n            elif product2 == max_product2:\n                max_product2_index = -1\n                \n            if max_product1_index!= -1 and max_product2_index!= -1 and N == 2:\n                return max(product1, product2)\n            elif max_product1_index!= -1 and max_product2_index!= -1 and N == 1:\n                return max(product1, product2)\n    \n    return -1"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Define variables to hold the largest products\n    largest_product_1 = 0\n    largest_product_2 = 0\n\n    # Loop through the first list and compare the products with the largest so far\n    for num in nums1:\n        product = num\n        for other_num in nums2:\n            if other_num < num:\n                product *= other_num\n        if product > largest_product_1:\n            largest_product_1 = product\n\n    # Loop through the second list and compare the products with the largest so far\n    for num in nums2:\n        product = num\n        for other_num in nums1:\n            if other_num < num:\n                product *= other_num\n        if product > largest_product_2:\n            largest_product_2 = product\n\n    # Return the number of largest products to select\n    return N"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of those numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their maximum.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns the maximum number.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list of characters to a tuple\n    tup = tuple(lst)\n    # Return the tuple of characters\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert the string to a list of characters\n    lst = list(str1)\n    # convert the list to a tuple\n    tup = tuple(lst)\n    # return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and returns a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function sets the left most unset bit in a binary number.\n\n    Args:\n        n: binary number\n\n    Returns:\n        The binary number with the left most unset bit set to 1.\n    \"\"\"\n\n    # Calculate the binary representation of n \n    binary = bin(n)[2:]\n\n    # Find the leftmost unset bit \n    for i in range(len(binary)): \n        if binary[i] == '0': \n            break \n    else: \n        i = len(binary)  # This line is necessary to avoid a \"break\" statement without a value for i.\n\n    # Set the leftmost unset bit to 1 \n    new_binary = binary[:i] + '1' + binary[i:]\n\n    # Convert the binary number back to an integer \n    return int(new_binary, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the result to be the least significant bit of the number\n    result = n & ~(n - 1)\n    # Initialize the bit position to be 0\n    bit_position = 0\n    # Loop through all the bits of the number\n    while result > 0:\n        # Check if the current bit is set to 1\n        if result & 1:\n            # If it is, return the bit position\n            return bit_position\n        # Shift the result by 1 and increment the bit position\n        result >>= 1\n        bit_position += 1\n    # If no unset bits are found, return -1\n    return -1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the binary representation of n\n    n_bin = bin(n)[2:]\n\n    # Iterate through the binary representation from left to right\n    for i in range(len(n_bin)):\n        # Check if the i-th bit is 1\n        if n_bin[i] == '1':\n            # If it is, set the i-th bit to 0 and return the resulting integer\n            return int(n_bin[:i] + '0' * (len(n_bin) - i - 1), 2)\n\n    # If no unset bit is found, return n itself\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the integer n to binary string\n    binary_str = bin(n)[2:]\n    # Find the leftmost unset bit\n    for i in range(len(binary_str)):\n        if binary_str[i] == '0':\n            left_most_unset_bit = i\n            break\n    # Set the leftmost unset bit to 1\n    binary_str = list(binary_str)\n    binary_str[left_most_unset_bit] = '1'\n    binary_str = ''.join(binary_str)\n    return int(binary_str, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0 # keep track of the number of unset bits\n    \n    # find the number of set bits in n\n    while n & 1 == 0:\n        count += 1\n        n >>= 1\n    \n    # set the leftmost unset bit to 1\n    n |= (1 << count)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in the binary representation of an integer.\n    '''\n\n    # Convert the integer to binary and find the index of the first unset bit\n    binary_str = bin(n)[2:] # Remove the '0b' prefix\n    unset_index = len(binary_str) - binary_str.index('1')\n\n    # Set the left most unset bit\n    new_n = n | (1 << unset_index)\n\n    return new_n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize the result to 0\n    result = 0\n\n    # Iterate through each bit in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # Check if the bit is unset\n        if bin(n)[2:].count('0') <= i:\n            # If the bit is unset, set it to 1\n            result |= 1 << i\n\n    # Return the result\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize variables\n    unset_bits = 0\n    set_bits = 0\n\n    # Count unset bits\n    for i in range(32):\n        if ((n >> i) & 1) == 0:\n            unset_bits += 1\n\n    # Count set bits\n    for i in range(32):\n        if ((n >> i) & 1) == 1:\n            set_bits += 1\n\n    # Find the left most unset bit\n    left_most_unset_bit = 0\n    for i in range(32):\n        if ((n >> i) & 1) == 0:\n            left_most_unset_bit = i\n            break\n\n    # Set the left most unset bit\n    n |= 1 << left_most_unset_bit\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the result variable as 0\n    result = 0\n    \n    # Loop through the binary representation of the number\n    while n:\n        # If the least significant bit of the binary representation is 1, then set the result to the current bit position\n        if n & 1:\n            result = n\n        \n        # Shift the number to the right by 1\n        n >>= 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit_mask = 1\n    while bit_mask & n:\n        bit_mask <<= 1\n    return bit_mask"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r**2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r ** 2 * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the base of the cone\n    base = r * math.sin(math.pi/3)\n\n    # calculate the height of the cone\n    height = h\n\n    # calculate the volume of the cone\n    volume = (1/3) * math.pi * (base**2) * height\n\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume of the base of the cone\n    V_base = (1/3) * math.pi * r ** 2 * h\n    # calculate the volume of the cone surface\n    V_cone_surface = math.pi * r ** 2\n    # calculate the volume of the cone\n    V_cone = V_base + V_cone_surface\n    # return the volume of the cone\n    return V_cone"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone\n\n    :param r: radius of the cone\n    :type r: float\n    :param h: height of the cone\n    :type h: float\n    :return: volume of the cone\n    :rtype: float\n    \"\"\"\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r**2 * h / 3\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize max power of 2 as 1\n    max_power = 1\n    \n    # Loop through all the numbers from 2 to n\n    for i in range(2, n+1):\n        \n        # Check if i is a power of 2\n        if i == 1:\n            continue\n        elif i % 2 == 0:\n            \n            # If i is a power of 2, update max_power\n            max_power = i\n    \n    # Return max_power\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 0\n    while n > 1:\n        highest_power += 1\n        n >>= 1\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 0\n    while n > 1:\n        power += 1\n        n >>= 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n % 2 == 0:\n        n = n // 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n >>= 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n // 2\n    \n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes a number as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the variable to store the highest power of 2 that is less than or equal to n\n    highest = 1\n\n    # Loop until we find the highest power of 2\n    while highest <= n:\n        # Increase the highest power of 2 by 1\n        highest <<= 1\n\n    # Return the highest power of 2 that is less than or equal to n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to store the highest power of 2 that is less than or equal to n\n    highest = 0\n    # Loop through all integers from 1 to n, checking if each integer is a power of 2\n    for i in range(1, n+1): \n        # Check if i is a power of 2\n        if i == 2**highest: \n            # If i is a power of 2, update the highest power of 2 found so far\n            highest += 1\n    # Return the highest power of 2 found\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2**int(n.bit_length() - 1)\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1 or n == 2:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the nth lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    # Define the first two lucas numbers\n    lucas_numbers = [0, 2]\n\n    # Loop through the remaining lucas numbers\n    for i in range(2, n+1):\n        # Compute the current lucas number as the sum of the two previous ones\n        lucas_numbers.append(lucas_numbers[i-1] + lucas_numbers[i-2])\n\n    # Return the nth lucas number\n    return lucas_numbers[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    # initialize first two lucas numbers as 2 and 1 respectively\n    lucas_list = [2, 1]\n\n    # loop until we reach the nth lucas number\n    for i in range(2, n + 1):\n        # add the previous two lucas numbers to get the current lucas number\n        lucas_list.append(lucas_list[-1] + lucas_list[-2])\n\n    # return the nth lucas number\n    return lucas_list[-1]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(elem, string) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    # Loop through each element in the list\n    for i in range(len(list_)):\n        # Apply the format string to the element and append it to a new list\n        new_list.append(string.format(list_[i]))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_item = string.format(item)\n        formatted_list.append(formatted_item)\n    return formatted_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1: list of strings\n        l2: list of integers\n        l3: list of floats\n\n    Returns:\n        A nested dictionary with keys as the elements of l1, values as the elements of l2, and\n        additional keys as the elements of l3.\n    '''\n\n    # Create an empty dictionary to store the result\n    result = {}\n\n    # Loop through the lists and add each element as a key in the result dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        for j in range(len(l3)):\n            result[l1[i]][j] = l3[j]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Initialize an empty dictionary\n    result = {}\n\n    # Loop through each list and add the elements to the dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]][l3[i]] = l3[i]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i, lst in enumerate(lists):\n        for j, item in enumerate(lst):\n            key = f\"{i}_{j}\"\n            if isinstance(item, list):\n                result[key] = [convert_list_dictionary(*item)]\n            elif isinstance(item, dict):\n                result[key] = {k: v for k, v in item.items()}\n            else:\n                result[key] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Combine the three lists into a single list of dictionaries\n    combined_list = [{'name': item1, 'age': item2, 'gender': item3} for item1, item2, item3 in zip(l1, l2, l3)]\n\n    # Convert the combined list to a nested dictionary\n    nested_dict = {}\n    for item in combined_list:\n        if item['name'] in nested_dict:\n            nested_dict[item['name']].append(item)\n        else:\n            nested_dict[item['name']] = [item]\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n\n    Args:\n        *lists: A variable number of lists.\n\n    Returns:\n        A dictionary containing the elements of each list as keys and values.\n    \"\"\"\n    result = {}\n    for i, list_ in enumerate(lists):\n        for item in list_:\n            result[i] = item\n            break\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(args)):\n        result[i] = {k: v for k, v in zip(args[i], range(len(args[i])))}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Combine the lists into one list of tuples\n    list_tuples = [(i, j, k) for i in l1 for j in l2 for k in l3]\n\n    # Create an empty dictionary\n    result = {}\n\n    # Loop through the tuples and add the values to the dictionary\n    for tup in list_tuples:\n        result[(tup[0], tup[1])] = tup[2]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                d[(l1[i], l2[j], l3[k])] = [l1[i], l2[j], l3[k]]\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Use zip to combine the three lists into one iterator\n    iterator = zip(l1, l2, l3)\n\n    # Create an empty dictionary to store the final output\n    output = {}\n\n    # Loop through the iterator and add each tuple to the dictionary\n    for item in iterator:\n        key = item[0]\n        value = item[1:]\n        output[key] = value\n\n    return output"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # create an empty dictionary to store the nested dictionary\n    result = {}\n    \n    # loop through each list and add its elements to the nested dictionary\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    \n    # loop through each list and add its elements to the nested dictionary\n    for i in range(len(l3)):\n        key = l3[i]\n        value = l2[i]\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    \n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Calculate the sum of the first n terms of the Fibonacci sequence\n    sum_fib = sum([1, 1])\n    for i in range(2, n):\n        sum_fib += i\n\n    # Calculate the maximum sum possible using the given equation\n    max_sum = max(sum_fib - (sum_fib % n), n)\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        f = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n\n        return max(f, n)\n\nprint(get_max_sum(10))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n\n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)\n\nn = int(input(\"Enter a number: \"))\nprint(\"Maximum sum possible is:\", get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def f(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 5\n        elif n == 4:\n            return 14\n        elif n == 5:\n            return 42\n        elif n == 6:\n            return 132\n        elif n == 7:\n            return 429\n        elif n == 8:\n            return 1430\n        elif n == 9:\n            return 4862\n        elif n == 10:\n            return 16796\n\n    def get_sum_of_fibonacci(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 5\n        elif n == 4:\n            return 14\n        elif n == 5:\n            return 42\n        elif n == 6:\n            return 132\n        elif n == 7:\n            return 429\n        elif n == 8:\n            return 1430\n        elif n == 9:\n            return 4862\n        elif n == 10:\n            return 16796\n\n    sum_of_fibonacci = sum(get_sum_of_fibonacci(n) for n in range(1, n+1))\n    return max(f(n/2) + f(n/3) + f(n/4) + f(n/5) for n in range(1, n+1)) + sum_of_fibonacci"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return 0\n    else:\n        f1 = get_max_sum(n/2)\n        f2 = get_max_sum(n/3)\n        f3 = get_max_sum(n/4)\n        f4 = get_max_sum(n/5)\n        return max(f1 + n, f2 + n, f3 + n, f4 + n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return n\n    elif n == 2:\n        return 3\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # initialize the maximum length as 0\n    max_len = 0\n    # loop through the list\n    for item in input_list:\n        # check if the length of the current item is greater than the maximum length\n        if len(item) > max_len:\n            # update the maximum length\n            max_len = len(item)\n    # return the list with maximum length\n    return input_list[input_list.index(max(input_list))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n\n    for item in input_list:\n        length = len(str(item))\n        if length > max_length:\n            max_length = length\n            result = [item]\n        elif length == max_length:\n            result.append(item)\n\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize maximum length as 0\n    max_length = 0\n    \n    # Loop through each element in the list\n    for element in input_list:\n        # If the length of the element is greater than the current maximum, update the maximum\n        if len(element) > max_length:\n            max_length = len(element)\n    \n    # Return the list with the maximum length\n    return input_list[input_list.index(max_length)]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_len = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list of integers as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set from the tuple to check for duplicates\n    unique_set = set(test_tup)\n\n    # check if the set is empty, which means there are no duplicates\n    if not unique_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n\n    # check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Initialize an empty set\n    unique_set = set()\n    # Loop through each element of the tuple\n    for element in test_tup:\n        # Check if the element is already in the set\n        if element in unique_set:\n            # If it is, return False (the tuple contains duplicates)\n            return False\n        # If it's not, add it to the set\n        else:\n            unique_set.add(element)\n    # If all elements are unique, return True (the tuple contains no duplicates)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    return all(x not in seen and seen.add(x) for x in test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # Convert the tuple to a set, which automatically removes duplicates\n    test_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    # Initialize variables\n    char_count = {}\n    first_non_repeating = None\n    \n    # Iterate through the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n        \n        if first_non_repeating is None or char_count[char] < char_count[first_non_repeating]:\n            first_non_repeating = char\n    \n    return first_non_repeating"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the frequency of characters in the string\n    freq = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # Iterate through each character in the string again and find the first non-repeated character\n    for char in str1:\n        # If the character has a frequency of 1, it is the first non-repeated character and we can return it\n        if freq[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character\n    freq_dict = {}\n    \n    # loop through the string and update the frequency of each character in the dictionary\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # find the first character that has a frequency of 1\n    for char, freq in freq_dict.items():\n        if freq == 1:\n            return char\n    \n    # if no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character in the string that has a count of 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    # If no such character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character.\n\n    Args:\n    str1 (string): The string to search for the first non-repeating character.\n\n    Returns:\n    The first non-repeating character in the input string.\n\n    Examples:\n    >>> first_non_repeating_character(\"abcde\")\n    'b'\n    >>> first_non_repeating_character(\"aabbb\")\n    'c'\n    >>> first_non_repeating_character(\"leetcode\")\n    't'\n    >>> first_non_repeating_character(\"geeksforgeeks\")\n    'e'\n    '''\n\n    # Create a dictionary to store the frequency of each character in the input string.\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Find the first non-repeating character.\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n\n    # If there is no non-repeating character, return None.\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    first_non_repeating_char = None\n    for char in char_count:\n        if char_count[char] == 1:\n            first_non_repeating_char = char\n            break\n    return first_non_repeating_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    # iterate over each character in the string and update the count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate over each character in the string again and return the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeated characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first non-repeated character in the string\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.search(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    result = pattern.match(string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Find the middle two numbers\n    middle_two_numbers = sorted_numbers[1:-1]\n    # Find the median by taking the average of the middle two numbers\n    median = (middle_two_numbers[0] + middle_two_numbers[1]) / 2\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # find the length of the sorted array\n    length = len(sorted_numbers)\n\n    # check if the length is odd or even\n    if length % 2 == 0:\n        # find the average of the two middle numbers\n        median = (sorted_numbers[length // 2 - 1] + sorted_numbers[length // 2]) / 2\n    else:\n        # find the middle number\n        median = sorted_numbers[length // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # find the midpoint of the three numbers\n    midpoint = len(sorted_numbers) // 2\n\n    # if the length of the array is odd, the median is the middle element\n    if len(sorted_numbers) % 2 == 1:\n        return sorted_numbers[midpoint]\n\n    # if the length of the array is even, the median is the average of the middle two elements\n    else:\n        return (sorted_numbers[midpoint - 1] + sorted_numbers[midpoint]) / 2\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median index\n    median_index = len(sorted_numbers) // 2\n\n    # Determine which number is the median and return it\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[median_index - 1] + sorted_numbers[median_index]) / 2\n    else:\n        return sorted_numbers[median_index]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 1:\n        return numbers[n//2]\n    else:\n        return (numbers[n//2-1] + numbers[n//2]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # Calculate the median index\n    median_index = len(numbers) // 2\n    \n    # If the length of the numbers is odd, the median is the middle number\n    if len(numbers) % 2 == 1:\n        return numbers[median_index]\n    \n    # If the length of the numbers is even, the median is the average of the two middle numbers\n    else:\n        return (numbers[median_index - 1] + numbers[median_index]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Determine the length of the numbers list\n    n = len(numbers)\n\n    # Calculate the median index\n    median_index = n // 2\n\n    # Check if the length of the numbers list is odd or even\n    if n % 2 == 1:\n        # Return the middle number if the length is odd\n        return numbers[median_index]\n    else:\n        # Return the average of the two middle numbers if the length is even\n        return (numbers[median_index - 1] + numbers[median_index]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median value.\n    \"\"\"\n    # Sorting the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculating the length of the sorted array\n    length = len(sorted_numbers)\n\n    # Calculating the median value\n    if length % 2 == 0:\n        # If the length of the sorted array is even, we take the average of the two middle numbers\n        median = (sorted_numbers[length//2] + sorted_numbers[length//2 - 1]) / 2\n    else:\n        # If the length of the sorted array is odd, we take the middle number\n        median = sorted_numbers[length//2]\n\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n    \n    # Determine the length of the sorted list\n    n = len(nums)\n    \n    # Calculate the median based on the length of the list\n    if n % 2 == 0:\n        # If the list has an even number of elements,\n        # the median is the average of the two middle elements\n        median = (nums[n//2 - 1] + nums[n//2]) / 2\n    else:\n        # If the list has an odd number of elements,\n        # the median is simply the middle element\n        median = nums[n//2]\n    \n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes in three numbers and returns their median.\n    '''\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Calculate the indices of the two middle numbers\n    mid1 = len(nums) // 2\n    mid2 = mid1 - 1\n\n    # Calculate the median\n    if len(nums) % 2 == 0:\n        median = (nums[mid1] + nums[mid2]) / 2\n    else:\n        median = nums[mid1]\n\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(d) for n in nums for d in str(n))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        sum_list.append(digit_sum)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        sum_digit = 0\n        while num > 0:\n            digit = num % 10\n            sum_digit += digit\n            num //= 10\n        result += sum_digit\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Iterate over each number in the list\n    total = 0\n    for num in nums:\n        # Convert the number to a string and split into individual digits\n        digits = [int(digit) for digit in str(num)]\n        # Sum the digits and add it to the running total\n        total += sum(digits)\n    # Return the total\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits_sum = 0\n    for num in nums:\n        num_str = str(num)\n        digits_sum += sum(int(digit) for digit in num_str)\n    return digits_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        while num > 0:\n            digit = num % 10\n            total += digit\n            num //= 10\n        result.append(total)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    digits_sum = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        digits_sum += sum(digits)\n    return digits_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digits_sum = 0\n        for digit in str(num):\n            digits_sum += int(digit)\n        total_sum += digits_sum\n    return total_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    # Loop through the tuples and perform the xor operation\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the same length as the input tuples\n    result = (None,)*len(test_tup1)\n    # Iterate over the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the result tuple\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Initialize the result tuple with all zeros\n    result = (0, 0)\n\n    # Iterate over each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation between the current element in the first tuple and the corresponding element in the second tuple\n        result = (result[0] ^ test_tup1[i], result[1] ^ test_tup2[i])\n\n    # Return the result tuple\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) in freq_dict:\n            freq_dict[tuple(item)] += 1\n        else:\n            freq_dict[tuple(item)] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if (item,) in freq_dict:\n            freq_dict[(item,)] += 1\n        else:\n            freq_dict[(item,)] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # initialize an empty dictionary\n    freq_dict = {}\n    # iterate through each item in the list\n    for item in test_list:\n        # if the item is not already in the dictionary, add it with a value of 1\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        # otherwise, increment the value of the item by 1\n        else:\n            freq_dict[item] += 1\n    # return the number of unique tuples in the list\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Given a list of tuples, returns the number of unique tuples in the list.\n    \"\"\"\n    # Create a set to store unique tuples in the list\n    unique_tuples = set()\n    \n    # Iterate through the list and add unique tuples to the set\n    for t in test_list:\n        unique_tuples.add(t)\n    \n    # Return the length of the set (i.e., the number of unique tuples)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for tup in test_list:\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            result_tup.append(test_tup1[i][j] + test_tup2[i][j])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Get the length of the two tuples\n    n = len(test_tup1)\n    \n    # Initialize a new tuple to store the result\n    result_tup = []\n    \n    # Loop through the elements of the first tuple and append their sum to the result tuple\n    for i in range(n):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both input tuples should have same length!\")\n        return\n    \n    res_tup = ()\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            res_tup += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        else:\n            res_tup += (test_tup1[i] + test_tup2[i],)\n    \n    return res_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same number of elements\")\n        return None\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'The two tuples should have the same length.'\n    \n    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        elif isinstance(test_tup1[i], tuple) or isinstance(test_tup2[i], tuple):\n            result.append('Both elements should be tuples.')\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n            \n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # check the length of both tuples\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of both tuples should be same!\")\n        return None\n    \n    # initialize the result list\n    result_list = []\n    \n    # loop through each element of both tuples\n    for i in range(len(test_tup1)):\n        # check if the current tuple element is a tuple or not\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            # recursively call the add_nested_tuples function for the nested tuples\n            sub_result = add_nested_tuples(test_tup1[i], test_tup2[i])\n        else:\n            # add the two elements and store in the result list\n            result_list.append(test_tup1[i] + test_tup2[i])\n    \n    # return the result list\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Get the length of the tuples\n    n1 = len(test_tup1)\n    n2 = len(test_tup2)\n\n    # Check if the two tuples have the same length\n    if n1!= n2:\n        raise ValueError(\"Both tuples should have the same length.\")\n\n    # Initialize the result tuple with zeros\n    result_tup = ([0] * n1)\n\n    # Iterate over the tuples and perform index wise addition\n    for i in range(n1):\n        for j in range(n2):\n            result_tup[i] += test_tup1[i][j] + test_tup2[i][j]\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of them.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two tuples as input, 'tuplex' and 'tuple1' respectively.\n    It checks whether an element exists within the second tuple from the first tuple.\n    If the element exists, it returns True. Otherwise, it returns False.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # if the element exists in the tuple, return True\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(\"The element exists in the tuple\")\n    else:\n        print(\"The element does not exist in the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if x in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            print(\"The element\", element, \"exists in the tuple.\")\n            return True\n    print(\"The element does not exist in the tuple.\")\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # check if element exists in tuple1\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer as input and returns True if it is odd, False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    # check if the number is even or odd\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer x as input and returns True if the parity of x is odd, False otherwise.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0  # initializing the parity variable to 0\n    \n    # loop through each bit of the number and count the number of 1's\n    for i in range(len(bin(x)[2:])): \n        parity += (bin(x)[2:].count('1') % 2)\n    \n    # return whether the parity is odd or even\n    if parity % 2 == 0: \n        return \"Even\" \n    else: \n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: \n        print(\"The number is even.\")\n    else: \n        print(\"The number is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        print(\"The parity of\", x, \"is odd.\")\n    else:\n        print(\"The parity of\", x, \"is even.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    # Check if x is even or not\n    if x%2 == 0: \n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Initialize a variable to store the parity of x\n    parity = 0\n\n    # Check if the number of digits in x is even or odd\n    if len(str(x)) % 2 == 0:\n        # x has an even number of digits, so parity is even\n        parity = 0\n    else:\n        # x has an odd number of digits, so parity is odd\n        parity = 1\n\n    # Return the parity of x\n    return parity"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # create a list of digits\n    digits = list(str(n))\n    \n    # reverse the order of the digits\n    digits.reverse()\n    \n    # check if the digits are already in the correct order\n    if digits[0] < 9 or (digits[0] == 9 and int(digits[1:]) < 9):\n        # convert the digits to an integer\n        new_number = int(''.join(digits))\n        # add 1 to the new number and check if it's within the range of a 32-bit integer\n        if new_number + 1 > 2**31 - 1:\n            # add 1 to the new number until it's within the range of a 32-bit integer\n            while new_number + 1 > 2**31 - 1:\n                new_number += 1\n        # return the new number\n        return new_number\n    else:\n        # return the original number if it's already in the correct order\n        return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # find the largest number that has a smaller number of digits\n    max_n = 0\n    for i in range(10):\n        for j in range(i+1, 10):\n            for k in range(j+1, 10):\n                for l in range(k+1, 10):\n                    for m in range(l+1, 10):\n                        for n in range(m+1, 10):\n                            for o in range(n+1, 10):\n                                for p in range(o+1, 10):\n                                    for q in range(p+1, 10):\n                                        for r in range(q+1, 10):\n                                            for s in range(r+1, 10):\n                                                for t in range(s+1, 10):\n                                                    for u in range(t+1, 10):\n                                                        for v in range(u+1, 10):\n                                                            for w in range(v+1, 10):\n                                                                for x in range(w+1, 10):\n                                                                    for y in range(x+1, 10):\n                                                                        for z in range(y+1, 10):\n                                                                            current_n = int(''.join([str(i), str(j), str(k), str(l), str(m), str(n), str(o), str(p), str(q), str(r), str(s), str(t), str(u), str(v), str(w), str(x), str(y), str(z)]))\n                                                                            if current_n > max_n:\n                                                                                max_n = current_n\n\n    # find the next bigger number\n    return max_n + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Create a list of digits from the input number\n    digits = [int(digit) for digit in str(n)]\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Combine the sorted digits into a new number\n    result = 0\n    for digit in digits:\n        result = result * 10 + digit\n    # Return the next bigger number\n    return result + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number into a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Sort the digits in decreasing order\n    digits.sort(reverse=True)\n\n    # Reconstruct the number as a string from the sorted digits\n    next_bigger = ''.join(str(d) for d in digits)\n\n    # Convert the string into an integer and return the result\n    return int(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # initialize an empty list to store the digits of the number\n    digits = []\n    \n    # loop through each digit of the number, starting with the rightmost digit\n    for i in range(len(str(n))):\n        \n        # if the current digit is greater than 0, append it to the list of digits\n        if int(str(n)[i]) > 0:\n            digits.append(int(str(n)[i]))\n    \n    # reverse the order of the digits in the list\n    digits.reverse()\n    \n    # create a new number by concatenating the reversed list of digits\n    new_n = 0\n    for i in range(len(digits)):\n        new_n += digits[i] * (10**(len(digits)-i-1))\n    \n    # add 1 to the new number to create the next bigger number\n    new_n += 1\n    \n    # return the new number\n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = list(str(n))\n    largest_digit = max(digits)\n    new_digit = max(range(10), key=lambda x: largest_digit - x)\n    new_digits = [d for d in digits if d!= largest_digit]\n    new_digits.append(str(new_digit))\n    return int(''.join(new_digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    digits.reverse()\n    index = len(digits) - 1\n    while index > 0:\n        if digits[index] > digits[index - 1]:\n            digits[index], digits[index - 1] = digits[index - 1], digits[index]\n            index -= 1\n            index -= 1\n        else:\n            break\n    digits.append(1)\n    return int(''.join(map(str, digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Initialize a list to store the digits of the number\n    digits = []\n    # Loop through the digits of the number\n    for digit in num_str:\n        digits.append(int(digit))\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Create a new number by rearranging the digits\n    new_num = 0\n    for digit in digits:\n        new_num += digit * (10 ** (len(digits) - digits.index(digit) - 1))\n    # Convert the new number to an integer\n    new_num = int(new_num)\n    # Return the new number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Split the number into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    \n    # Find the maximum digit\n    max_digit = max(digits)\n    \n    # Create a list of the digits before the maximum digit\n    before_max_digits = [digit for digit in digits if digit!= max_digit]\n    \n    # Create a list of the digits after the maximum digit\n    after_max_digits = [digit for digit in digits if digit == max_digit]\n    \n    # Concatenate the lists of digits\n    rearranged_digits = before_max_digits + after_max_digits\n    \n    # Join the digits back into a number string and convert to an integer\n    rearranged_number = int(''.join(str(digit) for digit in rearranged_digits))\n    \n    # Increment the maximum digit by one and add one to the next smaller digit\n    next_bigger_number = rearranged_number + max_digit + 1\n    \n    # Return the next bigger number\n    return next_bigger_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def is_valid(num):\n        '''\n        Check if a given number is a valid rearrangement of digits.\n        '''\n        num_str = str(num)\n        digits = [int(d) for d in num_str]\n        digits.sort(reverse=True)\n        return digits == digits[::-1]\n\n    def create_next_bigger(num):\n        '''\n        Create the next bigger number by rearranging the digits of a given number.\n        '''\n        num_str = str(num)\n        digits = [int(d) for d in num_str]\n        digits.sort(reverse=True)\n        if is_valid(digits[1:]):\n            digits[0] += 1\n            return int(''.join(str(d) for d in digits))\n        else:\n            return num + 1\n\n    return create_next_bigger(n)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    heapq.heapify(pq)\n    \n    for num in nums1:\n        heapq.heappush(pq, num)\n        \n        if len(pq) > k:\n            heapq.heappop(pq)\n            \n    return pq"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    heapq.heapify(heap)\n    result = []\n    for num1 in nums1:\n        heapq.heappush(heap, (num1, nums2[0]))\n        result.append(heapq.heappop(heap))\n        if len(result) == k:\n            break\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pair = (nums1[i] + nums2[j], (i, j))\n            heapq.heappush(heap, pair)\n            if len(heap) > k:\n                heapq.heappop(heap)\n    result = []\n    while heap:\n        _, pair = heapq.heappop(heap)\n        result.append(pair)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = []\n    # Iterate over both arrays\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the sum of the elements\n            sum_val = nums1[i] + nums2[j]\n            # If the sum is less than the smallest element in the min heap, add the pair to the min heap\n            if not min_heap or sum_val < min_heap[0][0]:\n                heapq.heappush(min_heap, [sum_val, (nums1[i], nums2[j])])\n                # If the size of the min heap is greater than k, remove the smallest element from the heap\n                if len(min_heap) > k:\n                    heapq.heappop(min_heap)\n    # Return the k smallest pairs\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Args:\n    nums1 (list of int): The first array of integers.\n    nums2 (list of int): The second array of integers.\n    k (int): The number of pairs to find.\n\n    Returns:\n    list of tuple: A list of k pairs of integers, where each pair is in the form (x, y), where x is the element from nums1 and y is the element from nums2.\n\n    \"\"\"\n    heap1 = []\n    heap2 = []\n\n    for num1 in nums1:\n        heapq.heappush(heap1, num1)\n\n    for num2 in nums2:\n        while len(heap1) > 0 and len(heap2) > 0 and heap1[0] < heap2[0]:\n            x = heapq.heappop(heap1)\n            y = heapq.heappop(heap2)\n            if len(heap1) > 0:\n                heapq.heappush(heap2, x)\n            if len(heap2) > 0:\n                heapq.heappush(heap1, y)\n        heapq.heappush(heap2, num2)\n        if len(heap1) > 0 and len(heap2) > 0 and heap1[0] < heap2[0]:\n            x = heapq.heappop(heap1)\n            y = heapq.heappop(heap2)\n            if len(heap1) > 0:\n                heapq.heappush(heap2, x)\n            if len(heap2) > 0:\n                heapq.heappush(heap1, y)\n\n    result = []\n    while len(heap1) > 0 and len(heap2) > 0 and k > 0:\n        x = heapq.heappop(heap1)\n        y = heapq.heappop(heap2)\n        k -= 1\n        if len(heap1) > 0:\n            heapq.heappush(heap2, x)\n        if len(heap2) > 0:\n            heapq.heappush(heap1, y)\n        result.append((x, y))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a min heap of size k\n    min_heap = []\n    \n    # Iterate over the first array\n    for num in nums1:\n        # Add the current number to the min heap\n        heapq.heappush(min_heap, num)\n        \n        # If the size of the min heap is greater than k, remove the smallest number\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # Initialize variables for storing the k smallest pairs\n    result = []\n    i = 0\n    \n    # Iterate over the second array and find the k smallest pairs\n    while i < len(nums2) and k > 0:\n        # Get the smallest number from the min heap\n        min_num = heapq.heappop(min_heap)\n        \n        # If the current number from the second array is greater than or equal to the smallest number, add the pair to the result and decrement k\n        if nums2[i] >= min_num:\n            result.append((min_num, nums2[i]))\n            k -= 1\n        \n        # Add the current number from the second array to the min heap\n        heapq.heappush(min_heap, nums2[i])\n        \n        # Increment the index for the second array\n        i += 1\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap1 = []\n    heap2 = []\n    heapq.heapify(heap1)\n    heapq.heapify(heap2)\n    \n    for num in nums1:\n        if len(heap1) < k:\n            heapq.heappush(heap1, num)\n        elif num < heap1[0]:\n            heapq.heappushpop(heap1, num)\n            \n    for num in nums2:\n        if len(heap2) < k:\n            heapq.heappush(heap2, num)\n        elif num < heap2[0]:\n            heapq.heappushpop(heap2, num)\n    \n    pairs = []\n    while heap1 and heap2:\n        if heap1[0] <= heap2[0]:\n            pairs.append((heap1.pop(0), heap2[0]))\n        else:\n            pairs.append((heap2.pop(0), heap1[0]))\n            \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Initialize a min-heap of size k\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Add (nums1[i], nums2[j]) to the heap if the heap is not full\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n            # Pop the smallest (sum, (i, j)) from the heap if the heap is full\n            else:\n                smallest = heapq.heappop(min_heap)\n                if smallest[0] > nums1[i] + nums2[j]:\n                    heapq.heappush(min_heap, (smallest[0], smallest[1]))\n                    heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n    # Return the sum of the smallest k elements of the heap\n    return sum(heapq.nsmallest(k, min_heap)[0][0] for _ in range(k))\n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or k > len(nums1) * len(nums2):\n        return []\n    \n    heap1 = []\n    heap2 = []\n    result = []\n    \n    for num in nums1:\n        heapq.heappush(heap1, num)\n        if len(heap1) > k:\n            heapq.heappop(heap1)\n    \n    for num in nums2:\n        heapq.heappush(heap2, num)\n        if len(heap2) > k:\n            heapq.heappop(heap2)\n            \n    while len(heap1) > 0 and len(heap2) > 0:\n        if heap1[0] <= heap2[0]:\n            result.append((heap1[0], heap2[0]))\n            heapq.heappop(heap1)\n            heapq.heappush(heap2, heap1[0])\n        else:\n            result.append((heap2[0], heap1[0]))\n            heapq.heappop(heap2)\n            heapq.heappush(heap1, heap2[0])\n            \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    This function takes three arguments:\n    nums1: list of integers\n    nums2: list of integers\n    k: integer\n\n    Returns:\n    A list of tuples representing the k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Sort both arrays and store their indices in a dictionary\n    index_dict = {}\n    for i in range(len(nums1)):\n        index_dict[nums1[i]] = i\n    for i in range(len(nums2)):\n        index_dict[nums2[i]] = i\n\n    # Initialize a min heap to store the smallest k pairs\n    min_heap = []\n    # Iterate through the sorted arrays and add the smallest k pairs to the heap\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(min_heap) < k:\n                if (index_dict[nums1[i]], index_dict[nums2[j]]) not in min_heap:\n                    heapq.heappush(min_heap, (nums1[i], nums2[j]))\n            else:\n                # If the heap size is greater than k, we pop the smallest pair from the heap\n                heapq.heappop(min_heap)\n                if (index_dict[nums1[i]], index_dict[nums2[j]]) not in min_heap:\n                    heapq.heappush(min_heap, (nums1[i], nums2[j]))\n\n    # Convert the heap back to a list of tuples\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product variable to infinity\n    min_product = float('inf')\n    # Initialize a variable to store the product of a tuple with the first element of the tuple\n    product_1 = 1\n    # Initialize a variable to store the product of a tuple with the second element of the tuple\n    product_2 = 1\n    # Loop through each tuple in the list\n    for tuple in list1:\n        # Calculate the product of the tuple with the first element of the tuple\n        product_1 = tuple[0] * product_1\n        # Calculate the product of the tuple with the second element of the tuple\n        product_2 = tuple[1] * product_2\n        # Calculate the minimum product between the two products\n        min_product = min(min_product, product_1, product_2)\n        # Reset the products to 1 after each tuple\n        product_1 = 1\n        product_2 = 1\n    # Return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Initialize variables\n    min_product = float('inf')\n    \n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            \n            # Calculate the product of the tuples and compare it to the current minimum product\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # sort the list of tuples in ascending order\n    list1.sort(key=lambda x: x[0]*x[1])\n    \n    # initialize minimum product\n    min_product = list1[0][0]*list1[0][1]\n    \n    # iterate through the list of tuples\n    for i in range(1, len(list1)):\n        # update minimum product if the current pair has a lower product\n        if list1[i][0]*list1[i][1] < min_product:\n            min_product = list1[i][0]*list1[i][1]\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][1] > list1[j][1]:\n                temp = list1[i]\n                list1[i] = list1[j]\n                list1[j] = temp\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to keep track of minimum product and tuple indices\n    min_product = float('inf')\n    min_index = 0\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and compare it to the current minimum\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                min_index = i, j\n\n    # Return the minimum product and indices of the tuples that resulted in the minimum\n    return min_product, min_index"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to store minimum product and indices of minimum product\n    min_product = float('inf')\n    min_index = -1\n    min_second_index = -1\n    \n    # Loop through the list of tuples and find the minimum product\n    for index, tuple in enumerate(list1):\n        second_index = (index + 1) % len(list1)\n        product = tuple[0] * tuple[1]\n        \n        # Check if the current product is less than the minimum product\n        if product < min_product:\n            min_product = product\n            min_index = index\n            min_second_index = second_index\n    \n    # Return the minimum product\n    return min_product, min_index, min_second_index"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if min_product > list1[i][0] * list1[j][1]:\n                min_product = list1[i][0] * list1[j][1]\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # Initialize min_val to the first value in the list\n    min_val = listval[0]\n\n    # Loop through the list and compare each value to min_val\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n\n    Parameters:\n    listval (list): A list of mixed data types.\n\n    Returns:\n    The minimum value in the given list.\n    \"\"\"\n    # initialize minimum value to the first value in the list\n    min_val = listval[0]\n    # iterate over the rest of the values in the list\n    for val in listval[1:]:\n        # if the current value is smaller than the minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if len(listval) == 0:\n        return None\n    elif isinstance(listval[0], int) or isinstance(listval[0], float):\n        return min(listval)\n    elif isinstance(listval[0], str):\n        return min(listval, key=lambda x: len(x))\n    elif isinstance(listval[0], list):\n        return min_val([item for sublist in listval for item in sublist])\n    else:\n        raise TypeError(\"Unsupported type in list.\")"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to be the first value in the list\n    min_val = listval[0]\n    # loop through the rest of the list\n    for i in range(1, len(listval)):\n        # compare the current value to the minimum value\n        if listval[i] < min_val:\n            # update the minimum value to be the current value\n            min_val = listval[i]\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    min_val = listval[0]\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to be the first element in the list\n    min_val = listval[0]\n    \n    # Iterate through the rest of the list and update the minimum value if a smaller value is found\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # check if the list is empty\n    if not listval:\n        return None\n\n    # initialize the minimum value to be the first value in the list\n    min_val = listval[0]\n\n    # iterate through the list and compare each value with the current minimum value\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise ValueError(\"Input is not a list\")\n    if len(listval) == 0:\n        raise ValueError(\"List is empty\")\n    min_value = float('inf')\n    for val in listval:\n        if val < min_value:\n            min_value = val\n    return min_value"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n\n    Args:\n    word (str): A snake case string.\n\n    Returns:\n    str: A camel case string.\n    '''\n\n    # Convert the word to camel case by capitalizing the first letter\n    camel_case = word.capitalize()\n\n    # Remove any underscores or hyphens from the word\n    camel_case = re.sub(r'(_|-)+', '', camel_case)\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_(.)', lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'\\b\\w', word)\n    camel_word = words[0].lower() + ''.join(word[word.find(w):].capitalize() for w in words[1:])\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace underscores with spaces\n    word = re.sub('_','', word)\n    # Capitalize the first letter of each word\n    words = word.split()\n    camel_case_words = [word.capitalize() for word in words]\n    camel_case_word = ''.join(camel_case_words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = ''.join([word[:1].upper(), word[1:]])\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert the snake case string to upper case and replace underscores with spaces\n    snake_case = re.sub('(?<!^)(?=[A-Z])','', word).title()\n    # split the camel case string by spaces\n    camel_case = snake_case.replace(' ', '')\n    # join the camel case string by capitalizing the first letter of each word\n    camel_case = ''.join(map(str.capitalize, camel_case))\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = ''\n    for word_part in re.findall(r'\\b[a-z][a-z0-9_]*\\b', word):\n        result += word_part.capitalize()\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert the word to camel case\n    camel_case = re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'(_[a-z0-9])'\n    camel_case = ''.join(word.title().split(pattern)[1:])\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        print(\"The given list does not have enough elements to extract nth element.\")\n        return\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Define a list to store the nth element\n    nth_element_list = []\n    \n    # Iterate over the list of tuples\n    for i in range(len(list1)):\n        # Extract the nth element and add it to the list\n        nth_element_list.append(list1[i][n-1])\n    \n    # Return the list of nth elements\n    return nth_element_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return \"The list is not long enough to contain the nth element.\"\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # if the list is empty\n    if len(list1) == 0:\n        return None\n\n    # if the index is out of range\n    if n < 0 or n >= len(list1):\n        return None\n\n    # if the index is 0\n    if n == 0:\n        return list1[0]\n\n    # if the index is 1\n    elif n == 1:\n        return list1[1]\n\n    # if the index is greater than 1\n    else:\n        # create a new list\n        new_list = []\n        # iterate over the list of tuples\n        for i in range(len(list1)):\n            # if the current index is not equal to the nth index, add it to the new list\n            if i!= n-1:\n                new_list.append(list1[i])\n        # return the new list\n        return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    try:\n        return list1[n-1]\n    except IndexError:\n        return None"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(item in list2 for item in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list2 for x in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # convert both lists to sets to avoid duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # check if there are any common values between the two sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Check if any value in list1 exists in list2\n    for value in list1:\n        if value in list2:\n            return True\n    # If no value exists in list1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # create a set of all values in list2\n    set2 = set(list2)\n\n    # loop through list1 and check if any value exists in set2\n    for item in list1:\n        if item in set2:\n            return True\n\n    # if no values exist in list1, return False\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2: \n        return \"Array should have at least two elements.\"\n\n    max_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, len(arr)): \n        if arr[i] > max_product: \n            max_product = arr[i]\n        elif arr[i] < min_product: \n            min_product = arr[i]\n\n    return max(max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_pair = [-1, -1]\n    min_pair = [-1, -1]\n    max_product = float('-inf')\n    min_product = float('inf')\n    \n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_pair[0] = i\n        if arr[i] < min_product:\n            min_product = arr[i]\n            min_pair[0] = i\n        if arr[i] * max_product > max_pair[1]:\n            max_pair[1] = arr[i]\n        if arr[i] * min_product < min_pair[1]:\n            min_pair[1] = arr[i]\n            \n    return max_pair[0], max_pair[1]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    max_pair = []\n    max_product = float('-inf')\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate the product of the pair\n            product = arr[i] * arr[j]\n            # Check if it's greater than the current max product\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n\n    # Return the max pair and its product\n    return max_pair, max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return max1*max2, min1*min2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # initialize variables for maximum product and second maximum product\n    max_product = float('-inf')\n    second_max_product = float('-inf')\n\n    # loop through the array and find the maximum and second maximum products\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # calculate the product of the current pair and update the maximum and second maximum products if necessary\n            product = arr[i]*arr[j]\n            if product > max_product:\n                second_max_product = max_product\n                max_product = product\n            elif product > second_max_product:\n                second_max_product = product\n\n    # return the pair with the maximum product\n    return max_product, second_max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_pair[0] * max_pair[1]:\n                max_pair = [arr[i] * arr[j], arr[i] * arr[j]]\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')  # initialize max1 and max2 to negative infinity\n    max_product = float('-inf')  # initialize max_product to negative infinity\n\n    # loop through the array\n    for i in range(len(arr)): \n        # check if current element is greater than max1\n        if arr[i] > max1: \n            # if yes, update max1 and max2\n            max2 = max1\n            max1 = arr[i] \n        # check if current element is greater than max2\n        elif arr[i] > max2: \n            # if yes, update max2\n            max2 = arr[i] \n\n        # update max_product if current element multiplied by max1 is greater than max_product\n        if max1 * arr[i] > max_product: \n            # if yes, update max_product\n            max_product = max1 * arr[i] \n\n    # return max_product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the pair of integers \n    with the highest product in the array.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n    min_product = float('inf')\n    min_pair = (float('inf'), float('inf'))\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n            elif product < min_product:\n                min_product = product\n                min_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n        if i < min1:\n            min2 = min1\n            min1 = i\n        elif i < min2:\n            min2 = i\n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #creating an empty dictionary to store the count of each element in the input list\n    counts = {}\n    \n    #iterating over each tuple in the input list\n    for tup in Input:\n        #if the tuple has only one element, it is the common element\n        if len(tup) == 1:\n            return tup[0]\n        \n        #getting the first element of the tuple\n        first = tup[0]\n        \n        #if the element is not in the dictionary, adding it with a count of 1\n        if first not in counts:\n            counts[first] = 1\n        \n        #otherwise incrementing the count of the element in the dictionary\n        else:\n            counts[first] += 1\n    \n    #finding the first element with the maximum count and returning it\n    max_count = max(counts.values())\n    for key, value in counts.items():\n        if value == max_count:\n            return key"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    common_elements = []\n    for tup in Input:\n        if len(common_elements) == 0:\n            common_elements.append(tup[0])\n        elif tup[0] == common_elements[-1]:\n            common_elements.append(tup[1])\n        elif tup[0]!= common_elements[-1]:\n            common_elements = [tup[0]]\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty list to store the unique elements of the list\n    unique_elements = []\n\n    # loop through the input list of tuples\n    for tup in Input:\n        # check if the first element of the tuple is not already in the unique_elements list\n        if tup[0] not in unique_elements:\n            # if the first element is not already in the list, add it\n            unique_elements.append(tup[0])\n\n    # return the unique elements list\n    return unique_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0] and Input[i][1] == Input[j][1]:\n                common_element = Input[i][0]\n                break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i]) > 1:\n            for j in range(1, len(Input[i])):\n                if Input[i][0] == Input[i][j]:\n                    print(Input[i][0])\n                    break\n        else:\n            print(Input[i][0])"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples, where each tuple contains the common first element of each tuple in the input list.\n    '''\n    \n    # Create an empty list to store the output tuples\n    Output = []\n    \n    # Loop through each tuple in the input list\n    for i in range(len(Input)): \n        \n        # Get the first element of the current tuple\n        element = Input[i][0]\n        \n        # Loop through each other tuple in the input list\n        for j in range(len(Input)):\n            \n            # Check if the current tuple contains the same element as the other tuple\n            if element in Input[j]:\n                \n                # If it does, add the tuple to the output list\n                Output.append((element, Input[i][1]))\n    \n    # Return the output list\n    return Output"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = None\n    for item in Input:\n        if common_first is None:\n            common_first = item[0]\n        elif common_first == item[0]:\n            continue\n        else:\n            common_first = None\n            break\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples\n    where each tuple contains all the common elements in the input list.\n    '''\n\n    # Create an empty list to store the unique tuples\n    unique_tuples = []\n\n    # Iterate over the input list of tuples\n    for i in range(len(Input)):\n        # Create a new tuple with the first element of the input tuple\n        new_tuple = (Input[i][0],)\n\n        # Iterate over the remaining elements of the input tuple\n        for j in range(i+1, len(Input)):\n            # Add the remaining element to the new tuple if it is a common element\n            if Input[j][0] in new_tuple:\n                new_tuple += (Input[j][0],)\n\n        # Add the new tuple to the list of unique tuples\n        unique_tuples.append(new_tuple)\n\n    # Return the list of unique tuples\n    return unique_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Convert the list of tuples to a list of lists\n    grouped_list = [list(x) for x in Input]\n    # Find the common first element in each group\n    common_elements = [sorted(group)[0] for group in grouped_list]\n    # Find the common first element among all groups\n    return sorted(common_elements)[0]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    common_elements = []\n    for tup in Input:\n        common = set(tup) & set(common_elements)\n        common_elements.append(common)\n    return common_elements"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element whose length is the maximum in the list.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list \n    having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_length = max([len(word) for word in lst])\n    return [word for word in lst if len(word) == max_length][0]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    # Find the length of the list\n    length = len(lst)\n\n    # Initialize variables for maximum length and element\n    max_len = 0\n    max_element = None\n\n    # Loop through the list and compare the length of each element to the maximum length found so far\n    for element in lst:\n        len_element = len(str(element))\n        if len_element > max_len:\n            max_len = len_element\n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Initialize max_len to the length of the first element of the list\n    max_len = len(lst[0])\n    \n    # Iterate over the rest of the list\n    for i in range(1, len(lst)): \n        # If the length of the current element is greater than max_len, update max_len\n        if len(lst[i]) > max_len: \n            max_len = len(lst[i])\n    \n    # Iterate over the list again and find the element with the maximum length\n    max_element = ''\n    for i in range(len(lst)): \n        if len(lst[i]) == max_len: \n            max_element = lst[i]\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum([round(num) for num in list1])\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Calculate the total sum of the list\n    total_sum = sum(list1)\n\n    # Round every number of the list\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n\n    # Multiply the total sum by the length of the list and print the result\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes in a list of numbers and rounds each number to the nearest integer, \n    then prints the total sum of the rounded numbers multiplied by the length of the list.\n    '''\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(\"The total sum of the rounded numbers is: \", total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    total *= len(list1)\n    print(total)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        total += round(num)\n    return total * len(list1)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    This function takes an integer n as input and returns the cube sum of the first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i*i*i\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize variables\n    sum = 0\n    count = 0\n    # Iterate n times\n    for i in range(1, n+1, 2):\n        # Calculate cube of i\n        cube = i ** 3\n        # Add cube to sum and increment count\n        sum += cube\n        count += 1\n    # Return the sum and count\n    return sum, count"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(10))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i ** 3\n        i += 2\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initializing sum and count variables\n    sum = 0\n    count = 0\n    \n    # iterating through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # adding the cube of the number to sum variable\n        sum += i**3\n        # incrementing count variable\n        count += 1\n    \n    # returning the sum of the cube of even numbers up to n\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item)\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # initialize an empty string to store concatenated string\n    concatenated_string = ''\n    # loop through each element in the tuple\n    for item in test_tup:\n        # add the element to the concatenated string\n        concatenated_string += str(item)\n    # return the concatenated string\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    concatenated_string = delimiter.join(str(x) for x in test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(map(str, test_tup))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize the sum and count variables to 0\n    sum = 0\n    count = 0\n    \n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # find the cube of the current natural number\n        cube = i ** 3\n        # add the cube to the sum\n        sum += cube\n        # increment the count\n        count += 1\n        \n    # calculate the average of the cubes\n    average = sum / count\n    \n    # return the average\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i ** 3)\n    return sum(cubes) / len(cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    #initialize a variable to store the sum of cubes\n    sum_cubes = 0\n\n    #loop through the first n natural numbers and find the sum of cubes\n    for i in range(1,n+1):\n        sum_cubes += i**3\n\n    #calculate the average of cubes\n    average = sum_cubes / n\n\n    #return the average of cubes\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n\n    # calculate the sum of cubes\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n\n    # calculate the average of cubes\n    average_of_cubes = sum_of_cubes / n\n\n    # print the average of cubes\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average_of_cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0  \n    for i in range(1,n+1):  \n        total += i**3  \n    average = total/n  \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average_of_cubes = sum_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n    return sum_of_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total/n\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    # Iterate through each string in the tuple\n    for i in range(len(test_tuple)):\n        # Extract the rear index element from the string\n        rear_element = test_tuple[i][-1]\n        # Replace the original string with the modified one\n        test_tuple[i] = str(rear_element)\n    return test_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for index, element in enumerate(test_tuple):\n        if index == len(test_tuple)-1:\n            rear_index_elements.append(element)\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for item in test_tuple:\n        rear_index_list.append(item[-1])\n    return rear_index_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_indices = []\n    for i, string in enumerate(test_tuple):\n        if i == len(test_tuple)-1:\n            rear_indices.append(i)\n        elif string[len(string)-1] =='':\n            rear_indices.append(i)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # create an empty list to store the rear indices\n    rear_indices = []\n\n    # loop through each string in the tuple and store the rear index in the list\n    for i, item in enumerate(test_tuple):\n        if i % 2 == 1:\n            rear_indices.append(i)\n\n    # return the list of rear indices\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for index, item in enumerate(test_tuple):\n        if isinstance(item, str):\n            rear_indices.append(len(item)-1)\n    return rear_indices\n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_element = string[-1]\n        rear_elements.append(rear_element)\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if x in list1[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for lst in list1: \n        if x in lst: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the odd numbers from the original list.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = [num for num in nums if num % 2!= 0]\n    return odds"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert the date format from yyyy-mm-dd to dd-mm-yyyy\n    date_format = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = date_format.match(dt)\n    if match:\n        year = int(match.group(1))\n        month = int(match.group(2))\n        day = int(match.group(3))\n        formatted_date = f'{day}-{month}-{year}'\n        return formatted_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the re.search() method to search for a match in the input string\n    match = re.search(pattern, dt)\n\n    # Check if a match was found\n    if match:\n        # Use string manipulation to convert the matched date to dd-mm-yyyy format\n        date = match.group(3) + '-' + match.group(2) + '-' + match.group(1)\n        return date\n    else:\n        # If no match is found, return the original input string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    # Use the re.sub() method to replace the matched pattern with the desired format\n    return re.sub(pattern, r\"\\3-\\2-\\1\", dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Find all matches of the pattern in the input string\n    matches = re.findall(pattern, dt)\n\n    # Check if there is only one match\n    if len(matches) == 1:\n        # Convert the matched date format to dd-mm-yyyy format\n        new_dt = '-'.join(matches[0])\n    else:\n        # If there are multiple matches, return the input string\n        new_dt = dt\n\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = re.search(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if yyyy_mm_dd:\n        day = yyyy_mm_dd.group(3)\n        month = yyyy_mm_dd.group(2)\n        year = yyyy_mm_dd.group(1)\n        return f'{day}-{month}-{year}'\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regex pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use regex to match the pattern in the given date string\n    match = re.match(pattern, dt)\n\n    # Check if the match was successful\n    if match:\n        # Extract the matched groups from the match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # Convert the date format from yyyy-mm-dd to dd-mm-yyyy\n        new_format = f'{day}-{month}-{year}'\n\n        # Return the new date string in the new format\n        return new_format\n    else:\n        # If the match was not successful, return the original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regex pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Define the regex pattern to match the date format with leading zeros\n    pattern_with_leading_zeros = r'(\\d{2})-(\\d{2})-(\\d{4})'\n\n    # Use the re module to search for the pattern in the input string\n    match = re.search(pattern_with_leading_zeros, dt)\n\n    # If no match is found, return the original string\n    if not match:\n        return dt\n\n    # Extract the groups from the match object\n    year, month, day = match.groups()\n\n    # Return the new date format in dd-mm-yyyy format\n    return '-'.join([day, month, year])"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_re = re.compile(r'\\d{4}')\n    mm_re = re.compile(r'\\d{2}')\n    dd_re = re.compile(r'\\d{2}')\n\n    # Extract year, month, and day from the input string\n    year = int(yyyy_re.search(dt).group())\n    month = int(mm_re.search(dt).group())\n    day = int(dd_re.search(dt).group())\n\n    # Convert the date to dd-mm-yyyy format\n    new_dt = f\"{day:02d}-{month:02d}-{year:04d}\"\n\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Replace '-' with '/' in the date\n    dt = dt.replace('-', '/')\n\n    # Split the date into year, month, and day\n    year, month, day = map(int, dt.split('/'))\n\n    # Convert the year to four digits\n    year = str(year).zfill(4)\n\n    # Construct the new date in the required format\n    new_dt = day + '-' + month + '-' + year\n\n    return new_dt\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    \n    # Set gap as 1/n of the list size\n    gap = n // 2\n    \n    # Do insertion sort on each gap size\n    while gap > 0:\n        for i in range(gap, n):\n            # Move elements of arr[0..gap-1], that are greater than arr[gap], to one position ahead of their current position\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest gap\n    max_gap = len(my_list)\n    while max_gap // 3 > 0:\n        max_gap //= 3\n\n    # Perform a gapped insertion sort for each gap size\n    for gap in range(max_gap):\n        # Last i elements are already sorted\n        for i in range(gap, len(my_list)):\n            # Insert i into the sorted portion of the array\n            current = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > current:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = current\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Find the largest power of 2 smaller than or equal to the length of the list\n    largest_power_of_two = 1\n    while largest_power_of_two < len(my_list):\n        largest_power_of_two *= 2\n    \n    # Iterate over the largest power of 2\n    for gap in range(largest_power_of_two):\n        # Iterate over the array and insert the sorted elements in their correct position\n        for i in range(gap, len(my_list)):\n            # Get the current element and the previous element\n            current_element = my_list[i]\n            previous_element = current_element - gap\n            \n            # Compare the previous element with the current element\n            while previous_element >= 0 and previous_element < len(my_list) and my_list[previous_element] > current_element:\n                # If the previous element is greater than the current element, swap them\n                my_list[previous_element + gap] = my_list[previous_element]\n                previous_element -= gap\n                \n            # Insert the current element into its correct position\n            my_list[previous_element + gap] = current_element"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Find the largest element in the array\n    n = len(my_list)\n    largest = my_list[0]\n    for i in range(1, n):\n        if my_list[i] > largest:\n            largest = my_list[i]\n    \n    # Divide the array into n sub-arrays of size k\n    k = 1\n    while k < largest:\n        k = k * 3 + 1\n    \n    # Sort the sub-arrays using insertion sort\n    for i in range(0, n, k):\n        for j in range(i + k, n, k):\n            temp = my_list[j]\n            index = j\n            while index > i and my_list[index - k] > temp:\n                my_list[index] = my_list[index - k]\n                index -= k\n            my_list[index] = temp\n    \n    # Merge the sorted sub-arrays back into the original array\n    i = 0\n    j = 0\n    for k in range(n):\n        if i < n and j < n and my_list[i] < my_list[j]:\n            my_list[k] = my_list[i]\n            i += 1\n        elif j < n and (i == n or my_list[j] < my_list[i]):\n            my_list[k] = my_list[j]\n            j += 1"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Step 1: Do a greedy insertion sort for every gap length\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    \n    # Step 2: Implementing the shell sort algorithm by reducing the gap size\n    gap = n // 2\n    while gap > 0:\n        # Move the gap to one position ahead of the previous gap\n        for i in range(gap, n):\n            # Find the smallest element in the unsorted portion of the array\n            temp = my_list[i]\n            j = i - gap\n            while j >= 0 and temp < my_list[j]:\n                my_list[j + gap] = my_list[j]\n                j -= gap\n            my_list[j + gap] = temp\n        \n        # Reduce the gap size\n        gap = (gap * 10) // 13\n    \n    # Step 3: Print the sorted array\n    print(my_list)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3 * h + 1\n    \n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and temp < my_list[j-h]:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = h // 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            # Insertion sort on gap elements\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples must have the same length\")\n        return\n\n    # Initialize an empty list to store the result\n    result_list = []\n\n    # Extract each element from each tuple\n    for i in range(len(test_tup1)):\n        # Extract the elements and perform element-wise logical AND\n        elem_1 = test_tup1[i]\n        elem_2 = test_tup2[i]\n        elem_and = elem_1 & elem_2\n\n        # Append the result to the result list\n        result_list.append(elem_and)\n\n    # Return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += ((test_tup1[i] and test_tup2[i]),)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'The two tuples must have the same length.'\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize a new tuple to store the elementwise and tuples\n    and_tuple = ()\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Add the elementwise and of the current element in the first tuple and the corresponding element in the second tuple\n        and_tuple += (test_tup1[i] & test_tup2[i],)\n    # Return the new tuple containing the elementwise and tuples\n    return and_tuple"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Extract the elementwise and tuples from the given two tuples.\n\n    Args:\n    test_tup1 (tuple): A tuple of integers.\n    test_tup2 (tuple): A tuple of integers.\n\n    Returns:\n    A tuple of the same length as test_tup1 with the element-wise and tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tuples = []\n    for i in range(len(test_tup1)):\n        and_tuples.append(test_tup1[i] & test_tup2[i])\n    return and_tuples"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta >= 0:\n        return (-b + delta**0.5)/(2*a)\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Find the quadratic equation\n    quadratic = (b**2) - (4*a*c)\n    # Find the discriminant\n    discriminant = quadratic**0.5\n    # Find the roots\n    if discriminant > 0:\n        root1 = (-b + discriminant)/(2*a)\n        root2 = (-b - discriminant)/(2*a)\n    elif discriminant == 0:\n        root1 = root2 = -b/(2*a)\n    else:\n        root1 = root2 = -b/(2*a)\n    return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b**2 - 4*a*c < 0:\n        return \"No directrix exists\"\n    else:\n        x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n        return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4*a*c)**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the quadratic equation ax^2 + bx + c = 0\n    quadratic = (b**2) - (4*a*c)\n\n    # Check if the quadratic equation has a real root\n    if quadratic < 0:\n        print(\"The quadratic equation does not have a real root.\")\n    else:\n        # If the quadratic equation has a real root, find the real root\n        root = (-b + quadratic**0.5)/(2*a)\n\n        # If the quadratic equation has a complex conjugate root, find the complex conjugate root\n        if root.imag!= 0:\n            root_conjugate = (-b - quadratic**0.5)/(2*a)\n            print(\"The directrix is a complex number:\", root + root_conjugate*1j)\n        else:\n            print(\"The directrix is a real number:\", root)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    \n    if delta > 0:\n        directrix = (-b + math.sqrt(delta)) / (2*a)\n        print(\"The directrix of the parabola is: \", directrix)\n    elif delta == 0:\n        directrix = -b / (2*a)\n        print(\"The directrix of the parabola is: \", directrix)\n    else:\n        print(\"There is no real root for this equation.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    \n    if delta > 0:\n        directrix = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        return directrix\n    elif delta == 0:\n        directrix = -b/(2*a)\n        return directrix\n    else:\n        print(\"The equation does not have a real root.\")\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # If the discriminant is less than zero, the directrix does not exist\n    if discriminant < 0:\n        return None\n\n    # Calculate the directrix\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n\n    return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b ** 2 - 4 * a * c\n    x1 = (-b + determinant) / (2 * a)\n    x2 = (-b - determinant) / (2 * a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return 'There is no real solution for the directrix.'\n    elif discriminant == 0:\n        return 'The directrix is at y = -b/(2a)'\n    else:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return f'The directrix is at y = {-root1} or {-root2}'"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    if len(set(list1) & set(list2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # check if the lists have the same length\n    if len(list1)!= len(list2):\n        return False\n    \n    # check if there is any common element between the lists\n    for i in range(len(list1)):\n        if list1[i] in list2 and list2[i] in list1:\n            return True\n    \n    # if no common element was found, the function returns False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        if i in list2:\n            common.append(i)\n    if common:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if there are any elements in the first list that are not in the second list\n    for element in list1:\n        if element not in list2:\n            return True\n    # If there were no common elements, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Compute the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Compute the perimeter of the trapezium\n    perimeter = base1 + base2\n    \n    # Compute the lengths of the left and right halves of the trapezium\n    left_half = perimeter / 2\n    right_half = perimeter - left_half\n    \n    # Compute the length of the trapezium's base\n    base = (area - perimeter) / height\n    \n    # Compute the length of the trapezium's midpoint\n    midpoint = 0.5 * (base1 + base2)\n    \n    # Compute the lengths of the left and right halves of the trapezium's midpoint\n    left_midpoint = 0.5 * (0.5 * (base1 + base2) + 0.5 * base)\n    right_midpoint = 0.5 * (0.5 * (base1 + base2) - 0.5 * base)\n    \n    # Compute the difference between the length of the left and right halves of the trapezium's midpoint\n    midpoint_diff = left_midpoint - right_midpoint\n    \n    # Compute the length of the median\n    if midpoint_diff < 0:\n        median = left_half\n    else:\n        median = right_half\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) * height / 2\n    median = area / 2\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n\n    Inputs:\n        base1: float, the first base of the trapezium\n        base2: float, the second base of the trapezium\n        height: float, the height of the trapezium\n\n    Outputs:\n        float, the median length of the trapezium\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5*(base1+base2)*(height+abs(base1-base2))\n\n    # Calculate the length of each half of the trapezium\n    half1 = 0.5*(base1+base2)\n    half2 = 0.5*(base2+base1)\n\n    # Find the length of the shorter half using the Pythagorean theorem\n    shorter_half = (base1**2 + height**2 - base2**2)**0.5\n\n    # Calculate the median length of the trapezium\n    median = 0.5*(half1 + half2 + shorter_half)\n\n    # Return the median length of the trapezium\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # find the area of the trapezium\n    area = 0.5*base1*base2 + 0.5*base2*height + 0.5*height*base1\n    \n    # find the semi-perimeter of the trapezium\n    semi_perimeter = 0.5*base1 + 0.5*base2 + height\n    \n    # calculate the area of the triangle formed by the three points\n    triangle_area = 0.5*base1*base1 + 0.5*base2*base2 + height*height\n    \n    # find the length of the longest edge of the triangle\n    longest_edge = (0.5*base1*base1 + 0.5*base2*base2 + height*height)**0.5\n    \n    # find the ratio of the area of the triangle to the area of the trapezium\n    ratio = triangle_area / area\n    \n    # find the length of the smaller base of the trapezium\n    smaller_base = longest_edge / ratio\n    \n    # find the length of the larger base of the trapezium\n    larger_base = (base1 + base2) / 2 - smaller_base\n    \n    # calculate the length of the shorter edge of the trapezium\n    shorter_edge = (0.5*base1*base1 + 0.5*larger_base*larger_base + height*height)**0.5\n    \n    # calculate the length of the longer edge of the trapezium\n    longer_edge = (0.5*base2*base2 + 0.5*smaller_base*smaller_base + height*height)**0.5\n    \n    # calculate the length of the third edge of the trapezium\n    third_edge = 0.5*base1*base1 + 0.5*larger_base*larger_base + height*height\n    \n    # calculate the length of the smaller base of the triangle formed by the three points\n    smaller_base_triangle = 0.5*base1*base1 + 0.5*larger_base*larger_base + height*height\n    \n    # find the length of the longer edge of the triangle formed by the three points\n    longer_edge_triangle = (0.5*base1*base1 + 0.5*smaller_base_triangle*smaller_base_triangle + height*height)**0.5\n    \n    # calculate the length of the median\n    median = (longer_edge_triangle + shorter_edge) / 2\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the lengths of the two halves of the trapezium\n    half_base1 = base1 / 2.0\n    half_base2 = base2 / 2.0\n    # calculate the lengths of the two sides of the trapezium\n    side1 = 2 * half_base1\n    side2 = 2 * half_base2\n    # calculate the length of the hypotenuse of the trapezium\n    hypotenuse = height / 2.0\n    # calculate the area of the trapezium\n    area = (side1 + side2) * hypotenuse\n    # calculate the perimeter of the trapezium\n    perimeter = side1 + side2\n    # find the midpoints of the two sides of the trapezium\n    midpoint1 = side1 / 2.0\n    midpoint2 = side2 / 2.0\n    # calculate the area of each half of the trapezium\n    half_area1 = area - (perimeter / 2.0)\n    half_area2 = area - (perimeter / 2.0)\n    # calculate the sum of the areas of each half\n    total_area = half_area1 + half_area2\n    # calculate the distance between the midpoints of the two halves of the trapezium\n    distance = abs(midpoint1 - midpoint2)\n    # calculate the ratio of the area of the trapezium to its perimeter\n    ratio = total_area / perimeter\n    # calculate the median length of the trapezium\n    median_length = distance * ratio\n    # return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5*(base1+base2)*(height)\n    length1 = area/base1\n    length2 = area/base2\n    median_length = 0.5*(length1+length2)\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the midpoint of the trapezium\n    midpoint = (base1 + base2) / 2\n\n    # Calculate the length of the base that is shorter\n    shorter_base = min(base1, base2)\n\n    # Calculate the length of the base that is longer\n    longer_base = max(base1, base2)\n\n    # Calculate the length of the shorter base\n    shorter_length = shorter_base / 2\n\n    # Calculate the length of the longer base\n    longer_length = longer_base / 2\n\n    # Calculate the area of the shorter base\n    shorter_area = 0.5 * shorter_length * height\n\n    # Calculate the area of the longer base\n    longer_area = 0.5 * longer_length * height\n\n    # Calculate the length of the trapezium using the formula:\n    # L = (b1 + b2) / 2\n    # H = (b1 * b2) / 2\n    # A = ((b1 + b2) / 2) * h\n    # L^2 = A\n    # h^2 = A\n    # h = sqrt(A)\n    # L = 0.5 * b1 * h + 0.5 * b2 * h\n    # L = 0.5 * b1 * h + 0.5 * b2 * h - 0.5 * b1 * 0.5 * b2 * h^2\n    # L = 0.5 * b1 * h + 0.5 * b2 * h - 0.5 * b1 * 0.5 * b2 * h^2 / 3\n    # L = 0.5 * b1 * h + 0.5 * b2 * h - 0.5 * b1 * 0.5 * b2 * (h^3 / 6)\n    # L = 0.5 * b1 * h + 0.5 * b2 * h - 0.5 * b1 * 0.5 * b2 * ((h^3 / 6) + (h^2 / 3))\n    # L = 0.5 * b1 * h + 0.5 * b2 * h - 0.5 * b1 * 0.5 * b2 * ((h^3 / 6) + (h^2 / 3)) - 0.5 * b1 * 0.5 * b2 * h^2 / 3\n    # L = 0.5 * b1 * h + 0.5 * b2 * h - 0.5 * b1 * 0.5 * b2 * ((h^3 / 6) + (h^2 / 3)) - 0.5 * b1 * 0.5 * b2 * (h^3 / 6)\n    # L = 0.5 * b1 * h + 0.5 * b2 * h - 0.5 * b1 * 0.5 * b2 * ((h^3 / 6) + (h^2 / 3) + h^2 / 6)\n    # L = 0.5 * b1 * h + 0.5 * b2 * h - 0.5 * b1 * 0.5 * b2 * ((h^3 / 6) + 0.5 * h^2 + h^2)\n    # L = 0.5 * b1 * h + 0.5 * b2 * h - 0.5 * b1 * 0.5 * b2 * (0.5 * h^2 + h^2)\n    # L = 0.5 * b1 * h + 0.5 * b2 * h - 0.5 * b1 * 0.5 * b2 * (1.5 * h^2)\n    # L = 0.5 * b1 * h + 0.5 * b2 * h - 0.5 * b1 * 0.5 * b2 *"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the hypotenuse using the Pythagorean theorem\n    hypotenuse = (base1 ** 2 + base2 ** 2) ** 0.5\n\n    # Calculate the length of the base that is shorter than the hypotenuse\n    shorter_base = min(base1, base2)\n\n    # Calculate the length of the other base using the formula for the height of a right triangle\n    other_base = 2 * shorter_base * hypotenuse\n\n    # Calculate the length of the other side of the trapezium\n    other_side = other_base - area\n\n    # Calculate the length of the shorter side of the trapezium\n    shorter_side = shorter_base + area - other_base\n\n    # Calculate the length of the median of the trapezium\n    median = other_side\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the areas of each half of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    \n    # Calculate the areas of the entire trapezium\n    total_area = area1 + area2\n    \n    # Calculate the trapezium's base\n    base = 0.5 * (base1 + base2)\n    \n    # Calculate the trapezium's height\n    height = 0.5 * (height + max(area1, area2) - min(area1, area2))\n    \n    # Calculate the trapezium's area\n    area = 0.5 * (area1 + area2)\n    \n    # Calculate the trapezium's perimeter\n    perimeter = base + area - 0.5 * (max(area1, area2) + min(area1, area2))\n    \n    # Calculate the median of the base, height, area, and perimeter\n    median1 = 0.5 * (base + min(base, height) + max(base, height))\n    median2 = 0.5 * (max(base, height) + area + perimeter)\n    median3 = 0.5 * (max(base, height) + perimeter)\n    \n    # Return the median lengths as a list\n    return [median1, median2, median3]"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n    # Calculate the area of the half of the trapezium\n    half_area = 0.5 * (base1 + base2)\n    # Calculate the area of the other half of the trapezium\n    other_half_area = 0.5 * (base2 + height)\n    # Calculate the length of the shorter side\n    shorter_side = 0.5 * (base1 + base2)\n    # Calculate the length of the longer side\n    longer_side = perimeter - shorter_side\n    # Calculate the length of the middle part of the trapezium\n    middle_part = (shorter_side + longer_side) / 2\n    # Calculate the area of the middle part of the trapezium\n    middle_area = half_area - other_half_area\n    # Calculate the area of the trapezium excluding the middle part\n    total_area = area - middle_area\n    # Calculate the length of the trapezium excluding the middle part\n    total_length = (base1 + base2 + height) / 2\n    # Calculate the median length of the trapezium\n    median_length = total_length - (0.5 * (total_area - middle_area))\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            print(\"The entered number is greater than the elements of the array.\")\n            return True\n    print(\"The entered number is not greater than any element of the array.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i > number:\n            count += 1\n    return count"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater_than = False\n    for element in arr:\n        if element > number:\n            greater_than = True\n            break\n    return greater_than"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > max(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes in two parameters: the array and the number to be checked.\n    It checks whether the entered number is greater than the elements of the given array, and returns True if it is and False otherwise.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(True)\n        else:\n            print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater = False\n    for element in arr:\n        if element > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a{1,}b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'\\ba\\w*b\\w*\\Z')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and returns True if it contains an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?:b)*'\n    return re.findall(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"Not found\""
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\b*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the number to a string\n    n = str(n)\n    # Get the last character of the string\n    last_char = n[-1]\n    # Convert the last character to a number and return it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Find the length of the string\n    length = len(num_str)\n    # Find the last digit by using the modulo operator\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg_list.append(list1[i])\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns the negative numbers in a list.\n    \"\"\"\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as an argument and returns a new list containing only the negative numbers from the original list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a list containing the negative numbers of the original list.\n    '''\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: x.isalnum(), str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for char in str1:\n        if char.isalpha():\n            if char.isupper():\n                str2 += char.lower()\n            else:\n                str2 += char.upper()\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if int(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty list to store the even characters\n    even_chars = []\n    # iterate through each character in the string\n    for char in str1:\n        # check if the character is odd\n        if int(char) % 2 == 1:\n            # if the character is odd, add it to the even_chars list\n            even_chars.append(char)\n        # if the character is even, do nothing\n    # convert the even_chars list to a string and return it\n    return ''.join(even_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in string if char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the odd characters\n    odd_str = ''\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is odd\n        if char % 2!= 0:\n            # if it's odd, append it to the odd_str string\n            odd_str += char\n    # return the final string with odd characters removed\n    return odd_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_chars = [char for char in string if len(char) % 2 == 1]\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            if int(char) % 2!= 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[j][1] and (test_list[i][1], test_list[j][1]) in test_list[i][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # initialize the count variable to zero\n    count = 0\n    \n    # loop through the list of tuples\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            # if i is less than j, and the corresponding elements in the tuple are equal, increment the count variable\n            if i < j and test_list[i] == test_list[j]:\n                count += 1\n    \n    # return the final count of bidirectional tuple pairs\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] == test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[j][1] and (test_list[j][0], test_list[i][0]) in test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i] and (test_list[j], test_list[i]) in test_list[j:i]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Check if the list is empty\n    if len(L) == 0:\n        return 0\n    \n    # Check if the list has only one element\n    elif len(L) == 1:\n        return L[0]\n    \n    # Otherwise, join the list with commas and return the result\n    else:\n        return ', '.join(map(str, L))"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for i in L:\n        result *= i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of all elements in the list\n    total = 0\n    # Iterate through each element in the list\n    for num in L:\n        # Convert the element to an integer and add it to the total variable\n        total += int(num)\n    # Return the total\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 0\n    for num in L:\n        single_num = single_num * 10 + num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for i in L:\n        if isinstance(i, int):\n            total += i\n        else:\n            raise TypeError('List must only contain integers')\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define regular expression pattern for adverbs\n    pattern = re.compile(r'\\b(\\w+)(\\s*(\\w+))?\\b')\n\n    # use the pattern to find all matches in the text\n    matches = pattern.finditer(text)\n\n    # iterate over the matches and find the first adverb and its positions\n    for match in matches:\n        if match.group(2) is not None:\n            # print the adverb and its position\n            print(f\"{match.group(2)}: {match.start()}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # define the pattern to match adverbs\n    pattern = r'\\b\\w*[a-z]+\\b\\w*[a-z]*[.!?]\\b\\w*[a-z]*\\b'\n\n    # use re.findall() to find all the matches in the text\n    matches = re.findall(pattern, text)\n\n    # initialize a dictionary to store the positions of adverbs\n    adverb_positions = {}\n\n    # iterate over the matches and update the adverb_positions dictionary\n    for match in matches:\n        # split the match into words\n        words = match.split()\n\n        # iterate over the words in the match\n        for i, word in enumerate(words):\n            # check if the word is an adverb\n            if word.lower() in ['not', 'just','really','really','really', 'also', 'also', 'also']:\n                # store the position of the adverb in the dictionary\n                adverb_positions[match] = i\n\n    # return the adverb_positions dictionary\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(brilliant|amazing|exciting|awesome|fantastic|hilarious|incredible|magical|marvelous|remarkable|spectacular|terrific|unbelievable|wonderful|adorable|amazing|awe-inspiring|engaging|festive|flippant|frightening|gripping|jaw-dropping|majestic|magical|nerdy|outstanding|perfect|rad|riveting|rising|scary|stunning|super|unique|violent|wacky|whimsical|worrisome|funny|fun-loving|hard-working|invigorating|joyous|loving|nervous|quiet|sad|serene|soulful|spirited|uplifting|woebegone|adorable|aggressive|amazing|angry|awe-inspiring|awkward|beautiful|believe|charming|comfortable|confident|curious|delightful|discreet|elegant|excited|fantastic|fierce|festive|flippant|forgiving|frank|friendly|fun-loving|funny|gentle|glad|glorious|handsome|hilarious|imaginative|jolly|joyous|joyous|jealous|kind|laughing|lively|lucky|magical|mighty|mind-bending|mischievous|moody|muddy|naughty|noisy|nurturing|pathetic|pensive|peaceful|polite|positive|powerful|pretty|proud|reassuring|relaxed|relieved|sad|serene|sentimental|shy|silly|sleepy|smiling|sparkling|squirting|starry|stupendous|sweet|sympathetic|tender|thrilling|trusting|uncomfortable|unusual|upset|violent|victorious|wacky|woebegone|wonderful)\\b'\n\n    # Use the re.findall() function to find all the adverbs in the given sentence\n    adverbs = re.findall(pattern, text)\n\n    # If there are adverbs in the sentence, print their positions and their adverbs\n    if adverbs:\n        print(\"Adverbs and their positions in the sentence:\")\n        for i, adverb in enumerate(adverbs):\n            print(f\"{i+1}. {adverb}\")\n\n    # If there are no adverbs in the sentence, print a message\n    else:\n        print(\"No adverbs found in the sentence.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern to match adverbs\n    pattern = r'\\b(mostly|quite|little|seldom|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|r"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r'\\b(adverb)\\b'\n    # pattern to match an adverb\n    matches = re.finditer(adverb_pattern, text)\n    # iterate over the matches and print the positions and values of the adverbs\n    for match in matches:\n        adverb = match.group(1)\n        start_position = match.start()\n        end_position = match.end()\n        print(f'{adverb}: {start_position} to {end_position}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs\n    adverbs = re.findall('\\b\\w+(ed|ing|ly|al)\\b', text)\n    # Find their positions in the sentence\n    positions = []\n    for i, word in enumerate(text.split()):\n        if word.lower() in adverbs:\n            positions.append(i)\n    # Sort the positions by their length\n    positions.sort(key=len)\n    # Return the first adverb and its position\n    return adverbs[0], positions[0]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern for finding adverbs\n    pattern = r'\\b\\w*adverb\\w*\\b'\n\n    # Find all adverbs in the text\n    adverbs = re.findall(pattern, text)\n\n    # Find their positions in the text\n    positions = []\n    for i, adv in enumerate(adverbs):\n        pos = text.find(adv)\n        positions.append(pos)\n\n    # Sort the positions in ascending order\n    positions.sort()\n\n    return adverbs, positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regex pattern for adverbs\n    pattern = r'(\\b|\\B)(\\w+)(\\b|\\B)'\n\n    # Use re.findall() method to find all matches\n    matches = re.findall(pattern, text)\n\n    # Initialize variables to store adverbs and positions\n    adverbs = []\n    positions = []\n\n    # Iterate through matches and add to adverbs and positions lists\n    for match in matches:\n        if len(match[1]) > 0:\n            adverbs.append(match[1])\n            positions.append(match[2])\n\n    # If adverbs list is not empty, print results\n    if len(adverbs) > 0:\n        print('Adverbs:', adverbs)\n        print('Positions:', positions)\n    else:\n        print('No adverbs found.')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    adverbs = re.findall(r'\\b[a-z]+\\b', text)\n    if not adverbs:\n        return None\n    else:\n        adverbs = [a.lower() for a in adverbs]\n        adverbs.sort()\n        return adverbs, adverbs.index(adverbs[0])"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b(\\w+)(\\w*)\\b\\b\\b'\n\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n\n    # Extract the first match and its positions\n    adverb = matches[0][0]\n    pos1 = matches[0][1]\n    pos2 = len(text) - len(matches[0][2]) - 1\n\n    # Return the adverb and its positions\n    return [(adverb, pos1, pos2)]"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes the length of the cube as input and returns the surface area of the cube.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    print(\"The surface area of the cube is:\", surface_area)\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l**2\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**3"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_arr = array('i', nums)\n    pos_count = 0\n    for num in pos_arr:\n        if num > 0:\n            pos_count += 1\n    pos_ratio = pos_count / len(pos_arr)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    total = 0\n    for num in nums:\n        count += 1\n        total += 1 if num > 0 else 0\n    return count / total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_arr = array('i')  # create an integer array\n    for num in nums:\n        if num > 0:\n            pos_arr.append(num)\n    pos_count = len(pos_arr)\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_num = array('i', [0]) # initialize the array to store positive numbers\n    negative_num = array('i', [0]) # initialize the array to store negative numbers\n    zero_num = array('i', [0]) # initialize the array to store zeroes\n    \n    for num in nums:\n        if num > 0:\n            positive_num.append(num)\n        elif num < 0:\n            negative_num.append(num)\n        else:\n            zero_num.append(num)\n    \n    # calculate the total count of numbers\n    total_count = len(nums)\n    \n    # calculate the ration of positive numbers\n    positive_ratio = (positive_num.item(), total_count)\n    \n    # calculate the ration of negative numbers\n    negative_ratio = (negative_num.item(), total_count)\n    \n    # calculate the ration of zeroes\n    zero_ratio = (zero_num.item(), total_count)\n    \n    # return the ration of positive numbers, negative numbers, and zeroes as a tuple\n    return (positive_ratio, negative_ratio, zero_ratio)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # convert the array to a list\n    nums_list = list(nums)\n\n    # count the number of positive numbers\n    positive_count = len([num for num in nums_list if num > 0])\n\n    # calculate the ration of positive numbers\n    ration = positive_count / len(nums_list)\n\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the array to an array of type 'd' (double)\n    arr = array('d', nums)\n    # initialize the count of positive numbers to 0\n    count_positive = 0\n    # loop through the array and check if the current element is positive\n    for num in arr:\n        if num > 0:\n            count_positive += 1\n    # calculate the ration of positive numbers\n    ration = count_positive / len(arr)\n    # return the ration as a float with 2 decimal places\n    return round(ration, 2)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_sum = 0\n    positive_count = 0\n    \n    for num in nums:\n        if num > 0:\n            positive_sum += num\n            positive_count += 1\n    \n    if positive_count > 0:\n        return positive_sum / positive_count\n    else:\n        return 0"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an array of integers to store positive numbers\n    pos_array = array('i')\n\n    # loop through the input array and add positive numbers to the array\n    for num in nums:\n        if num > 0:\n            pos_array.append(num)\n\n    # calculate the ration of positive numbers\n    positive_count = len(pos_array) / len(nums)\n\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n\n    positive_ratio = positive_count / (positive_count + negative_count)\n    return positive_ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    max_neg = float('-inf') #initialize the largest negative number as negative infinity\n    for num in list1:\n        if num < 0: #if the number is negative, check if it is greater than the current max_neg\n            if num > max_neg: #if it is, update max_neg\n                max_neg = num\n    return max_neg #return the largest negative number found in the list"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as an input and returns the largest negative number found in the list.\n    '''\n    largest = list1[0]  # Initialize the largest variable to the first element of the list\n    \n    for i in range(1, len(list1)):  # Iterate over the rest of the elements in the list\n        if list1[i] < 0 and list1[i] > largest:  # If the current element is negative and greater than the largest negative number found so far, update the largest variable\n            largest = list1[i]\n    \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1000000000\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as an argument and returns the largest negative number in the list.\n    '''\n    largest = lst[0]\n    for i in lst:\n        if i < 0 and i > largest:\n            largest = i\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number present in the list.\n    \"\"\"\n    largest_num = lst[0]\n    for num in lst:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    max_neg = lst[0]\n\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tuple_ in test_list:\n        if len(tuple_) > K:\n            trimmed_list.append(tuple_[K:])\n        else:\n            trimmed_list.append(tuple_)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    \n    for tup in test_list:\n        new_tup = tup[:K]\n        new_list.append(new_tup)\n    \n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[i:i+K]) for t in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = max(test_list[i][j] - K, 0)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for item in test_list:\n        new_item = ()\n        for i in range(len(item)):\n            if i % K == 0:\n                new_item += (None,)\n            else:\n                new_item += (item[i],)\n        result.append(tuple(new_item))\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if i % K == 0:\n            for j in range(len(test_list[i])):\n                test_list[i][j] = ''\n        result.append(tuple(test_list[i]))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0], test_list[i][1][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize an empty list to store the trimmed tuples\n    trimmed_list = []\n    \n    # Loop through each tuple in the test list\n    for i in range(len(test_list)):\n        # Initialize a variable to store the count of items in the tuple\n        count = 0\n        \n        # Loop through each item in the tuple\n        for j in range(len(test_list[i])):\n            # Increment the count if the item is not None and less than K\n            if test_list[i][j] is not None and test_list[i][j] < K:\n                count += 1\n        \n        # If the count is less than K, append the tuple to the trimmed list\n        if count < K:\n            trimmed_list.append(test_list[i])\n    \n    # Return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append(test_list[i][:K])\n    return trimmed_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples should have the same number of elements.\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have same length\")\n        return\n    else:\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i]*test_tup2[i])\n        return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples do not have equal lengths. Please provide two tuples with the same length.\")\n        return\n    \n    result = []\n    \n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    \n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input. It iterates through the list, counts the number of occurrences of each element in the tuple, and returns a dictionary of the counts.\n    '''\n    counts = {}\n    for elem in lst:\n        count = tup.count(elem)\n        counts[elem] = count\n    return counts"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    #create a counter object to count the occurence of each element in the list in the tuple\n    counter = Counter(tup)\n    \n    #find the intersection of the two counters to get the common elements in the tuple\n    common = set(counter).intersection(set(lst))\n    \n    #count the occurence of each common element in the list\n    for element in common:\n        counter[element] = counter[element] + lst.count(element)\n    \n    #return the final counter object which contains the count of each element in the list in the tuple\n    return counter\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a dictionary to store the counts of each element in the list\n    counts = Counter(lst)\n    # Use the dictionary to count the occurrences of each element in the tuple\n    result = {key: tup.count(key) for key in counts}\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Convert the tuple to a set to remove duplicates\n    set_tup = set(tup)\n\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n\n    # Loop through each element in the set of the tuple\n    for element in set_tup:\n        # Count the number of occurrences of the element in the list\n        count_dict[element] = lst.count(element)\n\n    # Convert the dictionary to a list of tuples and return it\n    return list(count_dict.items())"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for item in tup:\n        count_dict[item] = count_dict.get(item, 0) + 1\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] -= 1\n        else:\n            count_dict[item] = 0\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input, and returns a dictionary \n    where the keys are the elements of the tuple and the values are the \n    number of occurrences of that element in the list. \n    '''\n\n    count_dict = Counter(lst)\n    result_dict = {}\n\n    for i in tup:\n        if i in count_dict:\n            result_dict[i] = count_dict[i]\n        else:\n            result_dict[i] = 0\n\n    return result_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {} \n    for i in tup: \n        count_dict[i] = lst.count(i) \n    return count_dict "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_lst = list(count_dict.values())\n    count_dict = Counter(lst)\n    count_lst += list(count_dict.values())\n    count_dict = Counter(count_lst)\n    return count_dict.most_common()"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += perrin_number(i)\n    return sum\n\ndef perrin_number(n):\n    '''\n    Calculate the Perrin number for a given positive integer n.\n    '''\n    return n * (n + 1) // 2"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (2 * i * (2*i + 1) + 1) // 6\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_sum = 0\n    for i in range(1, n+1):\n        perrin_sum += i * (i+1) / 2\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    This function calculates the sum of perrin numbers up to n.\n    '''\n    sum_of_perrin = 0\n    for i in range(1, n+1):\n        sum_of_perrin += i**2\n    return sum_of_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize variables\n    total = 0\n    count = 0\n\n    # iterate through the first n numbers\n    for i in range(1, n+1):\n        # calculate the perrin number\n        p = (2*i**2 + 1) // 6\n        # add it to the total\n        total += p\n        # increment the count\n        count += 1\n\n    # return the total sum\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 5, 10, 20, 40, 80]\n    return sum(perrin_numbers[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5]\n    sum = 0\n    for i in range(1, n+1):\n        sum += perrin_numbers[i-1]\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted = []\n    for s in l:\n        if len(s) >= l:\n            extracted.append(s)\n    return extracted"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(l)):\n        if len(l[i]) >= l[i]:\n            return l[i]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) >= size:\n            result.append(string)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    This function takes in a list of strings and the size of the required strings as input.\n    It then extracts the required strings from the list and returns the list of extracted strings.\n    '''\n    extracted_strings = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            extracted_strings.append(l[i])\n        elif len(l[i]) > l[i]:\n            extracted_strings.append(l[i][:l[i]])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, desired_length):\n    result_list = []\n    for string in str_list:\n        if len(string) == desired_length:\n            result_list.append(string)\n    return result_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for s in str_list:\n        result.append(s[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of the extracted strings.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(l), l):\n        result.append(str.join(l[i:i+l]))\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text2 = re.sub('\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text3 = text2.strip()\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n\n    return re.sub('\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Replace all whitespaces with empty string\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regex to remove whitespaces\n    text1 = re.sub('\\s+','', text1)\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n\n    # if actual cost is greater than sale amount\n    if actual_cost > sale_amount:\n        # calculate loss amount\n        loss = actual_cost - sale_amount\n        # return loss amount\n        return loss\n    else:\n        # if actual cost is less than or equal to sale amount\n        # return 0 as there is no loss\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n) : \n    \"\"\"\n    This function takes a number n as input and returns the sum of the even factors of n.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sum_of_even_factors(n):\n    '''\n    This function finds the sum of even factors of a number.\n    '''\n    # Initialize sum variable to 0\n    total = 0\n    # Loop through all factors of the number\n    for i in range(2, int(math.sqrt(n))+1):\n        # Check if factor is even\n        if n % i == 0 and i % 2 == 0:\n            # If factor is even, add it to the total\n            total += i\n    # Return the total\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Check if number is even\n    if n % 2 == 0:\n        # If even, add 2 to sum\n        sum += 2\n    \n    # Loop through odd factors of number\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            # If even factor, add to sum\n            sum += i\n    \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if i % 2 == 0:\n                n //= i\n            else:\n                n *= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sum_even_factors(n):\n    '''\n    This function finds the sum of even factors of a given number.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and n % (i + 2) == 0:\n            even_factors += i + n // i\n    return even_factors\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    result = sum_even_factors(num)\n    print(\"The sum of even factors of\", num, \"is:\", result)\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0 \n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0 and i % 2 == 0: \n            sum += i \n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    # Compile a regular expression pattern for matching words containing 'z'\n    pattern = re.compile(r'\\b[a-zA-Z]+\\b\\sz')\n    \n    # Find all the matches in the given text using the pattern\n    matches = pattern.findall(text)\n    \n    # Print the matches\n    print(matches)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w+z\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Regular expression pattern for matching words containing 'z'\n    pattern = r'\\b[a-zA-Z]*z\\b'\n    # Using the re.findall() method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    # Define the regular expression pattern to match words containing 'z'\n    pattern = r'\\b[A-Za-z]+\\b'\n\n    # Use the `re.findall()` function to search for all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\sz\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        if monthnum2 == 2:\n            if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                if day < 29:\n                    return True\n                else:\n                    return False\n            else:\n                if day < 28:\n                    return True\n                else:\n                    return False\n        elif day < 31:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    # check if the given month number contains 31 days\n    if monthnum2 % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 == 2 and ((year % 4 == 0 and year % 100!= 0) or year % 400 == 0):\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 == 1:\n        if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        print(\"Invalid month number. Please enter a valid month number.\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Check if the month number is valid\n    if 1 <= monthnum2 <= 12:\n        if monthnum2 % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            if monthnum2 == 2 and year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                return True\n        else:\n            if monthnum2 == 2 and year % 4!= 0:\n                return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            if monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 and year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                return True\n        else:\n            if monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 and year % 4!= 0:\n                return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    if monthnum2 in days_in_month:\n        if days_in_month[monthnum2] == 31:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        print(\"Invalid month number!\")\n        return None\n    elif monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            if monthnum2 < 3:\n                print(\"Invalid month number!\")\n                return None\n            else:\n                print(\"31 days!\")\n        else:\n            print(\"Invalid month number!\")\n            return None\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(\"30 days!\")\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"31 days!\")\n    else:\n        print(\"Invalid month number!\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string using slicing\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # iterate over each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    min_length = len(lst[0]) \n    min_sublist = lst[0] \n\n    for i in range(len(lst)): \n        if len(lst[i]) < min_length: \n            min_length = len(lst[i]) \n            min_sublist = lst[i] \n\n    return min_sublist "
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initialize minimum length as infinity\n    min_len = float('inf')\n\n    # Initialize minimum sublist to be empty\n    min_sublist = []\n\n    # Iterate over each sublist of the list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    min_sublist = lst[0]\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_sublist = sublist\n            min_len = len(sublist)\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    min_len = n\n    min_sublist = []\n\n    for i in range(n):\n        for j in range(i+1, n):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initialize min_length and min_sublist variables\n    min_length = float('inf')\n    min_sublist = []\n\n    # Loop through each sublist\n    for sublist in lst:\n        # Check if the length of the sublist is smaller than the current minimum length\n        if len(sublist) < min_length:\n            # If so, update min_length and min_sublist\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst) \n    min_sublist = lst \n    for sublist in lst: \n        if len(sublist) < min_length: \n            min_length = len(sublist) \n            min_sublist = sublist \n    return min_sublist "
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    # create an empty list to store the minimum sublist \n    min_sublist = [] \n\n    # loop through the list and check if the length of the current sublist is less than the minimum length\n    for i in range(len(lst)): \n        if len(lst[i]) < len(min_sublist): \n            min_sublist = lst[i] \n\n    return min_sublist "
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    print(\"The area of the rectangle is:\", area)\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes in the length and width of a rectangle and returns the area of the rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(string):\n    # define the regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # loop through each substring of the string that matches the pattern\n    for match in pattern.finditer(string):\n        # remove the uppercase substring from the string\n        string = string.replace(match.group(0), '')\n\n    # return the modified string\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    return uppercase_pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Replace all uppercase letters with empty strings\n    str1 = re.sub(r'[A-Z]', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n    # find all uppercase substrings in the given string using the pattern\n    substrings = re.findall(pattern, str1)\n    # remove all uppercase substrings from the original string\n    for substring in substrings:\n        str1 = re.sub(substring, '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings in the string\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # Loop through the list of uppercase substrings and remove them from the string\n    for substring in uppercase_substrings:\n        str1 = re.sub(substring, '', str1)\n        \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a pattern to match uppercase substrings\n    pattern = r'\\b[A-Z]\\w*\\b'\n    # Use the re.sub() function to remove the uppercase substrings\n    result = re.sub(pattern, '', str1)\n    # Return the modified string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Use the search() method of the regular expression object to find all uppercase substrings\n    result = pattern.search(str1)\n    # If there are uppercase substrings, replace them with an empty string\n    if result:\n        str1 = pattern.sub('', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?i)[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    string = string.lower()\n    uppercase = re.findall('[A-Z]', string)\n    for i in uppercase:\n        string = string.replace(i, '')\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str2 = str1.lower()\n    # Define a regular expression to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Find all matches of the regular expression in the lowercase string\n    matches = pattern.findall(str2)\n    # Remove all matches of uppercase substrings from the string\n    for match in matches:\n        str2 = str2.replace(match, '')\n    # Return the modified string\n    return str2"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    return [lst[0] for sublist in lst for item in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for sublist in lst for item in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        if len(sublist) > 0:\n            print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for sublist in lst for x in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n\n    # loop through each sublist in the list\n    for sublist in lst:\n\n        # get the first element of the sublist and print it\n        print(sublist[0])"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    combinations = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            combinations.append(lst[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    # Initialize the empty list to hold the combinations\n    combinations = []\n\n    # Use a loop to iterate over all possible pairs of elements in the list\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            # Add the pair of elements to the combinations list\n            combinations.append((list1[i], list1[j]))\n\n    # Return the list of all combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Use a nested list comprehension to generate all possible combinations\n    # of the elements of the input list.\n    combinations = [[list1[i] for j in range(i+1)] for i in range(len(list1))]\n\n    # Flatten the nested list to get a list of all combinations.\n    combinations = [item for sublist in combinations for item in sublist]\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    This function takes in a list of elements and returns a list of all possible combinations of the elements.\n    '''\n    combs = []\n    for i in range(1, len(list1)+1):\n        for j in range(i):\n            combs.append(list1[j:i])\n    return combs"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # creating a list to store the combinations\n    comb = []\n    \n    # loop through the list of elements\n    for i in range(len(list1)):\n        # creating a list to store the remaining elements\n        rem_list = list1[:]\n        \n        # loop through the remaining elements\n        for j in range(i+1, len(list1)):\n            # adding the two elements and removing them from the remaining list\n            rem_list.remove(list1[i])\n            rem_list.remove(list1[j])\n            \n            # adding the combination to the list\n            comb.append([list1[i], list1[j]] + rem_list)\n            \n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    # create a list of lists to store the combinations\n    combinations = []\n\n    # loop through the elements of the list\n    for i in range(len(lst)):\n        # loop through the remaining elements of the list\n        for j in range(i + 1, len(lst)):\n            # add the current combination to the list of combinations\n            combinations.append([lst[i], lst[j]])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create a set to store the combinations\n    combinations = set()\n    \n    # Loop through all possible combinations of the list\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)+1-i):\n            # Generate the combination and add it to the set\n            combination = tuple(sorted(list1[k:k+i]))\n            combinations.add(combination)\n    \n    # Return the set of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    start = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_product = 1\n        else:\n            current_product *= arr[i]\n            \n        if current_product > max_product:\n            max_product = current_product\n            start = i - current_product // 2\n            \n    return max_product, start"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    start = 0\n    for i in range(len(arr)):\n        if curr_product < 0:\n            curr_product = 1\n        curr_product *= arr[i]\n        if curr_product > max_product:\n            max_product = curr_product\n            start = i\n        if curr_product < 0:\n            curr_product = 1\n    return max_product, start"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = max_ending_here\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    max_product = float('-inf')\n    current_product = 1\n    max_subarray = []\n    \n    for num in arr:\n        current_product = max(num, current_product*num)\n        max_product = max(max_product, current_product)\n        \n        if current_product < 0:\n            current_product = 1\n        \n        if num not in max_subarray:\n            max_subarray.append(num)\n            \n    return max_subarray"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        if num < 0:\n            max_ending_here = min_ending_here\n            min_ending_here = 1\n        else:\n            max_ending_here = max(max_ending_here * num, num)\n            min_ending_here = min(min_ending_here * num, num)\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = 1\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    start = 0\n    for i in range(1, len(arr)):\n        if curr_product < 0:\n            curr_product = 1\n            start = i\n        curr_product *= arr[i]\n        max_product = max(max_product, curr_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and a number n as input and returns True if all values in the dictionary are same as n.\n    Otherwise, it returns False.\n    '''\n    values = []\n    for key, value in dict.items():\n        values.append(value)\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[key] for key in dict]\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in range(len(dict)):\n        for j in range(i+1, len(dict)):\n            if dict[i] == dict[j]:\n                count += 1\n                if count == n:\n                    return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Initialize a variable to keep track of the count of occurrences of the first value in the dictionary\n    count_first = 0\n\n    # Iterate over the values in the dictionary\n    for value in dict.values():\n\n        # If the count of occurrences of the first value is already greater than 1, return False\n        if count_first > 1:\n            return False\n\n        # If the value is the same as the first value, increment the count of occurrences of the first value\n        if value == dict[next(iter(dict))]:\n            count_first += 1\n\n    # If all the values are not the same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if n > 1:\n            if value!= dict[list(dict.keys())[0]]:\n                return False\n        else:\n            if value!= dict[list(dict.keys())[0]]:\n                return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    elif len(dict) == 1:\n        return True if all(dict.values()) else False\n    else:\n        return check_value(dict.values(), n)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == n:\n        for val in dict.values():\n            if val!= dict.values()[0]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    for value in dict.values():\n        if value!= dict[next(iter(dict))]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_same = True\n    for key, value in dict.items():\n        if all_same:\n            all_same = all(value == dict[key])\n        else:\n            all_same = all(value!= dict[key])\n    return all_same"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n\n    :param dict1: The dictionary from which to drop the empty items.\n    :return: A new dictionary with empty items removed.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == '':\n            dict1.pop(key)\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Initialize the maximum product and two pointers for the subsequence\n    max_product = float('-inf')\n    left, right = 0, 0\n\n    # Iterate through the array and update the maximum product and pointers\n    for right in range(1, n):\n        while arr[left] > arr[right] and right - left + 1 < n:\n            left += 1\n        while arr[right] > arr[left] and right - left + 1 < n:\n            right -= 1\n        product = (arr[right] - arr[left]) * (right - left + 1)\n        max_product = max(max_product, product)\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = arr[i]\n            else:\n                dp[i][j] = max(arr[i]*dp[i+1][j], arr[j]*dp[i][j-1])\n                \n    return dp[0][n-1]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Parameters:\n    arr (list): An increasing subsequence of the array.\n\n    Returns:\n    int: The maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    # Initialize variables\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    # Loop through the array and update the max_ending_here and max_so_far variables\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(max_ending_here, min_ending_here * arr[i])\n        min_ending_here = min(min_ending_here, temp * arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Initialize two pointers: i and j, with i pointing to the first element and j pointing to the last element\n    i, j = 0, n - 1\n\n    # Initialize variables to store the maximum product and the current product\n    max_product = arr[0] * arr[1]\n    curr_product = arr[0]\n\n    # Initialize a boolean variable to store whether the current subsequence is increasing or decreasing\n    is_increasing = True\n\n    # Iterate over the array while the pointers are within the range of indices and the subsequence is increasing\n    while i < j:\n        # If the current element is increasing, update the current product and move the pointer j to the right\n        if arr[i] < arr[j]:\n            curr_product *= arr[j]\n            j -= 1\n        # If the current element is decreasing, update the current product and move the pointer i to the right\n        else:\n            curr_product *= arr[i]\n            i += 1\n\n        # If the current subsequence is increasing, update the maximum product if the current product is greater\n        if is_increasing and curr_product > max_product:\n            max_product = curr_product\n        # If the current subsequence is decreasing, update the maximum product if the current product is smaller\n        elif not is_increasing and curr_product < max_product:\n            max_product = curr_product\n\n        # Check if the current subsequence is increasing or decreasing\n        if curr_product < 0:\n            is_increasing = False\n        else:\n            is_increasing = True\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product_so_far = float('-inf')\n    max_product_ending_here = float('-inf')\n    \n    for i in range(n):\n        max_product_ending_here = max(max_product_ending_here * arr[i], arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n        \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Create a list of increasing subsequences of arr\n    subseqs = []\n    for i in range(1, len(arr)+1):\n        for subset in combinations(arr, i):\n            subseqs.append(subset)\n    # Find the maximum product in each increasing subsequence\n    max_prod = 0\n    for subseq in subseqs:\n        prod = 1\n        for num in subseq:\n            prod *= num\n        if prod > max_prod:\n            max_prod = prod\n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    n = len(arr)\n    # Initialize two variables to store the maximum and minimum values\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    # Iterate over the array from second element\n    for i in range(1, n):\n        # If the current element is greater than the current maximum, then update both max and min variables\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            max_so_far = max(max_so_far, max_ending_here)\n        else:\n            max_ending_here = max(arr[i], max_ending_here)\n        \n        # If the current element is less than the current minimum, then update both max and min variables\n        if arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n            max_so_far = max(max_so_far, min_ending_here)\n        else:\n            min_ending_here = min(arr[i], min_ending_here)\n            \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Sort the array in non-increasing order\n    arr = sorted(arr)\n\n    # Initialize the maximum product and the current product\n    max_product = arr[0] * arr[1]\n    current_product = arr[0]\n\n    # Iterate through the array from the second element\n    for i in range(2, len(arr)):\n        # Update the current product\n        current_product = max(arr[i], current_product * arr[i])\n        # Update the maximum product if necessary\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    \n    # initialize a variable to store the result\n    result = 0\n    \n    # iterate through the tuple and add the pairwise elements\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return 0\n    else:\n        return test_tup[1] + add_pairwise(test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        total = test_tup[0]\n        for i in range(1, len(test_tup)-1):\n            total += test_tup[i+1]\n        total += test_tup[-1]\n        return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # check if input is a tuple of size 2\n    if len(test_tup)!= 2:\n        raise ValueError(\"Input should be a tuple of size 2.\")\n\n    # extract the elements of the tuple\n    a, b = test_tup\n\n    # compute the sum of the neighboring elements\n    result = a + b\n\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # Use a list comprehension to create a new tuple with the pairwise addition of each element\n    new_tup = tuple([a + b for a, b in zip(test_tup, test_tup[1:])])\n    return new_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(1, len(test_tup)):\n        result += test_tup[i]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        print(\"Error: Tuple should have at least two elements.\")\n        return None\n    else:\n        total = 0\n        for i in range(len(test_tup)-1):\n            total += test_tup[i] + test_tup[i+1]\n        return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup) - 1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return test_tup[0]\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        return add_pairwise(test_tup[1:]) + add_pairwise(test_tup[:-1])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Create a list to store the pairwise additions\n    pairwise_adds = []\n\n    # Loop through the tuple and calculate the pairwise addition\n    for i in range(len(test_tup)-1):\n        pairwise_adds.append(test_tup[i] + test_tup[i+1])\n\n    # Return the pairwise additions as a tuple\n    return tuple(pairwise_adds)"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array `arr` and an integer `n` as input and returns the remainder of their multiplication modulo `n`.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function finds the product of the array multiplication modulo n.\n    \"\"\"\n    prod = 1\n    for num in arr:\n        prod *= num % n\n    return prod % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array `arr` and an integer `n` as inputs and returns the product of the array\n    multiplication modulo n.\n    '''\n\n    # Initialize a variable to store the product\n    result = 1\n\n    # Iterate through the array and multiply each element with the result\n    for num in arr:\n        result = (result * num) % n\n\n    # Return the final result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize a variable to store the product\n    product = 1\n    \n    # Iterate through the array\n    for num in arr:\n        # Multiply the product by the current number modulo n\n        product = (product * num) % n\n        \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, and False otherwise.\n    '''\n    if len(l) <= 1: \n        return False\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    i = 0\n    while i < len(l) - 1:\n        if l[i] + 1 == l[i+1]:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function checks whether a given list contains consecutive numbers or not.\n    \"\"\"\n    # Initialize the first element of the list as current element\n    current_element = l[0]\n\n    # Iterate through the list starting from index 1\n    for i in range(1, len(l)):\n        # If the current element is not equal to the previous element, return False\n        if l[i]!= current_element + 1:\n            return False\n\n        # If the current element is equal to the previous element, update the current element to the next element\n        else:\n            current_element = l[i]\n\n    # If all the elements in the list have been checked and found to be consecutive, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) <= 1:\n        return \"The list must have at least 2 elements\"\n    if l[0] == l[1]:\n        return \"The list does not contain consecutive numbers\"\n    for i in range(1, len(l)-1):\n        if l[i] == l[i-1]+1 or l[i] == l[i+1]-1:\n            continue\n        else:\n            return \"The list contains consecutive numbers\"\n    return \"The list does not contain consecutive numbers\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return \"The list must contain at least two elements\"\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return \"The list contains consecutive numbers\"\n    return \"The list does not contain consecutive numbers\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    # create an empty list to store consecutive numbers\n    consecutive_numbers = []\n    \n    # iterate over the list\n    for i in range(len(l)-1):\n        # if the current number is equal to the next number, append it to the consecutive_numbers list\n        if l[i] == l[i+1]:\n            consecutive_numbers.append(l[i])\n    \n    # if the list is empty or all elements are unique, return True\n    if not consecutive_numbers:\n        return True\n    \n    # if the list has at least one consecutive number, return False\n    else:\n        return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set from each list to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Create a set intersection using set intersection operation\n    inter = set1.intersection(set2)\n    # Convert the set intersection back to list and return\n    return list(inter)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in test_list1:\n        if i in test_list2 and i not in intersection:\n            intersection.append(i)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Create a set from the first list and then intersect it with the second list\n    intersection_set = set(test_list1) & set(test_list2)\n\n    # Convert the set back to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for item in test_list1:\n        if item in test_list2:\n            intersection_list.append(item)\n    return tuple(intersection_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create an empty dictionary to store the unique elements of each list\n    unique_elements1 = {}\n    unique_elements2 = {}\n\n    # create sets of unique elements from both lists\n    for element in test_list1:\n        unique_elements1[element] = True\n\n    for element in test_list2:\n        unique_elements2[element] = True\n\n    # create a set of common elements between the two sets\n    common_elements = set(unique_elements1.keys()) & set(unique_elements2.keys())\n\n    # create a new list with the common elements\n    new_list = []\n    for element in common_elements:\n        new_list.append(element)\n\n    return new_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set to store the unique elements from both lists\n    unique_elements = set(test_list1 + test_list2)\n    # Create an empty set to store the intersection of the unique elements\n    intersection = set()\n    # Iterate through the unique elements, and for each element in the first list, check if it's also in the second list\n    for element in test_list1:\n        if element in test_list2 and element in unique_elements:\n            intersection.add(element)\n    # Return the intersection as a tuple\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Merge the two lists into a single list and remove any duplicates\n    merged_list = list(set(test_list1 + test_list2))\n    # Initialize an empty list to store the unique tuples\n    unique_tuples = []\n    # Loop through the merged list and add unique tuples to the unique_tuples list\n    for i in range(len(merged_list)):\n        # Check if the current element is already in the unique_tuples list\n        if merged_list[i] not in unique_tuples:\n            unique_tuples.append(merged_list[i])\n    # Return the unique_tuples list\n    return unique_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    common_tuples = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2:\n                common_tuples.append(tuple1)\n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Creating a set of elements from both lists to remove duplicates\n    elements_set = set(test_list1 + test_list2)\n    # Creating an empty list for storing the common elements\n    common_elements = []\n    # Iterating through the elements set\n    for element in elements_set:\n        # Checking if the element is present in both lists\n        if element in test_list1 and element in test_list2:\n            # If it is present, adding it to the common elements list\n            common_elements.append(element)\n    # Returning the common elements list\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create an empty dictionary to store the intersection elements\n    intersection_dict = {}\n    # loop through both lists and add the intersection elements to the dictionary\n    for item in test_list1:\n        if item in test_list2:\n            intersection_dict[item] = True\n    # loop through the second list and add the intersection elements to the dictionary\n    for item in test_list2:\n        if item in test_list1 and item not in intersection_dict:\n            intersection_dict[item] = True\n    # return the intersection dictionary\n    return intersection_dict"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Initialize an empty string to store the modified string\n    modified_str = \"\"\n    # Loop through each character in the original string\n    for i in range(len(str1)):\n        # If the current character matches the target character, replace it with the new character\n        if str1[i] == ch:\n            modified_str += newch\n        # Otherwise, add the original character to the modified string\n        else:\n            modified_str += str1[i]\n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes in two parameters - a string and a character and a new character. \n    It replaces all occurrences of the old character with the new character in the string and returns the modified string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Using replace() method to replace the character\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # create a new string with the replaced characters\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n\n    Parameters:\n        str1 (string): The string to be modified.\n        ch (char): The character to be replaced.\n        newch (char): The new character to replace the original character.\n\n    Returns:\n        str: The modified string with the characters replaced.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Sort a dictionary by value.\n\n    Parameters\n    ----------\n    dict1 : dict\n        The dictionary to be sorted.\n\n    Returns\n    -------\n    dict\n        The sorted dictionary.\n    \"\"\"\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # create a Counter object to count the occurrences of values in the dictionary\n    counter = Counter(dict1)\n    # sort the counter dictionary by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # return the sorted dictionary\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True)\n    sorted_dict = dict(sorted_dict)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and sorts it by value in descending order.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Use Counter() to count the occurrences of each value in the dictionary\n    counts = Counter(dict1.values())\n    # Sort the counts dictionary by value\n    sorted_counts = dict(sorted(counts.items()))\n    # Create a new dictionary where the keys are the sorted values and the values are the counts\n    sorted_dict = {k: v for k, v in sorted_counts.items()}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Use Counter to count the occurrences of each value in the dictionary\n    counter = Counter(dict1)\n\n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1])\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value using Counter.\n    '''\n    # Counter to count the occurrences of each value\n    counter = Counter(dict1.values())\n    \n    # Sort the counter by value (descending)\n    sorted_counter = counter.most_common()\n    \n    # Extract the keys from the sorted counter and return them as a new dictionary\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum values in the array\n    max_value = max(nums)\n    min_value = min(nums)\n    \n    # Calculate the sum of the maximum and minimum values\n    sum_of_max_min = max_value + min_value\n    \n    return sum_of_max_min"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return 0\n    \n    max_val = nums[0]\n    min_val = nums[0]\n    \n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n            \n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    \n    # Calculate the sum of the largest and smallest values\n    largest_sum = nums[0] + nums[-1]\n    smallest_sum = nums[0] + nums[1]\n    \n    # Return the sum of the largest and smallest values\n    return largest_sum + smallest_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            elif num < smallest:\n                smallest = num\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = float('-inf')\n    min_num = float('inf')\n\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate the sum of the largest and smallest values\n    big_sum = max_val + min_val\n    \n    return big_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Find the sum of the largest and smallest value in the sorted array\n    max_sum = sum(nums[:2])\n    min_sum = sum(nums[-2:])\n    \n    # Return the sum of the two largest and two smallest values\n    return max_sum + min_sum"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check whether the given string is all lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and returns a new string with all lowercase substrings removed.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings in the given string\n    lowercase_substrings = re.findall(r'[a-z]+', str1)\n    \n    # Remove all lowercase substrings from the given string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove all lowercase substrings from a given string.\n    \"\"\"\n    # Define the pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n\n    # Find all matches of the pattern in the string\n    matches = pattern.findall(string)\n\n    # Replace all matches with an empty string\n    new_string = re.sub(pattern, '', string)\n\n    # Return the new string with lowercase substrings removed\n    return new_string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    # find all lowercase substrings in string\n    matches = pattern.findall(str1)\n    # remove all lowercase substrings from string\n    for match in matches:\n        str1 = re.sub(r'\\b' + match + r'\\b', '', str1)\n    # return modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and removes any lowercase substrings from it.\n    '''\n    # Define a regular expression to match lowercase substrings\n    lowercase_pattern = re.compile(r'[a-z]+')\n    \n    # Find all lowercase substrings in the string using the pattern\n    substrings = lowercase_pattern.findall(string)\n    \n    # Loop through each substring and remove it from the string\n    for substring in substrings:\n        string = string.replace(substring, '')\n    \n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    str1 = str1.lower()\n    pattern = r'([a-z]+)'\n    str1 = re.sub(pattern, r'\\1', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]\\w*\\b', re.IGNORECASE)\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'[a-z]+') # regex pattern to match lowercase substrings\n    return lowercase_pattern.sub('', str1) # use regex to remove all lowercase substrings from the given string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]\\w*\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = re.compile(r'[a-z]+') # regular expression pattern to match lowercase substrings\n    result = pattern.sub('', string) # replace all lowercase substrings with empty string\n    return result"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n // 10**(len(str(n))-1)\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # check if the number is a positive integer\n    if isinstance(n, int) and n > 0:\n        # convert the number to a string and get the first character\n        first_char = str(n)[0]\n        # check if the first character is a digit\n        if first_char.isdigit():\n            # return the first character\n            return first_char\n        else:\n            # if the first character is not a digit, return None\n            return None\n    else:\n        # if the input is not a positive integer, return None\n        return None"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the input number to a string\n    num = str(n)\n    # Check if the length of the string is 1\n    if len(num) == 1:\n        # Return the first character of the string\n        return num[0]\n    else:\n        # If the length of the string is greater than 1, return -1\n        return -1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10000"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input should be an integer\")\n\n    # Extract the first digit of the input number\n    digit = n // 10\n\n    # Return the first digit of the input number\n    return digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    first_num = n // 10**3\n    if first_num == 0:\n        return n\n    else:\n        return first_Digit(first_num)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n\n    # Initialize variable to store the first digit\n    first_digit = None\n\n    # Check if the number is a positive integer\n    if type(n) == int and n > 0:\n\n        # Convert the number to a string\n        num_str = str(n)\n\n        # Iterate through the string and append the first digit to a variable\n        for char in num_str:\n            if char.isdigit():\n                first_digit = char\n                break\n\n    # Return the first digit if it was found\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first = str(n)[0]\n    print(\"The first digit of\",n,\"is\",first)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the first digit of the number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = sum(x**3 for x in range(1, n+1))\n    \n    # calculate the sum of first n natural numbers\n    sum_of_first_n = sum(range(1, n+1))\n    \n    # return the difference between the two sums\n    return abs(sum_of_cubes - sum_of_first_n)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Function to calculate the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        return n * n * n * (n + 1) // 2\n\n    # Function to calculate the sum of the first n natural numbers\n    def sum_numbers(n):\n        return n * (n + 1) // 2\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes_n = sum_cubes(n)\n\n    # Calculate the sum of the first n natural numbers\n    sum_n = sum_numbers(n)\n\n    # Calculate the difference between the two sums\n    difference = sum_cubes_n - sum_n\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    \n    # Calculate the sum of the first n natural numbers\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n    \n    # Find the difference between the two sums\n    difference = abs(sum_of_cubes - sum_of_natural_numbers)\n    \n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initializing variables\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    sum_of_cubes_to_add = 0\n\n    # calculating the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # calculating the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n\n    # adding the sum of cubes to the sum of natural numbers\n    sum_of_cubes_to_add = sum_of_cubes + sum_of_natural_numbers\n\n    # finding the difference between the sum of cubes and the sum of natural numbers\n    difference_sum_of_cubes_and_sum_of_natural_numbers = sum_of_cubes - sum_of_natural_numbers\n\n    # printing the result\n    print(\"The difference between the sum of cubes of the first\", n, \"natural numbers and the sum of the first\", n, \"natural numbers is:\", difference_sum_of_cubes_and_sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize sum_of_cubes to 0 and sum_of_natural_numbers to 0\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    for i in range(n):\n        sum_of_cubes += i*i*i\n    \n    # Calculate the sum of the first n natural numbers\n    for j in range(n):\n        sum_of_natural_numbers += j+1\n    \n    # Return the difference between the sum of cubes and sum of natural numbers\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Find the sum of cubes of the first n natural numbers\n    cubes_sum = sum([i**3 for i in range(1, n+1)])\n\n    # Find the sum of the first n natural numbers\n    sum_sum = sum(range(1, n+1))\n\n    # Calculate the difference between the two sums\n    difference = cubes_sum - sum_sum\n\n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    first_n = [i for i in range(1, n+1)]\n    sum_first_n = sum(first_n)\n    sum_cubes_first_n = sum([i**3 for i in first_n])\n    return sum_cubes_first_n - sum_first_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(x**3 for x in range(1, n+1))\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_dict = {}\n    count = 0\n    for i in range(N):\n        xor_value = 0\n        for j in range(N):\n            xor_value ^= A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n        xor_dict[xor_value] = xor_value\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize count to 0\n    count = 0\n\n    # Loop through the array A\n    for i in range(len(A)):\n        # Loop through the array A again\n        for j in range(i+1, len(A)):\n            # Check if A[i] XOR A[j] is odd\n            if A[i] ^ A[j] % 2!= 0:\n                # Increment count\n                count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes an array A and its size N as input and returns the count of odd XOR pairs.\n    '''\n\n    # XOR operation to check for odd XOR pairs\n    def check_xor(num1, num2):\n        return (num1 ^ num2) & 1\n\n    # Initialize count to 0\n    count = 0\n\n    # Iterate through all pairs of elements in the array\n    for i in range(N):\n        for j in range(i+1, N):\n            # Check if the XOR of the two elements is odd\n            if check_xor(A[i], A[j]) == 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor%2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes a list of integers A and an integer N as input.\n    The function returns the number of pairs whose xor value is odd.\n    \n    Example:\n    A = [1, 3, 5, 7, 9]\n    N = 15\n    \n    Output: 2\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function counts the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                odd_count += 1\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    xor_sum = sum([A[i] ^ A[j] for i in range(N) for j in range(i+1,N)])\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count, xor_sum"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Initialize a new string to store the toggled string\n    toggled_string = ''\n    # Loop through each character in the input string\n    for char in string:\n        # If the character is uppercase, convert it to lowercase and vice versa\n        if char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char.upper()\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(c) ^ 32) if c.isalpha() else c for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert string to lowercase\n    lowercase_string = string.lower()\n    # Convert lowercase string to uppercase\n    uppercase_string = lowercase_string.upper()\n    # Convert uppercase string back to lowercase\n    toggled_string = uppercase_string.lower()\n    # Return toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    # Convert the string to uppercase\n    string = string.upper()\n    # Return the toggled string\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(c) ^ 32) if c.isalpha() else c for c in string])"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    for i in range(10):\n        digit_1 = int(str(n1)[i])\n        digit_2 = int(str(n2)[i])\n        if digit_1!= digit_2:\n            distance += abs(digit_1 - digit_2)\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    # initialize sum to 0\n    sum_diff = 0\n    \n    # iterate through digits of n1 and n2\n    for i in range(len(str(n1))):\n        # get digit at position i of n1 and n2\n        d1 = int(str(n1)[i])\n        d2 = int(str(n2)[i])\n        \n        # compute difference between digits\n        diff = abs(d1 - d2)\n        \n        # add difference to sum_diff\n        sum_diff += diff\n        \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # convert the input numbers to lists of digits\n    num1_list = list(str(n1))\n    num2_list = list(str(n2))\n\n    # calculate the sum of the differences between each pair of digits\n    sum_diff = 0\n    for i in range(len(num1_list)):\n        sum_diff += abs(int(num1_list[i]) - int(num2_list[i]))\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the two numbers to lists of digits\n    digits1 = list(str(n1))\n    digits2 = list(str(n2))\n    # Calculate the sum of absolute differences between the two lists of digits\n    sum_diff = sum(abs(d1-d2) for d1, d2 in zip(digits1, digits2))\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(10):\n        d1 = n1 % 10\n        d2 = n2 % 10\n        if d1!= d2:\n            sum += abs(d1 - d2)\n        n1 //= 10\n        n2 //= 10\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_of_per_digit_difference = 0\n\n    for i in range(10):\n        difference = abs(n1 - n2) % 10\n        sum_of_per_digit_difference += difference ** i\n\n    return sum_of_per_digit_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    # initialize a variable to store the sum of differences\n    total_diff = 0\n    \n    # loop through each digit in the two integers\n    for i in range(len(str(n1))):\n        # convert each integer to a string and get the corresponding digit\n        digit1 = str(n1)[i]\n        digit2 = str(n2)[i]\n        \n        # calculate the per-digit difference and add it to the total_diff variable\n        diff = int(digit1) - int(digit2)\n        total_diff += diff\n    \n    # return the total_diff\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize variables to store sum of per-digit differences\n    sum_diff = 0\n\n    # Loop through each digit in the two numbers and calculate the difference\n    for i in range(10):\n        diff = abs(int(str(n1)[i]) - int(str(n2)[i]))\n        sum_diff += diff\n\n    # Return the sum of per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert both integers to lists of digits\n    digit_list1 = list(str(n1))\n    digit_list2 = list(str(n2))\n\n    # find the length of the longer list\n    max_length = max(len(digit_list1), len(digit_list2))\n\n    # iterate over the digits and calculate the distance\n    distance_sum = 0\n    for i in range(max_length):\n        diff = digit_list1[i] - digit_list2[i]\n        distance_sum += abs(diff)\n\n    return distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert integers to lists of digits\n    n1_list = [int(d) for d in str(n1)]\n    n2_list = [int(d) for d in str(n2)]\n    \n    # Calculate the per-digit difference and sum the differences\n    distance = sum(abs(d1-d2) for d1, d2 in zip(n1_list, n2_list))\n    \n    return distance"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return max(a)\n    else:\n        max_so_far = max_ending_here = a[0]\n        for i in range(1, size):\n            max_ending_here = max(a[i], max_ending_here + a[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n    end_index = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            end_index = i\n        if i >= size-1:\n            break\n        if current_sum < 0:\n            current_sum = 0\n            start_index = i+1\n    return max_sum, a[start_index:end_index+1]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i > 0 and current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n            end = i\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    window_start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            window_start = i\n        if i >= size - 1:\n            break\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = 0\n    i = 0\n    \n    while i < len(a):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        \n        if current_sum < 0:\n            current_sum = 0\n        \n        i += 1\n        \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(len(a)):\n        max_ending_here += a[i]\n        if i >= size:\n            max_ending_here -= a[i-size]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(a)):\n        if i < size:\n            current_sum += a[i]\n        else:\n            current_sum -= a[i-size]\n            current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set to hold the elements of both tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # convert the set back to a list and sort it\n    sorted_union = sorted(list(union_set))\n    # return the sorted list as the output\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Find the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the set to a sorted list and output it\n    union_list = sorted(list(union_set))\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n    # Remove duplicates from the list\n    unique_list = list(set(combined_list))\n    # Sort the list in ascending order\n    sorted_list = sorted(unique_list)\n    # Output the sorted list\n    print(sorted_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1 + test_tup2\n    union_set = set(union)\n    union_list = list(union_set)\n    union_list.sort()\n    print(\"The union of the two tuples is:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # get the union of the two tuples using set()\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n\n    # print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples\n    combined_tuple = test_tup1 + test_tup2\n    \n    # Remove duplicates\n    unique_elements = list(set(combined_tuple))\n    \n    # Sort the elements in ascending order\n    sorted_elements = sorted(unique_elements)\n    \n    # Output the sorted elements\n    print(\"The union of the elements of the given tuples is:\")\n    for element in sorted_elements:\n        print(element)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1 + test_tup2\n    union.sort()\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = sorted(set(test_tup1) | set(test_tup2))\n    return union\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single one\n    combined_tuple = tuple(set(test_tup1) | set(test_tup2))\n    # Sort the combined tuple in ascending order\n    sorted_tuple = sorted(combined_tuple)\n    # Print the sorted tuple\n    print(sorted_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into a single tuple\n    combined_tuple = test_tup1 + test_tup2\n\n    # Sort the combined tuple in ascending order\n    sorted_tuple = sorted(combined_tuple)\n\n    # Output the sorted tuple\n    print(sorted_tuple)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if j - i + 1 > max_length:\n                max_length = j - i + 1\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    # Initialize the maximum length to 0\n    max_len = 0\n    \n    # Iterate through each sublist in the list\n    for sublist in lst:\n        \n        # Initialize the length of the current sublist to 0\n        current_len = 0\n        \n        # Iterate through each element in the sublist\n        for element in sublist:\n            \n            # Increment the length of the current sublist\n            current_len += 1\n            \n            # Update the maximum length if necessary\n            if current_len > max_len:\n                max_len = current_len\n                \n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:\n        return 0\n    \n    max_len = 0\n    sub_len = 0\n    for num in lst:\n        if num == lst[0]:\n            sub_len += 1\n        else:\n            if sub_len > max_len:\n                max_len = sub_len\n            sub_len = 0\n            \n    if sub_len > max_len:\n        max_len = sub_len\n        \n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0  \n    for sublist in lst:  \n        if len(sublist) > max_len:  \n            max_len = len(sublist)  \n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > len(longest) and len(sublist) > 1:\n                longest = sublist\n    return max(len(sublist) for sublist in longest)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables to keep track of the length and index of the longest sublist\n    max_length = 0\n    index = 0\n\n    # Iterate through the list of sublists\n    for i in range(len(lst)):\n        # Update the length of the longest sublist if the current sublist is longer\n        if i == 0 or len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            index = i\n\n    # Return the length of the longest sublist\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sub_lst = lst[i:j+1]\n            if max_length < len(sub_lst):\n                max_length = len(sub_lst)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    maxLength = 0  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            maxLength = max(maxLength, len(lst[i:j+1]))  \n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(\\w+)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define the regular expression pattern to match quotation marks\n    pattern = r'\"(.*?)\"'\n    # Use the re.findall() method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return a list of all values between quotation marks\n    return [match.strip() for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and extracts all the values between quotation marks.\n    '''\n\n    # Define a regular expression to find all the values between quotation marks\n    pattern = r\"(?<=\\\"|')\\w+(?:(?<=\\w)|(?=\\s))\"\n\n    # Use the re.findall() method to find all the matches in the input string\n    matches = re.findall(pattern, text)\n\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\w\\')[^\\']*(?=\\')'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # define the regular expression pattern to match values between quotation marks\n    pattern = r'(?<!\\\\)\"(?:\\\\.|[^\"])*\"'\n    # use the re.finditer() function to search for all matches in the input text\n    matches = re.finditer(pattern, text)\n    # initialize an empty list to store the extracted values\n    values = []\n    # loop over each match and extract the value\n    for match in matches:\n        value = match.group().strip('\"')\n        values.append(value)\n    # return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\\").*(?=\\\")'\n    return re.findall(pattern, text)"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    # initialize two variables to keep track of the number of equal and unequal elements\n    count_eq = 0\n    count_uneq = 0\n    \n    # loop through the list and count the number of equal and unequal elements\n    for i in range(n):\n        for j in range(i+1, n):\n            # if the two elements are not equal, increment the unequal count\n            if arr[i]!= arr[j]:\n                count_uneq += 1\n            # if the two elements are equal, increment the equal count\n            else:\n                count_eq += 1\n    \n    # return the total number of pairs\n    return count_eq + count_uneq"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and splits it into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    # loop through each digit of n\n    while n > 0:\n        # extract the last digit and add it to sum\n        digit = n % 10\n        sum += digit\n        # remove the last digit from n\n        n = n // 10\n    # return the sum of the digits of n\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    # Convert the integer to a string\n    num_str = str(n)\n    # Loop through each character in the string and add its integer value to the sum\n    for digit in num_str:\n        digit_int = int(digit)\n        sum += digit_int\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string and split it into a list of characters\n    digits = list(str(n))\n    # Initialize the sum to 0\n    total = 0\n    # Loop through each character in the list and add its value to the sum\n    for digit in digits:\n        total += int(digit)\n    # Return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum of digits\n    total = 0\n    \n    # Loop through each digit of the number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n        \n        # Add the digit to the total sum\n        total += digit\n        \n        # Remove the last digit from the number\n        n //= 10\n        \n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be non-negative\")\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        print(\"Invalid input. Please enter a non-negative integer.\")\n        return None\n    else:\n        sum = 0\n        while n > 0:\n            digit = n % 10\n            sum += digit\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum\n    total = 0\n    \n    # Loop through each digit of the number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n        \n        # Add the digit to the total\n        total += digit\n        \n        # Remove the last digit of the number\n        n = n // 10\n    \n    # Return the total\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    # check if the list is empty\n    if len(list1) == 0:\n        return True\n    \n    # compare the first two elements of the list\n    if list1[0] <= list1[1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # initialize variables to store the sorted and unsorted lists\n    sorted_list = []\n    unsorted_list = []\n\n    # loop through the list and split the unsorted list into sorted and unsorted\n    for element in list1:\n        if element in sorted_list:\n            sorted_list.append(element)\n        else:\n            unsorted_list.append(element)\n\n    # check if the unsorted list is empty\n    if unsorted_list:\n        # return False if there are unsorted elements\n        return False\n    else:\n        # return True if there are no unsorted elements\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function checks if a specified list is sorted or not.\n\n    Parameters:\n    lst (list): A list of integers or strings.\n\n    Returns:\n    bool: True if the list is sorted in ascending order, False otherwise.\n\n    Raises:\n    TypeError: If the input is not a list.\n    \"\"\"\n\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(lst):\n    '''\n    This function takes a list as input and returns True if the list is sorted in ascending order,\n    False otherwise.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    This function checks whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Parameters:\n    length (int): The length of the list of dictionaries to create.\n\n    Returns:\n    list: A list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for i in range(len(list1)):\n        list1[i].sort()\n\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist\n    for sublist in list1:\n        # Sort the sublist using the sort() method\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the list of lists\n    for sublist in list1:\n        # Sort the sublist using the sorted() function\n        sublist.sort()\n\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Remove duplicate numbers from the first list\n    nums[0] = list(set(nums[0]))\n\n    # Remove duplicate numbers from the second list\n    nums[1] = list(set(nums[1]))\n\n    # Remove duplicate numbers from the third list\n    nums[2] = list(set(nums[2]))\n\n    # Remove duplicate numbers from the fourth list\n    nums[3] = list(set(nums[3]))\n\n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    # create a set to store unique numbers\n    unique_nums = set(nums)\n\n    # convert the set back to a list\n    result = list(unique_nums)\n\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of numbers\n    without any duplicates.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    # create a set from the input list\n    set_nums = set(nums)\n\n    # create a new list with the unique numbers\n    unique_nums = list(set_nums)\n\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    unique_list = []\n    for num in nums:\n        if num not in unique_list:\n            unique_list.append(num)\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Removes duplicate numbers from a list of lists.\n\n    Parameters\n    ----------\n    nums : list of lists\n        A list of lists representing the numbers to be processed.\n\n    Returns\n    -------\n    list of lists\n        A new list of lists with duplicate numbers removed.\n    \"\"\"\n    # Flatten the list of lists\n    flat_nums = [num for sublist in nums for num in sublist]\n\n    # Use set to remove duplicates\n    unique_nums = list(set(flat_nums))\n\n    # Convert set back to list of lists\n    unique_nums = [[num] for num in unique_nums]\n\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data) # Convert the list to a set to get unique numbers\n    product = 1 # Initialize the product to 1\n    for num in unique_numbers:\n        product *= num # Multiply the product by each unique number in the list\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of integers as input and returns the product of the unique numbers in the list.\n    If there are duplicate numbers in the list, only the unique numbers are considered.\n    '''\n    # Convert the list to a set to remove duplicate elements and get the unique elements\n    unique_numbers = set(list_data)\n    # Use the product() function to calculate the product of the unique numbers\n    product_of_unique_numbers = 1\n    for number in unique_numbers:\n        product_of_unique_numbers *= number\n    # Return the product of unique numbers\n    return product_of_unique_numbers"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n\n    # Convert the list to set to remove duplicates\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create a set of unique numbers from the input list\n    unique_numbers = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    return reduce(lambda x, y: x * y, unique_numbers)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)  # Create a set of unique numbers\n    product = 1  # Initialize the product to 1\n    \n    for num in unique_nums:\n        product *= num  # Multiply the product by each unique number\n    \n    return product  # Return the product of the unique numbers"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))  # Use set to get unique numbers in the list\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    # Calculate the surface area of a cylinder using the formula:\n    # A = pi*(r^2 + h^2)\n    A = math.pi * (r**2 + h**2)\n    \n    # Return the surface area of the cylinder\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    This function calculates the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder: A = \u03c0r\u00b2h\n    A = 3.14159 * (r**2) * h\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder using the formula:\n    # A = \u03c0r\u00b2h\n    A = 3.14159 * r**2 * h\n    \n    # return the surface area\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*r*r + 2*3.14159*r*h + 2*3.14159*h*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of a cylinder using the formula\n    # surface area = 2 * pi * r * h\n    surface_area = 2 * 3.14159 * r * h\n    # return the surface area of the cylinder\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    surface_area = 2 * pi * r * r + 2 * pi * r * h + 2 * pi * h * h\n    \n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h #surface area of a cylinder is pi times radius times height"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*r*h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False \n    i = 0 \n    j = 0 \n    while i < len(A) and j < len(B): \n        if A[i] == B[j]: \n            i += 1 \n            j += 1 \n        else: \n            i += 1 \n    if j == len(B): \n        return True \n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and checks whether the first list is a sublist of the second list or not.\n    :param A: A list\n    :param B: Another list\n    :return: True if A is a sublist of B, False otherwise\n    \"\"\"\n    # To check if A is a sublist of B, we need to check whether B is a subsequence of A.\n    # A subsequence of B is a list that can be formed by concatenating A and all the elements of B.\n    # If A is a subsequence of B, then B is also a sublist of A.\n    for i in range(len(B)+1):\n        if B in A[i:]:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    else:\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # If A is not a sublist of B then return False\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A in B:\n        return True\n    elif A[0] in B and A[1:] in B:\n        return True\n    else:\n        for i in range(len(A)):\n            if is_Sub_Array(A[i+1:],B):\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False\n    for i in range(len(A)-len(B)+1): \n        if A[i:i+len(B)] == B: \n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    i = 0\n    j = 0\n\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n\n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False\n    i,j = 0,0\n    while i < len(A) and j < len(B): \n        if A[i] == B[j]: \n            i += 1 \n            j += 1 \n        else: \n            i = i - j + 1\n            j = 0\n    return i == len(A)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 0\n    else: \n        factorial = 1\n        for i in range(1, n+1): \n            factorial *= i\n        last_digit = int(str(factorial)[-1])\n        return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0: \n        factorial *= n \n        n //= 10 \n    return factorial % 10 "
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes an integer n as input and finds the last digit in the factorial of n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return last_Digit_Factorial(n//10) * (n%10)\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The last digit in the factorial of\", n, \"is\", last_Digit_Factorial(n))"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit in its factorial.\n\n    Args:\n    n: int, the number whose factorial we want to find the last digit of.\n\n    Returns:\n    The last digit of the factorial of the given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        factorial = 1\n        for i in range(1, n+1):\n            factorial *= i\n        last_digit = factorial % 10\n        return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the last digit in the factorial of `n`.\n\n    Example:\n    last_Digit_Factorial(123) returns 3\n\n    Note: The factorial of a number is the product of all positive integers less than or equal to that number.\n    \"\"\"\n    # get the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # get the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize a variable to store the last digit in factorial\n    last_digit = 0\n    \n    # Find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Extract the last digit of the factorial and store it in the last_digit variable\n    last_digit = int(factorial % 10)\n    \n    # Return the last digit in factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # Initialize variables\n    factorial = 1\n    last_digit = 0\n    \n    # Compute factorial of n\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Find the last digit of the factorial\n    while factorial > 0:\n        last_digit = factorial % 10\n        factorial //= 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = 0\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    index = 0\n    while index < len(list1):\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n        index += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Combine all lists into a single list\n    combined_list = list1 + list2 + list3\n    # Flatten the list to create a single, interleaved list\n    interleaved_list = []\n    for item in combined_list:\n        if isinstance(item, list):\n            interleaved_list += item\n        else:\n            interleaved_list.append(item)\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the final result\n    result = []\n\n    # Use a for loop to iterate through each list and append its elements to the result list\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    # Return the final result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Ensure that all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError('All lists must have the same length.')\n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n    # Iterate through each element in the first list\n    for i in range(len(list1)):\n        # Append the first element from each list to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n    list1 (list): The first list of numbers to interleave.\n    list2 (list): The second list of numbers to interleave.\n    list3 (list): The third list of numbers to interleave.\n\n    Returns:\n    list: A single flat list containing all the numbers from list1, list2, and list3.\n    \"\"\"\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if the lists are of the same length\n    if len(list1)!= len(list2)!= len(list3):\n        print('Error: All lists must have the same length.')\n        return\n    \n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # Loop through the lists and add each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    # create an empty list to store the interleaved list\n    interleaved_list = []\n\n    # loop through each item in the first list\n    for i in range(len(list1)):\n        # add the first item to the interleaved list\n        interleaved_list.append(list1[i])\n        # add the second item to the interleaved list\n        interleaved_list.append(list2[i])\n        # add the third item to the interleaved list\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_set = set(test_tup1) ^ set(test_tup2)\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples as input and returns a list of the\n    elements that are present in the first tuple but not the second.\n    '''\n    dissimilar_list = []\n    for item in test_tup1:\n        if item not in test_tup2:\n            dissimilar_list.append(item)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            diff_list.append(elem1)\n    return diff_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Get the length of both tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    \n    # Initialize empty lists to store the dissimilar elements\n    dissimilar = []\n    \n    # Loop through each element in the tuples\n    for i in range(len1):\n        # If the element in the first tuple is not equal to the element in the second tuple, add it to the dissimilar list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    \n    # Return the dissimilar list\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # iterate over the tuples and find the dissimilar elements\n    dissimilar_elements = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.add(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty set to store the dissimilar elements\n    dissimilar = set()\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element is not present in the second tuple\n        if test_tup1[i] not in test_tup2:\n            # Add it to the dissimilar set\n            dissimilar.add(test_tup1[i])\n    # Return the set of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Find the common elements between the two tuples\n    common_elements = set(test_tup1).intersection(set(test_tup2))\n\n    # Find the elements in the first tuple that are not common\n    first_dissimilar = set(test_tup1).difference(common_elements)\n\n    # Find the elements in the second tuple that are not common\n    second_dissimilar = set(test_tup2).difference(common_elements)\n\n    # Combine the two dissimilar sets\n    combined_dissimilar = first_dissimilar.union(second_dissimilar)\n\n    # Print the dissimilar elements\n    print(\"Dissimilar elements between the two tuples:\", combined_dissimilar)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set()\n    \n    # loop through the elements of the first tuple\n    for i in test_tup1:\n        # check if the element is in the second tuple\n        if i not in test_tup2:\n            # if it's not, add it to the dissimilar set\n            dissimilar_set.add(i)\n    \n    # return the dissimilar set\n    return dissimilar_set"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, (tuple, list)):\n            new_tuple.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_elements = []\n    for elem in test_tuple:\n        if not even_fnc(elem):\n            uneven_elements.append(elem)\n    return uneven_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create an empty list to store the even elements\n    even_list = []\n    # Loop through each element in the nested mixed tuple\n    for elem in test_tuple: \n        # Check if the element is even using the even_fnc function\n        if even_fnc(elem): \n            # If the element is even, append it to the even_list\n            even_list.append(elem) \n    # Return the even_list\n    return even_list "
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def is_even(x): \n        '''\n        Helper function to check if a number is even.\n        '''\n        return x % 2 == 0\n\n    def remove_uneven(lst): \n        '''\n        Helper function to remove uneven elements in a list.\n        '''\n        return [x for x in lst if is_even(x)]\n\n    for tup in test_tuple: \n        if isinstance(tup, (tuple, list)): \n            if len(tup) % 2 == 0: \n                even_list = remove_uneven(tup) \n                if even_list: \n                    print(even_fnc(even_list)) \n            else: \n                print(\"Invalid tuple\") "
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple) == tuple:\n        if len(test_tuple) > 0:\n            if type(test_tuple[0]) == tuple:\n                if len(test_tuple[0]) > 0:\n                    return [even_fnc(x) for x in test_tuple if even_fnc(x) is not None]\n            else:\n                return [even_fnc(x) for x in test_tuple if even_fnc(x) is not None]\n        else:\n            return []\n    else:\n        return []"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Initialize a list to store the even elements \n    even_list = []\n    # Loop through each element of the tuple \n    for i in test_tuple:\n        # If the element is even, append it to the even_list \n        if even_fnc(i):\n            even_list.append(i)\n    # Return the even_list \n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i, elem in enumerate(test_tuple):\n        if isinstance(elem, tuple):\n            even_ele(elem, even_fnc)\n        else:\n            even_fnc(elem)\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def even_fnc_helper(item):\n        if isinstance(item, tuple):\n            return all(even_fnc_helper(i) for i in item)\n        return even_fnc(item)\n\n    return tuple(i for i in test_tuple if even_fnc_helper(i))\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, (list, tuple)):\n            result.append(even_ele(i, even_fnc))\n        else:\n            result.append(even_fnc(i))\n    return result\n\ndef even_sum(num):\n    '''\n    A function to check if a number is even or odd.\n    '''\n    return num if num % 2 == 0 else num + 1"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area of a square pyramid\n    area = (b**2) + (s**2)\n\n    # Calculate the surface area of the base of the pyramid\n    base_area = (b**2)\n\n    # Calculate the surface area of the top of the pyramid\n    top_area = (s**2)\n\n    # Add the surface areas of the base, top, and side edges\n    total_area = area + base_area + top_area\n\n    # Return the total surface area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the base and the top of the pyramid\n    base_area = (b*b)\n    top_area = (s*s)\n    # Add the surface areas of the base and the top to find the total surface area of the pyramid\n    total_area = base_area + top_area\n    # Multiply the total surface area by 2 to get the surface area of the pyramid\n    pyramid_area = (total_area * 2)\n    # Return the surface area of the pyramid\n    return pyramid_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(base, height):\n    \"\"\"\n    This function calculates the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # calculate the base area\n    base_area = base * base\n    \n    # calculate the total area\n    total_area = (3 * base_area) / 2 + (4 * (base_area * height))\n    \n    # return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * b * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area using Heron's formula\n    area = 0.5 * b * s * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(base_edge, height):\n    \"\"\"\n    This function takes two arguments, base_edge and height, and returns the surface area of a square pyramid.\n    \"\"\"\n    surface_area = base_edge * height + base_edge * base_edge\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Formula for surface area of square pyramid\n    area = (b * s) / 2\n    return area\n    \n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * b * s + 2 * b * b + 2 * s * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 2*b*s + 2*b + 2*s\n    return surface_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function checks if a dictionary is empty or not.\n    \n    Args:\n        dict1: A dictionary object.\n        \n    Returns:\n        True if the dictionary is empty, False otherwise.\n    \"\"\"\n    \n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth Catalan number.\n    \"\"\"\n    catalan = 1\n    for i in range(1, n+1):\n        catalan *= (2*i-1) / i\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    if n <= 1:\n        return n\n    else:\n        return n * catalan_number(n-1) + catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number using the formula:\n\n    C(n,k) = binomial(n,k) * C(n-1,k-1) * C(n-1,k)\n    \n    where binomial(n,k) is the k-th Catalan number.\n\n    Args:\n        n (int): number of elements in the set\n        k (int): number of elements selected\n\n    Returns:\n        int: nth catalan number\n    \"\"\"\n    from math import factorial\n\n    if n == 1 or k == 1:\n        return 1\n    else:\n        return factorial(n) // (factorial(k) * factorial(n-k))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using dynamic programming.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input should be non-negative.\")\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        catalan_array = [0] * (n+1)\n        catalan_array[0] = 1\n        catalan_array[1] = 1\n        for i in range(2, n+1):\n            for j in range(i):\n                catalan_array[i] += catalan_array[j] * catalan_array[i-j-1]\n        return catalan_array[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    '''\n    Returns the nth Catalan number.\n    '''\n    catalan = 0\n    for i in range(1, n+1):\n        catalan += (2*i - 1) * binomial(n, i)\n    return catalan\n\ndef binomial(n, k):\n    '''\n    Returns the binomial coefficient.\n    '''\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)\n\nn = int(input(\"Enter a number: \"))\nprint(\"Catalan number of\", n, \"is\", catalan_number(n))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    if num == 0:\n        return 1\n    n = num\n    catalan_numbers = [0] * (n+1)\n    catalan_numbers[0] = 1\n    catalan_numbers[1] = 1\n    for i in range(2,n+1):\n        catalan_numbers[i] = (i-1)*catalan_numbers[i-1] + catalan_numbers[i-2]\n    return catalan_numbers[n]\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\",n,\"th Catalan number is:\",catalan_number(n))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num < 0:\n        return None\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n    elif num == 0:\n        return 1\n    else:\n        return catalan_number(num-1) * (4*num-2) // (num+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    '''\n    This function calculates the nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Use a regular expression to find all instances of the word \"ly\" at the end of a word\n    matches = re.findall(r'(?<=\\s)ly(?=\\b)', text)\n    # Create an empty list to store the positions of the adverbs\n    adverb_positions = []\n    # Loop through each match and add its position to the list of adverb positions\n    for match in matches:\n        adverb_positions.append(text.find(match))\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    result = []\n    for match in matches:\n        result.append((match.start(), match.end() - 2, match.group(0)))\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b\\w+(ly)\\b', text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match the adverb ending with ly\n    pattern = r'\\b[a-z]*ly\\b'\n\n    # Use the re.findall() method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Print the matches and their positions in the text\n    for i, match in enumerate(matches):\n        print(f\"Adverb {i+1}: {match}\")\n        print(\"Positions:\", text.find(match), text.find(match)+len(match))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"Adverb(s) found:\")\n        for i, match in enumerate(matches):\n            start = match.start()\n            end = match.end()\n            print(f\"{i+1}. {match}: {text[start:end]}\")\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b\\w+ly\\b'\n\n    # Use the re.finditer() function to find all occurrences of the pattern in the input text\n    matches = re.finditer(pattern, text)\n\n    # Iterate over the matches and print the text between the words and the adverb\n    for match in matches:\n        # Get the text between the words and the adverb\n        span = match.span()\n        # Extract the text between the words and the adverb\n        adverb = text[span[0]:span[1]]\n        # Print the adverb and its position in the input text\n        print(f'{adverb}: {span[0]}-{span[1]}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b\\w*[lL]y\\w*\\b', text)\n    positions = [m.start() for m in re.finditer(r'\\b\\w*[lL]y\\w*\\b', text)]\n\n    return adverbs, positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define a regular expression pattern for identifying adverbs ending with ly\n    pattern = r'\\b\\w+(ing|ed|ly)\\b'\n    # find all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # create a dictionary to store the positions of the matches\n    position_dict = {}\n    # iterate over all the matches and add them to the dictionary\n    for match in matches:\n        # if the match is not already in the dictionary, add it and its position to the dictionary\n        if match not in position_dict:\n            position_dict[match] = text.find(match)\n    # sort the dictionary by the position of the matches\n    sorted_dict = dict(sorted(position_dict.items()))\n    # create a list of tuples containing the adverbs and their positions in the text\n    adverb_list = [(k, v) for k, v in sorted_dict.items()]\n    # return the adverb list\n    return adverb_list"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n    # Loop through the items and add them to the heap if the price is less than the current minimum\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item < heap[0]:\n                heapq.heappushpop(heap, item)\n    # Convert the heap to a list and return it\n    return list(heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and a number n and returns\n    a list of the n most expensive items in the dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the items and add them to the min heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        # If the size of the min heap is greater than n, remove the last item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Return the n most expensive items from the min heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input, and returns a list of the n most expensive items.\n    '''\n    # create a min heap of size n, to store the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, -items[i])\n\n    # Find the n largest items in the dataset\n    for i in range(n, len(items)):\n        # Remove the smallest item from the heap\n        heapq.heappop(min_heap)\n        # Add the next item to the heap\n        heapq.heappush(min_heap, -items[i])\n\n    # Return the n largest items in decreasing order\n    return [-x for x in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert the list of tuples to a list of dictionaries\n    items = [{'price': price, 'item': item} for item, price in items]\n    # Sort the list of dictionaries by price in descending order\n    items.sort(key=lambda x: x['price'], reverse=True)\n    # Return the first n items from the sorted list\n    return [item['item'] for item in items[:n]]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input, and returns a list of the n most expensive items in the dataset.\n\n    The function first converts the list of items into a dictionary, where the keys are the item names and the values are their respective prices. It then uses the heapq module in Python to create a min heap of the n most expensive items, using the items' prices as the values.\n\n    Finally, the function returns the heapq module's list of the n most expensive items.\n    '''\n    item_dict = {}\n    for item in items:\n        item_dict[item] = 0\n\n    sorted_items = sorted(item_dict.items(), key=lambda x: x[1])\n\n    # Create a min heap of the n most expensive items using the prices as the values\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, sorted_items[i][1])\n\n    # Extract and return the n most expensive items\n    return [item for item, price in heapq.nsmallest(n, min_heap)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a list of items, and a number n, return the n most expensive items.\n\n    :param items: a list of items\n    :param n: the number of items to return\n    :return: a list of the n most expensive items\n    \"\"\"\n    # Use a min heap to find the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Convert the heap to a list and return it\n    return [-heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n to store the n most expensive items\n    heap = []\n\n    # Iterate through the items dataset and add each item to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n        # Remove the lowest-priced item from the heap if its price is higher than the current highest-priced item\n        while len(heap) > n and heap[0][1] > heap[-1][1]:\n            heapq.heappop(heap)\n\n    # Return the n most expensive items in the heap\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n to keep track of the n most expensive items\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            # Remove the cheapest item from the heap\n            heapq.heappop(min_heap)\n\n    # Return the n most expensive items\n    return min_heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    new_arr = []\n    first_part = l[:n]\n    second_part = l[n:]\n\n    new_arr.extend(second_part)\n    new_arr.extend(first_part)\n\n    return new_arr\n"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Error: The index is greater than the length of the list.\"\n    elif n == 0:\n        return \"Error: The index is 0. The list cannot be split at this index.\"\n    else:\n        part1 = l[:n]\n        part2 = l[n:]\n        return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[-n:] + l[:-n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    for i in range(n):\n        new_list.append(l[i])\n    new_list.append(l[n:])\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0:\n        raise ValueError(\"n should be a positive integer\")\n    elif len(l) < n:\n        raise ValueError(\"n should be less than or equal to the length of the list\")\n    else:\n        result = []\n        for i in range(n):\n            result.append(l[i])\n        result.append(l[n:])\n        return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    mid = len(l) // 2\n    left_part = l[:mid]\n    right_part = l[mid:]\n    \n    # Add the left part to the end of the right part\n    l = right_part + left_part\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # Add the first part to the end of the second part\n    new_list = second_part + first_part\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.insert(n, l.pop(0))\n    print(l)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l) or n < 1:\n        return \"Invalid input\"\n    else:\n        return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    \n    # Split the list at the nth element\n    mid = len(l) // 2\n    left = l[:mid]\n    right = l[mid:]\n    \n    # Add the first part to the end of the right part\n    l = right + l[:mid]\n    \n    # Recursively split the left part of the list\n    return split_Arr(l, n-1)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) < 1:\n        print(\"List should have at least one element\")\n        return None\n    else:\n        max_num = nums[0]\n        min_num = nums[0]\n        for num in nums:\n            if num > max_num:\n                max_num = num\n            elif num < min_num:\n                min_num = num\n        diff = max_num - min_num\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Get the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    # Calculate the difference between the largest and smallest values\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"List should have at least two elements.\"\n    else:\n        min_val = min(nums)\n        max_val = max(nums)\n        diff = max_val - min_val\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n\n    max_num = max(nums)\n    min_num = min(nums)\n\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as an input and returns the difference between the largest and smallest values in the list.\n    '''\n    if len(nums) == 0:\n        return \"The list is empty.\"\n    \n    max_val = max(nums)\n    min_val = min(nums)\n    \n    return abs(max_val - min_val)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    \n    max_val = nums[0]\n    min_val = nums[0]\n    \n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        root = int(i**0.5)\n        if root**2 == i:\n            print(i, end=' ')"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        root = i**0.5\n        if root.is_integer():\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    i = a\n    while i <= b:\n        if i**2 == a or i**2 == b:\n            squares.append(i**2)\n        i += 1\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        square = num * num\n        if square == num:\n            return square\n    return \"No perfect squares found.\""
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    for i in range(a, b+1):\n        square = i**2\n        if square == int(square):\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == a**2 or i**2 == b**2:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize variables\n    perfect_squares = []\n\n    # loop through numbers between a and b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        square = int(i**0.5)\n        if square*square == i:\n            perfect_squares.append(square)\n\n    # return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        j = i * i\n        if j == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i*i == a:\n            print(i)\n        elif i*i == b:\n            print(i)\n        else:\n            pass"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # check if a and b are integers\n    if not all(isinstance(x, int) for x in [a, b]):\n        print(\"Error: Both arguments must be integers.\")\n        return\n    \n    # check if a is smaller than b\n    if a >= b:\n        print(\"Error: a must be smaller than b.\")\n        return\n    \n    # initialize count and sum\n    count = 0\n    sum = 0\n    \n    # find perfect squares between a and b\n    for i in range(int(a**0.5)+1):\n        for j in range(int(b**0.5)+1):\n            square = i**2 + j**2\n            if square <= b and square >= a:\n                count += 1\n                sum += square\n    \n    # print the result\n    print(\"There are\", count, \"perfect squares between\", a, \"and\", b, \"which are:\", sum)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.phase(x+1j*y)\n    r = cmath.sqrt(x**2 + y**2)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.acos(x/r)\n    phi = cmath.asin(y/r)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return (x_rect.real, y_rect.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r*cmath.cos(theta), r*cmath.sin(theta)\n\nx = float(input(\"Enter the value of x: \"))\ny = float(input(\"Enter the value of y: \"))\n\nr, theta = polar_rect(x,y)\nprint(\"The rectangular coordinates (r, theta) are:\", r, theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = x + y*1j\n    magnitude = cmath.sqrt(z.real**2 + z.imag**2)\n    angle = cmath.phase(z)\n    \n    r = magnitude*cmath.cos(angle)\n    theta = angle\n    \n    return r, theta"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n\n    :param r: radius of the point\n    :param theta: angle of the point, in radians\n    :return: x and y coordinates of the point\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r * cmath.cos(theta), r * cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    r = cmath.sqrt(x**2 + y**2)\n    return r.real, r.imag"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    return r*cmath.exp(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert radians to degrees\n    theta = cmath.phase(x+y*1j)\n    theta = abs(theta) * 180 / cmath.pi\n    # Convert polar coordinates to rectangular coordinates\n    r = abs(x+y*1j)\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Find the length of the list\n    length = len(newList)\n\n    # Check if the list is empty\n    if length == 0:\n        return newList\n    \n    # Check if the list has only one element\n    elif length == 1:\n        return [newList[0], newList[0]]\n    \n    # Interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # checking if the length of the list is less than or equal to 1\n    if len(newList) <= 1:\n        return newList\n    \n    # swapping the first and last element of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # initialize the first and last indices\n    first = 0\n    last = len(newList) - 1\n    \n    # swap the first and last elements\n    temp = newList[first]\n    newList[first] = newList[last]\n    newList[last] = temp\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return \"List must have at least two elements.\"\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List must have at least two elements\")\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        print(\"New List:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.pop(0)\n    newList.pop(-1)\n    newList.insert(0, newList.pop())\n    newList.insert(-1, newList.pop())\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_product = 0\n    for i in range(k+1):\n        sum_product += binomial_coefficient(n,i) * binomial_coefficient(n-1,k-i)\n    return sum_product\n\ndef binomial_coefficient(n,k):\n    '''\n    Helper function to calculate the binomial coefficient.\n    '''\n    if k > n-k:\n        k = n-k\n    f = 1\n    for i in range(1,k+1):\n        f *= (n-i+1) // i\n    return f"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if k > n or k < 0: \n        return 0\n\n    factorial = [1] * (n + 1)\n\n    for i in range(1, n + 1): \n        factorial[i] = factorial[i - 1] * i\n\n    sum_product = 0\n\n    for i in range(1, n - k + 1): \n        sum_product += factorial[n] / (factorial[i] * factorial[n - i])\n\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_coeff = 0\n    for i in range(k,n+1):\n        sum_coeff += (i-k+1) * binomial_Coeff(n-1,i-1)\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k, n+1):\n        if i <= k:\n            sum += 1\n        else:\n            sum += i\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 0 or k < 0 or k > n: \n        return 0 \n    elif k == 0 or k == n: \n        return 1 \n    else: \n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize variables\n    sum_coeff = 0\n    num = 1\n    den = 1\n    \n    # Loop through the first k terms of the binomial coefficient sequence\n    for i in range(k):\n        # Update numerator and denominator values for next term\n        num *= (n-i)\n        den *= i+1\n        \n        # Add product of numerator and denominator to sum_coeff\n        sum_coeff += num/den\n        \n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function computes the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == k:\n        return 1\n    elif k == 0 or k == n:\n        return 0\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize the sum\n    sum_of_product = 0\n    # calculate the product of consecutive binomial co-efficients\n    for i in range(1, n + 1):\n        product = 1\n        for j in range(1, i + 1):\n            product *= j\n        sum_of_product += product\n    # return the sum\n    return sum_of_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_regex = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n    match = re.match(ip_regex, ip)\n    if match:\n        ip = ip.lstrip('0')\n        return ip\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0+)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+:\\d+:\\d+:\\d+:', '', ip)\n    ip = re.sub(r'^\\d+:\\d+:\\d+:', '', ip)\n    ip = re.sub(r'^\\d+:\\d+:', '', ip)\n    ip = re.sub(r'^\\d+:', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    ip = re.sub(r'(\\d)\\.\\d+\\.\\d+\\.\\d+', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(0{2})', r'', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Remove leading zeroes from an IP address\n    ip = re.sub('^0+(?!\\.)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+','',ip)\n\nprint(removezero_ip('192.168.0.1')) # Output: 192.168.0.1\nprint(removezero_ip('192.168.0.0')) # Output: 192.168.0.0\nprint(removezero_ip('192.168.1.1')) # Output: 192.168.1.1"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+(?=\\d)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    match = re.match(pattern, ip)\n    if match:\n        ip = '.'.join(ip.split('.')[1:])\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even number\n    first_even = None\n    for num in list1:\n        if num % 2 == 0:\n            first_even = num\n            break\n    # Find the first odd number\n    first_odd = None\n    for num in list1:\n        if num % 2!= 0:\n            first_odd = num\n            break\n    # Find the difference between the first even and first odd numbers\n    diff = first_even - first_odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num = i\n        else:\n            odd_num = i\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Find the first even number\n    even_num = next(num for num in list1 if num % 2 == 0)\n\n    # Find the first odd number\n    odd_num = next(num for num in list1 if num % 2 == 1)\n\n    # Return the difference between the two numbers\n    return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even number in the list\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_index = i\n            break\n\n    # Find the first odd number in the list\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            odd_index = i\n            break\n\n    # Calculate the difference of the two numbers\n    diff = abs(list1[even_index] - list1[odd_index])\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n\n    if even_num % 2 == 0:\n        return odd_num - even_num\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n    \n    if even_num is not None and odd_num is not None:\n        diff = even_num - odd_num\n        return diff\n    else:\n        return \"The list does not contain any even and odd numbers.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n\n    # Loop through the list and check if the number is even or odd\n    for num in list1:\n        if num % 2 == 0:\n            # If the number is even, check if it is the first even number\n            if len(list1) == 1:\n                # If there is only one even number, return 0\n                return 0\n            elif num == list1[0]:\n                # If the number is the first even number, return the difference of the odd number and the first even number\n                return (list1[1] - num)\n        else:\n            # If the number is odd, check if it is the first odd number\n            if len(list1) == 1:\n                # If there is only one odd number, return the absolute difference of the first odd number and 0\n                return abs(num - list1[0])\n            elif num == list1[0]:\n                # If the number is the first odd number, return the difference of the second odd number and the first odd number\n                return (list1[1] - num)\n\n    # If the loop completes without finding the difference, return None\n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError('Input must be a list.')\n\n    if len(list1) < 2:\n        raise ValueError('Input list must have at least two elements.')\n\n    if not all(isinstance(x, int) for x in list1):\n        raise TypeError('All elements in the list must be integers.')\n\n    even = 0\n    odd = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n\n    return abs(even - odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in list1:\n        if i % 2 == 0 and i % 2!= list1[0]:\n            return i - list1[0]\n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                break\n    if even_num is None:\n        return None\n    else:\n        return odd_num - even_num"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as strings and returns the minimum number of swaps required to convert one to the other.\n    \"\"\"\n    # Get the length of the binary number\n    n = len(str1)\n    \n    # Initialize a counter to keep track of the number of swaps required\n    swaps = 0\n    \n    # Convert the binary strings to binary integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Use bitwise operations to swap the bits\n    while num1!= num2:\n        if num1 & 1 == num2 & 1:\n            # No swap required\n            num1 >>= 1\n            num2 >>= 1\n        else:\n            # Swap the bits\n            num1 ^= num2\n            num1 >>= 1\n            num2 ^= num1\n            num2 >>= 1\n        \n        swaps += 1\n        \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2): \n    n = len(str1) \n    i = j = 0 \n    swap_count = 0\n    \n    while i < n and j < n: \n        if str1[i]!= str2[j]: \n            str1[i], str1[j] = str1[j], str1[i] \n            str2[i], str2[j] = str2[j], str2[i] \n            swap_count += 1\n            i, j = 0, 0\n        else: \n            i += 1\n            j += 1\n    \n    return swap_count "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert them.\n    \"\"\"\n\n    # Convert the input strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the minimum number of swaps to be the maximum value possible\n    min_swaps = len(str1)\n\n    # Iterate through all possible binary numbers from 0 to 2^n - 1\n    for i in range(0, 2**len(str1)):\n        # Convert the current binary number to decimal and check if it matches with the second input binary number\n        if bin(i)[2:].zfill(len(str1)) == str2:\n            # Calculate the number of swaps required to convert the current binary number to the second input binary number\n            swaps = 0\n            j = len(str1) - 1\n            while j >= 0 and num1[j] == num2[j]:\n                swaps += 1\n                j -= 1\n            # Check if the current binary number has less number of swaps than the minimum number of swaps found so far\n            if swaps < min_swaps:\n                min_swaps = swaps\n\n    # Return the minimum number of swaps required to convert the two binary numbers\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert both strings to binary\n    binary1 = bin(int(str1, 2))[2:]  # exclude the '0b' prefix\n    binary2 = bin(int(str2, 2))[2:]  # exclude the '0b' prefix\n\n    # swap digits until binary1 and binary2 are equal\n    swaps = 0\n    while binary1!= binary2:\n        binary1, binary2 = binary2, binary1 + binary2\n        swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings as input and returns the minimum number of swaps required to convert the first number to the second number.\n    \"\"\"\n    # create two lists to store the binary numbers as integers\n    list1 = []\n    list2 = []\n    # convert the binary strings to integers\n    for i in range(len(str1)):\n        list1.append(int(str1[i]))\n        list2.append(int(str2[i]))\n    # calculate the number of swaps required to convert the first number to the second number\n    swaps = 0\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            swaps += 1\n    # return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2): \n    n = len(str1) \n    dp = [[float('inf')] * (n + 1) for _ in range(n + 1)] \n    for i in range(n + 1): \n        dp[i][0] = i \n    for j in range(n + 1): \n        dp[0][j] = j \n\n    for i in range(1, n + 1): \n        for j in range(1, n + 1): \n            if str1[i - 1] == '1' and str2[j - 1] == '0': \n                dp[i][j] = dp[i - 1][j] + 1 \n            elif str1[i - 1] == '0' and str2[j - 1] == '1': \n                dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1] + 1 \n\n    return dp[n][n] "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both strings to binary format\n    bin1 = bin(int(str1,2))[2:]\n    bin2 = bin(int(str2,2))[2:]\n    # Initialize two pointers to the beginning of both binary strings\n    i = 0\n    j = 0\n    # Initialize the minimum number of swaps required as infinity\n    min_swaps = float('inf')\n    # Compare the two binary strings character by character\n    while i < len(bin1) and j < len(bin2):\n        # If the characters do not match, increment the minimum number of swaps\n        if bin1[i]!= bin2[j]:\n            min_swaps = min(min_swaps, i+j)\n        # If the characters match, increment the pointers for both strings\n        i += 1\n        j += 1\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # convert strings to binary and calculate the number of swaps required to convert one binary number to another\n    binary1 = bin(int(str1, 2))[2:]\n    binary2 = bin(int(str2, 2))[2:]\n    n = max(len(binary1), len(binary2))\n    swaps = 0\n    for i in range(n):\n        if binary1[i]!= binary2[i]:\n            swaps += 1\n            if binary1[i] == '0' and binary2[i] == '1':\n                binary1 = binary1[:i] + '1' + binary1[i+1:]\n                binary2 = binary2[:i] + '0' + binary2[i+1:]\n            elif binary1[i] == '1' and binary2[i] == '0':\n                binary1 = binary1[:i] + '0' + binary1[i+1:]\n                binary2 = binary2[:i] + '1' + binary2[i+1:]\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number represented as a string to another.\n\n    :param str1: The first binary string.\n    :param str2: The second binary string.\n    :return: The minimum number of swaps required to convert the binary strings.\n    \"\"\"\n\n    # Convert both binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for count and swaps\n    count = 0\n    swaps = 0\n\n    # While both numbers are greater than 1, iterate through each bit\n    while num1 > 1 and num2 > 1:\n\n        # If both bits are 1, add 1 to count and subtract 1 from swaps\n        if (num1 & 1) == 1 and (num2 & 1) == 1:\n            count += 1\n            swaps += 1\n\n        # If num1 is greater than num2, subtract 1 from num1 and add 1 to swaps\n        elif num1 > num2:\n            swaps += 1\n            num1 -= 1\n\n        # If num2 is greater than num1, subtract 1 from num2 and add 1 to swaps\n        else:\n            swaps += 1\n            num2 -= 1\n\n        # Shift the numbers to the right by 1 bit\n        num1 >>= 1\n        num2 >>= 1\n\n    # If there are any swaps left, return the count and the swaps\n    if swaps > 0:\n        return count, swaps\n\n    # If there are no swaps left, return -1\n    else:\n        return -1"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    if len(str1)!= len(str2):\n        return \"Invalid input\"\n\n    # Initialize two lists to store the values of digits of both numbers\n    list1 = [int(digit) for digit in str1]\n    list2 = [int(digit) for digit in str2]\n\n    # Initialize two lists to store the counts of digits in both numbers\n    count1 = [0] * 10\n    count2 = [0] * 10\n\n    # Count the frequency of digits in both numbers\n    for num in list1 + list2:\n        count1[num] += 1\n        count2[num] += 1\n\n    # Find the minimum count of swaps required to convert both numbers\n    count_swaps = []\n    for i in range(10):\n        count_swaps.append(min(count1[i], count2[i]))\n\n    # Initialize the minimum number of swaps to infinity\n    min_swaps = float('inf')\n\n    # Find the minimum number of swaps required to convert the numbers\n    for i in range(10):\n        for j in range(10):\n            if i!= j:\n                for k in range(10):\n                    if j!= k:\n                        for l in range(10):\n                            if k!= l:\n                                num1 = i * 1000 + j * 100 + k * 10 + l\n                                num2 = (i + j) * 1000 + (k + l)\n                                list1[num1 - 1] = list2[num2 - 1] = 0\n                                count1 = count2 = [0] * 10\n                                for num in list1 + list2:\n                                    count1[num] += 1\n                                count_swaps = []\n                                for i in range(10):\n                                    count_swaps.append(min(count1[i], count2[i]))\n                                count_swaps.remove(min(count_swaps))\n                                if count_swaps:\n                                    min_swaps = min(min_swaps, sum(count_swaps))\n                                list1[num1 - 1] = list2[num2 - 1] = 1\n\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_in_bytes = sys.getsizeof(tuple_list)\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the total size of the tuples in bytes.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n\nif __name__ == '__main__':\n    t1 = (1, 2, 3, 4, 5)\n    t2 = (6, 7, 8, 9, 10)\n    print(\"Size of t1 in bytes:\", tuple_size(t1))\n    print(\"Size of t2 in bytes:\", tuple_size(t2))"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list[0]) * len(tuple_list[0])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if not isinstance(tuple_list, list):\n        raise TypeError('Input must be a list of tuples')\n    \n    size = 0\n    for item in tuple_list:\n        if not isinstance(item, tuple):\n            raise TypeError('All items in the list must be tuples')\n        size += sys.getsizeof(item)\n    \n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_bytes = 0\n    \n    for i in tuple_list:\n        size_bytes += sys.getsizeof(i)\n    \n    return size_bytes"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    n = len(arr1) + len(arr2)\n\n    while i < n and j < n:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n        if i == k:\n            return arr1[i-1]\n        elif i < k and j == k:\n            return arr2[j-1]\n        elif i == k:\n            return arr2[j-1]\n        elif i < k and j < k:\n            k -= i\n            i = 0\n            j = 0\n            n = len(arr1) + len(arr2)\n\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth smallest element in two sorted arrays.\n\n    Args:\n        arr1: list of integers\n        arr2: list of integers\n        k: integer\n\n    Returns:\n        integer: The kth smallest element from the two sorted arrays.\n    \"\"\"\n\n    # Initialize two pointers for each array\n    i = 0\n    j = 0\n\n    # Iterate until we find the kth smallest element\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n\n    # If we reach here, we haven't found the kth smallest element yet\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and an integer k, and returns the kth element from the first array.\n    \"\"\"\n    # Find the length of the arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize the left and right pointers for both arrays\n    left1, right1 = 0, n1 - 1\n    left2, right2 = 0, n2 - 1\n\n    # Initialize the variable to store the result\n    kth = None\n\n    # Find the kth element\n    while k > 0:\n        # If the left pointer of the first array is less than the right pointer of the second array,\n        # move the left pointer of the first array one step to the right\n        if left1 <= right2:\n            if k == 1:\n                # We have found the kth element\n                kth = arr1[left1]\n                break\n            elif k > 1:\n                k -= 1\n            left1 += 1\n        # If the left pointer of the first array is greater than the right pointer of the second array,\n        # move the left pointer of the second array one step to the right\n        elif left2 <= right1:\n            if k == 1:\n                kth = arr2[left2]\n                break\n            elif k > 1:\n                k -= 1\n            left2 += 1\n\n    return kth"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    n1, n2 = len(arr1), len(arr2)\n    i, j = 0, n2 - 1\n    \n    while i < n1 and j >= 0:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j -= 1\n    \n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Get the lengths of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize two pointers for each array\n    i = 0\n    j = 0\n\n    # Initialize the sum of the elements in the first and second arrays\n    sum1 = sum2 = 0\n\n    # Initialize a boolean flag to check if k is already found\n    kth_found = False\n\n    # Loop until kth element is found or both arrays have been completely traversed\n    while i < n1 and j < n2 and not kth_found:\n\n        # Check if the current element of the first array is less than or equal to the current element of the second array\n        if arr1[i] <= arr2[j]:\n\n            # If it is, add the element to the sum and move the pointer of the first array\n            sum1 += arr1[i]\n            i += 1\n\n        else:\n\n            # If it's not, add the element to the sum and move the pointer of the second array\n            sum2 += arr2[j]\n            j += 1\n\n        # Check if kth element is already found\n        if sum1 == k:\n            kth_found = True\n        elif sum2 == k:\n            kth_found = True\n\n        # If kth element is not found, check if the sum of the elements in the two arrays is equal to k\n        if kth_found and sum1!= k and sum2!= k:\n            kth_found = False\n\n    # If kth element is not found, return None\n    if not kth_found:\n        return None\n\n    # Return the kth element\n    elif sum1 == k:\n        return arr1[i-1]\n    else:\n        return arr2[j-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n        if i == len(arr1):\n            return arr2[j]\n        elif j == len(arr2):\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    \n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    \n    if i == len(arr1) and j < k:\n        return find_kth(arr1, arr2[j:], k - j)\n    elif i < k:\n        return find_kth(arr1[i:], arr2, k - i)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == len(arr1) - i + 1:\n                return arr1[i-1]\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            elif k == len(arr1) - i + 1:\n                return arr1[i-1]\n            else:\n                return arr2[j-1]\n            i += 1\n            j += 1"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    num_str = str(number)\n    num_len = len(num_str)\n    total = 0\n    \n    for digit in num_str:\n        total += int(digit) ** num_len\n    \n    if total == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is armstrong\n    and False otherwise. It checks if the number is equal to the sum of its own digits raised to the power of the number of digits.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    sum_of_digits = sum(digits)\n    return n == sum_of_digits"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    num_digits = len(num_str)\n    power = num_digits\n\n    while power > 1:\n        sum = 0\n        remainder = 0\n\n        for digit in num_str:\n            remainder = int(digit)\n            sum += remainder ** power\n\n        power -= 1\n\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number to a string and remove any non-numeric characters\n    cleaned_number = ''.join(filter(str.isdigit, str(number)))\n    \n    # calculate the sum of the cube of each digit\n    sum_of_cubes = sum(int(digit) ** 3 for digit in cleaned_number)\n    \n    # compare the sum with the original number\n    if sum_of_cubes == int(cleaned_number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each digit of the number\n    for digit in str(number):\n        # Add the current digit to the sum\n        sum += int(digit) ** len(str(number))\n        \n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n    elif number == 10:\n        return True\n    else:\n        num = number\n        temp = number\n        sum = 0\n        \n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** 3\n            temp //= 10\n            \n        if num == sum:\n            return True\n        else:\n            return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function checks whether the given number is Armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    str_n = str(n)\n    # Initialize the sum variable\n    sum = 0\n    # Loop through each digit of the string\n    for digit in str_n:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Multiply the digit by the cube of its index (starting from 1)\n        sum += digit_int ** len(str_n)\n    # Check if the sum is equal to the original number\n    return sum == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Function to check if a given number is Armstrong or not.\n    \"\"\"\n    s = 0\n    temp = n\n    while temp > 0:\n        last_digit = temp % 10\n        s += last_digit ** 3\n        temp //= 10\n    return n == s"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    else:\n        sum = 0\n        num = number\n        while num > 0:\n            digit = num % 10\n            sum += digit ** 3\n            num //= 10\n        return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(n):\n    '''\n    This function takes an integer as input and returns True if it is an armstrong number or False otherwise.\n    An armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n    '''\n    # Convert the number to a string\n    str_n = str(n)\n    # Calculate the sum of digits raised to the power of the number of digits\n    sum_of_digits = sum(int(digit) ** len(str_n) for digit in str_n)\n    # Compare the original number with the sum of digits raised to the power of the number of digits\n    if n == sum_of_digits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_ = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_ += i\n        count += 1\n    average = sum_ / count\n    return sum_, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total / number\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n\n    average = sum / count\n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    sum_of_numbers = 0\n    for i in range(n):\n        sum_of_numbers += i + 1\n    average = sum_of_numbers / n\n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    sum = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    \n    avg = sum/count\n    \n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_num = 0\n    total = 0\n    count = 0\n    \n    for i in range(number):\n        num = int(input(\"Enter a natural number: \"))\n        sum_num += num\n        total += 1\n        count += 1\n        \n    average = sum_num / total\n    return sum_num, average\n\nn = int(input(\"Enter the value of n: \"))\nsum_num, average = sum_average(n)\nprint(\"Sum of first\", n, \"natural numbers is:\", sum_num)\nprint(\"Average of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    if n < 0:\n        print(\"n must be non-negative\")\n        return None\n    \n    total = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        total += i\n        count += 1\n    \n    average = total / count\n    \n    print(f\"Sum: {total}, Average: {average}\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum / n\n    print(\"Sum of first {} natural numbers: {}\".format(n, sum))\n    print(\"Average of first {} natural numbers: {}\".format(n, avg))"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n) : \n\n    if n % 2 == 0 : \n        return True \n    else : \n        return False \n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether a given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and checks whether it is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    freq = {}\n    for char in str1:\n        if char in freq:\n            return char\n        else:\n            freq[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = {}\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(s):\n    \"\"\"\n    Find the first repeated character in a given string.\n    \"\"\"\n    seen = {}\n    for c in s:\n        if c in seen:\n            return c\n        seen[c] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n            \n"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character. If the string contains no repeated character, it returns None.\n    \"\"\"\n    if len(str1) == 0:\n        return None\n\n    char_set = {}  # A dictionary to store the frequency of characters in the string\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set[char] = True\n\n    return None  # If no repeated character is found, return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    if not str1:\n        return 'The string is empty.'\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return 'No repeated character found.'"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 2:\n            return char\n    \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n            \n    # Loop through the dictionary again and find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n            \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Loop through the string and update the frequency of each character in the dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Loop through the string again and find the first repeated character\n    for char in str1:\n        if freq[char] == 2:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i < 10:\n            lucid_numbers.append(i)\n        else:\n            num_str = str(i)\n            for j in range(len(num_str)):\n                if int(num_str[j]) == 0:\n                    lucid_numbers.append(int(num_str[:j] + num_str[j+1:]))\n                    break\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = [2]\n    for i in range(3, n):\n        if i % 2 == 0:\n            ludic_numbers.append(2*i+1)\n        else:\n            ludic_numbers.append(2*i)\n    return ludic_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for num in range(1, n):\n        lucid_num = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                lucid_num += 1\n        if lucid_num == 1:\n            lucid_numbers.append(num)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_nums = []\n    for num in range(1, n+1):\n        lucid_nums.append(num*num*num)\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(1, n+1):\n        ludic = (i*i*i) - (i*i) + i\n        ludic_list.append(ludic)\n    return ludic_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for num in range(n):\n        if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            ludic_numbers.append(num)\n    return ludic_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if all(int(j)**i == i for j in range(1, i+1)):\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_nums = []\n    for i in range(1, n+1):\n        if all(int(digit) > 0 for digit in str(i)):\n            lucid_nums.append(i)\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid.append(i)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            ludic_list.append(i)\n    return ludic_list\n\n\nprint(get_ludic(10)) # Output: [2, 4, 6, 8, 10]"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    return''.join(reversed(words))"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the words back into a string\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string by spaces\n    words = s.split()\n    # reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # join the reversed words with spaces\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for i in range(len(words)-1, -1, -1):\n        reversed_words.append(words[i])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    # Convert string to list of words\n    words = s.split()\n    \n    # Reverse the list of words\n    words.reverse()\n    \n    # Join the reversed words back into a string and return\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    # convert the string to a list of words\n    words = s.split()\n\n    # iterate over the list of words in reverse order\n    for i in range(len(words)-1, -1, -1):\n        # reverse the current word\n        words[i] = words[i][::-1]\n\n    # join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return \" \".join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    '''\n    Function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Function to check if a given number is a prime number or not.\n    '''\n    if is_prime(num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    '''\n    This function checks whether a given number is a prime number or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if num is less than 2\n    if num < 2:\n        return False\n    \n    # check if num is divisible by any number between 2 and the square root of num\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    # if no divisor is found, the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given integer is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # if the number is less than 2, it is not a prime number\n    if num < 2:\n        return False\n    # check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    # if the loop completes without finding any divisor, then the number is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a degree value as input and returns the corresponding value in radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    # Use regex to find all non-escaped literals in the text\n    literals = re.findall(r'(?<!\\\\)(\\w+)', text)\n\n    # Filter out any literals that don't match the pattern\n    matching_literals = [literal for literal in literals if re.match(pattern, literal)]\n\n    # If there are no matching literals, return None\n    if not matching_literals:\n        return None\n\n    # Find the start and end indices of the first matching literal in the text\n    first_match = matching_literals[0]\n    start_index = text.find(first_match)\n    end_index = start_index + len(first_match)\n\n    # Return the matching literal and its start and end indices\n    return first_match, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            start_index = text.find(match)\n            end_index = start_index + len(match)\n            print(f\"Found literal: {match}\")\n            print(f\"Start index: {start_index}\")\n            print(f\"End index: {end_index}\")\n            print(\"\\n\")\n    else:\n        print(\"No literals found.\")\n\n\nif __name__ == \"__main__\":\n    text = \"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\"\n    pattern = r\"\\b(\\w)\\w+\\b\"\n    find_literals(text, pattern)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literals = re.findall(pattern, text)\n    if len(literals) == 0:\n        return None, None, None\n    else:\n        return literals[0], text.find(literals[0]), text.find(literals[0])+len(literals[0])"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start = text.index(match)\n        end = start + len(match)\n        print(match, start, end)\n\ntext = \"This is a sample text with some words like cat, dog, fish, and bear.\"\npattern = r'\\b\\w+\\b'\nfind_literals(text, pattern)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. \n    The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use regular expression to find all occurrences of pattern\n    matches = re.findall(pattern, text)\n    \n    # Iterate over matches and return start and end indices of each match\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        yield (match, start, end)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #Initializing the bell number variable to 0\n    bell = 0\n    #Iterating from 0 to n-1\n    for i in range(n): \n        #Finding the sum of all numbers from 0 to i-1\n        sum_of_numbers = sum([i])\n        #Adding the sum of numbers to bell variable\n        bell = bell + sum_of_numbers\n    #Returning the bell number\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return bell_Number(n-1) + n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a Python function to find the nth Bell number.\n    \"\"\"\n    if n == 1 or n == 0:\n        return n\n    else:\n        return bell_Number(n - 1) + bell_Number(n - 2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    if n == 0 or n == 1:\n        return 1\n\n    else:\n        result = 0\n        for i in range(1, n+1):\n            result += bell_Number(i-1)\n        return result"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # Recursive function to calculate bell number\n    def bell(n): \n        if n == 0: \n            return 1 \n        elif n == 1: \n            return 2 \n        else: \n            return bell(n-1) + bell(n-2)\n\n    # Return bell number of n\n    return bell(n)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Convert the input list to a set so that we can easily remove the k'th element\n    set1 = set(list1)\n    # Reverse the set so that we can easily find the k'th element\n    set1 = set1.reverse()\n    # Find the k'th element in the set\n    kth_element = next(iter(set1))\n    # Remove the k'th element from the set\n    set1.remove(kth_element)\n    # Convert the set back to a list and return it\n    return list(set1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Check if the list has more than L elements\n    if len(list1) > L:\n        # Copy the first L elements to a new list\n        result = list1[:L]\n        # Remove the k'th element from the list\n        del result[L-1]\n        # Concatenate the remaining elements with the k'th element\n        result.extend([list1[L-1]])\n    else:\n        result = list1\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and L, which is the index of the element to be removed from the list.\n    It then uses slicing to remove the kth element from the list and returns the modified list.\n    '''\n    list1 = list(list1)\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    k = L - 1\n    while k < len(list1) - 1:\n        list1[k] = list1[k+1]\n        k += 1\n\n    del list1[len(list1)-1]\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # create a copy of the list\n    list2 = list1.copy()\n    \n    # remove the kth element from the list\n    del list2[k]\n    \n    # return the modified list\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L[L.index(min(L))])\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(matrix)):\n        if matrix[i][N-1] > max_value:\n            max_value = matrix[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Initialize max value to be the first element of the first row\n    max_value = test_list[0][0]\n\n    # Iterate over each row of the matrix\n    for row in test_list:\n        # Check if the nth column value is greater than the current max value\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize a variable to store the maximum value\n    max_value = 0\n\n    # Loop through each row in the matrix\n    for row in test_list:\n        # If the current row has more than N columns, skip it\n        if len(row) <= N:\n            continue\n\n        # Find the value of then'th column in the current row\n        nth_column = row[N-1]\n\n        # If the value is greater than the current maximum, update the maximum\n        if nth_column > max_value:\n            max_value = nth_column\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list[0])\n    max_list = []\n    for i in range(n):\n        max_list.append(max(row[i] for row in test_list))\n    return max(max_list)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize maximum value to 0\n    max_val = 0\n    # iterate over each row in the matrix\n    for row in test_list:\n        # check if the value at then'th index is greater than the current maximum value\n        if row[N-1] > max_val:\n            # update maximum value\n            max_val = row[N-1]\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(matrix, N):\n    max_val = float('-inf')\n    for row in matrix:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            continue\n        if max_value < test_list[i][N-1]:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_list = []\n    for i in range(len(test_list)):\n        max_val = max(test_list[i][N-1])\n        max_list.append(max_val)\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # get the length of the first row in the matrix\n    row_length = len(test_list[0])\n    \n    # check if the length of the matrix is greater than the N value\n    if N > row_length:\n        raise ValueError(\"N value is greater than the number of columns in the matrix\")\n    \n    # initialize a variable to store the max value found so far\n    max_value = float('-inf')\n    \n    # loop through the first row of the matrix and find then'th column\n    for i in range(row_length):\n        if i == N-1:\n            max_value = max(max_value, test_list[0][i])\n    \n    # return the max value found so far\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # Find the length of the longest row in the matrix\n    max_len = len(test_list[0])\n\n    # Find the index of then'th column\n    col_index = N - 1\n\n    # Initialize a variable to store the maximum value of then'th column\n    max_val = float('-inf')\n\n    # Loop through each row in the matrix\n    for row in test_list:\n        # Check if the length of the current row is greater than the maximum length\n        if len(row) > max_len:\n            max_len = len(row)\n\n        # Check if the index of the current column is equal to then'th column\n        if col_index < len(row):\n            # If it is, update the maximum value if the current value is greater than the current maximum value\n            if row[col_index] > max_val:\n                max_val = row[col_index]\n\n    # Return the maximum value of then'th column\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists as input and returns a list of two lists. \n    Each sublist in the input list contains two elements, and the function returns a list of two \n    lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist)!= 2:\n            raise ValueError('All sublists must have exactly two elements')\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    merged_lst = []\n\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][0]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            cum_sum += test_list[j][0]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable to 0\n    cum_sum = 0\n    \n    # Loop through the tuple list\n    for i in test_list:\n        # Add the current value to the cumulative sum\n        cum_sum += i\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # initialize an empty list to store the cumulative sum\n    cum_sum_list = []\n    # loop through the input list\n    for tup in test_list:\n        # initialize a variable to store the current cumulative sum\n        cum_sum = 0\n        # loop through the individual values in the tuple\n        for val in tup:\n            # add the value to the cumulative sum\n            cum_sum += val\n        # add the cumulative sum to the cum_sum_list\n        cum_sum_list.append(cum_sum)\n    # return the cum_sum_list\n    return cum_sum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        if type(test_list[i]) == tuple:\n            if len(test_list[i]) > 1:\n                for j in range(len(test_list[i])-1):\n                    total_sum += test_list[i][j]\n        else:\n            total_sum += test_list[i]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_of_elements = 0\n    for element in test_list:\n        sum_of_elements += element\n    return sum_of_elements"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize an empty list to store the cumulative sum\n    cumulative_sum = []\n    \n    # Iterate through the tuple list\n    for i in range(len(test_list)):\n        # If the current element is the first element in the tuple, add its value to the cumulative sum\n        if i == 0:\n            cumulative_sum.append(test_list[i][1])\n            # Otherwise, add the current element's value to the cumulative sum\n        else:\n            cumulative_sum.append(test_list[i][1] + cumulative_sum[-1])\n    \n    # Return the cumulative sum as a list\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        average = total / len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for sub_tuple in nums:\n        for num in sub_tuple:\n            total += num\n            count += 1\n    return [total/count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        count = len(num)\n        avg = total/count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    avg_list = []\n\n    # Iterate through each tuple in the input list\n    for tup in nums:\n        # Calculate the average of the tuple\n        avg = sum(tup) / len(tup)\n        # Add the average to the list of averages\n        avg_list.append(avg)\n\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for t in nums:\n        if len(t) > 0:\n            average = sum(t) / len(t)\n            averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in nums:\n        avg = sum(i) / len(i)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = [0, 0]\n    count = 0\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            total[j] += nums[i][j]\n            count += 1\n    return [total[i]/count for i in range(len(total))]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        sum_num = sum(num_tuple)\n        avg = sum_num / len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    result = []\n    for i in nums:\n        for j in i:\n            total += j\n            count += 1\n    if count > 0:\n        average = total/count\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create an empty list to store the averages for each tuple\n    averages = []\n    \n    # Iterate through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the sum of the values in the tuple\n        total = sum(tup)\n        \n        # Divide the sum by the length of the tuple to get the average\n        average = total / len(tup)\n        \n        # Append the average to the averages list\n        averages.append(average)\n    \n    # Return the averages list\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element-wise modulo operation.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n        \n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length!\")\n        return\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n        \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = tuple()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initializing variables\n    curr_pos = (0, 0)  # current position of the player\n    steps_taken = 0  # steps taken by the player\n    jumps = 0  # number of jumps required\n\n    # loop until the player reaches the destination\n    while curr_pos!= (d, 0):\n\n        # check if the player can move forward or if he needs to jump\n        if curr_pos[1] < d:\n            curr_pos = (curr_pos[0], curr_pos[1] + 1)  # move forward\n        else:\n            # calculate the number of jumps required to reach the destination\n            jumps += curr_pos[0] // d  # number of jumps in horizontal direction\n            curr_pos = (curr_pos[0] % d, 0)  # move down a row\n\n        # increment the steps taken by the player\n        steps_taken += 1\n\n        # check if the player has reached the destination\n        if curr_pos == (d, 0):\n            break\n\n    # return the number of jumps required to reach the destination and the steps taken by the player\n    return jumps, steps_taken"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    steps.sort()\n    jumps = 0\n    i = 0\n    while i < len(steps)-1:\n        if steps[i] < d:\n            i += 1\n            jumps += 1\n        else:\n            i += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Args:\n    steps (int): Number of steps required to reach the point (d, 0).\n    d (int): Distance from origin to reach the point (d, 0).\n\n    Returns:\n    int: Number of jumps required to reach the point (d, 0).\n    \"\"\"\n\n    jumps = 0\n    steps = steps - 1  # Subtracting 1 to avoid the last step\n    while steps >= 0:\n        if d == 0:\n            break\n        if d > 0:\n            d -= 1\n            steps -= 1\n            jumps += 1\n        else:\n            steps -= 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    curr_x = 0\n    curr_y = 0\n    jumps_required = 0\n    \n    while True:\n        if curr_x == d and curr_y == 0:\n            return jumps_required\n        if curr_y < 0:\n            jumps_required += 1\n            curr_y = 0\n        else:\n            curr_y += 1\n            \n        if curr_x >= len(steps):\n            return -1\n            \n        curr_x += steps[curr_x]\n        \n        if curr_x > len(steps):\n            return -1\n        \n        count += 1\n    \n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    jumps = 0\n    i = 0\n    while i < steps:\n        jumps += 1\n        i += d\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d <= 0 or steps <= 0:\n        return -1\n    count = 0\n    i = 0\n    j = 0\n    while j < d:\n        i += 1\n        j = max(i+1, j+1)\n        count += 1\n        if i == steps:\n            return count\n        elif j > steps:\n            return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # base case\n    if d >= steps:\n        return 1\n\n    # recursive case\n    return min_Jumps(steps, d+1) + min_Jumps(steps-d-1, d)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    steps = min(steps, 10000)  # To avoid negative value of steps\n    jumps = 0\n    x, y = 0, d\n    \n    # Check if point is reachable\n    while x <= 1000 and y >= -1000:\n        if x == 1000 and y == 0:\n            return jumps\n        x += 1\n        y -= 1\n        jumps += 1\n        \n    # If point is not reachable, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # We will store the distance from (0,0) to (d,0) in steps\n    min_steps = 0\n    # We will store the number of jumps required to reach (d,0) from origin\n    min_jumps = 0\n    \n    # We will iterate through all possible values of steps\n    for i in range(1, steps+1):\n        # If the current value of steps is less than or equal to the distance from (0,0) to (d,0), we will add one to the minimum steps and zero to the minimum jumps\n        if i <= d:\n            min_steps += 1\n            min_jumps = 0\n        # If the current value of steps is greater than the distance from (0,0) to (d,0), we will add the minimum steps to the current minimum jumps and zero to the minimum steps\n        else:\n            min_steps = min_jumps + 1\n            min_jumps = 0\n    \n    # Finally, we will return the minimum number of jumps required to reach (d,0) from origin\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 0\n    while i < steps:\n        if i + d >= steps:\n            break\n        i += d\n        jumps += 1\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists must have the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i]!= 0:\n            result.append(nums1[i] / nums2[i])\n        else:\n            result.append(float('inf'))\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists should have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must be of equal length\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Cannot divide by zero\")\n            return\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length\")\n        return\n\n    # Divide each element of the lists element wise\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n        nums2[i] = nums1[i]\n\n    return nums1, nums2"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length\")\n        return None\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    num_list.clear()\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    return ''.join(nums) + test_str.replace(''.join(nums), '')"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Initialize empty string to store the numbers\n    numbers_str = ''\n\n    # Iterate through each character in the input string\n    for char in test_str:\n\n        # Check if the character is a number\n        if char.isdigit():\n\n            # Append the number to the empty string\n            numbers_str += char\n\n    # Return the string with numbers moved to the end\n    return test_str + numbers_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if len(num_list) > 0:\n        num_str = ''.join(num_list)\n        return test_str + num_str\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    non_nums = ''\n    \n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            non_nums += char\n    \n    return non_nums + ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # list of numbers in the string\n    numbers = []\n    # loop through the string and append each number to the numbers list\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    # sort the numbers list in reverse order\n    numbers.sort(reverse=True)\n    # concatenate the sorted numbers list with the rest of the string\n    result = ''.join(numbers) + test_str\n    # return the result string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create an empty list to store the numbers\n    nums = []\n    # iterate over each character in the input string\n    for char in test_str:\n        # if the character is a digit, add it to the nums list\n        if char.isdigit():\n            nums.append(char)\n        # if the character is not a digit, append it to the end of the string\n        else:\n            test_str += char\n    # join the nums list with the rest of the string\n    test_str = ''.join(nums) + test_str\n    # return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    alphabets = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            alphabets.append(char)\n    result = alphabets + numbers\n    return ''.join(result)\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    nums = [char for char in test_str if char.isdigit()]\n    non_nums = [char for char in test_str if not char.isdigit()]\n    return ''.join(nums + non_nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Initialize an empty list to store the numbers\n    numbers = []\n\n    # Loop through the given string\n    for char in test_str:\n\n        # If the character is a number, append it to the numbers list\n        if char.isdigit():\n            numbers.append(char)\n\n    # Reverse the numbers list to move them to the end\n    numbers.reverse()\n\n    # Concatenate the numbers list to form the new string\n    new_str = ''.join(numbers)\n\n    return new_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    n = len(a)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        if a[0] % a[1] == 0:\n            return 1\n        else:\n            return 0\n\n    dp = [0] * n\n    dp[0] = 1\n    dp[1] = 1\n    max_size = 1\n\n    for i in range(2, n):\n        if a[i-1] % a[i] == 0:\n            dp[i] = 1 + dp[i-1]\n            if dp[i] > max_size:\n                max_size = dp[i]\n        else:\n            dp[i] = 0\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in ascending order\n    a.sort()\n    \n    # Initialize variables\n    size = 0\n    current = 0\n    start = 0\n    \n    # Iterate through the sorted list\n    for i in range(len(a)):\n        # If the current element is not divisible by the next element, increment the size and move the start pointer to the next element\n        if a[i] % a[start]!= 0:\n            size += i - start\n            start = i\n        \n        # If the current element is divisible by the next element, increment the size and move the start pointer to the current element\n        else:\n            current = i\n    \n    # If the last element is not divisible by the first element, increment the size\n    if a[-1] % a[0]!= 0:\n        size += len(a) - start\n    \n    # Return the size of the largest subset\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Sort the list in non-decreasing order\n    a.sort()\n    \n    # Initialize the maximum subset size and the current subset size\n    max_size = 1\n    curr_size = 1\n    \n    # Iterate through the sorted list\n    for i in range(1, len(a)):\n        \n        # Check if the current number is divisible by the next number\n        if a[i] % a[i-1] == 0:\n            \n            # Add the current number to the current subset size\n            curr_size += 1\n            \n            # If the current subset size is greater than the maximum subset size, update the maximum subset size\n            if curr_size > max_size:\n                max_size = curr_size\n                \n        # If the current number is not divisible by the next number, reset the current subset size to 1\n        else:\n            curr_size = 1\n    \n    # Return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    a.sort()\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n    max_size = 0\n    for i in range(n):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if a[i] % a[j] == 0:\n                dp[i][j] = dp[i][j - 1] + 1\n            else:\n                dp[i][j] = 0\n            if dp[i][j] > max_size:\n                max_size = dp[i][j]\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in ascending order\n    a.sort()\n    \n    # Initialize the largest subset size to 0\n    size = 0\n    \n    # Initialize two pointers at the beginning and end of the list\n    left, right = 0, len(a) - 1\n    \n    # Iterate through the list using two pointers\n    while left < right:\n        # Check if the current pair of elements is divisible\n        if a[left] % a[right] == 0:\n            size = max(size, right - left + 1)\n            left += 1\n        else:\n            right -= 1\n    \n    # Return the largest subset size\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a dictionary to store the count of each number in the list\n    count = {}\n    for num in a:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Initialize the largest subset size to 0\n    max_size = 0\n    \n    # Loop through the count dictionary and check if every pair is divisible\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if count[a[i]] % count[a[j]] == 0:\n                # If it is, update the largest subset size\n                max_size = max(max_size, j-i+1)\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the input list in ascending order\n    a.sort()\n\n    # initialize variables\n    count = 0\n    max_count = 0\n    current_count = 0\n\n    # iterate through the list and find the length of the largest subset\n    for i in range(len(a)):\n        if a[i] % a[i+1] == 0:\n            current_count += 1\n        else:\n            count = max(current_count, count)\n            current_count = 1\n            max_count = max(max_count, count)\n\n        # update the maximum count\n        count = max(count, current_count)\n\n    # return the maximum count\n    return max_count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # find the largest number in the list\n    max_num = max(a)\n    # initialize the largest subset size to 1\n    largest_size = 1\n    # initialize a list to store the sizes of subsets\n    subset_sizes = []\n    # loop through each number in the list\n    for num in a:\n        # check if num is divisible by max_num\n        if num % max_num == 0:\n            # if it is, add its size to the largest_size and the subset_sizes list\n            largest_size += 1\n            subset_sizes.append(largest_size)\n        # if num is not divisible by max_num, set its size to 1 and add it to the subset_sizes list\n        else:\n            largest_size = 1\n            subset_sizes.append(largest_size)\n    # find the maximum size in the subset_sizes list\n    largest_size = max(subset_sizes)\n    # return the largest size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    \n    # Sort the input list\n    a.sort()\n    \n    # Initialize variables\n    subset_size = 1\n    current_subset = [a[0]]\n    \n    # Iterate through the sorted list\n    for i in range(1, len(a)):\n        # If the current number is divisible by the last number in the subset, add it to the subset\n        if a[i] % current_subset[-1] == 0:\n            current_subset.append(a[i])\n        else:\n            # If not, update the subset size and start a new subset with the current number\n            subset_size = max(subset_size, len(current_subset))\n            current_subset = [a[i]]\n    \n    # Update the subset size with the last subset\n    subset_size = max(subset_size, len(current_subset))\n    \n    # Return the subset size\n    return subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n    max_size = 0\n    max_subset = []\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(1, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            if a[start] % a[end] == 0:\n                dp[start][end] = length + dp[start+1][end-1]\n                if dp[start][end] > max_size:\n                    max_size = dp[start][end]\n                    max_subset = [a[start], a[end]]\n            else:\n                dp[start][end] = 0\n    return max_subset"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge two sorted lists into one\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    merged_list.sort()\n\n    # Find the middle element of the merged list\n    mid = len(merged_list) // 2\n\n    # If the length of the list is odd, the median is the middle element\n    if len(merged_list) % 2 == 1:\n        return merged_list[mid]\n    # If the length of the list is even, the median is the average of the middle two elements\n    else:\n        return (merged_list[mid-1] + merged_list[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list in ascending order\n    merged_list.sort()\n    \n    # Find the median index\n    if n % 2 == 0:\n        median_index = n // 2\n    else:\n        median_index = (n // 2) + 1\n    \n    # Return the median value\n    return merged_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Find the median of two sorted lists of same size.\n\n    Args:\n    arr1: List of integers.\n    arr2: List of integers.\n    n: Size of the two lists.\n\n    Returns:\n    The median of the two lists.\n    \"\"\"\n    # Merge the two lists into a single sorted list\n    merged_list = arr1 + arr2\n    merged_list.sort()\n\n    # Find the median index\n    median_index = n // 2\n\n    # Check if the median index is even or odd\n    if n % 2 == 0:\n        # Find the average of the middle two elements\n        median = (merged_list[median_index - 1] + merged_list[median_index]) / 2\n    else:\n        # Find the middle element\n        median = merged_list[median_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        print(\"Both lists should have the same length.\")\n        return\n\n    # merge the two sorted lists into one sorted list\n    merged_list = arr1 + arr2\n\n    # sort the merged list in ascending order\n    merged_list.sort()\n\n    # find the median index based on the length of the list\n    median_index = n // 2\n\n    # return the median value\n    return merged_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n\n    # Sort the concatenated array\n    arr.sort()\n\n    # Check the length of the array\n    if n % 2 == 0:\n        # If the length of the array is even, return the average of the two middle elements\n        median = (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        # If the length of the array is odd, return the middle element\n        median = arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two arrays\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array\n    merged_arr.sort()\n\n    # Calculate the length of the array\n    length = len(merged_arr)\n\n    # Calculate the middle index\n    middle = length // 2\n\n    # If the length is odd, return the middle element\n    if length % 2 == 1:\n        return merged_arr[middle]\n\n    # If the length is even, return the average of the two middle elements\n    else:\n        return (merged_arr[middle - 1] + merged_arr[middle]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes three arguments:\n    arr1: A list of integers.\n    arr2: A list of integers.\n    n: An integer representing the size of both lists.\n\n    This function returns a float representing the median of the two sorted lists.\n    \"\"\"\n\n    # concatenate the two sorted lists\n    arr = arr1 + arr2\n\n    # sort the concatenated list\n    arr.sort()\n\n    # calculate the median\n    if n % 2 == 0:\n        median = (arr[n // 2 - 1] + arr[n // 2]) / 2\n    else:\n        median = arr[n // 2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single sorted list\n    merged_list = sorted(arr1 + arr2)\n\n    # Calculate the length of the merged list\n    length = len(merged_list)\n\n    # If the length of the merged list is odd, the median is the middle element\n    if length % 2 == 1:\n        return merged_list[length // 2]\n\n    # If the length of the merged list is even, the median is the average of the two middle elements\n    else:\n        return (merged_list[length // 2 - 1] + merged_list[length // 2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    # Calculate the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        median = sorted_list[mid]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Sort both the arrays\n    arr1.sort()\n    arr2.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (arr1[n//2-1] + arr1[n//2] + arr2[n//2-1] + arr2[n//2]) / 4\n    else:\n        median = arr1[n//2]\n    \n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n    nums (list): A list of numbers.\n    n (int): The exponent to raise each number to.\n\n    Returns:\n    list: A list of n-th powers of each number in the input list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num, pow(num, n))"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = string.upper()\n    return upper_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to check if a given string contains only uppercase letters.\n    \"\"\"\n    return all(char.isupper() for char in string)"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    # Check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # Find the index of the first element\n        firstIndex = 0\n        for i in range(len(newList)):\n            if newList[i] == newList[0]:\n                firstIndex = i\n                break\n        # Find the index of the last element\n        lastIndex = len(newList) - 1\n        for i in range(len(newList) - 1, -1, -1):\n            if newList[i] == newList[lastIndex]:\n                lastIndex = i\n                break\n        # Swap the elements\n        newList[0], newList[lastIndex] = newList[lastIndex], newList[0]\n        return newList\n    else:\n        return \"The given list has less than two elements.\""
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the input list has at least 2 elements\n    if len(newList) < 2:\n        return newList\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the input list is empty\n    if not newList:\n        print(\"Error: The input list is empty.\")\n        return\n\n    # get the length of the list\n    length = len(newList)\n\n    # check if the length of the list is greater than 1\n    if length > 1:\n        # swap the first and last element of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n\n        # print the updated list\n        print(\"Updated list:\", newList)\n    else:\n        print(\"Error: The list should have at least 2 elements to swap.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return \"Error: List must have at least two elements.\"\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Check if the list is not empty\n    if len(newList) > 0:\n        # Check if the length of the list is greater than 1\n        if len(newList) > 1:\n            # Swap the first and last elements in the list\n            newList[0], newList[-1] = newList[-1], newList[0]\n        # If the length of the list is 1, then swap the only element\n        else:\n            newList[0], newList[0] = newList[0], newList[0]\n    # If the list is empty, return an empty list\n    else:\n        return []"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"The list must have at least two elements.\")\n        return\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Get the length of the list\n    length = len(newList)\n\n    # Check if the list has at least 2 elements\n    if length >= 2:\n\n        # Get the last and second last element of the list\n        last_element = newList[length - 1]\n        second_last_element = newList[length - 2]\n\n        # Interchange the last and second last element\n        newList[length - 1] = second_last_element\n        newList[length - 2] = last_element\n\n        # Print the updated list\n        print(\"Updated list:\", newList)\n\n    else:\n        print(\"List should have at least 2 elements to swap.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return \"List should have at least two elements\"\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # return the updated list\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the area of a right triangle with sides of length r and hypotenuse of r\n    area = r**2 / 4\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function finds the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the length of the longest side of the triangle\n    s = 2 * r * math.sin(math.pi/3)\n    # Calculate the length of the shortest side of the triangle\n    l = math.sqrt(3) * r * math.sin(math.pi/6)\n    # Calculate the area of the triangle\n    area = math.sqrt(s * (s-l) * (s-2*l))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # calculate the perimeter of the largest triangle that can be inscribed in a semicircle\n    perimeter = 2*r\n    \n    # calculate the area of the largest triangle that can be inscribed in a semicircle\n    area = perimeter*math.sqrt(3) / 4\n    \n    # calculate the area of the smallest triangle that can be inscribed in the semicircle\n    area_min = math.pi*r**2\n    \n    # return the maximum of the two areas\n    return max(area, area_min)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = math.sqrt(r**2 + 1) # calculating semi-circle side\n    area = math.sqrt(s*(s-r)) # calculating area of largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the semi-circle area using the formula A = \u03c0r\u00b2\n    area = math.pi * r ** 2\n    # Calculate the length of the semi-circle using the formula r = A / \u03c0\n    r = area / math.pi\n    \n    # Use Heron's formula to find the area of the largest possible triangle\n    s = (3 * r ** 2) / (4 * math.tan(math.pi / 3))\n    area = (s * (s - r) * (s + r)) ** 0.5\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Parameters:\n    r (float): the radius of the semicircle\n\n    Returns:\n    float: the area of the largest triangle that can be inscribed in the semicircle\n    \"\"\"\n\n    # convert radius to radians\n    r = r * (np.pi / 180.0)\n\n    # calculate semi-perimeter\n    s = 2 * r * np.tan(np.pi / 3)\n\n    # calculate area of the largest triangle\n    a = np.sqrt(3) * s ** 2\n\n    return a"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of a triangle with sides of length 2r\n    def triangle_area_helper(s):\n        return 0.5 * s * (s - r)\n\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    largest_area = triangle_area_helper(2 * r)\n\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    area = pi * r**2 / 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate semi-circle circumference using formula\n    c = 2 * 3.141592653589793 * r\n    \n    # find the area of a triangle using Heron's formula\n    s = (3 * r * r) / (4 * c)\n    area = (s * (s - r) * (s + r)) ** 0.5\n    \n    # return the area of the largest triangle that can be inscribed in the semicircle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n\n    # Calculate the semi-perimeter\n    semicircle_perimeter = 2 * math.pi * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (3 * semicircle_perimeter**2) / (4 * math.tan(math.pi / 3))\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if array is sorted\n    if len(array) > 1 and array[0] > array[1]:\n        # Sort the array if it is not sorted\n        array.sort()\n        # Initialize variables\n        missing = 1\n        count = 1\n        # Traverse the sorted array\n        for i in range(len(array)):\n            # Check if the current element is missing\n            if array[i] == missing:\n                # Increment the missing number and count\n                missing += 1\n                count += 1\n                # Check if the count reaches the length of the array\n                if count == len(array):\n                    # Return the missing number\n                    return missing\n            # Check if the current element is the last element of the array\n            elif array[i] == len(array):\n                # Increment the missing number and count\n                missing += 1\n                count += 1\n                # Check if the count reaches the length of the array\n                if count == len(array):\n                    # Return the missing number\n                    return missing\n    else:\n        # Return -1 if array is not sorted\n        return -1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of natural numbers and returns the smallest missing number in the array.\n\n    Args:\n        array (list of int): A sorted list of natural numbers.\n        start (int, optional): The start index of the array to be searched. Defaults to 0.\n        end (int, optional): The end index of the array to be searched. Defaults to None.\n\n    Returns:\n        int: The smallest missing number in the array.\n\n    Raises:\n        ValueError: If the array is not sorted or if the array contains duplicate values.\n    \"\"\"\n    if start < 0 or end > len(array) - 1 or start > end:\n        raise ValueError(\"Invalid start or end indices.\")\n\n    if len(array)!= len(set(array)):\n        raise ValueError(\"Array contains duplicate values.\")\n\n    if not array:\n        raise ValueError(\"Array is empty.\")\n\n    if not array[0] - 1 == -1:\n        raise ValueError(\"Array is not sorted.\")\n\n    # Initialize the smallest missing number and the flag to check if all numbers in the array are present\n    smallest_missing = None\n    flag = True\n\n    # Check if the start index is valid and if all numbers in the array are present\n    for i in range(start, end + 1):\n        if array[i] - 1!= i:\n            flag = False\n            smallest_missing = i\n\n    if smallest_missing is None and flag:\n        return 1\n    elif smallest_missing is None:\n        return None\n    else:\n        return smallest_missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if not end:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] == mid:\n            start = mid + 1\n        elif array[mid] > mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the first missing number in the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = max(array)\n    \n    for i in range(start,end+1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of natural numbers and returns the smallest missing number.\n    If the array is already sorted, the function will simply return the smallest missing number.\n    If the array is not sorted, the function will first sort the array using the merge sort algorithm.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    if start < end:\n        mid = (start + end) // 2\n\n        find_First_Missing(array, start, mid)\n        find_First_Missing(array, mid + 1, end)\n\n        merge(array, start, mid, end)\n\n    return find_missing_number(array, start, end)\n\n\ndef merge(array, start, mid, end):\n    \"\"\"\n    This function merges two sorted arrays into one.\n    \"\"\"\n\n    left = start\n    right = mid + 1\n    merged = array[start:end + 1]\n\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            merged[i + start] = left[i]\n            i += 1\n        else:\n            merged[i + start] = right[j]\n            j += 1\n\n    merged[i + start:end + 1] = left[i:]\n    merged[i + start:end + 1] += right[j:]\n\n\ndef find_missing_number(array, start, end):\n    \"\"\"\n    This function finds the smallest missing number in the given array.\n    \"\"\"\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end):\n        if array[i] == array[i+1]:\n            return i+1\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    If the list is already sorted, the function can be called with the sorted list as the input.\n    \"\"\"\n    # Check if the list is sorted or not\n    if start < end:\n        for i in range(start, end):\n            if array[i]!= i+1:\n                return i+1\n    else:\n        for i in range(len(array)):\n            if array[i]!= i+1:\n                return i+1\n    return max(array[-1], end)+1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    even_numbers = [] \n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even_numbers.append(list[i])\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a Python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # create an empty list to store the adjacent coordinates\n    adj = []\n    \n    # loop through the rows and columns of the given coordinate tuple\n    for i in range(3):\n        for j in range(3):\n            # if the element at the current position is not the same as the element at the adjacent position\n            if ele[0]!= sub[i][j]:\n                # add the adjacent coordinate to the list of adjacent coordinates\n                adj.append((sub[i][j], ele))\n    \n    # return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x-1, y)) # Extracting left adjacent coordinate\n    sub.append((x+1, y)) # Extracting right adjacent coordinate\n    sub.append((x, y-1)) # Extracting top adjacent coordinate\n    sub.append((x, y+1)) # Extracting bottom adjacent coordinate\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # Extracting the coordinates from the tuple\n    x, y = ele\n    \n    # List to store the adjacent coordinates\n    adj = []\n    \n    # Checking for all possible directions in the grid\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i!= 0 or j!= 0:\n                # Adding the adjacent coordinate to the list\n                adj.append((x + i, y + j))\n    \n    # Adding the current element to the list of adjacent elements\n    adj.append(ele)\n    \n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x-1 >= 0:\n        sub.append((x-1, y))\n    if x+1 < len(matrix):\n        sub.append((x+1, y))\n    if y-1 >= 0:\n        sub.append((x, y-1))\n    if y+1 < len(matrix[x]):\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1,y), (x-1,y), (x,y+1), (x,y-1)]\n    if sub:\n        adj.extend([(x+1,y+1), (x-1,y-1), (x-1,y+1), (x+1,y-1)])\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    x, y = ele\n    x1, y1 = (-1, 0), (1, 0)\n    x2, y2 = (0, -1), (0, 1)\n\n    adj = [\n        (x + x1[0] + x2[0], y + y1[1] + y2[1]),\n        (x + x1[0], y + y1[1]),\n        (x + x1[0] - x2[0], y + y1[1] - y2[1]),\n        (x + x2[0], y + y2[1]),\n        (x + x2[0] - x1[0], y + y2[1] - y1[1]),\n        (x + x1[0] - x2[0] - y2[1], y + y1[1] + y2[1]),\n        (x + x2[0] - x1[0] - y1[1], y + y2[1] + y1[1]),\n        (x + x1[0] + x2[0] - y2[1], y + y1[1] - y2[1])\n    ]\n\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Extracting the row and column values from the given coordinate tuple\n    row, col = ele\n\n    # Initializing a set to store the adjacent coordinates\n    adj = set()\n\n    # Checking the four adjacent cells of the current cell and appending them to the set if they are within the grid boundaries\n    if 0 <= row - 1 < len(grid) and 0 <= col - 1 < len(grid[0]) and (row - 1, col - 1) not in sub:\n        adj.add((row - 1, col - 1))\n    if 0 <= row - 1 < len(grid) and 0 <= col + 1 < len(grid[0]) and (row - 1, col + 1) not in sub:\n        adj.add((row - 1, col + 1))\n    if 0 <= row + 1 < len(grid) and 0 <= col - 1 < len(grid[0]) and (row + 1, col - 1) not in sub:\n        adj.add((row + 1, col - 1))\n    if 0 <= row + 1 < len(grid) and 0 <= col + 1 < len(grid[0]) and (row + 1, col + 1) not in sub:\n        adj.add((row + 1, col + 1))\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Convert the given coordinate tuple to a list\n    coord = list(ele)\n\n    # Initialize the list to store the adjacent coordinates\n    adj = []\n\n    # Check for up, down, left, and right adjacent coordinates\n    if (coord[0] > 0) and (coord[1] > 0):\n        adj.append((coord[0]-1, coord[1]-1))\n    if (coord[0] > 0) and (coord[1] < 6):\n        adj.append((coord[0]-1, coord[1]+1))\n    if (coord[0] < 6) and (coord[1] > 0):\n        adj.append((coord[0]+1, coord[1]-1))\n    if (coord[0] < 6) and (coord[1] < 6):\n        adj.append((coord[0]+1, coord[1]+1))\n\n    # Remove duplicates from the list of adjacent coordinates\n    adj = list(set(adj))\n\n    # Add the given coordinate tuple to the list of adjacent coordinates\n    adj.append(coord)\n\n    # Add the sublist to the list of adjacent coordinates\n    adj.extend(sub)\n\n    # Return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i!= 0 or j!= 0:\n                x, y = ele\n                new_x = x + i\n                new_y = y + j\n                if new_x >= 0 and new_x < 10 and new_y >= 0 and new_y < 10:\n                    if (new_x, new_y) not in adj:\n                        adj.append((new_x, new_y))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x < len(sub)-1:\n        sub.append((x+1, y))\n    if x > 0:\n        sub.append((x-1, y))\n    if y < len(sub[0])-1:\n        sub.append((x, y+1))\n    if y > 0:\n        sub.append((x, y-1))\n    return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # initializing variables\n    new_text = \"\"\n    \n    # loop through each character in the string\n    for char in text:\n        # if the character is a space\n        if char == \" \":\n            new_text += \"_\"\n        # if the character is not a space\n        else:\n            new_text += char\n    \n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Define a list of characters to replace with underscores\n    replace_list = [' ', '_']\n    \n    # Loop through each character in the string\n    for i in range(len(text)):\n        # If the character is whitespace, replace it with an underscore\n        if text[i] in replace_list:\n            text = text[:i] + '_' + text[i+1:]\n    \n    # Return the modified string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # initialize a variable to keep track of the position of the next underscore to be added\n    underscore_pos = 0\n    # loop over each character in the string\n    for i in range(len(text)):\n        # check if the current character is a space\n        if text[i] =='':\n            # if so, replace it with an underscore and increment the underscore position\n            text = text[:i] + '_' + text[i+1:]\n            underscore_pos += 1\n        # if the current character is an underscore, remove it and decrement the underscore position\n        elif text[i] == '_':\n            text = text[:i] + text[i+1:]\n            underscore_pos -= 1\n    # return the modified string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    space_regex = r'\\s'\n    underscore_regex = r'_'\n    text = re.sub(space_regex, underscore_regex, text)\n    text = re.sub(underscore_regex, space_regex, text)\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Create a copy of the input string so we can modify it without affecting the original\n    text_copy = text.copy()\n    # Loop through each character in the string\n    for i, char in enumerate(text_copy):\n        # If the character is a space, replace it with an underscore\n        if char =='':\n            text_copy[i] = '_'\n        # If the character is an underscore, replace it with a space\n        elif char == '_':\n            text_copy[i] =''\n    # Return the modified string\n    return ''.join(text_copy)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscores\n    text = text.replace(' ', '_')\n    # replace underscores with whitespaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers and moves all zeroes to the end of the list.\n    \"\"\"\n    # initialize two pointers, one for the current position and one for the previous position\n    current = 0\n    prev = -1\n    \n    # loop through the list\n    while current < len(num_list):\n        # if the current element is not zero, move the pointer one position to the right\n        if num_list[current]!= 0:\n            num_list[prev+1], num_list[current] = num_list[current], num_list[prev+1]\n            prev += 1\n        current += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n\n    # Loop through the list starting from the end and keep track of the index of the last non-zero element\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i]!= 0:\n            # Move the last non-zero element to its correct position in the list\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n            return num_list\n\n    # If the list is already sorted, then we don't need to do anything\n    if num_list[-1] == 0:\n        return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index = 0\n    while index < len(num_list):\n        if num_list[index]!= 0:\n            # shift all non-zero elements to the right\n            for i in range(index + 1, len(num_list)):\n                num_list[i - 1] = num_list[i]\n            break\n        index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            count += 1\n    if count > 0:\n        return \"Zeroes moved to the end: \" + str(count)\n    else:\n        return \"No zeroes found.\""
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize two pointers, one at the beginning and one at the end of the list\n    i = 0\n    j = len(num_list) - 1\n\n    # loop through the list, comparing the values at the two pointers\n    while i < j:\n        if num_list[i]!= 0 and num_list[j] == 0:\n            # swap the values at the pointers\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n        elif num_list[i] == 0:\n            i += 1\n        else:\n            j -= 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # iterate through the list backwards\n    for i in range(len(num_list)-1, -1, -1):\n        # if the current element is zero, move it to the end of the list\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            break\n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list to store non-zero numbers\n    new_list = []\n    # iterate over each number in the given list\n    for num in num_list:\n        # if the number is not zero, append it to the new list\n        if num!= 0:\n            new_list.append(num)\n    # append all zeroes to the end of the new list\n    new_list.extend([0] * num_list.count(0))\n    # return the new list\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    while count < len(num_list):\n        num_list[count] = 0\n        count += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of n integers and returns the sum of the xor of all pairs of integers.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    # Iterate over all pairs of integers in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the xor of the two numbers\n            xor_num = arr[i] ^ arr[j]\n            # Add the xor to the sum variable\n            sum += xor_num\n    # Return the sum of all xor pairs\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor = arr[i] ^ arr[j]\n            sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    This function takes a list of integers arr and its length n as input and returns the sum of the xor of all pairs of numbers in the list.\n    \"\"\"\n    # initialize a dictionary to store the xor of previous numbers\n    prev_xor = {0: 0}\n    # initialize a variable to store the sum of xor of all pairs of numbers\n    sum = 0\n    # iterate through all pairs of numbers in the list\n    for i in range(n):\n        # calculate the xor of the current number and the previous number\n        xor = arr[i] ^ prev_xor[arr[i - 1] if i > 0 else 0]\n        # update the dictionary with the new xor\n        prev_xor[arr[i]] = xor\n        # add the xor to the sum\n        sum += xor\n    # return the sum\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initialize the sum of xor and the xor of the first pair\n    xor_sum = arr[0] ^ arr[1]\n    xor_pair = arr[0] ^ arr[1]\n    \n    # loop through the list starting from the second pair\n    for i in range(2,n) :\n        # calculate the xor of the current pair and add it to the sum\n        xor_sum = xor_sum ^ arr[i]\n        \n        # calculate the xor of the current pair and the previous pair\n        xor_pair = xor_pair ^ arr[i]\n        \n        # add the xor of the current pair to the xor of the previous pair\n        xor_pair = xor_pair ^ arr[i]\n    \n    # return the xor sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # XOR operation for two numbers\n    def xor_two(a,b):\n        return a^b\n\n    # XOR operation for two pairs of numbers\n    def xor_pairs(arr,n):\n        xor_sum = 0\n        for i in range(n):\n            xor_sum = xor_two(xor_sum, arr[i])\n            xor_sum = xor_two(xor_sum, arr[i+n])\n        return xor_sum\n\n    # Calculate XOR sum of all pairs of numbers in the list\n    xor_sum = xor_pairs(arr, n)\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and the length of the list as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # Initialize a variable to store the sum of xor of all pairs\n    sum_xor = 0\n\n    # Loop through all possible pairs of numbers\n    for i in range(n):\n        for j in range(i+1,n):\n            # Calculate the xor of the numbers in the pair\n            xor = arr[i] ^ arr[j]\n            # Add the xor to the sum_xor variable\n            sum_xor += xor\n\n    # Return the sum of xor of all pairs of numbers\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes a list as an argument and sorts it using heap sort algorithm.\n    The idea behind heap sort is to build a binary heap out of the input list and then extract the\n    largest element from the heap repeatedly until the list is sorted.\n    The time complexity of this algorithm is O(n log n), which makes it very efficient for large lists.\n    '''\n    # Create a max-heap from the input list\n    heap = hq.nlargest(len(iterable), iterable)\n    \n    # Extract elements from the heap and store them in a new list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap using a max-heap\n    heap = [max(iterable[:i] + iterable[i:]) for i in range(len(iterable), -1, -1)]\n    # Extract the elements from the heap and add them to a new list in ascending order\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using heap sort algorithm.\n    \"\"\"\n    heap = [heapq.heappushpop(iterable, -value) for value in iterable]\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n\n    # create max heap from the list\n    hq.heapify(iterable)\n\n    # extract elements from the heap and append to result list\n    result = []\n    while iterable:\n        result.append(iterable[0])\n        iterable = iterable[1:]\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = [None] * len(iterable)\n    # Convert the iterable into a heap\n    for i, item in enumerate(iterable):\n        heapq.heappush(heap, item)\n    # Extract the elements from the heap and put them back in the original order\n    for i in range(len(iterable)):\n        heapq.heappush(iterable, heapq.heappop(heap))"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    heap = hq.heapify(iterable)\n\n    # Extract and return the sorted elements\n    return [hq.heappop(heap) for i in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n\n    Args:\n    iterable (iterable): an iterable object containing the elements to be sorted.\n\n    Returns:\n    list: a sorted list.\n    '''\n    # Create a max-heap from the given iterable\n    max_heap = [x for x in iterable]\n    hq.heapify(max_heap)\n\n    # Create a new list to store the sorted elements\n    sorted_list = []\n\n    # While there are elements in the max-heap, pop them and add them to the sorted_list\n    while max_heap:\n        sorted_list.append(hq.heappop(max_heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = list(iterable)\n    n = len(heap)\n    \n    # Build max heap\n    for i in range(n//2, -1, -1):\n        hq.heapify(heap, i, n)\n    \n    # Extract elements from heap in sorted order\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n        \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    for i in range(len(iterable)//2 - 1, -1, -1):\n        hq.heapify(heap)\n    for i in range(len(iterable) - 1, 0, -1):\n        hq.heappop(heap)\n        iterable[i] = heap[0]"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    \n    if profit > 0 and loss > 0:\n        return False\n    elif profit < 0 and loss < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit <= 0 and sale_amount > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == actual_cost:\n        return True\n    elif sale_amount > actual_cost:\n        return False\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss.\n    '''\n    if actual_cost >= sale_amount:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        print(\"The given amount has a profit but not no loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given amount has no profit and no loss\n\n    Parameters:\n    actual_cost (float): The actual cost of the sale\n    sale_amount (float): The amount of sale made\n\n    Returns:\n    bool: True if there is no profit and no loss, False otherwise\n    '''\n\n    if sale_amount == 0:\n        return True\n\n    return actual_cost >= sale_amount"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss.\n    \n    It returns True if the amount has no profit and no loss, and False otherwise.\n    \n    Parameters:\n    actual_cost (float): The actual cost of the items sold.\n    sale_amount (float): The amount of the items sold.\n    \n    Returns:\n    bool: True if the amount has no profit and no loss, and False otherwise.\n    '''\n    \n    profit = actual_cost - sale_amount\n    \n    if profit == 0 and sale_amount == 0:\n        return True\n    \n    return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        print(\"The given amount has a profit and a loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Parameters:\n    actual_cost (float): The actual cost of the sale\n    sale_amount (float): The amount of money you're trying to save\n\n    Returns:\n    (bool): True if the amount has no profit and no loss, False otherwise\n    \"\"\"\n    if actual_cost < sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    elif actual_cost == sale_amount:\n        return False\n    else:\n        return noprofit_noloss(sale_amount, sale_amount - actual_cost)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function takes in the wind speed in km/h and temperature in celsius as inputs and returns the wind chill index rounded to the next integer.\n    '''\n\n    # Convert temperature to Kelvin\n    k = t + 273.15\n\n    # Calculate the dew point temperature\n    dp = math.exp(17.67 * (k - 243.12) / (k - 29.65)) - 1\n\n    # Calculate the heat capacity at constant pressure\n    cp = 0.01 * (1 - math.exp(17.67 * (k - 243.12) / (k - 29.65)))\n\n    # Calculate the specific heat capacity at constant pressure\n    cps = 0.01 * (1 - math.exp(17.67 * (dp - 243.12) / (dp - 29.65)))\n\n    # Calculate the specific heat capacity at constant volume\n    cvs = 0.01 * (1 - math.exp(17.67 * (k - 243.12) / (dp - 29.65)))\n\n    # Calculate the enthalpy of the dry air\n    h_a = 100 * math.log(dp / 0.61)\n\n    # Calculate the entropy of the dry air\n    s_a = 100 * math.log(0.61 / dp)\n\n    # Calculate the specific enthalpy of water\n    h_w = 100 * math.log(0.78 + 0.0001 * (v / 0.5))\n\n    # Calculate the specific entropy of water\n    s_w = 100 * math.log(0.78 + 0.0001 * (v / 0.5))\n\n    # Calculate the heat capacity ratio\n    cw = cvs / cps\n\n    # Calculate the critical temperature\n    ct = dp + 0.006215 * v * (cp / cvs)\n\n    # Calculate the heat index\n    hi = ct + 0.004219 * (h_a - h_w)\n\n    # Calculate the wind chill index\n    wci = int(math.ceil(hi))\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to kelvin\n    t_k = (t + 273.15) * 1.8 + 32\n    \n    # calculate dewpoint temperature\n    dewpoint = (t_k - 0.0065 * v ** 0.16) / (17.67 * v)\n    \n    # calculate wind chill index\n    wci = 35.74 + 0.6215 * v - 35.75 * math.exp((17.67 * dewpoint) / (t_k - 32))\n    \n    # round wind chill index to the nearest integer\n    wci = round(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Calculate the wind chill index using the formula\n    # WC = 13.12 + 0.6215T - 11.37v^0.16 + 0.3965t^0.16\n    WC = 13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t**0.16\n    \n    # Round to the nearest integer\n    WC = math.ceil(WC)\n    \n    # Return the wind chill index\n    return WC"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the heat index\n    heat_index = 0.5 * (t + 273.15 + 0.0065 * v ** 0.16)\n\n    # Calculate the wind chill index\n    if t > 10:\n        wind_chill_index = (237.3 + 0.6215 * v + (0.4275 * t - 35.75) * (0.6215 * v + 11.37) - 0.1461 * t) / 3\n    else:\n        wind_chill_index = (237.3 + 0.6215 * v + (0.4275 * t - 35.75) * (0.6215 * v + 11.37)) / 3\n\n    # Round the wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n\n    # Return the wind chill index\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v > 10:\n        return round((35.74 + 0.6215*t - 35.75*math.log(t)+0.4275*v - 44.7*math.log(v))/1.852)\n    else:\n        return round((237.3 + 0.18*t + 35.75*math.log(t)-0.3*v + 0.07*t - 0.07*v + 459.67*math.log(v)+2.467*t*v)/1.852)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    k = t + 273.15\n    \n    # Calculate the wind chill index\n    if v >= 10:\n        wc = 13.12 + 0.6215 * k - 11.37 * math.log(k) + 0.3965 * v\n    else:\n        wc = 13.12 + 0.6215 * k - 11.37 * math.log(k)\n    \n    # Round the wind chill index to the nearest integer\n    wc = int(round(wc))\n    \n    # Return the wind chill index\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert temperature to fahrenheit\n    t_f = (t * 9/5) + 32\n\n    # Calculate the wind chill index\n    wci = round((t_f - 32) * (5/9) * (v * 1.15))\n\n    # Check if the wind chill index is negative or greater than 100\n    if wci < 0 or wci > 100:\n        return None\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from Celsius to Kelvin\n    k = t + 273.15\n    # Calculate the dew point temperature\n    dp = (0.622 * k) / (v + 0.378 * math.log(v))\n    # Calculate the wind chill index\n    wc = 13.12 + 0.6215 * v - 11.37 * math.exp((17.625 * dp) / (dp + 243.5))\n    # Round the wind chill index to the nearest integer\n    wind_chill_index = math.ceil(wc)\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Calculate the temperature in Fahrenheit\n    t = (t*1.8)+32\n    \n    #Calculate the wind chill index using the formula\n    wc = (35.74 + (0.6215*v) - (35.75*t)+(-0.0015*v*t))\n    wc = math.floor(wc)\n    \n    #Return the wind chill index\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer.\n    \n    Parameters:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n    \n    Returns:\n    int: Wind chill index rounded to the next integer.\n    \"\"\"\n    if v > 10:\n        # Wind speed above 10 m/s\n        w = v * 0.14\n        f = 13.12 + 0.6215 * t - 11.37 * math.pow(t, 2) + 0.3965 * math.pow(t, 3)\n        if w < f:\n            return round(w / f)\n        else:\n            return round(f / w)\n    else:\n        # Wind speed below 10 m/s\n        w = v * 0.14\n        f = 13.12 + 0.6215 * t - 13.37 * math.pow(t, 2) + 0.4687 * math.pow(t, 3)\n        if w < f:\n            return round(w / f)\n        else:\n            return round(f / w)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_len = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_len += len(name)\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            valid_names.append(name)\n    return sum(len(name) for name in valid_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum variable\n    sum_length = 0\n\n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip the name\n            continue\n        # Otherwise, add the length of the name to the sum\n        sum_length += len(name)\n\n    # Return the sum of the length of the names\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum to 0\n    sum_length = 0\n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip it and continue to the next name\n            continue\n        # if the name does not start with a lowercase letter, add its length to the sum\n        sum_length += len(name)\n    # return the total length of the names\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of the names\n    total_length = 0\n\n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it and move on to the next name\n            continue\n        # Otherwise, add the length of the name to the total length\n        total_length += len(name)\n\n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Iterate over each name in the list\n    total_length = 0\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it\n            continue\n        # Otherwise, add the length of the name to the total\n        total_length += len(name)\n\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string and removes the parenthesis and what's between them.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expression to match the pattern of parenthesis with content inside\n    pattern = re.compile(r'(\\([^)]+\\))')\n\n    # Use the sub() method to replace the matched pattern with an empty string\n    items = pattern.sub('', items)\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\(.*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove the parenthesis using regular expressions\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # remove any space before and after the text\n    items = items.strip()\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define regular expression pattern to match all parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    \n    # Use findall() method to find all occurrences of parenthesis in the string\n    matches = pattern.findall(items)\n    \n    # Loop through all matches and replace the parenthesis with an empty string\n    for match in matches:\n        items = items.replace(match, '')\n    \n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)') # pattern to match parenthesis\n    items = re.sub(pattern, '', items) # remove parenthesis from the string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Remove the parenthesis and what is inbetween them from a string.\n\n    Args:\n        items (str): The string to remove parenthesis from.\n\n    Returns:\n        str: The string with parenthesis removed.\n    \"\"\"\n    # Define the pattern to match parenthesis\n    pattern = r'\\([^()]+\\)'\n\n    # Replace parenthesis with an empty string\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^()]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize the first nonagonal number to 1\n    first_nonagonal = 1\n\n    # Initialize a variable to keep track of the count\n    count = 1\n\n    # Iterate through the count until we reach the nth nonagonal number\n    while count < n:\n        # Increment the first nonagonal number and increment the count by 1\n        first_nonagonal += 1\n        count += 1\n\n    # Return the first nonagonal number\n    return first_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)\n\nprint(is_nonagonal(10)) # Output: 55\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return (n * (n + 1)) // 2\n\nprint(is_nonagonal(5)) # Output: 33"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    This function takes an integer n as input and returns the nth nonagonal number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Please enter a positive integer.\"\n    # Initialize the first nonagonal number\n    num = 1\n    # Loop through the first n-1 nonagonal numbers\n    for i in range(2, n):\n        # Compute the sum of the first i numbers\n        sum = 0\n        for j in range(1, i+1):\n            sum += j\n        # Add the sum to the current nonagonal number\n        num += sum\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    \n    if n == 1:\n        return 1\n    \n    result = 1\n    for i in range(1, n):\n        result += i\n    \n    return result - n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(1, n+1): \n        a = i*(i+1)//2 \n        b = n*(n+1)//2 \n        if a >= b: \n            return a "
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    i = 1\n    j = 1\n    while i <= n: \n        j = 1\n        while j <= n - i: \n            print(\"*\", end=\"\")\n            j += 1\n        print()\n        i += 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return is_nonagonal(n-1) + 2*is_nonagonal(n-2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    This function finds the nth nonagonal number.\n    '''\n    def nonagonal_number(x, y):\n        return x * x + y * y\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    a = 1\n    b = 2\n    \n    while a <= n:\n        if a % 2 == 1 and is_prime(a):\n            b += 1\n        a += 1\n        \n    while b <= n:\n        if b % 2 == 1 and is_prime(b):\n            a += 1\n        b += 1\n        \n    return a - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Base case: if n = 0 or 1, then the nonagonal number is 1\n    if n <= 1:\n        return 1\n    # Calculate the value of the n-th nonagonal number\n    nonagonal = 1\n    for i in range(1, n+1):\n        nonagonal += (2*i - 1) * (2*i - 3) // (2*i - 2)\n    return nonagonal"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?<!z)(z)(?!\\w)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?![a-zA-Z])z(?!\\w)\\b'\n    match = re.search(pattern, text)\n    return bool(match)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define regular expression pattern to match words that end with 'z' and are not at the start of the string\n    pattern = r'(?<=\\b)z(?=\\W+\\b)'\n    # Use re.findall() method to find all the matches in the text\n    matches = re.findall(pattern, text)\n    # Check if there are any matches found\n    if matches:\n        # Print the matches\n        print('Matches found:')\n        for match in matches:\n            print(match)\n    else:\n        # Print a message if no matches found\n        print('No matches found.')"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern for matching 'z' at the start and end of a word\n    pattern = r'\\b(z)\\w+\\b'\n\n    # Search the text for the pattern and return True if found\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n\n    for match in matches:\n        if match[0] == 'z':\n            continue\n        elif match[-1] == 'z':\n            continue\n        else:\n            print(match)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define a regular expression to match the middle word of a string\n    middle_word_regex = r'(\\b.*?\\b\\w*z\\w*?)\\b'\n\n    # Search the string for the middle word that contains 'z'\n    middle_word = re.search(middle_word_regex, text)\n\n    # Check if the middle word exists and contains 'z'\n    if middle_word and 'z' in middle_word.group(1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # define the pattern for 'z' except at the start and end of a word\n    pattern = re.compile(r'(?<![a-zA-Z])[zZ](?![a-zA-Z])')\n\n    # check if the pattern matches any part of the text\n    match = pattern.search(text)\n\n    # if a match was found, return True\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    words = re.findall(r'\\b\\w+\\b', text)\n    for word in words:\n        if 'z' not in word[0:2] and 'z' not in word[-2:]:\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'[a-zA-Z]*z[a-zA-Z]*')\n    return pattern.search(text)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the array from the first element to k-1\n    input[0:k] = input[0:k][::-1]\n\n    # Reverse the array from k to the last element\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    if k > len(input):\n        return \"Invalid input\"\n    \n    # reverse the first k elements\n    input[:k] = input[:k][::-1]\n    \n    # reverse the remaining elements\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # reverse the array\n    input.reverse()\n\n    # reverse the array upto the kth position\n    input[:k] = input[:k][::-1] + input[k:]\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, len(input)-1):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k, len(input)):\n        input[i], input[k] = input[k], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_len = len(input)\n    # If the position is greater than the length of the array, return the original array.\n    if k > input_len:\n        return input\n    \n    # Create a new list to store the reversed array.\n    reversed_array = []\n    # Initialize two pointers, one at the starting position and one at the end position.\n    start_ptr = 0\n    end_ptr = input_len - 1\n    \n    # Traverse the array from the starting position to the k-1th position.\n    while start_ptr < k:\n        # Append the value at the start pointer to the reversed array.\n        reversed_array.append(input[start_ptr])\n        # Move the start pointer one position to the right.\n        start_ptr += 1\n    \n    # Traverse the array from the k-1th position to the end position.\n    while start_ptr <= end_ptr:\n        # Append the value at the current pointer to the reversed array.\n        reversed_array.append(input[start_ptr])\n        # Move the start pointer one position to the right and the end pointer one position to the left.\n        start_ptr += 1\n        end_ptr -= 1\n    \n    # Return the reversed array.\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # check if input is valid\n    if input is None:\n        return None\n    \n    # find the first position to reverse\n    first_pos = 0\n    while first_pos < k and input[first_pos] == 0:\n        first_pos += 1\n    \n    # reverse the array upto the given position\n    for i in range(first_pos, len(input)-first_pos):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    # reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    # reverse the array from k to n-1\n    for i in range(k, n//2):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    # reverse the array from n-1 to n\n    for i in range(n//2, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 0 or k >= len(input):\n        return \"Invalid input\"\n\n    start = 0\n    end = k - 1\n\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function reverses the array upto the given position k in the given array.\n    '''\n\n    # Convert the input array to a list\n    input_list = list(input)\n\n    # Reverse the first k elements of the list\n    input_list[:k] = input_list[:k][::-1]\n\n    # Reverse the remaining elements of the list\n    input_list[k:] = input_list[k:][::-1]\n\n    # Convert the list back to an array and return it\n    return array(input_list)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = test_tup + (test_dict,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup_new = test_tup + (test_dict,)\n    return test_tup_new"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup = (key, value) + test_tup\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {}\n    for key, value in test_dict.items():\n        new_dict[key] = value\n    return (test_tup, new_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return tuple(test_tup.items() + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Combine the tuple and the dictionary using the update() method\n    new_tuple = test_tup.copy()\n    new_tuple.update(test_dict)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # convert the tuple to a dictionary\n    test_dict = dict(test_tup)\n    # add the dictionary to the tuple\n    test_dict.update(test_dict)\n    # convert the dictionary back to a tuple\n    new_tup = tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # loop through each key in the dictionary\n    for key in test_dict:\n        # check if the key already exists in the tuple\n        if key in test_tup:\n            # if the key exists, append the value to the existing dictionary\n            test_dict[key].append(test_tup[key])\n        # if the key does not exist, append the value to a new dictionary\n        else:\n            test_dict[key] = [test_tup[key]]\n    # convert the dictionary to a tuple\n    new_tup = tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Get the size of the matrix\n    N = len(cost)\n\n    # Initialize variables for the maximum average and the current average\n    max_avg = 0\n    current_avg = 0\n\n    # Initialize variables for the indices of the start and end cells\n    start_i = 0\n    start_j = 0\n    end_i = N - 1\n    end_j = N - 1\n\n    # Initialize variables for the directions of the move\n    directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n\n    # Create a queue to keep track of the cells in the path\n    path = [(start_i, start_j)]\n\n    # Loop through all possible paths\n    while start_i!= end_i or start_j!= end_j:\n\n        # Calculate the cost of the next cell\n        next_cost = cost[start_i][start_j]\n\n        # Calculate the total cost of the path\n        path_cost = current_avg + next_cost\n\n        # Check if the total cost is greater than the current maximum average\n        if path_cost > max_avg:\n            max_avg = path_cost\n\n        # Add the next cell to the path and update the variables for the start and end cells\n        path.append((start_i + directions[path.index((start_i + directions[path.index((start_i, start_j))][0], start_j + directions[path.index((start_i, start_j))][1]))][0],\n                    start_j + directions[path.index((start_i + directions[path.index((start_i, start_j))][0], start_j + directions[path.index((start_i, start_j))][1]))][1]))\n        start_i = path[-1][0]\n        start_j = path[-1][1]\n        current_avg += next_cost\n\n    # Return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n\n    for gap in range(1, N):\n        for i in range(N - gap):\n            j = i + gap\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) + cost[i][j]\n\n    return max(dp[0][N - 1], dp[N - 1][0]) / (N * N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Function to find the maximum average of a path\n    def findMaxAverage(matrix, row, col, curr_path):\n        if row == len(matrix) - 1 and col == len(matrix[0]) - 1:\n            # Base case: End of the matrix is reached\n            total_cost = 0\n            for cell in curr_path:\n                total_cost += matrix[row][cell]\n            return total_cost / len(curr_path)\n        # Recursively traverse down and right\n        if row < len(matrix) - 1:\n            max_avg = findMaxAverage(matrix, row + 1, col, curr_path)\n            if max_avg > max_avg_down:\n                max_avg_down = max_avg\n        if col < len(matrix[0]) - 1:\n            max_avg = findMaxAverage(matrix, row, col + 1, curr_path)\n            if max_avg > max_avg_right:\n                max_avg_right = max_avg\n        # Return the maximum average of all paths\n        return max(max_avg_down, max_avg_right)\n\n    # Initialize variables\n    max_avg_down = 0\n    max_avg_right = 0\n\n    # Traverse the matrix to find the maximum average of all paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            max_avg_down = max(max_avg_down, findMaxAverage(cost, i, j, [j]))\n            max_avg_right = max(max_avg_right, findMaxAverage(cost, i, j, [i]))\n\n    # Return the maximum average of all paths\n    return max(max_avg_down, max_avg_right)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize the maximum average and visited cells for each path\n    max_avg = 0\n    visited_cells = [[0, 0]]\n\n    # Loop through all possible paths starting from the top-left cell\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # Check if the cell is already visited and if the path is not a corner path\n            if (i > 0 and j > 0) or (i < len(cost) - 1 and j < len(cost[0]) - 1):\n                continue\n\n            # Compute the cost of visiting the current cell\n            curr_cost = cost[i][j]\n\n            # If this is the first cell visited, set the initial cost as the total cost\n            if not visited_cells:\n                curr_cost = sum(cost[i][j] for i in range(len(cost)) for j in range(len(cost[i])))\n\n            # Loop through all possible paths starting from the current cell\n            for path in generate_paths(cost, visited_cells, curr_cost, i, j):\n                # If the path has a greater average, update the maximum average and visited cells\n                if path[0] > max_avg:\n                    max_avg = path[0]\n                    visited_cells = path[1]\n\n    # Return the maximum average and visited cells for the final path\n    return max_avg, visited_cells\n\n\ndef generate_paths(cost, visited_cells, curr_cost, i, j):\n    '''\n    Helper function to generate all possible paths starting from the current cell.\n    '''\n\n    # If we have reached the bottom right cell, we have found a valid path\n    if i == len(cost) - 1 and j == len(cost[0]) - 1:\n        return [(curr_cost + visited_cells[0][0] + visited_cells[-1][0]) / (len(visited_cells) + 1), visited_cells]\n\n    # If we have reached the bottom right cell but the previous path was not successful, we cannot continue\n    if i == len(cost) - 1 and j!= len(cost[0]) - 1:\n        return []\n\n    # If we have reached the bottom right cell and the previous path was successful, we can continue\n    if i!= len(cost) - 1 and j == len(cost[0]) - 1:\n        return []\n\n    # Generate all possible paths starting from the current cell\n    paths = []\n    if i > 0 and (j, i - 1) not in visited_cells:\n        paths += generate_paths(cost, visited_cells, curr_cost + cost[i][j], i - 1, j)\n    if i < len(cost) - 1 and (j, i + 1) not in visited_cells:\n        paths += generate_paths(cost, visited_cells, curr_cost + cost[i][j], i + 1, j)\n    if j > 0 and (i, j - 1) not in visited_cells:\n        paths += generate_paths(cost, visited_cells, curr_cost + cost[i][j], i, j - 1)\n    if j < len(cost[0]) - 1 and (i, j + 1) not in visited_cells:\n        paths += generate_paths(cost, visited_cells, curr_cost + cost[i][j], i, j + 1)\n\n    return paths"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # initialize variables for the maximum average and the total number of cells visited\n    max_avg = 0\n    total_cells = 0\n    \n    # loop through the entire matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            \n            # check if the current cell is in a valid position\n            if i == 0 and j == 0:\n                continue\n            \n            # compute the average of the current cell and the cell above and to the left\n            if i > 0:\n                avg_above = cost[i-1][j]\n            else:\n                avg_above = float('-inf')\n            if j > 0:\n                avg_left = cost[i][j-1]\n            else:\n                avg_left = float('-inf')\n            current_avg = (cost[i][j] + avg_above + avg_left) / 3\n            \n            # update the maximum average and total number of cells visited\n            if current_avg > max_avg:\n                max_avg = current_avg\n                total_cells = 1\n            elif current_avg == max_avg:\n                total_cells += 1\n    \n    # return the maximum average\n    return max_avg / total_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def findMaxAverage(matrix, i, j):\n        if i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n            return matrix[i][j]\n        \n        if i == len(matrix) - 1:\n            return maxAverageOfPath(matrix, i, j + 1)\n        \n        if j == len(matrix[0]) - 1:\n            return maxAverageOfPath(matrix, i + 1, j)\n        \n        return max(findMaxAverage(matrix, i, j + 1) + matrix[i][j], findMaxAverage(matrix, i + 1, j) + matrix[i][j])\n    \n    return findMaxAverage(cost, 0, 0)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 or j == 0:\n                if i == 0 and j == 0:\n                    max_avg = max(max_avg, cost[i][j])\n                else:\n                    max_avg = max(max_avg, cost[i][j] + min(cost[i-1][j], cost[i][j-1]))\n            else:\n                max_avg = max(max_avg, cost[i][j] + min(cost[i-1][j], cost[i][j-1]))\n                \n    return max_avg/N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    visited = [[False for j in range(N)] for i in range(N)]\n    max_avg = float('-inf')\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    start = (0, 0)\n\n    def dfs(node):\n        visited[node[0]][node[1]] = True\n        total_cost = sum(cost[node[0]][node[1]][i] * (1 if not visited[node[0] + directions[i][0]][node[1] + directions[i][1]] else 0) for i in range(4))\n        current_avg = total_cost / (1 if not visited[node[0] + directions[node[1]][0]][node[1] + directions[node[1]][1]] else 0)\n\n        if current_avg > max_avg:\n            max_avg = current_avg\n\n        for neighbor in [(node[0] + directions[i][0], node[1] + directions[i][1]) for i in range(4) if not visited[node[0] + directions[i][0]][node[1] + directions[i][1]]]:\n            dfs(neighbor)\n\n    dfs(start)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n\n    # initialize first row and first column\n    for i in range(N):\n        if i == 0:\n            dp[0][0] = cost[0][0]\n        elif i == N-1:\n            dp[i][N-1] = cost[i][N-1]\n        else:\n            dp[i][0] = dp[i-1][0] + cost[i][0]\n            dp[i][N-1] = dp[i-1][N-1] + cost[i][N-1]\n\n    # fill in remaining cells\n    for i in range(1, N-1):\n        for j in range(1, N-1):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # find maximum average of all paths\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 or i == N-1 or j == 0 or j == N-1:\n                max_avg = max(max_avg, dp[i][j])\n            else:\n                max_avg = max(max_avg, dp[i][j]/4)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for i in range(N)]\n    max_avg = 0\n    \n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    \n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n    \n    return max_avg/N**2"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Filter out students with height and weight below the minimum\n    filtered_students = {name: value for name, value in students.items() if value[0] > h and value[1] > w}\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    # Loop through all the students in the dictionary\n    for name, data in students.items():\n        # Extract the student height and weight\n        height, weight = data\n        # Check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # If both conditions are true, print the student name and height and weight\n            print(f\"{name}, Height: {height}, Weight: {weight}\")"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Loop through the students dictionary and filter the students who have height and weight above the minimum\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name: value for name, value in students.items() if value[0] > h and value[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # initialize an empty list to store the filtered students\n    filtered_students = []\n    \n    # loop through each student\n    for name, data in students.items():\n        # unpack the tuple\n        height, weight = data\n        \n        # check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # if yes, add the student to the list of filtered students\n            filtered_students.append(name)\n    \n    # return the list of filtered students\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            result[name] = values\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length.\n    This function returns a list of indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    indices = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n            indices.append(i)\n    return indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # initialize a dictionary to store the counts of each element in nums1 and nums2\n    count_dict = {}\n    for i in range(len(nums1)):\n        if nums1[i] in count_dict:\n            count_dict[nums1[i]] += 1\n        else:\n            count_dict[nums1[i]] = 1\n    # loop through nums2 and check if the element is present in the dictionary and count the number of occurrences\n    same_count = 0\n    for i in range(len(nums2)):\n        if nums2[i] in count_dict:\n            if count_dict[nums2[i]] > 0:\n                count_dict[nums2[i]] -= 1\n                same_count += 1\n    return same_count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string to work with individual digits\n    base_str = str(base)\n    \n    # Initialize the sum of all digits to 0\n    total_sum = 0\n    \n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer to work with its value\n        digit_int = int(digit)\n        \n        # Calculate the sum of the digit raised to the power\n        digit_sum = digit_int ** power\n        \n        # Add the sum of the digit raised to the power to the total sum\n        total_sum += digit_sum\n    \n    # Return the total sum of all digits raised to the power\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Calculate the sum of digits of base to the specified power\n    result = 0\n    while power > 0:\n        result += base % 10\n        base //= 10\n        power -= 1\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to string to iterate over each digit\n    base_str = str(base)\n    # Initialize sum to zero\n    total = 0\n    # Iterate over each digit in the string\n    for digit in base_str:\n        # Calculate the power of the digit to the specified power\n        digit_power = pow(int(digit), power)\n        # Add the result to the total\n        total += digit_power\n    # Return the total\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += int(base[-1]) * base ** i\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize a variable to store the sum of digits\n    power_sum = 0\n    # iterate through each digit of the base string and add it to the power_sum variable\n    for digit in base_str:\n        power_sum += int(digit) ** power\n    # return the power_sum\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to string\n    base_str = str(base)\n    \n    # initialize sum to 0\n    sum_of_digits = 0\n    \n    # loop through each digit of the base string and add it to the sum_of_digits\n    for digit in base_str:\n        sum_of_digits += int(digit)\n        \n    # calculate the sum of digits to the power of the power argument\n    power_sum = sum_of_digits ** power\n    \n    # return the power_sum\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 0\n    \n    base_sum = 0\n    base_str = str(base)\n    for digit in base_str:\n        base_sum += int(digit)\n    \n    if power % 2 == 0:\n        return base_sum\n    else:\n        return base_sum + (power - 1)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        base_sum += base % 10\n        base = base // 10\n        power -= 1\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        total += base % 10\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the sum to 0\n    sum_digits = 0\n    # convert the base to a string and iterate over its digits\n    for digit in str(base):\n        # convert the digit to an integer and add it to the sum\n        sum_digits += int(digit)\n    # calculate the result by raising the sum to the power and summing all the terms\n    result = sum([x**power for x in range(1, 10)])\n    # add the result to the sum of digits and return it\n    return sum_digits + result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"[^\"]*\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.+?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # define a regular expression pattern to match the opening quotation mark\n    pattern = r'(?<!\\\\)\"'\n    # use the re.findall() function to extract all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # initialize an empty list to store the extracted values\n    extracted_values = []\n    # loop through the matches and append each match to the extracted_values list\n    for match in matches:\n        extracted_values.append(match[1:-1])\n    # return the extracted values as a string\n    return ', '.join(extracted_values)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # using regular expression to find all the values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n\n    # looping through all the matches and extracting the values\n    values = []\n    for match in matches:\n        values.append(match.strip('\"'))\n\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expressions to match and extract the values between quotation marks\n    pattern = r'\"([^\"]+)\"'\n    match = re.search(pattern, text1)\n    if match:\n        value = match.group(1)\n        return value\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(?:[^\"\\\\]|\\\\.)*\"' # matches a single or double quoted string of non-escaped characters\n    matches = re.findall(pattern, text1) # finds all non-overlapping matches of the pattern in the string\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define the regular expression pattern to find the values between quotation marks\n    pattern = r'\"(.*?)\"'\n\n    # Find all the matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n\n    # Return a list of all the extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x * y for x, y in zip(test_tup, test_tup[1:])])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # create a tuple of length N where the i-th element is the product of the i-th and (i+1)-th elements of the input tuple\n    prod_tup = tuple(t_i*t_i+t_i*(t_i+1) for t_i in test_tup)\n    return prod_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes a tuple of numbers (t_1,...,t_{N+1}) as input and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i*j for i,j in zip(test_tup[:-1], test_tup[1:]))"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    multiplied_tup = ()\n    for i in range(N):\n        if i < N - 1:\n            tup = (test_tup[i], test_tup[i+1])\n            multiplied_tup += (tup[0] * tup[1],)\n        else:\n            tup = (test_tup[i],)\n            multiplied_tup += (tup[0] * test_tup[-1],)\n    return multiplied_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    new_tup = []\n    for i in range(len(test_tup)-1):\n        new_tup.append(test_tup[i]*test_tup[i+1])\n    new_tup.append(test_tup[-1])\n    return new_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # check if both lists have the same length\n    if len(lst1)!= len(lst2):\n        print(\"Lists should have the same length!\")\n        return None\n    \n    # create a new list of length n and sum the corresponding elements of lst1 and lst2\n    result = [lst1[i]+lst2[i] for i in range(len(lst1))]\n    \n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Lists must have the same length\")\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num in seen:\n            continue\n        seen.add(num)\n        result.append(num)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        if key == nums[0]:\n            result.append(group[0])\n        else:\n            for i in range(1, len(group)):\n                if group[i] == group[i-1]:\n                    continue\n                else:\n                    result.append(group[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(enumerate(nums), lambda x: x[1] == x[0] + 1):\n        yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(nums)\n    i = 0\n    j = 1\n    while j < len(nums):\n        if nums[j] == nums[j-1]:\n            while j < len(nums) and nums[j] == nums[j-1]:\n                j += 1\n        else:\n            i = j\n        j += 1\n    return nums[i+1:]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key == len(list(group)) - 1:\n            yield from group\n        else:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [num for num, group in groupby(enumerate(nums), lambda x: x[0] - x[1])]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create a group iterator from the given list\n    grouped = groupby(sorted(nums))\n    # initialize a set to store unique elements\n    unique_elements = set()\n    # loop through each group of consecutive duplicates\n    for group in grouped:\n        # get the first and last elements of the group\n        first, *rest = group\n        # check if the first element is not in the unique elements set\n        if first not in unique_elements:\n            # add the first element to the unique elements set\n            unique_elements.add(first)\n            # add the rest of the elements of the group to the unique elements set\n            for elem in rest:\n                unique_elements.add(elem)\n    # create a new list with only the unique elements from the original list\n    result = list(unique_elements)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [num for num, group in groupby(nums) if not group]"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the area of the cone using Heron's formula\n    s = 2 * r * h\n    # Calculate the lateral surface area of the cone using the formula 1/2 * r^2 * h^2\n    A = 0.5 * r**2 * h**2\n    # Return the lateral surface area of the cone\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n    '''\n\n    # Using the formula for the lateral surface area of a cone\n    lateral_surface_area = math.pi * r**2 * h\n\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Find the lateral surface area of a cone using the formula\n    LSA = math.pi * r**2 * h / 3\n    return LSA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n    '''\n    return math.pi*r**2*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi*(r**2) + math.pi*r*h + math.pi*h**2\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*h/3\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (math.pi * r * r) + (math.pi * r * h)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (3*math.pi*r**2)/4\n    surface_area = math.pi*r**2*h\n    return surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi * r ** 2\n    h = h / 2\n    return A * h"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,\\.]')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match all occurrences of spaces, commas, or dots\n    pattern = r\"[\\s.,]\"\n    \n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(pattern, \":\", text)\n    \n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern for spaces, commas, or dots\n    pattern = r'([,.])'\n    # Replace all occurrences of pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match all occurrences of spaces, commas, or dots\n    pattern = r'[,.]'\n    # Use the `sub()` method to replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,\\.]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace all spaces, commas, and dots with a colon\n    text = re.sub(r'[\\s,\\.]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'[\\s,\\.]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the regex pattern to match the special characters\n    pattern = re.compile(r'[^\\w\\s]|_')\n    \n    # replace the special characters with a colon\n    text = pattern.sub(':', text)\n    \n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[., ]'\n    text = re.sub(pattern, ':', text)\n    return text\n\ntext = input(\"Enter a string: \")\nresult = replace_specialchar(text)\nprint(\"Result:\", result)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'([.,;:])', r':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the index of x in A using binary search\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i == len(A):\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0  # Initialize index of first occurrence to 0\n    while i < len(A) and A[i]!= x:  # While index is within range and first element is not equal to x\n        i += 1  # Increment index\n    return i  # Return the index of the first occurrence of x\n"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        A: sorted list of integers\n        x: integer to find the first occurrence of\n\n    Returns:\n        index of the first occurrence of x in A, or -1 if x is not in A\n    \"\"\"\n\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize a counter variable to keep track of the index of the first occurrence of x\n    first_occurrence = -1\n    # Iterate through the array A\n    for i in range(len(A)):\n        # If x is equal to the current element in A, update the first_occurrence counter and break out of the loop\n        if A[i] == x:\n            first_occurrence = i\n            break\n    # Return the first_occurrence index\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array and a number x as input and returns the index of the first occurrence of x in the array.\n    If x is not found in the array, it returns -1.\n    \"\"\"\n    # Find the index of the leftmost occurrence of x\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # Check if the number to the left of the mid index is equal to x\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If x is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i == len(A):\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize variables\n    first_occurrence_index = -1\n    \n    # Iterate over the array from the beginning to the end\n    for i in range(len(A)):\n        # If the current element is equal to the given number, set the first_occurrence_index to the current index\n        if A[i] == x:\n            first_occurrence_index = i\n            break\n    \n    return first_occurrence_index"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n    sub_sum = 0\n    ans = 0\n\n    for i in range(n):\n        if i == 0:\n            sub_sum = arr[i]\n        elif i == n-1:\n            sub_sum = arr[i] + sub_sum\n        else:\n            sub_sum = arr[i] + arr[i-1] + sub_sum\n\n        prod *= sub_sum\n\n    return prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    \n    # Initialize the first element of the array\n    dp[0] = arr[0]\n    \n    # Initialize the first two elements of the array\n    dp[1] = arr[0] * arr[1]\n    dp[2] = arr[0] * arr[1] * arr[2]\n    \n    # Fill in the rest of the array using dynamic programming\n    for i in range(3, n+1):\n        dp[i] = dp[i-1] + arr[i-1] * dp[i-2]\n    \n    # Return the sum of all products in the array\n    return sum(dp[i] for i in range(1, n+1))"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Initialize variables\n    n = len(arr)\n    prod_sum = 0\n    prod = 1\n    \n    # Compute the product of each subarray\n    for i in range(n):\n        prod *= arr[i]\n        prod_sum += prod\n        \n    # Initialize the result array\n    result = []\n    \n    # Compute the sum of products of all possible sublists\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            prod = 1\n            for k in range(j, j+i):\n                prod *= arr[k]\n            result.append(prod_sum - prod)\n            \n    # Return the sum of products of all subarrays\n    return sum(result)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    # Initialize variables\n    subarray_sum = [0]*n\n    subarray_prod = [0]*n\n    prefix_sum = [0]*n\n\n    # Calculate the prefix sum and the sum of products of all possible subarrays\n    for i in range(n):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i]\n        subarray_prod[i] = arr[i] * prefix_sum[i]\n        subarray_sum[i] = subarray_sum[i-1] + arr[i] * arr[i]\n\n    # Calculate the sum of products of all possible sublists\n    sum_of_sublists_prod = 0\n    for i in range(n):\n        for j in range(i, n):\n            sum_of_sublists_prod += subarray_prod[j] - subarray_prod[i-1] * subarray_prod[j]\n\n    return sum_of_sublists_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    # Initialize a 2D array of size (n, n) to store all products of subarrays\n    subarray_products = [[0] * n for i in range(n)]\n    # Compute the products of all subarrays and store them in the 2D array\n    for i in range(n):\n        for j in range(i, n):\n            subarray_products[i][j] = arr[i] * arr[j] * arr[i+1] * arr[j+1] * arr[i+2] * arr[j+2] *... * arr[n-1]\n            # This formula computes the products of all subarrays by multiplying the first element of each subarray\n            # by the corresponding element of the next subarray, multiplied by the third element of the next subarray,\n            # and so on until the last element of the subarray.\n\n    # Initialize the sum of products of subarrays to zero\n    subarray_sum = 0\n    # Compute the sum of products of all subarrays\n    for i in range(n):\n        for j in range(n):\n            subarray_sum += subarray_products[i][j]\n\n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = arr[0]\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + arr[i - 1]\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            dp[j] += dp[j - i] * dp[j]\n\n    ans = 0\n    for i in range(1, n + 1):\n        ans += dp[i] * dp[n] // (i * (i + 1))\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Finding the sum of products of all possible subarrays\n    prod_arr = [1]*n\n    for i in range(1, n):\n        prod_arr[i] = arr[i]*prod_arr[i-1]\n    # Finding the sum of products of all possible subarrays with sum of subarray products equal to 1\n    subarray_sum = sum(arr)\n    prod_sum = sum(prod_arr)\n    if prod_sum == subarray_sum:\n        return prod_sum\n    else:\n        return sum_Of_Subarray_Prod(arr)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    dp = [0]*n\n    max_sum = float('-inf')\n    result = 0\n\n    for i in range(n):\n        if i == 0:\n            dp[i] = arr[i]\n        else:\n            dp[i] = dp[i-1] * arr[i]\n\n        if i >= 2:\n            max_sum = max(max_sum, dp[i-1]*dp[i-2])\n\n        result += dp[i]\n\n    return result - max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    dp = [0]*n\n    dp[0] = arr[0]\n\n    for i in range(1, n):\n        if i % 2 == 0:\n            dp[i] = dp[i-1] * arr[i]\n        else:\n            dp[i] = dp[i-1] * arr[i] + arr[i]\n\n    result = 0\n    for i in range(n):\n        result += dp[i]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n    sum_prod = 0\n    for i in range(n):\n        prod *= arr[i]\n        for j in range(i+1, n):\n            sum_prod += prod\n            prod *= arr[j]\n    return sum_prod"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b1111111111111111111111111111111\n    first_bit = (n & mask) >> 1\n    last_bit = (n & mask) << 1\n    result = n ^ (first_bit ^ last_bit)\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & ~(1 << 31)  # getting the first bit of the number\n    last_bit = n & ~(1 << 0)   # getting the last bit of the number\n    toggle_bits = ((1 << 31) ^ (1 << 0)) & ~(first_bit ^ last_bit)   # calculating the toggle bits by XORing the first and last bit, not including the first and last bit\n    \n    return n ^ toggle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Get the binary representation of n\n    binary = bin(n)[2:]\n\n    # Initialize the result to 0\n    result = 0\n\n    # Toggle the bits of the binary representation except the first and the last bit\n    for i in range(1, len(binary)-1):\n        if binary[i] == '1':\n            result += 2 ** (len(binary)-i-2)\n\n    # Return the result as an integer\n    return int(result)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Check if the number is negative\n    if n < 0:\n        n = n & 0xffffffff  # Mask off the sign bit\n\n    # XOR the middle two bits with 1 and shift right by 1 to get the toggled bits\n    toggled_bits = (n ^ (n & 0x3)) >> 1\n\n    # Combine the original number with the toggled bits\n    return n ^ toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Extracting the first and the last bits\n    first_bit = n & 1\n    last_bit = n & (1 << 31)\n\n    # Extracting the middle bits\n    middle_bits = n & ((1 << 31) - 2)\n\n    # Toggling the middle bits\n    middle_bits = middle_bits ^ ((1 << 31) - 2)\n\n    # Replacing the first and the last bits\n    n = n ^ first_bit ^ last_bit ^ middle_bits\n\n    # Replacing the middle bits\n    n = n ^ middle_bits\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    \"\"\"\n    # initialize variables to store the middle bits\n    mid_bits = 0\n    first_bit = n & 1 # check if the least significant bit is 1\n    last_bit = n & (1 << (n.bit_length() - 1)) # check if the most significant bit is 1\n    \n    # if the last bit is 0, toggle it to 1\n    if last_bit == 0:\n        mid_bits = n ^ (1 << (n.bit_length() - 1))\n    else:\n        # if the last bit is 1, toggle it to 0\n        mid_bits = n ^ 1\n    \n    # if the first bit is 0, toggle it to 1\n    if first_bit == 0:\n        mid_bits = mid_bits ^ 1\n    \n    return mid_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    \"\"\"\n    Toggles bits of the number except the first and the last bit.\n    \n    Args:\n        n (int): The number to toggle bits of.\n    \n    Returns:\n        int: The number with its middle bits toggled.\n    \"\"\"\n    \n    # Extract first and last bits\n    first_bit = n & 1   # Get first bit (0 or 1)\n    last_bit = n >> 31     # Get last bit (0 or 1)\n    \n    # Toggle middle bits\n    for i in range(0, 32, 2):   # Loop through every other bit\n        if i == 0:\n            n ^= 1 << i\n        elif i == 31:\n            n ^= 1 << i\n    \n    # Insert first and last bits\n    n |= (first_bit << 31) | (last_bit << 0)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    \"\"\"\n    This function toggles bits of the number except the first and the last bit.\n    \"\"\"\n\n    # convert binary representation of n to a list of bits\n    binary = bin(n)[2:]\n\n    # initialize two pointers to iterate over the binary string\n    left, right = 0, len(binary) - 1\n\n    # iterate over the binary string and toggle bits except the first and the last\n    while left < right:\n        if left == 0:\n            binary[left] = '0' if binary[left] == '1' else '1'\n            binary[right] = '0' if binary[right] == '1' else '1'\n            left += 1\n            right -= 1\n        elif right == len(binary) - 1:\n            binary[left] = '0' if binary[left] == '1' else '1'\n            binary[right] = '0' if binary[right] == '1' else '1'\n            left += 1\n            right -= 1\n        else:\n            binary[left] = '0' if binary[left] == '1' else '1'\n            binary[right] = '0' if binary[right] == '1' else '1'\n            left += 1\n            right -= 1\n\n    # convert the list of bits back to a binary integer and return it\n    return int(binary, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ ((n & (n - 1)) ^ ((n ^ (n - 1)) & 1)) # toggle all bits except the first and last bit using bitwise XOR and complement of the number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # get the length of the binary representation of n\n    length = len(bin(n)[2:])\n\n    # initialize two variables to store the first and last bits of n\n    first_bit = n & 1\n    last_bit = n >> length - 1\n\n    # toggle all bits except the first and last bit\n    n = first_bit | (n ^ last_bit)\n\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    # Return the left insertion point\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_right(a, x) - 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use bisect to find the left insertion point\n    index = bisect.bisect_left(a, x)\n\n    # If the value is already present, return the index\n    if index!= len(a) and a[index] == x:\n        return index\n\n    # Otherwise, return the index of the next lower element\n    if index == 0 or a[index-1]!= x:\n        return index-1\n\n    # Otherwise, the value is not present in the list and we need to return the index of the next higher element\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i if i!= len(a) and a[i] == x else i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string):\n        print(string + \" is starting with a vowel.\")\n    else:\n        print(string + \" is not starting with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    This function checks whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.search(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    return pattern.match(string) is not None"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n    \n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Initialize the smallest number with 9 digits\n    smallest_number = 1000000000\n    \n    # Initialize the smallest index with -1\n    smallest_index = -1\n    \n    # Initialize a list to store all the triangular numbers\n    triangular_numbers = []\n    \n    # Loop until we have found the smallest index with n digits\n    while smallest_index == -1:\n        \n        # Loop until we find the smallest triangular number with n digits\n        for i in range(1, 10):\n            \n            # Calculate the triangular number with the current digit\n            triangular_number = i * 10**(n-1)\n            \n            # Check if the triangular number is smaller than the current smallest number\n            if triangular_number < smallest_number:\n                smallest_number = triangular_number\n                smallest_index = i\n                \n        # Update the smallest number with n digits\n        smallest_number = smallest_number * 10**n\n        \n        # Check if we have found the smallest index with n digits\n        if n == 1:\n            smallest_index = 0\n            \n        # Update the n value\n        n -= 1\n        \n    # Return the smallest index\n    return smallest_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n\n    # Find the smallest triangular number with n digits\n    def min_triangular(n):\n        return int(math.pow(10, n-1))\n\n    # Calculate the first triangular number\n    a = min_triangular(n)\n\n    # Calculate the second triangular number\n    b = int(math.pow(10, n))\n\n    # Calculate the third triangular number\n    c = int(math.pow(10, n-1))\n\n    # Calculate the fourth triangular number\n    d = int(math.pow(10, n-2))\n\n    # Initialize variables\n    min_num = a\n    min_index = 0\n\n    # Iterate through the rest of the triangular numbers\n    for i in range(3, b-1):\n        # Calculate the current triangular number\n        current = i + int(math.pow(10, n-1))\n\n        # If the current triangular number is smaller than the smallest triangular number, update the smallest triangular number and its index\n        if current < min_num:\n            min_num = current\n            min_index = i\n\n    return min_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function takes an integer n and returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    # The smallest triangular number with n digits is given by T(n) = (10^n - 1)/9\n    T = (10 ** n - 1) // 9\n    # The index of the smallest triangular number with n digits is given by the number of digits of T - n\n    return math.log10(T) - n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    def is_triangular(num):\n        if num < 10**n:\n            return False\n        for i in range(n):\n            temp = str(num)\n            if temp[i] < temp[i+1]:\n                return False\n        return True\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def smallest_triangular(num):\n        for i in range(1, num+1):\n            if is_triangular(i) and is_prime(i):\n                return i\n    \n    return smallest_triangular(10**n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # finding the minimum number of digits required to represent 10^n\n    min_digits = math.ceil(math.log10(n))\n    # creating a list to store all the numbers of length n\n    triangular_numbers = [0] * (n * min_digits + 1)\n    # initializing the first number to 1\n    triangular_numbers[0] = 1\n    # iterating over all the numbers of length n\n    for i in range(1, n * min_digits + 1):\n        # calculating the next number in the sequence\n        next_number = triangular_numbers[i - 1] + triangular_numbers[i - 2]\n        # storing the next number in the list\n        triangular_numbers[i] = next_number\n    # finding the index of the smallest triangular number with n digits\n    min_triangular = min(triangular_numbers)\n    min_triangular_index = triangular_numbers.index(min_triangular)\n    return min_triangular_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function returns the index of the smallest triangular number with n digits using dynamic programming.\n    \"\"\"\n\n    # Initialize an array to store the triangular numbers.\n    triangular_numbers = [0] * (n + 1)\n\n    # Initialize the first few triangular numbers.\n    triangular_numbers[0] = 0\n    triangular_numbers[1] = 1\n\n    # Calculate the triangular numbers using dynamic programming.\n    for i in range(2, n + 1):\n        triangular_numbers[i] = triangular_numbers[i - 1] + triangular_numbers[i - 2]\n\n    # Return the index of the smallest triangular number.\n    return triangular_numbers.index(min(triangular_numbers))\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    max_index = int(math.log(10**(n-1), 2)) + 1\n    triangular_numbers = [math.pow(2, i) for i in range(max_index)]\n    min_triangular_number = 0\n\n    for i in range(len(triangular_numbers)):\n        if triangular_numbers[i] < min_triangular_number or triangular_numbers[i] == min_triangular_number and i < max_index:\n            min_triangular_number = triangular_numbers[i]\n\n    return triangular_numbers.index(min_triangular_number) + 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    # Initialize the smallest triangular number \n    smallest = 10 ** n \n\n    # Loop through all the triangular numbers \n    for i in range(2, smallest): \n        # Check if the current triangular number is smallest \n        if math.isqrt(i) ** 2 == i: \n            smallest = i \n            print(\"Index of smallest triangular number with\", n, \"digits:\", i)\n            return i\n\n    # If the loop completes without finding a smallest triangular number, return -1 \n    print(\"Could not find any smallest triangular number with\", n, \"digits.\")\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        index = 1\n        while True:\n            if find_Smallest(index, n) == n:\n                return index\n            index += 1\n\ndef find_Smallest(index, n):\n    '''\n    Helper function to find the smallest triangular number with n digits.\n    '''\n    triangular = math.factorial(n) // (math.factorial(index) * math.factorial(n - index))\n    return int(triangular)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Function to check if a number is a triangular number or not \n    def is_triangular(n): \n        if n > 0: \n            for i in range(1, int(math.sqrt(n))+1): \n                if n % i == 0: \n                    return False \n            return True \n        else: \n            return False \n\n    # Function to calculate the index of smallest triangular number with n digits \n    def smallest_triangular_number(n): \n        return n * (n+1) // 2 \n\n    # Function to generate all the triangular numbers with n digits \n    def generate_triangular_numbers(n): \n        triangular_numbers = [] \n        triangular_number = smallest_triangular_number(n) \n        while True: \n            triangular_numbers.append(triangular_number) \n            triangular_number += 1 \n            if len(str(triangular_number)) == n: \n                return triangular_numbers \n\n    # Function to check if a number is the smallest triangular number with n digits \n    def is_smallest_triangular_number(n): \n        triangular_numbers = generate_triangular_numbers(n) \n        for triangular_number in triangular_numbers: \n            if triangular_number == smallest_triangular_number(n): \n                return True \n        return False \n\n    # Main function \n    if is_triangular(n) and is_smallest_triangular_number(n): \n        index = triangular_numbers.index(smallest_triangular_number(n)) \n        print(\"The index of the smallest triangular number with\", n, \"digits is\", index) \n    else: \n        print(\"Invalid input\") "
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    # Initialize an empty dictionary\n    my_dict = {}\n    # Loop through the tuple and add adjacent elements as key-value pairs to the dictionary\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary to store the key-value pairs\n    dict_obj = {}\n    \n    # Loop through the tuple and add adjacent elements to the dictionary as key-value pairs\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n        \n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    dictionary = {}\n    # Iterate through the tuple\n    for i in range(len(test_tup) - 1):\n        # Append the key-value pair to the dictionary\n        dictionary[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    result_dict = {}\n    i = 0\n    while i < len(test_tup):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n        i += 2\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Create an empty dictionary\n    result = {}\n\n    # Iterate through the tuple and add each adjacent pair to the dictionary\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_obj = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # Initialize an empty dictionary\n    dict_obj = {}\n    # Loop through the given tuple\n    for i in range(0, len(test_tup), 2):\n        # Add key-value pair to the dictionary\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    # Return the dictionary\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # check if the string is empty\n    if not s:\n        return True\n    # get the first character of the string\n    first_char = s[0]\n    # check if all the characters in the string are the same as the first character\n    for char in s:\n        if char!= first_char:\n            return False\n    # if all the characters are the same as the first character, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # initialize a counter variable to keep track of the number of characters in the string\n    counter = 0\n    # loop through each character in the string\n    for i in s:\n        # increment the counter variable if the character is the same as the first character in the string\n        if i == s[0]:\n            counter += 1\n        # if the counter variable becomes greater than 1, return False, indicating that all characters are not the same\n        elif counter > 1:\n            return False\n    # if the loop completes without returning False, return True, indicating that all characters are the same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Check if all the characters in the string are the same\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string s as input and returns True if all characters of the string are same and False otherwise.\n    '''\n    # Check if the length of the string is 1\n    if len(s) == 1:\n        return True\n    # Check if the length of the string is greater than 1\n    else:\n        # Get the first character of the string\n        first_char = s[0]\n        # Loop through the string\n        for char in s:\n            # If any character is not the same as the first character, return False\n            if char!= first_char:\n                return False\n        # If the loop completes without returning False, return True\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string s as input and returns True if all the characters are the same in the string,\n    otherwise it returns False.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are same and False otherwise.\n    '''\n    # checking if the length of the string is greater than 0 or not\n    if len(s) == 0:\n        return True\n    # checking if all the characters are same or not\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    # loop through each character in the string and count it in the dictionary\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # check if all the counts are 1\n    if len(char_count) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n\n    # converting the string into a list to check whether all the characters are same or not\n    lst = list(s)\n\n    # checking whether all the characters are same or not\n    if len(lst) == 1:\n        return True\n    elif lst[0] == lst[-1]:\n        return all_Characters_Same(lst[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 1/2 * side**2\n    area = math.sqrt(3) * s\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = 3*side\n    \n    # Calculate the area using Heron's formula\n    area = 0.5*math.sqrt(semi_perimeter*(semi_perimeter-side)*(semi_perimeter-2*side)*(semi_perimeter-3*side))\n    \n    # Return the area\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.25\n    return 6 * s * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side * (side-1) * (side-2) * (side-3)) ** 0.25\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side / 2\n    b = side / 2\n    c = side / 2\n    s = (a + b + c) / 2\n    area = (math.sqrt(s * (s - a) * (s - b) * (s - c)))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (6.0 / 5.0) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.5 * side * side * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side * side * side\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Find the length of the list\n    length = len(list)\n    # Check if the list has more than 1 item\n    if length > 1:\n        # Calculate the position where the rotation should start\n        start_position = (length + m) % length\n        # Reverse the list from the start_position to the end\n        list = list[:start_position] + list[start_position:][::-1] + list[start_position:]\n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n items.\n\n    Args:\n    lst (list): The list to be rotated.\n    n (int): The number of items to rotate the list to the right.\n\n    Returns:\n    list: The rotated list.\n    \"\"\"\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    lst[:m], lst[n-m:] = lst[n-m:], lst[:m]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    lst = lst[-m:] + lst[:-m]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    if m > n:\n        raise ValueError(\"Cannot rotate a list of size {} by {} items to the right\".format(n, m))\n    if m == 0 or m == n:\n        return list\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # check if m is within the range of the list\n    if m >= n:\n        return list\n    # check if m is 0\n    elif m == 0:\n        return list\n    # calculate the number of rotations required\n    num_rotations = m // n\n    # calculate the number of items to be moved at each rotation\n    items_per_rotation = n - m % n\n    # rotate the list by num_rotations\n    for _ in range(num_rotations):\n        temp = list[-items_per_rotation:]\n        list = list[:-items_per_rotation]\n        list += temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    # If m is greater than or equal to the length of list, there is no rotation required.\n    if m >= n:\n        return list\n    # If m is 0, return the list as it is.\n    elif m == 0:\n        return list\n    # If m is less than 0, rotate to the left.\n    else:\n        # Initialize two pointers, one at the start of the list and the other at the end of the list.\n        i = 0\n        j = n-1\n        # Move the pointers m steps to the right.\n        while i < m and j >= 0:\n            i += 1\n            j -= 1\n        # Swap the elements pointed by the two pointers.\n        list[i], list[j] = list[j], list[i]\n        # Move the pointers back to the start and repeat the same operation for the remaining m steps.\n        while i < n and j >= i:\n            list[i], list[j] = list[j], list[i]\n            i += 1\n            j -= 1\n        # Return the rotated list.\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Handle base case when m is 0 or list is empty\n    if m == 0 or len(list) == 0:\n        return list\n    \n    # Handle base case when m is greater than the length of the list\n    if m >= len(list):\n        m = m % len(list)\n    \n    # Reverse the list and then reverse the first m items\n    # This will give the desired output in O(n) time complexity\n    # Note: we use slice notation [start:stop:step] to reverse a slice of the list\n    reversed_list = list[::-1]\n    rotated_list = reversed_list[m:][::-1] + reversed_list[:m]\n    \n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    # Convert the list to a string\n    list_str = ''.join(str(x) for x in list)\n\n    # Calculate the length of the list\n    length = len(list_str)\n\n    # Calculate the number of rotations needed\n    rotations = m % length\n\n    # Calculate the new starting index of the list\n    new_start = (length - rotations) % length\n\n    # Return the rotated list\n    return list_str[new_start:] + list_str[:new_start]"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    return any(test_tup) is None"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    # define a lambda function that checks if a number is divisible by a digit\n    is_divisible = lambda x: all(int(d) in str(x) for d in str(x))\n    # loop through the numbers in the range and check if they are divisible by every digit\n    divisible_nums = filter(is_divisible, range(startnum, endnum+1))\n    return divisible_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits = [int(d) for d in str(startnum)] # Convert the startnum to a list of digits\n    result = []\n    for num in range(startnum, endnum + 1):\n        if num == startnum:\n            result.append(num)\n            continue\n        if all(d in str(num) for d in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(d % x == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        '''\n        Function to check if a number is divisible by every digit in the number.\n        '''\n        def digit_count(num):\n            '''\n            Function to count the number of digits in a given number.\n            '''\n            count = 0\n            while num > 0:\n                count += 1\n                num //= 10\n            return count\n\n        # Split the number into a list of digits\n        digits = [int(d) for d in str(num)]\n        # Iterate over each digit in the number\n        for digit in digits:\n            # Check if the digit is divisible by the current number of digits in the range\n            if digit % digit_count(startnum)!= 0 and digit % digit_count(endnum)!= 0:\n                return False\n        return True\n\n    # Iterate over each number in the range and check if it is divisible by every digit in the range\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    \"\"\"\n\n    def is_divisible_by_digit(num):\n        \"\"\"\n        Helper function to check if a number is divisible by a digit.\n        \"\"\"\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit == 0:\n                continue\n            if digit % 2 == 0:\n                return False\n        return True\n\n    return list(filter(lambda x: is_divisible_by_digit(x), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes in two parameters: startnum and endnum. The function will return a list of all numbers within the given range, where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        This function takes in a single parameter: num. The function will return True if every digit in the number is divisible by the number 1, 2, 3, 4, 5, 6, 7, 8, 9, or 0. Otherwise, the function will return False.\n        \"\"\"\n        def is_digit(char):\n            \"\"\"\n            This function takes in a single parameter: char. The function will return True if the character is a digit (0-9). Otherwise, the function will return False.\n            \"\"\"\n            if char.isdigit():\n                return True\n            else:\n                return False\n        \n        num_str = str(num)\n        for char in num_str:\n            if not is_digit(char):\n                return False\n        return True\n    \n    def divisible_by_digits_helper(num, result):\n        \"\"\"\n        This function takes in three parameters: num, the current number being checked, and result, the list of all numbers within the given range. The function will recursively check the next number in the range, adding it to the result list if it meets the condition.\n        \"\"\"\n        if num > endnum:\n            return result\n        if is_divisible_by_digits(num):\n            result.append(num)\n        return divisible_by_digits_helper(num + 1, result)\n    \n    return divisible_by_digits_helper(startnum, [])"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # create a list of all digits from 0 to 9\n    digits = list(range(10))\n\n    # create a list to store the result\n    result = []\n\n    # iterate over the range of numbers from startnum to endnum\n    for num in range(startnum, endnum+1):\n        # iterate over the digits of the number and check if they are divisible by num\n        for digit in digits:\n            if digit!= 0 and digit % num == 0:\n                # if a digit is divisible by num, add the number to the result list\n                result.append(num)\n                break\n\n    # return the list of numbers that are divisible by every digit in the range\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return lambda x: all(map(lambda d: x % d == 0, [int(digit) for digit in str(x)]))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % y == 0 for y in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    divisible = lambda n: all(int(digit) in str(n) for digit in str(n))\n    return filter(divisible, range(startnum, endnum + 1))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is valid\n    if a > 360:\n        return None\n\n    # Calculate the area of the sector\n    area = math.pi * r**2 * (a/360)\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if the angle is within 360 degrees\n    if a > 360:\n        return None\n    \n    # Calculate the area of the sector\n    area = math.pi * r * r * a / 360\n    \n    # Return the area of the sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    area = math.pi * r * r\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*r**2*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if the angle is valid\n    if a > 360:\n        return None\n    \n    # Convert angle to radians\n    angle = a * math.pi / 180\n    \n    # Calculate area of sector\n    area = math.pi * r * r * angle\n    \n    # Return area of sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi*(r**2)*a/360\n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Create a list to store the lengths of longest common subsequence of all three strings\n    lengths = []\n\n    # Create a list to store the indexes of longest common subsequence of all three strings\n    indexes = []\n\n    # Iterate through all possible starting indexes of the LCS for each string\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            for k in range(len(Z)):\n                # If the current subsequence is longer than the previous longest subsequence, update the longest subsequence and its indexes\n                if len(X[i:j+1]) > len(lengths) and len(Y[j:k+1]) > len(lengths) and len(Z[k:len(X)+1]) > len(lengths):\n                    lengths = [len(X[i:j+1]), len(Y[j:k+1]), len(Z[k:len(X)+1])]\n                    indexes = [i, j, k]\n\n    # Return the longest common subsequence of all three strings\n    return X[indexes[0]:indexes[0]+lengths[0]], Y[indexes[1]:indexes[1]+lengths[1]], Z[indexes[2]:indexes[2]+lengths[2]]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Step 1: Convert all strings to lists of characters\n    X = list(X)\n    Y = list(Y)\n    Z = list(Z)\n\n    # Step 2: Find the length of the longest string\n    n = max(len(X), len(Y), len(Z))\n\n    # Step 3: Create a 3D table to store the lengths of LCS for every possible substring\n    table = [[[0 for j in range(n + 1)] for i in range(n + 1)] for k in range(3)]\n\n    # Step 4: Fill in the table using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                table[0][i][j] = table[0][i - 1][j - 1] + 1\n            elif X[i - 1] < Y[j - 1]:\n                table[1][i][j] = table[0][i - 1][j]\n            else:\n                table[2][i][j] = table[0][i][j - 1]\n\n    # Step 5: Find the length of the longest common subsequence\n    max_length = table[0][n][n]\n\n    # Step 6: Traverse the table to find the actual longest common subsequence\n    i, j = n, n\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif table[0][i - 1][j] > table[1][i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, p = len(X), len(Y), len(Z)\n    # create a table to store the lengths of the LCS of all possible suffixes\n    L = [[0] * (p + 1) for i in range(m + 1)]\n    # fill the table from the bottom up\n    for i in range(m, -1, -1):\n        for j in range(n, -1, -1):\n            if X[i] == Y[j]:\n                L[i][j] = L[i+1][j+1] + 1\n            else:\n                L[i][j] = max(L[i+1][j], L[i][j+1])\n    # backtrack to find the LCS of the three strings\n    i, j, k = m, n, p\n    lcs = []\n    while i >= 0 and j >= 0 and k >= 0:\n        if X[i] == Y[j] and X[i] == Z[k]:\n            lcs.append(X[i])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i+1][j] >= L[i][j+1]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(lcs[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Initialize two variables to store the lengths of LCS of X and Y and the lengths of LCS of X and Z \n    len_X_Y = len(X) \n    len_X_Z = len(X)\n\n    # Traverse through the string sequence to find the lengths of LCS of X and Y and X and Z \n    for i in range(len_X_Y): \n        for j in range(len_X_Z): \n            if X[i] == Y[j]: \n                len_X_Y = i+1 \n            if X[i] == Z[j]: \n                len_X_Z = j+1 \n\n    # Initialize a matrix to store the lengths of LCS of X, Y, and Z \n    dp = [[0 for j in range(len_X_Z+1)] for i in range(len_X_Y+1)] \n\n    # Fill the matrix with the lengths of LCS of X, Y, and Z \n    for i in range(len_X_Y+1): \n        for j in range(len_X_Z+1): \n            if i == 0 or j == 0: \n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                dp[i][j] = dp[i-1][j-1] + 1\n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n\n    # Initialize a variable to store the length of the LCS \n    lcs = dp[len_X_Y][len_X_Z] \n\n    # Initialize a variable to store the indices of the characters of X, Y, and Z that form the LCS \n    i = len_X_Y \n    j = len_X_Z \n    lcs_indices = [] \n\n    # Fill the lcs_indices with the indices of the characters that form the LCS \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs_indices.append(i-1) \n            i -= 1 \n            j -= 1 \n        elif dp[i-1][j] > dp[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    # Reverse the order of the characters in the LCS to get the final result \n    lcs_indices = lcs_indices[::-1] \n\n    # Return the length of the LCS and the indices of the characters that form the LCS \n    return lcs, lcs_indices\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    def lcs(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        p = [[0] * (n + 1) for _ in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if X[i - 1] == Y[j - 1]:\n                    p[i][j] = p[i - 1][j - 1] + 1\n                else:\n                    p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n        return p\n\n    p = lcs(X, Y, Z)\n    lcs_length = p[len(X)][len(Y)]\n    lcs_start = len(X) - 1\n    lcs_end = len(Y) - 1\n\n    while p[lcs_start][lcs_end] == p[lcs_start + 1][lcs_end]:\n        lcs_start -= 1\n        lcs_end -= 1\n\n    lcs_sequence = []\n    while lcs_start!= -1 and lcs_end!= -1:\n        if X[lcs_start] == Y[lcs_end]:\n            lcs_sequence.append(X[lcs_start])\n            lcs_start -= 1\n            lcs_end -= 1\n        elif X[lcs_start] < Y[lcs_end]:\n            lcs_start -= 1\n        else:\n            lcs_end -= 1\n\n    return \"\".join(reversed(lcs_sequence)), lcs_length"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    # Create a table to store lengths of LCS of subsequences\n    L = [[0] * (p+1) for i in range(m+1)]\n    # Fill in the base cases\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    # Return the length of LCS of subsequences\n    return L[m][n][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    This function finds the longest common subsequence (LCS) for the given three string sequence.\n    '''\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n  \n    # Step 1: create a table to store lengths of longest common subsequences of \n    # substrings of X[0..m-1], Y[0..n-1] and Z[0..p-1] \n    L = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)] \n  \n    # Step 2: Fill in the L[i][j][k] in bottom up fashion. Note that L[i][j][k] \n    # contains length of LCS of X[0..i-1], Y[0..j-1] and Z[0..k-1] \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(1, p+1): \n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1 \n                elif X[i-1] == L[i-1][j][k]: \n                    L[i][j][k] = L[i-1][j][k] \n                elif Y[j-1] == L[i][j-1][k]: \n                    L[i][j][k] = L[i][j-1][k] \n                elif Z[k-1] == L[i][j][k-1]: \n                    L[i][j][k] = L[i][j][k-1] \n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k]) \n  \n    # Step 3: print the LCS \n    lcs = \"\" \n    i = m \n    j = n \n    k = p \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif L[i-1][j][k] == L[i-1][j][k-1]: \n            i -= 1 \n        elif L[i][j-1][k] == L[i-1][j][k]: \n            j -= 1 \n        else: \n            k -= 1 \n    return lcs "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Initialize a table to store the lengths of LCS for all possible prefixes of X,Y and Z\n    L = [[0] * (len(Z) + 1) for _ in range(len(X) + 1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Return the LCS as the last element of the corresponding row in the table\n    return L[len(X)][len(Y)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 2D table to store the length of LCS for substrings of X, Y and Z\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    # fill the table in bottom-up manner\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # construct the LCS by tracing back the table\n    i = m\n    j = p\n    lcs = \"\"\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # return the LCS\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. \n    \"\"\"\n    \n    # create a 2D table to store the lengths of common subsequences\n    table = [[0 for _ in range(len(Z)+1)] for _ in range(len(X)+1)]\n    \n    # fill the table in bottom-up manner\n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            if X[i-1] == Y[j-1]: \n                table[i][j] = table[i-1][j-1] + 1\n            else: \n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    \n    # return the length of the longest common subsequence\n    return table[-1][-1]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # iterate through each word and capitalize it if it starts with a capital letter\n    for i, word in enumerate(words):\n        if word[0].isupper():\n            words[i] = word[0].upper() + word[1:]\n    # join the words back together and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to extract all words from the input string\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Loop through the words and add a space before each capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert all the words in the string to lowercase\n    str1 = str1.lower()\n    # Split the string into individual words\n    words = str1.split()\n    # Initialize an empty list to store the words with spaces\n    result = []\n    # Loop through each word\n    for word in words:\n        # Check if the first character of the word is a capital letter\n        if word[0].isupper():\n            # Add a space to the start of the word and add the rest of the word to the result list\n            result.append(''+ word[1:])\n        else:\n            # If the first character is not a capital letter, just add the word to the result list\n            result.append(word)\n    # Join the result list into a string and return it\n    return''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Capitalize the first letter of each word and join them into a sentence\n    sentence =''.join(word.capitalize() for word in words)\n\n    return sentence"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Loop through the words and capitalize the first letter and add spaces before the rest of the letters\n    capitalized_words = []\n    for word in words:\n        first_letter = word[0].upper()\n        rest_of_word = word[1:].lower()\n        capitalized_words.append(first_letter +'' + rest_of_word)\n\n    # Join the capitalized words back together into a string and return it\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    \n    # Iterate over the words and add spaces before capital letters\n    for i in range(len(words)):\n        if i == 0 or not words[i-1][-1].isalpha():\n            words[i] = words[i].capitalize()\n    \n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Split the string into a list of words\n    words = str1.split()\n\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Check if the current word starts with a capital letter\n        if words[i][0].isupper():\n            # If it does, add a space before it\n            words[i] = \" \" + words[i]\n\n    # Join the words back into a string\n    result = \" \".join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # remove all non-word characters from string\n    str1 = re.sub(r'[^\\w\\s]', '', str1)\n\n    # split string into words\n    words = str1.split()\n\n    # capitalize first letter of each word\n    words = [word.capitalize() for word in words]\n\n    # join words with spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    This function takes a string as input and capitalizes the first letter of each word, except for the first one.\n    Then, it replaces all the non-alphanumeric characters with spaces.\n    '''\n    # Split the string into a list of words\n    words = string.split()\n    # Capitalize the first letter of each word except the first one\n    capitalized_words = [''.join(filter(str.isalpha, word)).capitalize() for word in words]\n    # Replace all non-alphanumeric characters with spaces\n    cleaned_string =''.join(capitalized_words)\n    # Return the cleaned string\n    return cleaned_string"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1)\n    new_words = []\n    for word in words:\n        if word[0].isupper():\n            new_words.append(' '+word)\n        else:\n            new_words.append(word)\n    return ''.join(new_words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings of numbers separated by commas (e.g. \"1,2,3,4,5\") and returns a list of strings sorted by numerical value in ascending order.\n    \"\"\"\n    nums_str_list = nums_str.split(\",\")\n    nums_list = [int(i) for i in nums_str_list]\n    nums_list.sort()\n    sorted_nums_str = \",\".join([str(i) for i in nums_list])\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to floats\n    nums = [float(num) for num in nums_str]\n\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Convert sorted list back to strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n    \n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Convert the sorted list back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = int(num_str)\n            nums.append(num)\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n    nums.sort()\n    result = []\n    for num in nums:\n        result.append(str(num))\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings of numbers in the list to integers\n    nums_int = [int(num) for num in nums_str]\n    # Sort the integers in the list\n    nums_int.sort()\n    # Convert the sorted integers back to strings and return the sorted list\n    return [str(num) for num in nums_int]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n    nums.sort()\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all the strings to float values\n    nums = [float(num) for num in nums_str]\n    # Sort the list in ascending order\n    nums.sort()\n    # Convert back to string and return the sorted list\n    return ['{:.2f}'.format(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in nums_str:\n        try:\n            nums.append(int(i))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # unpacking the tuple\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Convert the test_list to a list to be able to modify it\n    test_list = list(test_list)\n    # Add the given tuple to the test_list using the + operator\n    test_list.append(test_tup)\n    # Return the modified list as the result\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n\n    if arr[i] < arr[i//2]:\n        return False\n\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Given an array, check if it represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i // 2]:\n            return False\n    return True\n\ndef check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    if i >= n // 2:\n        return True\n    if arr[i] < arr[i * 2 + 1]:\n        if not check_min_heap_helper(arr, i * 2 + 1):\n            return False\n    else:\n        if not check_min_heap_helper(arr, i * 2 + 1):\n            return False\n    if arr[i] < arr[i * 2 + 2]:\n        if not check_min_heap_helper(arr, i * 2 + 2):\n            return False\n    else:\n        if not check_min_heap_helper(arr, i * 2 + 2):\n            return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    if is_min_heap(arr):\n        return check_min_heap_helper(arr, 1)\n    else:\n        return False"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    if left_child < len(arr) and arr[left_child] > arr[i]:\n        return False\n    if right_child < len(arr) and arr[right_child] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    if len(arr) < 2:\n        return True\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    # Base case\n    if i >= len(arr) // 2:\n        return True\n    # If left child is greater than parent, then return False\n    if arr[i] < arr[2 * i + 1]:\n        return False\n    # Recursively check for left child\n    return check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents min heap or not.\n    \"\"\"\n    # Check if the array is empty or not\n    if len(arr) == 0:\n        return True\n    # Return False if the array doesn't represent min heap\n    return not check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n\n    if arr[i] < arr[i*2+1] and arr[i*2+1] < arr[i*2+2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i*2+1) and check_min_heap_helper(arr, i*2+2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i >= len(arr) // 2:\n        return True\n    \n    if arr[i] <= arr[2 * i + 1] and arr[i] <= arr[2 * i + 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0:\n        if arr[i] < arr[i//2]:\n            return False\n    if i*2 + 1 <= len(arr) - 1:\n        if arr[i] > arr[i*2 + 1]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n    \n    if left_child < len(arr) and arr[left_child] < arr[i]:\n        return False\n    \n    if right_child < len(arr) and arr[right_child] < arr[i]:\n        return False\n    \n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i > 0 and arr[i] < arr[(i - 1) // 2]:\n        return False\n    left = 2 * i + 1\n    right = 2 * i + 2\n    return (left < len(arr) and arr[i] <= arr[left]) and (right < len(arr) and arr[i] <= arr[right])\n\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    jacobsthal_numbers = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731]\n    return jacobsthal_numbers[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize variables\n    prev = 0\n    curr = 1\n    count = 0\n\n    # Calculate and print the nth jacobsthal number\n    while count < n:\n        print(curr)\n        prev, curr = curr, prev + curr\n        count += 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n\n    # Initialize variables\n    jacobsthal_num = 0\n    jacobsthal_lucas_num = 1\n    lucas_num = 1\n\n    # Loop through the range of n\n    for i in range(1, n + 1):\n        # Add the jacobsthal_num to the jacobsthal_lucas_num and update the variables\n        jacobsthal_num = jacobsthal_lucas_num\n        jacobsthal_lucas_num += lucas_num\n        lucas_num += 1\n\n    # Return the nth jacobsthal number\n    return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    a = 0\n    b = 1\n    c = 1\n\n    for i in range(n):\n        print(a)\n        a, b, c = b, c, a + b\n\n    return a\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_numbers = [0, 1]\n    for i in range(2, n+1):\n        jacobsthal_numbers.append(jacobsthal_numbers[i-1] + jacobsthal_numbers[i-2])\n    return jacobsthal_numbers[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 1 + 3 * jacobsthal_num(n - 1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * (jacobsthal_num(n//2) - 1)\n    else:\n        return 2 * jacobsthal_num(n//2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    # Initialize the first two numbers\n    a = 0\n    b = 1\n\n    # Loop through the range of numbers and compute the nth number\n    for i in range(n):\n        # Compute the sum of the previous two numbers\n        c = a + b\n\n        # Update the values for the next iteration\n        a = b\n        b = c\n\n    # Return the nth number\n    return a"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    test_list.sort()\n    count = 0\n    min_list = []\n    for i in test_list:\n        if count < K:\n            min_list.append(i)\n            count += 1\n        else:\n            if i[0] > min_list[K-1][0]:\n                min_list[K-1] = i\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    # Sort the dictionary by values in descending order and take the first K elements\n    sorted_dict = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)\n    min_k_list = [item[0] for item in sorted_dict[:K]]\n    \n    # Return the list of minimum K records from the original list\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    sorted_list = sorted(test_list)\n    min_list = sorted_list[:K]\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and a number K as input and returns the minimum K records from the list.\n    If the number of records in the list is less than K, then all the records are returned.\n    '''\n    min_list = []\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        elif test_list[i][1] < min_list[0][1]:\n            min_list[0] = test_list[i]\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    sorted_list = sorted(test_list, key=lambda x: x[1])  # Sorting the list based on second element of each tuple\n    min_list = sorted_list[:K]  # Getting the top K elements from the sorted list\n    return min_list  # Returning the top K elements\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list. \n    \"\"\"\n    min_k_list = []\n    min_count = 0\n    count = 0\n\n    for i in range(len(test_list)):\n        if count < K:\n            min_k_list.append(test_list[i])\n            count += 1\n        else:\n            if min_count < K:\n                min_count += 1\n                min_k_list[min_count-1] = test_list[i]\n            elif min_count == K:\n                if test_list[i][1] < min_k_list[min_count-1][1]:\n                    min_count += 1\n                    min_k_list[min_count-1] = test_list[i]\n\n    return min_k_list\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Returns the minimum K records from the given test_list.\n    test_list: A tuple list.\n    K: An integer representing the number of records required.\n    Returns: A list of tuples containing the K minimum records from test_list.\n    \"\"\"\n\n    # Sort the list based on the first element of each tuple (minimum records)\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize an empty list to store the K minimum records\n    min_list = []\n\n    # Iterate through the sorted list and add K minimum records to min_list\n    for i in range(K):\n        min_list.append(test_list[i])\n\n    # Return the list of K minimum records\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    min_heap = []\n    min_heap_size = 0\n    min_records = []\n\n    for record in test_list:\n        if min_heap_size < K:\n            min_heap.append(record)\n            min_heap_size += 1\n            min_heapify(min_heap, min_heap_size)\n        else:\n            if record < min_heap[0]:\n                min_heap[0] = record\n                min_heapify(min_heap, min_heap_size)\n            elif record == min_heap[0]:\n                min_heap.append(record)\n                min_heap_size += 1\n                min_heapify(min_heap, min_heap_size)\n\n    for i in range(K):\n        min_records.append(min_heap[0])\n        min_heap[0] = min_heap[min_heap_size-1]\n        min_heap_size -= 1\n        min_heapify(min_heap, min_heap_size)\n\n    return min_records\n\ndef min_heapify(arr, n):\n    i = (n // 2) - 1\n    while i >= 0:\n        smallest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and arr[l] < arr[smallest]:\n            smallest = l\n        if r < n and arr[r] < arr[smallest]:\n            smallest = r\n        if smallest!= i:\n            arr[i], arr[smallest] = arr[smallest], arr[i]\n        i = smallest"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_lst = []\n    for i in test_list:\n        if len(min_lst) < K:\n            min_lst.append(i)\n        else:\n            if i[0] < min_lst[0][0]:\n                min_lst[0] = i\n            elif i[0] == min_lst[0][0] and i[1] < min_lst[0][1]:\n                min_lst[0] = i\n    return min_lst"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_heap = []\n    min_heap.extend(test_list[:K])\n    heapq.heapify(min_heap)\n    for i in range(K, len(test_list)):\n        if test_list[i][1] < min_heap[0][1]:\n            min_heap[0] = test_list[i]\n            heapq.heapify(min_heap)\n    return min_heap"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l1 and l2[i] in l3 and l3[i] in l1 and l3[i] in l2:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create an empty list to store the common elements\n    common_elements = []\n    \n    # Loop through each index in the three lists\n    for i in range(len(l1)):\n        # If the element at the current index is in the first list\n        if l1[i] in l2 and l1[i] in l3:\n            # Check if the element at the current index is already in the list\n            if l1[i] not in common_elements:\n                # If it's not, add it to the list of common elements\n                common_elements.append(l1[i])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty dictionary to store the count of elements in each list\n    count_dict = {}\n    \n    # iterate through the first list and increment the count in the count_dict for each element\n    for elem in l1:\n        count_dict[elem] = count_dict.get(elem, 0) + 1\n    \n    # iterate through the second list and increment the count in the count_dict for each element\n    for elem in l2:\n        count_dict[elem] = count_dict.get(elem, 0) + 1\n    \n    # iterate through the third list and increment the count in the count_dict for each element\n    for elem in l3:\n        count_dict[elem] = count_dict.get(elem, 0) + 1\n    \n    # initialize an empty list to store the common elements\n    common_list = []\n    \n    # iterate through the count_dict and check if the count is greater than 0 for each element\n    for elem, count in count_dict.items():\n        if count == 3:\n            common_list.append(elem)\n    \n    # return the common elements as a list\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_indices = set()\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_indices.add(i)\n    return list(common_indices)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n\n    # Loop through each index in the three lists\n    for i in range(len(l1)):\n        # Check if the current element is in all three lists\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            # If it is, append it to the common elements list\n            common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    # create an empty list to store common elements\n    common_list = []\n    # loop through each element of l1\n    for i in range(len(l1)):\n        # if the element is present in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_list.append(l1[i])\n    # return the common list\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in common_elements:\n            continue\n        elif l1[i] in l2 or l1[i] in l3 or l1[i] in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create an empty list to store the common elements\n    common_elements = []\n    # Loop through each index in l1\n    for i in range(len(l1)):\n        # Check if the element at the current index exists in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # If it does, append the element to the common_elements list\n            common_elements.append(l1[i])\n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n\n    smallest = numbers[0]\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    This function will find the second smallest number in a list of numbers.\n    '''\n    # Sort the list in ascending order\n    sorted_list = sorted(numbers)\n    \n    # If there are less than 2 numbers in the list, return None\n    if len(sorted_list) < 2:\n        return None\n    \n    # Otherwise, return the second smallest number\n    return sorted_list[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Finds the second smallest number in a list.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Finds the second smallest number in a list.\n    \"\"\"\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    if len(numbers) < 2:\n        return None\n\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for num in numbers[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"a(b)+$\"\n    return re.match(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b*)'\n    result = re.search(pattern, text)\n    if result:\n        return result.group(1)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n\n    # Define pattern to match the string\n    pattern = r'a.*b'\n\n    # Use re.search() function to search for pattern in text\n    match = re.search(pattern, text)\n\n    # If pattern is found, return True else False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'(?i)a(?=b*b*)')\n    result = re.search(pattern, text)\n    if result:\n        print('Match found!')\n        print(result.group())\n    else:\n        print('No match found.')"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=\\s*b)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a.*b\"\n    return re.search(pattern, text)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # create a dictionary to store the count of pairs\n    pair_count = {}\n\n    # loop through the string list\n    for i in range(len(test_list)):\n        # convert the current string to a list of characters\n        current_str = list(test_list[i])\n        # reverse the list of characters\n        reversed_str = current_str[::-1]\n        # check if the reversed string is already in the dictionary\n        if reversed_str in pair_count:\n            # increment the count of the reversed string by 1\n            pair_count[reversed_str] += 1\n        else:\n            # if not, add the reversed string to the dictionary with a count of 1\n            pair_count[reversed_str] = 1\n\n    # initialize the count of pairs\n    count = 0\n\n    # loop through the dictionary and check if the count is 2\n    for i in pair_count:\n        if pair_count[i] == 2:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_dict = {}\n\n    for word in test_list:\n        # Convert the word to a list of characters\n        word_list = list(word)\n\n        # Sort the characters in the list in reverse order\n        word_list.sort(reverse=True)\n\n        # Convert the sorted list back to a string\n        sorted_word = ''.join(word_list)\n\n        # Check if the reversed word is already in the dictionary\n        if sorted_word in reverse_dict:\n            reverse_dict[sorted_word] += 1\n        else:\n            reverse_dict[sorted_word] = 1\n\n    # Count the pairs of reversed strings\n    count = 0\n    for key, value in reverse_dict.items():\n        if value > 1:\n            count += value * (value - 1) // 2\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Define an empty dictionary to store the count of reverse pairs\n    reverse_count = {}\n\n    # Iterate through the string list\n    for i in range(len(test_list)):\n        # Reverse the current string and check if it is already in the dictionary\n        reverse = test_list[i][::-1]\n        if reverse in reverse_count:\n            # Increment the count of reverse pairs\n            reverse_count[reverse] += 1\n        else:\n            # Add the reverse to the dictionary with a count of 1\n            reverse_count[reverse] = 1\n\n    # Return the count of reverse pairs\n    return reverse_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Create a dictionary to store the frequency of characters in the given list of strings\n    char_freq = {}\n\n    # Loop through the list of strings\n    for string in test_list:\n        # Convert the string to a set to remove duplicate characters\n        set_str = set(string)\n        # Loop through the characters in the set\n        for char in set_str:\n            # If the character is not already in the dictionary, add it with a frequency of 1\n            if char not in char_freq:\n                char_freq[char] = 1\n            # Otherwise, increment the frequency of the character by 1\n            else:\n                char_freq[char] += 1\n\n    # Initialize variables to store the count of reverse pairs and the total count of characters in the given list\n    reverse_pair_count = 0\n    total_char_count = 0\n\n    # Loop through the dictionary to count the frequency of characters in the given list\n    for char, freq in char_freq.items():\n        # If the frequency of the character is odd, increment the reverse pair count by 1\n        if freq % 2!= 0:\n            reverse_pair_count += 1\n        # Otherwise, add the frequency of the character to the total character count\n        else:\n            total_char_count += freq\n\n    # Return the count of reverse pairs and the total count of characters in the given list\n    return reverse_pair_count, total_char_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Initialize a dictionary to store the count of reverse pairs\n    count = {}\n\n    # Iterate over the strings in the list\n    for string in test_list:\n\n        # Reverse the string and check if it is already in the dictionary\n        reverse_string = string[::-1]\n        if reverse_string in count:\n            # If it is, increment its count\n            count[reverse_string] += 1\n        else:\n            # If not, add it to the dictionary with a count of 1\n            count[reverse_string] = 1\n\n    # Count the number of reverse pairs\n    pairs_count = 0\n    for value in count.values():\n        pairs_count += value * (value - 1) // 2\n\n    # Return the count of reverse pairs\n    return pairs_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:] and test_list[j][::-1] in test_list[i:]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist_tuple = tuple(list1[i:j])\n            if sublist_tuple not in sublist_count:\n                sublist_count[sublist_tuple] = 1\n            else:\n                sublist_count[sublist_tuple] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        item_tuple = tuple(item)\n        if item_tuple in count_dict:\n            count_dict[item_tuple] += 1\n        else:\n            count_dict[item_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for item in list1:\n        if isinstance(item, list):\n            item = tuple(item)\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in list_count:\n                list_count[sublist] = 1\n            else:\n                list_count[sublist] += 1\n    return list_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Initialize an empty dictionary\n    sublist_count = {}\n\n    # Iterate over all elements in the input list\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Convert the list to a tuple\n            element = tuple(element)\n            # If the tuple is already in the dictionary, increment its value\n            if element in sublist_count:\n                sublist_count[element] += 1\n            # Otherwise, add the tuple to the dictionary with a value of 1\n            else:\n                sublist_count[element] = 1\n\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each unique list\n    unique_list_count = {}\n    # Iterate over each list in the input list\n    for lst in list1:\n        # Convert the list to a tuple and check if it's already in the dictionary\n        if tuple(lst) in unique_list_count:\n            # If it's already in the dictionary, increment its count\n            unique_list_count[tuple(lst)] += 1\n        else:\n            # If it's not in the dictionary, add it with a count of 1\n            unique_list_count[tuple(lst)] = 1\n    # Return the dictionary of unique list counts\n    return unique_list_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # convert the list to a set to remove duplicate elements\n    list1_set = set(list1)\n    \n    # create an empty dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # iterate over each unique tuple in the set\n    for sublist in list1_set:\n        # convert the tuple to a string and concatenate it with the original list to form a key\n        key = str(sublist) + str(list1)\n        \n        # if the key already exists in the dictionary, increment its count\n        if key in count_dict:\n            count_dict[key] += 1\n        # otherwise, add the key and count to the dictionary\n        else:\n            count_dict[key] = 1\n    \n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        if type(item) == list:\n            tuple_item = tuple(item)\n            if tuple_item not in count_dict:\n                count_dict[tuple_item] = 1\n            else:\n                count_dict[tuple_item] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for item in list1:\n        sublist = tuple(item)\n        if sublist in count:\n            count[sublist] += 1\n        else:\n            count[sublist] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if '.' not in num:\n        return False\n\n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n\n    decimal_part = parts[1]\n    if len(decimal_part) > 2:\n        return False\n\n    for char in decimal_part:\n        if not char.isdigit():\n            return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.replace(',', '')\n    try:\n        decimal.Decimal(num)\n    except ValueError:\n        return False\n    else:\n        return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' in num and num.count('.') == 1:\n        parts = num.split('.')\n        if len(parts[0]) <= 2 and len(parts[1]) <= 2:\n            return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and len(num.split('.')[1]) == 2:\n        return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    if '.' in num and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove any non-digit characters from the number\n    num = ''.join(filter(str.isdigit, num))\n    # Check if the number has more than 1 decimal point\n    if '.' in num:\n        # Check if there are more than 2 decimal places\n        if len(num.split('.')[-1]) > 2:\n            return False\n    # Convert the number to float and check if it's an integer\n    try:\n        float_num = float(num)\n        if int(float_num) == float_num:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        decimal_num = float(num)\n        if decimal_num.is_integer():\n            return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove all non-numeric characters from the string\n    num = ''.join(filter(str.isdigit, num))\n    \n    # Check if the string is empty\n    if not num:\n        return False\n    \n    # Check if the string contains only one digit\n    if len(num)!= 1:\n        return False\n    \n    # Check if the first character is a zero\n    if num[0] == '0':\n        return False\n    \n    # Convert the string to float and check its decimal place\n    decimal_place = num.index('.')\n    float_num = float(num)\n    decimal_part = float_num - int(float_num)\n    \n    if decimal_part >= 0.5:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Check if the input contains non-numeric characters\n    for char in num:\n        if not char.isdigit():\n            return False\n\n    # Check if the input is a decimal number\n    if '.' in num:\n        decimal_index = num.index('.')\n        if decimal_index > 1:\n            return False\n        for i in range(decimal_index+1, len(num)):\n            if num[i]!= '0':\n                return False\n    else:\n        if len(num) > 1:\n            return False\n        if not num.isdigit():\n            return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove any non-numeric characters from the string\n    num = ''.join(filter(str.isdigit, num))\n    # Check if the string is empty\n    if not num:\n        return False\n    # Check if the string contains a decimal point\n    if '.' in num:\n        # Split the string at the decimal point\n        parts = num.split('.')\n        # Check if the number of parts is two (i.e. two parts, not just one)\n        if len(parts)!= 2:\n            return False\n        # Check if the first part is zero (since decimals cannot start with zero)\n        if parts[0] == '0':\n            return False\n        # Check if the second part contains any non-numeric characters\n        if not parts[1].isdigit():\n            return False\n        # Convert the second part to an integer and check if it has a precision of 2\n        try:\n            int(parts[1])\n            if len(str(int(parts[1])))!= 2:\n                return False\n        except ValueError:\n            return False\n    else:\n        # If there is no decimal point, the string must contain only one part (i.e. no digits before or after the decimal point)\n        if not num.isdigit():\n            return False\n        # Convert the string to an integer and check if it has a precision of 2\n        try:\n            int(num)\n            if len(str(int(num)))!= 2:\n                return False\n        except ValueError:\n            return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    # Create a dictionary to store the elements of the list\n    counts = {}\n    # Iterate through the list and update the count for each element\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    # Iterate through the counts dictionary to check if there is only one distinct element\n    for key, value in counts.items():\n        if value == 1:\n            return True\n    # If all elements have a count of 1, then there is only one distinct element in the list\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    # Check if the list has only one element\n    if len(arr) == 1:\n        return True\n    \n    # Sort the list\n    arr.sort()\n    \n    # Check if the first and last element are the same\n    if arr[0] == arr[-1]:\n        return True\n    \n    # Check if the list contains any duplicate elements\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Convert the list to set to remove duplicates\n    unique_numbers = set(arr)\n\n    # Check if the length of the set is 1 or not\n    if len(unique_numbers) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    set_arr = set(arr)\n    if len(set_arr) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # convert the list into a set to remove duplicates\n    unique_set = set(arr)\n\n    # check if the length of the set is 1 or not\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return False\n\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element\")\n    else:\n        print(\"The list contains more than one distinct element\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            days_in_month[1] = 29\n        else:\n            days_in_month[1] = 28\n    \n    return days_in_month[monthnum3-1]"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 == 2:\n            return True\n        else:\n            return False\n    else:\n        if monthnum3 == 2:\n            return True\n        elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False\n    else:\n        return \"Invalid month number. Please enter a valid month number between 1 and 12.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # check if month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number.\"\n    \n    # if valid, check if month has 30 days\n    if monthnum3 == 2:\n        return \"2 is a leap year. It has 29 days.\"\n    elif monthnum3 in [4, 6, 9, 11]:\n        return \"30 days in %d.\" % monthnum3\n    else:\n        return \"30 days in %d.\" % monthnum3"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Check if the month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n    \n    # If the month number is valid, check if it contains 30 days\n    if monthnum3 in [4, 6, 9, 11]:\n        return \"The month contains 30 days\"\n    else:\n        return \"The month does not contain 30 days\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    else:\n        if monthnum3 % 2 == 0:\n            if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n                return True\n            else:\n                return False\n        else:\n            if monthnum3 == 2:\n                return True\n            else:\n                return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # check if month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number.\"\n\n    # check if month number has 30 days\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1,n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Returns the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()  # Sort the array\n    min_diff = float('inf')\n    for i in range(n):\n        diff = arr[n-1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    min_diff = abs(arr[-1] - arr[0])\n\n    # Traverse the array and calculate the minimum difference between any two elements\n    for i in range(1, n-1):\n        diff = abs(arr[i] - arr[i-1]) + abs(arr[i] - arr[i+1])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Find the minimum element in the array\n    min_elem = min(arr)\n\n    # Create an empty list to store the minimum difference pairs\n    min_diff_pairs = []\n\n    # Iterate through the array and find the difference between adjacent elements\n    for i in range(len(arr)):\n        diff = arr[i] - min_elem\n\n        # If the difference is less than or equal to 1, then it is a minimum difference pair\n        if diff <= 1:\n            min_diff_pairs.append((min_elem, diff))\n\n    # Sort the minimum difference pairs in ascending order of difference\n    min_diff_pairs.sort(key=lambda x: x[1])\n\n    # Return the minimum difference pair\n    return min_diff_pairs[0]"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n    \"\"\"\n    # Initialize min_diff as the absolute difference between the first and second element\n    min_diff = abs(arr[1]-arr[0])\n    # Iterate through the array from the second element\n    for i in range(1,n-1):\n        # Calculate the absolute difference between the current element and the next element\n        diff = abs(arr[i+1]-arr[i])\n        # Update min_diff if the current difference is smaller than min_diff\n        if diff < min_diff:\n            min_diff = diff\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # Sort the array in ascending order\n    min_diff = arr[1] - arr[0]  # Calculate the minimum difference\n    for i in range(1, n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input, and returns the minimum difference between any two elements in the array.\n\n    :param arr: The array from which the minimum difference is to be found.\n    :param n: The size of the array.\n    :return: The minimum difference between any two elements in the array.\n    \"\"\"\n    if n < 2:\n        return None\n\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort() # sort the array in ascending order\n    min_diff = float('inf') # initialize the minimum difference as infinite\n    for i in range(n-1): # iterate over the array n-1 times\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff: # if the current difference is less than the minimum difference\n            min_diff = diff # update the minimum difference\n    return min_diff # return the minimum difference"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    prev = float('inf')\n    for i in range(n):\n        if i > 0:\n            diff = arr[i] - prev\n            if diff < min_diff:\n                min_diff = diff\n        prev = arr[i]\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    # find the minimum element in the array\n    min_val = arr[0]\n    # find the maximum element in the array\n    max_val = arr[0]\n    # loop through the array and update the minimum and maximum values\n    for i in range(1,n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n    # calculate the minimum difference between any two elements in the array\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes a positive integer as input and returns the nth polite number.\n    The nth polite number is defined as the smallest prime number greater than or equal to n.\n    '''\n    # Initialize variables\n    count = 0\n    prime_count = 0\n    prime_list = []\n    number = 2\n\n    # Iterate over the numbers until we find the nth polite number\n    while count < n:\n        # Check if the number is prime\n        is_prime = True\n        for i in range(2, int(math.sqrt(number)) + 1):\n            if number % i == 0:\n                is_prime = False\n                break\n\n        # If the number is prime, add it to the list of primes and increment the count\n        if is_prime:\n            prime_list.append(number)\n            prime_count += 1\n\n        # Increment the count\n        count += 1\n\n        # Increment the number to check\n        number += 1\n\n    # If the nth polite number is not in the list of primes, return None\n    if prime_count < n:\n        return None\n\n    # Return the nth polite number\n    return prime_list[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    def nth_polite_number(n):\n        # number of factors of 3\n        num_3 = n // 3\n        # number of factors of 5\n        num_5 = (n * 2) // 5\n        # number of factors of 7\n        num_7 = (n * 2) // 7\n        # number of factors of 11\n        num_11 = (n * 2) // 11\n        # number of factors of 13\n        num_13 = (n * 2) // 13\n        # number of factors of 17\n        num_17 = (n * 2) // 17\n\n        # number of factors of 19\n        num_19 = (n * 2) // 19\n        # number of factors of 23\n        num_23 = (n * 2) // 23\n        # number of factors of 29\n        num_29 = (n * 2) // 29\n        # number of factors of 31\n        num_31 = (n * 2) // 31\n\n        # number of factors of 37\n        num_37 = (n * 2) // 37\n        # number of factors of 41\n        num_41 = (n * 2) // 41\n        # number of factors of 43\n        num_43 = (n * 2) // 43\n        # number of factors of 47\n        num_47 = (n * 2) // 47\n\n        # number of factors of 53\n        num_53 = (n * 2) // 53\n        # number of factors of 59\n        num_59 = (n * 2) // 59\n        # number of factors of 61\n        num_61 = (n * 2) // 61\n        # number of factors of 67\n        num_67 = (n * 2) // 67\n\n        # number of factors of 71\n        num_71 = (n * 2) // 71\n        # number of factors of 73\n        num_73 = (n * 2) // 73\n        # number of factors of 79\n        num_79 = (n * 2) // 79\n\n        # number of factors of 83\n        num_83 = (n * 2) // 83\n        # number of factors of 89\n        num_89 = (n * 2) // 89\n        # number of factors of 97\n        num_97 = (n * 2) // 97\n\n        # number of factors of 101\n        num_101 = (n * 2) // 101\n        # number of factors of 103\n        num_103 = (n * 2) // 103\n        # number of factors of 107\n        num_107 = (n * 2) // 107\n        # number of factors of 109\n        num_109 = (n * 2) // 109\n\n        # number of factors of 113\n        num_113 = (n * 2) // 113\n        # number of factors of 127\n        num_127 = (n * 2) // 127\n        # number of factors of 131\n        num_131 = (n * 2) // 131\n        # number of factors of 137\n        num_137 = (n * 2) // 137\n\n        # number of factors of 139\n        num_139 = (n * 2) // 139\n        # number of factors of 149\n        num_149 = (n * 2) // 149\n        # number of factors of 151\n        num_151 = (n * 2) // 151\n        # number of factors of "
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return \"First polite number is 5\"\n    else:\n        # Calculate the sum of cubes of the integers from 1 to n.\n        # If the sum is odd, then n is not a polite number.\n        # If the sum is even, then n is a polite number.\n        sum_of_cubes = sum(int(math.pow(i, 3)) for i in range(1, n+1))\n        return sum_of_cubes % 2!= 0"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\ndef is_polite(n):\n    x = n + 1\n    y = (x/2) + 1\n    sqrt_y = math.sqrt(y)\n    return int(sqrt_y*2)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_number = 1\n    i = 2\n    while i <= n:\n        polite_number += 1\n        i += 1\n        if math.sqrt(polite_number) % 1 == 0:\n            i = polite_number\n    return polite_number\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_polite(n):\n    vowels = \"aeiou\"\n    i = 1\n    while i <= n:\n        polite = \"\"\n        while len(polite) < 3:\n            polite = polite + str(i)\n            i += 1\n        polite = polite[1:]\n        if polite[0] in vowels and polite[1].isalpha() == False:\n            return polite\n    return \"Invalid input\""
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    if n <= 0:\n        return \"Error: Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n):\n            if is_prime(i):\n                return i\n        return n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    num = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            num += i\n    return num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def is_palindrome(num):\n        str_num = str(num)\n        return str_num == str_num[::-1]\n    \n    def is_happy(num):\n        slow = num\n        fast = 1\n        while True:\n            slow = sum([int(digit)**2 for digit in str(slow)])\n            if slow == 1:\n                return True\n            fast = sum([int(digit)**2 for digit in str(fast)])\n            if fast == 1:\n                return True\n            if fast == slow:\n                return False\n    \n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num) and is_palindrome(num) and is_happy(num):\n            count += 1\n        num += 1\n    return num - 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number.\n    '''\n    def is_prime(num): \n        '''\n        Helper function to check if a number is prime or not.\n        '''\n        if num <= 1: \n            return False \n        for i in range(2, int(math.sqrt(num))+1): \n            if num % i == 0: \n                return False \n        return True \n\n    polite = 1 \n    while polite <= n: \n        if is_prime(polite) and is_prime(polite+1): \n            polite += 2 \n        else: \n            polite += 1 \n    return polite"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        l.append((l1[i], l1[i+1]))\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes in a list of numbers and the sum as input and returns the count of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    # initializing count to 0\n    count = 0\n\n    # iterating over each element in the array\n    for i in range(len(arr)):\n        # iterating over remaining elements in the array\n        for j in range(i+1, len(arr)):\n            # checking if the sum of the current element and remaining elements is equal to sum\n            if arr[i] + arr[j] == sum:\n                # incrementing count if it is equal to sum\n                count += 1\n\n    # returning the count of pairs whose sum is equal to sum\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    set1 = set(li1)\n    set2 = set(li2)\n    diff_set = set1.symmetric_difference(set2)\n    return list(diff_set)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    # Initialize an empty list to store the difference\n    diff_list = []\n    # Loop through each element of the first list\n    for elem in li1:\n        # Check if the element is not in the second list\n        if elem not in li2:\n            # If it's not, add it to the difference list\n            diff_list.append(elem)\n    # Return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    difference = []\n    for i in li1:\n        if i not in li2:\n            difference.append(i)\n    return difference"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Return the elements in list1 that are not in list2.\n    \"\"\"\n    result = []\n    for elem in li1:\n        if elem not in li2:\n            result.append(elem)\n    return result"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns their difference.\n    '''\n    # Set a set to store unique elements in both lists\n    diff_set = set(li1) & set(li2)\n    # Convert the set to a list and return it as the difference\n    return list(diff_set)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    # Initialize an empty list to store the difference\n    diff_list = []\n    # Loop through each element in the first list\n    for i in li1:\n        # Check if the element is in the second list\n        if i not in li2:\n            # If it's not in the second list, add it to the difference list\n            diff_list.append(i)\n    # Return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        fourth_power = i**4\n        sum_of_fourth_powers += fourth_power\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    This function calculates the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 4\n        i += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        return odd_num_sum(n-1) + n**4"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize sum to zero\n    sum = 0\n    # loop through first n odd natural numbers\n    for i in range(n):\n        # check if current number is odd\n        if i % 2 == 1:\n            # calculate fourth power of the number and add to the sum\n            sum += i ** 4\n    # return the sum of fourth power of odd natural numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_powers = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_of_powers += i**4\n    return sum_of_powers\n\nn = int(input(\"Enter the value of n: \"))\nresult = odd_num_sum(n)\nprint(\"The sum of fourth power of first\", n, \"odd natural numbers is:\", result)"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Create a stack to store opening parentheses\n    stack = deque()\n\n    # Iterate through the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, pop the last opening parenthesis from the stack\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n\n    # If the stack is not empty at the end, then all parentheses are not balanced\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_parentheses = ['(', '[', '{']\n    close_parentheses = [')', ']', '}']\n    for char in exp:\n        if char in open_parentheses:\n            stack.append(char)\n        elif char in close_parentheses:\n            if not stack:\n                return False\n            if close_parentheses.index(char) == open_parentheses.index(stack[-1]):\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i, char in enumerate(exp):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == 0:\n                return True\n            elif top > 0 and i - top == 1:\n                continue\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i.isalnum():\n            stack.append(i)\n        else:\n            if len(stack) == 0 or not stack[-1].isalnum():\n                return False\n            if stack[-1] == '(' and i!= ')':\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    parentheses = {'(': ')', '[': ']', '{': '}'}\n    for char in exp:\n        if char in parentheses.values():\n            stack.append(char)\n        elif char in parentheses.keys():\n            if not stack or parentheses[char]!= stack.pop():\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i.isalnum():\n            stack.append(i)\n        elif i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if char in ['(', '{', '['] and last_char!= char:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the words with length K or less\n    result = []\n    # Loop through the words and add them to the result list if their length is greater than K\n    for word in words:\n        if len(word) <= K:\n            result.append(word)\n    # Join the words in the result list into a string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Create a new list to store the words with k length\n    new_words = []\n\n    # Iterate through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than or equal to k\n        if len(word) >= K:\n            # If it is, add it to the new list\n            new_words.append(word)\n\n    # Join the new list of words into a single string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    # Create an empty list to store the filtered words\n    filtered_words = []\n    # Loop through the words and check if each word has a length less than K\n    for word in words:\n        if len(word) < K:\n            # If the length is less than K, append the word to the filtered list\n            filtered_words.append(word)\n    # Join the filtered words into a string and return it\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the remaining words\n    remaining_words = []\n\n    # Iterate over the words\n    for word in words:\n        # If the length of the word is not equal to K, append it to the remaining words list\n        if len(word)!= K:\n            remaining_words.append(word)\n\n    # Join the remaining words back into a string and return it\n    return''.join(remaining_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern,text)\n    if result:\n        for i,match in enumerate(result):\n            print(f\"Occurrence: {i+1}\")\n            print(f\"Position: {text.find(match)}\")\n            print(f\"Substring: {match}\")\n            print()\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    for matchNum, match in enumerate(matches, start=1):\n        start = match.start()\n        end = match.end()\n        print(f\"Match {matchNum}: start = {start}, end = {end}\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return (result.group(), result.start(), result.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # use regex to match pattern in text\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        result = re.search(pattern, text)\n        if result:\n            return result.group(), result.start(), result.end()\n        else:\n            return None\n    except re.error:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function takes two arguments, text and pattern. The text argument is the string where we want to search for the pattern.\n    The pattern argument is a regular expression pattern that we want to search for within the text string.\n    \n    The function returns a tuple containing the number of occurrences and the index of the first occurrence of the pattern.\n    \n    If there is no match, the function returns None.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    \n    if not matches:\n        return None\n    \n    else:\n        return (len(matches), matches[0].start())"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Create a regular expression pattern object\n    pattern_object = re.compile(pattern)\n    # Find all the occurrences of the pattern in the string\n    match_object = pattern_object.finditer(text)\n    # Initialize variables to keep track of the match and its position\n    match_found = False\n    match_position = None\n    # Loop through all the matches found\n    for match in match_object:\n        # If a match is found, update the variables to keep track of it\n        match_found = True\n        match_position = match.start()\n    # If a match was found, return a tuple containing the match and its position\n    if match_found:\n        return (match_object[0].group(), match_position)\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([nums[j] for j in range(i, len(nums), 2) if nums[j] % 2!= 0])) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # loop through each odd index in the list\n    for i in range(1, len(nums), 2):\n        # check if the odd index contains odd numbers\n        if not all(n % 2 == 1 for n in nums[i-1:i]):\n            return False\n    # if no odd index contains odd numbers, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_count = 0\n            for j in range(i*2+1, min(i*2+5, len(nums))):\n                if nums[j] % 2!= 0:\n                    odd_count += 1\n                    if odd_count > 1:\n                        return False\n            if odd_count > 1:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            count += 1\n            if count == 2:\n                return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i%2 == 0:\n            if nums[i]%2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    n = len(nums)\n    for i in range(n):\n        if i % 2!= 0: # check if index is odd\n            if nums[i] % 2!= 0: # check if odd number in this position\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 2):\n        if test_str[i] in vowels and test_str[i + 1] in vowels and test_str[i + 2] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(len(test_str) - i - 1):\n            if test_str[j] in vowels and test_str[j+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = 'aeiouAEIOU'\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to keep track of the elements in the list\n    freq = {}\n    # initialize the sum to zero\n    total_sum = 0\n    # loop through the list\n    for num in arr:\n        # check if the number is already in the dictionary\n        if num in freq:\n            # if it is, increment the count\n            freq[num] += 1\n        else:\n            # otherwise, add it to the dictionary with a count of 1\n            freq[num] = 1\n    # loop through the dictionary again and add up the non-repeated elements\n    for num in freq:\n        # if the count is 1, add the number to the total sum\n        if freq[num] == 1:\n            total_sum += num\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    sum_elements = sum(unique_elements)\n    return sum_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    \n    # iterate through the list and update the count of each element in the dictionary\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    \n    # create a list of non-repeated elements\n    non_repeated_elements = []\n    \n    # iterate through the dictionary and add each element to the non-repeated elements list if its count is 1\n    for key, value in count_dict.items():\n        if value == 1:\n            non_repeated_elements.append(key)\n    \n    # calculate the sum of the non-repeated elements\n    sum_non_repeated_elements = sum(non_repeated_elements)\n    \n    # return the sum of the non-repeated elements\n    return sum_non_repeated_elements\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    This function takes in a list of integers and returns the sum of non-repeated elements.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_elements = set(arr)\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through the unique elements and add them to the sum\n    for element in unique_elements:\n        sum += element\n    # Return the sum of non-repeated elements\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n\n    # Iterate through the list and add each element to the set if it's not already there\n    for element in arr:\n        if element not in unique_set:\n            unique_set.add(element)\n\n    # Initialize a variable to store the sum of the unique elements\n    sum_unique = 0\n\n    # Iterate through the set and add the sum of its elements to the sum_unique variable\n    for element in unique_set:\n        sum_unique += element\n\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    \n    # loop through the list and update the frequency dictionary\n    for element in arr:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n            \n    # initialize the sum variable to zero\n    sum_non_repeated = 0\n    \n    # loop through the list again and add each element that appears only once to the sum\n    for element in arr:\n        if freq_dict[element] == 1:\n            sum_non_repeated += element\n            \n    # return the sum of the non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Iterate through the list and update the frequency of each element\n    for num in arr:\n        if num not in freq_dict:\n            freq_dict[num] = 1\n        else:\n            freq_dict[num] += 1\n    \n    # Initialize the sum variable to 0\n    total_sum = 0\n    \n    # Iterate through the dictionary and add up the non-repeated elements\n    for num in freq_dict:\n        if freq_dict[num] == 1:\n            total_sum += num\n    \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Convert the list to set to remove duplicate elements\n    unique_set = set(arr)\n\n    # Convert the set back to a list and sum it up\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # calculate the sum of unique elements\n    unique_sum = sum(unique_set)\n    # return the sum\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n    # Calculate the sum of unique elements\n    unique_sum = sum(unique_set)\n    # Return the sum of unique elements\n    return unique_sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if len(list(group)) > 1:\n            sublist = list(group)\n            for i in range(1, len(sublist)):\n                sublist[i] = sublist[i] + [sublist[i-1]]\n            yield sublist"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[k, list(g)] for k, g in groupby(list1) if k == k[-1]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function packs consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key:\n            result.append(list(group))\n        else:\n            result[-1].extend(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if key == 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # Use itertools.groupby to group the list by consecutive elements\n    grouped_list = groupby(list1)\n\n    # Use a list comprehension to create a new list that contains the sublists\n    sublists = [list(g) for k, g in grouped_list]\n\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use groupby() to group consecutive duplicates of elements in list1\n    group1 = groupby(list1)\n\n    # Create an empty list to store sublists\n    result = []\n\n    # Iterate through the groups\n    for key, group in group1:\n        # Append the first element of the group to a new sublist\n        sublist = [next(group)]\n\n        # Iterate through the remaining elements of the group\n        for element in group:\n            # If the next element is the same as the current one, add it to the sublist\n            if element == next(group):\n                sublist.append(element)\n            # Otherwise, create a new sublist for the current group and append the sublist to the result list\n            else:\n                result.append(sublist)\n                sublist = [element]\n\n    # Append the last sublist to the result list\n    if sublist:\n        result.append(sublist)\n\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def group_consecutive_duplicates(iterable):\n        return [list(g) for k, g in groupby(iterable) if not k]\n    \n    return group_consecutive_duplicates(list1)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Convert the list to a set to eliminate duplicates\n    set_list1 = set(list1)\n\n    # Use a generator expression to group the elements by their indices\n    grouped_list = (list(g) for i, g in groupby(enumerate(set_list1), lambda x: x[0]-x[1]))\n\n    # Convert the generator expression to a list to obtain the packed sublists\n    packed_list = list(grouped_list)\n\n    # Return the packed sublists\n    return packed_list"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        if type(item) == list:\n            key = tuple(item)\n            if key in sublists:\n                sublists[key] += 1\n            else:\n                sublists[key] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_lsts = set(tuple(lst) for lst in lst)\n    # Create a dictionary to store the count of each unique list\n    counts = {}\n    # Iterate over the unique lists and count their occurrences\n    for lst in unique_lsts:\n        counts[lst] = lst in lsts_list\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the counts\n    count_dict = {}\n\n    # Loop through the list and create a tuple for each list\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        # If the tuple is not in the dictionary, add it with a count of 1\n        if sublist_tuple not in count_dict:\n            count_dict[sublist_tuple] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            count_dict[sublist_tuple] += 1\n\n    # Return the dictionary containing the counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Loop over all possible sublists of the input list\n    for i in range(1, len(list1) + 1):\n        for sublist in itertools.combinations(list1, i):\n            # Convert the sublist to a tuple and add it to the dictionary if it's not already there\n            tuple_sublist = tuple(sublist)\n            if tuple_sublist not in counts:\n                counts[tuple_sublist] = 1\n            else:\n                counts[tuple_sublist] += 1\n    # Return the dictionary\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in count_dict:\n                count_dict[item] += 1\n            else:\n                count_dict[item] = 1\n    return count_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    '''\n    This function counts the number of unique sublists in a given list.\n    '''\n    count = {}\n    for i in range(1, len(lst)+1):\n        for j in range(i, len(lst)+1):\n            sublist = lst[j-i]\n            if sublist not in count:\n                count[sublist] = 1\n            else:\n                count[sublist] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Creating an empty dictionary to store the count of unique sublists\n    count_dict = {}\n    \n    # Looping through each list in the input list\n    for i in range(len(list1)):\n        # Extracting the current list from the input list\n        current_list = list1[i]\n        \n        # Checking if the current list is already a tuple\n        if not isinstance(current_list, tuple):\n            # If the current list is not a tuple, turning it into a tuple and adding it to the dictionary\n            current_list = (current_list,)\n            if current_list in count_dict:\n                count_dict[current_list] += 1\n            else:\n                count_dict[current_list] = 1\n    \n    # Returning the dictionary of unique sublists and their count\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublists = {}\n    for lst in list1:\n        lst = tuple(lst)\n        if lst in unique_sublists:\n            unique_sublists[lst] += 1\n        else:\n            unique_sublists[lst] = 1\n    return unique_sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts of sublists\n    counts = {}\n    \n    # Loop over each element of the input list\n    for item in list1:\n        # Convert the list item to a tuple\n        item = tuple(item)\n        \n        # If the tuple is already in the dictionary, increment its count\n        if item in counts:\n            counts[item] += 1\n        # Otherwise, add the tuple as a new key with a count of 1\n        else:\n            counts[item] = 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create an empty dictionary to store the count of lists\n    count_dict = {}\n    # Loop through each element in the list1\n    for element in list1:\n        # If the element is a list, convert it to a tuple and check if it already exists in the dictionary\n        if isinstance(element, list):\n            tuple_element = tuple(element)\n            if tuple_element in count_dict:\n                # If the tuple already exists, increment its count\n                count_dict[tuple_element] += 1\n            else:\n                # If the tuple does not exist, add it to the dictionary with a count of 1\n                count_dict[tuple_element] = 1\n    # Return the dictionary with the counts\n    return count_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                print(test_list[i], test_list[j])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i:j+1]) == total_sum:\n                print(\"The combination of sums is:\", test_list[i:j+1])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # function to calculate the sum of a tuple\n    def calculate_sum(t):\n        return sum(t)\n    \n    # function to find the combinations of sums with tuples in the given tuple list\n    def combinations_with_sums(lst):\n        # list to store the combinations of sums with tuples in the given tuple list\n        result = []\n        \n        # sort the given tuple list\n        lst.sort()\n        \n        # calculate the sum of the first tuple in the list\n        total_sum = calculate_sum(lst[0])\n        \n        # iterate through the given tuple list and find all the combinations of sums with tuples\n        for i in range(1, len(lst)):\n            # calculate the sum of the current tuple and the total sum of all combinations of sums with tuples before the current tuple\n            curr_sum = calculate_sum(lst[i]) + total_sum\n            \n            # add the current combination of sums with tuples to the result list\n            result.append(lst[0:i+1])\n            \n            # update the total sum for the next iteration\n            total_sum = curr_sum\n            \n        # return the result list\n        return result\n    \n    # return the combinations of sums with tuples in the given tuple list\n    return combinations_with_sums(test_list)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples as input and returns a list of all possible combinations of sums of tuples.\n    '''\n    # Sort the list of tuples in ascending order\n    test_list.sort(key=lambda x: sum(x))\n    \n    # Initialize a list to store the combinations\n    combinations_list = []\n    \n    # Iterate over all possible pairs of tuples\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Check if the sum of the two tuples is equal to the first tuple's sum\n            if sum(test_list[i]) == sum(test_list[j]):\n                # Append the tuple as a combination to the list\n                combinations_list.append((test_list[i], test_list[j]))\n    \n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                print(\"Empty tuple:\", j)\n            elif sum(j) in test_list:\n                print(\"Combination of sums:\", j)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Creating a list of tuples with all possible sum combinations\n    combinations_list = list(combinations(test_list, r=2))\n\n    # Filtering out combinations that don't have all unique elements \n    filtered_combinations = [tuple(sorted(combination)) for combination in combinations_list if len(set(combination)) == len(combination)]\n\n    return filtered_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    total_sum = sum(test_list)\n    for i in range(1, n + 1):\n        for comb in combinations(range(n), i):\n            combination_sum = sum(test_list[x] for x in comb)\n            if combination_sum == total_sum:\n                print(\"Sum is:\", combination_sum)\n                print(\"Combinations:\", comb)\n                break\n    print(\"Done\")"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # get the sum of the first element in the tuple list\n    total = sum(test_list[0])\n\n    # use itertools.combinations to find all combinations of sums\n    result = list(combinations(test_list, len(test_list)))\n\n    # filter out the combinations that don't add up to the total\n    filtered_result = [x for x in result if sum(x) == total]\n\n    return filtered_result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Find all combinations of sums from a given tuple list.\n    '''\n    return combinations(test_list, len(test_list))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    total_sum = sum(test_list)\n    for i in range(1, total_sum+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == total_sum:\n                print(comb)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count == 2:\n                return True\n\n    return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(f\"{n} has even number of divisors\")\n    else:\n        print(f\"{n} has odd number of divisors\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    count = 0\n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Initialize count of divisors to 0\n    count = 0 \n\n    # Iterate through the numbers from 1 to n-1\n    for i in range(1, n+1): \n        # Check if i is a divisor of n\n        if n % i == 0: \n            # If it is, increment the count\n            count += 1 \n\n    # Check if the count of divisors is even or not\n    if count % 2 == 0: \n        # If even, print True\n        print(True)\n    else: \n        # If odd, print False\n        print(False)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = math.sqrt(n) + 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Calculating number of divisors\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    # Counting number of divisors\n    count_div = len(divisors)\n    # Checking whether count is even\n    if count_div % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function calculates the number of divisors of a given number n and checks whether the count is even or odd.\n    \"\"\"\n    \n    # Calculate the number of divisors using a list comprehension\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    \n    # Check the number of divisors\n    count = len(divisors)\n    \n    # If the count is even, return True\n    if count % 2 == 0:\n        return True\n    # If the count is odd, return False\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer as input and returns True if the count of its divisors is even, False otherwise.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n\n    if sum(divisors) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize sum of odd length subarrays\n    odd_sum = 0\n    # Loop through all subarrays\n    for i in range(n):\n        # If the current subarray length is odd, add the current element to the sum\n        if i % 2!= 0:\n            odd_sum += arr[i]\n        # If the current subarray length is even, add 0 to the sum\n        else:\n            odd_sum = 0\n            # Loop through all elements in the subarray and add them to the sum\n            for j in range(i):\n                odd_sum += arr[j]\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i, n):\n            if j-i+1 % 2 == 1:\n                sum_odd += arr[j] - arr[i]\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2 == 1:\n                sub_arr = arr[i:j+1]\n                result += sum(sub_arr)\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) % 2 == 0:\n        return 0\n    else:\n        sum_odd_length = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)+1, 2):\n                sum_odd_length += arr[j-2]\n        return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    count = 0\n    for i in range(n):\n        if count % 2!= 0:\n            total_sum += arr[i]\n        count += 1\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (j-i+1) % 2!= 0:\n                sum += arr[j] - arr[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize sum and count to zero\n    sum = 0\n    count = 0\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n\n        # If the current element is odd, add it to the sum and increment the count\n        if i % 2 == 1:\n            sum += arr[i]\n            count += 1\n\n        # If the current element is even and the count is odd, subtract the current element from the sum and decrement the count\n        elif count > 0 and i % 2 == 0:\n            sum -= arr[i]\n            count -= 1\n\n    # Return the sum of all odd length subarrays\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    odd_sum = 0\n    even_sum = 0\n    \n    for i in range(n):\n        if i % 2!= 0:\n            count += 1\n            odd_sum += arr[i]\n        else:\n            even_sum += arr[i]\n            \n    if count % 2 == 0:\n        return even_sum - odd_sum\n    else:\n        return even_sum + odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, min(n, i+5)):\n            sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            sum += arr[j] - arr[i]\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert RGB to HSV\n    h = None\n    s = None\n    v = None\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n        s = 0\n    elif cmax == r:\n        h = 60 * ((g - b) / delta)\n    elif cmax == g:\n        h = 60 * ((b - r) / delta) + 120\n    elif cmax == b:\n        h = 60 * ((r - g) / delta) + 240\n\n    if delta == 0:\n        v = cmax\n    else:\n        v = cmax / 255\n\n    if s == 0:\n        s = 0\n    elif s == 255:\n        s = 0\n    else:\n        s = (cmax - cmin) / 255\n\n    return (int(h), int(s * 100), int(v * 100))\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color\n    \n    :param r: Red color value in range [0, 255]\n    :param g: Green color value in range [0, 255]\n    :param b: Blue color value in range [0, 255]\n    \n    :return: Hue, Saturation and Value of the converted color\n    \"\"\"\n    r, g, b = r/255, g/255, b/255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        h = s = 0 # achromatic\n    else:\n        s = delta / (1 - abs(2*cmax - 1))\n        if delta == r:\n            h = (g - b) / delta\n        elif delta == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        if h < 0:\n            h += 6\n        elif h > 6:\n            h -= 6\n            \n    return h, s, cmax"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert r,g,b to float values\n    r, g, b = float(r)/255.0, float(g)/255.0, float(b)/255.0\n    \n    # Find max and min values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Find difference between max and min values\n    delta = max_val - min_val\n    \n    # Compute hue\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n    \n    # Compute saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n    \n    # Compute value\n    value = max_val\n    \n    # Convert hue, saturation, value to degrees and percentages\n    hue *= 60.0\n    hue = int(hue)\n    hue = hue % 360\n    \n    saturation *= 100.0\n    saturation = round(saturation, 2)\n    \n    value *= 100.0\n    value = round(value, 2)\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if max_val == 0:\n        h = 0\n    else:\n        h = 60 * (r, g, b) / (max_val + delta)\n        if h < 0:\n            h += 360\n    \n    if max_val == min_val:\n        s = 0\n    else:\n        s = delta / max_val\n    \n    v = max_val\n    \n    # Convert HSV to RGB\n    if delta == 0:\n        r = g = b = 0\n    else:\n        if h < 60:\n            f = (h / 60) % 2\n            p = v * (1 - s)\n            q = v * (1 - (s * f))\n            t = v * (1 - (s * (1 - f)))\n        elif h < 120:\n            f = (h / 60) % 2\n            p = v * (1 - (s * (1 - f)))\n            q = v * (1 - s)\n            t = v * (1 - (s * f))\n        elif h < 180:\n            f = (h / 60) % 2\n            p = v * (1 - (s * f))\n            q = v * (1 - (s * (1 - f)))\n            t = v * (1 - s)\n        elif h < 240:\n            f = (h / 60) % 2\n            p = v * (1 - s)\n            q = v * (1 - (s * (1 - f)))\n            t = v * (1 - (s * (1 - f)))\n        elif h < 300:\n            f = (h / 60) % 2\n            p = v * (1 - (s * f))\n            q = v * (1 - s)\n            t = v * (1 - (s * (1 - f)))\n        else:\n            f = (h / 60) % 2\n            p = v * (1 - (s * (1 - f)))\n            q = v * (1 - (s * (1 - f)))\n            t = v * (1 - (s * s))\n            \n        if r == max_val:\n            r = t\n        elif g == max_val:\n            r = q\n        elif b == max_val:\n            r = p\n        \n        if r == max_val:\n            g = t\n        elif g == max_val:\n            g = p\n        elif b == max_val:\n            g = v\n        \n        if r == max_val:\n            b = p\n        elif g == max_val:\n            b = v\n        else:\n            b = t\n            \n    return (int(r*255), int(g*255), int(b*255))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if delta == 0:\n        hue = 0\n    elif max_value == r:\n        hue = 60 * ((g - b) / delta) % 6\n    elif max_value == g:\n        hue = 60 * ((b - r) / delta) + 120\n    else:\n        hue = 60 * ((r - g) / delta) + 240\n    if hue < 0:\n        hue += 360\n    hsv_color = (hue, delta / max_value, max_value)\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    maximum = max(r, g, b)\n    minimum = min(r, g, b)\n    \n    if maximum == minimum:\n        h = 0\n        s = 0\n    else:\n        delta = maximum - minimum\n        if maximum == r:\n            h = (g - b) / delta\n        elif maximum == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        if h < 0:\n            h += 6\n        \n        s = delta / maximum\n        \n    v = maximum\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255\n    g = g / 255\n    b = b / 255\n    \n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if cmax == 0:\n        h = 0\n    else:\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        if h < 0:\n            h += 6\n            \n    if delta == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    \n    v = cmax\n    \n    return round(h * 360), round(s * 100), round(v * 100)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    # Calculate the minimum, maximum, and range of the rgb values.\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    range_val = max_val - min_val\n\n    # Calculate the saturation value.\n    if range_val == 0:\n        # If the range is 0, then the saturation is 0.\n        saturation = 0\n    else:\n        saturation = range_val / max_val\n\n    # Calculate the hue value.\n    if r == max_val:\n        # If the maximum value of the red component is the same as the maximum value of the rgb, then the hue is between 0 and 60 degrees.\n        hue = 60 * (((g - b) / range_val) % 6)\n    elif g == max_val:\n        # If the maximum value of the green component is the same as the maximum value of the rgb, then the hue is between 120 and 180 degrees.\n        hue = 60 * (((b - r) / range_val) + 2)\n    else:\n        # If the maximum value of the blue component is the same as the maximum value of the rgb, then the hue is between 180 and 240 degrees.\n        hue = 60 * (((r - g) / range_val) + 4)\n\n    # Calculate the value of the hue.\n    if hue < 0:\n        hue += 360\n\n    # Return the hsv values as a tuple.\n    return hue, saturation, max_val"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert an RGB color to HSV values.\n\n    Parameters:\n    r (int): Red value in the range [0, 255].\n    g (int): Green value in the range [0, 255].\n    b (int): Blue value in the range [0, 255].\n\n    Returns:\n    tuple: (hue (float), saturation (float), value (float)) in the range [0, 1].\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    if max_value == 0:\n        hue = 0\n        saturation = 0\n    else:\n        hue = delta / max_value\n        if max_value == r:\n            saturation = (g - b) / delta\n        elif max_value == g:\n            saturation = 2 + (b - r) / delta\n        else:\n            saturation = 4 + (r - g) / delta\n\n        if saturation < 0:\n            saturation += 1\n\n        if delta == 0:\n            hue = 0\n            saturation = 0\n\n    value = max_value\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV color. The HSV color model is widely used in computer graphics and image processing. The Hue, Saturation, Value (HSV) color model is a widely used model to represent color in digital images.\n\n    This function takes an RGB tuple as input and returns an HSV tuple as output.\n\n    :param r: The red value of the color (0-255).\n    :param g: The green value of the color (0-255).\n    :param b: The blue value of the color (0-255).\n    :return: A tuple containing the hue, saturation, and value of the color as floats in the range of [0, 1].\n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    if max_val == min_val:\n        hue = saturation = value = 0\n    else:\n        if max_val == r:\n            hue = (g - b) / delta\n        elif max_val == g:\n            hue = 2 + (b - r) / delta\n        else:\n            hue = 4 + (r - g) / delta\n\n        hue = (hue * 60) % 360\n\n        if hue < 0:\n            hue += 360\n\n        saturation = delta / max_val\n\n        if saturation == 0:\n            value = max_val\n        else:\n            value = delta / (1 - abs(2 * min_val - max_val))\n\n    return (hue, saturation, value)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count > 0 and odd_count > 0:\n        product = list1[0] * list1[-1]\n\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product = num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                product = num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count == 0:\n            continue\n        elif odd_count == 0:\n            continue\n        else:\n            product *= num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    This function takes a list as input, and finds the product of the first even and odd number.\n\n    :param list1: A list of integers.\n    :return: The product of the first even and odd number in the list.\n    \"\"\"\n    # Initialize two variables to store the product of even and odd numbers\n    even_product = 1\n    odd_product = 1\n\n    # Loop through the list and find the product of even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n\n    # Return the product of even and odd numbers\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the product of first even and odd number in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count > 0:\n        product *= lst[0]\n    if odd_count > 0:\n        product *= lst[1]\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_count = 0\n    odd_count = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count > 0 and odd_count > 0:\n        result = lst[0] * lst[1]\n        return result\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    if even > odd:\n        return even * odd\n    else:\n        return odd * even"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 1\n    odd_num = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_num *= num\n        else:\n            odd_num *= num\n    return even_num * odd_num"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert tuple string to tuple\n    test_tuple = tuple(map(int, test_str.split(',')))\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by ',' and''\n    str_list = test_str.split(',')\n    # Loop through the string list\n    for i in range(len(str_list)):\n        # Check if the string is a number\n        if str_list[i].isdigit():\n            # Convert the string to integer and append to the integer list\n            int_list.append(int(str_list[i]))\n        else:\n            # If the string is not a number, raise a ValueError\n            raise ValueError('Invalid input')\n    # Return the integer list\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define a tuple of tuples\n    nested_tuple = ()\n    for char in test_str:\n        # Convert each character to an integer\n        nested_tuple += (int(char),)\n\n    # Convert the nested tuple to an integer tuple\n    final_tuple = tuple(nested_tuple)\n\n    return final_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into a list of strings using comma as separator\n    str_list = test_str.split(',')\n    # create an empty list to store integers\n    int_list = []\n    # loop through each string in the list and convert it to an integer\n    for string in str_list:\n        int_list.append(int(string))\n    # convert the list of integers into a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert string to list\n    lst = [int(x) for x in test_str]\n    # convert list to tuple\n    return tuple(lst)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by space and convert it to a list\n    lst = test_str.split()\n    # Create a new empty list to store integers\n    int_lst = []\n    # Loop through the list and convert each element to an integer\n    for item in lst:\n        try:\n            # Convert the element to integer and append to the integer list\n            int_lst.append(int(item))\n        except ValueError:\n            # If element cannot be converted to integer, raise a ValueError\n            raise ValueError(\"String is not a valid integer tuple\")\n    # Return the integer list as a tuple\n    return tuple(int_lst)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple(int(x) for x in test_str.split(','))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_list = []\n    str_list = []\n    for i in test_str:\n        if isinstance(i, str):\n            str_list.append(i)\n        else:\n            int_list.append(int(i))\n    return tuple(int_list), tuple(str_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function takes a tuple of strings and integers as input and converts it to a tuple of integers.\n    '''\n    int_tuple = ()\n    for elem in test_str:\n        if elem.isdigit():\n            int_tuple += (int(elem),)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_list = []\n    for s in str_list:\n        int_list.append(int(s.strip()))\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # bisect.bisect_right() returns the index where the value should be inserted\n    # to maintain the sorted order, we need to find the index of the first element greater than x\n    index = bisect.bisect_right(a, x)\n\n    # if the value is already in the list, we need to find the right index to insert the new value\n    if index < len(a) and a[index] == x:\n        # iterate through the list from the right index to the end\n        for i in range(index, len(a)):\n            if a[i]!= x:\n                # return the i+1 index as the right insertion point\n                return i+1\n    # if the value is not already in the list, we just need to return the index as the right insertion point\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif index == 0 or a[index - 1] < x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect.bisect_right() function to find the right insertion point\n    pos = bisect.bisect_right(a, x)\n    return pos"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        i -= 1\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect to find the index of the last element smaller than x\n    index = bisect.bisect_left(a, x)\n    \n    # If x is equal to the last element in the list, the index will be equal to the length of the list\n    if index == len(a):\n        return index\n    \n    # If x is less than the last element in the list, the index will be the right insertion point\n    if a[index] < x:\n        return index + 1\n    \n    # If x is greater than the last element in the list, the index will be the index of the last element\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return right_insertion(a[index:], x)\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    # Binary search for the right insertion point\n    i = bisect.bisect_right(a, x)\n    # If the value is greater than the last element, return the length of the array\n    if i == len(a):\n        return len(a)\n    # If the value is greater than the middle element, move the search range to the right\n    elif a[i] > x:\n        return right_insertion(a[:i], x)\n    # Otherwise, return the index of the middle element\n    else:\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the insertion point of the element using bisect.bisect_right() function\n    i = bisect.bisect_right(a, x)\n    # Return the index i, indicating that the value x should be inserted to the right of the i-th element in the array\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r\"a(?=.*b{3})\")\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a(b){3}')\n    return bool(pattern.search(text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return 'Match found'\n    else:\n        return 'No match found'"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a.*b{3}\"\n    return re.findall(pattern, text)\n\ntext = \"abcabcbb\"\nprint(text_match_three(text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{2,}b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # check if the list is not empty\n    if not test_list:\n        # if the list is empty, return the string as a tuple\n        return (test_str,)\n    # create a new list with the elements of the original list and the string\n    new_list = test_list + (test_str,)\n    # return the new list as a tuple\n    return tuple(new_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # convert the list to a tuple\n    new_tuple = tuple(test_list)\n    # append the string to the tuple\n    new_tuple += (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): A list of items to be included in the new tuple.\n    test_str (str): The string to be included in the new tuple.\n\n    Returns:\n    tuple: A new tuple containing the given string and list.\n    \"\"\"\n\n    # Combine the list and string into a single tuple\n    new_tuple = (test_str, *test_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if isinstance(test_list, list) and isinstance(test_str, str):\n        new_tuple = (test_list, test_str)\n        return new_tuple\n    else:\n        print(\"One or both of the inputs are not a list or a string.\")"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_str)\n    for item in test_list:\n        new_tup = new_tup + (item,)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple_list = []\n    for i in range(len(test_list)):\n        new_tuple_list.append(test_list[i] + test_str)\n    return tuple(new_tuple_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert list to tuple\n    test_tuple = tuple(test_list)\n    # Append string to tuple\n    test_tuple += (test_str,)\n    # Return new tuple\n    return test_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    return (test_list + test_str, test_list * 2)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_list)\n    new_tup += (test_str,)\n    return new_tup\n"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if any(num % 2 == 0 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count += 1\n            if count == 2:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count > 2:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    for i in range(0, len(nums), 2):\n        if len(set(str(nums[i]))) % 2!= 0:\n            return False\n    \n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and i % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        if even_count == len(nums) // 2:\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2]))!= 2:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    count = 0\n    for i in range(0, len(nums), 2):\n        if sum([1 for num in nums[i:] if num % 2 == 0]) % 2 == 0:\n            count += 1\n    return count == len(nums)//2"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_tup = [item for sublist in test_tup for item in sublist]\n    return flattened_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                new_tup.append(subitem)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    for item in test_tup:\n        if isinstance(item, tuple):\n            remove_nested(item)\n        else:\n            test_tup.remove(item)\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                new_list.append(subitem)\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([i for sublist in test_tup for i in sublist])"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for tup in test_tup for x in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup)!= tuple:\n        return test_tup\n    else:\n        return tuple(remove_nested(elem) for elem in test_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for subitem in item:\n                new_list.append(subitem)\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i], list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in two arguments: the sorted array and the element to search for.\n    The function returns the index of the last occurrence of the element in the array.\n    If the element is not found in the array, the function returns -1.\n    \"\"\"\n\n    # Initialize the left and right pointers to the first and last index of the array respectively.\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize the last index found to -1 to start.\n    last_index = -1\n\n    # Loop while the left pointer is less than or equal to the right pointer.\n    while left <= right:\n        # Compute the middle index of the array.\n        mid = (left + right) // 2\n\n        # If the middle element is equal to the search element, return the index.\n        if arr[mid] == x:\n            last_index = mid\n            right = mid - 1\n        # If the middle element is less than the search element,\n        # move the left pointer to the right.\n        elif arr[mid] < x:\n            left = mid + 1\n        # If the middle element is greater than the search element,\n        # move the right pointer to the left.\n        else:\n            right = mid - 1\n\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            if mid == 0 or arr[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Find the last index of the element in the array\n    last_index = bisect.bisect_left(arr, x)\n    if last_index == len(arr) or arr[last_index]!= x:\n        # If the element is not found, return -1\n        return -1\n    else:\n        # If the element is found, return its index\n        return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left,right=0,len(arr)-1\n    while left<=right:\n        mid=(left+right)//2\n        if arr[mid]==x:\n            right=mid-1\n        elif arr[mid]<x:\n            left=mid+1\n        else:\n            right=mid-1\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # If the element is present at the beginning of the array\n    if arr[left] == x:\n        return left\n    # If the element is present at the end of the array\n    elif arr[right] == x:\n        return right\n\n    # If the element is present in the array\n    while left < right:\n        mid = (left + right) // 2\n\n        # If the element is found\n        if arr[mid] == x:\n            # If the element is on the left half of the array\n            if mid > 0 and arr[mid - 1]!= x:\n                return mid\n            # If the element is on the right half of the array\n            elif mid < len(arr) - 1 and arr[mid + 1]!= x:\n                return mid\n            # If the element is not on the left or right half of the array\n            else:\n                left = mid + 1\n        # If the element is not found in the left half of the array\n        elif arr[mid] < x:\n            left = mid + 1\n        # If the element is not found in the right half of the array\n        else:\n            right = mid - 1\n\n    # If the element is not found in the array\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i < 0:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            index = i\n    return index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the last position to -1\n    last_pos = -1\n\n    # Traverse the array starting from the last element\n    for i in range(len(arr)-1, -1, -1):\n        # If the element is found, update the last position\n        if arr[i] == x:\n            last_pos = i\n\n    # Return the last position\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left if left < len(arr) and arr[left] == x else -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=[^ab])a(?=[^ab]*b)'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict:\n        total_sum += dict[item]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for value in dict.values():\n        sum_of_items += value\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize the sum to zero\n    sum = 0\n    # loop through each number from 1 to n\n    for i in range(1, n+1):\n        # if the number is odd, add it to the sum\n        if i % 2!= 0:\n            sum += i\n    # return the sum of all odd natural numbers within the range l and r\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 0, n-1\n    sum_odd = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum_odd += l\n        l += 1\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range of 1 to n.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # taking input from user\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n\n    # initializing sum variable to 0\n    sum = 0\n\n    # iterating from l to r\n    for i in range(l, r+1):\n        # if i is odd, adding it to sum variable\n        if i % 2!= 0:\n            sum += i\n\n    # returning sum of odd numbers in the given range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n\n    # Initialize variables to store the sum and the current number\n    total = 0\n    current = 1\n\n    # Check if the first number is odd\n    if current % 2!= 0:\n        total += current\n\n    # Iterate through the range of numbers and add the odd numbers to the sum\n    for i in range(2, n+1):\n        current += 2\n        if current % 2!= 0:\n            total += current\n\n    # Return the sum of all odd numbers within the range\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range 1 and n.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_array(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_array(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:  \n        sum += num  \n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Take care of special cases\n    if d == 0:\n        return n\n    if d >= 32:\n        return n << (d - 32)\n    if d < 0:\n        return left_rotate(n, -d)\n\n    # Main function to rotate left bits by d bits\n    def bit_rotate_left(num, bits_to_rotate):\n        if bits_to_rotate == 0:\n            return num\n        mask = (1 << bits_to_rotate) - 1\n        return ((num << bits_to_rotate) & mask) | (num & ((1 << bits_to_rotate) - 1))\n\n    # Calculate the number of bits to rotate\n    num_bits = 32\n    bits_to_rotate = num_bits - d\n\n    # Perform rotation\n    result = bit_rotate_left(n, bits_to_rotate)\n\n    # Return the rotated number\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    This function takes a 32-bit integer n and an integer d as input and returns the rotated left bits by d bits.\n    \"\"\"\n    # get the number of bits in n\n    num_bits = 32\n    \n    # check if d is negative or greater than or equal to num_bits\n    if d < 0 or d >= num_bits:\n        print(\"Error: d is negative or greater than or equal to num_bits\")\n        return None\n    \n    # get the leftmost d bits from n\n    leftmost_d_bits = (n & ((1 << d) - 1))\n    \n    # get the rightmost bits from n\n    rightmost_bits = n >> d\n    \n    # combine the leftmost d bits with the rightmost bits\n    rotated_bits = leftmost_d_bits | rightmost_bits\n    \n    # return the rotated bits\n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Check if the number is negative\n    if n < 0:\n        n = n & 0xffffffff # clear all the bits except for the sign bit\n    # Compute the number of full rotations\n    num_rotations = d // 32\n    # Compute the remaining bits to rotate\n    remaining_bits = d % 32\n    # Perform the rotations\n    rotated_n = (n << remaining_bits) | (n >> (32 - remaining_bits))\n    # Perform the final rotation\n    result = (rotated_n << (num_rotations * 32)) | (n >> ((num_rotations + 1) * 32))\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert d to binary\n    binary_d = bin(d)[2:]\n    # pad the binary string with zeros\n    binary_d = '0'*(32-len(binary_d))+binary_d\n    # convert binary string to integer\n    shift_amount = int(binary_d, 2)\n    # left rotate the number\n    rotated_number = (n << shift_amount) | (n >> (32-shift_amount))\n    # return the rotated number\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):   \n    \"\"\"\n    This function takes a 32-bit integer n and a positive integer d, and returns the integer obtained by rotating the bits to the left by d bits.\n    \"\"\"\n    # calculate the number of bits to rotate\n    bits_to_rotate = d % 32\n    \n    # shift the bits to the left by the number of bits to rotate\n    shifted_bits = n << bits_to_rotate\n    \n    # shift the least significant bits to the right by the number of bits to rotate\n    least_significant_bits = n >> (32 - bits_to_rotate)\n    \n    # combine the shifted bits and the least significant bits\n    rotated_bits = shifted_bits | least_significant_bits\n    \n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return ((n << d) & mask) | ((n & ((1 << d) - 1)) << (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to a binary string\n    binary_str = bin(n)[2:]\n    # Get the number of bits in the binary string\n    num_bits = len(binary_str)\n    # Calculate the number of bits to shift\n    shift_bits = d % num_bits\n    # Calculate the number of bits to keep\n    keep_bits = num_bits - shift_bits\n    # Calculate the left rotation\n    left_rot = int(binary_str[:keep_bits], 2) << shift_bits | int(binary_str[keep_bits:], 2) >> num_bits - shift_bits\n    # Convert the left rotation back to an integer\n    left_rot = int(left_rot, 2)\n    return left_rot"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary representation\n    binary_str = bin(n)[2:].zfill(32)\n\n    # Calculate the number of left rotations needed\n    rotations = d % 32\n\n    # Calculate the new number of bits to rotate\n    new_bits = 32 - rotations\n\n    # Extract the first new_bits bits of the binary representation and concatenate it with the remaining bits\n    rotated_bits = binary_str[-new_bits:] + binary_str[:-new_bits]\n\n    # Convert the rotated bits back to decimal and return it\n    return int(rotated_bits, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n    \"\"\"\n    # Convert number to binary string\n    binary_str = bin(n)[2:]\n    # Pad with zeros to the left to ensure d bits\n    padding = '0' * (d - len(binary_str))\n    # Combine the padding with the binary string and reverse it\n    rotated_str = padding + binary_str[::-1]\n    # Convert the rotated string back to an integer\n    rotated = int(rotated_str, 2)\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number.\n    \"\"\"\n\n    # Convert the number to binary string and get its length\n    length = len(bin(n)[2:])\n\n    # Check if d is greater than the length of the binary string\n    if d > length:\n        # If d is greater than the length of the binary string,\n        # shift the number to the left by d - length bits and\n        # then rotate the result to the right by d bits.\n        rotated = (n << (d - length)) | (n >> length)\n    else:\n        # If d is not greater than the length of the binary string,\n        # rotate the number to the right by d bits.\n        rotated = (n >> d) | (n << (32 - d))\n\n    return rotated"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expressions\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string using regular expressions.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    # remove all whitespace characters from the string using regex\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    # iterate through the three integers and compare them\n    for i in range(len(x)):\n        if x[i] == y[i] and x[i] == z[i]:\n            count += 1\n    # return the count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        for j in range(i+1, y+1):\n            if i == j:\n                continue\n            if i == z or j == z:\n                count += 1\n            elif i == j:\n                continue\n            elif i == x and j == x:\n                continue\n            elif i == y and j == y:\n                continue\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    # Initialize count variable\n    count = 0\n    \n    # Check for equal values in x and y\n    if x == y:\n        count += 1\n    \n    # Check for equal values in x, y and z\n    if x == y and y == z:\n        count += 1\n    \n    # Check for equal values in x and z\n    if x == z:\n        count += 1\n    \n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x, z+1):\n        if x == y == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x, y+1):\n        for j in range(y, z+1):\n            for k in range(z, i+1):\n                if i == j == k:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or y == z:\n        count += 1\n    if x == y or x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # if all the elements are already sorted return 0\n    if arr == sorted(arr):\n        return 0\n    # if the array is not sorted, then we need to sort it\n    else:\n        sorted_arr = sorted(arr)\n    # check if the array is already sorted\n    if sorted_arr == arr:\n        return 0\n    # if the array is not sorted, we can find the number of rotations by comparing adjacent pairs of elements\n    count = 0\n    for i in range(n):\n        if sorted_arr[i] > sorted_arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i\n        while j < n and arr[j] > arr[j+1]:\n            j += 1\n        if j > i:\n            count += 1\n            arr = arr[j:] + arr[:j]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # To keep track of the maximum number of rotations\n    max_rotations = 0\n    # To keep track of the minimum number of rotations\n    min_rotations = n\n    # To keep track of the smallest element in the array\n    smallest = arr[0]\n    # To keep track of the largest element in the array\n    largest = arr[n-1]\n    \n    for i in range(n-1):\n        # If the element at the current index is greater than the smallest element, then we have to rotate the array\n        if arr[i] > smallest:\n            # Keep track of the number of rotations required\n            rotations = i+1\n            # Update the maximum number of rotations\n            max_rotations = max(max_rotations, rotations)\n            # Update the minimum number of rotations\n            min_rotations = min(min_rotations, rotations)\n            # Update the smallest element in the array\n            smallest = arr[i]\n            # Update the largest element in the array\n            largest = arr[n-1]\n        # If the element at the current index is smaller than the largest element, then we don't have to rotate the array\n        elif arr[i] < largest:\n            continue\n    \n    # Return the count of rotations required\n    return max_rotations - min_rotations + 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Base case: if the array is already sorted, no rotation required\n    if arr == sorted(arr):\n        return 0\n    # Check if the array is already sorted in descending order\n    if arr == sorted(arr, reverse=True):\n        return n\n    # Perform binary search to find the number of rotations required to generate a sorted array\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < arr[mid + 1]:\n            low = mid + 1\n        elif arr[mid] > arr[mid + 1]:\n            high = mid - 1\n        else:\n            return 0\n    # Perform binary search to find the number of rotations required to generate a sorted array in descending order\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[mid + 1]:\n            low = mid + 1\n        elif arr[mid] < arr[mid + 1]:\n            high = mid - 1\n        else:\n            return 0\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_val = max(arr)\n    min_val = min(arr)\n    if max_val - min_val == n - 1:\n        return 1\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    # Check if array is already sorted\n    if is_sorted(arr):\n        return 0\n    # Check if array can be rotated\n    if is_rotated(arr):\n        return 0\n    # Find the pivot element of the array\n    pivot = find_pivot(arr)\n    # Traverse the array from left to right\n    left = 0\n    right = n-1\n    while left <= right:\n        # Check if the left and right pointers cross each other\n        if left < right and arr[left] > pivot and arr[right] < pivot:\n            count += 1\n            left += 1\n            right -= 1\n        elif left < right and arr[left] < pivot and arr[right] > pivot:\n            left += 1\n            right -= 1\n        elif left == right and arr[left] > pivot:\n            break\n        else:\n            left += 1\n    # Check if the array was rotated\n    if left == 0:\n        return count\n    # Check if the array was not rotated\n    return count + 1\n\ndef is_sorted(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n\ndef is_rotated(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return True\n    return False\n\ndef find_pivot(arr):\n    # Find the pivot element using the first element as the pivot\n    return arr[0]"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] > arr[n-1-i]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    while n > 1:\n        if arr[n-1] < arr[0]:\n            count += n\n            arr[0], arr[n-1] = arr[n-1], arr[0]\n        n -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)   \n    # Check if array is already sorted   \n    if n == 1 or arr == sorted(arr):   \n        return 0   \n    # Traverse the array from left to right   \n    for i in range(1, n):   \n        # If an element is smaller than the previous element, return 0   \n        if arr[i] < arr[i-1]:   \n            return 0   \n    # If the array is already sorted in descending order, return 0   \n    if arr == sorted(arr, reverse=True):   \n        return 0   \n    # If the array is already sorted in ascending order, return 1   \n    if arr == sorted(arr):   \n        return 1   \n    # If the array is already sorted partially in ascending order, traverse the array from right to left   \n    for i in range(n-2, -1, -1):   \n        # If an element is smaller than the previous element, return the number of rotations required   \n        if arr[i] < arr[i+1]:   \n            return i+1\n    # If the array is not sorted, return -1   \n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i]!= arr[n - i - 1]:\n            count += 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if the number is a perfect square\n    sqrt_n = int(n**0.5)\n    if sqrt_n**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if n is less than or equal to 0\n    if n <= 0:\n        return False\n    # if n is 1, then it is a perfect square\n    if n == 1:\n        return True\n    # loop through all odd numbers between 2 and sqrt(n)\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    # if no odd number was found, then n is a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether a given number is a perfect square or not.\n    \"\"\"\n    # Check whether the given number is 0 or 1\n    if n == 0 or n == 1:\n        return True\n    # Check whether the given number is a perfect square or not\n    else:\n        # Calculate the square root of the given number\n        sqrt_n = int(n ** 0.5)\n        # Check whether the square root is an integer or not\n        if sqrt_n ** 2 == n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if the number is less than 1\n    if n < 1:\n        return False\n    \n    # find the square root of the number using the math module\n    root = int(n ** 0.5)\n    \n    # check if the square of the root is equal to the number\n    if root * root == n:\n        return True\n    \n    # check if the square of the root is less than the number\n    elif root * root < n:\n        return is_perfect_square(root + 1)\n    \n    # if the square of the root is greater than the number, the number is not a perfect square\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    \"\"\"\n    # To check if a number is a perfect square or not, we need to find the square root of the number.\n    # We can use the math module to find the square root of a number.\n    import math\n    sqrt_n = math.sqrt(n)\n    # Now, we need to check whether the square root is an integer or not.\n    # If it is an integer, then it is a perfect square.\n    if sqrt_n == int(sqrt_n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    This function takes an integer input and returns True if it is a perfect square,\n    False otherwise.\n    '''\n\n    # Check if n is already a perfect square\n    if n == int(n ** 0.5) ** 2:\n        return True\n\n    # Initialize variables\n    x = n\n    dx = 0.1\n    i = 0\n\n    # Check if n is an irrational number\n    if x % 1!= 0:\n        return False\n\n    # Check if n is a negative number\n    if x < 0:\n        x = -x\n\n    # Babylonian method\n    while dx > 1e-10:\n        x = x - (x ** 2 - n) / (2 * x)\n        dx = abs(x - x_prev)\n        i += 1\n        x_prev = x\n\n    # If the number is a perfect square, it must have been found within 10 iterations\n    return i < 10"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n\n    :param n: the number to check\n    :return: True if the number is a perfect square, False otherwise\n    \"\"\"\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Function to check whether a given number is a perfect square or not.\n    '''\n\n    # Taking the square root of the given number\n    sqrt_n = int(n ** 0.5)\n\n    # Checking whether the square root is an integer or not\n    if sqrt_n ** 2 == n :\n        return True\n    else :\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Check if the list is empty\n    if len(arr) == 0:\n        return True\n\n    # Initialize a variable to keep track of the product\n    product = 1\n\n    # Iterate through the list\n    for num in arr:\n        # Multiply the current number with the product\n        product *= num\n\n    # Check if the product is even\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # initialize the product and even variables\n    product = 1\n    even = True\n\n    # loop through the list and multiply each element with the product\n    for num in arr:\n        product *= num\n\n    # check if the product is even\n    if product % 2 == 0:\n        even = True\n    else:\n        even = False\n\n    # return the result\n    return even"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n\n    product = 1\n    for num in arr: \n        product *= num\n    \n    if product % 2 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers is even.\")\n    else:\n        print(\"The product of the numbers is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if j == 0:\n                max_sum = lists[i][j]\n                max_list = [lists[i][j]]\n            else:\n                max_sum += lists[i][j]\n                max_list.append(lists[i][j])\n\n            if max_sum > 0:\n                max_sum = 0\n                max_list = []\n\n        if max_sum > 0:\n            max_sum = 0\n            max_list = []\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists[0]\n\n    max_sum = float('-inf')\n    max_list = None\n\n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    Args:\n    lists: a list of lists (where each inner list contains integers)\n\n    Returns:\n    the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = None\n    for inner_list in lists:\n        total = sum(inner_list)\n        if total > max_sum:\n            max_sum = total\n            max_list = inner_list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes in a list of lists and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_index = []\n    \n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_index = [i]\n        elif current_sum == max_sum:\n            max_sum_index.append(i)\n    \n    result = []\n    for i in max_sum_index:\n        result.append(lists[i])\n    \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        temp_sum = 0\n        for j in range(len(lists[i])):\n            temp_sum += lists[i][j]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_list = [lists[i]]\n        elif temp_sum == max_sum:\n            max_list.append(lists[i])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_lists = None\n\n    for l in lists:\n        current_sum = sum(l)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_lists = l\n\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    result = []\n    \n    for lst in lists:\n        total_sum = sum(lst)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            result = lst\n    \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst.sort()\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Calculate the sum of each list\n    sums = [sum(lst) for lst in lists]\n\n    # Find the index of the maximum sum\n    max_index = sums.index(max(sums))\n\n    # Return the list with the maximum sum\n    return lists[max_index]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    i = 0\n    max_length = 0\n    max_start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i - max_start + 1 > max_length:\n                max_length = i - max_start + 1\n                max_start = i\n    return test_str[max_start:max_start+max_length]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 1\n    max_count = 1\n    start_index = 0\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            if not test_str[i-1].isupper():\n                count += 1\n                if count > max_count:\n                    max_count = count\n                    start_index = i-count\n            else:\n                count = 1\n        else:\n            count = 1\n    return test_str[start_index:start_index+max_count], max_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    max_run = 0\n    i = 0\n    \n    while i < len(test_str):\n        if test_str[i].isupper():\n            uppercase_count += 1\n        else:\n            uppercase_count = 0\n        \n        if uppercase_count > max_run:\n            max_run = uppercase_count\n            \n        i += 1\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 1\n    run = 1\n    # Iterate through the string\n    for i in range(1, len(test_str)):\n        # If the character is uppercase, increment run count\n        if test_str[i].isupper():\n            run += 1\n        # If the character is lowercase, reset run count and move to the next character\n        else:\n            run = 1\n        # If the current run is greater than the maximum run, update maximum run\n        if run > max_run:\n            max_run = run\n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    # Initialize variables for current run and maximum run\n    current_run = 0\n    max_run = 0\n    \n    # Iterate over the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase\n        if test_str[i].isupper():\n            # If the current run is greater than the maximum run, update the maximum run\n            if current_run > max_run:\n                max_run = current_run\n            \n            # Reset the current run\n            current_run = 1\n        else:\n            # Increment the current run\n            current_run += 1\n    \n    # Check if the last run is greater than the maximum run\n    if current_run > max_run:\n        max_run = current_run\n    \n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    run_length = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n        else:\n            if uppercase_count > run_length:\n                run_length = uppercase_count\n            uppercase_count = 0\n    if uppercase_count > run_length:\n        run_length = uppercase_count\n    return run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    max_start = 0\n    max_end = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_start = i\n        else:\n            count = 0\n    \n    return test_str[max_start:max_end+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables to store maximum run of uppercase characters and its starting index\n    max_run = \"\"\n    max_run_start = 0\n    \n    # Loop through the string\n    for i in range(len(test_str)):\n        # Check if the current character is uppercase\n        if test_str[i].isupper():\n            # If it is, check if the run of uppercase characters is longer than the current maximum run\n            if len(test_str[i:]) > len(max_run):\n                # If it is, update the maximum run and its starting index\n                max_run = test_str[i:]\n                max_run_start = i\n                \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    run_length = 0\n    current_char = None\n    max_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            if current_char is None:\n                current_char = char\n            elif current_char == char:\n                run_length += 1\n            else:\n                if run_length > max_run:\n                    max_run = run_length\n                run_length = 1\n                current_char = char\n        else:\n            if current_char is not None and run_length > max_run:\n                max_run = run_length\n            run_length = 0\n            current_char = None\n\n    if current_char is not None and run_length > max_run:\n        max_run = run_length\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    uppercase_run = 0\n    curr_run = 0\n\n    # Loop through the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If it is, increment the current run\n            curr_run += 1\n            # If it is the longest run so far, update the variable\n            if curr_run > uppercase_run:\n                uppercase_run = curr_run\n        else:\n            # If it's not uppercase, reset the current run to 0\n            curr_run = 0\n\n    # Return the maximum run of uppercase characters\n    return uppercase_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:  # check if the number is odd\n            return num\n    return None  # if no odd number is found, return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers and returns the first odd number in the list.\n    If there is no odd number in the list, then it returns None.\n    \"\"\"\n    odd_found = False\n    for num in nums:\n        if num % 2!= 0:  # Check if number is odd\n            odd_found = True  # If odd number is found, set a flag to True\n            return num  # Return the number\n    # If no odd number is found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function checks if the given tuples contain the k or not.\n    The function takes in a tuple of integers and an integer K as parameters.\n    The function returns True if the given tuples contain the k, else it returns False.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[K-1] in test_tup[:K]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in range(len(test_tup)-K+1):\n        if all(x == test_tup[i+j] for j in range(K)):\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function takes a tuple and an integer K as input.\n    It checks if the tuple contains the integer K or not.\n\n    Args:\n        test_tup (tuple): A tuple containing multiple integers.\n        K (int): The integer to be searched in the tuple.\n\n    Returns:\n        bool: True if the tuple contains K, False otherwise.\n    \"\"\"\n\n    for num in test_tup:\n        if num == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for num in test_tup:\n        if num == K:\n            count += 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    if len(set(test_tup)) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_count = 0\n    for i in test_tup:\n        if i in K:\n            k_count += 1\n    return k_count == len(K)"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The number of elements in the two tuples must be the same.\")\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                print(\"The element in the second tuple is smaller than the corresponding element in the first tuple.\")\n                return True\n        print(\"All elements in the second tuple are smaller than or equal to their corresponding element in the first tuple.\")\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Loop through the tuples and compare each element\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]